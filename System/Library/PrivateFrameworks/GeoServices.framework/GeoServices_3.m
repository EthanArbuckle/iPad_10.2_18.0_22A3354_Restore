BOOL GEOPDDatasetABStatusIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v13 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v15 = 0;
        while (1)
        {
          v16 = *v2;
          v17 = *(_QWORD *)&a1[v16];
          if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
            break;
          v18 = v17 + 1;
          v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
          *(_QWORD *)&a1[v16] = v18;
          if (v19 < 0 && v15++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v21 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDMapsResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  int v32;
  char v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  int v42;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  char v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  int v58;
  unint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  int v66;
  _BOOL8 v67;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_153:
    v67 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v67;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (a1[*v4])
      goto LABEL_153;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      v11 = v10 + 1;
      if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v11;
      v8 |= (unint64_t)(v12 & 0x7F) << v6;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v13 = v7++ >= 9;
      if (v13)
      {
        v8 = 0;
        v14 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v14 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v15 = v8 & 7;
    if (v14 || v15 == 4)
      goto LABEL_153;
    v17 = v8 >> 3;
    switch((v8 >> 3))
    {
      case 1u:
        if ((v8 & 7) != 0)
          goto LABEL_155;
        v18 = 0;
        do
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
          {
            a1[*v4] = 1;
            goto LABEL_148;
          }
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if ((v22 & 0x80000000) == 0)
            break;
          v23 = v18++ > 8;
        }
        while (!v23);
        goto LABEL_148;
      case 2u:
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
          goto LABEL_155;
        goto LABEL_147;
      case 3u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_155;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_63:
        while (2)
        {
          while (2)
          {
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
              goto LABEL_142;
            v34 = 0;
            v35 = 0;
            v36 = 0;
            while (1)
            {
              v37 = *v2;
              v38 = *(_QWORD *)&a1[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&a1[*v3])
                break;
              v40 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v38);
              *(_QWORD *)&a1[v37] = v39;
              v36 |= (unint64_t)(v40 & 0x7F) << v34;
              if ((v40 & 0x80) == 0)
                goto LABEL_73;
              v34 += 7;
              v13 = v35++ >= 9;
              if (v13)
              {
                v36 = 0;
                v41 = a1[*v4];
                goto LABEL_75;
              }
            }
            a1[*v4] = 1;
LABEL_73:
            v41 = a1[*v4];
            if (a1[*v4])
              v36 = 0;
LABEL_75:
            v42 = v36 & 7;
            if (v41 || v42 == 4)
              goto LABEL_142;
            v44 = v36 >> 3;
            if ((v36 >> 3) == 3)
            {
              if (v42 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1))
                goto LABEL_154;
            }
            else
            {
              if ((_DWORD)v44 == 2)
              {
                if ((v36 & 7) == 0)
                {
                  v45 = 0;
                  do
                  {
                    v46 = *v2;
                    v47 = *(_QWORD *)&a1[v46];
                    v48 = v47 + 1;
                    if (v47 == -1 || v48 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_63;
                    }
                    v49 = *(char *)(*(_QWORD *)&a1[*v5] + v47);
                    *(_QWORD *)&a1[v46] = v48;
                    if ((v49 & 0x80000000) == 0)
                      break;
                    v23 = v45++ > 8;
                  }
                  while (!v23);
                  continue;
                }
                goto LABEL_154;
              }
              if ((_DWORD)v44 != 1)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_154;
                continue;
              }
              if (v42 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
                goto LABEL_154;
            }
            break;
          }
          PBReaderRecallMark();
          continue;
        }
      case 4u:
        if (v15 != 2 || !PBReaderPlaceMark())
          goto LABEL_155;
        objc_msgSend(a1, "position", 0, 0);
        objc_msgSend(a1, "length");
LABEL_104:
        while (2)
        {
          while (2)
          {
            while (2)
            {
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
                goto LABEL_142;
              v50 = 0;
              v51 = 0;
              v52 = 0;
              while (1)
              {
                v53 = *v2;
                v54 = *(_QWORD *)&a1[v53];
                v55 = v54 + 1;
                if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
                  break;
                v56 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v54);
                *(_QWORD *)&a1[v53] = v55;
                v52 |= (unint64_t)(v56 & 0x7F) << v50;
                if ((v56 & 0x80) == 0)
                  goto LABEL_114;
                v50 += 7;
                v13 = v51++ >= 9;
                if (v13)
                {
                  v52 = 0;
                  v57 = a1[*v4];
                  goto LABEL_116;
                }
              }
              a1[*v4] = 1;
LABEL_114:
              v57 = a1[*v4];
              if (a1[*v4])
                v52 = 0;
LABEL_116:
              v58 = v52 & 7;
              if (v57 || v58 == 4)
                goto LABEL_142;
              v60 = v52 >> 3;
              if ((v52 >> 3) == 3)
              {
                if (v58 != 2 || !PBReaderPlaceMark() || !GEOPDComponentIsValid(a1))
                  goto LABEL_154;
                goto LABEL_130;
              }
              if ((_DWORD)v60 == 2)
              {
                if ((v52 & 7) == 0)
                {
                  v61 = 0;
                  do
                  {
                    v62 = *v2;
                    v63 = *(_QWORD *)&a1[v62];
                    v64 = v63 + 1;
                    if (v63 == -1 || v64 > *(_QWORD *)&a1[*v3])
                    {
                      a1[*v4] = 1;
                      goto LABEL_104;
                    }
                    v65 = *(char *)(*(_QWORD *)&a1[*v5] + v63);
                    *(_QWORD *)&a1[v62] = v64;
                    if ((v65 & 0x80000000) == 0)
                      break;
                    v23 = v61++ > 8;
                  }
                  while (!v23);
                  continue;
                }
                goto LABEL_154;
              }
              break;
            }
            if ((_DWORD)v60 != 1)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_154;
              continue;
            }
            break;
          }
          if (v58 == 2 && PBReaderPlaceMark() && GEOPDMapsIdentifierIsValid(a1))
          {
LABEL_130:
            PBReaderRecallMark();
            continue;
          }
          break;
        }
LABEL_154:
        PBReaderRecallMark();
LABEL_155:
        PBReaderRecallMark();
        return 0;
      default:
        if ((_DWORD)v17 == 100)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceQuestionnaireResultIsValid(a1))
            goto LABEL_155;
LABEL_147:
          PBReaderRecallMark();
          goto LABEL_148;
        }
        if ((_DWORD)v17 == 101)
        {
          if (v15 != 2 || !PBReaderPlaceMark())
            goto LABEL_155;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            while (1)
            {
              v27 = *v2;
              v28 = *(_QWORD *)&a1[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&a1[*v3])
                break;
              v30 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v28);
              *(_QWORD *)&a1[v27] = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if ((v30 & 0x80) == 0)
                goto LABEL_42;
              v24 += 7;
              v13 = v25++ >= 9;
              if (v13)
              {
                v26 = 0;
                v31 = a1[*v4];
                goto LABEL_44;
              }
            }
            a1[*v4] = 1;
LABEL_42:
            v31 = a1[*v4];
            if (a1[*v4])
              v26 = 0;
LABEL_44:
            v32 = v26 & 7;
            if (v31 || v32 == 4)
              break;
            if ((v26 >> 3) == 2 || (v26 >> 3) == 1)
            {
              if (v32 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceIsValid(a1))
                goto LABEL_154;
              PBReaderRecallMark();
            }
            else if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
              goto LABEL_154;
            }
          }
LABEL_142:
          v66 = a1[*v4];
          PBReaderRecallMark();
          if (v66)
            goto LABEL_155;
          goto LABEL_147;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_155;
LABEL_148:
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
          goto LABEL_153;
        continue;
    }
  }
}

unint64_t GEOTraitsTransitScheduleFilterReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOTraitsTransitScheduleTimeRange *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  char v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  char v50;
  char v51;
  char v52;
  BOOL v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 1;
        v15 = v14 & ~(_BYTE)v10 | v9;
        v16 = v14 | v10;
        v50 = v15;
        v51 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v52 = (v17 == 0) | v16;
        v53 = v16;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v9;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_73;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_73:
      v49 = 1;
      goto LABEL_74;
    }
    v31 = v23 >> 3;
    v32 = v53;
    if ((v52 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
    {
      if (!v32)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 8) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v44 = 16 * *(_BYTE *)(a1 + 60);
        goto LABEL_70;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_90;
      v37 = objc_alloc_init(GEOTraitsTransitScheduleTimeRange);
      if (!GEOTraitsTransitScheduleTimeRangeReadAllFrom((uint64_t)v37, (void *)v3))
        goto LABEL_89;
      PBReaderRecallMark();
      v38 = 40;
LABEL_55:
      v39 = *(void **)(a1 + v38);
      *(_QWORD *)(a1 + v38) = v37;

      --v7;
      goto LABEL_71;
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (!v32)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 2) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v37 = objc_alloc_init(GEOTraitsTransitScheduleModeFilter);
        if (!GEOTraitsTransitScheduleModeFilterReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_89;
        PBReaderRecallMark();
        v38 = 24;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v44 = *(_BYTE *)(a1 + 60) << 6;
LABEL_70:
      v7 += v44 >> 7;
LABEL_71:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_72;
    }
    if ((v50 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_62:
      v43 = PBReaderSkipValueWithTag();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if ((v43 & 1) == 0)
      {
        v49 = 0;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v41 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v40;

    }
    v42 = PBUnknownFieldAdd();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!v42)
    {
      v49 = 0;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v51 & 1 | (v7 != 0)))
      goto LABEL_73;
  }
  if (!v32)
    goto LABEL_62;
  if ((*(_BYTE *)(a1 + 60) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_90;
    v44 = 32 * *(_BYTE *)(a1 + 60);
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_90;
  v37 = objc_alloc_init(GEOTraitsTransitScheduleModeFilter);
  if (GEOTraitsTransitScheduleModeFilterReadAllFrom((uint64_t)v37, (void *)v3))
  {
    PBReaderRecallMark();
    v38 = 32;
    goto LABEL_55;
  }
LABEL_89:

LABEL_90:
  v49 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  if ((v50 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + 60) |= 1u;
LABEL_76:
  if (v53 || (v49 & 1) == 0)
  {
    *(_BYTE *)(a1 + 60) |= 2u;
    *(_BYTE *)(a1 + 60) |= 4u;
    *(_BYTE *)(a1 + 60) |= 8u;
  }
  else if (v17)
  {
    while (1)
    {
      v45 = *v17++;
      v46 = 2;
      switch(v45)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          v46 = 4;
          goto LABEL_82;
        case 3:
          v46 = 8;
LABEL_82:
          *(_BYTE *)(a1 + 60) |= v46;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v49)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v53)
  {
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

BOOL GEOTraitsTransitScheduleModeFilterReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  GEOTraitsTransitScheduleTimeRange *v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_36;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_42;
          v18 = objc_alloc_init(GEOTraitsTransitScheduleTimeRange);
          if (!GEOTraitsTransitScheduleTimeRangeReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_42;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_188756754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleTimeRangeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  int *v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_37;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_37;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 32) |= 2u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v25 = &OBJC_IVAR___GEOTraitsTransitScheduleTimeRange__startTime;
LABEL_35:
          *(_QWORD *)(a1 + *v25) = v20;
          goto LABEL_36;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v23 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v24 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v23;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_38;
LABEL_36:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_37;
      }
      *(_BYTE *)(a1 + 32) |= 1u;
      v21 = *v4;
      v22 = *(_QWORD *)&v3[v21];
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
      {
        v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
        *(_QWORD *)&v3[v21] = v22 + 8;
      }
      else
      {
        v3[*v6] = 1;
        v20 = 0;
      }
      v25 = &OBJC_IVAR___GEOTraitsTransitScheduleTimeRange__duration;
      goto LABEL_35;
    }
LABEL_37:
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_188756A04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDResultSnippetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDResultSnippetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDResultSnippetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDResultSnippetReadAllFrom_initialTag;
  Specified = GEOPDResultSnippetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDResultSnippetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_188756B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDResultSnippetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  BOOL v30;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  GEOPDRating *v42;
  uint64_t v43;
  id v44;
  void *v45;
  int v46;
  void *v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  void *v56;
  char v57;
  char v58;
  __int16 v59;
  char v60;
  char v61;
  char v62;
  char v63;
  int v64;
  __int16 v65;
  void *v66;
  int v68;
  int *v69;
  char v70;
  char v71;
  char v72;
  BOOL v73;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int16 *)(a1 + 96) >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFFBFFF8FFFAFFFELL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 4) & 1)+ ((*(_WORD *)(a1 + 96) >> 7) & 1)+ ((*(_WORD *)(a1 + 96) >> 3) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 4;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v70 = v17;
        v71 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v72 = (v19 == 0) | v18;
        v73 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_105;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      v30 = v24++ >= 9;
      if (v30)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_105:
      v68 = 1;
      goto LABEL_106;
    }
    v33 = v25 >> 3;
    v34 = v73;
    if ((v72 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    switch((int)v33)
    {
      case 1:
        if (!v34)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 96) & 0x40) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 56;
          goto LABEL_59;
        }
        v58 = PBReaderSkipValueWithTag();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v58 & 1) == 0)
          goto LABEL_127;
        v59 = *(_WORD *)(a1 + 96) << 9;
        goto LABEL_102;
      case 2:
        if (!v34)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 96) & 4) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 24;
          goto LABEL_59;
        }
        v60 = PBReaderSkipValueWithTag();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v60 & 1) == 0)
          goto LABEL_127;
        v59 = *(_WORD *)(a1 + 96) << 13;
        goto LABEL_102;
      case 3:
        if (!v34)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 96) & 0x100) != 0)
        {
          v61 = PBReaderSkipValueWithTag();
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v61 & 1) == 0)
            goto LABEL_127;
          v59 = *(_WORD *)(a1 + 96) << 7;
          goto LABEL_102;
        }
        v41 = PBReaderPlaceMark();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v41 & 1) == 0)
          goto LABEL_127;
        v42 = objc_alloc_init(GEOPDRating);
        if (!GEOPDRatingReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        v43 = 72;
        goto LABEL_78;
      case 5:
        if (!v34)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 96) & 0x20) == 0)
        {
          PBReaderReadString();
          v39 = objc_claimAutoreleasedReturnValue();
          v40 = 48;
LABEL_59:
          v47 = *(void **)(a1 + v40);
          *(_QWORD *)(a1 + v40) = v39;

          --v7;
LABEL_85:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          goto LABEL_104;
        }
        v62 = PBReaderSkipValueWithTag();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v62 & 1) == 0)
          goto LABEL_127;
        v59 = *(_WORD *)(a1 + 96) << 10;
        goto LABEL_102;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_86;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        v6 = (int *)MEMORY[0x1E0D82BD8];
        while (2)
        {
          v51 = *v20;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v50 |= (unint64_t)(v54 & 0x7F) << v48;
            if (v54 < 0)
            {
              v48 += 7;
              v30 = v49++ >= 9;
              if (v30)
              {
                LODWORD(v50) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v50) = 0;
LABEL_91:
        *(_DWORD *)(a1 + 92) = v50;
        goto LABEL_104;
      case 8:
        if (!v34 || (*(_WORD *)(a1 + 96) & 0x10) != 0)
          goto LABEL_86;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_127;
        v42 = objc_alloc_init(GEOPDChildPlace);
        if (!GEOPDChildPlaceReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        -[GEOPDResultSnippet _addNoFlagsChildPlace:](a1, v42);
        goto LABEL_84;
      case 9:
        if (!v34)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 96) & 0x80) != 0)
        {
          v63 = PBReaderSkipValueWithTag();
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v63 & 1) == 0)
            goto LABEL_127;
          v59 = *(_WORD *)(a1 + 96) << 8;
LABEL_102:
          v7 += v59 >> 15;
LABEL_103:
          v21 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_104;
        }
        v55 = PBReaderPlaceMark();
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if ((v55 & 1) == 0)
          goto LABEL_127;
        v42 = objc_alloc_init(GEOPDPriceDescription);
        if (GEOPDPriceDescriptionReadAllFrom((uint64_t)v42, (void *)v3))
        {
          PBReaderRecallMark();
          v43 = 64;
LABEL_78:
          v56 = *(void **)(a1 + v43);
          *(_QWORD *)(a1 + v43) = v42;

          --v7;
          goto LABEL_103;
        }
LABEL_126:

LABEL_127:
        v68 = 0;
        v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_107:
        if ((v70 & 1) != 0)
LABEL_108:
          *(_WORD *)(a1 + v69[317]) |= 2u;
        if (v73 || (v68 & 1) == 0)
        {
          *(_WORD *)(a1 + v69[317]) |= 0x40u;
          *(_WORD *)(a1 + v69[317]) |= 4u;
          *(_WORD *)(a1 + v69[317]) |= 0x100u;
          *(_WORD *)(a1 + v69[317]) |= 0x20u;
          *(_WORD *)(a1 + v69[317]) |= 0x10u;
          *(_WORD *)(a1 + v69[317]) |= 0x80u;
          *(_WORD *)(a1 + v69[317]) |= 8u;
        }
        else if (v19)
        {
          while (1)
          {
            v64 = *v19++;
            v65 = 64;
            switch(v64)
            {
              case 0:
                goto LABEL_120;
              case 1:
                goto LABEL_119;
              case 2:
                v65 = 4;
                goto LABEL_119;
              case 3:
                v65 = 256;
                goto LABEL_119;
              case 5:
                v65 = 32;
                goto LABEL_119;
              case 8:
                v65 = 16;
                goto LABEL_119;
              case 9:
                v65 = 128;
                goto LABEL_119;
              case 10:
                v65 = 8;
LABEL_119:
                *(_WORD *)(a1 + v69[317]) |= v65;
                break;
              default:
                continue;
            }
          }
        }
LABEL_120:
        if (v68)
          v3 = *(_BYTE *)(v3 + *v21) == 0;
        else
          v3 = 0;
        if (v73)
        {
          v66 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 10:
        if (!v34 || (*(_WORD *)(a1 + 96) & 8) != 0)
          goto LABEL_86;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_127;
        v42 = objc_alloc_init(GEOPDChildItem);
        if (!GEOPDChildItemReadAllFrom((uint64_t)v42, (void *)v3, v10 & 1))
          goto LABEL_126;
        PBReaderRecallMark();
        -[GEOPDResultSnippet _addNoFlagsChildItem:](a1, v42);
LABEL_84:

        goto LABEL_85;
      default:
        if ((v70 & 1) == 0 || (*(_WORD *)(a1 + 96) & 2) != 0)
        {
LABEL_86:
          v57 = PBReaderSkipValueWithTag();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if ((v57 & 1) == 0)
          {
            v68 = 0;
LABEL_106:
            v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_107;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v6 = (int *)MEMORY[0x1E0D82BD8];
          if (!v46)
          {
            v68 = 0;
            v69 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
            goto LABEL_108;
          }
        }
LABEL_104:
        if (!(v71 & 1 | (v7 != 0)))
          goto LABEL_105;
        continue;
    }
  }
}

unsigned __int8 *AddrObjGoogle::protobuf::internal::ExtensionSet::Extension::SerializeFieldWithCachedSizesToArray(AddrObjGoogle::protobuf::internal::ExtensionSet::Extension *this, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  uint64_t v12;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v13;
  unsigned __int8 v14;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  std::string *v20;
  int v21;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v25;
  unsigned __int8 *v26;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v27;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v31;
  unsigned __int8 *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unsigned __int8 *v36;
  _QWORD *v37;
  uint64_t v38;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v69;
  unsigned __int8 v70;
  unsigned int v71;
  int v72;
  _BYTE *v73;
  _QWORD *v74;
  uint64_t v75;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v76;
  unsigned __int8 v77;
  unint64_t v78;
  _BYTE *v79;
  _QWORD *v80;
  uint64_t v81;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v82;
  unsigned __int8 v83;
  unint64_t v84;
  _BYTE *v85;
  _QWORD *v86;
  uint64_t v87;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v88;
  unsigned __int8 v89;
  unint64_t v90;
  _BYTE *v91;
  unsigned __int8 *v92;
  _QWORD *v93;
  uint64_t v94;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v95;
  unsigned __int8 v96;
  unsigned int v97;
  uint64_t v98;
  _BYTE *v99;
  _QWORD *v100;
  uint64_t v101;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v102;
  unsigned __int8 v103;
  unsigned int v104;
  int v105;
  _BYTE *v106;
  _QWORD *v107;
  uint64_t v108;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v109;
  unsigned __int8 v110;
  char v111;
  _BYTE *v112;
  _QWORD *v113;
  uint64_t v114;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v115;
  unsigned __int8 v116;
  unsigned int v117;
  uint64_t v118;
  _BYTE *v119;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v120;
  _BYTE *v121;
  int v122;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v123;
  const void *v124;
  _QWORD *v125;
  uint64_t v126;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v127;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v128;
  unsigned int v129;
  char v130;
  uint64_t v131;
  _BYTE *v132;
  _BYTE *v133;
  _QWORD *v134;
  uint64_t v135;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v136;
  unsigned __int8 v137;
  unsigned int v138;
  uint64_t v139;
  _BYTE *v140;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v141;
  unsigned __int8 *v142;
  _BYTE *v143;
  _QWORD *v144;
  uint64_t v145;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v146;
  unsigned __int8 v147;
  unsigned int v148;
  uint64_t v149;
  _BYTE *v150;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v151;
  _BYTE *v152;
  int v153;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v154;
  const void *v155;
  _QWORD *v156;
  uint64_t v157;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v158;
  unsigned __int8 v159;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v160;
  _BYTE *v161;
  _QWORD *v162;
  uint64_t v163;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v164;
  unsigned __int8 v165;
  unint64_t v166;
  _BYTE *v167;
  unsigned __int8 *v168;
  _QWORD *v169;
  uint64_t v170;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v171;
  unsigned __int8 v172;
  unsigned int v173;
  int v174;
  _BYTE *v175;
  _QWORD *v176;
  uint64_t v177;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v178;
  unsigned __int8 v179;
  unsigned int v180;
  uint64_t v181;
  _BYTE *v182;
  _QWORD *v183;
  uint64_t v184;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v185;
  unsigned __int8 v186;
  int v187;
  _BYTE *v188;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v189;
  _QWORD *v190;
  uint64_t v191;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v192;
  unsigned __int8 v193;
  uint64_t v194;
  _BYTE *v195;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v196;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v197;
  unsigned __int8 *v198;
  uint64_t v199;
  unsigned int v200;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v201;
  unsigned __int8 *v202;
  uint64_t v203;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v204;
  unsigned __int8 *v205;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v206;
  int v207;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v208;
  uint64_t v209;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v210;
  unsigned __int8 *result;
  unint64_t v212;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v213;
  _BYTE *v214;
  int v215;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v216;
  const void *v217;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v218;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v219;
  unsigned __int8 *v220;
  _BYTE *v221;
  unsigned __int8 v222;
  char v223;
  std::string v224[2];

  v4 = a3;
  if (*((_BYTE *)this + 9))
  {
    if (*((_BYTE *)this + 11))
    {
      if (*((_DWORD *)this + 3))
      {
        v6 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
        if (v6 > 0x7F)
        {
          if (v6 >> 14)
          {
            v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v6, a3, a3);
          }
          else
          {
            *a3 = (8 * a2) | 0x82;
            a3[1] = (8 * a2) >> 7;
            v7 = a3 + 2;
          }
        }
        else
        {
          *a3 = (8 * a2) | 2;
          v7 = a3 + 1;
        }
        v18 = *((int *)this + 3);
        if ((v18 & 0x80000000) != 0)
        {
          v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v18, v7, a3);
        }
        else
        {
          if (v18 <= 0x7F)
          {
            *v7 = v18;
            v4 = v7 + 1;
            goto LABEL_29;
          }
          v19 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v18, v7, a3);
        }
        v4 = v19;
LABEL_29:
        switch(*((_BYTE *)this + 8))
        {
          case 1:
            v45 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v46 = 0;
              do
              {
                *(_QWORD *)v4 = *(_QWORD *)(*v45 + 8 * v46);
                v4 += 8;
                ++v46;
                v45 = *(_QWORD **)this;
              }
              while (v46 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 2:
            v47 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v48 = 0;
              do
              {
                *(_DWORD *)v4 = *(_DWORD *)(*v47 + 4 * v48);
                v4 += 4;
                ++v48;
                v47 = *(_QWORD **)this;
              }
              while (v48 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 3:
            v49 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v50 = 0;
              do
              {
                v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(*(_QWORD *)(*v49 + 8 * v50++), v4, a3);
                v49 = *(_QWORD **)this;
              }
              while (v50 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 4:
            v51 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v52 = 0;
              do
              {
                v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(*(_QWORD *)(*v51 + 8 * v52++), v4, a3);
                v51 = *(_QWORD **)this;
              }
              while (v52 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 5:
            v33 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) < 1)
              return v4;
            v34 = 0;
            while (1)
            {
              v35 = *(int *)(*v33 + 4 * v34);
              if ((v35 & 0x80000000) != 0)
                break;
              if (v35 > 0x7F)
              {
                v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v35, v4, a3);
                goto LABEL_50;
              }
              *v4++ = v35;
LABEL_51:
              ++v34;
              v33 = *(_QWORD **)this;
              if (v34 >= *(int *)(*(_QWORD *)this + 8))
                return v4;
            }
            v36 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v35, v4, a3);
LABEL_50:
            v4 = v36;
            goto LABEL_51;
          case 6:
            v53 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v54 = 0;
              do
              {
                *(_QWORD *)v4 = *(_QWORD *)(*v53 + 8 * v54);
                v4 += 8;
                ++v54;
                v53 = *(_QWORD **)this;
              }
              while (v54 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 7:
            v55 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v56 = 0;
              do
              {
                *(_DWORD *)v4 = *(_DWORD *)(*v55 + 4 * v56);
                v4 += 4;
                ++v56;
                v55 = *(_QWORD **)this;
              }
              while (v56 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 8:
            v57 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v58 = 0;
              do
              {
                v4[v58] = *(_BYTE *)(*v57 + v58);
                ++v58;
                v57 = *(_QWORD **)this;
              }
              while (v58 < *(int *)(*(_QWORD *)this + 8));
              v4 += v58;
            }
            return v4;
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
            AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v224, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/extension_set_heavy.cc", 409);
            v20 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v224, "Non-primitive types can't be packed.");
            AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v223, (AddrObjGoogle::protobuf::internal::LogMessage *)v20);
            AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v224[0].__r_.__value_.__l.__data_);
            return v4;
          case 0xD:
            v37 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v38 = 0;
              do
              {
                v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v37 + 4 * v38);
                if (v39 > 0x7F)
                  v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, v4, a3);
                else
                  *v4++ = v39;
                ++v38;
                v37 = *(_QWORD **)this;
              }
              while (v38 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 0xE:
            v59 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) < 1)
              return v4;
            v60 = 0;
            break;
          case 0xF:
            v40 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v41 = 0;
              do
              {
                *(_DWORD *)v4 = *(_DWORD *)(*v40 + 4 * v41);
                v4 += 4;
                ++v41;
                v40 = *(_QWORD **)this;
              }
              while (v41 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 0x10:
            v63 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v64 = 0;
              do
              {
                *(_QWORD *)v4 = *(_QWORD *)(*v63 + 8 * v64);
                v4 += 8;
                ++v64;
                v63 = *(_QWORD **)this;
              }
              while (v64 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 0x11:
            v42 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v43 = 0;
              do
              {
                v44 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(*v42 + 4 * v43)) ^ (*(int *)(*v42 + 4 * v43) >> 31));
                if (v44 > 0x7F)
                  v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v44, v4, a3);
                else
                  *v4++ = (2 * *(_BYTE *)(*v42 + 4 * v43)) ^ (*(int *)(*v42 + 4 * v43) >> 31);
                ++v43;
                v42 = *(_QWORD **)this;
              }
              while (v43 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          case 0x12:
            v65 = *(_QWORD **)this;
            if (*(int *)(*(_QWORD *)this + 8) >= 1)
            {
              v66 = 0;
              do
              {
                v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * *(_QWORD *)(*v65 + 8 * v66)) ^ (*(uint64_t *)(*v65 + 8 * v66) >> 63), v4, a3);
                ++v66;
                v65 = *(_QWORD **)this;
              }
              while (v66 < *(int *)(*(_QWORD *)this + 8));
            }
            return v4;
          default:
            return v4;
        }
        while (1)
        {
          v61 = *(int *)(*v59 + 4 * v60);
          if ((v61 & 0x80000000) != 0)
            break;
          if (v61 > 0x7F)
          {
            v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v61, v4, a3);
            goto LABEL_106;
          }
          *v4++ = v61;
LABEL_107:
          ++v60;
          v59 = *(_QWORD **)this;
          if (v60 >= *(int *)(*(_QWORD *)this + 8))
            return v4;
        }
        v62 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v61, v4, a3);
LABEL_106:
        v4 = v62;
        goto LABEL_107;
      }
      return v4;
    }
    switch(*((_BYTE *)this + 8))
    {
      case 1:
        v11 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v12 = 0;
          v13 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 1u);
          v14 = (8 * a2) | 0x81;
          v15 = (8 * a2) >> 7;
          do
          {
            v16 = *(_QWORD *)(*v11 + 8 * v12);
            if (v13 > 0x7F)
            {
              if (v13 >> 14)
              {
                v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v13, v4, a3);
              }
              else
              {
                *v4 = v14;
                v4[1] = v15;
                v17 = v4 + 2;
              }
            }
            else
            {
              *v4 = v13;
              v17 = v4 + 1;
            }
            *(_QWORD *)v17 = v16;
            v4 = v17 + 8;
            ++v12;
            v11 = *(_QWORD **)this;
          }
          while (v12 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 2:
        v67 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v68 = 0;
          v69 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 5u);
          v70 = (8 * a2) | 0x85;
          v71 = (8 * a2) >> 7;
          do
          {
            v72 = *(_DWORD *)(*v67 + 4 * v68);
            if (v69 > 0x7F)
            {
              if (v69 >> 14)
              {
                v73 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v69, v4, a3);
              }
              else
              {
                *v4 = v70;
                v4[1] = v71;
                v73 = v4 + 2;
              }
            }
            else
            {
              *v4 = v69;
              v73 = v4 + 1;
            }
            *(_DWORD *)v73 = v72;
            v4 = v73 + 4;
            ++v68;
            v67 = *(_QWORD **)this;
          }
          while (v68 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 3:
        v74 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v75 = 0;
          v76 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v77 = (8 * a2) | 0x80;
          do
          {
            v78 = *(_QWORD *)(*v74 + 8 * v75);
            if (v76 > 0x7F)
            {
              if (v76 >> 14)
              {
                v79 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v76, v4, a3);
              }
              else
              {
                *v4 = v77;
                v4[1] = v76 >> 7;
                v79 = v4 + 2;
              }
            }
            else
            {
              *v4 = v76;
              v79 = v4 + 1;
            }
            v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v78, v79, a3);
            ++v75;
            v74 = *(_QWORD **)this;
          }
          while (v75 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 4:
        v80 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v81 = 0;
          v82 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v83 = (8 * a2) | 0x80;
          do
          {
            v84 = *(_QWORD *)(*v80 + 8 * v81);
            if (v82 > 0x7F)
            {
              if (v82 >> 14)
              {
                v85 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v82, v4, a3);
              }
              else
              {
                *v4 = v83;
                v4[1] = v82 >> 7;
                v85 = v4 + 2;
              }
            }
            else
            {
              *v4 = v82;
              v85 = v4 + 1;
            }
            v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v84, v85, a3);
            ++v81;
            v80 = *(_QWORD **)this;
          }
          while (v81 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 5:
        v86 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) < 1)
          return v4;
        v87 = 0;
        v88 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
        v89 = (8 * a2) | 0x80;
        while (1)
        {
          v90 = *(int *)(*v86 + 4 * v87);
          if (v88 > 0x7F)
          {
            if (v88 >> 14)
            {
              v91 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v88, v4, a3);
              if ((v90 & 0x80000000) != 0)
              {
LABEL_155:
                v92 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v90, v91, a3);
                goto LABEL_156;
              }
            }
            else
            {
              *v4 = v89;
              v4[1] = v88 >> 7;
              v91 = v4 + 2;
              if ((v90 & 0x80000000) != 0)
                goto LABEL_155;
            }
          }
          else
          {
            *v4 = v88;
            v91 = v4 + 1;
            if ((v90 & 0x80000000) != 0)
              goto LABEL_155;
          }
          if (v90 > 0x7F)
          {
            v92 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v90, v91, a3);
LABEL_156:
            v4 = v92;
            goto LABEL_157;
          }
          *v91 = v90;
          v4 = v91 + 1;
LABEL_157:
          ++v87;
          v86 = *(_QWORD **)this;
          if (v87 >= *(int *)(*(_QWORD *)this + 8))
            return v4;
        }
      case 6:
        v93 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v94 = 0;
          v95 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 1u);
          v96 = (8 * a2) | 0x81;
          v97 = (8 * a2) >> 7;
          do
          {
            v98 = *(_QWORD *)(*v93 + 8 * v94);
            if (v95 > 0x7F)
            {
              if (v95 >> 14)
              {
                v99 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v95, v4, a3);
              }
              else
              {
                *v4 = v96;
                v4[1] = v97;
                v99 = v4 + 2;
              }
            }
            else
            {
              *v4 = v95;
              v99 = v4 + 1;
            }
            *(_QWORD *)v99 = v98;
            v4 = v99 + 8;
            ++v94;
            v93 = *(_QWORD **)this;
          }
          while (v94 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 7:
        v100 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v101 = 0;
          v102 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 5u);
          v103 = (8 * a2) | 0x85;
          v104 = (8 * a2) >> 7;
          do
          {
            v105 = *(_DWORD *)(*v100 + 4 * v101);
            if (v102 > 0x7F)
            {
              if (v102 >> 14)
              {
                v106 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v102, v4, a3);
              }
              else
              {
                *v4 = v103;
                v4[1] = v104;
                v106 = v4 + 2;
              }
            }
            else
            {
              *v4 = v102;
              v106 = v4 + 1;
            }
            *(_DWORD *)v106 = v105;
            v4 = v106 + 4;
            ++v101;
            v100 = *(_QWORD **)this;
          }
          while (v101 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 8:
        v107 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v108 = 0;
          v109 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v110 = (8 * a2) | 0x80;
          do
          {
            v111 = *(_BYTE *)(*v107 + v108);
            if (v109 > 0x7F)
            {
              if (v109 >> 14)
              {
                v112 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v109, v4, a3);
              }
              else
              {
                *v4 = v110;
                v4[1] = v109 >> 7;
                v112 = v4 + 2;
              }
            }
            else
            {
              *v4 = v109;
              v112 = v4 + 1;
            }
            *v112 = v111;
            v4 = v112 + 1;
            ++v108;
            v107 = *(_QWORD **)this;
          }
          while (v108 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 9:
        v113 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v114 = 0;
          v115 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
          v116 = (8 * a2) | 0x82;
          v117 = (8 * a2) >> 7;
          do
          {
            v118 = *(_QWORD *)(*v113 + 8 * v114);
            if (v115 > 0x7F)
            {
              if (v115 >> 14)
              {
                v119 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v115, v4, a3);
              }
              else
              {
                *v4 = v116;
                v4[1] = v117;
                v119 = v4 + 2;
              }
            }
            else
            {
              *v4 = v115;
              v119 = v4 + 1;
            }
            if (*(char *)(v118 + 23) < 0)
              v120 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v118 + 8);
            else
              v120 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v118 + 23);
            if (v120 > 0x7F)
            {
              v121 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v120, v119, a3);
            }
            else
            {
              *v119 = (_BYTE)v120;
              v121 = v119 + 1;
            }
            v122 = *(char *)(v118 + 23);
            if (v122 >= 0)
              v123 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v118;
            else
              v123 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v118;
            if (v122 >= 0)
              v124 = (const void *)*(unsigned __int8 *)(v118 + 23);
            else
              v124 = (const void *)*(unsigned int *)(v118 + 8);
            v4 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v123, v124, v121, a4);
            ++v114;
            v113 = *(_QWORD **)this;
          }
          while (v114 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0xA:
        v125 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v126 = 0;
          v127 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 3u);
          v222 = (8 * a2) | 0x83;
          v128 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 4u);
          v129 = (8 * a2) >> 7;
          v130 = (8 * a2) | 0x84;
          do
          {
            v131 = *(_QWORD *)(*v125 + 8 * v126);
            if (v127 > 0x7F)
            {
              if (v127 >> 14)
              {
                v132 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v127, v4, a3);
              }
              else
              {
                *v4 = v222;
                v4[1] = v129;
                v132 = v4 + 2;
              }
            }
            else
            {
              *v4 = v127;
              v132 = v4 + 1;
            }
            v133 = (_BYTE *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v131 + 88))(v131, v132);
            if (v128 > 0x7F)
            {
              if (v128 >> 14)
              {
                v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v128, v133, a3);
              }
              else
              {
                *v133 = v130;
                v133[1] = v129;
                v4 = v133 + 2;
              }
            }
            else
            {
              *v133 = (_BYTE)v128;
              v4 = v133 + 1;
            }
            ++v126;
            v125 = *(_QWORD **)this;
          }
          while (v126 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0xB:
        v134 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v135 = 0;
          v136 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
          v137 = (8 * a2) | 0x82;
          v138 = (8 * a2) >> 7;
          do
          {
            v139 = *(_QWORD *)(*v134 + 8 * v135);
            if (v136 > 0x7F)
            {
              if (v136 >> 14)
              {
                v140 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v136, v4, a3);
              }
              else
              {
                *v4 = v137;
                v4[1] = v138;
                v140 = v4 + 2;
              }
            }
            else
            {
              *v4 = v136;
              v140 = v4 + 1;
            }
            v141 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v139 + 96))(v139);
            if (v141 > 0x7F)
            {
              v143 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v141, v140, v142);
            }
            else
            {
              *v140 = (_BYTE)v141;
              v143 = v140 + 1;
            }
            v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v139 + 88))(v139, v143);
            ++v135;
            v134 = *(_QWORD **)this;
          }
          while (v135 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0xC:
        v144 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v145 = 0;
          v146 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
          v147 = (8 * a2) | 0x82;
          v148 = (8 * a2) >> 7;
          do
          {
            v149 = *(_QWORD *)(*v144 + 8 * v145);
            if (v146 > 0x7F)
            {
              if (v146 >> 14)
              {
                v150 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v146, v4, a3);
              }
              else
              {
                *v4 = v147;
                v4[1] = v148;
                v150 = v4 + 2;
              }
            }
            else
            {
              *v4 = v146;
              v150 = v4 + 1;
            }
            if (*(char *)(v149 + 23) < 0)
              v151 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v149 + 8);
            else
              v151 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v149 + 23);
            if (v151 > 0x7F)
            {
              v152 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v151, v150, a3);
            }
            else
            {
              *v150 = (_BYTE)v151;
              v152 = v150 + 1;
            }
            v153 = *(char *)(v149 + 23);
            if (v153 >= 0)
              v154 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v149;
            else
              v154 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v149;
            if (v153 >= 0)
              v155 = (const void *)*(unsigned __int8 *)(v149 + 23);
            else
              v155 = (const void *)*(unsigned int *)(v149 + 8);
            v4 = (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v154, v155, v152, a4);
            ++v145;
            v144 = *(_QWORD **)this;
          }
          while (v145 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0xD:
        v156 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v157 = 0;
          v158 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v159 = (8 * a2) | 0x80;
          do
          {
            v160 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*v156 + 4 * v157);
            if (v158 > 0x7F)
            {
              if (v158 >> 14)
              {
                v161 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v158, v4, a3);
              }
              else
              {
                *v4 = v159;
                v4[1] = v158 >> 7;
                v161 = v4 + 2;
              }
            }
            else
            {
              *v4 = v158;
              v161 = v4 + 1;
            }
            if (v160 > 0x7F)
            {
              v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v160, v161, a3);
            }
            else
            {
              *v161 = (_BYTE)v160;
              v4 = v161 + 1;
            }
            ++v157;
            v156 = *(_QWORD **)this;
          }
          while (v157 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0xE:
        v162 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) < 1)
          return v4;
        v163 = 0;
        v164 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
        v165 = (8 * a2) | 0x80;
        break;
      case 0xF:
        v169 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v170 = 0;
          v171 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 5u);
          v172 = (8 * a2) | 0x85;
          v173 = (8 * a2) >> 7;
          do
          {
            v174 = *(_DWORD *)(*v169 + 4 * v170);
            if (v171 > 0x7F)
            {
              if (v171 >> 14)
              {
                v175 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v171, v4, a3);
              }
              else
              {
                *v4 = v172;
                v4[1] = v173;
                v175 = v4 + 2;
              }
            }
            else
            {
              *v4 = v171;
              v175 = v4 + 1;
            }
            *(_DWORD *)v175 = v174;
            v4 = v175 + 4;
            ++v170;
            v169 = *(_QWORD **)this;
          }
          while (v170 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0x10:
        v176 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v177 = 0;
          v178 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 1u);
          v179 = (8 * a2) | 0x81;
          v180 = (8 * a2) >> 7;
          do
          {
            v181 = *(_QWORD *)(*v176 + 8 * v177);
            if (v178 > 0x7F)
            {
              if (v178 >> 14)
              {
                v182 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v178, v4, a3);
              }
              else
              {
                *v4 = v179;
                v4[1] = v180;
                v182 = v4 + 2;
              }
            }
            else
            {
              *v4 = v178;
              v182 = v4 + 1;
            }
            *(_QWORD *)v182 = v181;
            v4 = v182 + 8;
            ++v177;
            v176 = *(_QWORD **)this;
          }
          while (v177 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0x11:
        v183 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v184 = 0;
          v185 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v186 = (8 * a2) | 0x80;
          do
          {
            v187 = *(_DWORD *)(*v183 + 4 * v184);
            if (v185 > 0x7F)
            {
              if (v185 >> 14)
              {
                v188 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v185, v4, a3);
              }
              else
              {
                *v4 = v186;
                v4[1] = v185 >> 7;
                v188 = v4 + 2;
              }
            }
            else
            {
              *v4 = v185;
              v188 = v4 + 1;
            }
            v189 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * v187) ^ (v187 >> 31));
            if (v189 > 0x7F)
            {
              v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v189, v188, a3);
            }
            else
            {
              *v188 = (2 * v187) ^ (v187 >> 31);
              v4 = v188 + 1;
            }
            ++v184;
            v183 = *(_QWORD **)this;
          }
          while (v184 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      case 0x12:
        v190 = *(_QWORD **)this;
        if (*(int *)(*(_QWORD *)this + 8) >= 1)
        {
          v191 = 0;
          v192 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
          v193 = (8 * a2) | 0x80;
          do
          {
            v194 = *(_QWORD *)(*v190 + 8 * v191);
            if (v192 > 0x7F)
            {
              if (v192 >> 14)
              {
                v195 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v192, v4, a3);
              }
              else
              {
                *v4 = v193;
                v4[1] = v192 >> 7;
                v195 = v4 + 2;
              }
            }
            else
            {
              *v4 = v192;
              v195 = v4 + 1;
            }
            v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray((2 * v194) ^ (v194 >> 63), v195, a3);
            ++v191;
            v190 = *(_QWORD **)this;
          }
          while (v191 < *(int *)(*(_QWORD *)this + 8));
        }
        return v4;
      default:
        return v4;
    }
    while (1)
    {
      v166 = *(int *)(*v162 + 4 * v163);
      if (v164 > 0x7F)
      {
        if (v164 >> 14)
        {
          v167 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v164, v4, a3);
          if ((v166 & 0x80000000) != 0)
          {
LABEL_277:
            v168 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v166, v167, a3);
            goto LABEL_278;
          }
        }
        else
        {
          *v4 = v165;
          v4[1] = v164 >> 7;
          v167 = v4 + 2;
          if ((v166 & 0x80000000) != 0)
            goto LABEL_277;
        }
      }
      else
      {
        *v4 = v164;
        v167 = v4 + 1;
        if ((v166 & 0x80000000) != 0)
          goto LABEL_277;
      }
      if (v166 > 0x7F)
      {
        v168 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v166, v167, a3);
LABEL_278:
        v4 = v168;
        goto LABEL_279;
      }
      *v167 = v166;
      v4 = v167 + 1;
LABEL_279:
      ++v163;
      v162 = *(_QWORD **)this;
      if (v163 >= *(int *)(*(_QWORD *)this + 8))
        return v4;
    }
  }
  if ((*((_BYTE *)this + 10) & 1) != 0)
    return v4;
  switch(*((_BYTE *)this + 8))
  {
    case 1:
    case 6:
    case 0x10:
      v8 = *(_QWORD *)this;
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 1u);
      if (v9 > 0x7F)
      {
        if (v9 >> 14)
        {
          v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x81;
          a3[1] = (8 * a2) >> 7;
          v10 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 1;
        v10 = a3 + 1;
      }
      *(_QWORD *)v10 = v8;
      return v10 + 8;
    case 2:
    case 7:
    case 0xF:
      v21 = *(_DWORD *)this;
      v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 5u);
      if (v22 > 0x7F)
      {
        if (v22 >> 14)
        {
          v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v22, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x85;
          a3[1] = (8 * a2) >> 7;
          v23 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 5;
        v23 = a3 + 1;
      }
      *(_DWORD *)v23 = v21;
      return v23 + 4;
    case 3:
    case 4:
      v24 = *(_QWORD *)this;
      v25 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v25 > 0x7F)
      {
        if (v25 >> 14)
        {
          v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v25, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v25 >> 7;
          v26 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v26 = a3 + 1;
      }
      v212 = v24;
      return AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v212, v26, a3);
    case 5:
    case 0xE:
      v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
      v28 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v28 > 0x7F)
      {
        if (v28 >> 14)
        {
          v29 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v28, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v28 >> 7;
          v29 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v29 = a3 + 1;
      }
      return AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32SignExtendedToArray(v27, v29, a3);
    case 8:
      LOBYTE(v196) = *(_BYTE *)this;
      v197 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v197 > 0x7F)
      {
        if (v197 >> 14)
        {
          v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v197, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v197 >> 7;
          v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v198 = a3 + 1;
      }
      goto LABEL_381;
    case 9:
    case 0xC:
      v30 = *(_QWORD *)this;
      v31 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
      if (v31 > 0x7F)
      {
        if (v31 >> 14)
        {
          v32 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v31, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x82;
          a3[1] = (8 * a2) >> 7;
          v32 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 2;
        v32 = a3 + 1;
      }
      if (*(char *)(v30 + 23) < 0)
        v213 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v30 + 8);
      else
        v213 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v30 + 23);
      if (v213 > 0x7F)
      {
        v214 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v213, v32, a3);
      }
      else
      {
        *v32 = v213;
        v214 = v32 + 1;
      }
      v215 = *(char *)(v30 + 23);
      if (v215 >= 0)
        v216 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v30;
      else
        v216 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v30;
      if (v215 >= 0)
        v217 = (const void *)*(unsigned __int8 *)(v30 + 23);
      else
        v217 = (const void *)*(unsigned int *)(v30 + 8);
      return (unsigned __int8 *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v216, v217, v214, a4);
    case 0xA:
      v199 = *(_QWORD *)this;
      v200 = 8 * a2;
      v201 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 3u);
      if (v201 > 0x7F)
      {
        if (v201 >> 14)
        {
          v202 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v201, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x83;
          a3[1] = v200 >> 7;
          v202 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 3;
        v202 = a3 + 1;
      }
      v198 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v199 + 88))(v199, v202);
      v218 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(v200 | 4);
      if (v218 <= 0x7F)
        goto LABEL_385;
      if (v218 >> 14)
        goto LABEL_387;
      *v198 = v200 | 0x84;
      v198[1] = v200 >> 7;
      return v198 + 2;
    case 0xB:
      v203 = *(_QWORD *)this;
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)v203
                                                                                                 + 112))(v203, a2, a3);
      v204 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((8 * (_DWORD)a2) | 2u);
      if (v204 > 0x7F)
      {
        if (v204 >> 14)
        {
          v205 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v204, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x82;
          a3[1] = (8 * a2) >> 7;
          v205 = a3 + 2;
        }
      }
      else
      {
        *a3 = (8 * a2) | 2;
        v205 = a3 + 1;
      }
      v219 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v203
                                                                                                  + 96))(v203);
      if (v219 > 0x7F)
      {
        v221 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v219, v205, v220);
      }
      else
      {
        *v205 = v219;
        v221 = v205 + 1;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v203 + 88))(v203, v221);
    case 0xD:
      v196 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)this;
      v206 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v206 > 0x7F)
      {
        if (v206 >> 14)
        {
          v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v206, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v206 >> 7;
          v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v198 = a3 + 1;
      }
      if (v196 <= 0x7F)
      {
LABEL_381:
        *v198 = v196;
        return v198 + 1;
      }
      v218 = v196;
LABEL_387:
      result = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v218, v198, a3);
      break;
    case 0x11:
      v207 = *(_DWORD *)this;
      v208 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v208 > 0x7F)
      {
        if (v208 >> 14)
        {
          v198 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v208, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v208 >> 7;
          v198 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v198 = a3 + 1;
      }
      v218 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)((2 * v207) ^ (v207 >> 31));
      if (v218 > 0x7F)
        goto LABEL_387;
LABEL_385:
      *v198 = v218;
      return v198 + 1;
    case 0x12:
      v209 = *(_QWORD *)this;
      v210 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)(8 * a2);
      if (v210 > 0x7F)
      {
        if (v210 >> 14)
        {
          v26 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v210, a3, a3);
        }
        else
        {
          *a3 = (8 * a2) | 0x80;
          a3[1] = v210 >> 7;
          v26 = a3 + 2;
        }
      }
      else
      {
        *a3 = 8 * a2;
        v26 = a3 + 1;
      }
      v212 = (2 * v209) ^ (v209 >> 63);
      return AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v212, v26, a3);
    default:
      return v4;
  }
  return result;
}

void sub_188758A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::GetCachedSize(addr_obj::V2AddressObjectProto *this)
{
  return *((unsigned int *)this + 34);
}

void ___initStorage_block_invoke(uint64_t a1)
{
  _BOOL4 v1;
  __objc2_class **v2;
  id v3;
  void *v4;

  v1 = *(_BYTE *)(a1 + 32) == 0;
  v2 = off_1E1BEC268;
  if (*(_BYTE *)(a1 + 32))
    v2 = off_1E1BEC260;
  v3 = objc_alloc_init(*v2);
  v4 = (void *)_MergedGlobals_291[v1];
  _MergedGlobals_291[v1] = (uint64_t)v3;

}

void ___initStorage_block_invoke_0()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v9;
  BOOL v10;
  void *v11;
  id v12;
  GEOConfigPersistence *v13;
  GEOConfigPersistence *v14;
  void *v15;
  void *v16;
  void *v17;
  int v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id *v25;
  void *v26;
  void *v27;
  void *v28;
  GEOConfigPersistence *v29;
  id *v30;
  void *v31;
  id *v32;
  void *v33;
  id v34;
  id v35[2];

  v35[1] = *(id *)MEMORY[0x1E0C80C00];
  +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 4);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("GEODefaultsStore.db"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 32800);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v4, "fileExistsAtPath:", v3) & 1) == 0)
  {
    v34 = (id)*MEMORY[0x1E0CB2AA8];
    v35[0] = &unk_1E1E81430;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v35, &v34, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringByDeletingLastPathComponent");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v7, 1, v5, 0);

  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "fileExistsAtPath:", v3);

  if (!+[GEOSQLiteDB migrateAllDBFilesFrom:to:](GEOSQLiteDB, "migrateAllDBFilesFrom:to:", v1, v3)
    || (v10 = +[GEOSQLiteDB migrateAllDBFilesFrom:to:](GEOSQLiteDB, "migrateAllDBFilesFrom:to:", v2, v3),
        v11 = v3,
        !v10))
  {
    v11 = v1;
  }
  v12 = v11;
  v13 = -[GEOConfigPersistence initWithDBPath:]([GEOConfigPersistence alloc], "initWithDBPath:", v12);

  if ((v9 & 1) == 0)
  {
    v14 = v13;
    +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 4);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "stringByAppendingPathComponent:", CFSTR("GEOCacheStore.plist"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = objc_msgSend(v17, "fileExistsAtPath:", v16);

    if (!v18)
    {
LABEL_13:

      goto LABEL_14;
    }
    v19 = objc_alloc(MEMORY[0x1E0C99D80]);
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:", v16);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v35[0] = 0;
    v21 = (void *)objc_msgSend(v19, "initWithContentsOfURL:error:", v20, v35);
    v22 = v35[0];

    if (v21)
    {
      -[GEOConfigPersistence setDefault:forKeyPath:](v14, "setDefault:forKeyPath:", v21, CFSTR("/"));
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = v22;
      objc_msgSend(v23, "removeItemAtPath:error:", v16, &v34);
      v24 = v34;

      v22 = v24;
    }
    else
    {
      if (v22)
        goto LABEL_12;
      objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      v34 = 0;
      objc_msgSend(v23, "removeItemAtPath:error:", v16, &v34);
      v22 = v34;
    }

LABEL_12:
    goto LABEL_13;
  }
LABEL_14:
  v25 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageSQLite alloc], (void *)7, v13);
  v26 = (void *)qword_1ECDBC708;
  qword_1ECDBC708 = (uint64_t)v25;

  +[GEOPlatform sharedPlatform](GEOPlatform, "sharedPlatform");
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v27, "supportsMultiUser") & 1) != 0)
  {
    +[GEOFilePaths pathFor:](GEOFilePaths, "pathFor:", 31);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = -[GEOConfigPersistence initWithDBPath:]([GEOConfigPersistence alloc], "initWithDBPath:", v28);

  }
  else
  {
    v29 = v13;
  }

  v30 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageSQLite alloc], (void *)6, v29);
  v31 = (void *)_MergedGlobals_298;
  _MergedGlobals_298 = (uint64_t)v30;

  v32 = -[GEOConfigStorageSQLiteBase initWithSource:persister:]((id *)[GEOConfigStorageXPC alloc], (void *)8, v29);
  v33 = (void *)qword_1ECDBC710;
  qword_1ECDBC710 = (uint64_t)v32;

}

unint64_t GEOResourcesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 484))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOResourcesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 488));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 480) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 484) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOResourcesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOResourcesReadAllFrom_initialTag;
  Specified = GEOResourcesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOResourcesCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 488));
  return Specified;
}

void sub_188759458(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOResourcesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64x2_t v12;
  int8x16_t v13;
  uint32x4_t v14;
  unsigned int v15;
  unsigned int v16;
  int8x8_t v17;
  int8x8_t v18;
  int8x8_t v19;
  unsigned __int32 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int *v25;
  int *v26;
  int *v27;
  int *v28;
  int *v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  int v37;
  unint64_t v39;
  BOOL v40;
  int *v41;
  int v42;
  int v43;
  BOOL v44;
  GEOTileGroup *v45;
  id v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  void *v62;
  int v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 488));
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 484);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 480));
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)(a1 + 496);
  v12 = (uint64x2_t)vdupq_n_s64(v11);
  v13.i64[0] = 0x100000001;
  v13.i64[1] = 0x100000001;
  v14 = (uint32x4_t)vdupq_n_s32(v11);
  v15 = (BYTE4(v11) & 1)
      + ((v11 >> 1) & 1)
      + vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD100), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD0F0)), v13), (int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CCD120), v13)));
  v16 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CCD0E0), v13))
      + (v11 >> 31)
      + vaddvq_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD0B0), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD0A0)), v13), (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD0D0), (int32x4_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD0C0)), v13)));
  v17.i32[0] = v11 >> 40;
  v17.i32[1] = BYTE3(v11);
  v18.i32[0] = HIWORD(v11);
  v13.i32[0] = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)xmmword_189CCD110), v13));
  v18.i32[1] = v11 >> 30;
  v19.i32[0] = v11 >> 50;
  v19.i32[1] = v11 >> 20;
  v13.i32[1] = (v11 & 0x200000000000000) != 0;
  *(int32x2_t *)v12.i8 = vadd_s32(vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFEAFFFFFFE7), (int8x8_t)0x100000001), (int32x2_t)vand_s8(v17, (int8x8_t)0x100000001)), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFCFFFFFFF9), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12,
                                                                                 (uint64x2_t)xmmword_189CCD130)),
                                                (int8x8_t)0x100000001)),
                                 vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF0FFFFFFF7), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD140)), (int8x8_t)0x100000001)))), vadd_s32(vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFF3FFFFFFEELL), (int8x8_t)0x100000001), (int32x2_t)vand_s8(
                                                (int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD150)), (int8x8_t)0x100000001)), vadd_s32((int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD160)), (int8x8_t)0x100000001), (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFE3FFFFFFEBLL), (int8x8_t)0x100000001))), vadd_s32(vadd_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8,
                                                            (uint32x2_t)0xFFFFFFF8FFFFFFF4),
                                                (int8x8_t)0x100000001),
                                   vadd_s32((int32x2_t)vand_s8(v18, (int8x8_t)0x100000001), (int32x2_t)vand_s8(v19, (int8x8_t)0x100000001))), (int32x2_t)vand_s8((int8x8_t)vmovn_s64((int64x2_t)vshlq_u64(v12, (uint64x2_t)xmmword_189CCD170)), (int8x8_t)0x100000001)))), vadd_s32(*(int32x2_t *)v13.i8, (int32x2_t)vand_s8((int8x8_t)vshl_u32(*(uint32x2_t *)v14.i8, (uint32x2_t)0xFFFFFFFDFFFFFFE9), (int8x8_t)0x100000001)));
  v20 = vadd_s32(*(int32x2_t *)v12.i8, vdup_lane_s32(*(int32x2_t *)v12.i8, 1)).u32[0] + v15 + v16;
  while (2)
  {
    v21 = 1;
    v22 = 1;
    v23 = 1;
    switch(a3[v6])
    {
      case -4:
        ++v20;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v22 = v9;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v24 = v20 > 0x2C;
        v65 = v24 & ~(_BYTE)v10 | v8;
        v66 = v24 | v10 | v65;
        if ((((v24 | v10) | v7) & 1) != 0)
          v25 = 0;
        else
          v25 = a3;
        v67 = (v25 == 0) | v24 | v10;
        v68 = v24 | v10;
        v26 = (int *)MEMORY[0x1E0D82BF0];
        v27 = (int *)MEMORY[0x1E0D82BC8];
        v28 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v20;
LABEL_7:
        v21 = v8;
LABEL_8:
        v22 = v9;
        v23 = v10;
LABEL_10:
        ++v6;
        v8 = v21;
        v9 = v22;
        v10 = v23;
        continue;
    }
    break;
  }
  while (2)
  {
    v29 = (int *)MEMORY[0x1E0D82BD8];
    if (*(_QWORD *)(v3 + *v26) >= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) || *(_BYTE *)(v3 + *v27))
      goto LABEL_341;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while (1)
    {
      v33 = *v26;
      v34 = *(_QWORD *)(v3 + v33);
      if (v34 == -1 || v34 >= *(_QWORD *)(v3 + *v29))
        break;
      v35 = *(_BYTE *)(*(_QWORD *)(v3 + *v28) + v34);
      *(_QWORD *)(v3 + v33) = v34 + 1;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0)
        goto LABEL_25;
      v30 += 7;
      v36 = v31++ >= 9;
      if (v36)
      {
        v32 = 0;
        v37 = *(unsigned __int8 *)(v3 + *v27);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v27) = 1;
LABEL_25:
    v37 = *(unsigned __int8 *)(v3 + *v27);
    if (*(_BYTE *)(v3 + *v27))
      v32 = 0;
LABEL_27:
    if (v37 || (v32 & 7) == 4)
    {
LABEL_341:
      v64 = 1;
      goto LABEL_342;
    }
    v39 = v32 >> 3;
    v40 = v68;
    if ((v67 & 1) == 0)
    {
      v41 = v25;
      do
      {
        v43 = *v41++;
        v42 = v43;
        v40 = v43 != 0;
        if (v43)
          v44 = v42 == (_DWORD)v39;
        else
          v44 = 1;
      }
      while (!v44);
    }
    switch((int)v39)
    {
      case 1:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 0x10) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOTileGroup);
        if (!GEOTileGroupReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsTileGroup:](a1, v45);
        goto LABEL_265;
      case 2:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 0x20) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOTileSet);
        if (!GEOTileSetReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsTileSet:](a1, v45);
        goto LABEL_265;
      case 3:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 2) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsStyleSheet:](a1, v45);
        goto LABEL_265;
      case 4:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 8) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsTexture:](a1, v45);
        goto LABEL_265;
      case 5:
        if (!v40 || (*(_BYTE *)(a1 + 498) & 0x80) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsFont:](a1, v45);
        goto LABEL_265;
      case 6:
        if (!v40 || (*(_BYTE *)(a1 + 499) & 2) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsIcon:](a1, v45);
        goto LABEL_265;
      case 8:
        if (!v40 || (*(_BYTE *)(a1 + 501) & 1) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEORegionalResource);
        if (!GEORegionalResourceReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsRegionalResource:](a1, v45);
        goto LABEL_265;
      case 9:
        if (!v40 || (*(_BYTE *)(a1 + 503) & 4) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsXml:](a1, v45);
        goto LABEL_265;
      case 11:
        if (!v40 || (*(_BYTE *)(a1 + 496) & 0x80) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOAttribution);
        if (!GEOAttributionReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsAttribution:](a1, v45);
        goto LABEL_265;
      case 30:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 2) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 80;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 54;
        goto LABEL_338;
      case 31:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 4) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 344;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 21;
        goto LABEL_338;
      case 33:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 368;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 18;
        goto LABEL_338;
      case 37:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 498) & 4) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 152;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 45;
        goto LABEL_338;
      case 38:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 498) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 176;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 42;
        goto LABEL_338;
      case 40:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 2) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 336;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 22;
        goto LABEL_338;
      case 41:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 104;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 51;
        goto LABEL_338;
      case 43:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 376;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 17;
        goto LABEL_338;
      case 44:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 1) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsStyleSheetChecksum:](a1, v45);
        goto LABEL_265;
      case 45:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 4) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsTextureChecksum:](a1, v45);
        goto LABEL_265;
      case 46:
        if (!v40 || (*(_BYTE *)(a1 + 498) & 0x40) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsFontChecksum:](a1, v45);
        goto LABEL_265;
      case 47:
        if (!v40 || (*(_BYTE *)(a1 + 499) & 1) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsIconChecksum:](a1, v45);
        goto LABEL_265;
      case 48:
        if (!v40 || (*(_BYTE *)(a1 + 503) & 2) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsXmlChecksum:](a1, v45);
        goto LABEL_265;
      case 49:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 496) & 8) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 32;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 60;
        goto LABEL_338;
      case 50:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 496) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 40;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 59;
        goto LABEL_338;
      case 51:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 2) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 272;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 30;
        goto LABEL_338;
      case 52:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 312;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 25;
        goto LABEL_338;
      case 53:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 304;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 26;
        goto LABEL_338;
      case 54:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 360;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 19;
        goto LABEL_338;
      case 55:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 8) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 288;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 28;
        goto LABEL_338;
      case 61:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 496) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 56;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 57;
        goto LABEL_338;
      case 62:
        if (!v40 || (*(_BYTE *)(a1 + 496) & 0x20) != 0)
          goto LABEL_266;
        PBReaderReadString();
        v45 = (GEOTileGroup *)objc_claimAutoreleasedReturnValue();
        if (v45)
          -[GEOResources _addNoFlagsAnnouncementsSupportedLanguages:](a1, v45);
        goto LABEL_265;
      case 64:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 498) & 8) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 160;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 44;
        goto LABEL_338;
      case 65:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 296;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 27;
        goto LABEL_338;
      case 66:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 502) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_412;
          v59 = *(_QWORD *)(a1 + 496) << 8;
LABEL_338:
          v6 += v59 >> 63;
          goto LABEL_339;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOVersionManifest);
        if (GEOVersionManifestReadAllFrom(v45, (void *)v3))
        {
          PBReaderRecallMark();
          v51 = *(void **)(a1 + 448);
          *(_QWORD *)(a1 + 448) = v45;
LABEL_244:

          --v6;
LABEL_339:
          v27 = (int *)MEMORY[0x1E0D82BC8];
LABEL_340:
          v28 = (int *)MEMORY[0x1E0D82BB8];
          if (!(v66 & 1 | (v6 != 0)))
            goto LABEL_341;
          continue;
        }
LABEL_411:

LABEL_412:
        v64 = 0;
        v27 = (int *)MEMORY[0x1E0D82BC8];
LABEL_342:
        if ((v65 & 1) != 0)
LABEL_343:
          *(_QWORD *)(a1 + 496) |= 2uLL;
        if (v68 & 1 | ((v64 & 1) == 0))
        {
          *(_QWORD *)(a1 + 496) |= 0x7FFFFFFFFFFFFFCuLL;
        }
        else if (v25)
        {
          while (1)
          {
            v60 = *v25++;
            v61 = 0x10000000000000;
            switch(v60)
            {
              case 0:
                goto LABEL_405;
              case 1:
                goto LABEL_404;
              case 2:
                v61 = 0x20000000000000;
                goto LABEL_404;
              case 3:
                v61 = 0x2000000000000;
                goto LABEL_404;
              case 4:
                v61 = 0x8000000000000;
                goto LABEL_404;
              case 5:
                v61 = 0x800000;
                goto LABEL_404;
              case 6:
                v61 = 0x2000000;
                goto LABEL_404;
              case 8:
                v61 = 0x10000000000;
                goto LABEL_404;
              case 9:
                v61 = 0x400000000000000;
                goto LABEL_404;
              case 11:
                v61 = 128;
                goto LABEL_404;
              case 30:
                v61 = 512;
                goto LABEL_404;
              case 31:
                v61 = 0x40000000000;
                goto LABEL_404;
              case 33:
                v61 = 0x200000000000;
                goto LABEL_404;
              case 37:
                v61 = 0x40000;
                goto LABEL_404;
              case 38:
                v61 = 0x200000;
                goto LABEL_404;
              case 40:
                v61 = 0x20000000000;
                goto LABEL_404;
              case 41:
                v61 = 4096;
                goto LABEL_404;
              case 43:
                v61 = 0x400000000000;
                goto LABEL_404;
              case 44:
                v61 = 0x1000000000000;
                goto LABEL_404;
              case 45:
                v61 = 0x4000000000000;
                goto LABEL_404;
              case 46:
                v61 = 0x400000;
                goto LABEL_404;
              case 47:
                v61 = 0x1000000;
                goto LABEL_404;
              case 48:
                v61 = 0x200000000000000;
                goto LABEL_404;
              case 49:
                v61 = 8;
                goto LABEL_404;
              case 50:
                v61 = 16;
                goto LABEL_404;
              case 51:
                v61 = 0x200000000;
                goto LABEL_404;
              case 52:
                v61 = 0x4000000000;
                goto LABEL_404;
              case 53:
                v61 = 0x2000000000;
                goto LABEL_404;
              case 54:
                v61 = 0x100000000000;
                goto LABEL_404;
              case 55:
                v61 = 0x800000000;
                goto LABEL_404;
              case 61:
                v61 = 64;
                goto LABEL_404;
              case 62:
                v61 = 32;
                goto LABEL_404;
              case 64:
                v61 = 0x80000;
                goto LABEL_404;
              case 65:
                v61 = 0x1000000000;
                goto LABEL_404;
              case 66:
                v61 = 0x80000000000000;
                goto LABEL_404;
              case 67:
                v61 = 4;
                goto LABEL_404;
              case 68:
                v61 = 0x8000;
                goto LABEL_404;
              case 69:
                v61 = 0x8000000;
                goto LABEL_404;
              case 70:
                v61 = 0x4000000;
                goto LABEL_404;
              case 72:
                v61 = 0x80000000000;
                goto LABEL_404;
              case 73:
                v61 = 0x800000000000;
                goto LABEL_404;
              case 74:
                v61 = 0x20000;
                goto LABEL_404;
              case 75:
                v61 = 0x10000;
                goto LABEL_404;
              case 77:
                v61 = 0x8000000000;
                goto LABEL_404;
              case 78:
                v61 = 0x2000;
                goto LABEL_404;
              case 79:
                v61 = 0x400000000;
                goto LABEL_404;
              case 80:
                v61 = 0x10000000;
                goto LABEL_404;
              case 81:
                v61 = 1024;
                goto LABEL_404;
              case 82:
                v61 = 0x4000;
                goto LABEL_404;
              case 83:
                v61 = 2048;
                goto LABEL_404;
              case 85:
                v61 = 0x100000000000000;
                goto LABEL_404;
              case 88:
                v61 = 0x20000000;
                goto LABEL_404;
              case 89:
                v61 = 0x80000000;
                goto LABEL_404;
              case 91:
                v61 = 256;
                goto LABEL_404;
              case 92:
                v61 = 0x40000000000000;
                goto LABEL_404;
              case 93:
                v61 = 0x40000000;
                goto LABEL_404;
              case 94:
                v61 = 0x100000;
                goto LABEL_404;
              case 95:
                v61 = 0x100000000;
LABEL_404:
                *(_QWORD *)(a1 + 496) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_405:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v27) == 0;
        else
          v3 = 0;
        if ((v68 & 1) != 0)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 67:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 496) & 4) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 24;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 61;
        goto LABEL_338;
      case 68:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 0x80) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 128;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 48;
        goto LABEL_338;
      case 69:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 499) & 8) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 224;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 36;
        goto LABEL_338;
      case 70:
        if (!v40 || (*(_BYTE *)(a1 + 499) & 4) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v45, (void *)v3))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsLocationShiftEnabledRegion:](a1, v45);
        goto LABEL_265;
      case 71:
        if ((v7 & 1) == 0)
          goto LABEL_266;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_QWORD *)(a1 + 496) |= 1uLL;
        while (2)
        {
          v55 = *v26;
          v56 = *(_QWORD *)(v3 + v55);
          if (v56 == -1 || v56 >= *(_QWORD *)(v3 + *v29))
          {
            *(_BYTE *)(v3 + *v27) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v28) + v56);
            *(_QWORD *)(v3 + v55) = v56 + 1;
            v54 |= (unint64_t)(v57 & 0x7F) << v52;
            if (v57 < 0)
            {
              v52 += 7;
              v36 = v53++ >= 9;
              if (v36)
              {
                LODWORD(v54) = 0;
                goto LABEL_271;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v27))
          LODWORD(v54) = 0;
LABEL_271:
        *(_DWORD *)(a1 + 492) = v54;
        goto LABEL_340;
      case 72:
        if (!v40 || (*(_BYTE *)(a1 + 501) & 8) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOResource);
        if (!GEOResourceReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsResource:](a1, v45);
        goto LABEL_265;
      case 73:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 501) & 0x80) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 384;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 16;
        goto LABEL_338;
      case 74:
        if (!v40 || (*(_BYTE *)(a1 + 498) & 2) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEODataSetDescription);
        if (!GEODataSetDescriptionReadAllFrom((uint64_t)v45, (void *)v3))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDataSet:](a1, v45);
        goto LABEL_265;
      case 75:
        if (!v40 || (*(_BYTE *)(a1 + 498) & 1) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEODataSetURLOverride);
        if (!GEODataSetURLOverrideReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDataSetURLOverride:](a1, v45);
        goto LABEL_265;
      case 77:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 0x80) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 320;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 24;
        goto LABEL_338;
      case 78:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 112;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 50;
        goto LABEL_338;
      case 79:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 500) & 4) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 280;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 29;
        goto LABEL_338;
      case 80:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 499) & 0x10) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 232;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 35;
        goto LABEL_338;
      case 81:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 4) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 88;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 53;
        goto LABEL_338;
      case 82:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 0x40) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 120;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 49;
        goto LABEL_338;
      case 83:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 8) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 96;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 52;
        goto LABEL_338;
      case 85:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 503) & 1) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 456;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 7;
        goto LABEL_338;
      case 88:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 499) & 0x20) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 240;
          goto LABEL_243;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 34;
        goto LABEL_338;
      case 89:
        if (!v40 || (*(_BYTE *)(a1 + 499) & 0x80) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOMuninVersion);
        if (!GEOMuninVersionReadAllFrom((uint64_t)v45, (void *)v3))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsMuninVersion:](a1, v45);
        goto LABEL_265;
      case 91:
        if (!v40)
          goto LABEL_266;
        if ((*(_BYTE *)(a1 + 497) & 1) == 0)
        {
          PBReaderReadString();
          v49 = objc_claimAutoreleasedReturnValue();
          v50 = 72;
LABEL_243:
          v51 = *(void **)(a1 + v50);
          *(_QWORD *)(a1 + v50) = v49;
          goto LABEL_244;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_412;
        v59 = *(_QWORD *)(a1 + 496) << 55;
        goto LABEL_338;
      case 92:
        if (!v40 || (*(_BYTE *)(a1 + 502) & 0x40) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOURLInfoSet);
        if (!GEOURLInfoSetReadAllFrom((uint64_t)v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsUrlInfoSet:](a1, v45);
        goto LABEL_265;
      case 93:
        if (!v40 || (*(_BYTE *)(a1 + 499) & 0x40) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOMuninBucket);
        if (!GEOMuninBucketReadAllFrom((uint64_t)v45, (void *)v3))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsMuninBucket:](a1, v45);
        goto LABEL_265;
      case 94:
        if (!v40 || (*(_BYTE *)(a1 + 498) & 0x10) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEODisplayString);
        if (!GEODisplayStringReadAllFrom(v45, (void *)v3, v9 & 1))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsDisplayStrings:](a1, v45);
        goto LABEL_265;
      case 95:
        if (!v40 || (*(_BYTE *)(a1 + 500) & 1) != 0)
          goto LABEL_266;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_412;
        v45 = objc_alloc_init(GEOOfflineMetadata);
        if (!GEOOfflineMetadataReadAllFrom((uint64_t)v45, (void *)v3))
          goto LABEL_411;
        PBReaderRecallMark();
        -[GEOResources _addNoFlagsOfflineMetadata:](a1, v45);
LABEL_265:

        goto LABEL_339;
      default:
        if ((v65 & 1) == 0 || (*(_BYTE *)(a1 + 496) & 2) != 0)
        {
LABEL_266:
          v58 = PBReaderSkipValueWithTag();
          v27 = (int *)MEMORY[0x1E0D82BC8];
          if ((v58 & 1) == 0)
          {
            v64 = 0;
            goto LABEL_342;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v46 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v47 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v46;

          }
          v48 = PBUnknownFieldAdd();
          v27 = (int *)MEMORY[0x1E0D82BC8];
          if (!v48)
          {
            v64 = 0;
            goto LABEL_343;
          }
        }
        goto LABEL_340;
    }
  }
}

void sub_18875CA40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *GEOResourcesIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOResourcesIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 122);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void *get_CTServerConnectionCopyISOForMCCSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr;
  v6 = get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr;
  if (!get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr)
  {
    v1 = (void *)CoreTelephonyLibrary();
    v0 = dlsym(v1, "_CTServerConnectionCopyISOForMCC");
    v4[3] = (uint64_t)v0;
    get_CTServerConnectionCopyISOForMCCSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18875CB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t geo_CTServerConnectionCopyISOForMCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*CTServerConnectionCopyISOForMCCSymbolLoc)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  CTServerConnectionCopyISOForMCCSymbolLoc = (uint64_t (*)(uint64_t, uint64_t, uint64_t))get_CTServerConnectionCopyISOForMCCSymbolLoc();
  if (CTServerConnectionCopyISOForMCCSymbolLoc)
    return CTServerConnectionCopyISOForMCCSymbolLoc(a1, a2, a3);
  dlerror();
  v8 = abort_report_np();
  return __dispatch_work_qos_block_invoke(v8);
}

void __dispatch_work_qos_block_invoke(uint64_t a1)
{
  NSObject *v2;

  objc_msgSend(*(id *)(a1 + 32), "activity");
  v2 = objc_claimAutoreleasedReturnValue();
  os_activity_apply(v2, *(os_block_t *)(a1 + 40));

}

void sub_18875CFFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<`anonymous namespace'::RequesterTileKeys>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  id *v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (id *)(i - 24);
    *(_QWORD *)(a1 + 16) = i - 24;

    objc_destroyWeak(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__split_buffer<`anonymous namespace'::KeyAndPriority>::__split_buffer(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;

  a1[3] = 0;
  a1[4] = a4;
  if (a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(20 * a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[20 * a3];
  *a1 = v7;
  a1[1] = v8;
  a1[2] = v8;
  a1[3] = &v7[20 * a2];
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(`anonymous namespace'::KeyAndPriority const&,`anonymous namespace'::KeyAndPriority const&),`anonymous namespace'::KeyAndPriority*,false>(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  __int128 *v23;
  unint64_t v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  BOOL v32;
  __int128 v33;
  __int128 *v34;
  int v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __n128 v49;
  __int128 v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  BOOL v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  int64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 *v88;
  __int128 v89;
  __int128 v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  BOOL v100;
  uint64_t v101;
  __int128 *v102;
  __int128 v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  __int128 *v107;
  __int128 *v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  __int128 v112;
  int v113;
  __int128 v114;
  int v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v110 = a2 - 20;
  v107 = (__int128 *)(a2 - 60);
  v108 = (__int128 *)(a2 - 40);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 2);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((*a3)((__int128 *)v110, (__int128 *)a1))
        {
          v43 = *(_OWORD *)a1;
          v115 = *(_DWORD *)(a1 + 16);
          v114 = v43;
          v44 = *(_OWORD *)v110;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v110 + 16);
          *(_OWORD *)a1 = v44;
          v45 = v114;
          *(_DWORD *)(v110 + 16) = v115;
          *(_OWORD *)v110 = v45;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v46 = (__int128 *)(a1 + 20);
        v47 = (__int128 *)(a1 + 40);
        v48 = (__int128 *)(a1 + 60);
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a3)(v110, a1 + 60, v49))
        {
          v114 = *v48;
          v50 = v114;
          v115 = *(_DWORD *)(a1 + 76);
          v51 = v115;
          v52 = *(_DWORD *)(v110 + 16);
          *v48 = *(_OWORD *)v110;
          *(_DWORD *)(a1 + 76) = v52;
          *(_DWORD *)(v110 + 16) = v51;
          *(_OWORD *)v110 = v50;
          if ((*a3)((__int128 *)(a1 + 60), (__int128 *)(a1 + 40)))
          {
            v53 = *(_DWORD *)(a1 + 56);
            v54 = *v47;
            *v47 = *v48;
            *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 76);
            *v48 = v54;
            *(_DWORD *)(a1 + 76) = v53;
            if ((*a3)((__int128 *)(a1 + 40), (__int128 *)(a1 + 20)))
            {
              v55 = *(_DWORD *)(a1 + 36);
              v56 = *v46;
              *v46 = *v47;
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(a1 + 56);
              *v47 = v56;
              *(_DWORD *)(a1 + 56) = v55;
              if ((*a3)((__int128 *)(a1 + 20), (__int128 *)a1))
              {
                v57 = *(_OWORD *)a1;
                v115 = *(_DWORD *)(a1 + 16);
                v114 = v57;
                *(_OWORD *)a1 = *v46;
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 36);
                *v46 = v114;
                *(_DWORD *)(a1 + 36) = v115;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 479)
        {
          v58 = (__int128 *)(a1 + 20);
          v59 = a1 == a2 || v58 == (__int128 *)a2;
          v60 = v59;
          if ((a5 & 1) != 0)
          {
            if ((v60 & 1) == 0)
            {
              v61 = 0;
              v62 = a1;
              do
              {
                v63 = (__int128 *)v62;
                v62 = (uint64_t)v58;
                if ((*a3)(v58, v63))
                {
                  v64 = *(_OWORD *)v62;
                  v115 = *(_DWORD *)(v62 + 16);
                  v114 = v64;
                  v65 = v61;
                  while (1)
                  {
                    v66 = a1 + v65;
                    *(_OWORD *)(v66 + 20) = *(_OWORD *)(a1 + v65);
                    *(_DWORD *)(v66 + 36) = *(_DWORD *)(a1 + v65 + 16);
                    if (!v65)
                      break;
                    v65 -= 20;
                    if (((*a3)(&v114, (__int128 *)(v65 + a1)) & 1) == 0)
                    {
                      v67 = a1 + v65 + 20;
                      goto LABEL_78;
                    }
                  }
                  v67 = a1;
LABEL_78:
                  v68 = v114;
                  *(_DWORD *)(v67 + 16) = v115;
                  *(_OWORD *)v67 = v68;
                }
                v58 = (__int128 *)(v62 + 20);
                v61 += 20;
              }
              while (v62 + 20 != a2);
            }
          }
          else if ((v60 & 1) == 0)
          {
            v101 = a1 - 20;
            do
            {
              v102 = (__int128 *)a1;
              a1 = (uint64_t)v58;
              if ((*a3)(v58, v102))
              {
                v103 = *(_OWORD *)a1;
                v115 = *(_DWORD *)(a1 + 16);
                v114 = v103;
                v104 = v101;
                do
                {
                  *(_OWORD *)(v104 + 40) = *(_OWORD *)(v104 + 20);
                  *(_DWORD *)(v104 + 56) = *(_DWORD *)(v104 + 36);
                  v105 = (*a3)(&v114, (__int128 *)v104);
                  v104 -= 20;
                }
                while ((v105 & 1) != 0);
                v106 = v114;
                *(_DWORD *)(v104 + 56) = v115;
                *(_OWORD *)(v104 + 40) = v106;
              }
              v58 = (__int128 *)(a1 + 20);
              v101 += 20;
            }
            while (a1 + 20 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (a1 != a2)
          {
            v69 = (unint64_t)(v12 - 2) >> 1;
            v109 = a2;
            v111 = v69;
            do
            {
              v70 = v69;
              if (v111 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = a1 + 20 * v71;
                if (2 * v69 + 2 < v12 && (*a3)((__int128 *)(a1 + 20 * v71), (__int128 *)(v72 + 20)))
                {
                  v72 += 20;
                  v71 = 2 * v70 + 2;
                }
                v73 = a1 + 20 * v70;
                if (((*a3)((__int128 *)v72, (__int128 *)v73) & 1) == 0)
                {
                  v74 = *(_OWORD *)v73;
                  v115 = *(_DWORD *)(v73 + 16);
                  v114 = v74;
                  do
                  {
                    v75 = v72;
                    v76 = *(_OWORD *)v72;
                    *(_DWORD *)(v73 + 16) = *(_DWORD *)(v72 + 16);
                    *(_OWORD *)v73 = v76;
                    if (v111 < v71)
                      break;
                    v77 = (2 * v71) | 1;
                    v72 = a1 + 20 * v77;
                    v78 = 2 * v71 + 2;
                    if (v78 < v12 && (*a3)((__int128 *)(a1 + 20 * v77), (__int128 *)(v72 + 20)))
                    {
                      v72 += 20;
                      v77 = v78;
                    }
                    v73 = v75;
                    v71 = v77;
                  }
                  while (!(*a3)((__int128 *)v72, &v114));
                  v79 = v114;
                  *(_DWORD *)(v75 + 16) = v115;
                  *(_OWORD *)v75 = v79;
                  a2 = v109;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v80 = v11 / 0x14uLL;
            do
            {
              v81 = 0;
              v82 = *(_OWORD *)a1;
              v113 = *(_DWORD *)(a1 + 16);
              v112 = v82;
              v83 = a1;
              do
              {
                v84 = v83 + 20 * v81 + 20;
                v85 = (2 * v81) | 1;
                v86 = 2 * v81 + 2;
                if (v86 < v80
                  && (*a3)((__int128 *)(v83 + 20 * v81 + 20), (__int128 *)(v83 + 20 * v81 + 40)))
                {
                  v84 += 20;
                  v85 = v86;
                }
                v87 = *(_OWORD *)v84;
                *(_DWORD *)(v83 + 16) = *(_DWORD *)(v84 + 16);
                *(_OWORD *)v83 = v87;
                v83 = v84;
                v81 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v80 - 2) >> 1));
              v88 = (__int128 *)(a2 - 20);
              if (v84 == a2 - 20)
              {
                v91 = a2 - 20;
                v99 = v112;
                *(_DWORD *)(v84 + 16) = v113;
                *(_OWORD *)v84 = v99;
              }
              else
              {
                v89 = *v88;
                *(_DWORD *)(v84 + 16) = *(_DWORD *)(a2 - 4);
                *(_OWORD *)v84 = v89;
                v90 = v112;
                *(_DWORD *)(a2 - 4) = v113;
                v91 = a2 - 20;
                *v88 = v90;
                v92 = v84 - a1 + 20;
                if (v92 >= 21)
                {
                  v93 = (v92 / 0x14uLL - 2) >> 1;
                  v94 = a1 + 20 * v93;
                  if ((*a3)((__int128 *)v94, (__int128 *)v84))
                  {
                    v95 = *(_OWORD *)v84;
                    v115 = *(_DWORD *)(v84 + 16);
                    v114 = v95;
                    do
                    {
                      v96 = v94;
                      v97 = *(_OWORD *)v94;
                      *(_DWORD *)(v84 + 16) = *(_DWORD *)(v94 + 16);
                      *(_OWORD *)v84 = v97;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                      v94 = a1 + 20 * v93;
                      v84 = v96;
                    }
                    while (((*a3)((__int128 *)v94, &v114) & 1) != 0);
                    v98 = v114;
                    *(_DWORD *)(v96 + 16) = v115;
                    *(_OWORD *)v96 = v98;
                  }
                }
              }
              v100 = v80-- <= 2;
              a2 = v91;
            }
            while (!v100);
          }
          return;
        }
        v13 = a2;
        v14 = (unint64_t)v12 >> 1;
        v15 = a1 + 20 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xA01)
        {
        }
        else
        {
          v16 = 5 * v14;
          v17 = *(_OWORD *)a1;
          v115 = *(_DWORD *)(a1 + 16);
          v114 = v17;
          v18 = *(_DWORD *)(v15 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v15;
          *(_DWORD *)(a1 + 16) = v18;
          v19 = v114;
          *(_DWORD *)(v15 + 16) = v115;
          *(_OWORD *)v15 = v19;
        }
        --a4;
        if ((a5 & 1) == 0 && ((*a3)((__int128 *)(a1 - 20), (__int128 *)a1) & 1) == 0)
        {
          v33 = *(_OWORD *)a1;
          v113 = *(_DWORD *)(a1 + 16);
          v112 = v33;
          if (((*a3)(&v112, (__int128 *)v110) & 1) != 0)
          {
            v10 = a1;
            a2 = v13;
            do
              v10 += 20;
            while (((*a3)(&v112, (__int128 *)v10) & 1) == 0);
          }
          else
          {
            v34 = (__int128 *)(a1 + 20);
            a2 = v13;
            do
            {
              v10 = (unint64_t)v34;
              if ((unint64_t)v34 >= v13)
                break;
              v35 = (*a3)(&v112, v34);
              v34 = (__int128 *)(v10 + 20);
            }
            while (!v35);
          }
          v36 = a2;
          if (v10 < a2)
          {
            v36 = a2;
            do
              v36 -= 20;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          while (v10 < v36)
          {
            v37 = *(_OWORD *)v10;
            v115 = *(_DWORD *)(v10 + 16);
            v114 = v37;
            v38 = *(_OWORD *)v36;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v36 + 16);
            *(_OWORD *)v10 = v38;
            v39 = v114;
            *(_DWORD *)(v36 + 16) = v115;
            *(_OWORD *)v36 = v39;
            do
              v10 += 20;
            while (!(*a3)(&v112, (__int128 *)v10));
            do
              v36 -= 20;
            while (((*a3)(&v112, (__int128 *)v36) & 1) != 0);
          }
          v40 = (__int128 *)(v10 - 20);
          if (v10 - 20 != a1)
          {
            v41 = *v40;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v10 - 4);
            *(_OWORD *)a1 = v41;
          }
          a5 = 0;
          v42 = v112;
          *(_DWORD *)(v10 - 4) = v113;
          *v40 = v42;
          continue;
        }
        v20 = 0;
        v21 = *(_OWORD *)a1;
        v113 = *(_DWORD *)(a1 + 16);
        v112 = v21;
        do
          v20 += 20;
        while (((*a3)((__int128 *)(v20 + a1), &v112) & 1) != 0);
        v22 = a1 + v20;
        v23 = (__int128 *)v13;
        v59 = v20 == 20;
        a2 = v13;
        if (v59)
        {
          v23 = (__int128 *)v13;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 = (__int128 *)((char *)v23 - 20);
          }
          while (((*a3)(v23, &v112) & 1) == 0);
        }
        else
        {
          do
            v23 = (__int128 *)((char *)v23 - 20);
          while (!(*a3)(v23, &v112));
        }
        if (v22 >= (unint64_t)v23)
        {
          v29 = v22 - 20;
        }
        else
        {
          v24 = v22;
          v25 = v23;
          do
          {
            v26 = *(_OWORD *)v24;
            v115 = *(_DWORD *)(v24 + 16);
            v114 = v26;
            v27 = *v25;
            *(_DWORD *)(v24 + 16) = *((_DWORD *)v25 + 4);
            *(_OWORD *)v24 = v27;
            v28 = v114;
            *((_DWORD *)v25 + 4) = v115;
            *v25 = v28;
            do
              v24 += 20;
            while (((*a3)((__int128 *)v24, &v112) & 1) != 0);
            do
              v25 = (__int128 *)((char *)v25 - 20);
            while (!(*a3)(v25, &v112));
          }
          while (v24 < (unint64_t)v25);
          v29 = v24 - 20;
        }
        if (v29 != a1)
        {
          v30 = *(_OWORD *)v29;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v29 + 16);
          *(_OWORD *)a1 = v30;
        }
        v31 = v112;
        *(_DWORD *)(v29 + 16) = v113;
        *(_OWORD *)v29 = v31;
        if (v22 < (unint64_t)v23)
        {
LABEL_32:
          a5 = 0;
          v10 = v29 + 20;
          continue;
        }
        v10 = v29 + 20;
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v32)
          goto LABEL_2;
        return;
    }
  }
}

uint64_t FeatureStyleAttributes::poiType(FeatureStyleAttributes *this)
{
  uint64_t v1;
  char v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;

  v1 = *((unsigned __int8 *)this + 33);
  if (!*((_BYTE *)this + 33))
    return 0xFFFFFFFFLL;
  v2 = 0;
  v3 = (unsigned int *)(*(_QWORD *)this + 4);
  v4 = -1;
  do
  {
    v5 = *(v3 - 1);
    if (v5 == 6)
    {
      v4 = *v3;
    }
    else if (v5 == 5)
    {
      v2 |= *v3 == 3;
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  if ((v2 & 1) != 0)
    return v4;
  else
    return 0xFFFFFFFFLL;
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V1AddressObjectProto::Clear(uint64_t **this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  AddrObjGoogle::protobuf::UnknownFieldSet *v3;
  uint64_t *v4;
  int v5;
  AddrObjGoogle::protobuf::UnknownFieldSet *v6;
  uint64_t *v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  uint64_t *v9;
  int v10;
  AddrObjGoogle::protobuf::UnknownFieldSet *v11;
  uint64_t *v12;
  AddrObjGoogle::protobuf::UnknownFieldSet *v13;
  uint64_t *v14;

  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::ExtensionSet::Clear(this + 1);
  if (*((_BYTE *)this + 100))
  {
    if ((*((_BYTE *)this + 100) & 1) != 0)
    {
      v3 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[5];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v3 != result)
      {
        v4 = this[5];
        if (*((char *)v4 + 23) < 0)
        {
          *(_BYTE *)*v4 = 0;
          v4[1] = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *((_BYTE *)v4 + 23) = 0;
        }
      }
    }
    v5 = *((_DWORD *)this + 25);
    if ((v5 & 2) != 0)
    {
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[6];
      if (result)
      {
        result = addr_obj::geo3::Address::Clear(result);
        v5 = *((_DWORD *)this + 25);
      }
    }
    if ((v5 & 4) != 0)
    {
      v6 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[7];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v6 != result)
      {
        v7 = this[7];
        if (*((char *)v7 + 23) < 0)
        {
          *(_BYTE *)*v7 = 0;
          v7[1] = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *((_BYTE *)v7 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 100) & 8) != 0)
    {
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[8];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v8 != result)
      {
        v9 = this[8];
        if (*((char *)v9 + 23) < 0)
        {
          *(_BYTE *)*v9 = 0;
          v9[1] = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *((_BYTE *)v9 + 23) = 0;
        }
      }
    }
    v10 = *((_DWORD *)this + 25);
    if ((v10 & 0x10) != 0)
    {
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[9];
      if (result)
      {
        result = addr_obj::geo3::StructuredAddress::Clear((addr_obj::geo3::StructuredAddress **)result);
        v10 = *((_DWORD *)this + 25);
      }
    }
    if ((v10 & 0x20) != 0)
    {
      v11 = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[10];
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::kEmptyString(result);
      if (v11 != result)
      {
        v12 = this[10];
        if (*((char *)v12 + 23) < 0)
        {
          *(_BYTE *)*v12 = 0;
          v12[1] = 0;
        }
        else
        {
          *(_BYTE *)v12 = 0;
          *((_BYTE *)v12 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)this + 100) & 0x40) != 0)
    {
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)this[11];
      if (result)
        result = addr_obj::geo3::Address::Clear(result);
    }
  }
  v14 = this[4];
  v13 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(this + 4);
  *((_DWORD *)v13 + 17) = 0;
  if (v14)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v13);
  return result;
}

_QWORD *geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::_retain_ptr(_QWORD *a1, uint64_t a2)
{
  id v3;
  void *v4;

  *a1 = &off_1E1BF6460;
  a1[1] = 0;
  v3 = *(id *)(a2 + 8);
  v4 = (void *)a1[1];
  a1[1] = v3;

  return a1;
}

uint64_t _PDPlaceTypeForMapItemPlaceType(int a1)
{
  if ((a1 - 1) > 0x13)
    return 0;
  else
    return dword_189CD7D3C[a1 - 1];
}

void _GEOMurmurHash3_128_realign(const void *a1, size_t size, unsigned int a3, unint64_t *a4)
{
  int v6;
  size_t v8;
  void *v9;
  void *v10;
  NSObject *Log;
  _DWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((int)size >= 1)
  {
    v6 = size;
    v8 = size;
    v9 = malloc_type_malloc(size, 0x61E7D965uLL);
    if (v9)
    {
      v10 = v9;
      memcpy(v9, a1, v8);
      MurmurHash3_x64_128((uint64_t)v10, v6, a3, a4);
      free(v10);
    }
    else
    {
      Log = GEOFindOrCreateLog("com.apple.GeoServices", "GEOMurmurHash3");
      if (os_log_type_enabled(Log, OS_LOG_TYPE_FAULT))
      {
        v12[0] = 67109120;
        v12[1] = v6;
        _os_log_impl(&dword_1885A9000, Log, OS_LOG_TYPE_FAULT, "allocation of %d bytes failed", (uint8_t *)v12, 8u);
      }
    }
  }
}

unint64_t GEOTraitsTransitScheduleFilterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTraitsTransitScheduleFilterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTraitsTransitScheduleFilterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTraitsTransitScheduleFilterReadAllFrom_initialTag;
  Specified = GEOTraitsTransitScheduleFilterReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18875F56C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOSessionIDReadAllFrom(_QWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v25 = 0;
        v26 = 0;
        v27 = 0;
        while (1)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
            break;
          v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
          *(_QWORD *)(a2 + v28) = v30;
          v27 |= (unint64_t)(v31 & 0x7F) << v25;
          if ((v31 & 0x80) == 0)
            goto LABEL_41;
          v25 += 7;
          v15 = v26++ >= 9;
          if (v15)
          {
            v27 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_43:
        a1[1] = v27;
      }
      else if ((v10 >> 3) == 2)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_37;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            v20 = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          v20 = 0;
LABEL_39:
        *a1 = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id GEOResourceManifestURLForConfiguration(void *a1)
{
  GEOResourceManifestConfiguration *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  double Current;
  double v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint8_t v21[16];

  v1 = a1;
  if (!v1)
    v1 = objc_alloc_init(GEOResourceManifestConfiguration);
  GEOResourceManifestURLTokenQueryItems(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)MEMORY[0x1E0C99E98];
  -[GEOResourceManifestConfiguration urlTemplate](v1, "urlTemplate");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "_geo_URLWithString:tokenSubstitutions:", v4, v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", v5, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    _getValue(GeoServicesConfig_ResourceManifestRequestToken, (uint64_t)off_1EDF4D558, 1, 0, 0, 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "length"))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v9 = Current - GEOConfigGetDouble(GeoServicesConfig_ResourceManifestRequestTokenTimestamp, (uint64_t)off_1EDF4D568);
      if (v9 < GEOConfigGetDouble(GeoServicesConfig_ResourceManifestRequestTokenExpirationInterval, (uint64_t)off_1EDF4DB28))
      {
        objc_msgSend(MEMORY[0x1E0C99DE8], "array");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("v"), v7);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "addObject:", v11);

LABEL_12:
        if (GEOConfigGetBOOL(GeoServicesConfig_ManifestSupportsAdditionalMarkets, (uint64_t)off_1EDF4D1E8))
        {
          +[GEOAdditionalEnabledMarkets additionalEnabledMarkets](GEOAdditionalEnabledMarkets, "additionalEnabledMarkets");
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "queryItems");
          v15 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v15, "count"))
          {
            if (!v10)
            {
              objc_msgSend(MEMORY[0x1E0C99DE8], "array");
              v10 = (void *)objc_claimAutoreleasedReturnValue();
            }
            objc_msgSend(v10, "addObjectsFromArray:", v15);
          }

        }
        if (objc_msgSend(v10, "count"))
        {
          objc_msgSend(v6, "queryItems");
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "count");

          if (v17)
          {
            objc_msgSend(v6, "queryItems");
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v19 = (void *)objc_msgSend(v18, "mutableCopy");

            objc_msgSend(v19, "addObjectsFromArray:", v10);
            objc_msgSend(v6, "setQueryItems:", v19);

          }
          else
          {
            objc_msgSend(v6, "setQueryItems:", v10);
          }
        }
        objc_msgSend(v6, "URL");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        goto LABEL_23;
      }
      _setValue(GeoServicesConfig_ResourceManifestRequestToken, (uint64_t)off_1EDF4D558, 0, 0, 0);
      _setValue(GeoServicesConfig_ResourceManifestRequestTokenTimestamp, (uint64_t)off_1EDF4D568, 0, 0, 0);
    }
    v10 = 0;
    goto LABEL_12;
  }
  GEOFindOrCreateLog("com.apple.GeoServices", "ResourceManifest");
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1885A9000, v12, OS_LOG_TYPE_ERROR, "Manifest URL value is not a valid URL", v21, 2u);
  }

  v13 = 0;
LABEL_23:

  return v13;
}

unint64_t GEOPDStorefrontViewReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDStorefrontViewReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDStorefrontViewReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDStorefrontViewReadAllFrom_initialTag;
  Specified = GEOPDStorefrontViewReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDStorefrontViewCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18875FC70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPlacecardLayoutDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOPDModuleConfiguration *v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  int v50;
  int *v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v55 = v18;
        v53 = v19;
        v54 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_62;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_62:
      v50 = 1;
      goto LABEL_63;
    }
    v34 = v26 >> 3;
    v35 = v55;
    if ((v54 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35 && (*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_82;
        v40 = objc_alloc_init(GEOPDModuleConfiguration);
        if (!GEOPDModuleConfigurationReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_81;
        PBReaderRecallMark();
        -[GEOPDPlacecardLayoutData _addNoFlagsModuleConfiguration:](a1, v40);

        goto LABEL_60;
      }
    }
    else if ((v52 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v43 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v42;

      }
      v44 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v44)
      {
        v50 = 0;
        v51 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    v45 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v45 & 1) == 0)
    {
      v50 = 0;
LABEL_63:
      v51 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0)))
      goto LABEL_62;
  }
  if (!v35)
    goto LABEL_56;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_82;
    v8 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
    goto LABEL_60;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_82;
  v40 = objc_alloc_init(GEOPDPlacecardLayoutConfiguration);
  if (GEOPDPlacecardLayoutConfigurationReadAllFrom(v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    v41 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v40;

    --v8;
LABEL_60:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_61;
  }
LABEL_81:

LABEL_82:
  v50 = 0;
  v51 = &OBJC_IVAR___GEOPDGroundViewLabelInfo__startHeading;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_64:
  if ((v52 & 1) == 0)
    goto LABEL_66;
LABEL_65:
  *(_BYTE *)(a1 + v51[230]) |= 1u;
LABEL_66:
  if (v55 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + v51[230]) |= 4u;
    *(_BYTE *)(a1 + v51[230]) |= 2u;
    goto LABEL_75;
  }
  if (v20)
  {
    while (1)
    {
      v47 = *v20++;
      v46 = v47;
      if (v47 == 1)
        break;
      if (v46 == 2)
      {
LABEL_71:
        *(_BYTE *)(a1 + v51[230]) |= v46;
      }
      else if (!v46)
      {
        goto LABEL_75;
      }
    }
    LOBYTE(v46) = 4;
    goto LABEL_71;
  }
LABEL_75:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

unint64_t GEOPDPlacecardLayoutDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPlacecardLayoutDataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPlacecardLayoutDataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPlacecardLayoutDataReadAllFrom_initialTag;
  Specified = GEOPDPlacecardLayoutDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPlacecardLayoutDataCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_188760338(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDPhotoPositionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  uint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  int *v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  void *v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  char v86;
  int v87;
  __int16 v88;
  void *v89;
  GEOPDCameraMetadata *v91;
  char v92;
  char v93;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 116);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 112));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int16 *)(a1 + 132) >> 10) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 132)), (uint16x4_t)0xFFFBFFF8FFFAFFF7), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 132) >> 4) & 1)+ ((*(_WORD *)(a1 + 132) >> 11) & 1)+ ((*(_WORD *)(a1 + 132) >> 7) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 5;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_171;
        v93 = (v16 == 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v92 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_171;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_171:
      if ((v15 & 1) != 0)
      {
        v86 = 1;
        goto LABEL_173;
      }
      if (v16)
      {
        while (1)
        {
          v87 = *v16++;
          v88 = 64;
          switch(v87)
          {
            case 0:
              goto LABEL_186;
            case 2:
              goto LABEL_185;
            case 3:
              v88 = 512;
              goto LABEL_185;
            case 6:
              v88 = 256;
              goto LABEL_185;
            case 8:
              v88 = 32;
              goto LABEL_185;
            case 9:
              v88 = 16;
              goto LABEL_185;
            case 10:
              v88 = 2048;
              goto LABEL_185;
            case 11:
              v88 = 128;
              goto LABEL_185;
            case 12:
              v88 = 1024;
LABEL_185:
              *(_WORD *)(a1 + 132) |= v88;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_186;
    }
    v31 = v22 >> 3;
    v32 = v15;
    if ((v93 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 132) |= 2u;
        while (1)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_127;
          v37 += 7;
          v27 = v38++ >= 9;
          if (v27)
          {
            v39 = 0;
            goto LABEL_129;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_127:
        if (*(_BYTE *)(v3 + *v18))
          v39 = 0;
LABEL_129:
        v76 = 64;
        goto LABEL_138;
      case 2:
        if (!v32 || (*(_WORD *)(a1 + 132) & 0x40) != 0)
        {
          v74 = PBReaderSkipValueWithTag();
          v15 = v92;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v74 & 1) == 0)
            goto LABEL_189;
          goto LABEL_158;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDCameraMetadata);
        if (!GEOPDCameraMetadataReadAllFrom((uint64_t)v91, (void *)v3, v9 & 1))
          goto LABEL_190;
        PBReaderRecallMark();
        -[GEOPDPhotoPosition _addNoFlagsCameraMetadata:](a1, v91);

        goto LABEL_157;
      case 3:
        if (!v32)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = *(_WORD *)(a1 + 132) << 6;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDOrientedPosition);
        if (!GEOPDOrientedPositionReadAllFrom((uint64_t)v91, (void *)v3))
          goto LABEL_190;
        PBReaderRecallMark();
        v45 = 88;
        goto LABEL_121;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 132) |= 8u;
        while (2)
        {
          v49 = *v17;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v27 = v47++ >= 9;
              if (v27)
              {
                LODWORD(v48) = 0;
                goto LABEL_133;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v48) = 0;
LABEL_133:
        v77 = 128;
        goto LABEL_143;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v53 = 0;
        v54 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 132) |= 1u;
        while (2)
        {
          v55 = *v17;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v39 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v27 = v54++ >= 9;
              if (v27)
              {
                v39 = 0;
                goto LABEL_137;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v39 = 0;
LABEL_137:
        v76 = 56;
LABEL_138:
        *(_QWORD *)(a1 + v76) = v39;
        goto LABEL_158;
      case 6:
        if (!v32)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x100) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = *(_WORD *)(a1 + 132) << 7;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDGeographicCoordinate);
        if (!GEOPDGeographicCoordinateReadAllFrom((uint64_t)v91, (void *)v3))
          goto LABEL_190;
        PBReaderRecallMark();
        v45 = 80;
        goto LABEL_121;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_124;
        v59 = 0;
        v60 = 0;
        v48 = 0;
        *(_WORD *)(a1 + 132) |= 4u;
        while (2)
        {
          v61 = *v17;
          v62 = *(_QWORD *)(v3 + v61);
          v63 = v62 + 1;
          if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v48 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v27 = v60++ >= 9;
              if (v27)
              {
                LODWORD(v48) = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v48) = 0;
LABEL_142:
        v77 = 124;
LABEL_143:
        *(_DWORD *)(a1 + v77) = v48;
        goto LABEL_158;
      case 8:
        if (!v32)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = *(_WORD *)(a1 + 132) << 10;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDGroundDataBuild);
        if (!GEOPDGroundDataBuildReadAllFrom((uint64_t)v91, (void *)v3, v9 & 1))
          goto LABEL_190;
        PBReaderRecallMark();
        v45 = 40;
        goto LABEL_121;
      case 9:
        if (!v32 || (*(_WORD *)(a1 + 132) & 0x10) != 0)
          goto LABEL_124;
        if (v29 != 2)
        {
          v79 = 0;
          v80 = 0;
          v81 = 0;
          while (1)
          {
            v82 = *v17;
            v83 = *(_QWORD *)(v3 + v82);
            v84 = v83 + 1;
            if (v83 == -1 || v84 > *(_QWORD *)(v3 + *v6))
              break;
            v85 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v83);
            *(_QWORD *)(v3 + v82) = v84;
            v81 |= (unint64_t)(v85 & 0x7F) << v79;
            if (v85 < 0)
            {
              v79 += 7;
              v27 = v80++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_170;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_170:
          PBRepeatedUInt32Add();
          goto LABEL_157;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_191;
        while (1)
        {
          v65 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          while (1)
          {
            v69 = *v17;
            v70 = *(_QWORD *)(v3 + v69);
            v71 = v70 + 1;
            if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v6))
              break;
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v68 |= (unint64_t)(v72 & 0x7F) << v66;
            if (v72 < 0)
            {
              v66 += 7;
              v27 = v67++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_105;
          }
          *(_BYTE *)(v3 + *v65) = 1;
LABEL_105:
          PBRepeatedUInt32Add();
        }
        PBReaderRecallMark();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v92;
        goto LABEL_158;
      case 10:
        if (!v32)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x800) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = 16 * *(_WORD *)(a1 + 132);
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDOrientedTilePosition);
        if (!GEOPDOrientedTilePositionReadAllFrom((uint64_t)v91, (void *)v3))
          goto LABEL_190;
        PBReaderRecallMark();
        v45 = 104;
        goto LABEL_121;
      case 11:
        if (!v32)
          goto LABEL_124;
        if ((*(_WORD *)(a1 + 132) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = *(_WORD *)(a1 + 132) << 8;
          goto LABEL_156;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOTileCoordinate);
        if (!GEOTileCoordinateReadAllFrom((uint64_t)v91, (void *)v3))
          goto LABEL_190;
        PBReaderRecallMark();
        v45 = 72;
        goto LABEL_121;
      case 12:
        if (!v32)
        {
LABEL_124:
          v75 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v92;
          if ((v75 & 1) == 0)
          {
LABEL_189:
            v86 = 0;
            goto LABEL_173;
          }
LABEL_158:
          if (!(v15 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_171;
          continue;
        }
        if ((*(_WORD *)(a1 + 132) & 0x400) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_191;
          v78 = 32 * *(_WORD *)(a1 + 132);
LABEL_156:
          v7 += v78 >> 15;
LABEL_157:
          v15 = v92;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_158;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_191;
        v91 = objc_alloc_init(GEOPDRigMetrics);
        if (GEOPDRigMetricsReadAllFrom((uint64_t)v91, (void *)v3))
        {
          PBReaderRecallMark();
          v45 = 96;
LABEL_121:
          v73 = *(void **)(a1 + v45);
          *(_QWORD *)(a1 + v45) = v91;

          --v7;
          goto LABEL_157;
        }
LABEL_190:

LABEL_191:
        v86 = 0;
        v15 = v92;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_173:
        *(_WORD *)(a1 + 132) |= 0x40u;
        *(_WORD *)(a1 + 132) |= 0x200u;
        *(_WORD *)(a1 + 132) |= 0x100u;
        *(_WORD *)(a1 + 132) |= 0x20u;
        *(_WORD *)(a1 + 132) |= 0x10u;
        *(_WORD *)(a1 + 132) |= 0x800u;
        *(_WORD *)(a1 + 132) |= 0x80u;
        *(_WORD *)(a1 + 132) |= 0x400u;
        if ((v86 & 1) != 0)
        {
LABEL_186:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_187;
          return v3;
        }
        v3 = 0;
        if ((v15 & 1) == 0)
          return v3;
LABEL_187:
        v89 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        v44 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v92;
        if (!v44)
          goto LABEL_189;
        goto LABEL_158;
    }
  }
}

unint64_t GEOPDPhotoPositionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDPhotoPositionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDPhotoPositionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDPhotoPositionReadAllFrom_initialTag;
  Specified = GEOPDPhotoPositionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDPhotoPositionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_18876116C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGeocodingParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  GEOPDViewportInfo *v50;
  uint64_t v51;
  char v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  __int16 v60;
  int v61;
  __int16 v62;
  void *v63;
  int v65;
  int *v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 84)), (uint16x4_t)0xFFFCFFFAFFFBFFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 84) >> 3) & 1)+ ((*(_WORD *)(a1 + 84) >> 2) & 1));
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v13;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v15 = v11;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 > 3;
        v67 = v17 & ~(_BYTE)v12 | v10;
        v68 = v17 | v12 | v67;
        if ((((v17 | v12) | v9) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v69 = (v18 == 0) | v17 | v12;
        v70 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v10;
LABEL_8:
        v15 = v11;
        v16 = v12;
LABEL_10:
        ++v8;
        v10 = v14;
        v11 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_109;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_109:
      v65 = 1;
      goto LABEL_110;
    }
    v32 = v24 >> 3;
    v33 = v70;
    if ((v69 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if (!v33)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 84) & 0x20) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v38;
          goto LABEL_85;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_129;
        v60 = *(_WORD *)(a1 + 84) << 10;
        goto LABEL_106;
      case 2:
        if ((v9 & 1) == 0)
          goto LABEL_86;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_WORD *)(a1 + 84) |= 1u;
        while (2)
        {
          v46 = *v19;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v29 = v44++ >= 9;
              if (v29)
              {
                LODWORD(v45) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v45) = 0;
LABEL_91:
        *(_DWORD *)(a1 + 76) = v45;
        goto LABEL_108;
      case 3:
        if (!v33)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 84) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_129;
          v60 = *(_WORD *)(a1 + 84) << 8;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_129;
        v50 = objc_alloc_init(GEOPDViewportInfo);
        if (!GEOPDViewportInfoReadAllFrom((uint64_t)v50, (void *)v3))
          goto LABEL_128;
        PBReaderRecallMark();
        v51 = 56;
        goto LABEL_84;
      case 4:
        if (!v33)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 84) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_129;
          v60 = *(_WORD *)(a1 + 84) << 9;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_129;
        v50 = objc_alloc_init(GEOStructuredAddress);
        if (!GEOStructuredAddressReadAllFrom(v50, (void *)v3))
          goto LABEL_128;
        PBReaderRecallMark();
        v51 = 48;
        goto LABEL_84;
      case 5:
        if (!v33)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 84) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_129;
          v60 = *(_WORD *)(a1 + 84) << 11;
          goto LABEL_106;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_129;
        v50 = objc_alloc_init(GEOPDSPunchInHints);
        if (!GEOPDSPunchInHintsReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
          goto LABEL_128;
        PBReaderRecallMark();
        v51 = 32;
        goto LABEL_84;
      case 6:
        if ((v9 & 1) == 0)
          goto LABEL_86;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        *(_WORD *)(a1 + 84) |= 2u;
        while (2)
        {
          v55 = *v19;
          v56 = *(_QWORD *)(v3 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(v3 + *v7))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v56);
            *(_QWORD *)(v3 + v55) = v57;
            v54 |= (unint64_t)(v58 & 0x7F) << v52;
            if (v58 < 0)
            {
              v52 += 7;
              v29 = v53++ >= 9;
              if (v29)
              {
                v54 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v54 = 0;
LABEL_95:
        *(_BYTE *)(a1 + 80) = v54 != 0;
        goto LABEL_108;
      case 7:
        if (!v33)
          goto LABEL_86;
        if ((*(_WORD *)(a1 + 84) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_129;
          v60 = *(_WORD *)(a1 + 84) << 12;
LABEL_106:
          v8 += v60 >> 15;
LABEL_107:
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          goto LABEL_108;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_129;
        v50 = objc_alloc_init(GEOPDAddressResultSubTypeFilter);
        if (GEOPDAddressResultSubTypeFilterReadAllFrom((uint64_t)v50, (void *)v3, v11 & 1))
        {
          PBReaderRecallMark();
          v51 = 24;
LABEL_84:
          v39 = *(void **)(a1 + v51);
          *(_QWORD *)(a1 + v51) = v50;
LABEL_85:

          --v8;
          goto LABEL_107;
        }
LABEL_128:

LABEL_129:
        v65 = 0;
        v66 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
        v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_111:
        if ((v67 & 1) != 0)
LABEL_112:
          *(_WORD *)(a1 + v66[294]) |= 4u;
        if (v70 & 1 | ((v65 & 1) == 0))
        {
          *(_WORD *)(a1 + v66[294]) |= 0x20u;
          *(_WORD *)(a1 + v66[294]) |= 0x80u;
          *(_WORD *)(a1 + v66[294]) |= 0x40u;
          *(_WORD *)(a1 + v66[294]) |= 0x10u;
          *(_WORD *)(a1 + v66[294]) |= 8u;
        }
        else if (v18)
        {
          while (1)
          {
            v61 = *v18++;
            v62 = 32;
            switch(v61)
            {
              case 0:
                goto LABEL_122;
              case 1:
                goto LABEL_121;
              case 3:
                v62 = 128;
                goto LABEL_121;
              case 4:
                v62 = 64;
                goto LABEL_121;
              case 5:
                v62 = 16;
                goto LABEL_121;
              case 7:
                v62 = 8;
LABEL_121:
                *(_WORD *)(a1 + v66[294]) |= v62;
                break;
              default:
                continue;
            }
          }
        }
LABEL_122:
        if (v65)
          v3 = *(_BYTE *)(v3 + *v20) == 0;
        else
          v3 = 0;
        if ((v70 & 1) != 0)
        {
          v63 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v67 & 1) == 0 || (*(_WORD *)(a1 + 84) & 4) != 0)
        {
LABEL_86:
          v59 = PBReaderSkipValueWithTag();
          v7 = (int *)MEMORY[0x1E0D82BD8];
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if ((v59 & 1) == 0)
          {
            v65 = 0;
LABEL_110:
            v66 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
            goto LABEL_111;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v41 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v40;

          }
          v42 = PBUnknownFieldAdd();
          v20 = (int *)MEMORY[0x1E0D82BC8];
          v7 = (int *)MEMORY[0x1E0D82BD8];
          if (!v42)
          {
            v65 = 0;
            v66 = &OBJC_IVAR___GEORawPathGeometry__pathMatcherInstructions;
            goto LABEL_112;
          }
        }
LABEL_108:
        if (!(v68 & 1 | (v8 != 0)))
          goto LABEL_109;
        continue;
    }
  }
}

unint64_t GEOPDGeocodingParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDGeocodingParametersReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDGeocodingParametersReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDGeocodingParametersReadAllFrom_initialTag;
  Specified = GEOPDGeocodingParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDGeocodingParametersCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_188761C00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemInitialRequestDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  GEOPDPlaceRequestParameters *v25;
  void *v26;
  _BOOL8 v27;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v25 = objc_alloc_init(GEOPDPlaceRequestParameters);
          if (!GEOPDPlaceRequestParametersReadAllFrom((uint64_t)v25, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v26 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v25;

        }
        else if ((v12 >> 3) == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v6;
            v23 = *(_QWORD *)&v5[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&v5[*v7])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v23);
            *(_QWORD *)&v5[v22] = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v19 += 7;
            v16 = v20++ >= 9;
            if (v16)
            {
              LODWORD(v21) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8])
            LODWORD(v21) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v21;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v27 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    v27 = 0;
  }
  objc_sync_exit(v5);

  return v27;
}

void sub_188761EB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLatLngE7ReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  int *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_37;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *v6;
            v17 = v3[v16];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = *v6;
        v17 = v3[v16];
        if (v3[v16])
          v10 = 0;
LABEL_15:
        if (v17 || (v10 & 7) == 4)
          goto LABEL_37;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          v19 = *v4;
          v20 = *(_QWORD *)&v3[v19];
          if (v20 <= 0xFFFFFFFFFFFFFFFBLL && (v21 = v20 + 4, v20 + 4 <= *(_QWORD *)&v3[*v5]))
          {
            v22 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v20);
            *(_QWORD *)&v3[v19] = v21;
          }
          else
          {
            v22 = 0;
            v3[v16] = 1;
          }
          v28 = &OBJC_IVAR___GEOLatLngE7__latE7;
LABEL_35:
          *(_DWORD *)(a1 + *v28) = v22;
          goto LABEL_36;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v26 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v27 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v26;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_38;
LABEL_36:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_37;
      }
      v23 = *v4;
      v24 = *(_QWORD *)&v3[v23];
      if (v24 <= 0xFFFFFFFFFFFFFFFBLL && (v25 = v24 + 4, v24 + 4 <= *(_QWORD *)&v3[*v5]))
      {
        v22 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v24);
        *(_QWORD *)&v3[v23] = v25;
      }
      else
      {
        v22 = 0;
        v3[v16] = 1;
      }
      v28 = &OBJC_IVAR___GEOLatLngE7__lngE7;
      goto LABEL_35;
    }
LABEL_37:
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_188762130(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOFormattedStringReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOFormatArgument *v40;
  id v41;
  void *v42;
  int v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 84)), (uint16x4_t)0xFFFCFFFAFFFDFFFELL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 84) & 1)+ ((*(_BYTE *)(a1 + 84) & 2) != 0)+ ((*(_BYTE *)(a1 + 84) & 0x20) != 0));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 3;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_84;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_84:
      v52 = 1;
      goto LABEL_85;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 3:
        if (!v35 || (*(_BYTE *)(a1 + 84) & 8) != 0)
          goto LABEL_75;
        PBReaderReadString();
        v40 = (GEOFormatArgument *)objc_claimAutoreleasedReturnValue();
        if (v40)
          -[GEOFormattedString _addNoFlagsFormatString:](a1, v40);
        goto LABEL_63;
      case 4:
        if (!v35 || (*(_BYTE *)(a1 + 84) & 4) != 0)
          goto LABEL_75;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v40 = objc_alloc_init(GEOFormatArgument);
        if (!GEOFormatArgumentReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_103;
        PBReaderRecallMark();
        -[GEOFormattedString _addNoFlagsFormatArgument:](a1, v40);
        goto LABEL_63;
      case 5:
        if (!v35 || (*(_BYTE *)(a1 + 84) & 0x40) != 0)
          goto LABEL_75;
        PBReaderReadString();
        v40 = (GEOFormatArgument *)objc_claimAutoreleasedReturnValue();
        if (v40)
          -[GEOFormattedString _addNoFlagsSeparator:](a1, v40);
        goto LABEL_63;
      case 6:
        if (!v35 || (*(_BYTE *)(a1 + 84) & 0x10) != 0)
          goto LABEL_75;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v40 = objc_alloc_init(GEOFormatStyle);
        if (!GEOFormatStyleReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_103;
        PBReaderRecallMark();
        -[GEOFormattedString _addNoFlagsFormatStyle:](a1, v40);
LABEL_63:

        goto LABEL_82;
      case 7:
        if (!v35)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 84) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = *(_BYTE *)(a1 + 84) << 6;
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v40 = objc_alloc_init(GEOConditionalFormattedString);
        if (!GEOConditionalFormattedStringReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
          goto LABEL_103;
        PBReaderRecallMark();
        v44 = 24;
        goto LABEL_74;
      case 8:
        if (!v35)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 84) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_104;
          v47 = 4 * *(_BYTE *)(a1 + 84);
LABEL_81:
          v7 += v47 >> 7;
LABEL_82:
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_83:
          if (!(v55 & 1 | (v7 != 0)))
            goto LABEL_84;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v40 = objc_alloc_init(GEOFormattedStringMetaData);
        if (GEOFormattedStringMetaDataReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          v44 = 56;
LABEL_74:
          v45 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v40;

          --v7;
          goto LABEL_82;
        }
LABEL_103:

LABEL_104:
        v52 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
        v53 = &OBJC_IVAR___GEORegionalResourceTileData__flags;
        if ((v54 & 1) != 0)
LABEL_86:
          *(_BYTE *)(a1 + v53[347]) |= 1u;
        if (v57 || (v52 & 1) == 0)
        {
          *(_BYTE *)(a1 + v53[347]) |= 8u;
          *(_BYTE *)(a1 + v53[347]) |= 4u;
          *(_BYTE *)(a1 + v53[347]) |= 0x40u;
          *(_BYTE *)(a1 + v53[347]) |= 0x10u;
          *(_BYTE *)(a1 + v53[347]) |= 2u;
          *(_BYTE *)(a1 + v53[347]) |= 0x20u;
        }
        else if (v20)
        {
          while (1)
          {
            v48 = *v20++;
            v49 = 8;
            switch(v48)
            {
              case 0:
                goto LABEL_97;
              case 3:
                goto LABEL_96;
              case 4:
                v49 = 4;
                goto LABEL_96;
              case 5:
                v49 = 64;
                goto LABEL_96;
              case 6:
                v49 = 16;
                goto LABEL_96;
              case 7:
                v49 = 2;
                goto LABEL_96;
              case 8:
                v49 = 32;
LABEL_96:
                *(_BYTE *)(a1 + v53[347]) |= v49;
                break;
              default:
                continue;
            }
          }
        }
LABEL_97:
        if (v52)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v57)
        {
          v50 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 84) & 1) != 0)
        {
LABEL_75:
          v46 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if ((v46 & 1) == 0)
          {
            v52 = 0;
            goto LABEL_85;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v41;

          }
          v43 = PBUnknownFieldAdd();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if (!v43)
          {
            v52 = 0;
            v53 = &OBJC_IVAR___GEORegionalResourceTileData__flags;
            goto LABEL_86;
          }
        }
        goto LABEL_83;
    }
  }
}

unint64_t GEOFormattedStringReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOFormattedStringReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOFormattedStringReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOFormattedStringReadAllFrom_initialTag;
  Specified = GEOFormattedStringReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOFormattedStringCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_188762A24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOFormatStyleReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_188762CC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t ClearXPCValue(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy_;
  v18 = __Block_byref_object_dispose_;
  v19 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __ClearXPCValue_block_invoke;
  v10[3] = &unk_1E1BFF770;
  v6 = v5;
  v12 = &v14;
  v13 = a3;
  v11 = v6;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("ClearXPCValue"), v10);
  if (a2)
  {
    v8 = (void *)v15[5];
    if (v8)
      *a2 = objc_retainAutorelease(v8);
  }

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_188762DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188763908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188763E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GEOTileRequestBalancer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1887640D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1887645D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, int a13, std::random_device a14, std::random_device a15)
{
  void *v15;
  void *v16;

  if (__p)
    operator delete(__p);
  std::random_device::~random_device(&a14);

  _Unwind_Resume(a1);
}

void sub_188764830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a4);

  _Unwind_Resume(a1);
}

void sub_1887650D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1887651E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18876680C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_188766A2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188766DC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188766F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887670D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767188(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876739C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767450(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767504(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767820(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188767AF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188768500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887685DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887686CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188768E2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188768F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887694A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769604(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887696BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769760(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887698A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876994C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887699F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769A94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769B38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769BF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769C94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769D38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769E80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769F24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188769FDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A094(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A138(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A1F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A2A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A34C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A3F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A4A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A604(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A6BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A760(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A804(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A8A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A944(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876A9E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876C584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876C684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876C7A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876CC10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876CDA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876CE58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876CF64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D12C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D1E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D294(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D348(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D3FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876D4B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876DBB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876DCA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876DD5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876DE10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876E140(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876E264(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876E318(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876E3CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876E9D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876EB90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876ED04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876EDC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876EE7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876EF38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876EFF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876F0B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876F16C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876F228(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876F2E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18876F3A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188770AA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188770B94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188770EB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188770FA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188771054(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18877200C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188772524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887725D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18877268C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_188772F40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1887735B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  os_unfair_lock_s *v16;

  os_unfair_lock_unlock(v16);
  _Unwind_Resume(a1);
}

void sub_1887739F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_188773ADC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

zilch::GeoPolyline::Walker *zilch::GeoPolyline::Walker::Walker(zilch::GeoPolyline::Walker *this, const zilch::GeoPolyline *a2)
{
  char *v3;
  zilch::GeoPolyline *v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  zilch::GeoCoordinates *Point;
  const zilch::GeoCoordinates *v9;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v3 = (char *)this + 20;
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoPolyline::Walker *)((char *)this + 20));
  v4 = *(zilch::GeoPolyline **)this;
  v5 = **(_QWORD ***)this;
  if (v5)
  {
    if (v5[1] == *v5
      || (v6 = zilch::GeoPolyline::getPoint(v4, 0),
          v7 = *(_QWORD *)v6,
          *((_DWORD *)v3 + 2) = v6[2],
          *(_QWORD *)v3 = v7,
          v4 = *(zilch::GeoPolyline **)this,
          (v5 = **(_QWORD ***)this) != 0))
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 2) >= 2)
      {
        Point = (zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(v4, 0);
        v9 = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, 1uLL);
        *((_DWORD *)this + 4) = zilch::GeoCoordinates::distanceTo(Point, v9);
      }
    }
  }
  return this;
}

unint64_t zilch::GeoPolyline::size(zilch::GeoPolyline *this)
{
  if (*(_QWORD *)this)
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2);
  else
    return 0;
}

_DWORD *zilch::GeoPolyline::getPoint(zilch::GeoPolyline *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*(_QWORD *)this)
    return zilch::GeoCoordinates::null(this);
  v2 = **(_QWORD **)this;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*(_QWORD *)this + 8) - v2) >> 2);
  if (v3 <= a2)
    return zilch::GeoCoordinates::null(this);
  v4 = *((_DWORD *)this + 4);
  v5 = v2 + 12 * (v3 + ~a2);
  v6 = v2 + 12 * a2;
  v7 = v6;
  if (v4)
    v7 = v6;
  if (v4 == 1)
    return (_DWORD *)v5;
  else
    return (_DWORD *)v7;
}

BOOL zilch::GeoPolyline::Walker::done(unint64_t **this)
{
  unint64_t v1;

  v1 = **this;
  if (v1)
    v1 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 8) - *(_QWORD *)v1) >> 2);
  return (unint64_t)this[1] + 1 >= v1;
}

uint64_t zilch::GeoPolyline::Walker::position(zilch::GeoPolyline::Walker *this)
{
  return *(_QWORD *)((char *)this + 20);
}

uint64_t zilch::GeoPolyline::Walker::point(zilch::GeoPolyline::Walker *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t zilch::GeoPolyline::Walker::heading(uint64_t **this)
{
  unsigned __int128 v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  int v7;
  int v8;
  zilch::Angle *v9;
  unsigned __int16 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int16 v15;
  __int128 v16;
  unsigned __int128 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  int v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  unsigned __int128 v24;
  unsigned __int16 v25;

  v2 = *((_OWORD *)this + 1);
  v23 = *(_OWORD *)this;
  v24 = v2;
  v21 = v2 >> 32;
  v22 = HIDWORD(v2);
  if (zilch::GeoPolyline::Walker::advance((zilch::GeoPolyline::Walker *)&v23, 0x32u, *(double *)&v2, *(double *)&v23))
  {
    *(_QWORD *)&v16 = *(_QWORD *)((char *)&v24 + 4);
    DWORD2(v16) = HIDWORD(v24);
    zilch::Angle::Angle((zilch::Angle *)&v25, (const zilch::GeoCoordinates *)&v21, (const zilch::GeoCoordinates *)&v16);
    return v25;
  }
  v3 = *this;
  v4 = (std::__shared_weak_count *)(*this)[1];
  v18 = **this;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *((_DWORD *)v3 + 4);
  v20 = v7;
  if (!v7)
  {
    v8 = 1;
    goto LABEL_10;
  }
  if (v7 == 1)
  {
    v8 = 0;
LABEL_10:
    v20 = v8;
  }
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)&v16, (const zilch::GeoPolyline *)&v18);
  v23 = v16;
  v24 = v17;
  v21 = v17 >> 32;
  v22 = HIDWORD(v17);
  zilch::GeoPolyline::Walker::advance((zilch::GeoPolyline::Walker *)&v23, 0x32u, *(double *)&v17, *(double *)&v16);
  *(_QWORD *)&v16 = *(_QWORD *)((char *)&v24 + 4);
  DWORD2(v16) = HIDWORD(v24);
  v9 = zilch::Angle::Angle((zilch::Angle *)&v15, (const zilch::GeoCoordinates *)&v21, (const zilch::GeoCoordinates *)&v16);
  v10 = zilch::Angle::pi(v9);
  v25 = zilch::Angle::operator+(&v15, v10);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v25;
}

void sub_188774218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL zilch::GeoPolyline::Walker::advance(zilch::GeoPolyline::Walker *this, unsigned int a2, double a3, double a4)
{
  zilch::GeoPolyline *v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  _QWORD *v14;
  double v15;
  _DWORD *Point;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  zilch::Longitude *v22;
  zilch::Latitude *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  Longitude v27;
  Latitude v28;
  unsigned int v29;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;

  v6 = *(zilch::GeoPolyline **)this;
  if (*(_QWORD *)v6)
  {
    v7 = *((_QWORD *)this + 1);
    for (i = (uint64_t)(*(_QWORD *)(*(_QWORD *)v6 + 8) - **(_QWORD **)v6) >> 2; ; i = (uint64_t)(v14[1] - *v14) >> 2)
    {
      v9 = 0xAAAAAAAAAAAAAAABLL * i;
      v10 = v7 + 1;
      if (v7 + 1 >= v9)
        break;
      v11 = *((_DWORD *)this + 4);
      v12 = a2 >= v11;
      v13 = a2 - v11;
      if (!v12)
        break;
      a2 = v13;
      zilch::GeoPolyline::Walker::advanceToNextPoint((zilch::GeoPolyline **)this);
      v6 = *(zilch::GeoPolyline **)this;
      v14 = **(_QWORD ***)this;
      if (!v14)
        return a2 == 0;
      v7 = *((_QWORD *)this + 1);
    }
    if (v10 < v9 && a2)
    {
      LODWORD(a4) = *((_DWORD *)this + 4);
      v15 = (double)a2 / (double)*(unint64_t *)&a4;
      v35 = *(_QWORD *)((char *)this + 20);
      v36 = *((_DWORD *)this + 7);
      Point = zilch::GeoPolyline::getPoint(v6, v10);
      v17 = Point[2];
      v33 = *(_QWORD *)Point;
      v34 = v17;
      v32 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v33);
      v18 = zilch::Longitude::toUint32((zilch::Longitude *)&v32);
      v31 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v35);
      v19 = v18 - zilch::Longitude::toUint32((zilch::Longitude *)&v31);
      v32 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v33);
      v20 = zilch::Latitude::toUint32((zilch::Latitude *)&v32);
      v31 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v35);
      v21 = v20 - zilch::Latitude::toUint32((zilch::Latitude *)&v31);
      v32 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)&v35);
      v22 = (zilch::Longitude *)((double)zilch::Longitude::toUint32((zilch::Longitude *)&v32)
                                             + v15 * (double)v19);
      v32 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)&v35);
      v23 = (zilch::Latitude *)((double)zilch::Latitude::toUint32((zilch::Latitude *)&v32)
                                            + v15 * (double)v21);
      LODWORD(v22) = zilch::Longitude::fromUint32(v22, v24);
      v26 = zilch::Latitude::fromUint32(v23, v25);
      v27.var0 = v22;
      v28.var0 = v26;
      zilch::GeoCoordinates::set((uint64_t)this + 20, v27, v28);
      v29 = *((_DWORD *)this + 4) - a2;
      a2 = 0;
      *((_DWORD *)this + 4) = v29;
    }
  }
  return a2 == 0;
}

uint64_t zilch::GeoPolyline::flip(uint64_t this)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(this + 16);
  if (v1)
  {
    if (v1 != 1)
      return this;
    v2 = 0;
  }
  else
  {
    v2 = 1;
  }
  *(_DWORD *)(this + 16) = v2;
  return this;
}

zilch::GeoPolyline::Walker *zilch::GeoPolyline::walk@<X0>(zilch::GeoPolyline *this@<X0>, zilch::GeoPolyline::Walker *a2@<X8>)
{
  return zilch::GeoPolyline::Walker::Walker(a2, this);
}

uint64_t zilch::GeoPolyline::Walker::advanceToNextPoint(zilch::GeoPolyline **this)
{
  zilch::GeoPolyline *v2;
  unint64_t v4;
  _DWORD *Point;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  const zilch::GeoCoordinates *v9;
  uint64_t result;

  v2 = *this;
  v4 = (unint64_t)this[1] + 1;
  this[1] = (zilch::GeoPolyline *)v4;
  Point = zilch::GeoPolyline::getPoint(v2, v4);
  v6 = Point[2];
  *(zilch::GeoPolyline **)((char *)this + 20) = *(zilch::GeoPolyline **)Point;
  *((_DWORD *)this + 7) = v6;
  v7 = *(_QWORD **)*this;
  if (v7 && (v8 = (unint64_t)this[1] + 1, v8 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[1] - *v7) >> 2)))
  {
    v9 = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(*this, v8);
    result = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)((char *)this + 20), v9);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

uint64_t zilch::GeoPolyline::Walker::calcAngleAt(zilch::GeoPolyline::Walker *this, uint64_t a2, const zilch::GeoCoordinates *a3)
{
  uint64_t v3;
  __int128 v5;
  _BYTE v6[12];
  int v7;

  v5 = *(_OWORD *)this;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)&v5 + 1) = a2;
  *(_QWORD *)v6 = v3;
  v7 = *((_DWORD *)a3 + 2);
  *(_QWORD *)&v6[4] = *(_QWORD *)a3;
  zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)&v5);
  return zilch::GeoPolyline::Walker::heading((uint64_t **)&v5);
}

uint64_t zilch::GeoPolyline::Walker::updateDistanceToNext(zilch::GeoPolyline **this)
{
  zilch::GeoPolyline *v2;
  unint64_t v3;
  const zilch::GeoCoordinates *Point;
  uint64_t result;

  v2 = *this;
  if (*(_QWORD *)v2
    && (v3 = (unint64_t)this[1] + 1,
        v3 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)v2 + 8) - **(_QWORD **)v2) >> 2)))
  {
    Point = (const zilch::GeoCoordinates *)zilch::GeoPolyline::getPoint(v2, v3);
    result = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)((char *)this + 20), Point);
  }
  else
  {
    result = 0;
  }
  *((_DWORD *)this + 4) = result;
  return result;
}

BOOL zilch::GeoPolyline::Walker::advanceTo(zilch::GeoPolyline::Walker *this, const zilch::GeoCoordinates *a2, const zilch::Angle *a3)
{
  _QWORD *v3;
  _BOOL8 v4;
  _DWORD *Point;
  _BOOL4 v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t i;
  unint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  double v21;
  _BOOL4 v22;
  uint64_t ClosestPoint;
  int v25;
  _BYTE v26[24];
  GeoCoordinates v27;
  GeoCoordinates v28;
  uint64_t v29;
  int v30;
  __int128 v31;
  _DWORD v32[4];

  v3 = **(_QWORD ***)this;
  if (!v3 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 2) < 2)
    return 0;
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)&v29);
  Point = zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, 0);
  v9 = 0;
  v10 = Point[2];
  *(_QWORD *)&v28.var0.var0 = *(_QWORD *)Point;
  v28.var2 = v10;
  v11 = 1000000;
  v12 = -1;
  for (i = 1; ; ++i)
  {
    v14 = **(_QWORD **)this;
    if (v14)
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v14 + 8) - *(_QWORD *)v14) >> 2);
    if (i >= v14)
      break;
    v15 = zilch::GeoPolyline::getPoint(*(zilch::GeoPolyline **)this, i);
    v16 = v15[2];
    *(_QWORD *)&v27.var0.var0 = *(_QWORD *)v15;
    v27.var2 = v16;
    zilch::GeoLineSegment::GeoLineSegment((uint64_t)v26, &v28, &v27);
    ClosestPoint = zilch::GeoLineSegment::getClosestPoint((zilch::GeoLineSegment *)v26, a2);
    v25 = v17;
    v18 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
    if (v18 <= 9)
    {
      v19 = v18;
      if (a3)
      {
        v31 = *(_OWORD *)this;
        v20 = *((_QWORD *)this + 2);
        *((_QWORD *)&v31 + 1) = i - 1;
        v32[0] = v20;
        v32[3] = v25;
        *(_QWORD *)&v32[1] = ClosestPoint;
        zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)&v31);
        LOWORD(v31) = zilch::GeoPolyline::Walker::heading((uint64_t **)&v31);
        v22 = zilch::Angle::radiansFrom(&v31, *(_WORD *)a3, v21) < 0.785398163;
      }
      else
      {
        v22 = 0;
      }
      if (v11 > 0xA || !v9 && v22 || ((v9 ^ v22) & 1) == 0 && v19 < v11)
      {
        v29 = ClosestPoint;
        v30 = v25;
        v12 = i - !zilch::GeoCoordinates::operator==(&ClosestPoint, &v27.var0.var0);
        v9 = v22;
        v11 = v19;
      }
    }
    v28 = v27;
  }
  v4 = v12 != -1;
  if (v12 != -1)
  {
    *((_QWORD *)this + 1) = v12;
    *(_QWORD *)((char *)this + 20) = v29;
    *((_DWORD *)this + 7) = v30;
    zilch::GeoPolyline::Walker::updateDistanceToNext((zilch::GeoPolyline **)this);
  }
  return v4;
}

uint64_t zilch::GeoPolyline::GeoPolyline(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(result + 16) = a3;
  return result;
}

uint64_t zilch::GeoPolyline::GeoPolyline(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_DWORD *)(this + 16) = 0;
  return this;
}

_QWORD *zilch::GeoPolyline::reset(uint64_t a1, uint64_t *a2, int a3)
{
  _QWORD *result;

  result = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100]((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 16) = a3;
  return result;
}

_QWORD *std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_DWORD *zilch::GeoPolyline::front(zilch::GeoPolyline *this)
{
  return zilch::GeoPolyline::getPoint(this, 0);
}

_DWORD *zilch::GeoPolyline::back(zilch::GeoPolyline *this)
{
  unint64_t v1;

  if (*(_QWORD *)this)
    v1 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2) - 1;
  else
    v1 = -1;
  return zilch::GeoPolyline::getPoint(this, v1);
}

uint64_t zilch::GeoPolyline::distanceTo(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2)
{
  unsigned int v3;

  v3 = 0;
  zilch::GeoPolyline::getClosestPoint(this, a2, &v3, 0);
  return v3;
}

uint64_t zilch::GeoPolyline::getClosestPoint(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2, unsigned int *a3, unint64_t *a4)
{
  unsigned int v8;
  _DWORD *Point;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t ClosestPoint;
  int v20;
  _BYTE v21[24];
  GeoCoordinates v22;
  GeoCoordinates v23;
  uint64_t v24;
  int v25;

  v8 = 40030230;
  zilch::GeoCoordinates::GeoCoordinates((zilch::GeoCoordinates *)&v24);
  Point = zilch::GeoPolyline::getPoint(this, 0);
  v10 = *(_QWORD *)Point;
  v23.var2 = Point[2];
  *(_QWORD *)&v23.var0.var0 = v10;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2) < 2)
  {
    v11 = 0;
    if (a3)
LABEL_7:
      *a3 = v8;
  }
  else
  {
    v11 = 0;
    v12 = 1;
    do
    {
      v13 = zilch::GeoPolyline::getPoint(this, v12);
      v14 = v13[2];
      *(_QWORD *)&v22.var0.var0 = *(_QWORD *)v13;
      v22.var2 = v14;
      zilch::GeoLineSegment::GeoLineSegment((uint64_t)v21, &v23, &v22);
      ClosestPoint = zilch::GeoLineSegment::getClosestPoint((zilch::GeoLineSegment *)v21, a2);
      v20 = v15;
      v16 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
      if (v16 < v8)
      {
        v17 = v16;
        v24 = ClosestPoint;
        v25 = v20;
        v11 = v12 - !zilch::GeoCoordinates::operator==(&ClosestPoint, &v22.var0.var0);
        v8 = v17;
      }
      v23 = v22;
      ++v12;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2));
    if (a3)
      goto LABEL_7;
  }
  if (a4)
    *a4 = v11;
  return v24;
}

uint64_t zilch::GeoPolyline::getLength(zilch::GeoPolyline *this)
{
  _DWORD *Point;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  if (!*(_QWORD *)this)
    return 0;
  if (**(_QWORD **)this == *(_QWORD *)(*(_QWORD *)this + 8))
    return 0;
  Point = zilch::GeoPolyline::getPoint(this, 0);
  v3 = *(_QWORD *)Point;
  v12 = Point[2];
  v11 = v3;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2) < 2)
    return 0;
  LODWORD(v4) = 0;
  v5 = 1;
  do
  {
    v6 = zilch::GeoPolyline::getPoint(this, v5);
    v7 = v6[2];
    v9 = *(_QWORD *)v6;
    v10 = v7;
    v4 = zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&v11, (const zilch::GeoCoordinates *)&v9)+ v4;
    v11 = v9;
    v12 = v10;
    ++v5;
  }
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 2));
  return v4;
}

uint64_t zilch::GeoPolyline::getStartHeading(zilch::GeoPolyline *this)
{
  uint64_t *v2[4];

  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v2, this);
  return zilch::GeoPolyline::Walker::heading(v2);
}

uint64_t zilch::GeoPolyline::getEndHeading(zilch::GeoPolyline *this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  int v4;
  int v5;
  zilch::Angle *v6;
  unsigned __int16 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int16 v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;
  uint64_t *v17[4];

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v14 = *(_QWORD *)this;
  v15 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  v4 = *((_DWORD *)this + 4);
  v16 = v4;
  if (!v4)
  {
    v5 = 1;
    goto LABEL_8;
  }
  if (v4 == 1)
  {
    v5 = 0;
LABEL_8:
    v16 = v5;
  }
  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v17, (const zilch::GeoPolyline *)&v14);
  v6 = (zilch::Angle *)zilch::GeoPolyline::Walker::heading(v17);
  v13 = (unsigned __int16)v6;
  v7 = zilch::Angle::pi(v6);
  v8 = zilch::Angle::operator+(&v13, v7);
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_188774C8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t zilch::GeoPolyline::getAngleAtPos(zilch::GeoPolyline *this, const zilch::GeoCoordinates *a2)
{
  _BOOL8 v3;
  uint64_t *v5[4];

  zilch::GeoPolyline::Walker::Walker((zilch::GeoPolyline::Walker *)v5, this);
  v3 = zilch::GeoPolyline::Walker::advanceTo((zilch::GeoPolyline::Walker *)v5, a2, 0);
  if (v3)
    return zilch::GeoPolyline::Walker::heading(v5);
  else
    return zilch::Angle::zero((zilch::Angle *)v3);
}

std::string *zilch::GeoPolyline::toString@<X0>(uint64_t **this@<X0>, std::string *a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t *v9;
  void *__p[2];
  char v12;
  char __str[1024];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(a2, "GeoPolyline(");
  v5 = **this;
  if ((*this)[1] != v5)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      zilch::GeoCoordinates::toString((zilch::GeoCoordinates *)(v5 + v6), __p, v4);
      if (v12 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      snprintf(__str, 0x400uLL, "%s", (const char *)v8);
      if (v12 < 0)
        operator delete(__p[0]);
      std::string::append(a2, __str);
      ++v7;
      v9 = *this;
      if (v7 < 0xAAAAAAAAAAAAAAABLL * (((*this)[1] - **this) >> 2))
      {
        std::string::append(a2, ",");
        v9 = *this;
      }
      v5 = *v9;
      if (v7 >= 0xAAAAAAAAAAAAAAABLL * ((v9[1] - *v9) >> 2))
        break;
      v6 += 12;
    }
  }
  return std::string::append(a2, ")");
}

void sub_188774E64(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E1BEF968, MEMORY[0x1E0DE42D0]);
}

void sub_188774FE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("vector");
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E1BEF970, MEMORY[0x1E0DE42E0]);
}

void sub_18877506C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

uint64_t zilch::PathElement::PathElement(uint64_t result, int a2, uint64_t a3)
{
  *(_QWORD *)result = &unk_1E1BF7018;
  *(_DWORD *)(result + 8) = a2;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t zilch::PathElement::type(zilch::PathElement *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t zilch::PathElement::controlPointIndex(zilch::PathElement *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t zilch::GeometryPathElement::GeometryPathElement(uint64_t this, uint64_t a2)
{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = &off_1E1BF7068;
  *(_QWORD *)(this + 16) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 1;
  *(_QWORD *)this = &off_1E1BF7068;
  *(_QWORD *)(this + 16) = a2;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

uint64_t zilch::GeometryPathElement::getPoint(zilch::GeometryPathElement *this, uint64_t a2)
{
  return *((_QWORD *)this + 3) + 12 * a2;
}

uint64_t zilch::GeometryPathElement::operator[](uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 24) + 12 * a2;
}

uint64_t zilch::GeometryPathElement::back(zilch::GeometryPathElement *this)
{
  return *((_QWORD *)this + 4) - 12;
}

unint64_t zilch::GeometryPathElement::size(zilch::GeometryPathElement *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 2);
}

void zilch::GeometryPathElement::addPoint(zilch::GeometryPathElement *this, const zilch::GeoCoordinates *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;

  v6 = *((_QWORD *)this + 5);
  v4 = (char *)this + 40;
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v10 = v4 - 16;
    v11 = *((_QWORD *)v4 - 2);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 2);
    v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)v4, v15);
    else
      v16 = 0;
    v17 = &v16[12 * v12];
    v18 = &v16[12 * v15];
    v19 = *(_QWORD *)a2;
    *((_DWORD *)v17 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v17 = v19;
    v9 = v17 + 12;
    v21 = (_DWORD *)*((_QWORD *)this + 3);
    v20 = (_DWORD *)*((_QWORD *)this + 4);
    if (v20 != v21)
    {
      do
      {
        v22 = *(_QWORD *)(v20 - 3);
        v20 -= 3;
        v23 = v20[2];
        *(_QWORD *)(v17 - 12) = v22;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v23;
      }
      while (v20 != v21);
      v20 = *(_DWORD **)v10;
    }
    *((_QWORD *)this + 3) = v17;
    *((_QWORD *)this + 4) = v9;
    *((_QWORD *)this + 5) = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *(_QWORD *)a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v7 = v8;
    v9 = (char *)(v7 + 12);
  }
  *((_QWORD *)this + 4) = v9;
}

std::string *zilch::GeometryPathElement::toString@<X0>(zilch::GeometryPathElement *this@<X0>, std::string *a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  std::string::size_type v9;
  unint64_t v10;
  void *__p[2];
  unsigned __int8 v13;

  std::string::basic_string[abi:ne180100]<0>(a2, "GeometryPathElement(");
  v5 = *((_QWORD *)this + 3);
  if (*((_QWORD *)this + 4) != v5)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      zilch::GeoCoordinates::toString((zilch::GeoCoordinates *)(v5 + v6), __p, v4);
      if ((v13 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v9 = v13;
      else
        v9 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      ++v7;
      v5 = *((_QWORD *)this + 3);
      v10 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v5) >> 2);
      if (v7 < v10)
      {
        std::string::append(a2, ",");
        v5 = *((_QWORD *)this + 3);
        v10 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 4) - v5) >> 2);
      }
      v6 += 12;
    }
    while (v7 < v10);
  }
  return std::string::append(a2, ")");
}

void sub_18877537C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void zilch::GeometryPathElement::~GeometryPathElement(zilch::GeometryPathElement *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E1BF7068;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E1BF7068;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x18D76437CLL);
}

void std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(12 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

_QWORD *zilch::Probability::Probability(_QWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

double *zilch::Probability::Probability(double *this, double a2)
{
  *this = a2;
  return this;
}

{
  *this = a2;
  return this;
}

double zilch::Probability::zero(zilch::Probability *this)
{
  return 0.0;
}

double zilch::Probability::one(zilch::Probability *this)
{
  return 1.0;
}

double zilch::Probability::toDouble(zilch::Probability *this)
{
  return *(double *)this;
}

double zilch::Probability::operator*=(double *a1, double a2)
{
  double result;

  result = a2 * *a1;
  *a1 = result;
  return result;
}

double zilch::Probability::operator/=(double *a1, double result)
{
  if (result != 0.0)
  {
    result = *a1 / result;
    *a1 = result;
  }
  return result;
}

BOOL zilch::Probability::operator==(double *a1, double a2)
{
  return *a1 == a2;
}

BOOL zilch::Probability::operator!=(double *a1, double a2)
{
  return *a1 != a2;
}

BOOL zilch::Probability::operator<(double *a1, double a2)
{
  return *a1 < a2;
}

BOOL zilch::Probability::operator<=(double *a1, double a2)
{
  return *a1 <= a2;
}

BOOL zilch::Probability::operator>(double *a1, double a2)
{
  return *a1 > a2;
}

BOOL zilch::Probability::operator>=(double *a1, double a2)
{
  return *a1 >= a2;
}

double zilch::Probability::operator+=(double *a1, double a2)
{
  double result;

  result = a2 + *a1;
  *a1 = result;
  return result;
}

double *zilch::Probability::operator-=(double *result, double a2)
{
  double v2;
  BOOL v3;
  double v4;

  v2 = *result - a2;
  v3 = a2 < *result;
  v4 = 0.0;
  if (v3)
    v4 = v2;
  *result = v4;
  return result;
}

double zilch::Probability::operator*(double *a1, double a2)
{
  return a2 * *a1;
}

double zilch::Probability::operator/(double *a1, double a2)
{
  if (a2 == 0.0)
    a2 = 1.0;
  return *a1 / a2;
}

double zilch::Probability::operator+(double *a1, double a2)
{
  return a2 + *a1;
}

double zilch::Probability::operator-(double *a1, double a2)
{
  double v2;
  BOOL v3;
  double result;

  v2 = *a1 - a2;
  v3 = a2 < *a1;
  result = 0.0;
  if (v3)
    return v2;
  return result;
}

uint64_t zilch::GeoLineSegment::GeoLineSegment(uint64_t this, const GeoCoordinates *a2, const GeoCoordinates *a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)&a2->var0.var0;
  *(_DWORD *)(this + 8) = a2->var2;
  *(_QWORD *)this = v3;
  v4 = *(_QWORD *)&a3->var0.var0;
  *(_DWORD *)(this + 20) = a3->var2;
  *(_QWORD *)(this + 12) = v4;
  return this;
}

{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)&a2->var0.var0;
  *(_DWORD *)(this + 8) = a2->var2;
  *(_QWORD *)this = v3;
  v4 = *(_QWORD *)&a3->var0.var0;
  *(_DWORD *)(this + 20) = a3->var2;
  *(_QWORD *)(this + 12) = v4;
  return this;
}

uint64_t zilch::GeoLineSegment::b(zilch::GeoLineSegment *this)
{
  return (uint64_t)this + 12;
}

uint64_t zilch::GeoLineSegment::getClosestPoint(zilch::GeoLineSegment *this, const zilch::GeoCoordinates *a2)
{
  zilch::GeoCoordinates *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  zilch::Longitude *v25;
  zilch::Latitude *v26;
  unsigned int v27;
  unsigned int v28;
  Longitude v29;
  Latitude v30;
  int v31;
  int v33;
  int v34;
  uint64_t v35;
  int v36;

  v4 = (zilch::GeoLineSegment *)((char *)this + 12);
  v34 = zilch::GeoCoordinates::x((zilch::GeoLineSegment *)((char *)this + 12));
  v6 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v5);
  v33 = zilch::GeoCoordinates::x(this);
  v8 = v6 - zilch::Longitude::toDegrees((zilch::Longitude *)&v33, v7);
  v34 = zilch::GeoCoordinates::y(v4);
  v10 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v9);
  v33 = zilch::GeoCoordinates::y(this);
  v12 = v10 - zilch::Latitude::toDegrees((zilch::Latitude *)&v33, v11);
  v34 = zilch::GeoCoordinates::x(a2);
  v14 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v13);
  v33 = zilch::GeoCoordinates::x(this);
  v16 = v14 - zilch::Longitude::toDegrees((zilch::Longitude *)&v33, v15);
  v34 = zilch::GeoCoordinates::y(a2);
  v18 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v17);
  v33 = zilch::GeoCoordinates::y(this);
  v20 = (v12 * (v18 - zilch::Latitude::toDegrees((zilch::Latitude *)&v33, v19)) + v8 * v16) / (v12 * v12 + v8 * v8);
  if (v20 <= 0.0)
  {
    v35 = *(_QWORD *)this;
    v31 = *((_DWORD *)this + 2);
LABEL_6:
    v36 = v31;
    return v35;
  }
  if (v20 >= 1.0)
  {
    v35 = *(_QWORD *)v4;
    v31 = *((_DWORD *)v4 + 2);
    goto LABEL_6;
  }
  v34 = zilch::GeoCoordinates::x(this);
  v22 = zilch::Longitude::toDegrees((zilch::Longitude *)&v34, v21) + v20 * v8;
  v34 = zilch::GeoCoordinates::y(this);
  v24 = zilch::Latitude::toDegrees((zilch::Latitude *)&v34, v23) + v20 * v12;
  v26 = (zilch::Latitude *)zilch::Longitude::fromDegrees(v25, v22);
  v27 = v26;
  v28 = zilch::Latitude::fromDegrees(v26, v24);
  v29.var0 = v27;
  v30.var0 = v28;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v35, v29, v30);
  return v35;
}

uint64_t zilch::GeoLineSegment::distanceTo(zilch::GeoLineSegment *this, const zilch::GeoCoordinates *a2)
{
  int v3;
  uint64_t ClosestPoint;
  int v6;

  ClosestPoint = zilch::GeoLineSegment::getClosestPoint(this, a2);
  v6 = v3;
  return zilch::GeoCoordinates::distanceTo((zilch::GeoCoordinates *)&ClosestPoint, a2);
}

_QWORD *zilch::GeoLineSegment::toString@<X0>(zilch::GeoLineSegment *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  int v5;
  void **v6;
  double v7;
  void **v8;
  void **v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;
  char __str[1024];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  zilch::GeoCoordinates::toString(this, v13, a3);
  v5 = v14;
  v6 = (void **)v13[0];
  zilch::GeoCoordinates::toString((zilch::GeoLineSegment *)((char *)this + 12), __p, v7);
  v8 = v13;
  if (v5 < 0)
    v8 = v6;
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  snprintf(__str, 0x400uLL, "GeoLineSegment(%s, %s)", (const char *)v8, (const char *)v9);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void sub_188775914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double zilch::HuffmanCode::HuffmanCode(zilch::HuffmanCode *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  return result;
}

zilch::HuffmanCode *zilch::HuffmanCode::HuffmanCode(zilch::HuffmanCode *this, zilch::HuffmanCode *a2, unsigned int *a3, zilch::HuffmanCode *a4)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  zilch::HuffmanCode::encodeKeys(a2, a3, this, a4);
  return this;
}

void sub_1887759EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 88) = v6;
    operator delete(v6);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void zilch::HuffmanCode::encodeKeys(zilch::HuffmanCode *this, const unsigned int *a2, zilch::HuffmanCode *a3, zilch::HuffmanCode *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD **v11;
  _QWORD *v12;
  _QWORD **v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  BOOL v47;
  char *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  __int128 v65;
  __int128 *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  __int128 v79;
  __int128 v80;
  char *v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _BYTE *v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  uint64_t v126;
  uint64_t i;
  uint64_t v128;
  unsigned int v129;
  void *__p;
  char *v131;
  _QWORD v132[2];
  void *v133;
  char *v134;
  char *v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t v138;
  unsigned int v139[4];
  __int128 v140;
  __int128 v141;

  v137 = 0;
  v138 = 0;
  v136 = (uint64_t *)&v137;
  if (a2)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (unsigned int *)((char *)this + 4 * v8);
      if (!v7)
        goto LABEL_13;
      v10 = *v9;
      v11 = &v137;
      do
      {
        v12 = v7;
        v13 = v11;
        v14 = *((_DWORD *)v7 + 8);
        v15 = v7 + 1;
        if (v14 >= v10)
        {
          v15 = v12;
          v11 = (_QWORD **)v12;
        }
        v7 = (_QWORD *)*v15;
      }
      while (v7);
      if (v11 != &v137 && (v14 >= v10 ? (v16 = v12) : (v16 = v13), v10 >= *((_DWORD *)v16 + 8)))
      {
        v11[5] = (_QWORD *)((char *)v11[5] + 1);
      }
      else
      {
LABEL_13:
        *(_QWORD *)v139 = (char *)this + 4 * v8;
        std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(&v136, v9, (uint64_t)&unk_189C5B9C0, (_DWORD **)v139)[5] = (uint64_t *)1;
      }
      if ((const unsigned int *)++v8 == a2)
        break;
      v7 = v137;
    }
    v17 = v138;
  }
  else
  {
    v17 = 0;
  }
  v133 = 0;
  v134 = 0;
  v135 = 0;
  std::vector<zilch::HuffmanCode::Node>::reserve(&v133, 2 * v17);
  v128 = v17;
  __p = 0;
  v131 = 0;
  v132[0] = 0;
  v18 = v136;
  if (v136 == (uint64_t *)&v137)
  {
    v48 = 0;
    v49 = 0;
  }
  else
  {
    do
    {
      v19 = *((_DWORD *)v18 + 8);
      v20 = (char *)v133;
      v21 = v134;
      v22 = (v134 - (_BYTE *)v133) / 48;
      v23 = v18[5];
      if (v134 >= v135)
      {
        v25 = v22 + 1;
        if ((unint64_t)(v22 + 1) > 0x555555555555555)
          goto LABEL_132;
        if (0x5555555555555556 * ((v135 - (_BYTE *)v133) >> 4) > v25)
          v25 = 0x5555555555555556 * ((v135 - (_BYTE *)v133) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v135 - (_BYTE *)v133) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v26 = 0x555555555555555;
        else
          v26 = v25;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)&v135, v26);
          v20 = (char *)v133;
          v21 = v134;
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[48 * v22];
        *(_DWORD *)v28 = v19;
        *((_QWORD *)v28 + 1) = v22;
        *((_QWORD *)v28 + 2) = v23;
        *((_QWORD *)v28 + 3) = -1;
        *((_QWORD *)v28 + 4) = -1;
        *((_QWORD *)v28 + 5) = -1;
        if (v21 == v20)
        {
          v32 = &v27[48 * v22];
        }
        else
        {
          v29 = &v27[48 * v22];
          do
          {
            v30 = *((_OWORD *)v21 - 3);
            v31 = *((_OWORD *)v21 - 1);
            v32 = v29 - 48;
            *((_OWORD *)v29 - 2) = *((_OWORD *)v21 - 2);
            *((_OWORD *)v29 - 1) = v31;
            *((_OWORD *)v29 - 3) = v30;
            v21 -= 48;
            v29 -= 48;
          }
          while (v21 != v20);
        }
        v24 = v28 + 48;
        v133 = v32;
        v134 = v28 + 48;
        v135 = &v27[48 * v26];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *(_DWORD *)v134 = v19;
        *((_QWORD *)v21 + 1) = v22;
        *((_QWORD *)v21 + 2) = v23;
        v24 = v21 + 48;
        *((_QWORD *)v21 + 3) = -1;
        *((_QWORD *)v21 + 4) = -1;
        *((_QWORD *)v21 + 5) = -1;
      }
      v134 = v24;
      v33 = v131;
      if ((unint64_t)v131 >= v132[0])
      {
        v35 = (char *)__p;
        v36 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (_BYTE *)__p) >> 4);
        v37 = v36 + 1;
        if (v36 + 1 > 0x555555555555555)
LABEL_132:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4) > v37)
          v37 = 0x5555555555555556 * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v38 = 0x555555555555555;
        else
          v38 = v37;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)v132, v38);
          v35 = (char *)__p;
          v33 = v131;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[16 * ((v131 - (_BYTE *)__p) >> 4)];
        *(_DWORD *)v40 = v19;
        *((_QWORD *)v40 + 1) = v22;
        *((_QWORD *)v40 + 2) = v23;
        *((_QWORD *)v40 + 3) = -1;
        *((_QWORD *)v40 + 4) = -1;
        *((_QWORD *)v40 + 5) = -1;
        if (v33 == v35)
        {
          v44 = &v39[48 * v36];
        }
        else
        {
          v41 = &v39[48 * v36];
          do
          {
            v42 = *((_OWORD *)v33 - 3);
            v43 = *((_OWORD *)v33 - 1);
            v44 = v41 - 48;
            *((_OWORD *)v41 - 2) = *((_OWORD *)v33 - 2);
            *((_OWORD *)v41 - 1) = v43;
            *((_OWORD *)v41 - 3) = v42;
            v33 -= 48;
            v41 -= 48;
          }
          while (v33 != v35);
        }
        v34 = (uint64_t)(v40 + 48);
        __p = v44;
        v131 = v40 + 48;
        v132[0] = &v39[48 * v38];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *(_DWORD *)v131 = v19;
        *((_QWORD *)v33 + 1) = v22;
        *((_QWORD *)v33 + 2) = v23;
        v34 = (uint64_t)(v33 + 48);
        *((_QWORD *)v33 + 3) = -1;
        *((_QWORD *)v33 + 4) = -1;
        *((_QWORD *)v33 + 5) = -1;
      }
      v131 = (char *)v34;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)__p, v34, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)__p) >> 4));
      v45 = (uint64_t *)v18[1];
      if (v45)
      {
        do
        {
          v46 = v45;
          v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v46 = (uint64_t *)v18[2];
          v47 = *v46 == (_QWORD)v18;
          v18 = v46;
        }
        while (!v47);
      }
      v18 = v46;
    }
    while (v46 != (uint64_t *)&v137);
    v48 = (char *)__p;
    v49 = v131;
  }
  v50 = v49 - v48;
  v51 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v48) >> 4);
  if (v51 >= 2)
  {
    while (1)
    {
      v52 = *((_QWORD *)v48 + 1);
      v53 = (char *)v133;
      if (v50 < 49)
      {
        v71 = (char *)v133;
        v72 = *((_QWORD *)v48 + 1);
      }
      else
      {
        v54 = 0;
        v55 = *(_OWORD *)v48;
        v56 = *((_OWORD *)v48 + 2);
        v140 = *((_OWORD *)v48 + 1);
        v141 = v56;
        *(_OWORD *)v139 = v55;
        v57 = v48;
        do
        {
          v58 = v54 + 1;
          v59 = &v57[48 * v54 + 48];
          v60 = (2 * v54) | 1;
          v61 = 2 * v54 + 2;
          if (v61 < (uint64_t)v51)
          {
            v62 = *(_QWORD *)&v57[48 * v58 + 16];
            v63 = *((_QWORD *)v59 + 8);
            v59 += 48 * (v62 > v63);
            if (v62 > v63)
              v60 = v61;
          }
          v64 = *(_OWORD *)v59;
          v65 = *((_OWORD *)v59 + 2);
          *((_OWORD *)v57 + 1) = *((_OWORD *)v59 + 1);
          *((_OWORD *)v57 + 2) = v65;
          *(_OWORD *)v57 = v64;
          v57 = v59;
          v54 = v60;
        }
        while (v60 <= (uint64_t)((v51 - 2) >> 1));
        v66 = (__int128 *)(v49 - 48);
        if (v59 == v49 - 48)
        {
          v73 = *(_OWORD *)v139;
          v74 = v141;
          *((_OWORD *)v59 + 1) = v140;
          *((_OWORD *)v59 + 2) = v74;
          *(_OWORD *)v59 = v73;
          v71 = v53;
        }
        else
        {
          v67 = *v66;
          v68 = *((_OWORD *)v49 - 1);
          *((_OWORD *)v59 + 1) = *((_OWORD *)v49 - 2);
          *((_OWORD *)v59 + 2) = v68;
          *(_OWORD *)v59 = v67;
          v69 = *(_OWORD *)v139;
          v70 = v141;
          *((_OWORD *)v49 - 2) = v140;
          *((_OWORD *)v49 - 1) = v70;
          *v66 = v69;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)v48, (uint64_t)(v59 + 48), (uint64_t)&v129, 0xAAAAAAAAAAAAAAABLL * ((v59 + 48 - v48) >> 4));
          v48 = (char *)__p;
          v49 = v131;
          v71 = (char *)v133;
        }
        v72 = *((_QWORD *)v48 + 1);
      }
      v75 = v49 - 48;
      v131 = v49 - 48;
      v76 = v49 - 48 - v48;
      if (v76 < 49)
        goto LABEL_85;
      v77 = 0;
      v78 = 0xAAAAAAAAAAAAAAABLL * (v76 >> 4);
      v79 = *(_OWORD *)v48;
      v80 = *((_OWORD *)v48 + 2);
      v140 = *((_OWORD *)v48 + 1);
      v141 = v80;
      *(_OWORD *)v139 = v79;
      v81 = v48;
      do
      {
        v82 = v77 + 1;
        v83 = (__int128 *)&v81[48 * v77 + 48];
        v84 = (2 * v77) | 1;
        v85 = 2 * v77 + 2;
        if (v85 < v78)
        {
          v86 = *(_QWORD *)&v81[48 * v82 + 16];
          v87 = *((_QWORD *)v83 + 8);
          v83 += 3 * (v86 > v87);
          if (v86 > v87)
            v84 = v85;
        }
        v88 = *v83;
        v89 = v83[2];
        *((_OWORD *)v81 + 1) = v83[1];
        *((_OWORD *)v81 + 2) = v89;
        *(_OWORD *)v81 = v88;
        v81 = (char *)v83;
        v77 = v84;
      }
      while (v84 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
      v90 = (__int128 *)(v49 - 96);
      if (v83 == v90)
        break;
      v91 = *v90;
      v92 = v90[2];
      v83[1] = v90[1];
      v83[2] = v92;
      *v83 = v91;
      v93 = *(_OWORD *)v139;
      v94 = v141;
      v90[1] = v140;
      v90[2] = v94;
      *v90 = v93;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)v48, (uint64_t)(v83 + 3), (uint64_t)&v129, 0xAAAAAAAAAAAAAAABLL * (((char *)(v83 + 3) - v48) >> 4));
      v75 = v131;
      v95 = v133;
LABEL_86:
      v131 = v75 - 48;
      v98 = v134;
      v99 = (v134 - v95) / 48;
      v100 = &v53[48 * v52];
      v101 = &v71[48 * v72];
      v102 = *((_QWORD *)v100 + 1);
      v103 = *((_QWORD *)v101 + 1);
      v104 = *((_QWORD *)v101 + 2) + *((_QWORD *)v100 + 2);
      *((_QWORD *)v100 + 5) = v99;
      *((_QWORD *)v101 + 5) = v99;
      if (v98 >= v135)
      {
        v106 = v99 + 1;
        if ((unint64_t)(v99 + 1) > 0x555555555555555)
          goto LABEL_133;
        if (0x5555555555555556 * ((v135 - v95) >> 4) > v106)
          v106 = 0x5555555555555556 * ((v135 - v95) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v135 - v95) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v107 = 0x555555555555555;
        else
          v107 = v106;
        if (v107)
        {
          v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)&v135, v107);
          v95 = v133;
          v98 = v134;
        }
        else
        {
          v108 = 0;
        }
        v109 = &v108[48 * v99];
        *((_QWORD *)v109 + 1) = v99;
        *((_QWORD *)v109 + 2) = v104;
        *((_QWORD *)v109 + 3) = v102;
        *((_QWORD *)v109 + 4) = v103;
        *((_QWORD *)v109 + 5) = -1;
        if (v98 == v95)
        {
          v113 = &v108[48 * v99];
        }
        else
        {
          v110 = &v108[48 * v99];
          do
          {
            v111 = *((_OWORD *)v98 - 3);
            v112 = *((_OWORD *)v98 - 1);
            v113 = v110 - 48;
            *((_OWORD *)v110 - 2) = *((_OWORD *)v98 - 2);
            *((_OWORD *)v110 - 1) = v112;
            *((_OWORD *)v110 - 3) = v111;
            v98 -= 48;
            v110 -= 48;
          }
          while (v98 != v95);
        }
        v105 = v109 + 48;
        v133 = v113;
        v134 = v109 + 48;
        v135 = &v108[48 * v107];
        if (v95)
          operator delete(v95);
      }
      else
      {
        *((_QWORD *)v98 + 1) = v99;
        *((_QWORD *)v98 + 2) = v104;
        *((_QWORD *)v98 + 3) = v102;
        *((_QWORD *)v98 + 4) = v103;
        v105 = v98 + 48;
        *((_QWORD *)v98 + 5) = -1;
      }
      v134 = v105;
      v114 = v131;
      if ((unint64_t)v131 >= v132[0])
      {
        v116 = (char *)__p;
        v117 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (_BYTE *)__p) >> 4);
        v118 = v117 + 1;
        if (v117 + 1 > 0x555555555555555)
LABEL_133:
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4) > v118)
          v118 = 0x5555555555555556 * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v132[0] - (_QWORD)__p) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v119 = 0x555555555555555;
        else
          v119 = v118;
        if (v119)
        {
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>((uint64_t)v132, v119);
          v116 = (char *)__p;
          v114 = v131;
        }
        else
        {
          v120 = 0;
        }
        v121 = &v120[48 * v117];
        *((_QWORD *)v121 + 1) = v99;
        *((_QWORD *)v121 + 2) = v104;
        *((_QWORD *)v121 + 3) = v102;
        *((_QWORD *)v121 + 4) = v103;
        *((_QWORD *)v121 + 5) = -1;
        if (v114 == v116)
        {
          v125 = &v120[48 * v117];
        }
        else
        {
          v122 = &v120[48 * v117];
          do
          {
            v123 = *((_OWORD *)v114 - 3);
            v124 = *((_OWORD *)v114 - 1);
            v125 = v122 - 48;
            *((_OWORD *)v122 - 2) = *((_OWORD *)v114 - 2);
            *((_OWORD *)v122 - 1) = v124;
            *((_OWORD *)v122 - 3) = v123;
            v114 -= 48;
            v122 -= 48;
          }
          while (v114 != v116);
        }
        v115 = (uint64_t)(v121 + 48);
        __p = v125;
        v131 = v121 + 48;
        v132[0] = &v120[48 * v119];
        if (v116)
          operator delete(v116);
      }
      else
      {
        *((_QWORD *)v131 + 1) = v99;
        *((_QWORD *)v114 + 2) = v104;
        *((_QWORD *)v114 + 3) = v102;
        *((_QWORD *)v114 + 4) = v103;
        v115 = (uint64_t)(v114 + 48);
        *((_QWORD *)v114 + 5) = -1;
      }
      v131 = (char *)v115;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>((uint64_t)__p, v115, (uint64_t)v139, 0xAAAAAAAAAAAAAAABLL * ((v115 - (uint64_t)__p) >> 4));
      v48 = (char *)__p;
      v49 = v131;
      v50 = v131 - (_BYTE *)__p;
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v131 - (_BYTE *)__p) >> 4);
      if (v51 <= 1)
        goto LABEL_123;
    }
    v96 = *(_OWORD *)v139;
    v97 = v141;
    v83[1] = v140;
    v83[2] = v97;
    *v83 = v96;
LABEL_85:
    v95 = v71;
    goto LABEL_86;
  }
LABEL_123:
  if (v128)
  {
    v126 = 0;
    for (i = 0; i != v128; ++i)
    {
      v139[0] = 0;
      v129 = 0;
      zilch::HuffmanCode::extractCode(&v133, i, (int *)v139, (int *)&v129);
      zilch::HuffmanCode::insert(a3, *(unsigned int *)((char *)v133 + v126), v139[0], v129);
      v126 += 48;
    }
    v48 = (char *)__p;
  }
  if (v48)
  {
    v131 = v48;
    operator delete(v48);
  }
  if (v133)
  {
    v134 = (char *)v133;
    operator delete(v133);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v136, v137);
}

void sub_1887762FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,_QWORD *a23)
{
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

uint64_t zilch::HuffmanCode::size(zilch::HuffmanCode *this)
{
  return -1431655765 * ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2);
}

uint64_t zilch::HuffmanCode::key(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 10) + 12 * a2);
}

uint64_t zilch::HuffmanCode::code(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 10) + 12 * a2 + 8);
}

uint64_t zilch::HuffmanCode::codeLength(zilch::HuffmanCode *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 10) + 12 * a2 + 4);
}

_QWORD *zilch::HuffmanCode::clear(zilch::HuffmanCode *this)
{
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear((_QWORD *)this + 5);
  return std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear(this);
}

void zilch::HuffmanCode::insert(zilch::HuffmanCode *this, uint64_t a2, unsigned int a3, unsigned int a4)
{
  int v4;
  _DWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int v22;
  _DWORD *v23[2];
  unsigned int v24;

  v4 = a2;
  v24 = a2;
  v6 = (_DWORD *)(a4 | ((unint64_t)a3 << 32));
  v23[0] = (_DWORD *)(a3 | (unint64_t)(a2 << 32));
  v23[1] = v6;
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,zilch::HuffmanCode::KeyInfo>>((uint64_t)this, (unsigned int *)v23, (uint64_t)v23);
  v23[0] = &v24;
  v7 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)this + 40, &v24, (uint64_t)&unk_189C5B9C0, v23);
  *((_DWORD *)v7 + 5) = v4;
  v7[3] = v6;
  v8 = *((_QWORD *)this + 12);
  v9 = *((_QWORD *)this + 11);
  if (v9 >= v8)
  {
    v11 = *((_QWORD *)this + 10);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v11) >> 2);
    v13 = v12 + 1;
    if (v12 + 1 > 0x1555555555555555)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v11) >> 2);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xAAAAAAAAAAAAAAALL)
      v15 = 0x1555555555555555;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::GeoCoordinates>>((uint64_t)this + 96, v15);
    else
      v16 = 0;
    v17 = &v16[12 * v12];
    v18 = &v16[12 * v15];
    *(_DWORD *)v17 = v4;
    *(_QWORD *)(v17 + 4) = v6;
    v10 = v17 + 12;
    v20 = (_DWORD *)*((_QWORD *)this + 10);
    v19 = (_DWORD *)*((_QWORD *)this + 11);
    if (v19 != v20)
    {
      do
      {
        v21 = *(_QWORD *)(v19 - 3);
        v19 -= 3;
        v22 = v19[2];
        *(_QWORD *)(v17 - 12) = v21;
        v17 -= 12;
        *((_DWORD *)v17 + 2) = v22;
      }
      while (v19 != v20);
      v19 = (_DWORD *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 10) = v17;
    *((_QWORD *)this + 11) = v10;
    *((_QWORD *)this + 12) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *(_DWORD *)v9 = v4;
    *(_QWORD *)(v9 + 4) = v6;
    v10 = (char *)(v9 + 12);
  }
  *((_QWORD *)this + 11) = v10;
}

uint64_t zilch::HuffmanCode::getKeyForCode(zilch::HuffmanCode *this, unsigned int a2, int a3)
{
  uint64_t *v4;
  unsigned int v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>(this, &v6);
  if (v4)
  {
    while (*((_DWORD *)v4 + 4) == v6)
    {
      if (*((_DWORD *)v4 + 6) == a3)
        return *((unsigned int *)v4 + 5);
      v4 = (uint64_t *)*v4;
      if (!v4)
        return 0xFFFFFFFFLL;
    }
  }
  return 0xFFFFFFFFLL;
}

void std::vector<zilch::HuffmanCode::Node>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 48;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>(v3, a2);
    v7 = &v6[48 * v5];
    v9 = &v6[48 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 3);
        v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *zilch::HuffmanCode::extractCode(_QWORD *result, uint64_t a2, int *a3, int *a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  int v11;

  v7 = *result;
  v8 = *(_QWORD *)(*result + 48 * a2 + 40);
  if (v8 != -1)
  {
    v9 = result;
    result = (_QWORD *)zilch::HuffmanCode::extractCode();
    v10 = 2 * *a3;
    *a3 = v10;
    if (*(_QWORD *)(*v9 + 48 * v8 + 24) != a2)
      *a3 = v10 | 1;
    v11 = *a4 + 1;
    goto LABEL_5;
  }
  if (*(_QWORD *)(v7 + 48 * a2 + 24) == -1 && *(_QWORD *)(v7 + 48 * a2 + 32) == -1)
  {
    *a3 = 0;
    v11 = 1;
LABEL_5:
    *a4 = v11;
  }
  return result;
}

uint64_t zilch::HuffmanCode::getCodeForKey(zilch::HuffmanCode *this, unsigned int a2, unsigned int *a3)
{
  uint64_t *v4;
  unsigned int v6;

  v6 = a2;
  v4 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>((_QWORD *)this + 5, &v6);
  if (!v4)
    return 0xFFFFFFFFLL;
  *a3 = *((_DWORD *)v4 + 6);
  return *((unsigned int *)v4 + 7);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::clear(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,zilch::HuffmanCode::KeyInfo>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  *(_QWORD *)((char *)v10 + 20) = *(_QWORD *)(a3 + 4);
  *((_DWORD *)v10 + 7) = *(_DWORD *)(a3 + 12);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_188776A30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x20uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 7) = 0;
  *(_QWORD *)((char *)v11 + 20) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_188776C58(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::find<unsigned int>(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::HuffmanCode::Node>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a2);
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<zilch::HuffmanCode::Node> &,std::__wrap_iter<zilch::HuffmanCode::Node*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __n128 v11;
  uint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(_QWORD *)(a2 - 32);
    if (*(_QWORD *)(a1 + 48 * v4 + 16) > v5)
    {
      v6 = (__int128 *)(a2 - 48);
      v13 = *(_OWORD *)(a2 - 48);
      v11 = *(__n128 *)(a2 - 24);
      v12 = *(_QWORD *)(a2 - 8);
      do
      {
        v7 = v6;
        v6 = (__int128 *)(a1 + 48 * v4);
        v8 = *v6;
        v9 = v6[2];
        v7[1] = v6[1];
        v7[2] = v9;
        *v7 = v8;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_QWORD *)(a1 + 48 * v4 + 16) > v5);
      *v6 = v13;
      *((_QWORD *)v6 + 2) = v5;
      result = v11;
      *(__int128 *)((char *)v6 + 24) = (__int128)v11;
      *((_QWORD *)v6 + 5) = v12;
    }
  }
  return result;
}

uint64_t zilch::Angle::pi(zilch::Angle *this)
{
  return 0x8000;
}

_WORD *zilch::Angle::Angle(_WORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Angle::zero(zilch::Angle *this)
{
  return 0;
}

zilch::Angle *zilch::Angle::Angle(zilch::Angle *this, const zilch::GeoCoordinates *a2, const zilch::GeoCoordinates *a3)
{
  *(_WORD *)this = 0;
  zilch::Angle::set(this, a2, a3);
  return this;
}

{
  *(_WORD *)this = 0;
  zilch::Angle::set(this, a2, a3);
  return this;
}

double zilch::Angle::set(zilch::Angle *this, const zilch::GeoCoordinates *a2, const zilch::GeoCoordinates *a3)
{
  zilch::GeoCoordinates *v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  double v11;
  double v12;
  unsigned __int16 v13;
  double v14;
  long double v15;
  double v16;
  long double v17;
  double v18;
  double result;
  int v20;
  int v21;

  v3 = a3;
  v6 = zilch::GeoCoordinates::x(a3);
  v7 = zilch::GeoCoordinates::x(a2);
  v21 = zilch::operator-(v6, v7);
  v8 = zilch::GeoCoordinates::y(v3);
  v9 = zilch::GeoCoordinates::y(a2);
  v20 = zilch::operator-(v8, v9);
  LODWORD(a2) = zilch::GeoCoordinates::y(a2);
  v10 = zilch::GeoCoordinates::y(v3);
  LODWORD(v3) = zilch::Latitude::average((int)a2, v10);
  v12 = zilch::Latitude::toDegrees((zilch::Latitude *)&v20, v11);
  v14 = zilch::cos((int)v3, v13);
  v15 = v12 * v14;
  v16 = zilch::Longitude::toDegrees((zilch::Longitude *)&v21, v14);
  v17 = 1.57079633 - atan2(v15, v16);
  v18 = fmod(v17, 6.28318531);
  if (v17 < 0.0)
    v18 = v18 + 6.28318531;
  result = v18 * 65536.0 / 6.28318531;
  *(_WORD *)this = (int)result;
  return result;
}

uint64_t zilch::Angle::fromRadians(zilch::Angle *this, long double a2)
{
  double v3;

  v3 = fmod(a2, 6.28318531);
  if (a2 < 0.0)
    v3 = v3 + 6.28318531;
  return (int)(v3 * 65536.0 / 6.28318531);
}

double zilch::Angle::setRadians(zilch::Angle *this, long double a2)
{
  double v4;
  double result;

  v4 = fmod(a2, 6.28318531);
  if (a2 < 0.0)
    v4 = v4 + 6.28318531;
  result = v4 * 65536.0 / 6.28318531;
  *(_WORD *)this = (int)result;
  return result;
}

uint64_t zilch::Angle::fromDegrees(zilch::Angle *this, long double a2)
{
  double v3;

  v3 = fmod(a2, 360.0);
  if (a2 < 0.0)
    v3 = v3 + 360.0;
  return (int)(v3 * 65536.0 / 360.0);
}

double zilch::Angle::setDegrees(zilch::Angle *this, long double a2)
{
  double v4;
  double result;

  v4 = fmod(a2, 360.0);
  if (a2 < 0.0)
    v4 = v4 + 360.0;
  result = v4 * 65536.0 / 360.0;
  *(_WORD *)this = (int)result;
  return result;
}

double zilch::Angle::toRadians(zilch::Angle *this, double a2)
{
  LOWORD(a2) = *(_WORD *)this;
  return (double)*(unint64_t *)&a2 * 6.28318531 * 0.0000152587891;
}

double zilch::Angle::toDegrees(zilch::Angle *this, double a2)
{
  LOWORD(a2) = *(_WORD *)this;
  return (double)*(unint64_t *)&a2 * 360.0 * 0.0000152587891;
}

uint64_t zilch::Angle::toUint16(zilch::Angle *this)
{
  return *(unsigned __int16 *)this;
}

_WORD *zilch::Angle::setUint16(_WORD *this, __int16 a2)
{
  *this = a2;
  return this;
}

long double zilch::Angle::sin(zilch::Angle *this)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)*(unsigned __int16 *)this);
}

long double zilch::SinTable::calculateSinFromUInt16(zilch::SinTable *this)
{
  double v1;
  unsigned int v3;

  if (((unsigned __int16)this & 0xC000) == 0)
  {
    v1 = (double)this;
    return sin(v1 * 6.28318531 * 0.0000152587891);
  }
  if (((unsigned __int16)this & 0x8000) == 0)
  {
    v1 = (double)(unsigned __int16)(0x8000 - (_WORD)this);
    return sin(v1 * 6.28318531 * 0.0000152587891);
  }
  if (this >> 14 > 2)
    v3 = (unsigned __int16)-(__int16)this;
  else
    v3 = this ^ 0x8000;
  return sin((double)v3 * -6.28318531 * 0.0000152587891);
}

long double zilch::Angle::cos(zilch::Angle *this)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)(unsigned __int16)(*(_WORD *)this + 0x4000));
}

_WORD *zilch::Angle::operator+=(_WORD *result, __int16 a2)
{
  *result += a2;
  return result;
}

_WORD *zilch::Angle::operator-=(_WORD *result, __int16 a2)
{
  *result -= a2;
  return result;
}

uint64_t zilch::Angle::operator+(unsigned __int16 *a1, int a2)
{
  return *a1 + a2;
}

uint64_t zilch::Angle::operator-(unsigned __int16 *a1, int a2)
{
  return *a1 - a2;
}

double zilch::Angle::radiansFrom(_WORD *a1, unsigned __int16 a2, double a3)
{
  double v3;

  LOWORD(a3) = *a1;
  v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 <= 3.14159265)
  {
    if (v3 < -3.14159265)
      v3 = v3 + 6.28318531;
  }
  else
  {
    v3 = v3 + -6.28318531;
  }
  return fabs(fmod(v3, 6.28318531));
}

double zilch::Angle::degreesFrom(_WORD *a1, unsigned __int16 a2, double a3)
{
  double v3;

  LOWORD(a3) = *a1;
  v3 = (double)*(unint64_t *)&a3 * 6.28318531 * 0.0000152587891 - (double)a2 * 6.28318531 * 0.0000152587891;
  if (v3 <= 3.14159265)
  {
    if (v3 < -3.14159265)
      v3 = v3 + 6.28318531;
  }
  else
  {
    v3 = v3 + -6.28318531;
  }
  return fabs(fmod(v3, 6.28318531)) * 360.0 / 6.28318531;
}

BOOL zilch::Angle::operator==(unsigned __int16 *a1, unsigned __int16 a2)
{
  return *a1 == a2;
}

BOOL zilch::Angle::operator!=(unsigned __int16 *a1, unsigned __int16 a2)
{
  return *a1 != a2;
}

double zilch::sin(unsigned __int16 a1)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)a1);
}

double zilch::cos(__int16 a1)
{
  return zilch::SinTable::calculateSinFromUInt16((zilch::SinTable *)(unsigned __int16)(a1 + 0x4000));
}

zilch::ControlPoint *zilch::ControlPoint::ControlPoint(zilch::ControlPoint *this)
{
  *(_DWORD *)this = 1;
  zilch::GeoCoordinates::GeoCoordinates((zilch::ControlPoint *)((char *)this + 4));
  zilch::Angle::Angle((_WORD *)this + 8);
  zilch::FormOfWay::FormOfWay((_DWORD *)this + 5, 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)this + 6, 9);
  *((_DWORD *)this + 7) = 0;
  return this;
}

uint64_t zilch::ControlPoint::ControlPoint(uint64_t a1, uint64_t *a2, __int16 a3)
{
  uint64_t v4;

  *(_DWORD *)a1 = 0;
  v4 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 4) = v4;
  *(_WORD *)(a1 + 16) = a3;
  zilch::FormOfWay::FormOfWay((_DWORD *)(a1 + 20), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

{
  uint64_t v4;

  *(_DWORD *)a1 = 0;
  v4 = *a2;
  *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 2);
  *(_QWORD *)(a1 + 4) = v4;
  *(_WORD *)(a1 + 16) = a3;
  zilch::FormOfWay::FormOfWay((_DWORD *)(a1 + 20), 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)(a1 + 24), 9);
  *(_DWORD *)(a1 + 28) = 0;
  return a1;
}

zilch::ControlPoint *zilch::ControlPoint::ControlPoint(zilch::ControlPoint *this, const zilch::GeoCoordinates *a2)
{
  uint64_t v3;

  *(_DWORD *)this = 1;
  v3 = *(_QWORD *)a2;
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 2);
  *(_QWORD *)((char *)this + 4) = v3;
  zilch::Angle::Angle((_WORD *)this + 8);
  zilch::FormOfWay::FormOfWay((_DWORD *)this + 5, 0);
  zilch::FunctionalClass::FunctionalClass((_DWORD *)this + 6, 9);
  *((_DWORD *)this + 7) = 0;
  return this;
}

uint64_t zilch::ControlPoint::type(zilch::ControlPoint *this)
{
  return *(unsigned int *)this;
}

BOOL zilch::ControlPoint::dummy(zilch::ControlPoint *this)
{
  return *(_DWORD *)this == 1;
}

uint64_t zilch::ControlPoint::position(zilch::ControlPoint *this)
{
  return (uint64_t)this + 4;
}

uint64_t zilch::ControlPoint::heading(zilch::ControlPoint *this)
{
  return *((unsigned __int16 *)this + 8);
}

uint64_t zilch::ControlPoint::formOfWay(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t zilch::ControlPoint::functionalClass(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t zilch::ControlPoint::uturnFlag(zilch::ControlPoint *this)
{
  return *((unsigned int *)this + 7);
}

_DWORD *zilch::ControlPoint::setType(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t zilch::ControlPoint::setPosition(uint64_t this, const GeoCoordinates *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)&a2->var0.var0;
  *(_DWORD *)(this + 12) = a2->var2;
  *(_QWORD *)(this + 4) = v2;
  return this;
}

uint64_t zilch::ControlPoint::setHeading(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

FormOfWay *zilch::ControlPoint::setFormOfWay(FormOfWay *this, FormOfWay a2)
{
  this[5].var0 = a2.var0;
  return this;
}

FunctionalClass *zilch::ControlPoint::setFunctionalClass(FunctionalClass *this, FunctionalClass a2)
{
  this[6].var0 = a2.var0;
  return this;
}

uint64_t zilch::ControlPoint::setUTurnFlag(uint64_t result, int a2)
{
  *(_DWORD *)(result + 28) = a2;
  return result;
}

zilch::ControlPoint *zilch::ControlPoint::null@<X0>(zilch::ControlPoint *a1@<X8>)
{
  return zilch::ControlPoint::ControlPoint(a1);
}

BOOL zilch::ControlPoint::operator==(_DWORD *a1, _DWORD *a2)
{
  double v4;
  _BOOL8 result;
  double v6;

  result = 0;
  if (*a1 == *a2 && !zilch::GeoCoordinates::operator!=(a1 + 1, a2 + 1))
  {
    if (*a1 == 1)
      return 1;
    v6 = zilch::Angle::toDegrees((zilch::Angle *)(a1 + 4), v4);
    if (vabdd_f64(v6, zilch::Angle::toDegrees((zilch::Angle *)(a2 + 4), v6)) < 1.0
      && !zilch::FormOfWay::operator!=(a1 + 5, a2[5])
      && !zilch::FunctionalClass::operator!=(a1 + 6, a2[6]))
    {
      return 1;
    }
  }
  return result;
}

BOOL zilch::ControlPoint::operator!=(_DWORD *a1, _DWORD *a2)
{
  return !zilch::ControlPoint::operator==(a1, a2);
}

void zilch::ControlPoint::encode(zilch::ControlPoint *this, zilch::WriteBitstream *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;

  zilch::WriteBitstream::put(a2, *(_DWORD *)this, 2);
  v10 = zilch::GeoCoordinates::x((zilch::ControlPoint *)((char *)this + 4));
  v4 = zilch::Longitude::toUint32((zilch::Longitude *)&v10);
  zilch::WriteBitstream::put(a2, v4, 32);
  v9 = zilch::GeoCoordinates::y((zilch::ControlPoint *)((char *)this + 4));
  v5 = zilch::Latitude::toUint32((zilch::Latitude *)&v9);
  zilch::WriteBitstream::put(a2, v5, 32);
  if (*(_DWORD *)this != 1)
  {
    v6 = zilch::Angle::toUint16((zilch::ControlPoint *)((char *)this + 16));
    zilch::WriteBitstream::put(a2, v6, 16);
    v7 = zilch::FormOfWay::type((zilch::ControlPoint *)((char *)this + 20));
    zilch::WriteBitstream::put(a2, v7, 5);
    v8 = zilch::FunctionalClass::toInteger((zilch::ControlPoint *)((char *)this + 24));
    zilch::WriteBitstream::put(a2, v8, 4);
    zilch::WriteBitstream::put(a2, *((_DWORD *)this + 7) == 1);
  }
}

uint64_t zilch::ControlPoint::decode(zilch::ControlPoint *this, zilch::ReadBitstream *a2)
{
  zilch::Longitude *v4;
  zilch::Latitude *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  Longitude v9;
  Latitude v10;
  uint64_t result;
  __int16 v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;

  *(_DWORD *)this = zilch::ReadBitstream::get(a2, 2);
  v4 = (zilch::Longitude *)zilch::ReadBitstream::get(a2, 32);
  v5 = (zilch::Latitude *)zilch::ReadBitstream::get(a2, 32);
  LODWORD(v4) = zilch::Longitude::fromUint32(v4, v6);
  v8 = zilch::Latitude::fromUint32(v5, v7);
  v9.var0 = v4;
  v10.var0 = v8;
  result = zilch::GeoCoordinates::set((uint64_t)this + 4, v9, v10);
  if (*(_DWORD *)this != 1)
  {
    v12 = zilch::ReadBitstream::get(a2, 16);
    zilch::Angle::setUint16((_WORD *)this + 8, v12);
    v13 = zilch::ReadBitstream::get(a2, 5);
    zilch::FormOfWay::FormOfWay(&v19, v13);
    *((_DWORD *)this + 5) = v19;
    v14 = zilch::ReadBitstream::get(a2, 4);
    result = (uint64_t)zilch::FunctionalClass::FunctionalClass(&v18, v14);
    *((_DWORD *)this + 6) = v18;
    v15 = *((_QWORD *)a2 + 3);
    if (v15 >= *((_QWORD *)a2 + 1))
    {
      v17 = 0;
      *((_BYTE *)a2 + 36) = 1;
    }
    else
    {
      v16 = *((_DWORD *)a2 + 8);
      v17 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v15) >> v16) & 1;
      *((_DWORD *)a2 + 8) = v16 + 1;
      if (v16 >= 31)
      {
        *((_DWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 3) = v15 + 1;
      }
    }
    *((_DWORD *)this + 7) = v17;
  }
  return result;
}

_QWORD *zilch::ControlPoint::toString@<X0>(zilch::ControlPoint *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  zilch::GeoCoordinates *v5;
  int v6;
  void **v7;
  void **v8;
  double v9;
  double v10;
  int v11;
  void **v12;
  void **v13;
  void **v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  void *v20[2];
  char v21;
  char __str[1024];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)this;
  v5 = (zilch::ControlPoint *)((char *)this + 4);
  if (v6 == 1)
  {
    zilch::GeoCoordinates::toString(v5, v20, a3);
    if (v21 >= 0)
      v7 = v20;
    else
      v7 = (void **)v20[0];
    snprintf(__str, 0x400uLL, "ControlPoint(%s)", (const char *)v7);
  }
  else
  {
    v8 = v20;
    zilch::GeoCoordinates::toString(v5, v20, a3);
    if (v21 < 0)
      v8 = (void **)v20[0];
    v10 = zilch::Angle::toDegrees((zilch::ControlPoint *)((char *)this + 16), v9);
    zilch::FormOfWay::toString((zilch::ControlPoint *)((char *)this + 20), v18);
    v11 = v19;
    v12 = (void **)v18[0];
    zilch::FunctionalClass::toString((zilch::ControlPoint *)((char *)this + 24), __p);
    v13 = v18;
    if (v11 < 0)
      v13 = v12;
    if (v17 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    snprintf(__str, 0x400uLL, "ControlPoint(%s, %f, %s, %s)", (const char *)v8, v10, (const char *)v13, (const char *)v14);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
  if (v21 < 0)
    operator delete(v20[0]);
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

void sub_188777C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t zilch::ControlPoint::toJson(zilch::ControlPoint *this)
{
  _QWORD *v2;
  uint64_t v3;
  char *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  const char *v18;
  char *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *__p;
  uint64_t v26;
  unsigned __int8 v27;
  _QWORD v28[2];
  _QWORD v29[11];
  char v30;
  uint64_t v31;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"{", 1);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"type\":\"", 8);
  v3 = *(int *)this;
  v4 = "(unknown)";
  if (v3 <= 2)
    v4 = off_1E1BFED30[v3];
  std::string::basic_string[abi:ne180100]<0>(&__p, v4);
  if ((v27 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v27 & 0x80u) == 0)
    v6 = v27;
  else
    v6 = v26;
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)p_p, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\",", 2);
  if ((char)v27 < 0)
    operator delete(__p);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"position\":", 11);
  zilch::GeoCoordinates::toJson((uint64_t *)&__p, (zilch::ControlPoint *)((char *)this + 4));
  if ((v27 & 0x80u) == 0)
    v9 = &__p;
  else
    v9 = __p;
  if ((v27 & 0x80u) == 0)
    v10 = v27;
  else
    v10 = v26;
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)",", 1);
  if ((char)v27 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"angle\":\"", 9);
  zilch::Angle::toDegrees((zilch::ControlPoint *)((char *)this + 16), v12);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"formOfWay\":\"", 13);
  zilch::FormOfWay::type((zilch::ControlPoint *)((char *)this + 20));
  v14 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"functionalClass\":\"", 19);
  zilch::FunctionalClass::toInteger((zilch::ControlPoint *)((char *)this + 24));
  v15 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\",", 2);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"\"uTurn\":\"", 9);
  v17 = *((_DWORD *)this + 7);
  v18 = "FALSE";
  if (v17)
    v18 = "(unknown)";
  if (v17 == 1)
    v19 = "TRUE";
  else
    v19 = (char *)v18;
  std::string::basic_string[abi:ne180100]<0>(&__p, v19);
  if ((v27 & 0x80u) == 0)
    v20 = &__p;
  else
    v20 = __p;
  if ((v27 & 0x80u) == 0)
    v21 = v27;
  else
    v21 = v26;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v20, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"\"", 1);
  if ((char)v27 < 0)
    operator delete(__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"}", 1);
  std::stringbuf::str();
  v28[0] = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v29[0] = v23;
  v29[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v30 < 0)
    operator delete((void *)v29[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D764310](&v31);
}

void sub_188777F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1887780B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D764310](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x18D764310](a1 + 128);
  return a1;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x18D7641B4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x18D7641C0](v13);
  return a1;
}

void sub_188778278(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x18D7641C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x188778258);
}

void sub_1887782C0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1887783F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t zilch::EndianUtils::getEndianType(zilch::EndianUtils *this)
{
  return 0;
}

uint64_t zilch::EndianUtils::swapEndian(zilch::EndianUtils *this)
{
  return bswap32(this);
}

_DWORD *zilch::FormOfWay::FormOfWay(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

uint64_t zilch::FormOfWay::type(zilch::FormOfWay *this)
{
  return *(unsigned int *)this;
}

_QWORD *zilch::FormOfWay::toString@<X0>(zilch::FormOfWay *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  char *v5;

  v4 = *(_DWORD *)this - 1;
  if (v4 > 0x15)
    v5 = "FormOfWay::UNKNOWN";
  else
    v5 = off_1E1BFED48[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

BOOL zilch::FormOfWay::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL zilch::FormOfWay::operator!=(_DWORD *a1, int a2)
{
  return *a1 != a2;
}

_DWORD *zilch::FunctionalClass::FunctionalClass(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

{
  *result = a2;
  return result;
}

int *zilch::FunctionalClass::FunctionalClass(int *this, unsigned int a2)
{
  int v2;

  if (a2 >= 9)
    v2 = 9;
  else
    v2 = a2;
  *this = v2;
  return this;
}

{
  int v2;

  if (a2 >= 9)
    v2 = 9;
  else
    v2 = a2;
  *this = v2;
  return this;
}

uint64_t zilch::FunctionalClass::toInteger(zilch::FunctionalClass *this)
{
  return *(unsigned int *)this;
}

BOOL zilch::FunctionalClass::operator==(_DWORD *a1, int a2)
{
  return *a1 == a2;
}

BOOL zilch::FunctionalClass::operator!=(_DWORD *a1, int a2)
{
  return *a1 != a2;
}

_QWORD *zilch::FunctionalClass::toString@<X0>(zilch::FunctionalClass *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *(int *)this;
  if (v4 > 8)
    v5 = "UNKNOWN";
  else
    v5 = off_1E1BFEDF8[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

_DWORD *zilch::GeoCoordinates::null(zilch::GeoCoordinates *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF4FCF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FCF8))
  {
    zilch::Longitude::Longitude(&dword_1EDF4FCE8);
    zilch::Latitude::Latitude(&dword_1EDF4FCEC);
    dword_1EDF4FCF0 = 0x7FFFFFFF;
    __cxa_guard_release(&qword_1EDF4FCF8);
  }
  return &dword_1EDF4FCE8;
}

void sub_18877863C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDF4FCF8);
  _Unwind_Resume(a1);
}

zilch::GeoCoordinates *zilch::GeoCoordinates::GeoCoordinates(zilch::GeoCoordinates *this)
{
  _DWORD *v2;

  v2 = zilch::Longitude::Longitude(this);
  zilch::Latitude::Latitude(v2 + 1);
  *((_DWORD *)this + 2) = 0x7FFFFFFF;
  return this;
}

{
  _DWORD *v2;

  v2 = zilch::Longitude::Longitude(this);
  zilch::Latitude::Latitude(v2 + 1);
  *((_DWORD *)this + 2) = 0x7FFFFFFF;
  return this;
}

uint64_t zilch::GeoCoordinates::GeoCoordinates(uint64_t this, Longitude a2, Latitude a3)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = 0x7FFFFFFF;
  return this;
}

{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = 0x7FFFFFFF;
  return this;
}

uint64_t zilch::GeoCoordinates::GeoCoordinates(uint64_t this, Longitude a2, Latitude a3, int a4)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

uint64_t zilch::GeoCoordinates::set(uint64_t this, Longitude a2, Latitude a3)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  return this;
}

uint64_t zilch::GeoCoordinates::set(uint64_t this, Longitude a2, Latitude a3, int a4)
{
  *(Longitude *)this = a2;
  *(Latitude *)(this + 4) = a3;
  *(_DWORD *)(this + 8) = a4;
  return this;
}

uint64_t zilch::GeoCoordinates::x(zilch::GeoCoordinates *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::GeoCoordinates::y(zilch::GeoCoordinates *this)
{
  return *((unsigned int *)this + 1);
}

zilch *zilch::GeoCoordinates::z(zilch::GeoCoordinates *this)
{
  return (zilch *)*((unsigned int *)this + 2);
}

_DWORD *zilch::GeoCoordinates::operator+=(_DWORD *a1, int *a2)
{
  zilch::Longitude::operator+=(a1, *a2);
  return zilch::Latitude::operator+=(a1 + 1, a2[1]);
}

_DWORD *zilch::GeoCoordinates::operator-=(_DWORD *a1, int *a2)
{
  zilch::Longitude::operator-=(a1, *a2);
  return zilch::Latitude::operator-=(a1 + 1, a2[1]);
}

BOOL zilch::GeoCoordinates::operator==(_DWORD *a1, unsigned int *a2)
{
  _BOOL8 result;

  result = zilch::Longitude::operator==(a1, *a2);
  if (result)
  {
    result = zilch::Latitude::operator==(a1 + 1, a2[1]);
    if (result)
      return a1[2] == a2[2];
  }
  return result;
}

BOOL zilch::GeoCoordinates::operator!=(_DWORD *a1, unsigned int *a2)
{
  return !zilch::GeoCoordinates::operator==(a1, a2);
}

uint64_t zilch::operator+(uint64_t *a1, int *a2)
{
  uint64_t v4;
  int v5;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  zilch::Longitude::operator+=(&v4, *a2);
  zilch::Latitude::operator+=((_DWORD *)&v4 + 1, a2[1]);
  return v4;
}

uint64_t zilch::operator-(uint64_t *a1, int *a2)
{
  uint64_t v4;
  int v5;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  zilch::Longitude::operator-=(&v4, *a2);
  zilch::Latitude::operator-=((_DWORD *)&v4 + 1, a2[1]);
  return v4;
}

_QWORD *zilch::GeoCoordinates::toString@<X0>(zilch::GeoCoordinates *this@<X0>, _QWORD *a2@<X8>, double a3@<D0>)
{
  double v5;
  double v6;
  char __str[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = zilch::Latitude::toDegrees((zilch::GeoCoordinates *)((char *)this + 4), a3);
  v6 = zilch::Longitude::toDegrees(this, v5);
  snprintf(__str, 0x400uLL, "LatLng(%f, %f, %d)", v5, v6, *((_DWORD *)this + 2));
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

uint64_t zilch::GeoCoordinates::distanceTo(zilch::GeoCoordinates *this, const zilch::GeoCoordinates *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  zilch::Latitude *v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned __int16 v12;
  __int16 v13;
  double v14;

  v4 = zilch::Longitude::toUint32(this);
  v5 = v4 - zilch::Longitude::toUint32(a2);
  if (v5 >= 0)
    v6 = v5;
  else
    v6 = -v5;
  v7 = zilch::Latitude::toUint32((zilch::GeoCoordinates *)((char *)this + 4));
  v8 = (const zilch::GeoCoordinates *)((char *)a2 + 4);
  v9 = v7 - zilch::Latitude::toUint32(v8);
  if (v9 >= 0)
    v10 = v9;
  else
    v10 = -v9;
  v11 = zilch::Latitude::toUint32(v8);
  v13 = zilch::Angle::fromUint16((zilch::Angle *)(unsigned __int16)(((v11 + (v10 >> 1)) >> 16) - 0x4000), v12);
  v14 = zilch::cos(v13);
  return sqrt((double)(((40008000 * (unint64_t)v10) >> 32)
                                   * ((40008000 * (unint64_t)v10) >> 32)
                                   + ((unint64_t)(v14 * (double)(40075160 * (unint64_t)v6)) >> 32)
                                   * ((unint64_t)(v14 * (double)(40075160 * (unint64_t)v6)) >> 32)));
}

uint64_t zilch::GeoCoordinates::toJson(zilch::GeoCoordinates *this)
{
  double v2;
  _QWORD *v3;
  double v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"{", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"latitude\":\"", 12);
  zilch::Latitude::toDegrees((zilch::GeoCoordinates *)((char *)this + 4), v2);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"\",", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"longitude\":\"", 13);
  zilch::Longitude::toDegrees(this, v4);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\"", 1);
  if (*((_DWORD *)this + 2) != 0x7FFFFFFF)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\",elevation\":\"", 14);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\"", 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"}", 1);
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D764310](&v12);
}

void sub_188778B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL zilch::GeoCoordinates::has_elevation(zilch::GeoCoordinates *this)
{
  return *((_DWORD *)this + 2) != 0x7FFFFFFF;
}

_DWORD *zilch::Latitude::Latitude(_DWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Latitude::fromDegrees(zilch::Latitude *this, double a2)
{
  double i;

  for (i = a2 + 90.0; i < 0.0; i = i + 360.0)
    ;
  for (; i >= 360.0; i = i + -360.0)
    ;
  return (i * 4294967300.0 / 360.0);
}

uint64_t zilch::Latitude::null(zilch::Latitude *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t zilch::Latitude::average(int a1, int a2)
{
  return (a2 + a1) >> 1;
}

double zilch::Latitude::toDegrees(zilch::Latitude *this, double a2)
{
  double result;

  LODWORD(a2) = *(_DWORD *)this;
  result = (double)*(unint64_t *)&a2 * 360.0 * 2.32830644e-10 + -90.0;
  if (result >= 180.0)
    return result + -360.0;
  return result;
}

double zilch::Latitude::toRadians(zilch::Latitude *this, double a2)
{
  double v2;

  LODWORD(a2) = *(_DWORD *)this;
  v2 = (double)*(unint64_t *)&a2 * 360.0 * 2.32830644e-10 + -90.0;
  if (v2 >= 180.0)
    v2 = v2 + -360.0;
  return v2 * 0.0174532925;
}

uint64_t zilch::Latitude::toUint32(zilch::Latitude *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::Latitude::toAngle(zilch::Latitude *this, unsigned __int16 a2)
{
  return zilch::Angle::fromUint16((zilch::Angle *)((*(_DWORD *)this - 0x40000000) >> 16), a2);
}

_DWORD *zilch::Latitude::operator+=(_DWORD *result, int a2)
{
  *result += a2 - 0x40000000;
  return result;
}

_DWORD *zilch::Latitude::operator-=(_DWORD *result, int a2)
{
  *result = *result - a2 + 0x40000000;
  return result;
}

BOOL zilch::Latitude::operator==(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *a1 - a2;
  if (*a1 < a2)
    v2 = a2 - *a1;
  return v2 < 2;
}

BOOL zilch::Latitude::operator!=(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *a1 - a2;
  if (*a1 < a2)
    v2 = a2 - *a1;
  return v2 > 1;
}

uint64_t zilch::operator+(int a1, int a2)
{
  return (a1 + a2 - 0x40000000);
}

{
  return (a2 + a1);
}

uint64_t zilch::operator-(int a1, int a2)
{
  return (a1 - a2 + 0x40000000);
}

{
  return (a1 - a2);
}

double zilch::cos(int a1, unsigned __int16 a2)
{
  __int16 v2;

  v2 = zilch::Angle::fromUint16((zilch::Angle *)((a1 - 0x40000000) >> 16), a2);
  return zilch::cos(v2);
}

_DWORD *zilch::Longitude::Longitude(_DWORD *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

uint64_t zilch::Longitude::fromDegrees(zilch::Longitude *this, double a2)
{
  for (; a2 < 0.0; a2 = a2 + 360.0)
    ;
  for (; a2 >= 360.0; a2 = a2 + -360.0)
    ;
  return (a2 * 4294967300.0 / 360.0);
}

uint64_t zilch::Longitude::null(zilch::Longitude *this)
{
  return 0xFFFFFFFFLL;
}

double zilch::Longitude::toDegrees(zilch::Longitude *this, double a2)
{
  double result;

  LODWORD(a2) = *(_DWORD *)this;
  result = (double)*(unint64_t *)&a2 * 360.0 / 4294967300.0;
  if (result >= 180.0)
    return result + -360.0;
  return result;
}

double zilch::Longitude::toRadians(zilch::Longitude *this, double a2)
{
  double v2;

  LODWORD(a2) = *(_DWORD *)this;
  v2 = (double)*(unint64_t *)&a2 * 360.0 / 4294967300.0;
  if (v2 >= 180.0)
    v2 = v2 + -360.0;
  return v2 * 0.0174532925;
}

uint64_t zilch::Longitude::toUint32(zilch::Longitude *this)
{
  return *(unsigned int *)this;
}

_DWORD *zilch::Longitude::operator+=(_DWORD *result, int a2)
{
  *result += a2;
  return result;
}

_DWORD *zilch::Longitude::operator-=(_DWORD *result, int a2)
{
  *result -= a2;
  return result;
}

BOOL zilch::Longitude::operator==(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *a1 - a2;
  if (*a1 < a2)
    v2 = a2 - *a1;
  return v2 < 2;
}

BOOL zilch::Longitude::operator!=(_DWORD *a1, unsigned int a2)
{
  unsigned int v2;

  v2 = *a1 - a2;
  if (*a1 < a2)
    v2 = a2 - *a1;
  return v2 > 1;
}

zilch::Message *zilch::Message::Message(zilch::Message *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  *(_QWORD *)this = v2;
  return this;
}

zilch::Message *zilch::Message::Message(zilch::Message *this, const zilch::Message *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)operator new();
  v5 = *(_QWORD *)a2;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  std::vector<zilch::ControlPoint>::__init_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(v4, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 5);
  *(_QWORD *)this = v4;
  return this;
}

void sub_188779010(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t *zilch::Message::Message(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *a2;
  *a2 = 0;
  *a1 = v4;
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v6 = *a2;
  *a2 = (uint64_t)v5;
  if (v6)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)a2, v6);
  return a1;
}

void sub_18877909C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void zilch::Message::~Message(zilch::Message *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t zilch::Message::toJson(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"[", 1);
  v2 = **this;
  if ((*this)[1] != v2)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      zilch::ControlPoint::toJson((uint64_t *)__p, (zilch::ControlPoint *)(v2 + v3));
      if ((v11 & 0x80u) == 0)
        v5 = __p;
      else
        v5 = (void **)__p[0];
      if ((v11 & 0x80u) == 0)
        v6 = v11;
      else
        v6 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v5, v6);
      if ((char)v11 < 0)
        operator delete(__p[0]);
      ++v4;
      v2 = **this;
      v7 = (*this)[1] - v2;
      if (v4 < v7 >> 5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)",", 1);
        v2 = **this;
        v7 = (*this)[1] - v2;
      }
      v3 += 32;
    }
    while (v4 < v7 >> 5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]", 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F50];
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v8;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D764310](&v15);
}

void sub_1887792B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

zilch::Message *zilch::Message::Message(zilch::Message *this, zilch::ReadBitstream *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  v4[1] = 0;
  v4[2] = 0;
  *v4 = 0;
  *(_QWORD *)this = v4;
  zilch::Message::decode(this, a2);
  return this;
}

void sub_18877933C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t zilch::Message::decode(zilch::Message *this, zilch::ReadBitstream *a2)
{
  int v4;

  std::vector<zilch::ControlPoint>::resize(*(_QWORD *)this, 0);
  v4 = zilch::ReadBitstream::get(a2, 8);
  if (v4 <= 3)
  {
    if (v4 != 2)
    {
      if (v4 == 3)
        return zilch::Message::decode_v3_v4((void ***)this, a2, 0);
      return 2;
    }
    return zilch::Message::decode_v2((void ***)this, a2);
  }
  if (v4 != 4)
  {
    if (v4 != 64)
      return 2;
    return zilch::Message::decode_v2((void ***)this, a2);
  }
  return zilch::Message::decode_v3_v4((void ***)this, a2, 1);
}

char **zilch::Message::operator=(char **a1, char ***a2)
{
  char *v3;

  v3 = *a1;
  if (v3 != (char *)*a2)
    std::vector<zilch::ControlPoint>::__assign_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(v3, **a2, (uint64_t)(*a2)[1], ((*a2)[1] - **a2) >> 5);
  return a1;
}

uint64_t *zilch::Message::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t zilch::Message::getPoint(zilch::Message *this, unsigned int a2)
{
  return **(_QWORD **)this + 32 * a2;
}

uint64_t zilch::Message::operator[](_QWORD **a1, unsigned int a2)
{
  return **a1 + 32 * a2;
}

uint64_t zilch::Message::front(zilch::Message *this)
{
  return **(_QWORD **)this;
}

uint64_t zilch::Message::back(zilch::Message *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8) - 32;
}

uint64_t zilch::Message::size(zilch::Message *this)
{
  return (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 5;
}

void zilch::Message::addPoint(void ***this, const zilch::ControlPoint *a2)
{
  void **v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  __int128 v19;
  _DWORD v20[8];

  zilch::ControlPoint::null((zilch::ControlPoint *)v20);
  if (zilch::ControlPoint::operator!=(a2, v20))
  {
    v4 = *this;
    v5 = v4[1];
    v6 = (unint64_t)v4[2];
    if ((unint64_t)v5 >= v6)
    {
      v9 = ((char *)v5 - (_BYTE *)*v4) >> 5;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 59)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v11 = v6 - (_QWORD)*v4;
      if (v11 >> 4 > v10)
        v10 = v11 >> 4;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
        v12 = 0x7FFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(v4 + 2), v12);
      else
        v13 = 0;
      v14 = &v13[32 * v9];
      v15 = &v13[32 * v12];
      v16 = *((_OWORD *)a2 + 1);
      *(_OWORD *)v14 = *(_OWORD *)a2;
      *((_OWORD *)v14 + 1) = v16;
      v8 = v14 + 32;
      v18 = (char *)*v4;
      v17 = (char *)v4[1];
      if (v17 != *v4)
      {
        do
        {
          v19 = *((_OWORD *)v17 - 1);
          *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
          *((_OWORD *)v14 - 1) = v19;
          v14 -= 32;
          v17 -= 32;
        }
        while (v17 != v18);
        v17 = (char *)*v4;
      }
      *v4 = v14;
      v4[1] = v8;
      v4[2] = v15;
      if (v17)
        operator delete(v17);
    }
    else
    {
      v7 = *((_OWORD *)a2 + 1);
      *v5 = *(_OWORD *)a2;
      v5[1] = v7;
      v8 = v5 + 2;
    }
    v4[1] = v8;
  }
}

void std::vector<zilch::ControlPoint>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = ((char *)v7 - (_BYTE *)*a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v12 = v5 - (_QWORD)*a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v16 = &v14[32 * v13];
    v17 = a2[1];
    *(_OWORD *)v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    v9 = v15 + 32;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
  else
  {
    v8 = a2[1];
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  a1[1] = v9;
}

uint64_t zilch::Message::popBack(uint64_t this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)this + 8);
  if (**(_QWORD **)this != v1)
    *(_QWORD *)(*(_QWORD *)this + 8) = v1 - 32;
  return this;
}

void zilch::Message::encode(zilch::ControlPoint ***this, zilch::WriteBitstream *a2, int a3)
{
  switch(a3)
  {
    case 4:
      zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 0);
      zilch::WriteBitstream::put(a2, 4u, 8);
      zilch::Message::encode_v3_v4(this, a2, 1);
      break;
    case 3:
      zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 0);
      zilch::WriteBitstream::put(a2, 3u, 8);
      zilch::Message::encode_v3_v4(this, a2, 0);
      break;
    case 2:
      zilch::WriteBitstream::setUseOldBitOrder((uint64_t)a2, 1);
      zilch::WriteBitstream::put(a2, 2u, 8);
      zilch::Message::encode_v2(this, a2);
      break;
  }
}

void zilch::Message::encode_v2(zilch::ControlPoint ***this, zilch::WriteBitstream *a2)
{
  unint64_t v4;
  zilch::GeoCoordinates *v5;
  unsigned int v6;
  zilch::GeoCoordinates *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  zilch::GeoCoordinates *v14;
  unsigned int v15;
  zilch::GeoCoordinates *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  zilch::ControlPoint ***v31;
  unsigned int v32;
  int v33;

  v4 = (*this)[1] - **this;
  zilch::WriteBitstream::put(a2, v4 >> 5, 32);
  zilch::WriteBitstream::put(a2, 0, 1);
  v5 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  v33 = zilch::GeoCoordinates::x(v5);
  v6 = zilch::Longitude::toUint32((zilch::Longitude *)&v33);
  v7 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  v33 = zilch::GeoCoordinates::y(v7);
  v8 = zilch::Latitude::toUint32((zilch::Latitude *)&v33);
  zilch::WriteBitstream::put(a2, v6, 32);
  zilch::WriteBitstream::put(a2, v8, 32);
  LOWORD(v33) = zilch::ControlPoint::heading(**this);
  v9 = zilch::Angle::toUint16((zilch::Angle *)&v33);
  zilch::WriteBitstream::put(a2, v9, 16);
  v33 = zilch::ControlPoint::formOfWay(**this);
  v10 = zilch::FormOfWay::type((zilch::FormOfWay *)&v33);
  zilch::WriteBitstream::put(a2, v10, 5);
  v31 = this;
  v33 = zilch::ControlPoint::functionalClass(**this);
  v11 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v33);
  zilch::WriteBitstream::put(a2, v11, 4);
  if ((v4 >> 5) >= 2)
  {
    v12 = (v4 >> 5) - 1;
    v13 = 32;
    do
    {
      v14 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**v31 + v13));
      v33 = zilch::GeoCoordinates::x(v14);
      v15 = zilch::Longitude::toUint32((zilch::Longitude *)&v33);
      v16 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**v31 + v13));
      v33 = zilch::GeoCoordinates::y(v16);
      v17 = zilch::Latitude::toUint32((zilch::Latitude *)&v33);
      v32 = v17;
      v18 = v15 < v6;
      if (v15 >= v6)
        v19 = v15 - v6;
      else
        v19 = v6 - v15;
      v20 = v8 - v17;
      v21 = v17 >= v8;
      v22 = v17 - v8;
      v23 = v17 < v8;
      if (v21)
        v24 = v22;
      else
        v24 = v20;
      zilch::WriteBitstream::put(a2, v18);
      if (HIWORD(v19))
        v25 = 24;
      else
        v25 = 16;
      zilch::WriteBitstream::put(a2, HIWORD(v19) != 0);
      zilch::WriteBitstream::put(a2, v19, v25);
      zilch::WriteBitstream::put(a2, v23);
      if (HIWORD(v24))
        v26 = 24;
      else
        v26 = 16;
      zilch::WriteBitstream::put(a2, HIWORD(v24) != 0);
      zilch::WriteBitstream::put(a2, v24, v26);
      v27 = zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**v31 + v13));
      zilch::WriteBitstream::put(a2, v27, 2);
      if (zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**v31 + v13)) != 1)
      {
        LOWORD(v33) = zilch::ControlPoint::heading((zilch::ControlPoint *)((char *)**v31 + v13));
        v28 = zilch::Angle::toUint16((zilch::Angle *)&v33);
        zilch::WriteBitstream::put(a2, v28, 16);
        v33 = zilch::ControlPoint::formOfWay((zilch::ControlPoint *)((char *)**v31 + v13));
        v29 = zilch::FormOfWay::type((zilch::FormOfWay *)&v33);
        zilch::WriteBitstream::put(a2, v29, 5);
        v33 = zilch::ControlPoint::functionalClass((zilch::ControlPoint *)((char *)**v31 + v13));
        v30 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v33);
        zilch::WriteBitstream::put(a2, v30, 4);
      }
      v13 += 32;
      v8 = v32;
      v6 = v15;
      --v12;
    }
    while (v12);
  }
}

void zilch::Message::encode_v3_v4(zilch::ControlPoint ***this, zilch::WriteBitstream *a2, int a3)
{
  unint64_t v5;
  zilch::GeoCoordinates *v6;
  int v7;
  zilch::GeoCoordinates *v8;
  int v9;
  zilch::GeoCoordinates *v10;
  unsigned int v11;
  zilch::ControlPoint *v12;
  unint64_t v13;
  zilch::GeoCoordinates *v14;
  int v15;
  zilch::GeoCoordinates *v16;
  int v17;
  zilch::GeoCoordinates *v18;
  unsigned int v19;
  int v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unsigned int *v51;
  unsigned int v52;
  zilch::GeoCoordinates *v53;
  unsigned int v54;
  zilch::GeoCoordinates *v55;
  unsigned int v56;
  zilch::GeoCoordinates *v57;
  int v58;
  unsigned int v59;
  double v60;
  double v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  zilch::GeoCoordinates *v66;
  unsigned int v67;
  zilch::GeoCoordinates *v68;
  int v69;
  zilch::GeoCoordinates *v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  double v77;
  double v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  int v85;
  _BYTE v87[12];
  unsigned int *v88;
  char *v89;
  void *v90;
  char *v91;
  char *v92;
  void *__p;
  char *v94;
  char *v95;

  v5 = (*this)[1] - **this;
  zilch::WriteBitstream::putEliasGamma(a2, v5 >> 5);
  __p = 0;
  v94 = 0;
  v95 = 0;
  v90 = 0;
  v91 = 0;
  v92 = 0;
  *(_QWORD *)&v87[4] = 0;
  v88 = 0;
  v89 = 0;
  v6 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_QWORD *)v87 = zilch::GeoCoordinates::x(v6);
  v7 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
  v8 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)v87 = zilch::GeoCoordinates::y(v8);
  v9 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
  v81 = v5;
  v82 = v5 >> 5;
  if (a3)
  {
    v10 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
    v11 = zilch::GeoCoordinates::z(v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = **this;
  if ((unint64_t)((*this)[1] - v12) >= 0x21)
  {
    v13 = 1;
    do
    {
      v14 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)v12 + 32 * v13));
      *(_DWORD *)v87 = zilch::GeoCoordinates::x(v14);
      v15 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
      v16 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + 32 * v13));
      *(_DWORD *)v87 = zilch::GeoCoordinates::y(v16);
      v17 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
      if (a3)
      {
        v18 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + 32 * v13));
        v19 = zilch::GeoCoordinates::z(v18);
      }
      else
      {
        v19 = 0;
      }
      if (v15 - v7 >= 0)
        v20 = v15 - v7;
      else
        v20 = v7 - v15;
      v21 = v94;
      if (v94 >= v95)
      {
        v23 = (char *)__p;
        v24 = (v94 - (_BYTE *)__p) >> 2;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v26 = v95 - (_BYTE *)__p;
        if ((v95 - (_BYTE *)__p) >> 1 > v25)
          v25 = v26 >> 1;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
          v27 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v95, v27);
          v23 = (char *)__p;
          v21 = v94;
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[4 * v24];
        *(_DWORD *)v29 = v20;
        v22 = v29 + 4;
        while (v21 != v23)
        {
          v30 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v29 - 1) = v30;
          v29 -= 4;
        }
        __p = v29;
        v94 = v22;
        v95 = &v28[4 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v94 = v20;
        v22 = v21 + 4;
      }
      v94 = v22;
      if (v17 - v9 >= 0)
        v31 = v17 - v9;
      else
        v31 = v9 - v17;
      v32 = v91;
      if (v91 >= v92)
      {
        v34 = (char *)v90;
        v35 = (v91 - (_BYTE *)v90) >> 2;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v37 = v92 - (_BYTE *)v90;
        if ((v92 - (_BYTE *)v90) >> 1 > v36)
          v36 = v37 >> 1;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
          v38 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38)
        {
          v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v92, v38);
          v34 = (char *)v90;
          v32 = v91;
        }
        else
        {
          v39 = 0;
        }
        v40 = &v39[4 * v35];
        *(_DWORD *)v40 = v31;
        v33 = v40 + 4;
        while (v32 != v34)
        {
          v41 = *((_DWORD *)v32 - 1);
          v32 -= 4;
          *((_DWORD *)v40 - 1) = v41;
          v40 -= 4;
        }
        v90 = v40;
        v91 = v33;
        v92 = &v39[4 * v38];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *(_DWORD *)v91 = v31;
        v33 = v32 + 4;
      }
      v91 = v33;
      if (a3)
      {
        if ((int)(v19 - v11) >= 0)
          v42 = v19 - v11;
        else
          v42 = v11 - v19;
        v43 = v88;
        if (v88 >= (unsigned int *)v89)
        {
          v45 = *(unsigned int **)&v87[4];
          v46 = ((uint64_t)v88 - *(_QWORD *)&v87[4]) >> 2;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v48 = (uint64_t)&v89[-*(_QWORD *)&v87[4]];
          if ((uint64_t)&v89[-*(_QWORD *)&v87[4]] >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v89, v49);
            v45 = *(unsigned int **)&v87[4];
            v43 = v88;
          }
          else
          {
            v50 = 0;
          }
          v51 = (unsigned int *)&v50[4 * v46];
          *v51 = v42;
          v44 = v51 + 1;
          while (v43 != v45)
          {
            v52 = *--v43;
            *--v51 = v52;
          }
          *(_QWORD *)&v87[4] = v51;
          v88 = v44;
          v89 = &v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *v88 = v42;
          v44 = v43 + 1;
        }
        v88 = v44;
      }
      v13 = (v13 + 1);
      v12 = **this;
      v11 = v19;
      v9 = v17;
      v7 = v15;
    }
    while (v13 < ((*this)[1] - v12) >> 5);
  }
  v85 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, (const unsigned int *)((v94 - (_BYTE *)__p) >> 2));
  v84 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v90, (const unsigned int *)((v91 - (_BYTE *)v90) >> 2));
  if (a3)
    v83 = zilch::WriteBitstream::computeOptimalRiceBits(*(zilch::WriteBitstream **)&v87[4], (const unsigned int *)(((uint64_t)v88 - *(_QWORD *)&v87[4]) >> 2));
  else
    v83 = 0;
  zilch::WriteBitstream::putEliasGamma(a2, v85 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v84 + 1);
  if (a3)
    zilch::WriteBitstream::putEliasGamma(a2, v83 + 1);
  v53 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)v87 = zilch::GeoCoordinates::x(v53);
  v54 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
  v55 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
  *(_DWORD *)v87 = zilch::GeoCoordinates::y(v55);
  v56 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
  if (a3)
  {
    v57 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(**this);
    v58 = zilch::GeoCoordinates::z(v57);
  }
  else
  {
    v58 = 0;
  }
  zilch::WriteBitstream::put(a2, v54, 32);
  zilch::WriteBitstream::put(a2, v56, 32);
  if (a3)
  {
    zilch::WriteBitstream::put(a2, v58 >> 31);
    if (v58 >= 0)
      v59 = v58;
    else
      v59 = -v58;
    zilch::WriteBitstream::put(a2, v59, 32);
  }
  *(_WORD *)v87 = zilch::ControlPoint::heading(**this);
  v61 = zilch::Angle::toDegrees((zilch::Angle *)v87, v60);
  zilch::WriteBitstream::put(a2, rint(v61), 9);
  *(_DWORD *)v87 = zilch::ControlPoint::formOfWay(**this);
  v62 = zilch::FormOfWay::type((zilch::FormOfWay *)v87);
  zilch::WriteBitstream::put(a2, v62, 5);
  *(_DWORD *)v87 = zilch::ControlPoint::functionalClass(**this);
  v63 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)v87);
  zilch::WriteBitstream::put(a2, v63, 4);
  if (v82 >= 2)
  {
    v64 = (v81 >> 5) - 1;
    v65 = 32;
    do
    {
      v66 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
      *(_DWORD *)v87 = zilch::GeoCoordinates::x(v66);
      v67 = zilch::Longitude::toUint32((zilch::Longitude *)v87);
      v68 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
      *(_DWORD *)v87 = zilch::GeoCoordinates::y(v68);
      v69 = zilch::Latitude::toUint32((zilch::Latitude *)v87);
      if (a3)
      {
        v70 = (zilch::GeoCoordinates *)zilch::ControlPoint::position((zilch::ControlPoint *)((char *)**this + v65));
        v71 = zilch::GeoCoordinates::z(v70);
      }
      else
      {
        v71 = 0;
      }
      v72 = v67 - v54;
      zilch::WriteBitstream::put(a2, v72 >> 31);
      if (v72 >= 0)
        v73 = v72;
      else
        v73 = -v72;
      zilch::WriteBitstream::putRice(a2, v73, v85);
      zilch::WriteBitstream::put(a2, (v69 - v56) >> 31);
      if ((int)(v69 - v56) >= 0)
        v74 = v69 - v56;
      else
        v74 = v56 - v69;
      zilch::WriteBitstream::putRice(a2, v74, v84);
      if (a3)
      {
        zilch::WriteBitstream::put(a2, (v71 - v58) >> 31);
        if ((int)(v71 - v58) >= 0)
          v75 = v71 - v58;
        else
          v75 = v58 - v71;
        zilch::WriteBitstream::putRice(a2, v75, v83);
      }
      v76 = zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**this + v65));
      zilch::WriteBitstream::put(a2, v76, 2);
      if (zilch::ControlPoint::type((zilch::ControlPoint *)((char *)**this + v65)) != 1)
      {
        *(_WORD *)v87 = zilch::ControlPoint::heading((zilch::ControlPoint *)((char *)**this + v65));
        v78 = zilch::Angle::toDegrees((zilch::Angle *)v87, v77);
        zilch::WriteBitstream::put(a2, rint(v78), 9);
        *(_DWORD *)v87 = zilch::ControlPoint::formOfWay((zilch::ControlPoint *)((char *)**this + v65));
        v79 = zilch::FormOfWay::type((zilch::FormOfWay *)v87);
        zilch::WriteBitstream::put(a2, v79, 5);
        *(_DWORD *)v87 = zilch::ControlPoint::functionalClass((zilch::ControlPoint *)((char *)**this + v65));
        v80 = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)v87);
        zilch::WriteBitstream::put(a2, v80, 4);
      }
      v65 += 32;
      v58 = v71;
      v56 = v69;
      v54 = v67;
      --v64;
    }
    while (v64);
  }
  if (*(_QWORD *)&v87[4])
  {
    v88 = *(unsigned int **)&v87[4];
    operator delete(*(void **)&v87[4]);
  }
  if (v90)
  {
    v91 = (char *)v90;
    operator delete(v90);
  }
  if (__p)
  {
    v94 = (char *)__p;
    operator delete(__p);
  }
}

void sub_18877A228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::ControlPoint>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 32 * a2;
  }
  else
  {
    std::vector<zilch::ControlPoint>::__append((void **)a1, a2 - v2);
  }
}

uint64_t zilch::Message::decode_v2(void ***this, zilch::ReadBitstream *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  Longitude v11;
  Latitude v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  __int16 v15;
  int v16;
  FormOfWay v17;
  unsigned int v18;
  FunctionalClass v19;
  void **v20;
  _OWORD *v21;
  unint64_t v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;
  __int128 v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  Longitude v50;
  Latitude v51;
  int v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  __int16 v55;
  int v56;
  FormOfWay v57;
  unsigned int v58;
  FunctionalClass v59;
  void **v60;
  _OWORD *v61;
  unint64_t v62;
  __int128 v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  FunctionalClass v77;
  FormOfWay v78;
  FunctionalClass v79;
  FormOfWay v80;
  GeoCoordinates v81;
  __int128 v82;
  __int128 v83;

  zilch::ReadBitstream::setUseOldBitOrder((uint64_t)a2, 1);
  v4 = zilch::ReadBitstream::get(a2, 32);
  zilch::ReadBitstream::get(a2, 1);
  zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)&v82);
  v5 = zilch::ReadBitstream::get(a2, 32);
  v6 = zilch::ReadBitstream::get(a2, 32);
  zilch::ControlPoint::setType(&v82, 0);
  v8 = zilch::Longitude::fromUint32((zilch::Longitude *)v5, v7);
  v10 = zilch::Latitude::fromUint32((zilch::Latitude *)v6, v9);
  v11.var0 = v8;
  v12.var0 = v10;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v81, v11, v12);
  zilch::ControlPoint::setPosition((uint64_t)&v82, &v81);
  v13 = zilch::ReadBitstream::get(a2, 16);
  v15 = zilch::Angle::fromUint16((zilch::Angle *)v13, v14);
  zilch::ControlPoint::setHeading((uint64_t)&v82, v15);
  v16 = zilch::ReadBitstream::get(a2, 5);
  zilch::FormOfWay::FormOfWay(&v80, v16);
  v17.var0 = v80.var0;
  zilch::ControlPoint::setFormOfWay((FormOfWay *)&v82, v17);
  v18 = zilch::ReadBitstream::get(a2, 4);
  zilch::FunctionalClass::FunctionalClass(&v79.var0, v18);
  v19.var0 = v79.var0;
  zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v82, v19);
  v20 = *this;
  v21 = (*this)[1];
  v22 = (unint64_t)(*this)[2];
  if ((unint64_t)v21 >= v22)
  {
    v25 = ((char *)v21 - (_BYTE *)*v20) >> 5;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59)
LABEL_56:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v27 = v22 - (_QWORD)*v20;
    if (v27 >> 4 > v26)
      v26 = v27 >> 4;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
      v28 = 0x7FFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
      v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v28);
    else
      v29 = 0;
    v30 = &v29[32 * v25];
    v31 = &v29[32 * v28];
    v32 = v83;
    *(_OWORD *)v30 = v82;
    *((_OWORD *)v30 + 1) = v32;
    v24 = v30 + 32;
    v34 = (char *)*v20;
    v33 = (char *)v20[1];
    if (v33 != *v20)
    {
      do
      {
        v35 = *((_OWORD *)v33 - 1);
        *((_OWORD *)v30 - 2) = *((_OWORD *)v33 - 2);
        *((_OWORD *)v30 - 1) = v35;
        v30 -= 32;
        v33 -= 32;
      }
      while (v33 != v34);
      v33 = (char *)*v20;
    }
    *v20 = v30;
    v20[1] = v24;
    v20[2] = v31;
    if (v33)
      operator delete(v33);
  }
  else
  {
    v23 = v83;
    *v21 = v82;
    v21[1] = v23;
    v24 = v21 + 2;
  }
  v20[1] = v24;
  v36 = *((unsigned __int8 *)a2 + 36);
  if (v4 >= 2 && !*((_BYTE *)a2 + 36))
  {
    v37 = 1;
    do
    {
      v38 = zilch::ReadBitstream::get(a2, 1);
      if (zilch::ReadBitstream::get(a2, 1))
        v39 = 24;
      else
        v39 = 16;
      v40 = zilch::ReadBitstream::get(a2, v39);
      if (v38)
        v41 = -v40;
      else
        v41 = v40;
      v5 = (v41 + v5);
      v42 = zilch::ReadBitstream::get(a2, 1);
      if (zilch::ReadBitstream::get(a2, 1))
        v43 = 24;
      else
        v43 = 16;
      v44 = zilch::ReadBitstream::get(a2, v43);
      if (v42)
        v46 = -v44;
      else
        v46 = v44;
      v6 = (v46 + v6);
      v47 = zilch::Longitude::fromUint32((zilch::Longitude *)v5, v45);
      v49 = zilch::Latitude::fromUint32((zilch::Latitude *)v6, v48);
      v50.var0 = v47;
      v51.var0 = v49;
      zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v81, v50, v51);
      zilch::ControlPoint::setPosition((uint64_t)&v82, &v81);
      v52 = zilch::ReadBitstream::get(a2, 2);
      zilch::ControlPoint::setType(&v82, v52);
      if (!zilch::ControlPoint::dummy((zilch::ControlPoint *)&v82))
      {
        v53 = zilch::ReadBitstream::get(a2, 16);
        v55 = zilch::Angle::fromUint16((zilch::Angle *)v53, v54);
        zilch::ControlPoint::setHeading((uint64_t)&v82, v55);
        v56 = zilch::ReadBitstream::get(a2, 5);
        zilch::FormOfWay::FormOfWay(&v78, v56);
        v57.var0 = v78.var0;
        zilch::ControlPoint::setFormOfWay((FormOfWay *)&v82, v57);
        v58 = zilch::ReadBitstream::get(a2, 4);
        zilch::FunctionalClass::FunctionalClass(&v77.var0, v58);
        v59.var0 = v77.var0;
        zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v82, v59);
      }
      v60 = *this;
      v61 = (*this)[1];
      v62 = (unint64_t)(*this)[2];
      if ((unint64_t)v61 >= v62)
      {
        v65 = ((char *)v61 - (_BYTE *)*v60) >> 5;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 59)
          goto LABEL_56;
        v67 = v62 - (_QWORD)*v60;
        if (v67 >> 4 > v66)
          v66 = v67 >> 4;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
          v68 = 0x7FFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v68);
        else
          v69 = 0;
        v70 = &v69[32 * v65];
        v71 = v83;
        *(_OWORD *)v70 = v82;
        *((_OWORD *)v70 + 1) = v71;
        v73 = (char *)*v60;
        v72 = (char *)v60[1];
        v74 = v70;
        if (v72 != *v60)
        {
          do
          {
            v75 = *((_OWORD *)v72 - 1);
            *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
            *((_OWORD *)v74 - 1) = v75;
            v74 -= 32;
            v72 -= 32;
          }
          while (v72 != v73);
          v72 = (char *)*v60;
        }
        v64 = v70 + 32;
        *v60 = v74;
        v60[1] = v70 + 32;
        v60[2] = &v69[32 * v68];
        if (v72)
          operator delete(v72);
      }
      else
      {
        v63 = v83;
        *v61 = v82;
        v61[1] = v63;
        v64 = v61 + 2;
      }
      v60[1] = v64;
      ++v37;
      v36 = *((unsigned __int8 *)a2 + 36);
    }
    while (v37 < v4 && !*((_BYTE *)a2 + 36));
  }
  if (!v36)
    return 0;
  (*this)[1] = **this;
  return 1;
}

uint64_t zilch::Message::decode_v3_v4(void ***this, zilch::ReadBitstream *a2, int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  Longitude v16;
  Latitude v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  Longitude v22;
  Latitude v23;
  zilch::Angle *v24;
  __int16 v25;
  int v26;
  FormOfWay v27;
  unsigned int v28;
  FunctionalClass v29;
  int v30;
  unsigned int v31;
  int v32;
  int Rice;
  int v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  Longitude v46;
  Latitude v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  Longitude v51;
  Latitude v52;
  int v53;
  zilch::Angle *v54;
  __int16 v55;
  int v56;
  FormOfWay v57;
  unsigned int v58;
  FunctionalClass v59;
  void **v60;
  char *v61;
  char *v62;
  __int128 v63;
  _OWORD *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  char *v72;
  char *v73;
  char *v74;
  __int128 v75;
  FunctionalClass v76;
  FormOfWay v77;
  GeoCoordinates v78;
  __int128 v79;
  __int128 v80;
  FunctionalClass v81;
  FormOfWay v82;
  _OWORD v83[2];
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;

  zilch::ReadBitstream::setUseOldBitOrder((uint64_t)a2, 0);
  v87 = 0;
  result = zilch::ReadBitstream::getEliasGamma(a2, &v87);
  if (!(_DWORD)result)
  {
    v86 = 0;
    result = zilch::ReadBitstream::getEliasGamma(a2, &v86);
    if (!(_DWORD)result)
    {
      if (--v86 > 0x20)
        return 1;
      v85 = 0;
      result = zilch::ReadBitstream::getEliasGamma(a2, &v85);
      if (!(_DWORD)result)
      {
        if (--v85 > 0x20)
          return 1;
        v84 = 0;
        if (a3)
        {
          result = zilch::ReadBitstream::getEliasGamma(a2, &v84);
          if ((_DWORD)result)
            return result;
          if (--v84 > 0x20)
            return 1;
        }
        zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)v83);
        v7 = zilch::ReadBitstream::get(a2, 32);
        v8 = zilch::ReadBitstream::get(a2, 32);
        if (a3)
        {
          v9 = zilch::ReadBitstream::get(a2);
          v10 = zilch::ReadBitstream::get(a2, 32);
          if (v9)
            v11 = -v10;
          else
            v11 = v10;
          zilch::ControlPoint::setType(v83, 0);
          v13 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v12);
          v15 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v14);
          v16.var0 = v13;
          v17.var0 = v15;
          zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v79, v16, v17, v11);
        }
        else
        {
          zilch::ControlPoint::setType(v83, 0);
          v19 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v18);
          v21 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v20);
          v22.var0 = v19;
          v23.var0 = v21;
          zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v79, v22, v23);
          v11 = 0;
        }
        zilch::ControlPoint::setPosition((uint64_t)v83, (const GeoCoordinates *)&v79);
        v24 = (zilch::Angle *)zilch::ReadBitstream::get(a2, 9);
        v25 = zilch::Angle::fromDegrees(v24, (double)v24);
        zilch::ControlPoint::setHeading((uint64_t)v83, v25);
        v26 = zilch::ReadBitstream::get(a2, 5);
        zilch::FormOfWay::FormOfWay(&v82, v26);
        v27.var0 = v82.var0;
        zilch::ControlPoint::setFormOfWay((FormOfWay *)v83, v27);
        v28 = zilch::ReadBitstream::get(a2, 4);
        zilch::FunctionalClass::FunctionalClass(&v81.var0, v28);
        v29.var0 = v81.var0;
        zilch::ControlPoint::setFunctionalClass((FunctionalClass *)v83, v29);
        std::vector<zilch::ControlPoint>::push_back[abi:ne180100](*this, v83);
        v30 = *((unsigned __int8 *)a2 + 36);
        if (v87 >= 2 && !*((_BYTE *)a2 + 36))
        {
          v31 = 1;
          do
          {
            zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)&v79);
            v32 = zilch::ReadBitstream::get(a2, 1);
            Rice = zilch::ReadBitstream::getRice(a2, v86);
            if (v32)
              v34 = -Rice;
            else
              v34 = Rice;
            v7 = (v34 + v7);
            v35 = zilch::ReadBitstream::get(a2, 1);
            v36 = zilch::ReadBitstream::getRice(a2, v85);
            if (v35)
              v38 = -v36;
            else
              v38 = v36;
            v8 = (v38 + v8);
            if (a3)
            {
              v39 = zilch::ReadBitstream::get(a2, 1);
              v40 = zilch::ReadBitstream::getRice(a2, v84);
              if (v39)
                v42 = -v40;
              else
                v42 = v40;
              v11 += v42;
              v43 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v41);
              v45 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v44);
              v46.var0 = v43;
              v47.var0 = v45;
              zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v78, v46, v47, v11);
            }
            else
            {
              v48 = zilch::Longitude::fromUint32((zilch::Longitude *)v7, v37);
              v50 = zilch::Latitude::fromUint32((zilch::Latitude *)v8, v49);
              v51.var0 = v48;
              v52.var0 = v50;
              zilch::GeoCoordinates::GeoCoordinates((uint64_t)&v78, v51, v52);
              v11 = 0;
            }
            zilch::ControlPoint::setPosition((uint64_t)&v79, &v78);
            v53 = zilch::ReadBitstream::get(a2, 2);
            zilch::ControlPoint::setType(&v79, v53);
            if (!zilch::ControlPoint::dummy((zilch::ControlPoint *)&v79))
            {
              v54 = (zilch::Angle *)zilch::ReadBitstream::get(a2, 9);
              v55 = zilch::Angle::fromDegrees(v54, (double)v54);
              zilch::ControlPoint::setHeading((uint64_t)&v79, v55);
              v56 = zilch::ReadBitstream::get(a2, 5);
              zilch::FormOfWay::FormOfWay(&v77, v56);
              v57.var0 = v77.var0;
              zilch::ControlPoint::setFormOfWay((FormOfWay *)&v79, v57);
              v58 = zilch::ReadBitstream::get(a2, 4);
              zilch::FunctionalClass::FunctionalClass(&v76.var0, v58);
              v59.var0 = v76.var0;
              zilch::ControlPoint::setFunctionalClass((FunctionalClass *)&v79, v59);
            }
            v60 = *this;
            v61 = (char *)(*this)[1];
            v62 = (char *)(*this)[2];
            if (v61 >= v62)
            {
              v65 = (v61 - (_BYTE *)*v60) >> 5;
              v66 = v65 + 1;
              if ((unint64_t)(v65 + 1) >> 59)
                std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
              v67 = v62 - (_BYTE *)*v60;
              if (v67 >> 4 > v66)
                v66 = v67 >> 4;
              if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFE0)
                v68 = 0x7FFFFFFFFFFFFFFLL;
              else
                v68 = v66;
              if (v68)
                v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(*this + 2), v68);
              else
                v69 = 0;
              v70 = &v69[32 * v65];
              v71 = v80;
              *(_OWORD *)v70 = v79;
              *((_OWORD *)v70 + 1) = v71;
              v73 = (char *)*v60;
              v72 = (char *)v60[1];
              v74 = v70;
              if (v72 != *v60)
              {
                do
                {
                  v75 = *((_OWORD *)v72 - 1);
                  *((_OWORD *)v74 - 2) = *((_OWORD *)v72 - 2);
                  *((_OWORD *)v74 - 1) = v75;
                  v74 -= 32;
                  v72 -= 32;
                }
                while (v72 != v73);
                v72 = (char *)*v60;
              }
              v64 = v70 + 32;
              *v60 = v74;
              v60[1] = v70 + 32;
              v60[2] = &v69[32 * v68];
              if (v72)
                operator delete(v72);
            }
            else
            {
              v63 = v80;
              *(_OWORD *)v61 = v79;
              *((_OWORD *)v61 + 1) = v63;
              v64 = v61 + 32;
            }
            v60[1] = v64;
            ++v31;
            v30 = *((unsigned __int8 *)a2 + 36);
          }
          while (v31 < v87 && !*((_BYTE *)a2 + 36));
        }
        if (v30)
        {
          (*this)[1] = **this;
          return 1;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t zilch::ReadBitstream::get(zilch::ReadBitstream *this)
{
  unint64_t v1;
  int v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 3);
  if (v1 >= *((_QWORD *)this + 1))
  {
    v3 = 0;
    *((_BYTE *)this + 36) = 1;
  }
  else
  {
    v2 = *((_DWORD *)this + 8);
    v3 = (*(_DWORD *)(*(_QWORD *)this + 4 * v1) >> v2) & 1;
    *((_DWORD *)this + 8) = v2 + 1;
    if (v2 >= 31)
    {
      *((_DWORD *)this + 8) = 0;
      *((_QWORD *)this + 3) = v1 + 1;
    }
  }
  return v3;
}

std::string *zilch::Message::toString@<X0>(uint64_t **this@<X0>, std::string *a2@<X8>)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void **v8;
  std::string::size_type v9;
  unint64_t v10;
  void *__p[2];
  unsigned __int8 v13;

  std::string::basic_string[abi:ne180100]<0>(a2, "Message(");
  v5 = **this;
  if ((((*this)[1] - v5) & 0x1FFFFFFFE0) != 0)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      zilch::ControlPoint::toString((zilch::ControlPoint *)(v5 + v6), __p, v4);
      if ((v13 & 0x80u) == 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      if ((v13 & 0x80u) == 0)
        v9 = v13;
      else
        v9 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if ((char)v13 < 0)
        operator delete(__p[0]);
      ++v7;
      v5 = **this;
      v10 = (*this)[1] - v5;
      if (v7 < (v10 >> 5))
      {
        std::string::append(a2, ",");
        v5 = **this;
        v10 = (*this)[1] - v5;
      }
      v6 += 32;
    }
    while (v7 < (v10 >> 5));
  }
  return std::string::append(a2, ")");
}

void sub_18877AD54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

zilch::Message *zilch_newZilchMessage(const unsigned __int8 *a1, int a2)
{
  zilch::Message *v4;
  _QWORD *v5;
  _BYTE v7[40];

  v4 = (zilch::Message *)operator new();
  v5 = (_QWORD *)operator new();
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_QWORD *)v4 = v5;
  if (a1 && a2 >= 1)
  {
    zilch::ReadBitstream::ReadBitstream((uint64_t)v7, a1, a2);
    zilch::Message::decode(v4, (zilch::ReadBitstream *)v7);
  }
  return v4;
}

void sub_18877AE2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t *zilch_deleteZilchMessage(uint64_t *result)
{
  uint64_t v1;

  if (result)
  {
    v1 = *result;
    *result = 0;
    if (v1)
      std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)result, v1);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

uint64_t zilch_getZilchPointSize_ints()
{
  return 6;
}

BOOL zilch_getZilchPoint(uint64_t **a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  _BOOL8 v6;
  zilch::ControlPoint *v8;
  zilch::GeoCoordinates *v9;
  double v10;
  zilch::GeoCoordinates *v11;
  double v12;
  int v13;
  double v14;
  int v16;

  v4 = **a1;
  v6 = a4 > 5 && ((unint64_t)((*a1)[1] - v4) >> 5) > a3;
  if (v6)
  {
    v8 = (zilch::ControlPoint *)(v4 + 32 * a3);
    v9 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(v8);
    v16 = zilch::GeoCoordinates::y(v9);
    *(_DWORD *)a2 = llround(zilch::Latitude::toDegrees((zilch::Latitude *)&v16, v10) * 1000000.0);
    v11 = (zilch::GeoCoordinates *)zilch::ControlPoint::position(v8);
    v16 = zilch::GeoCoordinates::x(v11);
    *(_DWORD *)(a2 + 4) = llround(zilch::Longitude::toDegrees((zilch::Longitude *)&v16, v12) * 1000000.0);
    if (zilch::ControlPoint::dummy(v8))
    {
      v13 = 0;
      *(_QWORD *)(a2 + 8) = 0xFFFFFFFFLL;
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      LOWORD(v16) = zilch::ControlPoint::heading(v8);
      *(_DWORD *)(a2 + 8) = llround(zilch::Angle::toDegrees((zilch::Angle *)&v16, v14));
      v16 = zilch::ControlPoint::formOfWay(v8);
      *(_DWORD *)(a2 + 12) = zilch::FormOfWay::type((zilch::FormOfWay *)&v16);
      v16 = zilch::ControlPoint::functionalClass(v8);
      *(_DWORD *)(a2 + 16) = zilch::FunctionalClass::toInteger((zilch::FunctionalClass *)&v16);
      v13 = zilch::ControlPoint::uturnFlag(v8);
    }
    *(_DWORD *)(a2 + 20) = v13;
  }
  return v6;
}

uint64_t zilch_addZilchPoint(zilch::Latitude *a1, int *a2)
{
  zilch::Longitude *v4;
  unsigned int v5;
  Longitude v6;
  Latitude v7;
  zilch::Angle *v8;
  int v9;
  __int16 v10;
  FormOfWay v11;
  FunctionalClass v12;
  int v13;
  FunctionalClass v15;
  FormOfWay v16;
  FormOfWay v17[8];
  _BYTE v18[12];

  v4 = (zilch::Longitude *)zilch::Latitude::fromDegrees(a1, (double)*a2 / 1000000.0);
  v5 = v4;
  v6.var0 = zilch::Longitude::fromDegrees(v4, (double)a2[1] / 1000000.0);
  v7.var0 = v5;
  zilch::GeoCoordinates::GeoCoordinates((uint64_t)v18, v6, v7);
  v8 = (zilch::Angle *)zilch::ControlPoint::ControlPoint((zilch::ControlPoint *)v17, (const zilch::GeoCoordinates *)v18);
  v9 = a2[2];
  if (v9 > 0x168)
  {
    v13 = 1;
  }
  else
  {
    v10 = zilch::Angle::fromDegrees(v8, (double)v9);
    zilch::ControlPoint::setHeading((uint64_t)v17, v10);
    zilch::FormOfWay::FormOfWay(&v16, a2[3]);
    v11.var0 = v16.var0;
    zilch::ControlPoint::setFormOfWay(v17, v11);
    zilch::FunctionalClass::FunctionalClass(&v15, a2[4]);
    v12.var0 = v15.var0;
    zilch::ControlPoint::setFunctionalClass((FunctionalClass *)v17, v12);
    zilch::ControlPoint::setUTurnFlag((uint64_t)v17, a2[5]);
    v13 = 0;
  }
  zilch::ControlPoint::setType(v17, v13);
  zilch::Message::addPoint((void ***)a1, (const zilch::ControlPoint *)v17);
  return (*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5;
}

uint64_t zilch_getNbrPoints(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1) >> 5;
}

size_t zilch_serialize(zilch::ControlPoint ***a1, void *a2, unsigned int a3)
{
  size_t v6;
  const void *v7;
  _BYTE v9[8];

  zilch::WriteBitstream::WriteBitstream((zilch::WriteBitstream *)v9);
  zilch::Message::encode(a1, (zilch::WriteBitstream *)v9, 3);
  zilch::WriteBitstream::finalize((zilch::WriteBitstream *)v9);
  v6 = zilch::WriteBitstream::byteSize((zilch::WriteBitstream *)v9);
  if (v6 >= a3)
  {
    v6 = 0xFFFFFFFFLL;
  }
  else
  {
    v7 = (const void *)zilch::WriteBitstream::bytes((zilch::WriteBitstream *)v9);
    memcpy(a2, v7, v6);
  }
  zilch::WriteBitstream::~WriteBitstream((zilch::WriteBitstream *)v9);
  return v6;
}

void sub_18877B184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  zilch::WriteBitstream::~WriteBitstream((zilch::WriteBitstream *)va);
  _Unwind_Resume(a1);
}

unint64_t zilchToJson_c(char *a1, size_t __sz, void *a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v11;
  unint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  _BYTE v15[40];
  unsigned __int8 *v16;
  const unsigned __int8 *v17;
  uint64_t v18;

  v4 = 0;
  if (!a1 || !__sz || !a3 || !a4)
    return v4;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<char const*,char const*>((char *)&v16, a1, &a1[__sz], __sz);
  v7 = v16;
  if (v16 == v17)
  {
    v4 = 0;
    if (!v16)
      return v4;
    goto LABEL_11;
  }
  zilch::ReadBitstream::ReadBitstream((uint64_t)v15, v16, v17 - v16);
  v8 = (uint64_t *)operator new();
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
  v14 = v8;
  if (zilch::Message::decode((zilch::Message *)&v14, (zilch::ReadBitstream *)v15))
    goto LABEL_7;
  zilch::Message::toJson(&v14);
  if ((char)v13 < 0)
  {
    v4 = v12;
    if (v12 < a4)
    {
      memcpy(a3, v11, v12 + 1);
      v4 = 0;
    }
    operator delete(v11);
  }
  else
  {
    v4 = v13;
    if (v13 < a4)
    {
      memcpy(a3, &v11, v13 + 1);
LABEL_7:
      v4 = 0;
    }
  }
  v9 = v14;
  v14 = 0;
  if (v9)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)&v14, (uint64_t)v9);
  v7 = v16;
  if (v16)
  {
LABEL_11:
    v17 = v7;
    operator delete(v7);
  }
  return v4;
}

void sub_18877B2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v14;
  void *v15;

  v14 = a12;
  a12 = 0;
  if (v14)
    std::default_delete<zilch::MessageData>::operator()[abi:ne180100]((uint64_t)&a12, v14);
  v15 = *(void **)(v12 - 56);
  if (v15)
  {
    *(_QWORD *)(v12 - 48) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<zilch::ControlPoint>::__init_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18877B380(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

void std::default_delete<zilch::MessageData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x18D76437CLL);
  }
}

char *std::vector<zilch::ControlPoint>::__assign_with_size[abi:ne180100]<zilch::ControlPoint*,zilch::ControlPoint*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<zilch::ControlPoint>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  zilch::ControlPoint *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  zilch::ControlPoint *v15;
  zilch::ControlPoint *v16;
  char *v17;
  uint64_t v18;
  zilch::ControlPoint *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(zilch::ControlPoint **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = (zilch::ControlPoint *)((char *)v7 + 32 * a2);
      do
      {
        zilch::ControlPoint::ControlPoint(v7);
        v7 = (zilch::ControlPoint *)((char *)v7 + 32);
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (zilch::ControlPoint *)*a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>(v4, v12);
    else
      v13 = 0;
    v16 = (zilch::ControlPoint *)&v13[32 * v10];
    v17 = &v13[32 * v12];
    v18 = 32 * a2;
    v19 = v16;
    v20 = (char *)v16 + 32 * a2;
    do
    {
      v19 = (zilch::ControlPoint *)(zilch::ControlPoint::ControlPoint(v19) + 32);
      v18 -= 32;
    }
    while (v18);
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v16 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v16 - 1) = v23;
        v16 = (zilch::ControlPoint *)((char *)v16 - 32);
        v21 -= 32;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v20;
    a1[2] = v17;
    if (v21)
      operator delete(v21);
  }
}

void sub_18877B6C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<char const*,char const*>(char *result, char *a2, char *a3, size_t __sz)
{
  char *v6;
  _BYTE *v7;
  char v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = (_BYTE *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_18877B73C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t zilch::ReadBitstream::ReadBitstream(uint64_t this, const unsigned __int8 *a2, uint64_t a3)
{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = (unint64_t)(a3 + 3) >> 2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

{
  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = (unint64_t)(a3 + 3) >> 2;
  *(_BYTE *)(this + 16) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(_BYTE *)(this + 36) = 0;
  return this;
}

uint64_t zilch::ReadBitstream::setUseOldBitOrder(uint64_t this, char a2)
{
  *(_BYTE *)(this + 16) = a2;
  return this;
}

uint64_t zilch::ReadBitstream::get(zilch::ReadBitstream *this, int a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;

  if (*((_BYTE *)this + 16))
  {
    if (a2)
    {
      v2 = 0;
      LODWORD(v3) = 0;
      v4 = *((_QWORD *)this + 1);
      v5 = *((_QWORD *)this + 3);
      do
      {
        if (v5 >= v4)
        {
          v7 = 0;
          *((_BYTE *)this + 36) = 1;
        }
        else
        {
          v6 = *((_DWORD *)this + 8);
          v7 = (*(_DWORD *)(*(_QWORD *)this + 4 * v5) >> v6) & 1;
          *((_DWORD *)this + 8) = v6 + 1;
          if (v6 >= 31)
          {
            *((_DWORD *)this + 8) = 0;
            *((_QWORD *)this + 3) = ++v5;
          }
        }
        v3 = (v7 << v2++) | v3;
      }
      while (a2 != v2);
      return v3;
    }
    return 0;
  }
  if (!a2)
    return 0;
  LODWORD(v3) = 0;
  v8 = *((_QWORD *)this + 1);
  v9 = *((_QWORD *)this + 3);
  v10 = a2 - 1;
  do
  {
    if (v9 >= v8)
    {
      v12 = 0;
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v11 = *((_DWORD *)this + 8);
      v12 = (*(_DWORD *)(*(_QWORD *)this + 4 * v9) >> v11) & 1;
      *((_DWORD *)this + 8) = v11 + 1;
      if (v11 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v9;
      }
    }
    v3 = (v12 << v10--) | v3;
  }
  while (v10 != -1);
  return v3;
}

uint64_t zilch::ReadBitstream::get64(zilch::ReadBitstream *this, unsigned int a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  result = 0;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 3);
  v6 = a2 - 1;
  do
  {
    if (v5 >= v4)
    {
      v8 = 0;
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v7 = *((_DWORD *)this + 8);
      v8 = (*(_DWORD *)(*(_QWORD *)this + 4 * v5) >> v7) & 1;
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v5;
      }
    }
    result |= (unint64_t)v8 << v6;
  }
  while ((unint64_t)v6--);
  return result;
}

uint64_t zilch::ReadBitstream::getEliasGamma(zilch::ReadBitstream *this, unsigned int *a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;

  if (!a2)
    return 4;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 3);
  v5 = -1;
  do
  {
    if (v4 >= v3)
    {
      LOBYTE(v7) = 0;
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v6 = *((_DWORD *)this + 8);
      v7 = (*(_DWORD *)(*(_QWORD *)this + 4 * v4) >> v6) & 1;
      *((_DWORD *)this + 8) = v6 + 1;
      if (v6 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v4;
      }
    }
    v8 = ++v5;
  }
  while ((v7 & 1) == 0 && v8 < 0x20);
  v9 = 1;
  if (v8 <= 0x1F)
  {
    *a2 = 1 << v5;
    if (v5)
    {
      v10 = zilch::ReadBitstream::get(this, v5);
      v9 = 0;
      *a2 |= v10;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

uint64_t zilch::ReadBitstream::getRice(zilch::ReadBitstream *this, int a2)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v2 = a2;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 3);
  if (v4 >= v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)this;
    v7 = *((_DWORD *)this + 8);
    do
    {
      v8 = (1 << v7) & *(_DWORD *)(v6 + 4 * v4);
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v4;
        if (!v8)
          goto LABEL_12;
        v7 = 0;
      }
      else
      {
        ++v7;
        if (!v8)
          goto LABEL_12;
      }
      ++v5;
    }
    while (v4 < v3);
  }
  *((_BYTE *)this + 36) = 1;
LABEL_12:
  if (a2)
    v9 = zilch::ReadBitstream::get(this, a2);
  else
    v9 = 0;
  return (v9 + (v5 << v2));
}

uint64_t zilch::ReadBitstream::getRice64(zilch::ReadBitstream *this, unsigned int a2)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;

  v2 = a2;
  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)this + 3);
  if (v4 >= v3)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = *(_QWORD *)this;
    v7 = *((_DWORD *)this + 8);
    do
    {
      v8 = (1 << v7) & *(_DWORD *)(v6 + 4 * v4);
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v4;
        if (!v8)
          goto LABEL_12;
        v7 = 0;
      }
      else
      {
        ++v7;
        if (!v8)
          goto LABEL_12;
      }
      ++v5;
    }
    while (v4 < v3);
  }
  *((_BYTE *)this + 36) = 1;
LABEL_12:
  if (a2)
    v9 = zilch::ReadBitstream::get64(this, a2);
  else
    v9 = 0;
  return v9 + (v5 << v2);
}

uint64_t zilch::ReadBitstream::getVariableWidth(zilch::ReadBitstream *this)
{
  int v2;

  v2 = zilch::ReadBitstream::get(this, 5) + 1;
  return zilch::ReadBitstream::get(this, v2);
}

uint64_t zilch::ReadBitstream::getVariableWidth64(zilch::ReadBitstream *this)
{
  unsigned int v2;

  v2 = zilch::ReadBitstream::get(this, 6) + 1;
  return zilch::ReadBitstream::get64(this, v2);
}

uint64_t zilch::ReadBitstream::align(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;

  v1 = *(_DWORD *)(this + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(this + 8);
    v3 = *(_QWORD *)(this + 24);
    do
    {
      if (v3 >= v2)
      {
        *(_BYTE *)(this + 36) = 1;
      }
      else
      {
        *(_DWORD *)(this + 32) = v1 + 1;
        v5 = __OFSUB__(v1, 31);
        v4 = v1 - 31 < 0;
        ++v1;
        if (v4 == v5)
        {
          *(_DWORD *)(this + 32) = 0;
          *(_QWORD *)(this + 24) = v3 + 1;
          return this;
        }
      }
    }
    while (v1);
  }
  return this;
}

void zilch::ReadBitstream::getByteArray(uint64_t a1, unsigned int a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  _BYTE *v23;
  _BYTE *v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  unint64_t v33;
  char *v34;
  _BYTE *v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v42;
  size_t v43;
  unint64_t v44;
  char *v45;
  _BYTE *v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  unint64_t v53;
  size_t v54;
  unint64_t v55;
  char *v56;
  _BYTE *v57;
  char v58;

  zilch::ReadBitstream::align(a1);
  v6 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) + (unint64_t)((a2 + 3) >> 2) > v6)
  {
    *(_BYTE *)(a1 + 36) = 1;
    *(_QWORD *)(a1 + 24) = v6;
    return;
  }
  v7 = *a3;
  v8 = a3[1];
  if (v8 != *a3)
  {
    a3[1] = v7;
    v8 = v7;
  }
  std::vector<unsigned char>::reserve(a3, v8 - v7 + a2);
  if (a2)
  {
    v9 = 0;
    v10 = (_BYTE *)a3[1];
    while (1)
    {
      v11 = *(_QWORD *)a1;
      v12 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v12 + 1;
      v13 = *(_DWORD *)(v11 + 4 * v12);
      v14 = a3[2];
      if ((unint64_t)v10 >= v14)
      {
        v16 = *a3;
        v17 = &v10[-*a3];
        v18 = (unint64_t)(v17 + 1);
        if ((uint64_t)(v17 + 1) < 0)
          goto LABEL_86;
        v19 = v14 - v16;
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x3FFFFFFFFFFFFFFFLL)
          v20 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
          v21 = (char *)operator new(v20);
        else
          v21 = 0;
        v22 = &v17[(_QWORD)v21];
        v23 = &v17[(_QWORD)v21];
        *v23 = HIBYTE(v13);
        v15 = v23 + 1;
        if (v10 != (_BYTE *)v16)
        {
          v24 = &v10[~v16];
          do
          {
            v25 = *--v10;
            (v24--)[(_QWORD)v21] = v25;
          }
          while (v10 != (_BYTE *)v16);
          v10 = (_BYTE *)*a3;
          v22 = v21;
        }
        *a3 = (unint64_t)v22;
        a3[1] = (unint64_t)v15;
        a3[2] = (unint64_t)&v21[v20];
        if (v10)
          operator delete(v10);
      }
      else
      {
        *v10 = HIBYTE(v13);
        v15 = v10 + 1;
      }
      a3[1] = (unint64_t)v15;
      if ((v9 | 1) < a2)
        break;
LABEL_44:
      if ((v9 | 2) >= a2)
        goto LABEL_64;
      v37 = a3[2];
      if ((unint64_t)v15 >= v37)
      {
        v39 = *a3;
        v40 = &v15[-*a3];
        v41 = (unint64_t)(v40 + 1);
        if ((uint64_t)(v40 + 1) < 0)
          goto LABEL_86;
        v42 = v37 - v39;
        if (2 * v42 > v41)
          v41 = 2 * v42;
        if (v42 >= 0x3FFFFFFFFFFFFFFFLL)
          v43 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v43 = v41;
        if (v43)
          v44 = (unint64_t)operator new(v43);
        else
          v44 = 0;
        v45 = (char *)(v44 + v43);
        v40[v44] = BYTE1(v13);
        v38 = (uint64_t)&v40[v44 + 1];
        if (v15 == (_BYTE *)v39)
        {
          *a3 = (unint64_t)&v40[v44];
          a3[1] = v38;
          a3[2] = (unint64_t)v45;
        }
        else
        {
          v46 = &v15[~v39];
          do
          {
            v47 = *--v15;
            (v46--)[v44] = v47;
          }
          while (v15 != (_BYTE *)v39);
          v15 = (_BYTE *)*a3;
          *a3 = v44;
          a3[1] = v38;
          a3[2] = (unint64_t)v45;
          if (!v15)
            goto LABEL_63;
        }
        operator delete(v15);
      }
      else
      {
        *v15 = BYTE1(v13);
        v38 = (uint64_t)(v15 + 1);
      }
LABEL_63:
      a3[1] = v38;
      v15 = (_BYTE *)v38;
LABEL_64:
      if ((v9 | 3) < a2)
      {
        v48 = a3[2];
        if ((unint64_t)v15 >= v48)
        {
          v50 = *a3;
          v51 = &v15[-*a3];
          v52 = (unint64_t)(v51 + 1);
          if ((uint64_t)(v51 + 1) < 0)
LABEL_86:
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v53 = v48 - v50;
          if (2 * v53 > v52)
            v52 = 2 * v53;
          if (v53 >= 0x3FFFFFFFFFFFFFFFLL)
            v54 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v54 = v52;
          if (v54)
            v55 = (unint64_t)operator new(v54);
          else
            v55 = 0;
          v56 = (char *)(v55 + v54);
          v51[v55] = v13;
          v49 = (uint64_t)&v51[v55 + 1];
          if (v15 == (_BYTE *)v50)
          {
            *a3 = (unint64_t)&v51[v55];
            a3[1] = v49;
            a3[2] = (unint64_t)v56;
          }
          else
          {
            v57 = &v15[~v50];
            do
            {
              v58 = *--v15;
              (v57--)[v55] = v58;
            }
            while (v15 != (_BYTE *)v50);
            v15 = (_BYTE *)*a3;
            *a3 = v55;
            a3[1] = v49;
            a3[2] = (unint64_t)v56;
            if (!v15)
              goto LABEL_83;
          }
          operator delete(v15);
        }
        else
        {
          *v15 = v13;
          v49 = (uint64_t)(v15 + 1);
        }
LABEL_83:
        a3[1] = v49;
        v15 = (_BYTE *)v49;
      }
      v9 += 4;
      v10 = v15;
      if (v9 >= a2)
        return;
    }
    v26 = a3[2];
    if ((unint64_t)v15 >= v26)
    {
      v28 = *a3;
      v29 = &v15[-*a3];
      v30 = (unint64_t)(v29 + 1);
      if ((uint64_t)(v29 + 1) < 0)
        goto LABEL_86;
      v31 = v26 - v28;
      if (2 * v31 > v30)
        v30 = 2 * v31;
      if (v31 >= 0x3FFFFFFFFFFFFFFFLL)
        v32 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v32 = v30;
      if (v32)
        v33 = (unint64_t)operator new(v32);
      else
        v33 = 0;
      v34 = (char *)(v33 + v32);
      v29[v33] = BYTE2(v13);
      v27 = (uint64_t)&v29[v33 + 1];
      if (v15 == (_BYTE *)v28)
      {
        *a3 = (unint64_t)&v29[v33];
        a3[1] = v27;
        a3[2] = (unint64_t)v34;
      }
      else
      {
        v35 = &v15[~v28];
        do
        {
          v36 = *--v15;
          (v35--)[v33] = v36;
        }
        while (v15 != (_BYTE *)v28);
        v15 = (_BYTE *)*a3;
        *a3 = v33;
        a3[1] = v27;
        a3[2] = (unint64_t)v34;
        if (!v15)
          goto LABEL_43;
      }
      operator delete(v15);
    }
    else
    {
      *v15 = BYTE2(v13);
      v27 = (uint64_t)(v15 + 1);
    }
LABEL_43:
    a3[1] = v27;
    v15 = (_BYTE *)v27;
    goto LABEL_44;
  }
}

float zilch::ReadBitstream::getBoundedFloat(zilch::ReadBitstream *this, float a2, float a3, int a4)
{
  return a2
       + (float)((float)((float)zilch::ReadBitstream::get(this, a4) / (float)~(-1 << a4))
               * (float)(a3 - a2));
}

uint64_t zilch::ReadBitstream::getHuffmanCode(zilch::ReadBitstream *this, zilch::HuffmanCode *a2)
{
  int v4;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  zilch::HuffmanCode::clear(a2);
  v4 = zilch::ReadBitstream::get(this, 5);
  result = zilch::ReadBitstream::get(this, v4 + 1);
  if ((_DWORD)result)
  {
    v6 = result;
    while (1)
    {
      v7 = zilch::ReadBitstream::get(this, 5);
      v8 = zilch::ReadBitstream::get(this, v7 + 1);
      v11 = 0;
      result = zilch::ReadBitstream::getEliasGamma(this, &v11);
      if ((_DWORD)result)
        break;
      v9 = v11;
      v10 = zilch::ReadBitstream::get(this, v11);
      zilch::HuffmanCode::insert(a2, v8, v10, v9);
      if (!--v6)
        return 0;
    }
  }
  return result;
}

uint64_t zilch::ReadBitstream::getHuffmanKey(zilch::ReadBitstream *this, const zilch::HuffmanCode *a2)
{
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t result;

  v4 = 0;
  v5 = 1;
  while (1)
  {
    v6 = *((_QWORD *)this + 3);
    if (v6 >= *((_QWORD *)this + 1))
    {
      v8 = 0;
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v7 = *((_DWORD *)this + 8);
      v8 = (*(_DWORD *)(*(_QWORD *)this + 4 * v6) >> v7) & 1;
      *((_DWORD *)this + 8) = v7 + 1;
      if (v7 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = v6 + 1;
      }
    }
    v9 = 2 * v4;
    v4 = (2 * v4) | v8;
    result = zilch::HuffmanCode::getKeyForCode(a2, v9 | v8, v5);
    if ((_DWORD)result != -1)
      break;
    if (++v5 == 33)
      return 0;
  }
  return result;
}

uint64_t zilch::ReadBitstream::skipBytes(zilch::ReadBitstream *this, int a2)
{
  uint64_t result;

  result = zilch::ReadBitstream::align((uint64_t)this);
  *((_QWORD *)this + 3) += (a2 + 3) >> 2;
  return result;
}

_QWORD *zilch::String::String(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *zilch::String::String(_QWORD *a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

zilch::String *zilch::String::String(zilch::String *this, const zilch::String *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const zilch::String **)a2;
    v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (char *)a2, (char *)a2 + v4, v4);
  return this;
}

{
  unint64_t v3;
  unint64_t v4;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const zilch::String **)a2;
    v4 = v3;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(this, (char *)a2, (char *)a2 + v4, v4);
  return this;
}

std::string *zilch::String::operator=(std::string *a1, std::string::value_type *a2)
{
  std::string::size_type v3;
  std::string::size_type v4;

  v3 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(std::string::value_type **)a2;
    v4 = v3;
  }
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

{
  std::string::size_type v3;
  std::string::size_type v4;

  v3 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(std::string::value_type **)a2;
    v4 = v3;
  }
  std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a1, a2, &a2[v4], v4);
  return a1;
}

uint64_t zilch::String::operator=(uint64_t a1)
{
  MEMORY[0x18D7640AC]();
  return a1;
}

BOOL zilch::String::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL zilch::String::operator!=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

_QWORD *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::string::__assign_trivial[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

double zilch::StringList::StringList(zilch::StringList *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

zilch::StringList *zilch::StringList::StringList(zilch::StringList *this, zilch::ReadBitstream *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  zilch::StringList::decode(this, a2);
  return this;
}

void sub_18877C770(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  sub_18877D094(v1);
  _Unwind_Resume(a1);
}

void zilch::StringList::decode(zilch::StringList *this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uLongf v14;
  unint64_t v15;
  int v16;
  uLongf v17;
  uLongf v18;
  Bytef *source;
  Bytef *v20;
  uint64_t v21;

  VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  v5 = (uint64_t *)((char *)this + 24);
  v6 = VariableWidth;
  std::vector<zilch::StringList::Entry>::resize((uint64_t)this + 24, VariableWidth);
  if (VariableWidth)
  {
    v7 = 0;
    v8 = 0;
    v9 = *v5;
    v10 = 8 * v6;
    do
    {
      *(_DWORD *)(v9 + v7) = v8;
      v11 = zilch::ReadBitstream::getVariableWidth(a2);
      v9 = *v5;
      *(_DWORD *)(*v5 + v7 + 4) = v11;
      v8 += v11;
      v7 += 8;
    }
    while (v10 != v7);
  }
  v12 = zilch::ReadBitstream::getVariableWidth(a2);
  v13 = zilch::ReadBitstream::getVariableWidth(a2);
  v14 = v13;
  v15 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v13 <= v15)
  {
    if (v13 < v15)
      *((_QWORD *)this + 1) = *(_QWORD *)this + v13;
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this, v13 - v15);
  }
  source = 0;
  v20 = 0;
  v21 = 0;
  zilch::ReadBitstream::getByteArray((uint64_t)a2, v12, (unint64_t *)&source);
  if ((_DWORD)v14)
  {
    v18 = v14;
    v16 = uncompress(*(Bytef **)this, &v18, source, v12);
    v17 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    if (v18 <= v17)
    {
      if (v18 < v17)
        *((_QWORD *)this + 1) = *(_QWORD *)this + v18;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this, v18 - v17);
    }
    if (v16)
    {
      *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
      *((_QWORD *)this + 1) = *(_QWORD *)this;
    }
  }
  if (source)
  {
    v20 = source;
    operator delete(source);
  }
}

void sub_18877C8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void zilch::StringList::~StringList(zilch::StringList *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v3;
    operator delete(v3);
  }
}

char *zilch::StringList::addString(zilch::StringList *this, const zilch::String *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;

  if (*((char *)a2 + 23) >= 0)
    LODWORD(v4) = *((unsigned __int8 *)a2 + 23);
  else
    v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v6 = (unint64_t *)*((_QWORD *)this + 4);
  v9 = *((_QWORD *)this + 5);
  v7 = (char *)this + 40;
  v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    v11 = *((_QWORD *)this + 3);
    v12 = ((uint64_t)v6 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)v7, v15);
    else
      v16 = 0;
    v17 = (unint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = v5 | ((unint64_t)v4 << 32);
    v10 = v17 + 1;
    v20 = (char *)*((_QWORD *)this + 3);
    v19 = (char *)*((_QWORD *)this + 4);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 3) = v17;
    *((_QWORD *)this + 4) = v10;
    *((_QWORD *)this + 5) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v6 = v5 | ((unint64_t)v4 << 32);
    v10 = v6 + 1;
  }
  *((_QWORD *)this + 4) = v10;
  v22 = *((char *)a2 + 23);
  if (v22 >= 0)
    v23 = (char *)a2;
  else
    v23 = *(char **)a2;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a2 + 23);
  else
    v24 = *((_QWORD *)a2 + 1);
  return std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>((char **)this, *((char **)this + 1), v23, &v23[v24], v24);
}

uint64_t zilch::StringList::size(zilch::StringList *this)
{
  return (*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3;
}

uint64_t zilch::StringList::string(zilch::StringList *this, unsigned int a2)
{
  return *(_QWORD *)this + *(unsigned int *)(*((_QWORD *)this + 3) + 8 * a2);
}

uint64_t zilch::StringList::stringLength(zilch::StringList *this, unsigned int a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 3) + 8 * a2 + 4);
}

void zilch::StringList::encode(zilch::StringList *this, zilch::WriteBitstream *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Bytef *dest;
  Bytef *v8;
  uLongf destLen;

  destLen = (unint64_t)((double)(unint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) * 1.1 + 12.0);
  std::vector<unsigned char>::vector(&dest, destLen);
  if (j__compress(dest, &destLen, *(const Bytef **)this, *((_QWORD *)this + 1) - *(_QWORD *)this))
  {
    zilch::WriteBitstream::putVariableWidth(a2, 0);
  }
  else
  {
    if (destLen <= v8 - dest)
    {
      if (destLen < v8 - dest)
        v8 = &dest[destLen];
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)&dest, destLen - (v8 - dest));
    }
    v4 = *((_QWORD *)this + 4) - *((_QWORD *)this + 3);
    zilch::WriteBitstream::putVariableWidth(a2, v4 >> 3);
    if ((v4 >> 3))
    {
      v5 = 0;
      v6 = v4 & 0x7FFFFFFF8;
      do
      {
        zilch::WriteBitstream::putVariableWidth(a2, *(_DWORD *)(*((_QWORD *)this + 3) + v5 + 4));
        v5 += 8;
      }
      while (v6 != v5);
    }
    zilch::WriteBitstream::putVariableWidth(a2, destLen);
    zilch::WriteBitstream::putVariableWidth(a2, *((_DWORD *)this + 2) - *(_DWORD *)this);
    zilch::WriteBitstream::putByteArray(a2, dest, (_DWORD)v8 - (_DWORD)dest);
  }
  if (dest)
  {
    v8 = dest;
    operator delete(dest);
  }
}

void sub_18877CBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<zilch::StringList::Entry>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<zilch::StringList::Entry>::__append((void **)a1, a2 - v2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

char *std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(char **a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  char *v7;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char v25;
  char *v26;
  char *v27;
  char *v28;
  char v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v6 = a5;
  v7 = __src;
  v10 = a1[1];
  v9 = a1[2];
  if (v9 - v10 >= a5)
  {
    v17 = v10 - __dst;
    if (v10 - __dst >= a5)
    {
      v18 = &__src[a5];
      v20 = a1[1];
    }
    else
    {
      v18 = &__src[v17];
      if (&__src[v17] == a4)
      {
        v20 = a1[1];
      }
      else
      {
        v19 = __src - __dst;
        v20 = a1[1];
        v21 = v20;
        do
          *v21++ = (v20++)[v19];
        while (&v20[v19] != a4);
      }
      a1[1] = v20;
      if (v17 < 1)
        return v5;
    }
    v32 = &__dst[a5];
    v33 = &v20[-a5];
    v34 = v20;
    if (&v20[-a5] < v10)
    {
      v35 = &v10[a5] - v20;
      v34 = v20;
      do
      {
        v36 = *v33++;
        *v34++ = v36;
        --v35;
      }
      while (v35);
    }
    a1[1] = v34;
    if (v20 != v32)
      memmove(&__dst[a5], __dst, v20 - v32);
    if (v18 != v7)
      memmove(v5, v7, v18 - v7);
  }
  else
  {
    v11 = *a1;
    v12 = v10 - *a1 + a5;
    if (v12 < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = (char *)(__dst - v11);
    v14 = v9 - v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
      v16 = operator new(v15);
    else
      v16 = 0;
    v22 = &v13[(_QWORD)v16];
    v23 = &v13[(_QWORD)v16 + v6];
    v24 = v22;
    do
    {
      v25 = *v7++;
      *v24++ = v25;
      --v6;
    }
    while (v6);
    v26 = *a1;
    if (*a1 == v5)
    {
      v28 = v22;
    }
    else
    {
      v27 = v5;
      v28 = v22;
      do
      {
        v29 = *--v27;
        *--v28 = v29;
      }
      while (v27 != v26);
      v10 = a1[1];
    }
    v30 = (char *)v16 + v15;
    if (v10 != v5)
      memmove(v23, v5, v10 - v5);
    v31 = *a1;
    *a1 = v28;
    a1[1] = &v23[v10 - v5];
    a1[2] = v30;
    if (v31)
      operator delete(v31);
    return v22;
  }
  return v5;
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

void std::vector<zilch::StringList::Entry>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v10];
    v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    v16 = &v14[8 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_18877D094(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t zilch::TrafficDynamicTile::Flow::Flow(uint64_t result, uint64_t a2, int a3, float a4, float a5)
{
  *(_QWORD *)result = a2;
  *(float *)(result + 8) = a4;
  *(float *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

{
  *(_QWORD *)result = a2;
  *(float *)(result + 8) = a4;
  *(float *)(result + 12) = a5;
  *(_DWORD *)(result + 16) = a3;
  return result;
}

double zilch::TrafficDynamicTile::Flow::Flow(zilch::TrafficDynamicTile::Flow *this)
{
  double result;

  *(_QWORD *)this = 0;
  result = 0.0078125;
  *((_QWORD *)this + 1) = 0x3F80000000000000;
  *((_DWORD *)this + 4) = 3;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  result = 0.0078125;
  *((_QWORD *)this + 1) = 0x3F80000000000000;
  *((_DWORD *)this + 4) = 3;
  return result;
}

zilch::TrafficDynamicTile::Incident *zilch::TrafficDynamicTile::Incident::Incident(zilch::TrafficDynamicTile::Incident *this)
{
  zilch::GeoCoordinates *v2;

  v2 = zilch::GeoCoordinates::GeoCoordinates(this);
  zilch::String::String((_QWORD *)v2 + 2);
  zilch::String::String((_QWORD *)this + 5);
  *((_DWORD *)this + 16) = 0;
  zilch::String::String((_QWORD *)this + 9);
  zilch::String::String((_QWORD *)this + 12);
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 38) = 7;
  *((_WORD *)this + 78) = 0;
  *((_DWORD *)this + 40) = 0;
  *((_WORD *)this + 82) = -248;
  *((_BYTE *)this + 166) = -1;
  return this;
}

void sub_18877D194(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[95] < 0)
    operator delete(*v4);
  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

double zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this)
{
  double result;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 95) = 0;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  return result;
}

zilch::TrafficDynamicTile *zilch::TrafficDynamicTile::TrafficDynamicTile(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 24) = 10;
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 95) = 0;
  zilch::TrafficDynamicTile::decode(this, a2);
  return this;
}

void sub_18877D2B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 95) < 0)
    operator delete(*v3);
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *(void **)(v2 + 16);
  if (v5)
  {
    *(_QWORD *)(v2 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode(zilch::TrafficDynamicTile *this, zilch::ReadBitstream *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int VariableWidth;
  unsigned int v15;
  char v16;
  char v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  zilch::GeoCoordinates *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  Longitude v34;
  Latitude v35;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  std::vector<int> v40;
  __int128 v41;
  __int128 v42;
  void *__p[3];
  void *v44;
  _BYTE *v45;
  uint64_t v46;

  if (zilch::ReadBitstream::get(a2, 8) != 1)
    return 2;
  v6 = *((_QWORD *)this + 5);
  v4 = *((_QWORD *)this + 6);
  v5 = (uint64_t *)((char *)this + 40);
  while (v4 != v6)
    v4 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v4 - 16);
  *((_QWORD *)this + 6) = v6;
  v7 = zilch::TrafficDynamicTile::decode_flows_and_incidents((uint64_t)this, a2, (uint64_t)this + 40);
  if (!(_DWORD)v7)
  {
    if (zilch::TrafficDynamicTile::decode_incident_attributes(this, a2, (uint64_t *)this + 5))
      return 1;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 3);
    if (v8 != v9)
    {
      if (v9 >= v8)
      {
        *((_BYTE *)a2 + 36) = 1;
      }
      else
      {
        v10 = *((_DWORD *)a2 + 8);
        v11 = (1 << v10) & *(_DWORD *)(*(_QWORD *)a2 + 4 * v9);
        *((_DWORD *)a2 + 8) = v10 + 1;
        if (v10 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((_QWORD *)a2 + 3) = v9 + 1;
        }
        if (v11)
        {
          v41 = 0uLL;
          *(_QWORD *)&v42 = 0;
          v7 = zilch::TrafficDynamicTile::decode_incidents((uint64_t)this, a2, (uint64_t)&v41);
          if ((_DWORD)v7)
          {
LABEL_17:
            v44 = &v41;
            std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
            return v7;
          }
          if (zilch::TrafficDynamicTile::decode_incident_attributes(this, a2, (uint64_t *)&v41))
          {
            v7 = 1;
            goto LABEL_17;
          }
          v37 = v41;
          if (*((_QWORD *)&v41 + 1) != (_QWORD)v41)
          {
            v38 = 0;
            v39 = 0;
            do
            {
              *(_DWORD *)(*(_QWORD *)(v37 + v38) + 64) = 7;
              std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((char **)this + 5, (__int128 *)(v37 + v38));
              ++v39;
              v37 = v41;
              v38 += 16;
            }
            while (v39 < (uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 4);
          }
          v44 = &v41;
          std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
        }
      }
    }
    zilch::ReadBitstream::align((uint64_t)a2);
    if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 3))
      return 0;
    v13 = *((_QWORD *)this + 5);
    v12 = *((_QWORD *)this + 6);
    VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
    if (!VariableWidth)
      return 0;
    v15 = VariableWidth;
    v16 = zilch::ReadBitstream::getVariableWidth(a2);
    v17 = zilch::ReadBitstream::getVariableWidth(a2);
    v18 = zilch::ReadBitstream::getVariableWidth(a2);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    std::vector<unsigned char>::vector(__p, (v12 - v13) >> 4, zilch::TrafficDynamicTile::INVALID_MZR);
    std::vector<unsigned char>::resize((unint64_t *)&v44, 0);
    v19 = zilch::ReadBitstream::getVariableWidth(a2);
    zilch::ReadBitstream::getByteArray((uint64_t)a2, v19, (unint64_t *)&v44);
    v41 = 0u;
    v42 = 0u;
    v20 = mgcl::ints::IntDecompressor<unsigned char>::decompress((uint64_t *)&v41, (unsigned __int8 *)v44, v45 - (_BYTE *)v44, v16, v17, (v12 - v13) >> 4, (uint8x8_t *)__p[0]);
    mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v41);
    if (v20)
    {
      v21 = 1;
    }
    else
    {
      std::vector<int>::vector(&v40, v15);
      std::vector<unsigned char>::resize((unint64_t *)&v44, 0);
      v22 = zilch::ReadBitstream::getVariableWidth(a2);
      zilch::ReadBitstream::getByteArray((uint64_t)a2, v22, (unint64_t *)&v44);
      v41 = 0u;
      v42 = 0u;
      v23 = mgcl::ints::IntDecompressor<int>::decompress((uint64_t *)&v41, (unsigned __int8 *)v44, v45 - (_BYTE *)v44, v16, v17, v15, (int8x16_t *)v40.__begin_);
      mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&v41);
      if (v23)
      {
        v21 = 1;
      }
      else
      {
        if (v12 != v13)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          if ((unint64_t)((v12 - v13) >> 4) <= 1)
            v27 = 1;
          else
            v27 = (v12 - v13) >> 4;
          do
          {
            v28 = *v5;
            v29 = *((unsigned __int8 *)__p[0] + v25);
            v30 = *(zilch::GeoCoordinates **)(*v5 + v24);
            *((_BYTE *)v30 + 166) = v29;
            if (v29 != 255)
            {
              if (v26 >= v40.__end_ - v40.__begin_)
                std::vector<zilch::GeoCoordinates>::__throw_out_of_range[abi:ne180100]();
              v31 = v40.__begin_[v26];
              v32 = zilch::GeoCoordinates::x(v30);
              v33 = zilch::GeoCoordinates::y(*(zilch::GeoCoordinates **)(v28 + v24));
              v34.var0 = v32;
              v35.var0 = v33;
              zilch::GeoCoordinates::set((uint64_t)v30, v34, v35, v31 * v18);
              ++v26;
            }
            ++v25;
            v24 += 16;
          }
          while (v27 != v25);
        }
        v21 = 0;
      }
      if (v40.__begin_)
      {
        v40.__end_ = v40.__begin_;
        operator delete(v40.__begin_);
      }
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    return v21 != 0;
  }
  return v7;
}

void sub_18877D6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  mgcl::ints::IntDecompressor<unsigned char>::~IntDecompressor((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void zilch::TrafficDynamicTile::~TrafficDynamicTile(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  v3 = this + 5;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

_DWORD *zilch::TrafficDynamicTile::setTrafficVersion(_DWORD *this, int a2)
{
  *this = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::trafficVersion(zilch::TrafficDynamicTile *this)
{
  return *(unsigned int *)this;
}

uint64_t zilch::TrafficDynamicTile::setFeedUpdateTimeSeconds(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 8) = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::feedUpdateTimeSeconds(zilch::TrafficDynamicTile *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t zilch::TrafficDynamicTile::setEncodedElevationScaleCm(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t zilch::TrafficDynamicTile::encodedElevationScaleCm(zilch::TrafficDynamicTile *this)
{
  return *((unsigned int *)this + 24);
}

void zilch::TrafficDynamicTile::addFlow(zilch::TrafficDynamicTile *this, const zilch::TrafficDynamicTile::Flow *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v5 = v6;
  v7 = *((_QWORD *)v4 - 1);
  if (v7 >= v6)
  {
    v10 = (void **)(v4 - 16);
    v11 = *((_QWORD *)v4 - 2);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v11) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v11) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v13;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)v4, v15);
    else
      v16 = 0;
    v17 = &v16[24 * v12];
    v18 = &v16[24 * v15];
    v19 = *(_OWORD *)a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v19;
    v9 = v17 + 24;
    v21 = (char *)*((_QWORD *)this + 2);
    v20 = (char *)*((_QWORD *)this + 3);
    if (v20 != v21)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_DWORD *)v17 - 2) = *((_DWORD *)v20 - 2);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*v10;
    }
    *((_QWORD *)this + 2) = v17;
    *((_QWORD *)this + 3) = v9;
    *((_QWORD *)this + 4) = v18;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = (char *)(v7 + 24);
  }
  *((_QWORD *)this + 3) = v9;
}

uint64_t zilch::TrafficDynamicTile::addIncident(uint64_t a1, __int128 *a2)
{
  return std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((char **)(a1 + 40), a2);
}

uint64_t std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

unint64_t zilch::TrafficDynamicTile::flowCount(zilch::TrafficDynamicTile *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3);
}

uint64_t zilch::TrafficDynamicTile::flow(zilch::TrafficDynamicTile *this, uint64_t a2)
{
  return *((_QWORD *)this + 2) + 24 * a2;
}

uint64_t zilch::TrafficDynamicTile::incidentCount(zilch::TrafficDynamicTile *this)
{
  return (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 4;
}

uint64_t zilch::TrafficDynamicTile::incident(zilch::TrafficDynamicTile *this, uint64_t a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 5) + 16 * a2);
}

uint64_t zilch::TrafficDynamicTile::encode(zilch::TrafficDynamicTile *this, zilch::WriteBitstream *a2, unsigned int a3)
{
  uint64_t v3;
  __int128 *v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  unint64_t v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer end;
  unsigned int *v38;
  std::vector<unsigned int>::pointer begin;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  mgcl::iarray::Encoder *v48;
  mgcl::iarray::Encoder *v49;
  std::vector<unsigned int> __p;
  unsigned int v52[4];
  void *v53;
  void *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  uint64_t v58;
  void *v59[2];
  void *v60[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78[5];

  if (a3 - 5 < 0xFFFFFFFC)
    return 2;
  zilch::WriteBitstream::put(a2, 1u, 8);
  v7 = (__int128 *)*((_QWORD *)this + 5);
  v8 = (__int128 *)*((_QWORD *)this + 6);
  v9 = 126 - 2 * __clz(v8 - v7);
  if (v8 == v7)
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,false>(v7, v8, (uint64_t)&v67, v10, 1);
  memset(v78, 0, 24);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v11 = *((_QWORD *)this + 5);
  if (*((_QWORD *)this + 6) != v11)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)(v11 + v12) + 64) == 7)
        v14 = &v75;
      else
        v14 = v78;
      std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((char **)v14, (__int128 *)(v11 + v12));
      ++v13;
      v11 = *((_QWORD *)this + 5);
      v12 += 16;
    }
    while (v13 < (*((_QWORD *)this + 6) - v11) >> 4);
  }
  v15 = zilch::TrafficDynamicTile::encode_flows_and_incidents((uint64_t)this, a2, v78);
  v3 = v15;
  if (a3 >= 2)
  {
    zilch::TrafficDynamicTile::encode_incident_attributes(v15, a2, v78);
    if (a3 >= 3)
    {
      v16 = v75;
      v17 = v76;
      zilch::WriteBitstream::put(a2, v75 != v76);
      if (v16 != v17)
      {
        v3 = zilch::TrafficDynamicTile::encode_incidents((uint64_t)this, a2, &v75);
        zilch::TrafficDynamicTile::encode_incident_attributes(v3, a2, &v75);
      }
    }
  }
  v19 = (char *)*((_QWORD *)this + 5);
  v18 = (char *)*((_QWORD *)this + 6);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    v21 = 0;
    do
    {
      v22 = *(_QWORD *)v19;
      v19 += 16;
      if (*(unsigned __int8 *)(v22 + 166) != 255)
        ++v21;
    }
    while (v19 != v18);
    if (a3 >= 4 && v21)
    {
      zilch::WriteBitstream::align(a2);
      zilch::WriteBitstream::putVariableWidth(a2, v21);
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v62 = 0u;
      *(_OWORD *)v60 = 0u;
      v61 = 0u;
      *(_OWORD *)v59 = 0u;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v53 = 0;
      v54 = 0;
      v55 = 0;
      v23 = mgcl::ints::IntCompressor<unsigned char>::gclVersionMajor();
      zilch::WriteBitstream::putVariableWidth(a2, v23);
      v24 = mgcl::ints::IntCompressor<unsigned char>::gclVersionMinor();
      zilch::WriteBitstream::putVariableWidth(a2, v24);
      zilch::WriteBitstream::putVariableWidth(a2, *((_DWORD *)this + 24));
      v25 = (v20 >> 4);
      std::vector<unsigned char>::vector(&__p, v25);
      if ((v20 >> 4))
      {
        v26 = 0;
        v27 = 0;
        do
        {
          *((_BYTE *)__p.__begin_ + v27++) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 5) + v26) + 166);
          v26 += 16;
        }
        while (v25 != v27);
      }
      v28 = mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize((uint64_t)&v67, v21);
      v29 = v56;
      v30 = v57;
      if (v28 <= v57 - v56)
      {
        if (v28 < v57 - v56)
        {
          v30 = &v56[v28];
          v57 = &v56[v28];
        }
      }
      else
      {
        std::vector<unsigned char>::__append((unint64_t *)&v56, v28 - (v57 - v56));
        v29 = v56;
        v30 = v57;
      }
      if (mgcl::ints::IntCompressor<unsigned char>::compress((uint64_t)&v67, (unsigned __int8 *)__p.__begin_, (char *)__p.__end_ - (char *)__p.__begin_, (uint64_t)v29, v30 - v29, v52, 0x1C0F07070FLL))
      {
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        v31 = 1;
      }
      else
      {
        zilch::WriteBitstream::putVariableWidth(a2, v52[0]);
        zilch::WriteBitstream::putByteArray(a2, v56, v52[0]);
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
        memset(&__p, 0, sizeof(__p));
        std::vector<int>::reserve(&__p, v21);
        if ((v20 >> 4))
        {
          v32 = 0;
          do
          {
            v33 = *(unsigned __int8 **)(*((_QWORD *)this + 5) + 16 * v32);
            if (v33[166] != 255)
            {
              v34 = zilch::GeoCoordinates::z((zilch::GeoCoordinates *)v33);
              LODWORD(v35) = *((_DWORD *)this + 24);
              v36 = llround((double)v34 / (double)v35);
              end = __p.__end_;
              if (__p.__end_ >= __p.__end_cap_.__value_)
              {
                begin = __p.__begin_;
                v40 = __p.__end_ - __p.__begin_;
                v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62)
                  std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                v42 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
                if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v41)
                  v41 = v42 >> 1;
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                  v43 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v43 = v41;
                if (v43)
                {
                  v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&__p.__end_cap_, v43);
                  begin = __p.__begin_;
                  end = __p.__end_;
                }
                else
                {
                  v44 = 0;
                }
                v45 = (unsigned int *)&v44[4 * v40];
                *v45 = v36;
                v38 = v45 + 1;
                while (end != begin)
                {
                  v46 = *--end;
                  *--v45 = v46;
                }
                __p.__begin_ = v45;
                __p.__end_ = v38;
                __p.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                if (begin)
                  operator delete(begin);
              }
              else
              {
                *__p.__end_ = v36;
                v38 = end + 1;
              }
              __p.__end_ = v38;
            }
            ++v32;
          }
          while (v32 != v25);
        }
        if (v21 == __p.__end_ - __p.__begin_
          && (v47 = mgcl::ints::IntCompressor<unsigned char>::estimateMaxCompressedSize((uint64_t)v59, v21),
              std::vector<unsigned char>::resize((unint64_t *)&v56, v47),
              !mgcl::ints::IntCompressor<int>::compress((uint64_t)v59, (int *)__p.__begin_, __p.__end_ - __p.__begin_, (uint64_t)v56, v57 - v56, v52, 0x1C0F07070FLL)))
        {
          zilch::WriteBitstream::putVariableWidth(a2, v52[0]);
          zilch::WriteBitstream::putByteArray(a2, v56, v52[0]);
          v31 = 0;
        }
        else
        {
          v31 = 1;
        }
        if (__p.__begin_)
        {
          __p.__end_ = __p.__begin_;
          operator delete(__p.__begin_);
        }
      }
      if (v53)
      {
        v54 = v53;
        operator delete(v53);
      }
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      v48 = (mgcl::iarray::Encoder *)*((_QWORD *)&v66 + 1);
      *((_QWORD *)&v66 + 1) = 0;
      if (v48)
      {
        mgcl::iarray::Encoder::~Encoder(v48);
        MEMORY[0x18D76437C]();
      }
      if ((_QWORD)v65)
      {
        *((_QWORD *)&v65 + 1) = v65;
        operator delete((void *)v65);
      }
      if (*((_QWORD *)&v63 + 1))
      {
        *(_QWORD *)&v64 = *((_QWORD *)&v63 + 1);
        operator delete(*((void **)&v63 + 1));
      }
      if ((_QWORD)v62)
      {
        *((_QWORD *)&v62 + 1) = v62;
        operator delete((void *)v62);
      }
      if (v60[1])
      {
        *(void **)&v61 = v60[1];
        operator delete(v60[1]);
      }
      if (v59[0])
      {
        v59[1] = v59[0];
        operator delete(v59[0]);
      }
      v49 = (mgcl::iarray::Encoder *)*((_QWORD *)&v74 + 1);
      *((_QWORD *)&v74 + 1) = 0;
      if (v49)
      {
        mgcl::iarray::Encoder::~Encoder(v49);
        MEMORY[0x18D76437C]();
      }
      if ((_QWORD)v73)
      {
        *((_QWORD *)&v73 + 1) = v73;
        operator delete((void *)v73);
      }
      if (*((_QWORD *)&v71 + 1))
      {
        *(_QWORD *)&v72 = *((_QWORD *)&v71 + 1);
        operator delete(*((void **)&v71 + 1));
      }
      if ((_QWORD)v70)
      {
        *((_QWORD *)&v70 + 1) = v70;
        operator delete((void *)v70);
      }
      if (*((_QWORD *)&v68 + 1))
      {
        *(_QWORD *)&v69 = *((_QWORD *)&v68 + 1);
        operator delete(*((void **)&v68 + 1));
      }
      if ((_QWORD)v67)
      {
        *((_QWORD *)&v67 + 1) = v67;
        operator delete((void *)v67);
      }
      if (v31)
        v3 = 1;
    }
  }
  *(_QWORD *)&v67 = &v75;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  *(_QWORD *)&v67 = v78;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v67);
  return v3;
}

void sub_18877E078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v37;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  mgcl::ints::IntCompressor<int>::~IntCompressor((uint64_t)&a21);
  mgcl::ints::IntCompressor<int>::~IntCompressor((uint64_t)&a37);
  a37 = v37 - 144;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a37 = v37 - 120;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::encode_flows_and_incidents(uint64_t a1, zilch::WriteBitstream *this, uint64_t **a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 *v11;
  float v12;
  float v13;
  BOOL v14;
  __n128 *v15;
  float v16;
  float v17;
  BOOL v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  unsigned int v23;
  unint64_t v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  std::string::size_type size;
  std::string *v31;
  std::string::size_type v32;
  char v33;
  std::string::size_type v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  float *v40;
  unint64_t v41;
  float v42;
  unint64_t v43;
  uint64_t v44;
  float v45;
  unint64_t v47;
  uint64_t v48;
  float v49;
  int v51;
  uint64_t v52;
  int *v53;
  int v54;
  int v55;
  unsigned int data;
  unsigned int v57;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  std::string::size_type v66;
  char v67;
  uint64_t v68;
  int v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  std::string::size_type v77;
  char v78;
  uint64_t v79;
  std::string v80;
  std::string v81;
  std::string v82;
  void *__p;
  _BYTE *v84;
  uint64_t v85;
  std::string v86;
  _QWORD v87[2];
  std::string v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  zilch::WriteBitstream::putVariableWidth(this, *(_DWORD *)a1);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(__n128 **)(a1 + 24);
  v8 = v6;
  v9 = v7;
  v10 = (uint64_t)v6;
  if ((__n128 *)v7 != v6)
  {
    v11 = *(__n128 **)(a1 + 16);
    while (1)
    {
      v12 = v11->n128_f32[2];
      if (v12 >= 1.0 || v12 < 0.0)
        break;
      v13 = v11->n128_f32[3];
      v14 = v13 > v12 && v13 <= 1.0;
      if (!v14 || v13 <= 0.0)
        break;
      v11 = (__n128 *)((char *)v11 + 24);
      if (v11 == v6)
        goto LABEL_28;
    }
    if (v11 != v6)
    {
      v15 = (__n128 *)((char *)v11 + 24);
      if (&v11[1].n128_i8[8] != (__int8 *)v6)
      {
        do
        {
          v16 = v15->n128_f32[2];
          if (v16 < 1.0 && v16 >= 0.0)
          {
            v17 = v15->n128_f32[3];
            v18 = v17 > v16 && v17 <= 1.0;
            if (v18 && v17 > 0.0)
            {
              v19 = *v15;
              v11[1].n128_u32[0] = v15[1].n128_u32[0];
              *v11 = v19;
              v11 = (__n128 *)((char *)v11 + 24);
            }
          }
          v15 = (__n128 *)((char *)v15 + 24);
        }
        while (v15 != v6);
        v9 = *(_QWORD *)(a1 + 16);
        v8 = *(__n128 **)(a1 + 24);
      }
    }
    if (v11 != v8)
    {
      v10 = v9;
      v8 = v11;
      *(_QWORD *)(a1 + 24) = v11;
      goto LABEL_29;
    }
LABEL_28:
    v10 = v9;
  }
LABEL_29:
  v20 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 3));
  if (v8 == (__n128 *)v9)
    v21 = 0;
  else
    v21 = v20;
  v22 = (char *)v6 - v7 != (char *)v8 - v10;
  std::__introsort<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,false>(v9, v8, (uint64_t)&v82, v21, 1);
  v84 = 0;
  v85 = 0;
  __p = 0;
  std::vector<zilch::TrafficDynamicTile::Flow>::__init_with_size[abi:ne180100]<zilch::TrafficDynamicTile::Flow*,zilch::TrafficDynamicTile::Flow*>(&__p, *(const void **)(a1 + 16), *(_QWORD *)(a1 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3));
  v23 = -1431655765 * ((v84 - (_BYTE *)__p) >> 3);
  zilch::WriteBitstream::putVariableWidth(this, v23);
  if (__p)
  {
    v84 = __p;
    operator delete(__p);
  }
  v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
  if (HIDWORD(v24))
  {
    std::to_string(&v81, v24);
    v25 = std::string::insert(&v81, 0, "Too many flows for the tile. Received: ");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v27 = std::string::append(&v88, ". Expected at most: ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v82.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v80, 0xFFFFFFFFuLL);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v80;
    else
      v29 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      size = v80.__r_.__value_.__l.__size_;
    v31 = std::string::append(&v82, (const std::string::value_type *)v29, size);
    v32 = v31->__r_.__value_.__r.__words[0];
    v86.__r_.__value_.__r.__words[0] = v31->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v31->__r_.__value_.__r.__words[1] + 7);
    v33 = HIBYTE(v31->__r_.__value_.__r.__words[2]);
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    v34 = v86.__r_.__value_.__r.__words[0];
    *(_QWORD *)(a1 + 72) = v32;
    *(_QWORD *)(a1 + 80) = v34;
    *(_QWORD *)(a1 + 87) = *(std::string::size_type *)((char *)v86.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a1 + 95) = v33;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v88.__r_.__value_.__l.__data_);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 64) = 5;
    return 4;
  }
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v82, v23);
  if (v23)
  {
    for (i = 0; i != v23; *(_QWORD *)zilch::TrafficSegmentList::operator[](&v82, i++) = v37)
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * i);
  }
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)&v82, this);
  if (v23)
  {
    v38 = *(_QWORD *)(a1 + 16);
    v39 = 0;
    if (*(float *)(v38 + 8) == 0.0)
    {
      v40 = (float *)(v38 + 32);
      v41 = 1;
      do
      {
        if (*(v40 - 5) != 1.0)
          break;
        v39 = v41 >= v23;
        if (v23 == v41)
          break;
        v42 = *v40;
        v40 += 6;
        ++v41;
      }
      while (v42 == 0.0);
    }
  }
  else
  {
    v39 = 1;
  }
  zilch::WriteBitstream::put(this, v39);
  if (v39)
  {
LABEL_85:
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
    if (v23)
    {
      v51 = 0;
      v52 = v23;
      v53 = (int *)(*(_QWORD *)(a1 + 16) + 16);
      do
      {
        v55 = *v53;
        v53 += 6;
        v54 = v55;
        if (v55 > v51)
          v51 = v54;
        if (v51 <= 3)
          ++*((_DWORD *)&v88.__r_.__value_.__l.__data_ + v51);
        --v52;
      }
      while (v52);
      data = v88.__r_.__value_.__l.__data_;
    }
    else
    {
      data = 0;
    }
    goto LABEL_95;
  }
  if (!v23)
  {
    data = 0;
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = 0uLL;
LABEL_95:
    zilch::WriteBitstream::putVariableWidth(this, data);
    zilch::WriteBitstream::putVariableWidth(this, HIDWORD(v88.__r_.__value_.__r.__words[0]));
    zilch::WriteBitstream::putVariableWidth(this, v88.__r_.__value_.__r.__words[1]);
    zilch::WriteBitstream::putVariableWidth(this, HIDWORD(v88.__r_.__value_.__r.__words[1]));
    v57 = zilch::TrafficDynamicTile::encode_incidents(a1, this, a3);
    if (v57)
      v35 = v57;
    else
      v35 = (4 * v22);
    goto LABEL_98;
  }
  v43 = 0;
  v44 = 8;
  while (1)
  {
    v45 = *(float *)(*(_QWORD *)(a1 + 16) + v44);
    if (v45 != 0.0)
      break;
    zilch::WriteBitstream::put(this, 1u);
LABEL_74:
    ++v43;
    v44 += 24;
    if (v23 == v43)
    {
      v47 = 0;
      v48 = 12;
      while (1)
      {
        v49 = *(float *)(*(_QWORD *)(a1 + 16) + v48);
        if (v49 == 1.0)
        {
          zilch::WriteBitstream::put(this, 1u);
        }
        else
        {
          if (v49 <= 0.0 || v49 >= 1.0)
          {
            std::to_string(&v80, v47);
            v70 = std::string::insert(&v80, 0, "Invalid end offset for flow number: ");
            v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
            v81.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v71;
            v70->__r_.__value_.__l.__size_ = 0;
            v70->__r_.__value_.__r.__words[2] = 0;
            v70->__r_.__value_.__r.__words[0] = 0;
            v72 = std::string::append(&v81, " having value: ");
            v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
            v88.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v73;
            v72->__r_.__value_.__l.__size_ = 0;
            v72->__r_.__value_.__r.__words[2] = 0;
            v72->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v86, *(float *)(*(_QWORD *)(a1 + 16) + v48));
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v74 = &v86;
            else
              v74 = (std::string *)v86.__r_.__value_.__r.__words[0];
            if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v75 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
            else
              v75 = v86.__r_.__value_.__l.__size_;
            v76 = std::string::append(&v88, (const std::string::value_type *)v74, v75);
            v77 = v76->__r_.__value_.__r.__words[0];
            v87[0] = v76->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v76->__r_.__value_.__r.__words[1] + 7);
            v78 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
            v76->__r_.__value_.__l.__size_ = 0;
            v76->__r_.__value_.__r.__words[2] = 0;
            v76->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 95) < 0)
              operator delete(*(void **)(a1 + 72));
            v79 = v87[0];
            *(_QWORD *)(a1 + 72) = v77;
            *(_QWORD *)(a1 + 80) = v79;
            *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v87 + 7);
            *(_BYTE *)(a1 + 95) = v78;
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v86.__r_.__value_.__l.__data_);
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v88.__r_.__value_.__l.__data_);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v81.__r_.__value_.__l.__data_);
            if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v80.__r_.__value_.__l.__data_);
            v69 = 3;
            goto LABEL_134;
          }
          zilch::WriteBitstream::put(this, 0);
          zilch::WriteBitstream::put(this, (float)(*(float *)(*(_QWORD *)(a1 + 16) + v48) * 255.0), 8);
        }
        ++v47;
        v48 += 24;
        if (v23 == v47)
          goto LABEL_85;
      }
    }
  }
  if (v45 > 0.0 && v45 < 1.0)
  {
    zilch::WriteBitstream::put(this, 0);
    zilch::WriteBitstream::put(this, (float)(*(float *)(*(_QWORD *)(a1 + 16) + v44) * 255.0), 8);
    goto LABEL_74;
  }
  std::to_string(&v80, v43);
  v59 = std::string::insert(&v80, 0, "Invalid start offset for flow number: ");
  v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v60;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  v61 = std::string::append(&v81, " having value: ");
  v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
  v88.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v62;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  v61->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v86, *(float *)(*(_QWORD *)(a1 + 16) + v44));
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v86;
  else
    v63 = (std::string *)v86.__r_.__value_.__r.__words[0];
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v64 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  else
    v64 = v86.__r_.__value_.__l.__size_;
  v65 = std::string::append(&v88, (const std::string::value_type *)v63, v64);
  v66 = v65->__r_.__value_.__r.__words[0];
  v87[0] = v65->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v87 + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
  v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v68 = v87[0];
  *(_QWORD *)(a1 + 72) = v66;
  *(_QWORD *)(a1 + 80) = v68;
  *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v87 + 7);
  *(_BYTE *)(a1 + 95) = v67;
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v69 = 1;
LABEL_134:
  *(_DWORD *)(a1 + 64) = v69;
  v35 = 4;
LABEL_98:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v82);
  return v35;
}

void sub_18877E924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  if (a38 < 0)
    operator delete(__p);
  if (*(char *)(v38 - 121) < 0)
    operator delete(*(void **)(v38 - 144));
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a23);
  _Unwind_Resume(a1);
}

void zilch::TrafficDynamicTile::encode_incident_attributes(uint64_t a1, zilch::WriteBitstream *a2, uint64_t **a3)
{
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;

  v5 = (char *)a3[1] - (char *)*a3;
  v6 = v5 >> 4;
  zilch::TrafficDynamicTile::Incident::Incident((zilch::TrafficDynamicTile::Incident *)&v24);
  if ((v5 >> 4))
  {
    v7 = 0;
    LOBYTE(v8) = 0;
    LOBYTE(v9) = 0;
    v10 = *a3;
    v11 = (v5 >> 4);
    do
    {
      v9 = (v9 & 1) != 0 || *(_DWORD *)(*v10 + 160) != v33;
      v12 = *v10;
      v8 = (v8 & 1) != 0 || *(unsigned __int8 *)(v12 + 164) != v34;
      v13 = *(unsigned __int8 *)(v12 + 165);
      if (v13 < 0xF && v13 != v35)
        ++v7;
      v10 += 2;
      --v11;
    }
    while (v11);
  }
  else
  {
    v9 = 0;
    v8 = 0;
    v7 = 0;
  }
  zilch::WriteBitstream::put(a2, v9);
  if ((_DWORD)v6)
    v15 = v9;
  else
    v15 = 0;
  if (v15 == 1)
  {
    v16 = 0;
    do
    {
      v17 = 0;
      switch(*(_DWORD *)((*a3)[v16 / 8] + 160))
      {
        case 1:
          goto LABEL_28;
        case 2:
          zilch::WriteBitstream::put(a2, 1u);
          v17 = 0;
          goto LABEL_26;
        case 3:
          zilch::WriteBitstream::put(a2, 1u);
          v17 = 0;
          goto LABEL_28;
        case 4:
          v17 = 1;
          zilch::WriteBitstream::put(a2, 1u);
          goto LABEL_26;
        case 5:
          v17 = 1;
          zilch::WriteBitstream::put(a2, 1u);
LABEL_28:
          zilch::WriteBitstream::put(a2, v17);
          v18 = 1;
          break;
        default:
LABEL_26:
          zilch::WriteBitstream::put(a2, v17);
          v18 = 0;
          break;
      }
      zilch::WriteBitstream::put(a2, v18);
      v16 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v16);
  }
  zilch::WriteBitstream::put(a2, v8);
  if ((_DWORD)v6)
    v19 = v8;
  else
    v19 = 0;
  if (v19 == 1)
  {
    v20 = 0;
    do
    {
      zilch::WriteBitstream::put(a2, *(unsigned __int8 *)((*a3)[v20 / 8] + 164) - 8, 3);
      v20 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v20);
  }
  zilch::WriteBitstream::putVariableWidth(a2, v7);
  if (v7 && (_DWORD)v6)
  {
    v21 = 0;
    v22 = 0;
    do
    {
      if (*(unsigned __int8 *)((*a3)[v21 / 8] + 165) != v35)
      {
        zilch::WriteBitstream::putVariableWidth(a2, v22);
        v23 = *(unsigned __int8 *)((*a3)[v21 / 8] + 165);
        if (v23 >= 0xF)
          v23 = 15;
        zilch::WriteBitstream::put(a2, v23 - 8, 3);
      }
      ++v22;
      v21 += 16;
    }
    while ((v5 & 0xFFFFFFFF0) != v21);
  }
  if (v32 < 0)
    operator delete(__p);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
}

void sub_18877ED08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  zilch::TrafficDynamicTile::Incident::~Incident(&a9);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::encode_incidents(uint64_t a1, zilch::WriteBitstream *a2, uint64_t **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  char v18;
  uint64_t v19;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  _BOOL4 v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int data;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  zilch::WriteBitstream *v38;
  uint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  zilch::WriteBitstream *v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  zilch::WriteBitstream *v52;
  uint64_t *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  std::string::size_type v62;
  std::string::size_type v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  int v73;
  char *v74;
  _DWORD *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  BOOL v94[8];
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98[2];
  std::string v99;
  int v100;
  std::string v101;
  std::string v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  char *v107;
  std::string v108;
  unsigned int v109;
  uint64_t v110;

  v110 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  v103 = 0;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__init_with_size[abi:ne180100]<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>((char *)&v103, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  v6 = v104 - v103;
  v7 = (unint64_t)(v104 - v103) >> 4;
  zilch::WriteBitstream::putVariableWidth(a2, v7);
  v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  v8 = *a3;
  v9 = (char *)a3[1] - (char *)*a3;
  if ((unint64_t)v9 >= 0xFFFFFFFF1)
  {
    std::to_string(&v108, v9 >> 4);
    v10 = std::string::insert(&v108, 0, "Too many incidents for the tile. Received: ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v99.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v99.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v99, ". Expected at most: ");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v101.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v102, 0xFFFFFFFFuLL);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v102;
    else
      v14 = (std::string *)v102.__r_.__value_.__r.__words[0];
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    else
      size = v102.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v101, (const std::string::value_type *)v14, size);
    v17 = v16->__r_.__value_.__r.__words[0];
    *(_QWORD *)&v106 = v16->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)&v106 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
    v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 95) < 0)
      operator delete(*(void **)(a1 + 72));
    v19 = v106;
    *(_QWORD *)(a1 + 72) = v17;
    *(_QWORD *)(a1 + 80) = v19;
    *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)&v106 + 7);
    *(_BYTE *)(a1 + 95) = v18;
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    *(_DWORD *)(a1 + 64) = 7;
    return 4;
  }
  memset(&v108, 0, sizeof(v108));
  v109 = 0;
  v93 = v6;
  v21 = (v6 >> 4);
  if ((_DWORD)v7)
  {
    LOBYTE(v22) = 0;
    LOBYTE(v23) = 0;
    LOBYTE(v24) = 0;
    LOBYTE(v25) = 0;
    LOBYTE(v26) = 0;
    v27 = 0;
    v28 = v21;
    while (1)
    {
      v29 = *v8;
      if (*(_DWORD *)(*v8 + 64) > v27)
        v27 = *(_DWORD *)(*v8 + 64);
      if (v27 <= 6)
        ++*((_DWORD *)&v108.__r_.__value_.__l.__data_ + v27);
      if (v26)
      {
        v26 = 1;
        if ((v25 & 1) == 0)
          goto LABEL_27;
      }
      else
      {
        if (*(char *)(v29 + 39) < 0)
          v30 = *(_QWORD *)(v29 + 24);
        else
          v30 = *(unsigned __int8 *)(v29 + 39);
        v26 = v30 != 0;
        if ((v25 & 1) == 0)
        {
LABEL_27:
          v25 = *(_QWORD *)(v29 + 120) != 0;
          if ((v24 & 1) == 0)
            goto LABEL_28;
          goto LABEL_36;
        }
      }
      v25 = 1;
      if ((v24 & 1) == 0)
      {
LABEL_28:
        v24 = *(_QWORD *)(v29 + 128) != 0;
        if ((v23 & 1) == 0)
          goto LABEL_29;
        goto LABEL_37;
      }
LABEL_36:
      v24 = 1;
      if ((v23 & 1) == 0)
      {
LABEL_29:
        v23 = *(_QWORD *)(v29 + 136) != 0;
        if ((v22 & 1) != 0)
          goto LABEL_38;
        goto LABEL_30;
      }
LABEL_37:
      v23 = 1;
      if ((v22 & 1) != 0)
      {
LABEL_38:
        v22 = 1;
        goto LABEL_39;
      }
LABEL_30:
      v22 = *(unsigned __int8 *)(v29 + 156) != 0;
LABEL_39:
      v8 += 2;
      if (!--v28)
      {
        data = v108.__r_.__value_.__l.__data_;
        v32 = HIDWORD(v108.__r_.__value_.__r.__words[0]);
        v96 = HIDWORD(v108.__r_.__value_.__r.__words[1]);
        v97 = v108.__r_.__value_.__r.__words[1];
        *(_QWORD *)v94 = __PAIR64__(v26, v108.__r_.__value_.__r.__words[2]);
        goto LABEL_42;
      }
    }
  }
  *(_QWORD *)v94 = 0;
  v96 = 0;
  v97 = 0;
  v32 = 0;
  data = 0;
  v25 = 0;
  v24 = 0;
  v23 = 0;
  v22 = 0;
LABEL_42:
  v95 = v7;
  zilch::WriteBitstream::putVariableWidth(a2, data);
  zilch::WriteBitstream::putVariableWidth(a2, v32);
  zilch::WriteBitstream::putVariableWidth(a2, v97);
  zilch::WriteBitstream::putVariableWidth(a2, v96);
  zilch::WriteBitstream::putVariableWidth(a2, *(unsigned int *)v94);
  zilch::StringList::StringList((zilch::StringList *)&v101);
  *(_QWORD *)v98 = a1;
  if ((_DWORD)v7)
  {
    v33 = 0;
    do
    {
      v34 = (*a3)[v33 / 8];
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 72));
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 40));
      zilch::StringList::addString((zilch::StringList *)&v101, (const zilch::String *)(v34 + 96));
      v33 += 16;
    }
    while ((v93 & 0xFFFFFFFF0) != v33);
  }
  zilch::StringList::encode((zilch::StringList *)&v101, a2);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v102, v95);
  if (v21)
  {
    v35 = 0;
    for (i = 0; i != v21; ++i)
    {
      v37 = *(_QWORD *)((*a3)[v35] + 144);
      *(_QWORD *)zilch::TrafficSegmentList::operator[](&v102, i) = v37;
      v35 += 2;
    }
  }
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)&v102, a2);
  zilch::WriteBitstream::put(a2, 0);
  zilch::WriteBitstream::put(a2, 0);
  zilch::WriteBitstream::put(a2, v25);
  if (v25)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    v38 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      v39 = *a3;
      v40 = v21;
      v41 = (_QWORD *)v99.__r_.__value_.__r.__words[0];
      do
      {
        v42 = *v39;
        v39 += 2;
        *v41++ = *(_QWORD *)(v42 + 120);
        --v40;
      }
      while (v40);
    }
    v43 = zilch::WriteBitstream::computeOptimalRiceBits64(v38, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v43 + 1);
    if (v95)
    {
      v44 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(_QWORD *)(v99.__r_.__value_.__r.__words[0] + v44), v43);
        v44 += 8;
      }
      while (8 * v21 != v44);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v24);
  if (v24)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    v45 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      v46 = *a3;
      v47 = v21;
      v48 = (_QWORD *)v99.__r_.__value_.__r.__words[0];
      do
      {
        v49 = *v46;
        v46 += 2;
        *v48++ = *(_QWORD *)(v49 + 128);
        --v47;
      }
      while (v47);
    }
    v50 = zilch::WriteBitstream::computeOptimalRiceBits64(v45, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v50 + 1);
    if (v95)
    {
      v51 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(_QWORD *)(v99.__r_.__value_.__r.__words[0] + v51), v50);
        v51 += 8;
      }
      while (8 * v21 != v51);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v23);
  if (v23)
  {
    std::vector<unsigned long long>::vector(&v99, v21);
    v52 = (zilch::WriteBitstream *)v99.__r_.__value_.__r.__words[0];
    if (v95)
    {
      v53 = *a3;
      v54 = v21;
      v55 = (_QWORD *)v99.__r_.__value_.__r.__words[0];
      do
      {
        v56 = *v53;
        v53 += 2;
        *v55++ = *(_QWORD *)(v56 + 136);
        --v54;
      }
      while (v54);
    }
    v57 = zilch::WriteBitstream::computeOptimalRiceBits64(v52, (const unint64_t *)v21);
    zilch::WriteBitstream::putEliasGamma(a2, v57 + 1);
    if (v95)
    {
      v58 = 0;
      do
      {
        zilch::WriteBitstream::putRice64(a2, *(_QWORD *)(v99.__r_.__value_.__r.__words[0] + v58), v57);
        v58 += 8;
      }
      while (8 * v21 != v58);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::putVariableWidth64(a2, *(_QWORD *)(*(_QWORD *)v98 + 8));
  if (*a3 != a3[1])
  {
    v59 = 0;
    memset(&v99, 0, sizeof(v99));
    v106 = 0uLL;
    v107 = 0;
    do
    {
      v100 = zilch::GeoCoordinates::x((zilch::GeoCoordinates *)(*a3)[2 * v59]);
      v60 = zilch::Longitude::toUint32((zilch::Longitude *)&v100);
      v61 = v60;
      v62 = v99.__r_.__value_.__l.__size_;
      if (v99.__r_.__value_.__l.__size_ >= v99.__r_.__value_.__r.__words[2])
      {
        v64 = (void *)v99.__r_.__value_.__r.__words[0];
        v65 = (uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v67 = v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v99.__r_.__value_.__r.__words[2] - v99.__r_.__value_.__r.__words[0]) >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v68 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v68 = v66;
        if (v68)
        {
          v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v99.__r_.__value_.__r.__words[2], v68);
          v62 = v99.__r_.__value_.__l.__size_;
          v64 = (void *)v99.__r_.__value_.__r.__words[0];
        }
        else
        {
          v69 = 0;
        }
        v70 = &v69[4 * v65];
        *(_DWORD *)v70 = v61;
        v63 = (std::string::size_type)(v70 + 4);
        while ((void *)v62 != v64)
        {
          v71 = *(_DWORD *)(v62 - 4);
          v62 -= 4;
          *((_DWORD *)v70 - 1) = v71;
          v70 -= 4;
        }
        v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
        v99.__r_.__value_.__l.__size_ = v63;
        v99.__r_.__value_.__r.__words[2] = (std::string::size_type)&v69[4 * v68];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_DWORD *)v99.__r_.__value_.__l.__size_ = v60;
        v63 = v62 + 4;
      }
      v99.__r_.__value_.__l.__size_ = v63;
      v100 = zilch::GeoCoordinates::y((zilch::GeoCoordinates *)(*a3)[2 * v59]);
      v72 = zilch::Latitude::toUint32((zilch::Latitude *)&v100);
      v73 = v72;
      v74 = (char *)*((_QWORD *)&v106 + 1);
      if (*((_QWORD *)&v106 + 1) >= (unint64_t)v107)
      {
        v76 = (char *)v106;
        v77 = (uint64_t)(*((_QWORD *)&v106 + 1) - v106) >> 2;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v79 = (uint64_t)&v107[-v106];
        if ((uint64_t)&v107[-v106] >> 1 > v78)
          v78 = v79 >> 1;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
          v80 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          v81 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v107, v80);
          v74 = (char *)*((_QWORD *)&v106 + 1);
          v76 = (char *)v106;
        }
        else
        {
          v81 = 0;
        }
        v82 = &v81[4 * v77];
        *(_DWORD *)v82 = v73;
        v75 = v82 + 4;
        while (v74 != v76)
        {
          v83 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *((_DWORD *)v82 - 1) = v83;
          v82 -= 4;
        }
        *(_QWORD *)&v106 = v82;
        *((_QWORD *)&v106 + 1) = v75;
        v107 = &v81[4 * v80];
        if (v76)
          operator delete(v76);
      }
      else
      {
        **((_DWORD **)&v106 + 1) = v72;
        v75 = v74 + 4;
      }
      *((_QWORD *)&v106 + 1) = v75;
      ++v59;
    }
    while (v59 != v21);
    v84 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v99.__r_.__value_.__l.__data_, (const unsigned int *)((uint64_t)(v99.__r_.__value_.__l.__size_ - v99.__r_.__value_.__r.__words[0]) >> 2));
    v85 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v106, (const unsigned int *)((uint64_t)(*((_QWORD *)&v106 + 1) - v106) >> 2));
    zilch::WriteBitstream::putEliasGamma(a2, v84 + 1);
    zilch::WriteBitstream::putEliasGamma(a2, v85 + 1);
    if (v95)
    {
      v86 = 0;
      do
      {
        zilch::WriteBitstream::putRice(a2, *(_DWORD *)(v99.__r_.__value_.__r.__words[0] + v86), v84);
        zilch::WriteBitstream::putRice(a2, *(_DWORD *)(v106 + v86), v85);
        v86 += 4;
      }
      while (4 * v21 != v86);
    }
    if ((_QWORD)v106)
    {
      *((_QWORD *)&v106 + 1) = v106;
      operator delete((void *)v106);
    }
    if (v99.__r_.__value_.__r.__words[0])
    {
      v99.__r_.__value_.__l.__size_ = v99.__r_.__value_.__r.__words[0];
      operator delete(v99.__r_.__value_.__l.__data_);
    }
  }
  zilch::WriteBitstream::put(a2, v22);
  if (!v22)
    goto LABEL_126;
  if (v95)
  {
    v87 = 0;
    v88 = 16 * v21;
    do
    {
      if (*(_BYTE *)((*a3)[v87 / 8] + 156))
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putEliasGamma(a2, *(unsigned __int8 *)((*a3)[v87 / 8] + 156));
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v87 += 16;
    }
    while (v88 != v87);
    v89 = 0;
    do
    {
      zilch::WriteBitstream::put(a2, *(_DWORD *)((*a3)[v89 / 8] + 152), 4);
      v89 += 16;
    }
    while (v88 != v89);
LABEL_126:
    if (v95)
    {
      v90 = 0;
      do
      {
        zilch::WriteBitstream::put(a2, *(unsigned __int8 *)((*a3)[v90] + 157));
        v90 += 2;
      }
      while (2 * v21 != v90);
    }
  }
  zilch::WriteBitstream::put(a2, *(unsigned int *)&v94[4]);
  if (*(_DWORD *)&v94[4])
  {
    zilch::StringList::StringList((zilch::StringList *)&v99);
    if (v95)
    {
      v91 = 0;
      v92 = 16 * v21;
      do
      {
        zilch::StringList::addString((zilch::StringList *)&v99, (const zilch::String *)((*a3)[v91 / 8] + 16));
        v91 += 16;
      }
      while (v92 != v91);
    }
    zilch::StringList::encode((zilch::StringList *)&v99, a2);
    zilch::StringList::~StringList((zilch::StringList *)&v99);
  }
  zilch::WriteBitstream::putVariableWidth(a2, HIDWORD(v108.__r_.__value_.__r.__words[2]));
  zilch::WriteBitstream::putVariableWidth(a2, v109);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v102);
  zilch::StringList::~StringList((zilch::StringList *)&v101);
  return 0;
}

void sub_18877F6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  zilch::StringList::~StringList((zilch::StringList *)&__p);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a35);
  zilch::StringList::~StringList((zilch::StringList *)&a26);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::resize(unint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  size_t v4;

  v2 = a1[1] - *a1;
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<unsigned char>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

uint64_t mgcl::ints::IntCompressor<int>::~IntCompressor(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  std::unique_ptr<mgcl::iarray::Encoder>::reset[abi:ne180100]((mgcl::iarray::Encoder **)(a1 + 120), 0);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(_QWORD *)(a1 + 80) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(_QWORD *)(a1 + 56) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t zilch::TrafficDynamicTile::decode_flows_and_incidents(uint64_t a1, zilch::ReadBitstream *this, uint64_t a3)
{
  _QWORD *v6;
  unsigned int VariableWidth;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  int v15;
  BOOL v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  int v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;
  float v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  std::string::size_type v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *p_p;
  std::string::size_type size;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  std::string __p;
  std::string v61;
  std::string v62;
  _QWORD v63[3];
  std::string v64;
  _QWORD v65[4];

  v65[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = zilch::ReadBitstream::getVariableWidth(this);
  v6 = (_QWORD *)(a1 + 16);
  VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
  v8 = VariableWidth;
  std::vector<zilch::TrafficDynamicTile::Flow>::resize(a1 + 16, VariableWidth);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v63, VariableWidth, this);
  if (VariableWidth)
  {
    v9 = 0;
    v10 = 8;
    do
    {
      v11 = (_QWORD *)zilch::TrafficSegmentList::operator[](v63, v9);
      v12 = (_QWORD *)(*v6 + v10);
      *(v12 - 1) = *v11;
      *v12 = 0x3F80000000000000;
      ++v9;
      v10 += 24;
    }
    while (v8 != v9);
  }
  v13 = *((_QWORD *)this + 3);
  if (v13 >= *((_QWORD *)this + 1))
  {
    *((_BYTE *)this + 36) = 1;
    if (!(_DWORD)v8)
      goto LABEL_35;
  }
  else
  {
    v14 = *((_DWORD *)this + 8);
    v15 = (1 << v14) & *(_DWORD *)(*(_QWORD *)this + 4 * v13);
    *((_DWORD *)this + 8) = v14 + 1;
    if (v14 >= 31)
    {
      *((_DWORD *)this + 8) = 0;
      *((_QWORD *)this + 3) = v13 + 1;
    }
    if (v15)
      v16 = 1;
    else
      v16 = (_DWORD)v8 == 0;
    if (v16)
      goto LABEL_35;
  }
  v17 = 0;
  v18 = (_QWORD *)(a1 + 80);
  v19 = 8;
  while (1)
  {
    v20 = *((_QWORD *)this + 3);
    if (v20 >= *((_QWORD *)this + 1))
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v21 = *((_DWORD *)this + 8);
      v22 = (1 << v21) & *(_DWORD *)(*(_QWORD *)this + 4 * v20);
      *((_DWORD *)this + 8) = v21 + 1;
      if (v21 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = v20 + 1;
      }
      if (v22)
        goto LABEL_23;
    }
    v23 = (float)zilch::ReadBitstream::get(this, 8) / 255.0;
    if (v23 >= 1.0)
      break;
    *(float *)(*v6 + v19) = v23;
LABEL_23:
    ++v17;
    v19 += 24;
    if (v8 == v17)
    {
      if ((_DWORD)v8)
      {
        v24 = 0;
        v25 = 12;
        do
        {
          v26 = *((_QWORD *)this + 3);
          if (v26 >= *((_QWORD *)this + 1))
          {
            *((_BYTE *)this + 36) = 1;
          }
          else
          {
            v27 = *((_DWORD *)this + 8);
            v28 = (1 << v27) & *(_DWORD *)(*(_QWORD *)this + 4 * v26);
            *((_DWORD *)this + 8) = v27 + 1;
            if (v27 >= 31)
            {
              *((_DWORD *)this + 8) = 0;
              *((_QWORD *)this + 3) = v26 + 1;
            }
            if (v28)
              goto LABEL_34;
          }
          v29 = (float)zilch::ReadBitstream::get(this, 8) / 255.0;
          if (v29 >= 1.0)
          {
            std::to_string(&v61, v24);
            v48 = std::string::insert(&v61, 0, "Invalid end offset for flow number: ");
            v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            v62.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            v50 = std::string::append(&v62, " having value: ");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v64.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&__p, v29);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              size = __p.__r_.__value_.__l.__size_;
            v54 = std::string::append(&v64, (const std::string::value_type *)p_p, size);
            v55 = v54->__r_.__value_.__r.__words[0];
            v65[0] = v54->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
            v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            if (*(char *)(a1 + 95) < 0)
              operator delete(*(void **)(a1 + 72));
            *(_QWORD *)(a1 + 72) = v55;
            *v18 = v65[0];
            *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v65 + 7);
            *(_BYTE *)(a1 + 95) = v56;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v64.__r_.__value_.__l.__data_);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            v36 = 4;
            *(_DWORD *)(a1 + 64) = 4;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
            v58 = *(_QWORD *)(a1 + 40);
            v57 = *(_QWORD *)(a1 + 48);
            if (v57 != v58)
            {
              do
                v57 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v57 - 16);
              while (v57 != v58);
              *(_QWORD *)(a1 + 48) = v58;
              goto LABEL_80;
            }
            goto LABEL_81;
          }
          *(float *)(*v6 + v25) = v29;
LABEL_34:
          ++v24;
          v25 += 24;
        }
        while (v8 != v24);
      }
LABEL_35:
      LODWORD(v64.__r_.__value_.__l.__data_) = zilch::ReadBitstream::getVariableWidth(this);
      HIDWORD(v64.__r_.__value_.__r.__words[0]) = zilch::ReadBitstream::getVariableWidth(this);
      LODWORD(v64.__r_.__value_.__r.__words[1]) = zilch::ReadBitstream::getVariableWidth(this);
      v30 = zilch::ReadBitstream::getVariableWidth(this);
      v31 = 0;
      LODWORD(v32) = 0;
      v33 = 0;
      HIDWORD(v64.__r_.__value_.__r.__words[1]) = v30;
      do
      {
        v32 = (*((_DWORD *)&v64.__r_.__value_.__l.__data_ + v31) + v32);
        if (v33 < v32)
        {
          v34 = (_DWORD *)(*v6 + 24 * v33 + 16);
          v35 = v32 - v33;
          do
          {
            *v34 = v31;
            v34 += 6;
            --v35;
          }
          while (v35);
          v33 = v32;
        }
        ++v31;
      }
      while (v31 != 4);
      v36 = zilch::TrafficDynamicTile::decode_incidents(a1, this, a3);
      goto LABEL_81;
    }
  }
  std::to_string(&v61, v17);
  v37 = std::string::insert(&v61, 0, "Invalid start offset for flow number: ");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  v62.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = std::string::append(&v62, " having value: ");
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v41 = &__p;
  else
    v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v42 = __p.__r_.__value_.__l.__size_;
  v43 = std::string::append(&v64, (const std::string::value_type *)v41, v42);
  v44 = v43->__r_.__value_.__r.__words[0];
  v65[0] = v43->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v65 + 7) = *(std::string::size_type *)((char *)&v43->__r_.__value_.__r.__words[1] + 7);
  v45 = HIBYTE(v43->__r_.__value_.__r.__words[2]);
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  *(_QWORD *)(a1 + 72) = v44;
  *v18 = v65[0];
  *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v65 + 7);
  *(_BYTE *)(a1 + 95) = v45;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 64) = 2;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  v47 = *(_QWORD *)(a1 + 40);
  v46 = *(_QWORD *)(a1 + 48);
  if (v46 != v47)
  {
    do
      v46 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v46 - 16);
    while (v46 != v47);
    *(_QWORD *)(a1 + 48) = v47;
  }
LABEL_80:
  v36 = 4;
LABEL_81:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v63);
  return v36;
}

void sub_18877FF3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a27);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode_incident_attributes(_QWORD *a1, zilch::ReadBitstream *this, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t i;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int VariableWidth;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[16];
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *__p;
  char v45;
  unsigned __int8 v46;

  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 3);
  if (v6 != v7)
  {
    v8 = *a3;
    v9 = a3[1] - *a3;
    v10 = v9 >> 4;
    if (v7 >= v6)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v11 = *(_QWORD *)this;
      v12 = *((_DWORD *)this + 8);
      v13 = (1 << v12) & *(_DWORD *)(*(_QWORD *)this + 4 * v7);
      v14 = v12 + 1;
      *((_DWORD *)this + 8) = v12 + 1;
      if (v12 >= 31)
      {
        v14 = 0;
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v7;
      }
      if (v13 && (_DWORD)v10)
      {
        for (i = (v9 >> 4); i; --i)
        {
          if (v7 >= v6)
          {
            *((_BYTE *)this + 36) = 1;
          }
          else
          {
            v16 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
            *((_DWORD *)this + 8) = v14 + 1;
            if (v14 >= 31)
            {
              v14 = 0;
              *((_DWORD *)this + 8) = 0;
              *((_QWORD *)this + 3) = ++v7;
              if (v16)
              {
LABEL_19:
                if (v7 >= v6)
                {
                  *((_BYTE *)this + 36) = 1;
                  goto LABEL_24;
                }
                v19 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                *((_DWORD *)this + 8) = v14 + 1;
                if (v14 < 31)
                {
                  ++v14;
                  if (!v19)
                    goto LABEL_24;
                }
                else
                {
                  v14 = 0;
                  *((_DWORD *)this + 8) = 0;
                  *((_QWORD *)this + 3) = ++v7;
                  if (!v19)
                  {
LABEL_24:
                    if (v7 >= v6)
                    {
                      *((_BYTE *)this + 36) = 1;
                      goto LABEL_31;
                    }
                    v20 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                    v21 = v14 + 1;
                    *((_DWORD *)this + 8) = v14 + 1;
                    if (v14 >= 31)
                    {
                      v14 = 0;
                      *((_DWORD *)this + 8) = 0;
                      *((_QWORD *)this + 3) = ++v7;
                      if (!v20)
                      {
LABEL_31:
                        v22 = 2;
LABEL_48:
                        *(_DWORD *)(*(_QWORD *)v8 + 160) = v22;
                        goto LABEL_49;
                      }
LABEL_39:
                      v22 = 3;
                      goto LABEL_48;
                    }
                    if (v20)
                    {
                      ++v14;
                      goto LABEL_39;
                    }
                    v22 = 2;
LABEL_47:
                    v14 = v21;
                    goto LABEL_48;
                  }
                }
                if (v7 < v6)
                {
                  v23 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
                  v21 = v14 + 1;
                  *((_DWORD *)this + 8) = v14 + 1;
                  if (v14 < 31)
                  {
                    if (!v23)
                    {
                      v22 = 4;
                      goto LABEL_47;
                    }
                    ++v14;
                  }
                  else
                  {
                    v14 = 0;
                    *((_DWORD *)this + 8) = 0;
                    *((_QWORD *)this + 3) = ++v7;
                    if (!v23)
                      goto LABEL_41;
                  }
                  v22 = 5;
                  goto LABEL_48;
                }
                *((_BYTE *)this + 36) = 1;
LABEL_41:
                v22 = 4;
                goto LABEL_48;
              }
            }
            else
            {
              ++v14;
              if (v16)
                goto LABEL_19;
            }
          }
          if (v7 >= v6)
          {
            *((_BYTE *)this + 36) = 1;
          }
          else
          {
            v17 = (1 << v14) & *(_DWORD *)(v11 + 4 * v7);
            v18 = v14 + 1;
            *((_DWORD *)this + 8) = v14 + 1;
            if (v14 < 31)
            {
              ++v14;
              if (!v17)
                goto LABEL_49;
LABEL_29:
              *(_DWORD *)(*(_QWORD *)v8 + 160) = 1;
              v14 = v18;
              goto LABEL_49;
            }
            v18 = 0;
            v14 = 0;
            *((_DWORD *)this + 8) = 0;
            *((_QWORD *)this + 3) = ++v7;
            if (v17)
              goto LABEL_29;
          }
LABEL_49:
          v8 += 16;
        }
      }
    }
    if (v6 != v7)
    {
      if (v7 >= v6)
      {
        *((_BYTE *)this + 36) = 1;
      }
      else
      {
        v24 = *((_DWORD *)this + 8);
        v25 = (1 << v24) & *(_DWORD *)(*(_QWORD *)this + 4 * v7);
        *((_DWORD *)this + 8) = v24 + 1;
        if (v24 >= 31)
        {
          *((_DWORD *)this + 8) = 0;
          *((_QWORD *)this + 3) = v7 + 1;
        }
        if (v25)
          v26 = (_DWORD)v10 == 0;
        else
          v26 = 1;
        if (!v26)
        {
          v27 = 0;
          v28 = (v9 >> 4);
          do
          {
            *(_BYTE *)(*(_QWORD *)(*a3 + v27) + 164) = zilch::ReadBitstream::get(this, 3) + 8;
            v27 += 16;
            --v28;
          }
          while (v28);
        }
      }
    }
  }
  zilch::TrafficDynamicTile::Incident::Incident((zilch::TrafficDynamicTile::Incident *)v37);
  if (*((_QWORD *)this + 1) != *((_QWORD *)this + 3))
  {
    VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
    if (VariableWidth)
    {
      v30 = VariableWidth;
      do
      {
        v31 = zilch::ReadBitstream::getVariableWidth(this);
        v32 = zilch::ReadBitstream::get(this, 3) + 8;
        if (v32 > 0xEu)
          v32 = v46;
        *(_BYTE *)(*(_QWORD *)(*a3 + 16 * v31) + 165) = v32;
        --v30;
      }
      while (v30);
    }
  }
  if (*((_BYTE *)this + 36))
  {
    a1[3] = a1[2];
    v34 = a1[5];
    for (j = a1[6];
          j != v34;
    a1[6] = v34;
    v35 = 1;
  }
  else
  {
    v35 = 0;
  }
  if (v45 < 0)
    operator delete(__p);
  if (v43 < 0)
    operator delete(v42);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  return v35;
}

void sub_1887803CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  zilch::TrafficDynamicTile::Incident::~Incident((void **)va);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::decode_incidents(uint64_t a1, zilch::ReadBitstream *this, uint64_t a3)
{
  unsigned int VariableWidth;
  unint64_t v7;
  int v8;
  zilch::TrafficDynamicTile::Incident *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t i;
  unint64_t v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  char v49;
  std::string::size_type v50;
  uint64_t m;
  char *v52;
  uint64_t EliasGamma;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  zilch::Longitude *Rice;
  zilch::Latitude *v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  Longitude v71;
  Latitude v72;
  unint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  int v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  std::string *v99;
  __int128 v100;
  std::string *v101;
  __int128 v102;
  std::string *v103;
  std::string::size_type size;
  std::string *v105;
  std::string::size_type v106;
  char v107;
  uint64_t v108;
  uint64_t j;
  char *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t k;
  uint64_t v122;
  int v124;
  int v125;
  std::string v126;
  std::string v127;
  std::string v128;
  std::string v129;
  std::string v130;
  __int128 v131[3];
  std::string v132;
  _QWORD v133[2];
  _DWORD v134[5];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  VariableWidth = zilch::ReadBitstream::getVariableWidth(this);
  v7 = VariableWidth;
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::reserve((char **)a3, VariableWidth);
  if (VariableWidth)
  {
    v8 = 0;
    do
    {
      v9 = (zilch::TrafficDynamicTile::Incident *)operator new();
      zilch::TrafficDynamicTile::Incident::Incident(v9);
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::shared_ptr[abi:ne180100]<zilch::TrafficDynamicTile::Incident,void>(v131, (uint64_t)v9);
      std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::push_back[abi:ne180100]((char **)a3, v131);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v131[0] + 1);
      if (*((_QWORD *)&v131[0] + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v131[0] + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v8;
    }
    while (v8 != (_DWORD)v7);
  }
  v13 = zilch::ReadBitstream::getVariableWidth(this);
  v134[0] = v13;
  v14 = zilch::ReadBitstream::getVariableWidth(this);
  v134[1] = v14;
  v15 = zilch::ReadBitstream::getVariableWidth(this);
  v134[2] = v15;
  v16 = zilch::ReadBitstream::getVariableWidth(this);
  v134[3] = v16;
  v125 = zilch::ReadBitstream::getVariableWidth(this);
  v17 = 0;
  LODWORD(v18) = 0;
  v19 = 0;
  v134[4] = v125;
  v124 = v14 + v13 + v15 + v16;
  v20 = *(char **)a3;
  do
  {
    v18 = (v134[v17] + v18);
    if (v19 < v18)
    {
      v21 = &v20[16 * v19];
      v22 = v18 - v19;
      do
      {
        v23 = *(_QWORD *)v21;
        v21 += 16;
        *(_DWORD *)(v23 + 64) = v17;
        --v22;
      }
      while (v22);
      v19 = v18;
    }
    ++v17;
  }
  while (v17 != 5);
  zilch::StringList::StringList((zilch::StringList *)v131, this);
  v24 = (3 * v7);
  if (zilch::StringList::size((zilch::StringList *)v131) == (_DWORD)v24)
  {
    if ((_DWORD)v7)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        if (zilch::StringList::stringLength((zilch::StringList *)v131, v26))
        {
          v27 = *(_QWORD *)(*(_QWORD *)a3 + v25);
          v28 = zilch::StringList::string((zilch::StringList *)v131, v26);
          v29 = zilch::StringList::stringLength((zilch::StringList *)v131, v26);
          MEMORY[0x18D7640B8](v27 + 72, v28, v29);
        }
        if (zilch::StringList::stringLength((zilch::StringList *)v131, v26 + 1))
        {
          v30 = *(_QWORD *)(*(_QWORD *)a3 + v25);
          v31 = zilch::StringList::string((zilch::StringList *)v131, v26 + 1);
          v32 = zilch::StringList::stringLength((zilch::StringList *)v131, v26 + 1);
          MEMORY[0x18D7640B8](v30 + 40, v31, v32);
        }
        if (zilch::StringList::stringLength((zilch::StringList *)v131, v26 + 2))
        {
          v33 = *(_QWORD *)(*(_QWORD *)a3 + v25);
          v34 = zilch::StringList::string((zilch::StringList *)v131, v26 + 2);
          v35 = zilch::StringList::stringLength((zilch::StringList *)v131, v26 + 2);
          MEMORY[0x18D7640B8](v33 + 96, v34, v35);
        }
        v26 += 3;
        v25 += 16;
      }
      while (16 * v7 != v25);
    }
    zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)&v130, v7, this);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16 * i) + 144) = *(_QWORD *)zilch::TrafficSegmentList::operator[](&v130, i);
    }
    v37 = *((_QWORD *)this + 3);
    v38 = *((_QWORD *)this + 1);
    if (v37 >= v38)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v39 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 8) = v39 + 1;
      if (v39 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v37;
      }
    }
    if (v37 >= v38)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v54 = *((_DWORD *)this + 8);
      *((_DWORD *)this + 8) = v54 + 1;
      if (v54 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v37;
      }
    }
    if (v37 >= v38)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v55 = *((_DWORD *)this + 8);
      v56 = (1 << v55) & *(_DWORD *)(*(_QWORD *)this + 4 * v37);
      *((_DWORD *)this + 8) = v55 + 1;
      if (v55 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v37;
      }
      if (v56)
      {
        LODWORD(v127.__r_.__value_.__l.__data_) = 0;
        EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v127);
        if ((_DWORD)EliasGamma)
          goto LABEL_169;
        --LODWORD(v127.__r_.__value_.__l.__data_);
        if ((_DWORD)v7)
        {
          v57 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + v57) + 120) = zilch::ReadBitstream::getRice64(this, v127.__r_.__value_.__l.__data_);
            v57 += 16;
          }
          while (16 * v7 != v57);
        }
        v37 = *((_QWORD *)this + 3);
        v38 = *((_QWORD *)this + 1);
      }
    }
    if (v37 >= v38)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v58 = *((_DWORD *)this + 8);
      v59 = (1 << v58) & *(_DWORD *)(*(_QWORD *)this + 4 * v37);
      *((_DWORD *)this + 8) = v58 + 1;
      if (v58 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = ++v37;
      }
      if (v59)
      {
        LODWORD(v127.__r_.__value_.__l.__data_) = 0;
        EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v127);
        if ((_DWORD)EliasGamma)
          goto LABEL_169;
        --LODWORD(v127.__r_.__value_.__l.__data_);
        if ((_DWORD)v7)
        {
          v60 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + v60) + 128) = zilch::ReadBitstream::getRice64(this, v127.__r_.__value_.__l.__data_);
            v60 += 16;
          }
          while (16 * v7 != v60);
        }
        v37 = *((_QWORD *)this + 3);
        v38 = *((_QWORD *)this + 1);
      }
    }
    if (v37 >= v38)
    {
      *((_BYTE *)this + 36) = 1;
    }
    else
    {
      v61 = *((_DWORD *)this + 8);
      v62 = (1 << v61) & *(_DWORD *)(*(_QWORD *)this + 4 * v37);
      *((_DWORD *)this + 8) = v61 + 1;
      if (v61 >= 31)
      {
        *((_DWORD *)this + 8) = 0;
        *((_QWORD *)this + 3) = v37 + 1;
      }
      if (v62)
      {
        LODWORD(v127.__r_.__value_.__l.__data_) = 0;
        EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v127);
        if ((_DWORD)EliasGamma)
          goto LABEL_169;
        --LODWORD(v127.__r_.__value_.__l.__data_);
        if ((_DWORD)v7)
        {
          v63 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + v63) + 136) = zilch::ReadBitstream::getRice64(this, v127.__r_.__value_.__l.__data_);
            v63 += 16;
          }
          while (16 * v7 != v63);
        }
      }
    }
    *(_QWORD *)(a1 + 8) = zilch::ReadBitstream::getVariableWidth64(this);
    if (!(_DWORD)v7)
      goto LABEL_93;
    LODWORD(v127.__r_.__value_.__l.__data_) = 0;
    EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v127);
    if (!(_DWORD)EliasGamma)
    {
      if (--LODWORD(v127.__r_.__value_.__l.__data_) > 0x20u)
        goto LABEL_167;
      LODWORD(v129.__r_.__value_.__l.__data_) = 0;
      EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v129);
      if (!(_DWORD)EliasGamma)
      {
        if (--LODWORD(v129.__r_.__value_.__l.__data_) <= 0x20u)
        {
          v64 = 0;
          do
          {
            Rice = (zilch::Longitude *)zilch::ReadBitstream::getRice(this, (int)v127.__r_.__value_.__l.__data_);
            v66 = (zilch::Latitude *)zilch::ReadBitstream::getRice(this, (int)v129.__r_.__value_.__l.__data_);
            v67 = *(_QWORD *)(*(_QWORD *)a3 + v64);
            LODWORD(Rice) = zilch::Longitude::fromUint32(Rice, v68);
            v70 = zilch::Latitude::fromUint32(v66, v69);
            v71.var0 = Rice;
            v72.var0 = v70;
            zilch::GeoCoordinates::set(v67, v71, v72);
            v64 += 16;
          }
          while (16 * v7 != v64);
LABEL_93:
          v73 = *((_QWORD *)this + 3);
          if (v73 >= *((_QWORD *)this + 1))
          {
            *((_BYTE *)this + 36) = 1;
          }
          else
          {
            v74 = *((_DWORD *)this + 8);
            v75 = (1 << v74) & *(_DWORD *)(*(_QWORD *)this + 4 * v73);
            *((_DWORD *)this + 8) = v74 + 1;
            if (v74 >= 31)
            {
              *((_DWORD *)this + 8) = 0;
              *((_QWORD *)this + 3) = v73 + 1;
            }
            if (v75)
            {
              if ((_DWORD)v7)
              {
                v76 = 0;
                v77 = 16 * v7;
                while (1)
                {
                  v78 = *((_QWORD *)this + 3);
                  if (v78 >= *((_QWORD *)this + 1))
                  {
                    *((_BYTE *)this + 36) = 1;
                  }
                  else
                  {
                    v79 = *((_DWORD *)this + 8);
                    v80 = (1 << v79) & *(_DWORD *)(*(_QWORD *)this + 4 * v78);
                    *((_DWORD *)this + 8) = v79 + 1;
                    if (v79 >= 31)
                    {
                      *((_DWORD *)this + 8) = 0;
                      *((_QWORD *)this + 3) = v78 + 1;
                    }
                    if (v80)
                    {
                      LODWORD(v127.__r_.__value_.__l.__data_) = 0;
                      EliasGamma = zilch::ReadBitstream::getEliasGamma(this, (unsigned int *)&v127);
                      if ((_DWORD)EliasGamma)
                        goto LABEL_169;
                      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + v76) + 156) = v127.__r_.__value_.__s.__data_[0];
                      goto LABEL_107;
                    }
                  }
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a3 + v76) + 156) = 0;
LABEL_107:
                  v76 += 16;
                  if (v77 == v76)
                  {
                    v81 = 0;
                    do
                    {
                      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + v81) + 152) = zilch::ReadBitstream::get(this, 4);
                      v81 += 16;
                    }
                    while (v77 != v81);
                    goto LABEL_112;
                  }
                }
              }
              v82 = *((_QWORD *)this + 3);
              v83 = *((_QWORD *)this + 1);
LABEL_120:
              if (v82 >= v83)
              {
                *((_BYTE *)this + 36) = 1;
              }
              else
              {
                v90 = *((_DWORD *)this + 8);
                v91 = (1 << v90) & *(_DWORD *)(*(_QWORD *)this + 4 * v82);
                *((_DWORD *)this + 8) = v90 + 1;
                if (v90 >= 31)
                {
                  *((_DWORD *)this + 8) = 0;
                  *((_QWORD *)this + 3) = v82 + 1;
                }
                if (v91)
                {
                  zilch::StringList::StringList((zilch::StringList *)&v127, this);
                  v92 = zilch::StringList::size((zilch::StringList *)&v127);
                  if (v92 != (_DWORD)v7)
                  {
                    v98 = zilch::StringList::size((zilch::StringList *)&v127);
                    std::to_string(&v132, v98);
                    v99 = std::string::insert(&v132, 0, "Unable to validate incident feed. Feed size: ");
                    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
                    v128.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v100;
                    v99->__r_.__value_.__l.__size_ = 0;
                    v99->__r_.__value_.__r.__words[2] = 0;
                    v99->__r_.__value_.__r.__words[0] = 0;
                    v101 = std::string::append(&v128, ". Expected value: ");
                    v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
                    v129.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v129.__r_.__value_.__l.__data_ = v102;
                    v101->__r_.__value_.__l.__size_ = 0;
                    v101->__r_.__value_.__r.__words[2] = 0;
                    v101->__r_.__value_.__r.__words[0] = 0;
                    std::to_string(&v126, v7);
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v103 = &v126;
                    else
                      v103 = (std::string *)v126.__r_.__value_.__r.__words[0];
                    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      size = HIBYTE(v126.__r_.__value_.__r.__words[2]);
                    else
                      size = v126.__r_.__value_.__l.__size_;
                    v105 = std::string::append(&v129, (const std::string::value_type *)v103, size);
                    v106 = v105->__r_.__value_.__r.__words[0];
                    v133[0] = v105->__r_.__value_.__l.__size_;
                    *(_QWORD *)((char *)v133 + 7) = *(std::string::size_type *)((char *)&v105->__r_.__value_.__r.__words[1]
                                                                              + 7);
                    v107 = HIBYTE(v105->__r_.__value_.__r.__words[2]);
                    v105->__r_.__value_.__l.__size_ = 0;
                    v105->__r_.__value_.__r.__words[2] = 0;
                    v105->__r_.__value_.__r.__words[0] = 0;
                    if (*(char *)(a1 + 95) < 0)
                      operator delete(*(void **)(a1 + 72));
                    v108 = v133[0];
                    *(_QWORD *)(a1 + 72) = v106;
                    *(_QWORD *)(a1 + 80) = v108;
                    *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v133 + 7);
                    *(_BYTE *)(a1 + 95) = v107;
                    if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v126.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v129.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v128.__r_.__value_.__l.__data_);
                    if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v132.__r_.__value_.__l.__data_);
                    *(_DWORD *)(a1 + 64) = 8;
                    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
                    v110 = *(char **)a3;
                    for (j = *(_QWORD *)(a3 + 8);
                          (char *)j != v110;
                    *(_QWORD *)(a3 + 8) = v110;
                    EliasGamma = 4;
LABEL_152:
                    zilch::StringList::~StringList((zilch::StringList *)&v127);
                    if (v92 != (_DWORD)v7)
                      goto LABEL_169;
                    goto LABEL_156;
                  }
                  if ((_DWORD)v7)
                  {
                    v93 = 0;
                    v94 = 0;
                    do
                    {
                      if (zilch::StringList::stringLength((zilch::StringList *)&v127, v93))
                      {
                        v95 = *(_QWORD *)(*(_QWORD *)a3 + v94);
                        v96 = zilch::StringList::string((zilch::StringList *)&v127, v93);
                        v97 = zilch::StringList::stringLength((zilch::StringList *)&v127, v93);
                        MEMORY[0x18D7640B8](v95 + 16, v96, v97);
                      }
                      v94 += 16;
                      ++v93;
                    }
                    while (16 * v7 != v94);
                    EliasGamma = 0;
                    goto LABEL_152;
                  }
                  zilch::StringList::~StringList((zilch::StringList *)&v127);
                }
              }
LABEL_156:
              v111 = zilch::ReadBitstream::getVariableWidth(this);
              v112 = v124 + v125;
              v113 = (v111 + v124 + v125);
              if (v124 + v125 < v113)
              {
                v114 = (uint64_t *)(*(_QWORD *)a3 + 16 * v112);
                v115 = v113 - v112;
                do
                {
                  v116 = *v114;
                  v114 += 2;
                  *(_DWORD *)(v116 + 64) = 5;
                  --v115;
                }
                while (v115);
              }
              v117 = zilch::ReadBitstream::getVariableWidth(this) + v113;
              if (v113 < v117)
              {
                v118 = (uint64_t *)(*(_QWORD *)a3 + 16 * v113);
                v119 = v117 - v113;
                do
                {
                  v120 = *v118;
                  v118 += 2;
                  *(_DWORD *)(v120 + 64) = 6;
                  --v119;
                }
                while (v119);
              }
              if (!*((_BYTE *)this + 36))
              {
                EliasGamma = 0;
                goto LABEL_169;
              }
              *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
              v122 = *(_QWORD *)(a1 + 40);
              for (k = *(_QWORD *)(a1 + 48);
                    k != v122;
              *(_QWORD *)(a1 + 48) = v122;
              goto LABEL_167;
            }
          }
LABEL_112:
          v82 = *((_QWORD *)this + 3);
          v83 = *((_QWORD *)this + 1);
          if ((_DWORD)v7)
          {
            v84 = *(_QWORD *)this;
            v85 = *(char **)a3;
            v86 = v7;
            v87 = *((_DWORD *)this + 8);
            do
            {
              if (v82 >= v83)
              {
                LOBYTE(v88) = 0;
                *((_BYTE *)this + 36) = 1;
              }
              else
              {
                v88 = (*(_DWORD *)(v84 + 4 * v82) >> v87) & 1;
                *((_DWORD *)this + 8) = v87 + 1;
                if (v87 >= 31)
                {
                  v87 = 0;
                  *((_DWORD *)this + 8) = 0;
                  *((_QWORD *)this + 3) = ++v82;
                }
                else
                {
                  ++v87;
                }
              }
              v89 = *(_QWORD *)v85;
              v85 += 16;
              *(_BYTE *)(v89 + 157) = v88;
              --v86;
            }
            while (v86);
          }
          goto LABEL_120;
        }
LABEL_167:
        EliasGamma = 1;
      }
    }
LABEL_169:
    zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&v130);
    goto LABEL_170;
  }
  v40 = zilch::StringList::size((zilch::StringList *)v131);
  std::to_string(&v129, v40);
  v41 = std::string::insert(&v129, 0, "Unable to validate incident feed. Feed size: ");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v130.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  v43 = std::string::append(&v130, ". Expected value: ");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  v127.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v128, v24);
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v45 = &v128;
  else
    v45 = (std::string *)v128.__r_.__value_.__r.__words[0];
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(v128.__r_.__value_.__r.__words[2]);
  else
    v46 = v128.__r_.__value_.__l.__size_;
  v47 = std::string::append(&v127, (const std::string::value_type *)v45, v46);
  v48 = v47->__r_.__value_.__r.__words[0];
  v132.__r_.__value_.__r.__words[0] = v47->__r_.__value_.__l.__size_;
  *(std::string::size_type *)((char *)v132.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
  v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  v47->__r_.__value_.__l.__size_ = 0;
  v47->__r_.__value_.__r.__words[2] = 0;
  v47->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v50 = v132.__r_.__value_.__r.__words[0];
  *(_QWORD *)(a1 + 72) = v48;
  *(_QWORD *)(a1 + 80) = v50;
  *(_QWORD *)(a1 + 87) = *(std::string::size_type *)((char *)v132.__r_.__value_.__r.__words + 7);
  *(_BYTE *)(a1 + 95) = v49;
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v127.__r_.__value_.__l.__data_);
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
  if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v129.__r_.__value_.__l.__data_);
  *(_DWORD *)(a1 + 64) = 8;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 16);
  v52 = *(char **)a3;
  for (m = *(_QWORD *)(a3 + 8);
        (char *)m != v52;
  *(_QWORD *)(a3 + 8) = v52;
  EliasGamma = 4;
LABEL_170:
  zilch::StringList::~StringList((zilch::StringList *)v131);
  return EliasGamma;
}

void sub_18878102C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  uint64_t v45;

  if (a15 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v45 - 145) < 0)
    operator delete(*(void **)(v45 - 168));
  zilch::StringList::~StringList((zilch::StringList *)&a16);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a39);
  zilch::StringList::~StringList((zilch::StringList *)&a45);
  _Unwind_Resume(a1);
}

uint64_t zilch::TrafficDynamicTile::reportError(uint64_t a1, std::string *this)
{
  if (this)
    std::string::operator=(this, (const std::string *)(a1 + 72));
  return *(unsigned int *)(a1 + 64);
}

uint64_t zilch::TrafficDynamicTile::resetErrorState(uint64_t this)
{
  *(_DWORD *)(this + 64) = 0;
  if (*(char *)(this + 95) < 0)
  {
    **(_BYTE **)(this + 72) = 0;
    *(_QWORD *)(this + 80) = 0;
  }
  else
  {
    *(_BYTE *)(this + 72) = 0;
    *(_BYTE *)(this + 95) = 0;
  }
  return this;
}

void zilch::TrafficDynamicTile::Incident::~Incident(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void std::vector<zilch::TrafficDynamicTile::Flow>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<zilch::TrafficDynamicTile::Flow>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

uint64_t std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

unint64_t zilch::TrafficDynamicTile::spaceUsed(zilch::TrafficDynamicTile *this)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)*((_QWORD *)this + 5);
  v2 = (uint64_t *)*((_QWORD *)this + 6);
  v3 = ((char *)v2 - (char *)v1) >> 4;
  result = *((_QWORD *)this + 3) - *((_QWORD *)this + 2) + 184 * v3 + 104;
  if (v2 != v1)
  {
    if (v3 <= 1)
      v3 = 1;
    do
    {
      v5 = *v1;
      if (*(char *)(*v1 + 95) < 0)
        v6 = *(_QWORD *)(v5 + 80);
      else
        v6 = *(unsigned __int8 *)(*v1 + 95);
      if (*(char *)(v5 + 63) < 0)
        v7 = *(_QWORD *)(v5 + 48);
      else
        v7 = *(unsigned __int8 *)(v5 + 63);
      if (*(char *)(v5 + 119) < 0)
        v8 = *(_QWORD *)(v5 + 104);
      else
        v8 = *(unsigned __int8 *)(v5 + 119);
      result += v6 + v7 + v8;
      v1 += 2;
      --v3;
    }
    while (v3);
  }
  return result;
}

mgcl::iarray::Encoder *std::unique_ptr<mgcl::iarray::Encoder>::reset[abi:ne180100](mgcl::iarray::Encoder **a1, mgcl::iarray::Encoder *a2)
{
  mgcl::iarray::Encoder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    mgcl::iarray::Encoder::~Encoder(result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

mgcl::iarray::Decoder *std::unique_ptr<mgcl::iarray::Decoder>::reset[abi:ne180100](mgcl::iarray::Decoder **a1, mgcl::iarray::Decoder *a2)
{
  mgcl::iarray::Decoder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    mgcl::iarray::Decoder::~Decoder(result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

void std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::__split_buffer<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,false>(__int128 *a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 *v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  _BOOL4 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BOOL4 v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  if ((_QWORD *)a1 != a2)
  {
    v38 = v2;
    v39 = v3;
    v6 = (_QWORD *)(a1 + 16);
    if ((_QWORD *)(a1 + 16) != a2)
    {
      v7 = a1;
      do
      {
        v8 = v6;
        v9 = *(_QWORD *)(v7 + 16);
        v10 = *(std::__shared_weak_count **)(v7 + 24);
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = *(_QWORD *)v7;
        v14 = *(std::__shared_weak_count **)(v7 + 8);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          v17 = *(_DWORD *)(v9 + 64) < *(_DWORD *)(v13 + 64);
          do
            v18 = __ldaxr(v15);
          while (__stlxr(v18 - 1, v15));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        else
        {
          v17 = *(_DWORD *)(v9 + 64) < *(_DWORD *)(v13 + 64);
        }
        if (!v10)
          goto LABEL_19;
        v19 = (unint64_t *)&v10->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
          if (v17)
          {
LABEL_20:
            v37 = *(_OWORD *)(v7 + 16);
            *v8 = 0;
            v8[1] = 0;
            std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)v8, (__int128 *)v7);
            v21 = a1;
            if (v7 != a1)
            {
              while (1)
              {
                v22 = v37;
                if (*((_QWORD *)&v37 + 1))
                {
                  v23 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
                  do
                    v24 = __ldxr(v23);
                  while (__stxr(v24 + 1, v23));
                }
                v25 = *(_QWORD *)(v7 - 16);
                v27 = *(std::__shared_weak_count **)(v7 - 8);
                v26 = v7 - 16;
                if (v27)
                {
                  v28 = (unint64_t *)&v27->__shared_owners_;
                  do
                    v29 = __ldxr(v28);
                  while (__stxr(v29 + 1, v28));
                  v30 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
                  do
                    v31 = __ldaxr(v28);
                  while (__stlxr(v31 - 1, v28));
                  if (!v31)
                  {
                    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                    std::__shared_weak_count::__release_weak(v27);
                  }
                  if (!*((_QWORD *)&v22 + 1))
                  {
LABEL_37:
                    if (!v30)
                      goto LABEL_44;
                    goto LABEL_40;
                  }
                }
                else
                {
                  v30 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
                  if (!*((_QWORD *)&v22 + 1))
                    goto LABEL_37;
                }
                v32 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
                do
                  v33 = __ldaxr(v32);
                while (__stlxr(v33 - 1, v32));
                if (v33)
                  goto LABEL_37;
                (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
                if (!v30)
                {
LABEL_44:
                  v21 = v7;
                  break;
                }
LABEL_40:
                std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v7, (__int128 *)(v7 - 16));
                v7 -= 16;
                if (v26 == a1)
                {
                  v21 = a1;
                  break;
                }
              }
            }
            std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v21, &v37);
            v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
            if (*((_QWORD *)&v37 + 1))
            {
              v35 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
          }
        }
        else
        {
LABEL_19:
          if (v17)
            goto LABEL_20;
        }
        v6 = v8 + 2;
        v7 = (uint64_t)v8;
      }
      while (v8 + 2 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    v37 = v2;
    v38 = v3;
    v5 = a1;
    v6 = a1 + 16;
    while (1)
    {
      if (v6 == a2)
        return;
      v7 = v6;
      v8 = *(_QWORD *)(v5 + 16);
      v9 = *(std::__shared_weak_count **)(v5 + 24);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = *(_QWORD *)v5;
      v13 = *(std::__shared_weak_count **)(v5 + 8);
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v16 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v12 + 64);
        do
          v17 = __ldaxr(v14);
        while (__stlxr(v17 - 1, v14));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      else
      {
        v16 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v12 + 64);
      }
      if (!v9)
        goto LABEL_19;
      v18 = (unint64_t *)&v9->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (!v16)
          goto LABEL_45;
      }
      else
      {
LABEL_19:
        if (!v16)
          goto LABEL_45;
      }
      v36 = *(_OWORD *)v7;
      *(_QWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = 0;
      v20 = v7;
      do
      {
        while (1)
        {
          v21 = v20;
          v20 = v5;
          std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v21, (__int128 *)v5);
          v22 = v36;
          if (*((_QWORD *)&v36 + 1))
          {
            v23 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          v25 = *(_QWORD *)(v5 - 16);
          v26 = *(std::__shared_weak_count **)(v5 - 8);
          v5 -= 16;
          if (v26)
          {
            v27 = (unint64_t *)&v26->__shared_owners_;
            do
              v28 = __ldxr(v27);
            while (__stxr(v28 + 1, v27));
            v29 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
            do
              v30 = __ldaxr(v27);
            while (__stlxr(v30 - 1, v27));
            if (!v30)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          else
          {
            v29 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v25 + 64);
          }
          if (*((_QWORD *)&v22 + 1))
          {
            v31 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
            do
              v32 = __ldaxr(v31);
            while (__stlxr(v32 - 1, v31));
            if (!v32)
              break;
          }
          if (!v29)
            goto LABEL_39;
        }
        (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 16))(*((_QWORD *)&v22 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v22 + 1));
      }
      while (v29);
LABEL_39:
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v20, &v36);
      v33 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
      if (*((_QWORD *)&v36 + 1))
      {
        v34 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_45:
      v6 = v7 + 16;
      v5 = v7;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count **v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count **v13;
  unint64_t *v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  _BOOL4 v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _BOOL4 v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;

  v6 = *a2;
  v8 = (std::__shared_weak_count **)(a2 + 1);
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *a1;
  v13 = (std::__shared_weak_count **)(a1 + 1);
  v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v11 + 64);
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  else
  {
    v16 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v11 + 64);
  }
  if (v7)
  {
    v18 = (unint64_t *)&v7->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v20 = *a3;
  v21 = (std::__shared_weak_count *)a3[1];
  if (!v16)
  {
    if (v21)
    {
      v30 = (unint64_t *)&v21->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = *a2;
    v33 = (std::__shared_weak_count *)a2[1];
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
      v36 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v32 + 64);
      do
        v37 = __ldaxr(v34);
      while (__stlxr(v37 - 1, v34));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    else
    {
      v36 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v32 + 64);
    }
    if (!v21)
      goto LABEL_62;
    v52 = (unint64_t *)&v21->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
      if (v36)
      {
LABEL_63:
        v54 = *a2;
        *a2 = *a3;
        *a3 = v54;
        v55 = a2[1];
        a2[1] = a3[1];
        a3[1] = v55;
        v56 = *a2;
        v57 = (std::__shared_weak_count *)a2[1];
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        v60 = *a1;
        v61 = (std::__shared_weak_count *)a1[1];
        if (v61)
        {
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
          v64 = *(_DWORD *)(v56 + 64) < *(_DWORD *)(v60 + 64);
          do
            v65 = __ldaxr(v62);
          while (__stlxr(v65 - 1, v62));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        else
        {
          v64 = *(_DWORD *)(v56 + 64) < *(_DWORD *)(v60 + 64);
        }
        if (!v57)
          goto LABEL_88;
        v69 = (unint64_t *)&v57->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
          if (!v64)
            return 1;
        }
        else
        {
LABEL_88:
          if (!v64)
            return 1;
        }
        v71 = *a1;
        *a1 = *a2;
        *a2 = v71;
        result = 2;
        goto LABEL_90;
      }
    }
    else
    {
LABEL_62:
      if (v36)
        goto LABEL_63;
    }
    return 0;
  }
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *a2;
  v25 = (std::__shared_weak_count *)a2[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
    v28 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v24 + 64);
    do
      v29 = __ldaxr(v26);
    while (__stlxr(v29 - 1, v26));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v28 = *(_DWORD *)(v20 + 64) < *(_DWORD *)(v24 + 64);
  }
  if (v21)
  {
    v38 = (unint64_t *)&v21->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v40 = *a1;
  if (v28)
  {
    *a1 = *a3;
    *a3 = v40;
    result = 1;
LABEL_82:
    v8 = (std::__shared_weak_count **)(a3 + 1);
LABEL_90:
    v72 = *v13;
    *v13 = *v8;
    *v8 = v72;
    return result;
  }
  *a1 = *a2;
  *a2 = v40;
  v42 = (std::__shared_weak_count *)a1[1];
  a1[1] = a2[1];
  a2[1] = v42;
  v43 = *a3;
  v44 = (std::__shared_weak_count *)a3[1];
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v42 = *v8;
  }
  v47 = *a2;
  if (v42)
  {
    v48 = (unint64_t *)&v42->__shared_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v50 = *(_DWORD *)(v43 + 64) < *(_DWORD *)(v47 + 64);
    do
      v51 = __ldaxr(v48);
    while (__stlxr(v51 - 1, v48));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  else
  {
    v50 = *(_DWORD *)(v43 + 64) < *(_DWORD *)(v47 + 64);
  }
  if (!v44)
    goto LABEL_80;
  v66 = (unint64_t *)&v44->__shared_owners_;
  do
    v67 = __ldaxr(v66);
  while (__stlxr(v67 - 1, v66));
  if (!v67)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
    if (v50)
      goto LABEL_81;
  }
  else
  {
LABEL_80:
    if (v50)
    {
LABEL_81:
      v68 = *a2;
      *a2 = *a3;
      *a3 = v68;
      result = 2;
      v13 = v8;
      goto LABEL_82;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>(__int128 *a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 *v27;
  __int128 *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _BOOL4 v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  BOOL v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  __int128 v75;

  v2 = a2;
  v4 = *(_QWORD *)a1;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 1);
  *(_QWORD *)&v75 = *(_QWORD *)a1;
  *((_QWORD *)&v75 + 1) = v5;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *((_QWORD *)a2 - 2);
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *(_DWORD *)(v4 + 64) < *(_DWORD *)(v8 + 64);
    do
      v13 = __ldaxr(v10);
    while (__stlxr(v13 - 1, v10));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v12 = *(_DWORD *)(v4 + 64) < *(_DWORD *)(v8 + 64);
  }
  if (!v5)
    goto LABEL_16;
  v14 = (unint64_t *)&v5->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_16:
    if (v12)
      goto LABEL_17;
    goto LABEL_37;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v12)
  {
LABEL_37:
    v16 = a1 + 1;
    if (a1 + 1 >= v2)
      goto LABEL_59;
    v27 = a1;
    while (1)
    {
      v28 = v16;
      if (*((_QWORD *)&v75 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v31 = *(_QWORD *)v16;
      v32 = (std::__shared_weak_count *)*((_QWORD *)v27 + 3);
      if (v32)
      {
        v33 = (unint64_t *)&v32->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
        v35 = *(_DWORD *)(v75 + 64) >= *(_DWORD *)(v31 + 64);
        do
          v36 = __ldaxr(v33);
        while (__stlxr(v36 - 1, v33));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
        if (!*((_QWORD *)&v75 + 1))
          goto LABEL_55;
      }
      else
      {
        v35 = *(_DWORD *)(v75 + 64) >= *(_DWORD *)(v31 + 64);
        if (!*((_QWORD *)&v75 + 1))
          goto LABEL_55;
      }
      v37 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
        if (!v35)
          goto LABEL_59;
        goto LABEL_58;
      }
LABEL_55:
      if (!v35)
        goto LABEL_59;
LABEL_58:
      ++v16;
      v27 = v28;
      if (v28 + 1 >= v2)
        goto LABEL_59;
    }
  }
LABEL_17:
  v16 = a1;
  do
  {
    if (*((_QWORD *)&v75 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = *((_QWORD *)v16 + 2);
    v20 = (std::__shared_weak_count *)*((_QWORD *)v16 + 3);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v23 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v19 + 64);
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      v23 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v19 + 64);
    }
    if (*((_QWORD *)&v75 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
      }
    }
    ++v16;
  }
  while (!v23);
LABEL_59:
  if (v16 < v2)
  {
    do
    {
      if (*((_QWORD *)&v75 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      v41 = *((_QWORD *)v2 - 2);
      v42 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
        v45 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v41 + 64);
        do
          v46 = __ldaxr(v43);
        while (__stlxr(v46 - 1, v43));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      else
      {
        v45 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v41 + 64);
      }
      if (*((_QWORD *)&v75 + 1))
      {
        v47 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      --v2;
    }
    while (v45);
  }
  while (v16 < v2)
  {
    v49 = *(_QWORD *)v16;
    *(_QWORD *)v16 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v49;
    v50 = *((_QWORD *)v16 + 1);
    *((_QWORD *)v16 + 1) = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = v50;
    do
    {
      if (*((_QWORD *)&v75 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = *((_QWORD *)v16 + 2);
      v54 = (std::__shared_weak_count *)*((_QWORD *)v16 + 3);
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
        v57 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v53 + 64);
        do
          v58 = __ldaxr(v55);
        while (__stlxr(v58 - 1, v55));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      else
      {
        v57 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v53 + 64);
      }
      if (*((_QWORD *)&v75 + 1))
      {
        v59 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      ++v16;
    }
    while (!v57);
    do
    {
      if (*((_QWORD *)&v75 + 1))
      {
        v61 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      v63 = *((_QWORD *)v2 - 2);
      v64 = (std::__shared_weak_count *)*((_QWORD *)v2 - 1);
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        v67 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v63 + 64);
        do
          v68 = __ldaxr(v65);
        while (__stlxr(v68 - 1, v65));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      else
      {
        v67 = *(_DWORD *)(v75 + 64) < *(_DWORD *)(v63 + 64);
      }
      if (*((_QWORD *)&v75 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v75 + 1) + 16))(*((_QWORD *)&v75 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v75 + 1));
        }
      }
      --v2;
    }
    while (v67);
  }
  if (v16 - 1 != a1)
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)a1, v16 - 1);
  std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)(v16 - 1), &v75);
  v71 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v72 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  return v16;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,zilch::SortIncidentsByType &>(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 *v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _BOOL4 v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v65;

  v65 = *(_OWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a1;
  do
  {
    while (1)
    {
      v5 = (__int128 *)v4;
      v6 = *(_QWORD *)(v4 + 16);
      v7 = *(std::__shared_weak_count **)(v4 + 24);
      v4 += 16;
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      if (*((_QWORD *)&v65 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v12 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v65 + 64);
        do
          v13 = __ldaxr(v10);
        while (__stlxr(v13 - 1, v10));
        if (!v13)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
        }
      }
      else
      {
        v12 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v65 + 64);
      }
      if (v7)
      {
        v14 = (unint64_t *)&v7->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
          break;
      }
      if (!v12)
        goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  while (v12);
LABEL_20:
  if (v5 == (__int128 *)a1)
  {
    if (v4 < (unint64_t)a2)
    {
      do
      {
        v26 = *((_QWORD *)a2 - 2);
        v27 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        if (*((_QWORD *)&v65 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v32 = *(_DWORD *)(v26 + 64) >= *(_DWORD *)(v65 + 64);
          do
            v33 = __ldaxr(v30);
          while (__stlxr(v33 - 1, v30));
          if (!v33)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
          }
        }
        else
        {
          v32 = *(_DWORD *)(v26 + 64) >= *(_DWORD *)(v65 + 64);
        }
        if (v27)
        {
          v34 = (unint64_t *)&v27->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      while (v4 < (unint64_t)a2 && v32);
    }
  }
  else
  {
    do
    {
      while (1)
      {
        v16 = *((_QWORD *)a2 - 2);
        v17 = (std::__shared_weak_count *)*((_QWORD *)a2-- - 1);
        if (v17)
        {
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        if (*((_QWORD *)&v65 + 1))
        {
          v20 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          v22 = *(_DWORD *)(v16 + 64) < *(_DWORD *)(v65 + 64);
          do
            v23 = __ldaxr(v20);
          while (__stlxr(v23 - 1, v20));
          if (!v23)
          {
            (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
            std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
          }
        }
        else
        {
          v22 = *(_DWORD *)(v16 + 64) < *(_DWORD *)(v65 + 64);
        }
        if (v17)
        {
          v24 = (unint64_t *)&v17->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
            break;
        }
        if (v22)
          goto LABEL_61;
      }
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    while (!v22);
  }
LABEL_61:
  if (v4 < (unint64_t)a2)
  {
    v37 = (__int128 *)v4;
    v38 = a2;
    do
    {
      v39 = *(_QWORD *)v37;
      *(_QWORD *)v37 = *(_QWORD *)v38;
      *(_QWORD *)v38 = v39;
      v40 = *((_QWORD *)v37 + 1);
      *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
      *((_QWORD *)v38 + 1) = v40;
      do
      {
        while (1)
        {
          v5 = v37;
          v41 = *((_QWORD *)v37 + 2);
          v42 = (std::__shared_weak_count *)*((_QWORD *)v37++ + 3);
          if (v42)
          {
            v43 = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldxr(v43);
            while (__stxr(v44 + 1, v43));
          }
          if (*((_QWORD *)&v65 + 1))
          {
            v45 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
            v47 = *(_DWORD *)(v41 + 64) < *(_DWORD *)(v65 + 64);
            do
              v48 = __ldaxr(v45);
            while (__stlxr(v48 - 1, v45));
            if (!v48)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
            }
          }
          else
          {
            v47 = *(_DWORD *)(v41 + 64) < *(_DWORD *)(v65 + 64);
          }
          if (v42)
          {
            v49 = (unint64_t *)&v42->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
              break;
          }
          if (!v47)
            goto LABEL_84;
        }
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      while (v47);
      do
      {
        while (1)
        {
LABEL_84:
          v51 = *((_QWORD *)v38 - 2);
          v52 = (std::__shared_weak_count *)*((_QWORD *)v38-- - 1);
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          if (*((_QWORD *)&v65 + 1))
          {
            v55 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            v57 = *(_DWORD *)(v51 + 64) < *(_DWORD *)(v65 + 64);
            do
              v58 = __ldaxr(v55);
            while (__stlxr(v58 - 1, v55));
            if (!v58)
            {
              (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 16))(*((_QWORD *)&v65 + 1));
              std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v65 + 1));
            }
          }
          else
          {
            v57 = *(_DWORD *)(v51 + 64) < *(_DWORD *)(v65 + 64);
          }
          if (!v52)
            break;
          v59 = (unint64_t *)&v52->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (v60)
            break;
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
          if (v57)
            goto LABEL_100;
        }
      }
      while (!v57);
LABEL_100:
      ;
    }
    while (v37 < v38);
  }
  if (v5 != (__int128 *)a1)
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](a1, v5);
  std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)v5, &v65);
  v61 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
  if (*((_QWORD *)&v65 + 1))
  {
    v62 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return v5;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BOOL4 v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;

  v4 = (a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *((_QWORD *)a2 - 2);
      v7 = (std::__shared_weak_count *)*((_QWORD *)a2 - 1);
      if (v7)
      {
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *a1;
      v11 = (std::__shared_weak_count *)a1[1];
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
        v14 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v10 + 64);
        do
          v15 = __ldaxr(v12);
        while (__stlxr(v15 - 1, v12));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      else
      {
        v14 = *(_DWORD *)(v6 + 64) < *(_DWORD *)(v10 + 64);
      }
      if (v7)
      {
        v47 = (unint64_t *)&v7->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v14)
      {
        v49 = *a1;
        *a1 = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v49;
        v50 = a1[1];
        a1[1] = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v50;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, (_QWORD *)a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4, (uint64_t *)a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4, a1 + 6, (uint64_t *)a2 - 2);
      return 1;
    default:
      v16 = (uint64_t)(a1 + 4);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a1 + 2, a1 + 4);
      v17 = (char *)(a1 + 6);
      if (a1 + 6 == (uint64_t *)a2)
        return 1;
      v18 = 0;
      break;
  }
  while (1)
  {
    v19 = *(_QWORD *)v17;
    v20 = (std::__shared_weak_count *)*((_QWORD *)v17 + 1);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *(_QWORD *)v16;
    v24 = *(std::__shared_weak_count **)(v16 + 8);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = *(_DWORD *)(v19 + 64) < *(_DWORD *)(v23 + 64);
      do
        v28 = __ldaxr(v25);
      while (__stlxr(v28 - 1, v25));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    else
    {
      v27 = *(_DWORD *)(v19 + 64) < *(_DWORD *)(v23 + 64);
    }
    if (v20)
    {
      v29 = (unint64_t *)&v20->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
        break;
    }
    if (v27)
      goto LABEL_30;
LABEL_61:
    v16 = (uint64_t)v17;
    v17 += 16;
    if (v17 == a2)
      return 1;
  }
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (!v27)
    goto LABEL_61;
LABEL_30:
  v51 = *(_OWORD *)v17;
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)v17, (__int128 *)v16);
  v31 = (uint64_t)a1;
  if ((uint64_t *)v16 != a1)
  {
    while (1)
    {
      v32 = v51;
      if (*((_QWORD *)&v51 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      v35 = *(_QWORD *)(v16 - 16);
      v37 = *(std::__shared_weak_count **)(v16 - 8);
      v36 = (uint64_t *)(v16 - 16);
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v40 = *(_DWORD *)(v32 + 64) < *(_DWORD *)(v35 + 64);
        do
          v41 = __ldaxr(v38);
        while (__stlxr(v41 - 1, v38));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
        if (!*((_QWORD *)&v32 + 1))
        {
LABEL_47:
          if (!v40)
            goto LABEL_54;
          goto LABEL_50;
        }
      }
      else
      {
        v40 = *(_DWORD *)(v32 + 64) < *(_DWORD *)(v35 + 64);
        if (!*((_QWORD *)&v32 + 1))
          goto LABEL_47;
      }
      v42 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (v43)
        goto LABEL_47;
      (*(void (**)(_QWORD))(**((_QWORD **)&v32 + 1) + 16))(*((_QWORD *)&v32 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32 + 1));
      if (!v40)
      {
LABEL_54:
        v31 = v16;
        break;
      }
LABEL_50:
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v16, (__int128 *)(v16 - 16));
      v16 -= 16;
      if (v36 == a1)
      {
        v31 = (uint64_t)a1;
        break;
      }
    }
  }
  std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v31, &v51);
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (++v18 != 8)
    goto LABEL_61;
  return v17 + 16 == a2;
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _BOOL4 v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a2, a3);
  v8 = *a4;
  v9 = (std::__shared_weak_count *)a4[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v12 = *a3;
  v13 = (std::__shared_weak_count *)a3[1];
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    v16 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v12 + 64);
    do
      v17 = __ldaxr(v14);
    while (__stlxr(v17 - 1, v14));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    v16 = *(_DWORD *)(v8 + 64) < *(_DWORD *)(v12 + 64);
  }
  if (!v9)
    goto LABEL_16;
  v18 = (unint64_t *)&v9->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v16)
      return;
  }
  else
  {
LABEL_16:
    if (!v16)
      return;
  }
  v20 = *a3;
  *a3 = *a4;
  *a4 = v20;
  v21 = a3[1];
  a3[1] = a4[1];
  a4[1] = v21;
  v22 = *a3;
  v23 = (std::__shared_weak_count *)a3[1];
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = *a2;
  v27 = (std::__shared_weak_count *)a2[1];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v26 + 64);
    do
      v31 = __ldaxr(v28);
    while (__stlxr(v31 - 1, v28));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  else
  {
    v30 = *(_DWORD *)(v22 + 64) < *(_DWORD *)(v26 + 64);
  }
  if (!v23)
    goto LABEL_34;
  v32 = (unint64_t *)&v23->__shared_owners_;
  do
    v33 = __ldaxr(v32);
  while (__stlxr(v33 - 1, v32));
  if (!v33)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v30)
      return;
  }
  else
  {
LABEL_34:
    if (!v30)
      return;
  }
  v34 = *a2;
  *a2 = *a3;
  *a3 = v34;
  v35 = a2[1];
  a2[1] = a3[1];
  a3[1] = v35;
  v36 = *a2;
  v37 = (std::__shared_weak_count *)a2[1];
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *a1;
  v41 = (std::__shared_weak_count *)a1[1];
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    v44 = *(_DWORD *)(v36 + 64) < *(_DWORD *)(v40 + 64);
    do
      v45 = __ldaxr(v42);
    while (__stlxr(v45 - 1, v42));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  else
  {
    v44 = *(_DWORD *)(v36 + 64) < *(_DWORD *)(v40 + 64);
  }
  if (v37)
  {
    v46 = (unint64_t *)&v37->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v44)
  {
    v48 = *a1;
    *a1 = *a2;
    *a2 = v48;
    v49 = a1[1];
    a1[1] = a2[1];
    a2[1] = v49;
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL4 v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _BOOL4 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  _BOOL4 v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _BOOL4 v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a2, a3, a4);
  v10 = *a5;
  v11 = (std::__shared_weak_count *)a5[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = *a4;
  v15 = (std::__shared_weak_count *)a4[1];
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v14 + 64);
    do
      v19 = __ldaxr(v16);
    while (__stlxr(v19 - 1, v16));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v18 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v14 + 64);
  }
  if (!v11)
    goto LABEL_16;
  v20 = (unint64_t *)&v11->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v18)
      return;
  }
  else
  {
LABEL_16:
    if (!v18)
      return;
  }
  v22 = *a4;
  *a4 = *a5;
  *a5 = v22;
  v23 = a4[1];
  a4[1] = a5[1];
  a5[1] = v23;
  v24 = *a4;
  v25 = (std::__shared_weak_count *)a4[1];
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = *a3;
  v29 = (std::__shared_weak_count *)a3[1];
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v32 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v28 + 64);
    do
      v33 = __ldaxr(v30);
    while (__stlxr(v33 - 1, v30));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  else
  {
    v32 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v28 + 64);
  }
  if (!v25)
    goto LABEL_34;
  v34 = (unint64_t *)&v25->__shared_owners_;
  do
    v35 = __ldaxr(v34);
  while (__stlxr(v35 - 1, v34));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if (!v32)
      return;
  }
  else
  {
LABEL_34:
    if (!v32)
      return;
  }
  v36 = *a3;
  *a3 = *a4;
  *a4 = v36;
  v37 = a3[1];
  a3[1] = a4[1];
  a4[1] = v37;
  v38 = *a3;
  v39 = (std::__shared_weak_count *)a3[1];
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *a2;
  v43 = (std::__shared_weak_count *)a2[1];
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v46 = *(_DWORD *)(v38 + 64) < *(_DWORD *)(v42 + 64);
    do
      v47 = __ldaxr(v44);
    while (__stlxr(v47 - 1, v44));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  else
  {
    v46 = *(_DWORD *)(v38 + 64) < *(_DWORD *)(v42 + 64);
  }
  if (v39)
  {
    v48 = (unint64_t *)&v39->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  if (v46)
  {
    v50 = *a2;
    *a2 = *a3;
    *a3 = v50;
    v51 = a2[1];
    a2[1] = a3[1];
    a3[1] = v51;
    v52 = *a2;
    v53 = (std::__shared_weak_count *)a2[1];
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    v56 = *a1;
    v57 = (std::__shared_weak_count *)a1[1];
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v60 = *(_DWORD *)(v52 + 64) < *(_DWORD *)(v56 + 64);
      do
        v61 = __ldaxr(v58);
      while (__stlxr(v61 - 1, v58));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    else
    {
      v60 = *(_DWORD *)(v52 + 64) < *(_DWORD *)(v56 + 64);
    }
    if (v53)
    {
      v62 = (unint64_t *)&v53->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v60)
    {
      v64 = *a1;
      *a1 = *a2;
      *a2 = v64;
      v65 = a1[1];
      a1[1] = a2[1];
      a2[1] = v65;
    }
  }
}

uint64_t std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 4;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if ((uint64_t *)v6 != a3)
    {
      v14 = (uint64_t *)v6;
      while (1)
      {
        v15 = *v14;
        v16 = (std::__shared_weak_count *)v14[1];
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        v19 = *a1;
        v20 = (std::__shared_weak_count *)a1[1];
        if (v20)
        {
          v21 = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
          v23 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v19 + 64);
          do
            v24 = __ldaxr(v21);
          while (__stlxr(v24 - 1, v21));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        else
        {
          v23 = *(_DWORD *)(v15 + 64) < *(_DWORD *)(v19 + 64);
        }
        if (v16)
        {
          v25 = (unint64_t *)&v16->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
            break;
        }
        if (v23)
          goto LABEL_23;
LABEL_24:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = (uint64_t)a3;
          goto LABEL_28;
        }
      }
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
      if (!v23)
        goto LABEL_24;
LABEL_23:
      v27 = *v14;
      *v14 = *a1;
      *a1 = v27;
      v28 = v14[1];
      v14[1] = a1[1];
      a1[1] = v28;
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, a4, v9, a1);
      goto LABEL_24;
    }
LABEL_28:
    if (v8 >= 17)
    {
      v29 = (unint64_t)v8 >> 4;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>((uint64_t)a1, v6, a4, v29);
        v6 -= 16;
      }
      while (v29-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  BOOL v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BOOL4 v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _BOOL4 v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v6 = a3 - 2;
  if (a3 < 2)
    return;
  v68 = v4;
  v69 = v5;
  v7 = a4;
  v66 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) < ((uint64_t)a4 - a1) >> 4)
    return;
  v10 = ((uint64_t)a4 - a1) >> 3;
  v11 = v10 + 1;
  v12 = (uint64_t *)(a1 + 16 * (v10 + 1));
  v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    v14 = *v12;
    v15 = (std::__shared_weak_count *)v12[1];
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = v12[2];
    v19 = (std::__shared_weak_count *)v12[3];
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
      v22 = *(_DWORD *)(v14 + 64) < *(_DWORD *)(v18 + 64);
      do
        v23 = __ldaxr(v20);
      while (__stlxr(v23 - 1, v20));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    else
    {
      v22 = *(_DWORD *)(v14 + 64) < *(_DWORD *)(v18 + 64);
    }
    if (!v15)
      goto LABEL_19;
    v24 = (unint64_t *)&v15->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (v25)
    {
LABEL_19:
      if (!v22)
        goto LABEL_21;
      goto LABEL_20;
    }
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v22)
    {
LABEL_20:
      v12 += 2;
      v11 = v13;
    }
  }
LABEL_21:
  v26 = *v12;
  v27 = (std::__shared_weak_count *)v12[1];
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  v30 = *v7;
  v31 = (std::__shared_weak_count *)v7[1];
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
    v34 = *(_DWORD *)(v26 + 64) < *(_DWORD *)(v30 + 64);
    do
      v35 = __ldaxr(v32);
    while (__stlxr(v35 - 1, v32));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  else
  {
    v34 = *(_DWORD *)(v26 + 64) < *(_DWORD *)(v30 + 64);
  }
  if (v27)
  {
    v36 = (unint64_t *)&v27->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (!v34)
  {
    v67 = *(_OWORD *)v7;
    *v7 = 0;
    v7[1] = 0;
    while (1)
    {
      v38 = (uint64_t)v7;
      v7 = v12;
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v38, (__int128 *)v12);
      if (v66 < v11)
      {
LABEL_80:
        std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)v7, &v67);
        v63 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
        }
        return;
      }
      v39 = 2 * v11;
      v11 = (2 * v11) | 1;
      v12 = (uint64_t *)(a1 + 16 * v11);
      v40 = v39 + 2;
      if (v39 + 2 >= a3)
        goto LABEL_59;
      v41 = *v12;
      v42 = (std::__shared_weak_count *)v12[1];
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      v45 = v12[2];
      v46 = (std::__shared_weak_count *)v12[3];
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v49 = *(_DWORD *)(v41 + 64) < *(_DWORD *)(v45 + 64);
        do
          v50 = __ldaxr(v47);
        while (__stlxr(v50 - 1, v47));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
        if (v42)
        {
LABEL_54:
          v51 = (unint64_t *)&v42->__shared_owners_;
          do
            v52 = __ldaxr(v51);
          while (__stlxr(v52 - 1, v51));
          if (!v52)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
            if (!v49)
              goto LABEL_59;
LABEL_58:
            v12 += 2;
            v11 = v40;
            goto LABEL_59;
          }
        }
      }
      else
      {
        v49 = *(_DWORD *)(v41 + 64) < *(_DWORD *)(v45 + 64);
        if (v42)
          goto LABEL_54;
      }
      if (v49)
        goto LABEL_58;
LABEL_59:
      v53 = *v12;
      v54 = (std::__shared_weak_count *)v12[1];
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      if (*((_QWORD *)&v67 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v58 = __ldxr(v57);
        while (__stxr(v58 + 1, v57));
        v59 = *(_DWORD *)(v53 + 64) < *(_DWORD *)(v67 + 64);
        do
          v60 = __ldaxr(v57);
        while (__stlxr(v60 - 1, v57));
        if (!v60)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v67 + 1) + 16))(*((_QWORD *)&v67 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v67 + 1));
        }
      }
      else
      {
        v59 = *(_DWORD *)(v53 + 64) < *(_DWORD *)(v67 + 64);
      }
      if (!v54)
        goto LABEL_74;
      v61 = (unint64_t *)&v54->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
        if (v59)
          goto LABEL_80;
      }
      else
      {
LABEL_74:
        if (v59)
          goto LABEL_80;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v13;

  if (a4 >= 2)
  {
    v13 = *(_OWORD *)a1;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v7 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, a3, a4);
    v8 = v7;
    v9 = (__int128 *)(a2 - 16);
    if ((__int128 *)v7 == v9)
    {
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v7, &v13);
    }
    else
    {
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v7, v9);
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100]((uint64_t)v9, &v13);
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(a1, v8 + 16, a3, (v8 + 16 - a1) >> 4);
    }
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1887840F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<std::vector<zilch::GeoCoordinates> const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 16 * (v5 + 1);
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v9 + 2 >= a3)
      goto LABEL_23;
    v11 = *(_QWORD *)a1;
    v12 = *(std::__shared_weak_count **)(a1 + 8);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(std::__shared_weak_count **)(a1 + 24);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v15 + 64);
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      if (!v12)
      {
LABEL_21:
        if (!v19)
          goto LABEL_23;
LABEL_22:
        a1 += 16;
        v5 = v10;
        goto LABEL_23;
      }
    }
    else
    {
      v19 = *(_DWORD *)(v11 + 64) < *(_DWORD *)(v15 + 64);
      if (!v12)
        goto LABEL_21;
    }
    v21 = (unint64_t *)&v12->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (v22)
      goto LABEL_21;
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v19)
      goto LABEL_22;
LABEL_23:
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v8, (__int128 *)a1);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortIncidentsByType &,std::shared_ptr<zilch::TrafficDynamicTile::Incident> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v38 = v4;
    v39 = v5;
    v8 = v6 >> 1;
    v9 = a1 + 16 * (v6 >> 1);
    v10 = *(_QWORD *)v9;
    v11 = *(std::__shared_weak_count **)(v9 + 8);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v14 = *(_QWORD *)(a2 - 16);
    v16 = *(std::__shared_weak_count **)(a2 - 8);
    v15 = a2 - 16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v19 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v14 + 64);
      do
        v20 = __ldaxr(v17);
      while (__stlxr(v20 - 1, v17));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v10 + 64) < *(_DWORD *)(v14 + 64);
    }
    if (!v11)
      goto LABEL_17;
    v21 = (unint64_t *)&v11->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (!v19)
        return;
    }
    else
    {
LABEL_17:
      if (!v19)
        return;
    }
    v37 = *(_OWORD *)v15;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    while (1)
    {
      v23 = v15;
      v15 = v9;
      std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v23, (__int128 *)v9);
      if (!v8)
        break;
      v8 = (v8 - 1) >> 1;
      v9 = a1 + 16 * v8;
      v24 = *(_QWORD *)v9;
      v25 = *(std::__shared_weak_count **)(v9 + 8);
      if (v25)
      {
        v26 = (unint64_t *)&v25->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      if (*((_QWORD *)&v37 + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        v30 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v37 + 64);
        do
          v31 = __ldaxr(v28);
        while (__stlxr(v31 - 1, v28));
        if (!v31)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v37 + 1) + 16))(*((_QWORD *)&v37 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v37 + 1));
        }
      }
      else
      {
        v30 = *(_DWORD *)(v24 + 64) < *(_DWORD *)(v37 + 64);
      }
      if (!v25)
        goto LABEL_37;
      v32 = (unint64_t *)&v25->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (!v30)
          break;
      }
      else
      {
LABEL_37:
        if (!v30)
          break;
      }
    }
    std::shared_ptr<zilch::TrafficDynamicTile::Incident>::operator=[abi:ne180100](v15, &v37);
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2, _BYTE *a3)
{
  size_t v5;
  _BYTE *v6;
  _BYTE *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_BYTE *)a1[1];
    v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_18878452C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1887845A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,false>(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  BOOL v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t result, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  if ((_OWORD *)result != a2)
  {
    v2 = (_OWORD *)(result + 24);
    if ((_OWORD *)(result + 24) != a2)
    {
      v3 = 0;
      v4 = (_OWORD *)result;
      do
      {
        v5 = *((_DWORD *)v4 + 10);
        v6 = *((_DWORD *)v4 + 4);
        v4 = v2;
        if (v5 < v6)
        {
          v10 = *v2;
          v7 = v3;
          while (1)
          {
            v8 = result + v7;
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(result + v7);
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(result + v7 + 16);
            if (!v7)
              break;
            v7 -= 24;
            if (v5 >= *(_DWORD *)(v8 - 8))
            {
              v9 = result + v7 + 24;
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *(_OWORD *)v9 = v10;
          *(_DWORD *)(v9 + 16) = v5;
        }
        v2 = (_OWORD *)((char *)v4 + 24);
        v3 += 24;
      }
      while ((_OWORD *)((char *)v4 + 24) != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v3 = *((_DWORD *)a2 + 4);
  v4 = *((_DWORD *)a3 + 4);
  if (v3 < *((_DWORD *)a1 + 4))
  {
    if (v4 < v3)
    {
      v5 = *a1;
      v6 = *((_QWORD *)a1 + 2);
      v7 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v7;
      *((_DWORD *)a3 + 4) = v6;
      *a3 = v5;
      return 1;
    }
    v14 = *a1;
    v15 = *((_QWORD *)a1 + 2);
    v16 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v16;
    *((_DWORD *)a2 + 4) = v15;
    *a2 = v14;
    if (*((_DWORD *)a3 + 4) >= *((_DWORD *)a2 + 4))
      return 1;
    v17 = *a2;
    v18 = *((_QWORD *)a2 + 2);
    v19 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v19;
    *((_DWORD *)a3 + 4) = v18;
    *a3 = v17;
    return 2;
  }
  if (v4 < v3)
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 2);
    v10 = *((_DWORD *)a3 + 4);
    *a2 = *a3;
    *((_DWORD *)a2 + 4) = v10;
    *((_DWORD *)a3 + 4) = v9;
    *a3 = v8;
    if (*((_DWORD *)a2 + 4) >= *((_DWORD *)a1 + 4))
      return 1;
    v11 = *a1;
    v12 = *((_QWORD *)a1 + 2);
    v13 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v13;
    *((_DWORD *)a2 + 4) = v12;
    *a2 = v11;
    return 2;
  }
  return 0;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(uint64_t a1, __int128 *a2)
{
  int v2;
  uint64_t v3;
  __int128 *v4;
  int v5;
  __int128 *v6;
  int v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  int v11;
  int v12;
  __int128 *v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a1 + 16);
  if (v2 >= *((_DWORD *)a2 - 2))
  {
    v6 = (__int128 *)(a1 + 24);
    do
    {
      v4 = v6;
      if (v6 >= a2)
        break;
      v7 = *((_DWORD *)v6 + 4);
      v6 = (__int128 *)((char *)v6 + 24);
    }
    while (v2 >= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (__int128 *)(v3 + 24);
      v5 = *(_DWORD *)(v3 + 40);
      v3 += 24;
    }
    while (v2 >= v5);
  }
  if (v4 >= a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = (__int128 *)((char *)a2 - 24);
      v9 = *((_DWORD *)a2 - 2);
      a2 = (__int128 *)((char *)a2 - 24);
    }
    while (v2 < v9);
  }
  while (v4 < v8)
  {
    v18 = *((_QWORD *)v4 + 2);
    v17 = *v4;
    v10 = *v8;
    *((_DWORD *)v4 + 4) = *((_DWORD *)v8 + 4);
    *v4 = v10;
    *((_DWORD *)v8 + 4) = v18;
    *v8 = v17;
    do
    {
      v11 = *((_DWORD *)v4 + 10);
      v4 = (__int128 *)((char *)v4 + 24);
    }
    while (v2 >= v11);
    do
    {
      v12 = *((_DWORD *)v8 - 2);
      v8 = (__int128 *)((char *)v8 - 24);
    }
    while (v2 < v12);
  }
  v13 = (__int128 *)((char *)v4 - 24);
  if ((__int128 *)((char *)v4 - 24) != (__int128 *)a1)
  {
    v14 = *v13;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v4 - 2);
    *(_OWORD *)a1 = v14;
  }
  *v13 = v16;
  *((_DWORD *)v4 - 2) = v2;
  return v4;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficDynamicTile::Flow *,zilch::SortFlowsBySpeedClass &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  __int128 *v5;
  unint64_t v6;
  int v7;
  int v8;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  __int128 *v16;
  __int128 v17;
  __int128 v19;

  v2 = 0;
  v3 = *(_DWORD *)(a1 + 16);
  do
  {
    v4 = *(_DWORD *)(a1 + v2 + 40);
    v2 += 24;
  }
  while (v4 < v3);
  v5 = (__int128 *)(a1 + v2);
  if (v2 == 24)
  {
    while ((unint64_t)v5 < a2)
    {
      v6 = a2 - 24;
      v8 = *(_DWORD *)(a2 - 8);
      a2 -= 24;
      if (v8 < v3)
        goto LABEL_9;
    }
    v6 = a2;
  }
  else
  {
    do
    {
      v6 = a2 - 24;
      v7 = *(_DWORD *)(a2 - 8);
      a2 -= 24;
    }
    while (v7 >= v3);
  }
LABEL_9:
  v9 = v5;
  if ((unint64_t)v5 < v6)
  {
    v10 = v6;
    do
    {
      v11 = *v9;
      v12 = *((_QWORD *)v9 + 2);
      v13 = *(_DWORD *)(v10 + 16);
      *v9 = *(_OWORD *)v10;
      *((_DWORD *)v9 + 4) = v13;
      *(_DWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      do
      {
        v14 = *((_DWORD *)v9 + 10);
        v9 = (__int128 *)((char *)v9 + 24);
      }
      while (v14 < v3);
      do
      {
        v15 = *(_DWORD *)(v10 - 8);
        v10 -= 24;
      }
      while (v15 >= v3);
    }
    while ((unint64_t)v9 < v10);
  }
  v16 = (__int128 *)((char *)v9 - 24);
  if ((__int128 *)((char *)v9 - 24) != (__int128 *)a1)
  {
    v17 = *v16;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)v9 - 2);
    *(_OWORD *)a1 = v17;
  }
  *v16 = v19;
  *((_DWORD *)v9 - 2) = v3;
  return (uint64_t)v9 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(a1 + 16))
      {
        v6 = *(_OWORD *)a1;
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v8;
        *(_DWORD *)(a2 - 8) = v7;
        *(_OWORD *)(a2 - 24) = v6;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__n128 *)a1, (__n128 *)(a1 + 24), (__n128 *)(a1 + 48), (__n128 *)(a1 + 72), (__n128 *)(a2 - 24));
      return 1;
    default:
      v9 = a1 + 48;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 16);
    if (v13 < *(_DWORD *)(v9 + 16))
    {
      v17 = *(_OWORD *)v10;
      v14 = v11;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)(v15 + 72) = *(_OWORD *)(a1 + v14 + 48);
        *(_DWORD *)(v15 + 88) = *(_DWORD *)(a1 + v14 + 64);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (v13 >= *(_DWORD *)(v15 + 40))
        {
          v16 = a1 + v14 + 72;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_DWORD *)(v16 + 16) = v13;
      if (++v12 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 16) < *(_DWORD *)(a3 + 16))
  {
    result = *(__n128 *)a3;
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_DWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 16) = v10;
    *(_DWORD *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 16) < *(_DWORD *)(a2 + 16))
    {
      result = *(__n128 *)a2;
      v11 = *(_QWORD *)(a2 + 16);
      v12 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v12;
      *(_DWORD *)(a3 + 16) = v11;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 16) < *(_DWORD *)(a1 + 16))
      {
        result = *(__n128 *)a1;
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v14;
        *(_DWORD *)(a2 + 16) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;
  unint64_t v11;
  unsigned __int32 v12;
  unint64_t v13;
  unsigned __int32 v14;
  unint64_t v15;
  unsigned __int32 v16;
  unint64_t v17;
  unsigned __int32 v18;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if ((signed __int32)a5[1].n128_u32[0] < (signed __int32)a4[1].n128_u32[0])
  {
    result = *a4;
    v11 = a4[1].n128_u64[0];
    v12 = a5[1].n128_u32[0];
    *a4 = *a5;
    a4[1].n128_u32[0] = v12;
    a5[1].n128_u32[0] = v11;
    *a5 = result;
    if ((signed __int32)a4[1].n128_u32[0] < (signed __int32)a3[1].n128_u32[0])
    {
      result = *a3;
      v13 = a3[1].n128_u64[0];
      v14 = a4[1].n128_u32[0];
      *a3 = *a4;
      a3[1].n128_u32[0] = v14;
      a4[1].n128_u32[0] = v13;
      *a4 = result;
      if ((signed __int32)a3[1].n128_u32[0] < (signed __int32)a2[1].n128_u32[0])
      {
        result = *a2;
        v15 = a2[1].n128_u64[0];
        v16 = a3[1].n128_u32[0];
        *a2 = *a3;
        a2[1].n128_u32[0] = v16;
        a3[1].n128_u32[0] = v15;
        *a3 = result;
        if ((signed __int32)a2[1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0])
        {
          result = *a1;
          v17 = a1[1].n128_u64[0];
          v18 = a2[1].n128_u32[0];
          *a1 = *a2;
          a1[1].n128_u32[0] = v18;
          a2[1].n128_u32[0] = v17;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *,zilch::TrafficDynamicTile::Flow *>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t a4)
{
  __n128 *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 v15;
  uint64_t v16;
  unsigned __int32 v17;
  int64_t v18;
  uint64_t v19;
  __n128 *v20;
  uint64_t v21;
  __n128 *v22;
  uint64_t v23;
  uint64_t v24;
  signed __int32 v25;
  signed __int32 v26;
  __n128 v27;
  __n128 v28;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)((char *)a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if ((signed __int32)v14[1].n128_u32[0] < (signed __int32)a1[1].n128_u32[0])
        {
          v15 = *v14;
          v16 = v14[1].n128_i64[0];
          v17 = a1[1].n128_u32[0];
          *v14 = *a1;
          v14[1].n128_u32[0] = v17;
          a1[1].n128_u32[0] = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, a4, v9, a1);
        }
        v14 = (__n128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      do
      {
        v19 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v20 = a1;
        do
        {
          v21 = v19 + 1;
          v22 = (__n128 *)((char *)v20 + 24 * v19 + 24);
          v23 = (2 * v19) | 1;
          v24 = 2 * v19 + 2;
          if (v24 < v18)
          {
            v25 = v20[1].n128_i32[6 * v21];
            v26 = v22[2].n128_i32[2];
            v22 = (__n128 *)((char *)v22 + 24 * (v25 < v26));
            if (v25 < v26)
              v23 = v24;
          }
          v27 = *v22;
          v20[1].n128_u32[0] = v22[1].n128_u32[0];
          *v20 = v27;
          v20 = v22;
          v19 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v18 - 2) >> 1));
        v6 = (__n128 *)((char *)v6 - 24);
        if (v22 == v6)
        {
          v22[1].n128_u32[0] = v32;
          *v22 = v31;
        }
        else
        {
          v28 = *v6;
          v22[1].n128_u32[0] = v6[1].n128_u32[0];
          *v22 = v28;
          *v6 = v31;
          v6[1].n128_u32[0] = v32;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>((uint64_t)a1, (uint64_t)&v22[1].n128_i64[1], a4, 0xAAAAAAAAAAAAAAABLL * ((&v22[1].n128_i8[8] - (__int8 *)a1) >> 3));
        }
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  int64_t v4;
  uint64_t v5;
  __n128 *v6;
  int v7;
  __int32 v8;
  signed __int32 v9;
  __n128 *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int32 v15;
  __n128 result;
  __n128 v17;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v5 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v6 = (__n128 *)(a1 + 24 * v5);
      if (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2 < a3)
      {
        v7 = *(_DWORD *)(a1 + 24 * v5 + 16);
        v8 = v6[2].n128_i32[2];
        v6 = (__n128 *)((char *)v6 + 24 * (v7 < v8));
        if (v7 < v8)
          v5 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      }
      v9 = a4[1].n128_i32[0];
      if ((signed __int32)v6[1].n128_u32[0] >= v9)
      {
        v17 = *a4;
        do
        {
          v10 = a4;
          a4 = v6;
          v11 = *v6;
          v10[1].n128_u32[0] = v6[1].n128_u32[0];
          *v10 = v11;
          if (v4 < v5)
            break;
          v12 = (2 * v5) | 1;
          v6 = (__n128 *)(a1 + 24 * v12);
          v13 = 2 * v5 + 2;
          if (v13 < a3)
          {
            v14 = *(_DWORD *)(a1 + 24 * v12 + 16);
            v15 = v6[2].n128_i32[2];
            v6 = (__n128 *)((char *)v6 + 24 * (v14 < v15));
            if (v14 < v15)
              v12 = v13;
          }
          v5 = v12;
        }
        while ((signed __int32)v6[1].n128_u32[0] >= v9);
        result = v17;
        *a4 = v17;
        a4[1].n128_u32[0] = v9;
      }
    }
  }
  return result;
}

__n128 std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::SortFlowsBySpeedClass &,zilch::TrafficDynamicTile::Flow *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  signed __int32 v5;
  __n128 *v6;
  __n128 *v7;
  __n128 v8;
  __n128 result;
  __n128 v10;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = *(_DWORD *)(a2 - 8);
    if (*(_DWORD *)(a1 + 24 * v4 + 16) < v5)
    {
      v6 = (__n128 *)(a2 - 24);
      v10 = *(__n128 *)(a2 - 24);
      do
      {
        v7 = v6;
        v6 = (__n128 *)(a1 + 24 * v4);
        v8 = *v6;
        v7[1].n128_u32[0] = v6[1].n128_u32[0];
        *v7 = v8;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
      }
      while (*(_DWORD *)(a1 + 24 * v4 + 16) < v5);
      result = v10;
      *v6 = v10;
      v6[1].n128_u32[0] = v5;
    }
  }
  return result;
}

_QWORD *std::vector<zilch::TrafficDynamicTile::Flow>::__init_with_size[abi:ne180100]<zilch::TrafficDynamicTile::Flow*,zilch::TrafficDynamicTile::Flow*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_188785518(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

char *std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__init_with_size[abi:ne180100]<std::shared_ptr<zilch::TrafficDynamicTile::Incident>*,std::shared_ptr<zilch::TrafficDynamicTile::Incident>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_188785610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

_QWORD *std::vector<unsigned long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1887856BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<zilch::TrafficDynamicTile::Flow>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      do
      {
        *v7 = 0;
        v7[1] = 0x3F80000000000000;
        *((_DWORD *)v7 + 4) = 3;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v14[24 * a2];
    v16 = v14;
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0x3F80000000000000;
      *((_DWORD *)v16 + 4) = 3;
      v16 += 24;
    }
    while (v16 != v15);
    v17 = &v12[24 * v11];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_DWORD *)v14 - 2) = *((_DWORD *)v18 - 2);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
}

_QWORD *std::shared_ptr<zilch::TrafficDynamicTile::Incident>::shared_ptr[abi:ne180100]<zilch::TrafficDynamicTile::Incident,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E1BFB640;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887858F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<zilch::TrafficDynamicTile::Incident>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

void std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<zilch::TrafficDynamicTile::Incident>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<zilch::TrafficDynamicTile::Incident *,std::shared_ptr<zilch::TrafficDynamicTile::Incident>::__shared_ptr_default_delete<zilch::TrafficDynamicTile::Incident,zilch::TrafficDynamicTile::Incident>,std::allocator<zilch::TrafficDynamicTile::Incident>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<zilch::TrafficDynamicTile::Incident>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 119) < 0)
      operator delete(*(void **)(a2 + 96));
    if (*(char *)(a2 + 95) < 0)
      operator delete(*(void **)(a2 + 72));
    if (*(char *)(a2 + 63) < 0)
      operator delete(*(void **)(a2 + 40));
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
    JUMPOUT(0x18D76437CLL);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *zilch::TrafficSegmentList::TrafficSegmentList(zilch::TrafficSegmentList *this, unsigned int a2)
{
  return std::vector<long long>::vector(this, a2);
}

zilch::TrafficSegmentList *zilch::TrafficSegmentList::TrafficSegmentList(zilch::TrafficSegmentList *this, unsigned int a2, zilch::ReadBitstream *a3)
{
  zilch::TrafficSegmentList *v5;

  v5 = (zilch::TrafficSegmentList *)std::vector<long long>::vector(this, a2);
  zilch::TrafficSegmentList::decode(v5, a3);
  return this;
}

void sub_188785A80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::TrafficSegmentList::decode(zilch::TrafficSegmentList *this, zilch::ReadBitstream *a2)
{
  uint64_t v2;
  unint64_t VariableWidth;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t EliasGamma;
  unint64_t v13;
  int v14;
  int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  unsigned int v19;
  double v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  void *__p[3];

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v2)
    return 0;
  v33 = *(_QWORD *)this;
  VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  std::vector<zilch::TileKey>::vector(__p, VariableWidth);
  v6 = zilch::ReadBitstream::get(a2, 8);
  *(_DWORD *)__p[0] = v6;
  v7 = zilch::ReadBitstream::get(a2, 8);
  *((_DWORD *)__p[0] + 1) = v7;
  if (VariableWidth < 2)
  {
LABEL_19:
    v20 = log2((double)VariableWidth);
    v35 = 0;
    EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v35);
    if (!(_DWORD)EliasGamma)
    {
      if (--v35 <= 0x20)
      {
        if (((v2 - v33) & 0x7FFFFFFF8) != 0)
        {
          v21 = 0;
          v22 = vcvtpd_u64_f64(v20);
          v23 = ((unint64_t)(v2 - v33) >> 3);
          do
          {
            v24 = *((_QWORD *)a2 + 3);
            if (v24 >= *((_QWORD *)a2 + 1))
            {
              v26 = 0;
              *((_BYTE *)a2 + 36) = 1;
            }
            else
            {
              v25 = *((_DWORD *)a2 + 8);
              v26 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v24) >> v25) & 1;
              *((_DWORD *)a2 + 8) = v25 + 1;
              if (v25 >= 31)
              {
                *((_DWORD *)a2 + 8) = 0;
                *((_QWORD *)a2 + 3) = v24 + 1;
              }
            }
            if (VariableWidth < 2)
              v27 = 0;
            else
              v27 = zilch::ReadBitstream::get(a2, v22);
            v28 = (unsigned int *)((char *)__p[0] + 8 * v27);
            v29 = *v28;
            v30 = v28[1];
            v31 = (v30 << 32) | (v29 << 47) | zilch::ReadBitstream::getRice(a2, v35);
            if (v26)
              v31 = -v31;
            *(_QWORD *)(*(_QWORD *)this + 8 * v21++) = v31;
          }
          while (v23 != v21);
        }
        EliasGamma = 0;
      }
      else
      {
        EliasGamma = 1;
      }
    }
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = *((_QWORD *)a2 + 3);
      if (v9 >= *((_QWORD *)a2 + 1))
      {
        v11 = 0;
        *((_BYTE *)a2 + 36) = 1;
      }
      else
      {
        v10 = *((_DWORD *)a2 + 8);
        v11 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v9) >> v10) & 1;
        *((_DWORD *)a2 + 8) = v10 + 1;
        if (v10 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((_QWORD *)a2 + 3) = v9 + 1;
        }
      }
      v35 = 0;
      EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v35);
      if ((_DWORD)EliasGamma)
        break;
      --v35;
      v13 = *((_QWORD *)a2 + 3);
      if (v13 >= *((_QWORD *)a2 + 1))
      {
        v15 = 0;
        *((_BYTE *)a2 + 36) = 1;
      }
      else
      {
        v14 = *((_DWORD *)a2 + 8);
        v15 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v13) >> v14) & 1;
        *((_DWORD *)a2 + 8) = v14 + 1;
        if (v14 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((_QWORD *)a2 + 3) = v13 + 1;
        }
      }
      v34 = 0;
      EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, &v34);
      if ((_DWORD)EliasGamma)
        break;
      v16 = v35;
      --v34;
      v17 = (char *)__p[0] + v8;
      if (v11)
        v16 = -v35;
      v18 = v17[1];
      v17[2] = *v17 + v16;
      v19 = v34;
      if (v15)
        v19 = -v34;
      v17[3] = v18 + v19;
      v8 += 8;
      if (8 * VariableWidth - 8 == v8)
        goto LABEL_19;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return EliasGamma;
}

void sub_188785D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void zilch::TrafficSegmentList::~TrafficSegmentList(zilch::TrafficSegmentList *this)
{
  void *v2;

  v2 = *(void **)this;
  if (v2)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t zilch::TrafficSegmentList::operator[](_QWORD *a1, uint64_t a2)
{
  return *a1 + 8 * a2;
}

void zilch::TrafficSegmentList::encode(zilch::TrafficSegmentList *this, zilch::WriteBitstream *a2)
{
  uint64_t v2;
  unint64_t v5;
  const unsigned int *v6;
  uint32x2_t *v7;
  uint64_t v8;
  const unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint32x2_t *v16;
  _DWORD *v17;
  _DWORD *v18;
  uint32x2_t v19;
  uint32x2_t *v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  double v38;
  char *v39;
  const unsigned int *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  int v53;
  const unsigned int *v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void *__p;
  char *v61;
  char *v62;
  uint64_t *v63;
  _QWORD *v64[2];
  void *v65;
  char *v66;
  uint32x2_t *v67;
  uint64_t *v68;

  v2 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this != v2)
  {
    v5 = v2 - *(_QWORD *)this;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v6 = (const unsigned int *)(v5 >> 3);
    v7 = 0;
    v8 = v5 & 0x7FFFFFFF8;
    if ((v5 & 0x7FFFFFFF8) != 0)
    {
      v9 = 0;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)this + 8 * (_QWORD)v9);
        if (v10 < 0)
          v10 = -v10;
        v11 = v10 & 0x7FFF00000000 | ((unint64_t)v10 >> 47) & 0x7FFF;
        if (v7 >= v67)
        {
          v12 = ((char *)v7 - (_BYTE *)v65) >> 3;
          if ((unint64_t)(v12 + 1) >> 61)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          v13 = ((char *)v67 - (_BYTE *)v65) >> 2;
          if (v13 <= v12 + 1)
            v13 = v12 + 1;
          if ((unint64_t)((char *)v67 - (_BYTE *)v65) >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)&v67, v14);
          else
            v15 = 0;
          v16 = (uint32x2_t *)&v15[8 * v12];
          *v16 = (uint32x2_t)v11;
          v7 = v16 + 1;
          v18 = v65;
          v17 = v66;
          if (v66 != v65)
          {
            do
            {
              v19 = *(uint32x2_t *)(v17 - 2);
              v17 -= 2;
              v16[-1] = v19;
              --v16;
            }
            while (v17 != v18);
            v17 = v65;
          }
          v65 = v16;
          v66 = (char *)v7;
          v67 = (uint32x2_t *)&v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v7++ = (uint32x2_t)v11;
        }
        v66 = (char *)v7;
        v9 = (const unsigned int *)((char *)v9 + 1);
      }
      while (v9 != v6);
      v20 = (uint32x2_t *)v65;
    }
    else
    {
      v20 = 0;
    }
    v21 = 126 - 2 * __clz(v7 - v20);
    if (v7 == v20)
      v22 = 0;
    else
      v22 = v21;
    std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>(v20, v7, (uint64_t)&v63, v22, 1);
    v23 = (char *)std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<zilch::TileKey *>,std::__wrap_iter<zilch::TileKey *>,std::__equal_to &>(v65, v66);
    v58 = v8;
    if (v66 != v23)
      v66 = v23;
    v24 = v23 - (_BYTE *)v65;
    v25 = v24 >> 3;
    v64[0] = 0;
    v64[1] = 0;
    v63 = (uint64_t *)v64;
    if ((v24 >> 3))
    {
      v26 = 0;
      v27 = 0;
      v28 = v24 & 0x7FFFFFFF8;
      do
      {
        __p = (char *)v65 + v26;
        *((_DWORD *)std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(&v63, (unsigned int *)((char *)v65 + v26), (uint64_t)&unk_189C5BBB5, (_QWORD **)&__p)+ 9) = v27++;
        v26 += 8;
      }
      while (v28 != v26);
    }
    zilch::WriteBitstream::putVariableWidth(a2, v25);
    v30 = *(_DWORD *)v65;
    v29 = *((_DWORD *)v65 + 1);
    zilch::WriteBitstream::put(a2, *(_DWORD *)v65, 8);
    zilch::WriteBitstream::put(a2, v29, 8);
    if (v25 >= 2)
    {
      v31 = 0;
      v32 = 1 - v25;
      do
      {
        v33 = *(_DWORD *)((char *)v65 + v31 + 8);
        v34 = *(_DWORD *)((char *)v65 + v31 + 12);
        if (v34 >= v29)
          v35 = v34 - v29;
        else
          v35 = v29 - v34;
        zilch::WriteBitstream::put(a2, v33 < v30);
        v36 = v30 - v33;
        if (v33 >= v30)
          v36 = v33 - v30;
        zilch::WriteBitstream::putEliasGamma(a2, v36 + 1);
        zilch::WriteBitstream::put(a2, v34 < v29);
        zilch::WriteBitstream::putEliasGamma(a2, v35 + 1);
        v31 += 8;
        v30 = v33;
        v29 = v34;
      }
      while (!__CFADD__(v32++, 1));
    }
    v38 = log2((double)(unint64_t)((v66 - (_BYTE *)v65) >> 3));
    v39 = 0;
    v40 = 0;
    v41 = vcvtpd_u64_f64(v38);
    __p = 0;
    v61 = 0;
    v62 = 0;
    do
    {
      v42 = *(_QWORD *)(*(_QWORD *)this + 8 * (_QWORD)v40);
      if (v42 >= 0)
        v43 = *(_QWORD *)(*(_QWORD *)this + 8 * (_QWORD)v40);
      else
        v43 = -v42;
      if (v39 >= v62)
      {
        v45 = (char *)__p;
        v46 = (v39 - (_BYTE *)__p) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v48 = v62 - (_BYTE *)__p;
        if ((v62 - (_BYTE *)__p) >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v62, v49);
          v45 = (char *)__p;
          v39 = v61;
        }
        else
        {
          v50 = 0;
        }
        v51 = &v50[4 * v46];
        *(_DWORD *)v51 = v43;
        v44 = v51 + 4;
        while (v39 != v45)
        {
          v52 = *((_DWORD *)v39 - 1);
          v39 -= 4;
          *((_DWORD *)v51 - 1) = v52;
          v51 -= 4;
        }
        __p = v51;
        v61 = v44;
        v62 = &v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_DWORD *)v39 = v43;
        v44 = v39 + 4;
      }
      v61 = v44;
      v40 = (const unsigned int *)((char *)v40 + 1);
      v39 = v44;
    }
    while (v40 != v6);
    v53 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, v6);
    zilch::WriteBitstream::putEliasGamma(a2, v53 + 1);
    if (v58)
    {
      v54 = 0;
      do
      {
        v55 = *(_QWORD *)(*(_QWORD *)this + 8 * (_QWORD)v54);
        zilch::WriteBitstream::put(a2, (unint64_t)v55 >> 63);
        if ((unint64_t)(v66 - (_BYTE *)v65) >= 9)
        {
          if (v55 >= 0)
            v56 = v55;
          else
            v56 = -v55;
          v59 = v56 & 0x7FFF00000000 | (v56 >> 47) & 0x7FFF;
          v68 = &v59;
          v57 = std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(&v63, (unsigned int *)&v59, (uint64_t)&unk_189C5BBB5, &v68);
          zilch::WriteBitstream::put(a2, *((_DWORD *)v57 + 9), v41);
        }
        zilch::WriteBitstream::putRice(a2, *((_DWORD *)__p + (_QWORD)v54), v53);
        v54 = (const unsigned int *)((char *)v54 + 1);
      }
      while (v6 != v54);
    }
    if (__p)
    {
      v61 = (char *)__p;
      operator delete(__p);
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v63, v64[0]);
    if (v65)
    {
      v66 = (char *)v65;
      operator delete(v65);
    }
  }
}

void sub_1887862E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, _QWORD *a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a15, a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<long long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1887863A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint32x2_t *std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>(uint32x2_t *result, uint32x2_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint32x2_t *v8;
  uint32x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int *v15;
  uint32x2_t v16;
  unsigned __int32 v17;
  BOOL v18;
  BOOL v19;
  unsigned int *v20;
  char v21;
  BOOL v22;
  unsigned __int32 v23;
  _BOOL4 v24;
  uint32x2_t v25;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = a2[-1].u32[0];
        v18 = v23 == v9->i32[0];
        v24 = v23 < v9->i32[0];
        if (v18)
          v24 = a2[-1].i32[1] < (unsigned __int32)v9->i32[1];
        if (v24)
        {
          v25 = *v9;
          *v9 = a2[-1];
          a2[-1] = v25;
        }
        return result;
      case 3uLL:
        return (uint32x2_t *)std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)&v9[1], (unsigned int *)&a2[-1]);
      case 4uLL:
        return (uint32x2_t *)std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)&v9[1], (unsigned int *)&v9[2], (unsigned int *)&a2[-1]);
      case 5uLL:
        return (uint32x2_t *)std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)&v9[1], (unsigned int *)&v9[2], (unsigned int *)&v9[3], (unsigned int *)&a2[-1]);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint32x2_t *)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)a2);
          else
            return (uint32x2_t *)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (unsigned int *)&v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v9[v13 >> 1], (unsigned int *)v9, (unsigned int *)&a2[-1]);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, (unsigned int *)&v9[v13 >> 1], (unsigned int *)&a2[-1]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v9[1], v15 - 2, (unsigned int *)&a2[-2]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)&v9[2], (unsigned int *)&v9[v14 + 1], (unsigned int *)&a2[-3]);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(v15 - 2, v15, (unsigned int *)&v9[v14 + 1]);
            v16 = *v9;
            *v9 = *(uint32x2_t *)v15;
            *(uint32x2_t *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v17 = v9[-1].u32[0];
          v18 = v17 == v9->i32[0];
          v19 = v17 < v9->i32[0];
          if (v18)
            v19 = v9[-1].i32[1] < (unsigned __int32)v9->i32[1];
          if (!v19)
          {
            result = (uint32x2_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>((unsigned int *)v9, (unsigned int *)a2);
            v9 = result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = (unsigned int *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>((uint64_t *)v9, (uint64_t *)a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((unsigned int *)v9, v20);
          v9 = (uint32x2_t *)(v20 + 2);
          result = (uint32x2_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(v20 + 2, (unsigned int *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = (uint32x2_t *)std::__introsort<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = (uint32x2_t *)(v20 + 2);
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (uint32x2_t *)v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,zilch::TileKey *>(v9, a2, a2, a3);
        return result;
    }
  }
}

unsigned int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *result, unsigned int *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _BOOL4 v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int *v19;

  if (result != a2)
  {
    v2 = result + 2;
    if (result + 2 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v4[2];
        v6 = v4[3];
        v7 = *v4;
        v8 = v4[1];
        v4 = v2;
        v9 = v6 < v8;
        v10 = v5 == v7;
        v11 = v5 < v7;
        if (!v10)
          v9 = v11;
        if (v9)
        {
          v12 = *(_QWORD *)v4;
          v13 = HIDWORD(*(_QWORD *)v4);
          v14 = v3;
          while (1)
          {
            v15 = (char *)result + v14;
            *(_QWORD *)((char *)result + v14 + 8) = *(_QWORD *)((char *)result + v14);
            if (!v14)
              break;
            v16 = *((_DWORD *)v15 - 2);
            v17 = *((_DWORD *)v15 - 1) > v13;
            v10 = v16 == (_DWORD)v12;
            v18 = v16 > v12;
            if (!v10)
              v17 = v18;
            v14 -= 8;
            if (!v17)
            {
              v19 = (unsigned int *)((char *)result + v14 + 8);
              goto LABEL_14;
            }
          }
          v19 = result;
LABEL_14:
          *(_QWORD *)v19 = v12;
        }
        v2 = v4 + 2;
        v3 += 8;
      }
      while (v4 + 2 != a2);
    }
  }
  return result;
}

unsigned int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  BOOL v16;

  if (result != a2)
  {
    while (result + 2 != a2)
    {
      v2 = result[2];
      v3 = result[3];
      v4 = *result;
      v5 = result[1];
      result += 2;
      v6 = v3 < v5;
      v7 = v2 == v4;
      v8 = v2 < v4;
      if (!v7)
        v6 = v8;
      if (v6)
      {
        v9 = *(_QWORD *)result;
        v10 = HIDWORD(*(_QWORD *)result);
        v11 = result;
        do
        {
          v12 = v11;
          v13 = *((_QWORD *)v11 - 1);
          v11 -= 2;
          *(_QWORD *)v12 = v13;
          v14 = *(v12 - 4);
          v15 = *(v12 - 3) > v10;
          v7 = v14 == (_DWORD)v9;
          v16 = v14 > v9;
          if (!v7)
            v15 = v16;
        }
        while (v15);
        *(_QWORD *)v11 = v9;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = *a2 < *a1;
  if (*a2 == *a1)
    v5 = v4 < a1[1];
  v6 = a3[1] < v4;
  v7 = *a3 == v3;
  v8 = *a3 < v3;
  if (!v7)
    v6 = v8;
  if (v5)
  {
    v9 = *(_QWORD *)a1;
    if (v6)
    {
      *(_QWORD *)a1 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v9;
      return 1;
    }
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v9;
    v13 = *a3 < v9;
    if (*a3 == (_DWORD)v9)
      v13 = a3[1] < HIDWORD(v9);
    if (!v13)
      return 1;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v9;
    return 2;
  }
  if (v6)
  {
    v10 = *(_QWORD *)a2;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    *(_QWORD *)a3 = v10;
    v11 = *a2 < *a1;
    if (*a2 == *a1)
      v11 = a2[1] < a1[1];
    if (!v11)
      return 1;
    v12 = *(_QWORD *)a1;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v12;
    return 2;
  }
  return 0;
}

unsigned int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  unsigned int *v12;
  unsigned int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  BOOL v28;

  v2 = *(_QWORD *)a1;
  v3 = HIDWORD(*(_QWORD *)a1);
  v4 = *(a2 - 2);
  v5 = v4 == *(_QWORD *)a1;
  v6 = v4 > *(_QWORD *)a1;
  if (v5)
    v6 = *(a2 - 1) > v3;
  if (v6)
  {
    v7 = a1;
    do
    {
      v8 = v7[2];
      v9 = v7[3];
      v7 += 2;
      v10 = v9 > v3;
      v5 = v8 == (_DWORD)v2;
      v11 = v8 > v2;
      if (v5)
        v11 = v10;
    }
    while (!v11);
  }
  else
  {
    v12 = a1 + 2;
    do
    {
      v7 = v12;
      if (v12 >= a2)
        break;
      v13 = *v12;
      v14 = v7[1] > v3;
      v5 = v13 == (_DWORD)v2;
      v15 = v13 > v2;
      if (!v5)
        v14 = v15;
      v12 = v7 + 2;
    }
    while (!v14);
  }
  if (v7 < a2)
  {
    do
    {
      v16 = *(a2 - 2);
      v17 = *(a2 - 1);
      a2 -= 2;
      v18 = v17 > v3;
      v5 = v16 == (_DWORD)v2;
      v19 = v16 > v2;
      if (v5)
        v19 = v18;
    }
    while (v19);
  }
  while (v7 < a2)
  {
    v20 = *(_QWORD *)v7;
    *(_QWORD *)v7 = *(_QWORD *)a2;
    *(_QWORD *)a2 = v20;
    do
    {
      v21 = v7[2];
      v22 = v7[3];
      v7 += 2;
      v23 = v22 > v3;
      v5 = v21 == (_DWORD)v2;
      v24 = v21 > v2;
      if (v5)
        v24 = v23;
    }
    while (!v24);
    do
    {
      v25 = *(a2 - 2);
      v26 = *(a2 - 1);
      a2 -= 2;
      v27 = v26 > v3;
      v5 = v25 == (_DWORD)v2;
      v28 = v25 > v2;
      if (v5)
        v28 = v27;
    }
    while (v28);
  }
  if (v7 - 2 != a1)
    *(_QWORD *)a1 = *((_QWORD *)v7 - 1);
  *((_QWORD *)v7 - 1) = v2;
  return v7;
}

uint64_t *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKey *,zilch::TileKeyCompare &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  _BOOL4 v29;

  v2 = 0;
  v3 = *a1;
  v4 = HIDWORD(*a1);
  do
  {
    v5 = a1[v2 + 1];
    v6 = HIDWORD(a1[v2 + 1]) < v4;
    v7 = v5 == (_DWORD)v3;
    v8 = v5 < v3;
    if (!v7)
      v6 = v8;
    ++v2;
  }
  while (v6);
  v9 = &a1[v2];
  v10 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v15 = *((_DWORD *)a2 - 2);
      v16 = *((_DWORD *)a2-- - 1);
      v17 = v16 < v4;
      v7 = v15 == (_DWORD)v3;
      v18 = v15 < v3;
      if (v7)
        v18 = v17;
    }
    while (!v18);
  }
  else
  {
    do
    {
      v11 = *((_DWORD *)a2 - 2);
      v12 = *((_DWORD *)a2-- - 1);
      v13 = v12 < v4;
      v7 = v11 == (_DWORD)v3;
      v14 = v11 < v3;
      if (v7)
        v14 = v13;
    }
    while (!v14);
  }
  if (v9 < a2)
  {
    v19 = (unint64_t)v9;
    v20 = a2;
    do
    {
      v21 = *(_QWORD *)v19;
      *(_QWORD *)v19 = *v20;
      *v20 = v21;
      do
      {
        v22 = *(_DWORD *)(v19 + 8);
        v23 = *(_DWORD *)(v19 + 12);
        v19 += 8;
        v24 = v23 < v4;
        v7 = v22 == (_DWORD)v3;
        v25 = v22 < v3;
        if (v7)
          v25 = v24;
      }
      while (v25);
      do
      {
        v26 = *((_DWORD *)v20 - 2);
        v27 = *((_DWORD *)v20-- - 1);
        v28 = v27 < v4;
        v7 = v26 == (_DWORD)v3;
        v29 = v26 < v3;
        if (v7)
          v29 = v28;
      }
      while (!v29);
    }
    while (v19 < (unint64_t)v20);
    v10 = (uint64_t *)(v19 - 8);
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v3;
  return v10;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  BOOL v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  BOOL v20;
  BOOL v21;
  unsigned int *v22;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 2);
      v7 = v6 == *a1;
      v8 = v6 < *a1;
      if (v7)
        v8 = *(a2 - 1) < a1[1];
      if (v8)
      {
        v9 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *v11 < *v10;
    if (*v11 == *v10)
      v14 = v11[1] < v10[1];
    if (v14)
    {
      v15 = *(_QWORD *)v11;
      v16 = HIDWORD(*(_QWORD *)v11);
      v17 = v12;
      while (1)
      {
        v18 = (char *)a1 + v17;
        *(_QWORD *)((char *)a1 + v17 + 24) = *(_QWORD *)((char *)a1 + v17 + 16);
        if (v17 == -16)
          break;
        v19 = *((_DWORD *)v18 + 2);
        v20 = *((_DWORD *)v18 + 3) > v16;
        v7 = v19 == (_DWORD)v15;
        v21 = v19 > v15;
        if (!v7)
          v20 = v21;
        v17 -= 8;
        if (!v20)
        {
          v22 = (unsigned int *)((char *)a1 + v17 + 24);
          goto LABEL_18;
        }
      }
      v22 = a1;
LABEL_18:
      *(_QWORD *)v22 = v15;
      if (++v13 == 8)
        return v11 + 2 == a2;
    }
    v10 = v11;
    v12 += 8;
    v11 += 2;
    if (v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a2, a3);
  v9 = *a4 < *a3;
  if (*a4 == *a3)
    v9 = a4[1] < a3[1];
  if (v9)
  {
    v10 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v10;
    v11 = *a3 < *a2;
    if (*a3 == *a2)
      v11 = a3[1] < a2[1];
    if (v11)
    {
      v12 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v12;
      v13 = *a2 < *a1;
      if (*a2 == *a1)
        v13 = a2[1] < a1[1];
      if (v13)
      {
        v14 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t result;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(a1, a2, a3, a4);
  v11 = *a5 < *a4;
  if (*a5 == *a4)
    v11 = a5[1] < a4[1];
  if (v11)
  {
    v12 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v12;
    v13 = *a4 < *a3;
    if (*a4 == *a3)
      v13 = a4[1] < a3[1];
    if (v13)
    {
      v14 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v14;
      v15 = *a3 < *a2;
      if (*a3 == *a2)
        v15 = a3[1] < a2[1];
      if (v15)
      {
        v16 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v16;
        v17 = *a2 < *a1;
        if (*a2 == *a1)
          v17 = a2[1] < a1[1];
        if (v17)
        {
          v18 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
        }
      }
    }
  }
  return result;
}

uint32x2_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *,zilch::TileKey *>(uint32x2_t *a1, uint32x2_t *a2, uint32x2_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint32x2_t *v12;
  uint32x2_t *v13;
  uint32x2_t *v14;
  _BOOL4 v15;
  uint32x2_t v16;
  uint64_t v17;
  int32x2_t *v18;
  uint32x2_t v19;
  int32x2_t *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = v14->i32[0] < (unsigned __int32)a1->i32[0];
        if (v14->i32[0] == a1->i32[0])
          v15 = v14->i32[1] < (unsigned __int32)a1->i32[1];
        if (v15)
        {
          v16 = *v14;
          *v14 = *a1;
          *a1 = v16;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v17 = (unint64_t)v8 >> 3;
      v18 = (int32x2_t *)&a2[-1];
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((int32x2_t *)a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = (int32x2_t)v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = (int32x2_t)v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>((uint64_t)a1, (uint64_t)&v20[1], a4, ((char *)&v20[1] - (char *)a1) >> 3);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(uint64_t result, uint64_t a2, uint64_t a3, uint32x2_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint32x2_t *v8;
  uint64_t v9;
  uint32x2_t v10;
  uint32x2_t v11;
  unsigned __int32 v12;
  __int8 v13;
  BOOL v14;
  BOOL v15;
  uint32x2_t v16;
  unint64_t v17;
  uint32x2_t *v18;
  uint64_t v19;
  uint32x2_t v20;
  uint32x2_t v21;
  unsigned int v22;
  __int8 v23;
  _BOOL4 v24;
  _BOOL4 v25;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (uint32x2_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        v12 = v8->i32[0];
      }
      else
      {
        v10 = v8[1];
        v11 = vcgt_u32(v10, *v8);
        v12 = (unsigned __int32)*v8;
        v13 = v11.i8[4];
        if (v12 != v10.i32[0])
          v13 = v11.i8[0];
        if ((v13 & 1) != 0)
        {
          v12 = (unsigned __int32)v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v14 = v12 == a4->i32[0];
      v15 = v12 < a4->i32[0];
      if (v14)
        v15 = v8->i32[1] < (unsigned __int32)a4->i32[1];
      if (!v15)
      {
        v16 = *a4;
        v17 = HIDWORD(*(unint64_t *)a4);
        do
        {
          v18 = a4;
          a4 = v8;
          *v18 = *v8;
          if (v5 < v7)
            break;
          v19 = (2 * v7) | 1;
          v8 = (uint32x2_t *)(result + 8 * v19);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v22 = v8->i32[0];
            v7 = v19;
          }
          else
          {
            v20 = v8[1];
            v21 = vcgt_u32(v20, *v8);
            v22 = *v8;
            v23 = v21.i8[4];
            if (v22 != v20.i32[0])
              v23 = v21.i8[0];
            if ((v23 & 1) != 0)
            {
              v22 = v8[1];
              ++v8;
            }
            else
            {
              v7 = v19;
            }
          }
          v24 = v8->i32[1] < v17;
          v14 = v22 == v16.i32[0];
          v25 = v22 < v16.i32[0];
          if (!v14)
            v24 = v25;
        }
        while (!v24);
        *a4 = v16;
      }
    }
  }
  return result;
}

int32x2_t *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  int32x2_t v9;
  unsigned __int8 v10;
  uint32x2_t v11;
  __int8 v12;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3 + 1];
    v7 = (2 * v3) | 1;
    v8 = 2 * v3 + 2;
    if (v8 < a3)
    {
      v9 = v6[1];
      v10 = vceq_s32(*v6, v9).u8[0];
      v11 = vcgt_u32((uint32x2_t)v9, (uint32x2_t)*v6);
      if ((v10 & 1) != 0)
        v12 = v11.i8[4];
      else
        v12 = v11.i8[0];
      if ((v12 & 1) != 0)
      {
        ++v6;
        v7 = v8;
      }
    }
    *a1 = *v6;
    a1 = v6;
    v3 = v7;
  }
  while (v7 <= v5);
  return v6;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TileKeyCompare &,zilch::TileKey *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint32x2_t *v5;
  uint32x2_t *v6;
  int32x2_t v7;
  uint32x2_t v8;
  __int8 v9;
  uint32x2_t v10;
  unint64_t v11;
  uint32x2_t *v12;
  BOOL v13;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (uint32x2_t *)(result + 8 * v4);
    v7 = *(int32x2_t *)(a2 - 8);
    v6 = (uint32x2_t *)(a2 - 8);
    v8 = vcgt_u32((uint32x2_t)v7, *v5);
    v9 = (vceq_s32((int32x2_t)*v5, v7).u8[0] & 1) != 0 ? v8.i8[4] : v8.i8[0];
    if ((v9 & 1) != 0)
    {
      v10 = *v6;
      v11 = HIDWORD(*(unint64_t *)v6);
      do
      {
        v12 = v6;
        v6 = v5;
        *v12 = *v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (uint32x2_t *)(result + 8 * v4);
        v13 = v5->i32[0] < (unsigned __int32)v10.i32[0];
        if (v5->i32[0] == v10.i32[0])
          v13 = v5->i32[1] < v11;
      }
      while (v13);
      *v6 = v10;
    }
  }
  return result;
}

_DWORD *std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<zilch::TileKey *>,std::__wrap_iter<zilch::TileKey *>,std::__equal_to &>(_DWORD *a1, _DWORD *a2)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  _DWORD *i;

  result = a2;
  if (a1 != a2)
  {
    v4 = a1 - 2;
    do
    {
      if (v4 + 4 == a2)
        return a2;
      v6 = v4[2];
      v4 += 2;
      LODWORD(v5) = v6;
    }
    while (v6 != v4[2] || v4[1] != v4[3]);
    for (i = v4 + 4; i != a2; i += 2)
    {
      if ((_DWORD)v5 != *i || v4[1] != i[1])
      {
        v5 = *(_QWORD *)i;
        *((_QWORD *)v4 + 1) = *(_QWORD *)i;
        v4 += 2;
      }
    }
    return v4 + 2;
  }
  return result;
}

char *std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__emplace_unique_key_args<zilch::TileKey,std::piecewise_construct_t const&,std::tuple<zilch::TileKey const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__find_equal<zilch::TileKey>((uint64_t)a1, &v10, a2);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = **a4;
    *((_DWORD *)v7 + 9) = 0;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<zilch::TileKey,unsigned int>,std::__map_value_compare<zilch::TileKey,std::__value_type<zilch::TileKey,unsigned int>,zilch::TileKeyCompare,true>,std::allocator<std::__value_type<zilch::TileKey,unsigned int>>>::__find_equal<zilch::TileKey>(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 7);
        v10 = *((_DWORD *)v8 + 8);
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

_QWORD *std::vector<zilch::TileKey>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_188787488(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *zilch::TrafficSkeletonTile::TrafficSkeletonTile(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

zilch::TrafficSkeletonTile *zilch::TrafficSkeletonTile::TrafficSkeletonTile(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  zilch::TrafficSkeletonTile::decode(this, a2);
  return this;
}

void sub_1887874E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t zilch::TrafficSkeletonTile::decode(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  int v4;

  v4 = zilch::ReadBitstream::get(a2, 8);
  if (v4 == 2)
    return zilch::TrafficSkeletonTile::decode_v2(this, a2);
  if (v4 == 1)
    return zilch::TrafficSkeletonTile::decode_v1((__int128 **)this, a2);
  return 2;
}

void zilch::TrafficSkeletonTile::addRecord(void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0x666666666666666)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[40 * v11];
    v17 = &v15[40 * v14];
    v18 = *a2;
    v19 = a2[1];
    *((_QWORD *)v16 + 4) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v16 = v18;
    *((_OWORD *)v16 + 1) = v19;
    v10 = v16 + 40;
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 40);
        v23 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v16 - 24) = v23;
        *(_OWORD *)(v16 - 40) = v22;
        v16 -= 40;
        v20 -= 40;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v10;
    a1[2] = v17;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *a2;
    v9 = a2[1];
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
    *(_OWORD *)v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    v10 = (char *)(v7 + 40);
  }
  a1[1] = v10;
}

void zilch::TrafficSkeletonTile::addRecord(void **a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, int a6, float a7, float a8, float a9, float a10)
{
  __int128 v10;
  uint64_t v11;
  int v12;
  float v13;
  float v14;
  int v15;

  *(_QWORD *)&v10 = __PAIR64__(a3, a2);
  *((_QWORD *)&v10 + 1) = __PAIR64__(LODWORD(a8), LODWORD(a7));
  v11 = a4;
  v12 = a5;
  v13 = a9;
  v14 = a10;
  v15 = a6;
  zilch::TrafficSkeletonTile::addRecord(a1, &v10);
}

unint64_t zilch::TrafficSkeletonTile::size(zilch::TrafficSkeletonTile *this)
{
  return 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
}

uint64_t zilch::TrafficSkeletonTile::operator[](_QWORD *a1, uint64_t a2)
{
  return *a1 + 40 * a2;
}

void zilch::TrafficSkeletonTile::encode(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2, unsigned int a3, unsigned int a4)
{
  zilch::WriteBitstream::put(a2, a3, 8);
  if (a3 == 2)
  {
    zilch::TrafficSkeletonTile::encode_v2(this, a2, a4);
  }
  else if (a3 == 1)
  {
    zilch::TrafficSkeletonTile::encode_v1(this, a2);
  }
}

void zilch::TrafficSkeletonTile::encode_v1(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2)
{
  unsigned int v4;
  __n128 v5;
  uint64_t v6;
  __int128 *v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  int v11;
  unsigned int i;
  int *v13;
  int *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  std::vector<unsigned int>::size_type v21;
  int v22;
  uint64_t v23;
  zilch::WriteBitstream *v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  zilch::WriteBitstream *begin;
  std::vector<unsigned int>::pointer v30;
  uint64_t v31;
  float *v32;
  std::vector<unsigned int>::pointer v33;
  float v34;
  int v35;
  int v36;
  uint64_t j;
  zilch::WriteBitstream *v38;
  unint64_t v39;
  _QWORD *v40;
  std::vector<unsigned int>::pointer v41;
  float *v42;
  float v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  int v48;
  int v49;
  unint64_t k;
  void *__p;
  std::vector<unsigned int> v52;
  std::vector<unsigned int> v53;
  std::vector<unsigned int> v54;
  std::vector<unsigned int> v55;
  BOOL (*v56)(uint64_t, uint64_t);
  BOOL (*v57)(uint64_t, uint64_t);

  v4 = -858993459 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  zilch::WriteBitstream::putVariableWidth(a2, v4);
  v6 = *(_QWORD *)this;
  v7 = (__int128 *)*((_QWORD *)this + 1);
  v8 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v7 - *(_QWORD *)this) >> 3));
  v9 = v7 == *(__int128 **)this;
  v56 = sub_188788618;
  if (v9)
    v10 = 0;
  else
    v10 = v8;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(v6, v7, (uint64_t (**)(__int128 *, __int128 *))&v56, v10, 1, v5);
  if (!v4)
  {
    v21 = 0;
    std::vector<unsigned long long>::vector(&v56, 0);
    v24 = (zilch::WriteBitstream *)v56;
    goto LABEL_24;
  }
  v11 = 0;
  for (i = 0; i < v4; i += v17)
  {
    if (i + 1 >= v4)
    {
      v17 = 1;
      if (i)
        goto LABEL_12;
    }
    else
    {
      v13 = (int *)(*(_QWORD *)this + 40 * i);
      v16 = *v13;
      v14 = v13 + 10;
      v15 = v16;
      v17 = 1;
      while (1)
      {
        v18 = *v14;
        v14 += 10;
        if (v18 != v15)
          break;
        if (v4 - i == ++v17)
        {
          v17 = v4 - i;
          break;
        }
      }
      if (i)
      {
LABEL_12:
        v19 = i;
        zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(_QWORD *)this + 40 * i) - v11);
        goto LABEL_15;
      }
    }
    zilch::WriteBitstream::putVariableWidth(a2, **(_DWORD **)this);
    v19 = 0;
LABEL_15:
    zilch::WriteBitstream::putEliasGamma(a2, v17);
    v11 = *(_DWORD *)(*(_QWORD *)this + 40 * v19);
  }
  v20 = 0;
  v21 = v4;
  do
  {
    v22 = *(_DWORD *)(*(_QWORD *)this + v20 + 4);
    zilch::WriteBitstream::put(a2, v22 == 0);
    if (v22)
      zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(_QWORD *)this + v20 + 4));
    v20 += 40;
  }
  while (40 * v4 != v20);
  std::vector<unsigned long long>::vector(&v56, v4);
  v23 = 0;
  v24 = (zilch::WriteBitstream *)v56;
  v25 = (uint64_t *)(*(_QWORD *)this + 16);
  do
  {
    v26 = *v25;
    v25 += 5;
    *(_QWORD *)((char *)v24 + v23) = v26;
    v23 += 8;
  }
  while (8 * v4 != v23);
LABEL_24:
  v27 = zilch::WriteBitstream::computeOptimalRiceBits64(v24, (const unint64_t *)(((char *)v57 - (char *)v24) >> 3));
  zilch::WriteBitstream::putEliasGamma(a2, v27 + 1);
  if (v4)
  {
    v28 = 0;
    do
    {
      zilch::WriteBitstream::putRice64(a2, *(_QWORD *)((char *)v56 + v28), v27);
      v28 += 8;
    }
    while (8 * v4 != v28);
  }
  std::vector<unsigned int>::vector(&v55, v21);
  std::vector<unsigned int>::vector(&v54, v21);
  begin = (zilch::WriteBitstream *)v55.__begin_;
  if (v4)
  {
    v30 = v54.__begin_;
    v31 = v4;
    v32 = (float *)(*(_QWORD *)this + 8);
    v33 = v55.__begin_;
    do
    {
      v34 = *v32;
      v32 += 10;
      *v33++ = v34;
      *v30++ = vcvts_n_u32_f32(v34 - (float)v34, 0x1FuLL);
      --v31;
    }
    while (v31);
  }
  v35 = zilch::WriteBitstream::computeOptimalRiceBits(begin, (const unsigned int *)v21);
  v36 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v54.__begin_, (const unsigned int *)v21);
  zilch::WriteBitstream::putEliasGamma(a2, v35 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v36 + 1);
  if (v4)
  {
    for (j = 0; j != v4; ++j)
    {
      zilch::WriteBitstream::putRice(a2, v55.__begin_[j], v35);
      zilch::WriteBitstream::putRice(a2, v54.__begin_[j], v36);
    }
  }
  std::vector<unsigned int>::vector(&v53, v21);
  std::vector<unsigned int>::vector(&v52, v21);
  std::vector<BOOL>::vector(&__p, v21);
  v38 = (zilch::WriteBitstream *)v53.__begin_;
  if (v4)
  {
    v39 = 0;
    v40 = __p;
    v41 = v52.__begin_;
    v42 = (float *)(*(_QWORD *)this + 12);
    do
    {
      v43 = *v42;
      v44 = v39 >> 6;
      v45 = 1 << v39;
      if (*v42 >= 0.0)
        v46 = v40[v44] & ~v45;
      else
        v46 = v40[v44] | v45;
      v40[v44] = v46;
      v47 = fabsf(v43);
      *((_DWORD *)v38 + v39) = v47;
      v41[v39++] = vcvts_n_u32_f32(v47 - (float)v47, 0x1FuLL);
      v42 += 10;
    }
    while (v4 != v39);
  }
  v48 = zilch::WriteBitstream::computeOptimalRiceBits(v38, (const unsigned int *)v21);
  v49 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)v52.__begin_, (const unsigned int *)v21);
  zilch::WriteBitstream::putEliasGamma(a2, v48 + 1);
  zilch::WriteBitstream::putEliasGamma(a2, v49 + 1);
  if (v4)
  {
    for (k = 0; k != v4; zilch::WriteBitstream::putRice(a2, v52.__begin_[k++], v49))
    {
      zilch::WriteBitstream::put(a2, (*(_QWORD *)((char *)__p + ((k >> 3) & 0x1FFFFFFFFFFFFFF8)) >> k) & 1);
      zilch::WriteBitstream::putRice(a2, v53.__begin_[k], v48);
    }
  }
  if (__p)
    operator delete(__p);
  if (v52.__begin_)
  {
    v52.__end_ = v52.__begin_;
    operator delete(v52.__begin_);
  }
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (v54.__begin_)
  {
    v54.__end_ = v54.__begin_;
    operator delete(v54.__begin_);
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
}

void sub_188787C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;
  void *v24;

  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  if (a18)
    operator delete(a18);
  if (a21)
    operator delete(a21);
  v24 = *(void **)(v22 - 88);
  if (v24)
  {
    *(_QWORD *)(v22 - 80) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

void zilch::TrafficSkeletonTile::encode_v2(zilch::TrafficSkeletonTile *this, zilch::WriteBitstream *a2, unsigned int a3)
{
  unsigned int v6;
  __n128 v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  unsigned int i;
  int *v15;
  int *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  int v48;
  int *v49;
  zilch::WriteBitstream *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  int *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int *v74;
  int v75;
  char v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  zilch::WriteBitstream *v86;
  int *v87;
  int *v88;
  void *__p;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t (*v92[3])(__int128 *, __int128 *);

  v6 = -858993459 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  zilch::WriteBitstream::putVariableWidth(a2, v6);
  v8 = *(_QWORD *)this;
  v9 = (__int128 *)*((_QWORD *)this + 1);
  v10 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v9 - *(_QWORD *)this) >> 3));
  v11 = v9 == *(__int128 **)this;
  v92[0] = (uint64_t (*)(__int128 *, __int128 *))sub_188788618;
  if (v11)
    v12 = 0;
  else
    v12 = v10;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(v8, v9, v92, v12, 1, v7);
  if (!v6)
  {
LABEL_19:
    zilch::WriteBitstream::put(a2, 1u);
    goto LABEL_20;
  }
  v13 = 0;
  for (i = 0; i < v6; i += v19)
  {
    if (i + 1 >= v6)
    {
      v19 = 1;
      if (i)
        goto LABEL_12;
    }
    else
    {
      v15 = (int *)(*(_QWORD *)this + 40 * i);
      v18 = *v15;
      v16 = v15 + 10;
      v17 = v18;
      v19 = 1;
      while (1)
      {
        v20 = *v16;
        v16 += 10;
        if (v20 != v17)
          break;
        if (v6 - i == ++v19)
        {
          v19 = v6 - i;
          break;
        }
      }
      if (i)
      {
LABEL_12:
        v21 = i;
        zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(_QWORD *)this + 40 * i) - v13);
        goto LABEL_15;
      }
    }
    zilch::WriteBitstream::putVariableWidth(a2, **(_DWORD **)this);
    v21 = 0;
LABEL_15:
    zilch::WriteBitstream::putEliasGamma(a2, v19);
    v13 = *(_DWORD *)(*(_QWORD *)this + 40 * v21);
  }
  v22 = (int *)(*(_QWORD *)this + 4);
  v23 = v6;
  while (1)
  {
    v24 = *v22;
    v22 += 10;
    if (v24)
      break;
    if (!--v23)
      goto LABEL_19;
  }
  zilch::WriteBitstream::put(a2, 0);
  v67 = 0;
  do
  {
    v68 = *(_DWORD *)(*(_QWORD *)this + v67 + 4);
    zilch::WriteBitstream::put(a2, v68 == 0);
    if (v68)
      zilch::WriteBitstream::putEliasGamma(a2, *(_DWORD *)(*(_QWORD *)this + v67 + 4));
    v67 += 40;
  }
  while (40 * v6 != v67);
LABEL_20:
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v92, v6);
  if (v6)
  {
    v25 = 0;
    v26 = 16;
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)this + v26);
      *(_QWORD *)zilch::TrafficSegmentList::operator[](v92, v25++) = v27;
      v26 += 40;
    }
    while (v6 != v25);
  }
  v85 = a3;
  zilch::TrafficSegmentList::encode((zilch::TrafficSegmentList *)v92, a2);
  v28 = 0;
  v29 = 0;
  __p = 0;
  v90 = 0;
  v91 = 0;
  v30 = v6;
  do
  {
    v31 = *(float *)(*(_QWORD *)this + 40 * v29 + 8);
    if (v28 >= v91)
    {
      v33 = (unsigned int *)__p;
      v34 = ((char *)v28 - (_BYTE *)__p) >> 2;
      v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v36 = (char *)v91 - (_BYTE *)__p;
      if (((char *)v91 - (_BYTE *)__p) >> 1 > v35)
        v35 = v36 >> 1;
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v35;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v91, v37);
        v33 = (unsigned int *)__p;
        v28 = v90;
      }
      else
      {
        v38 = 0;
      }
      v39 = (unsigned int *)&v38[4 * v34];
      *v39 = v31;
      v32 = v39 + 1;
      while (v28 != v33)
      {
        v40 = *--v28;
        *--v39 = v40;
      }
      __p = v39;
      v90 = v32;
      v91 = (unsigned int *)&v38[4 * v37];
      if (v33)
        operator delete(v33);
    }
    else
    {
      *v28 = v31;
      v32 = v28 + 1;
    }
    v90 = v32;
    ++v29;
    v28 = v32;
  }
  while (v29 != v6);
  v41 = zilch::WriteBitstream::computeOptimalRiceBits((zilch::WriteBitstream *)__p, (const unsigned int *)v6);
  zilch::WriteBitstream::putEliasGamma(a2, v41 + 1);
  v42 = 0;
  v43 = 4 * v6;
  do
  {
    zilch::WriteBitstream::putRice(a2, *(_DWORD *)((char *)__p + v42), v41);
    v42 += 4;
  }
  while (v43 != v42);
  v44 = 0;
  do
  {
    zilch::WriteBitstream::put(a2, vcvtd_n_u64_f64((float)(*(float *)(*(_QWORD *)this + v44 + 8) - floorf(*(float *)(*(_QWORD *)this + v44 + 8))), 8uLL), 8);
    v44 += 40;
  }
  while (40 * v6 != v44);
  v45 = 0;
  v46 = 0;
  v86 = 0;
  v87 = 0;
  v88 = 0;
  do
  {
    v47 = (int)*(float *)(*(_QWORD *)this + 40 * v46 + 12);
    if (v47 >= 0)
      v48 = (int)*(float *)(*(_QWORD *)this + 40 * v46 + 12);
    else
      v48 = -v47;
    if (v45 >= v88)
    {
      v50 = v86;
      v51 = ((char *)v45 - (char *)v86) >> 2;
      v52 = v51 + 1;
      if ((unint64_t)(v51 + 1) >> 62)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v53 = (char *)v88 - (char *)v86;
      if (((char *)v88 - (char *)v86) >> 1 > v52)
        v52 = v53 >> 1;
      if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFFCLL)
        v54 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v54 = v52;
      if (v54)
      {
        v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v88, v54);
        v50 = v86;
        v45 = v87;
      }
      else
      {
        v55 = 0;
      }
      v56 = (int *)&v55[4 * v51];
      *v56 = v48;
      v49 = v56 + 1;
      while (v45 != (int *)v50)
      {
        v57 = *--v45;
        *--v56 = v57;
      }
      v86 = (zilch::WriteBitstream *)v56;
      v88 = (int *)&v55[4 * v54];
      if (v50)
        operator delete(v50);
    }
    else
    {
      *v45 = v48;
      v49 = v45 + 1;
    }
    v87 = v49;
    ++v46;
    v45 = v49;
  }
  while (v46 != v6);
  v58 = zilch::WriteBitstream::computeOptimalRiceBits(v86, (const unsigned int *)v6);
  zilch::WriteBitstream::putEliasGamma(a2, v58 + 1);
  if (v6)
  {
    v59 = 0;
    v60 = 12;
    do
    {
      zilch::WriteBitstream::put(a2, *(float *)(*(_QWORD *)this + v60) < 0.0);
      zilch::WriteBitstream::putRice(a2, *(_DWORD *)((char *)v86 + v59), v58);
      zilch::WriteBitstream::put(a2, vcvtd_n_u64_f64((float)(fabsf(*(float *)(*(_QWORD *)this + v60)) - (float)*(unsigned int *)((char *)v86 + v59)), 8uLL), 8);
      v59 += 4;
      v60 += 40;
    }
    while (v43 != v59);
    if (v6 == 1)
    {
      v61 = v85;
    }
    else
    {
      v62 = *(_DWORD *)(*(_QWORD *)this + 24);
      v61 = v85;
      if (*(_DWORD *)(*(_QWORD *)this + 64) == v62)
      {
        v63 = (int *)(*(_QWORD *)this + 104);
        v64 = 2;
        do
        {
          v65 = v64;
          if (v6 == v64)
            break;
          v66 = *v63;
          v63 += 10;
          ++v64;
        }
        while (v66 == v62);
        v6 = v65 >= v6;
      }
      else
      {
        v6 = 0;
      }
    }
    zilch::WriteBitstream::put(a2, v6);
    if ((v6 & 1) != 0)
    {
      zilch::WriteBitstream::put(a2, *(_DWORD *)(*(_QWORD *)this + 24) == 0);
    }
    else
    {
      v69 = 0;
      do
      {
        zilch::WriteBitstream::put(a2, *(_DWORD *)(*(_QWORD *)this + v69 + 24) == 0);
        v69 += 40;
      }
      while (40 * v30 != v69);
    }
    v70 = 0;
    do
    {
      if (*(float *)(*(_QWORD *)this + v70 + 28) >= 0.0039062)
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putBoundedFloat(a2, *(float *)(*(_QWORD *)this + v70 + 28), 0.0, 1.0, 8);
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v70 += 40;
    }
    while (40 * v30 != v70);
    v71 = 0;
    do
    {
      if (*(float *)(*(_QWORD *)this + v71 + 32) <= 0.99609)
      {
        zilch::WriteBitstream::put(a2, 1u);
        zilch::WriteBitstream::putBoundedFloat(a2, *(float *)(*(_QWORD *)this + v71 + 32), 0.0, 1.0, 8);
      }
      else
      {
        zilch::WriteBitstream::put(a2, 0);
      }
      v71 += 40;
    }
    while (40 * v30 != v71);
    zilch::WriteBitstream::put(a2, v61, 32);
    v72 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    if (!v72)
    {
      if (!v61)
        goto LABEL_111;
      goto LABEL_110;
    }
    v73 = v72 / 40;
    if (v73 <= 1)
      v73 = 1;
    v74 = (int *)(*(_QWORD *)this + 36);
    LOBYTE(v75) = 1;
    v76 = 1;
    LOBYTE(v77) = 1;
    do
    {
      v78 = *v74;
      v74 += 10;
      v77 = (v78 == 3) & v77;
      v76 &= v78 == 4;
      v75 = ((v78 - 3) < 2) & v75;
      --v73;
    }
    while (v73);
    if (v61)
    {
      if ((v76 & 1) == 0)
      {
        zilch::WriteBitstream::put(a2, 0);
        if (!v77)
        {
          zilch::WriteBitstream::put(a2, 0);
          if (v75)
          {
            zilch::WriteBitstream::put(a2, 1u);
            v79 = *(_QWORD *)this;
            if (*((_QWORD *)this + 1) != *(_QWORD *)this)
            {
              v80 = 0;
              v81 = 36;
              do
              {
                zilch::WriteBitstream::put(a2, *(_DWORD *)(v79 + v81) == 3);
                ++v80;
                v79 = *(_QWORD *)this;
                v81 += 40;
              }
              while (v80 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
            }
          }
          else
          {
            zilch::WriteBitstream::put(a2, 0);
            v82 = *(_QWORD *)this;
            if (*((_QWORD *)this + 1) != *(_QWORD *)this)
            {
              v83 = 0;
              v84 = 36;
              do
              {
                zilch::WriteBitstream::put(a2, *(_DWORD *)(v82 + v84), 3);
                ++v83;
                v82 = *(_QWORD *)this;
                v84 += 40;
              }
              while (v83 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
            }
          }
          goto LABEL_111;
        }
      }
LABEL_110:
      zilch::WriteBitstream::put(a2, 1u);
    }
  }
LABEL_111:
  if (v86)
    operator delete(v86);
  if (__p)
  {
    v90 = (unsigned int *)__p;
    operator delete(__p);
  }
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v92);
}

void sub_188788544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)&a16);
  _Unwind_Resume(a1);
}

void std::sort[abi:ne180100]<std::__wrap_iter<zilch::TrafficSkeletonTile::Record *>,BOOL (*)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(uint64_t a1, __int128 *a2, uint64_t (*a3)(__int128 *, __int128 *), __n128 a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(__int128 *, __int128 *);

  v4 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a2 - a1) >> 3));
  v6 = a3;
  if (a2 == (__int128 *)a1)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(a1, a2, &v6, v5, 1, a4);
}

BOOL sub_188788618(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  float v5;
  float v6;
  float v7;
  float v8;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 < v4)
    return 1;
  if (v3 > v4)
    return 0;
  v5 = *(float *)(a1 + 12);
  v6 = *(float *)(a2 + 12);
  if (v5 < 0.0 && v6 > 0.0)
    return 1;
  if (v5 > 0.0 && v6 < 0.0)
    return 0;
  v7 = *(float *)(a1 + 8);
  v8 = *(float *)(a2 + 8);
  if (v5 >= 0.0)
    return v7 < v8;
  else
    return v7 > v8;
}

uint64_t zilch::TrafficSkeletonTile::decode_v1(__int128 **this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  float *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  v5 = VariableWidth;
  std::vector<zilch::TrafficSkeletonTile::Record>::resize((uint64_t)this, VariableWidth);
  if (VariableWidth)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (v7)
      {
        v28 = 0;
        result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
        if ((_DWORD)result)
          return result;
        v6 += v28;
      }
      else
      {
        v6 = zilch::ReadBitstream::getVariableWidth(a2);
      }
      v28 = 0;
      result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
      if ((_DWORD)result)
        return result;
      LODWORD(v9) = v28 + v7;
      if (v7 < v28 + v7)
      {
        v10 = v7;
        v11 = (_DWORD *)*this + 10 * v7;
        do
        {
          *v11 = v6;
          v11 += 10;
          ++v10;
          v9 = v28 + v7;
        }
        while (v10 < v9);
      }
      v7 = v9;
    }
    while (v9 < v5);
    if ((_DWORD)v5)
    {
      v12 = 0;
      while (1)
      {
        v13 = *((_QWORD *)a2 + 3);
        if (v13 >= *((_QWORD *)a2 + 1))
          break;
        v14 = *((_DWORD *)a2 + 8);
        v15 = (1 << v14) & *(_DWORD *)(*(_QWORD *)a2 + 4 * v13);
        *((_DWORD *)a2 + 8) = v14 + 1;
        if (v14 >= 31)
        {
          *((_DWORD *)a2 + 8) = 0;
          *((_QWORD *)a2 + 3) = v13 + 1;
        }
        if (!v15)
          goto LABEL_20;
        *(_DWORD *)((char *)*this + v12 + 4) = 0;
LABEL_22:
        v12 += 40;
        if (40 * v5 == v12)
          goto LABEL_23;
      }
      *((_BYTE *)a2 + 36) = 1;
LABEL_20:
      v28 = 0;
      result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
      if ((_DWORD)result)
        return result;
      *(_DWORD *)((char *)*this + v12 + 4) = v28;
      goto LABEL_22;
    }
  }
LABEL_23:
  v28 = 0;
  result = zilch::ReadBitstream::getEliasGamma(a2, &v28);
  if (!(_DWORD)result)
  {
    --v28;
    if ((_DWORD)v5)
    {
      v16 = 0;
      do
      {
        *(_QWORD *)((char *)*this + v16 + 16) = zilch::ReadBitstream::getRice64(a2, v28);
        v16 += 40;
      }
      while (40 * v5 != v16);
    }
    v27 = 0;
    result = zilch::ReadBitstream::getEliasGamma(a2, &v27);
    if (!(_DWORD)result)
    {
      if (--v27 > 0x20)
        return 1;
      v26 = 0;
      result = zilch::ReadBitstream::getEliasGamma(a2, &v26);
      if (!(_DWORD)result)
      {
        if (--v26 > 0x20)
          return 1;
        if ((_DWORD)v5)
        {
          v17 = 0;
          do
          {
            *(float *)((char *)*this + v17 + 8) = (float)zilch::ReadBitstream::getRice(a2, v27);
            *(float *)((char *)*this + v17 + 8) = *(float *)((char *)*this + v17 + 8)
                                                + (float)((float)zilch::ReadBitstream::getRice(a2, v26)
                                                        * 4.6566e-10);
            v17 += 40;
          }
          while (40 * v5 != v17);
        }
        v25 = 0;
        result = zilch::ReadBitstream::getEliasGamma(a2, &v25);
        if (!(_DWORD)result)
        {
          v24 = 0;
          --v25;
          result = zilch::ReadBitstream::getEliasGamma(a2, &v24);
          if (!(_DWORD)result)
          {
            --v24;
            if ((_DWORD)v5)
            {
              v19 = 0;
              v20 = 40 * v5;
              do
              {
                v21 = zilch::ReadBitstream::get(a2);
                *(float *)((char *)*this + v19 + 12) = (float)zilch::ReadBitstream::getRice(a2, v25);
                v18.n128_f32[0] = (float)zilch::ReadBitstream::getRice(a2, v24) * 4.6566e-10;
                v22 = (uint64_t)*this;
                v23 = (float *)((char *)*this + v19);
                v18.n128_f32[0] = v23[3] + v18.n128_f32[0];
                if (v21)
                  v18.n128_f32[0] = -v18.n128_f32[0];
                v23[3] = v18.n128_f32[0];
                v19 += 40;
              }
              while (v20 != v19);
            }
            else
            {
              v22 = (uint64_t)*this;
            }
            std::sort[abi:ne180100]<std::__wrap_iter<zilch::TrafficSkeletonTile::Record *>,BOOL (*)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(v22, this[1], (uint64_t (*)(__int128 *, __int128 *))sub_188788618, v18);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t zilch::TrafficSkeletonTile::decode_v2(zilch::TrafficSkeletonTile *this, zilch::ReadBitstream *a2)
{
  unsigned int VariableWidth;
  unsigned int v5;
  int v6;
  uint64_t EliasGamma;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  float v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  float BoundedFloat;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  float v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  uint64_t v53;
  unint64_t v54;
  _DWORD *v55;
  uint64_t v57;
  unint64_t v58;
  _DWORD *v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72[6];

  VariableWidth = zilch::ReadBitstream::getVariableWidth(a2);
  std::vector<zilch::TrafficSkeletonTile::Record>::resize((uint64_t)this, VariableWidth);
  if (!VariableWidth)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if (v5)
    {
      v72[0] = 0;
      EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
      if ((_DWORD)EliasGamma)
        return EliasGamma;
      v6 += v72[0];
    }
    else
    {
      v6 = zilch::ReadBitstream::getVariableWidth(a2);
    }
    v72[0] = 0;
    EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
    if ((_DWORD)EliasGamma)
      return EliasGamma;
    LODWORD(v8) = v72[0] + v5;
    if (v5 < v72[0] + v5)
    {
      v9 = v5;
      v10 = (_DWORD *)(*(_QWORD *)this + 40 * v5);
      do
      {
        *v10 = v6;
        v10 += 10;
        ++v9;
        v8 = v72[0] + v5;
      }
      while (v9 < v8);
    }
    v5 = v8;
  }
  while (v8 < VariableWidth);
  v11 = *((_QWORD *)a2 + 3);
  if (v11 >= *((_QWORD *)a2 + 1))
  {
    LOBYTE(v13) = 0;
    *((_BYTE *)a2 + 36) = 1;
  }
  else
  {
    v12 = *((_DWORD *)a2 + 8);
    v13 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v11) >> v12) & 1;
    *((_DWORD *)a2 + 8) = v12 + 1;
    if (v12 >= 31)
    {
      *((_DWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 3) = v11 + 1;
    }
  }
  v15 = 0;
  if (VariableWidth <= 1)
    v16 = 1;
  else
    v16 = VariableWidth;
  do
  {
    if ((v13 & 1) != 0)
    {
LABEL_25:
      *(_DWORD *)(*(_QWORD *)this + v15 + 4) = 0;
      goto LABEL_29;
    }
    v17 = *((_QWORD *)a2 + 3);
    if (v17 >= *((_QWORD *)a2 + 1))
    {
      *((_BYTE *)a2 + 36) = 1;
    }
    else
    {
      v18 = *((_DWORD *)a2 + 8);
      v19 = (1 << v18) & *(_DWORD *)(*(_QWORD *)a2 + 4 * v17);
      *((_DWORD *)a2 + 8) = v18 + 1;
      if (v18 >= 31)
      {
        *((_DWORD *)a2 + 8) = 0;
        *((_QWORD *)a2 + 3) = v17 + 1;
      }
      if (v19)
        goto LABEL_25;
    }
    v72[0] = 0;
    EliasGamma = zilch::ReadBitstream::getEliasGamma(a2, v72);
    if ((_DWORD)EliasGamma)
      return EliasGamma;
    *(_DWORD *)(*(_QWORD *)this + v15 + 4) = v72[0];
LABEL_29:
    v15 += 40;
  }
  while (8 * (v16 + 4 * v16) != v15);
  zilch::TrafficSegmentList::TrafficSegmentList((zilch::TrafficSegmentList *)v72, VariableWidth, a2);
  v20 = 0;
  v21 = 16;
  do
  {
    *(_QWORD *)(*(_QWORD *)this + v21) = *(_QWORD *)zilch::TrafficSegmentList::operator[](v72, v20++);
    v21 += 40;
  }
  while (v16 != v20);
  v71 = 0;
  v14 = zilch::ReadBitstream::getEliasGamma(a2, &v71);
  if (!(_DWORD)v14)
  {
    if (--v71 > 0x20)
    {
      v14 = 1;
      goto LABEL_95;
    }
    v22 = 0;
    do
    {
      *(float *)(*(_QWORD *)this + v22 + 8) = (float)zilch::ReadBitstream::getRice(a2, v71);
      v22 += 40;
    }
    while (40 * v16 != v22);
    v23 = 0;
    do
    {
      *(float *)(*(_QWORD *)this + v23 + 8) = (float)((float)zilch::ReadBitstream::get(a2, 8) * 0.0039062)
                                            + *(float *)(*(_QWORD *)this + v23 + 8);
      v23 += 40;
    }
    while (40 * v16 != v23);
    v70 = 0;
    v14 = zilch::ReadBitstream::getEliasGamma(a2, &v70);
    if (!(_DWORD)v14)
    {
      --v70;
      v14 = 1;
      if (v70 <= 0x20)
      {
        v24 = 0;
        do
        {
          v25 = *((_QWORD *)a2 + 3);
          if (v25 >= *((_QWORD *)a2 + 1))
          {
            v27 = 0;
            *((_BYTE *)a2 + 36) = 1;
          }
          else
          {
            v26 = *((_DWORD *)a2 + 8);
            v27 = (*(_DWORD *)(*(_QWORD *)a2 + 4 * v25) >> v26) & 1;
            *((_DWORD *)a2 + 8) = v26 + 1;
            if (v26 >= 31)
            {
              *((_DWORD *)a2 + 8) = 0;
              *((_QWORD *)a2 + 3) = v25 + 1;
            }
          }
          *(float *)(*(_QWORD *)this + v24 + 12) = (float)zilch::ReadBitstream::getRice(a2, v70);
          v28 = zilch::ReadBitstream::get(a2, 8);
          v29 = *(_QWORD *)this + v24;
          v30 = (float)((float)v28 * 0.0039062) + *(float *)(v29 + 12);
          if (v27)
            v30 = -v30;
          *(float *)(v29 + 12) = v30;
          v24 += 40;
        }
        while (40 * v16 != v24);
        if ((zilch::ReadBitstream::get(a2) & 1) != 0)
        {
          v31 = zilch::ReadBitstream::get(a2);
          v32 = 0;
          v33 = *(_QWORD *)this;
          do
          {
            *(_DWORD *)(v33 + v32 + 24) = v31 ^ 1;
            v32 += 40;
          }
          while (40 * v16 != v32);
        }
        else
        {
          v34 = 0;
          v33 = *(_QWORD *)this;
          v35 = *((_QWORD *)a2 + 3);
          v37 = *(_QWORD *)a2;
          v36 = *((_QWORD *)a2 + 1);
          v38 = *((_DWORD *)a2 + 8);
          do
          {
            if (v35 >= v36)
            {
              v39 = 0;
              *((_BYTE *)a2 + 36) = 1;
            }
            else
            {
              v39 = (*(_DWORD *)(v37 + 4 * v35) >> v38) & 1;
              *((_DWORD *)a2 + 8) = v38 + 1;
              if (v38 >= 31)
              {
                v38 = 0;
                *((_DWORD *)a2 + 8) = 0;
                *((_QWORD *)a2 + 3) = ++v35;
              }
              else
              {
                ++v38;
              }
            }
            *(_DWORD *)(v33 + v34 + 24) = v39 ^ 1;
            v34 += 40;
          }
          while (40 * v16 != v34);
        }
        v40 = 0;
        while (2)
        {
          v41 = *((_QWORD *)a2 + 3);
          if (v41 >= *((_QWORD *)a2 + 1))
          {
            *((_BYTE *)a2 + 36) = 1;
            goto LABEL_67;
          }
          v42 = *((_DWORD *)a2 + 8);
          v43 = (1 << v42) & *(_DWORD *)(*(_QWORD *)a2 + 4 * v41);
          *((_DWORD *)a2 + 8) = v42 + 1;
          if (v42 < 31)
          {
            if (!v43)
              goto LABEL_67;
          }
          else
          {
            *((_DWORD *)a2 + 8) = 0;
            *((_QWORD *)a2 + 3) = v41 + 1;
            if (!v43)
            {
LABEL_67:
              BoundedFloat = 0.0;
              goto LABEL_70;
            }
          }
          BoundedFloat = zilch::ReadBitstream::getBoundedFloat(a2, 0.0, 1.0, 8);
          v33 = *(_QWORD *)this;
LABEL_70:
          *(float *)(v33 + v40 + 28) = BoundedFloat;
          v40 += 40;
          if (40 * v16 != v40)
            continue;
          break;
        }
        v45 = 0;
        while (2)
        {
          v46 = *((_QWORD *)a2 + 3);
          if (v46 >= *((_QWORD *)a2 + 1))
          {
            *((_BYTE *)a2 + 36) = 1;
            goto LABEL_77;
          }
          v47 = *((_DWORD *)a2 + 8);
          v48 = (1 << v47) & *(_DWORD *)(*(_QWORD *)a2 + 4 * v46);
          *((_DWORD *)a2 + 8) = v47 + 1;
          if (v47 < 31)
          {
            if (!v48)
              goto LABEL_77;
          }
          else
          {
            *((_DWORD *)a2 + 8) = 0;
            *((_QWORD *)a2 + 3) = v46 + 1;
            if (!v48)
            {
LABEL_77:
              v49 = 1.0;
              goto LABEL_80;
            }
          }
          v49 = zilch::ReadBitstream::getBoundedFloat(a2, 0.0, 1.0, 8);
          v33 = *(_QWORD *)this;
LABEL_80:
          *(float *)(v33 + v45 + 32) = v49;
          v45 += 40;
          if (40 * v16 == v45)
          {
            if (zilch::ReadBitstream::get(a2, 32))
            {
              if (zilch::ReadBitstream::get(a2))
              {
                v50 = *((_QWORD *)this + 1) - *(_QWORD *)this;
                if (v50)
                {
                  v51 = v50 / 40;
                  if (v51 <= 1)
                    v51 = 1;
                  v52 = (_DWORD *)(*(_QWORD *)this + 36);
                  do
                  {
                    *v52 = 4;
                    v52 += 10;
                    --v51;
                  }
                  while (v51);
                }
                goto LABEL_94;
              }
              if (zilch::ReadBitstream::get(a2))
              {
                v57 = *((_QWORD *)this + 1) - *(_QWORD *)this;
                if (!v57)
                  goto LABEL_94;
                v58 = v57 / 40;
                if (v58 <= 1)
                  v58 = 1;
                v59 = (_DWORD *)(*(_QWORD *)this + 36);
                v14 = 0;
                do
                {
                  *v59 = 3;
                  v59 += 10;
                  --v58;
                }
                while (v58);
              }
              else
              {
                v60 = zilch::ReadBitstream::get(a2);
                v61 = *((_QWORD *)this + 1);
                if ((v60 & 1) != 0)
                {
                  if (v61 == *(_QWORD *)this)
                    goto LABEL_94;
                  v62 = 0;
                  v63 = 36;
                  do
                  {
                    v14 = 0;
                    if (zilch::ReadBitstream::get(a2))
                      v64 = 3;
                    else
                      v64 = 4;
                    v65 = *(_QWORD *)this;
                    *(_DWORD *)(v65 + v63) = v64;
                    ++v62;
                    v63 += 40;
                  }
                  while (v62 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 1) - v65) >> 3));
                }
                else
                {
                  if (v61 == *(_QWORD *)this)
                    goto LABEL_94;
                  v66 = 0;
                  v67 = 36;
                  do
                  {
                    v68 = zilch::ReadBitstream::get(a2, 3);
                    v14 = 0;
                    v69 = *(_QWORD *)this;
                    *(_DWORD *)(v69 + v67) = v68;
                    ++v66;
                    v67 += 40;
                  }
                  while (v66 < 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 1) - v69) >> 3));
                }
              }
            }
            else
            {
              v53 = *((_QWORD *)this + 1) - *(_QWORD *)this;
              if (v53)
              {
                v54 = v53 / 40;
                if (v54 <= 1)
                  v54 = 1;
                v55 = (_DWORD *)(*(_QWORD *)this + 36);
                do
                {
                  *v55 = 4;
                  v55 += 10;
                  --v54;
                }
                while (v54);
              }
LABEL_94:
              v14 = 0;
            }
            break;
          }
          continue;
        }
      }
    }
  }
LABEL_95:
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)v72);
  return v14;
}

void sub_188789184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  zilch::TrafficSegmentList::~TrafficSegmentList((zilch::TrafficSegmentList *)va);
  _Unwind_Resume(a1);
}

void std::vector<zilch::TrafficSkeletonTile::Record>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<zilch::TrafficSkeletonTile::Record>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  BOOL v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (result != a2)
  {
    v21 = v3;
    v22 = v4;
    v6 = result;
    v7 = result + 40;
    if (result + 40 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)(v10 + 16);
          v18 = *(_OWORD *)v10;
          v19 = v12;
          v20 = *(_QWORD *)(v10 + 32);
          v13 = v9;
          while (1)
          {
            v14 = v6 + v13;
            v15 = *(_OWORD *)(v6 + v13 + 16);
            *(_OWORD *)(v14 + 40) = *(_OWORD *)(v6 + v13);
            *(_OWORD *)(v14 + 56) = v15;
            *(_QWORD *)(v14 + 72) = *(_QWORD *)(v6 + v13 + 32);
            if (!v13)
              break;
            v13 -= 40;
            result = (*a3)((uint64_t)&v18, v13 + v6);
            if ((result & 1) == 0)
            {
              v16 = v6 + v13 + 40;
              goto LABEL_10;
            }
          }
          v16 = v6;
LABEL_10:
          v17 = v19;
          *(_OWORD *)v16 = v18;
          *(_OWORD *)(v16 + 16) = v17;
          *(_QWORD *)(v16 + 32) = v20;
        }
        v7 = v10 + 40;
        v9 += 40;
      }
      while (v10 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = result;
    v7 = result + 40;
    if (result + 40 != a2)
    {
      v9 = result - 40;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v11 = *(_OWORD *)(v6 + 16);
          v15 = *(_OWORD *)v6;
          v16 = v11;
          v17 = *(_QWORD *)(v6 + 32);
          v12 = v9;
          do
          {
            v13 = *(_OWORD *)(v12 + 56);
            *(_OWORD *)(v12 + 80) = *(_OWORD *)(v12 + 40);
            *(_OWORD *)(v12 + 96) = v13;
            *(_QWORD *)(v12 + 112) = *(_QWORD *)(v12 + 72);
            result = (*a3)((uint64_t)&v15, v12);
            v12 -= 40;
          }
          while ((result & 1) != 0);
          v14 = v16;
          *(_OWORD *)(v12 + 80) = v15;
          *(_OWORD *)(v12 + 96) = v14;
          *(_QWORD *)(v12 + 112) = v17;
        }
        v7 = v6 + 40;
        v9 += 40;
      }
      while (v6 + 40 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
      *((_QWORD *)a3 + 4) = v12;
      result = 1;
LABEL_9:
      *a3 = v10;
      a3[1] = v11;
      return result;
    }
    v25 = *a1;
    v26 = a1[1];
    v27 = *((_QWORD *)a1 + 4);
    v28 = *((_QWORD *)a2 + 4);
    v29 = a2[1];
    *a1 = *a2;
    a1[1] = v29;
    *((_QWORD *)a1 + 4) = v28;
    *((_QWORD *)a2 + 4) = v27;
    *a2 = v25;
    a2[1] = v26;
    if ((*a4)(a3, a2))
    {
      v10 = *a2;
      v11 = a2[1];
      v30 = *((_QWORD *)a2 + 4);
      v31 = *((_QWORD *)a3 + 4);
      v32 = a3[1];
      *a2 = *a3;
      a2[1] = v32;
      *((_QWORD *)a2 + 4) = v31;
      *((_QWORD *)a3 + 4) = v30;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    if ((*a4)(a2, a1))
    {
      v20 = *a1;
      v21 = a1[1];
      v22 = *((_QWORD *)a1 + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_QWORD *)a1 + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      result = 2;
      *a2 = v20;
      a2[1] = v21;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 v6;
  __int128 *v7;
  __int128 *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = a2;
  v6 = a1[1];
  v22 = *a1;
  v23 = v6;
  v24 = *((_QWORD *)a1 + 4);
  if (((*a3)(&v22, (__int128 *)((char *)a2 - 40)) & 1) != 0)
  {
    v7 = a1;
    do
      v7 = (__int128 *)((char *)v7 + 40);
    while (((*a3)(&v22, v7) & 1) == 0);
  }
  else
  {
    v8 = (__int128 *)((char *)a1 + 40);
    do
    {
      v7 = v8;
      if (v8 >= v4)
        break;
      v9 = (*a3)(&v22, v8);
      v8 = (__int128 *)((char *)v7 + 40);
    }
    while (!v9);
  }
  if (v7 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  while (v7 < v4)
  {
    v10 = *v7;
    v11 = v7[1];
    v27 = *((_QWORD *)v7 + 4);
    v25 = v10;
    v26 = v11;
    v12 = *v4;
    v13 = v4[1];
    *((_QWORD *)v7 + 4) = *((_QWORD *)v4 + 4);
    *v7 = v12;
    v7[1] = v13;
    v14 = v25;
    v15 = v26;
    *((_QWORD *)v4 + 4) = v27;
    *v4 = v14;
    v4[1] = v15;
    do
      v7 = (__int128 *)((char *)v7 + 40);
    while (!(*a3)(&v22, v7));
    do
      v4 = (__int128 *)((char *)v4 - 40);
    while (((*a3)(&v22, v4) & 1) != 0);
  }
  v16 = (__int128 *)((char *)v7 - 40);
  if ((__int128 *)((char *)v7 - 40) != a1)
  {
    v17 = *v16;
    v18 = *(__int128 *)((char *)v7 - 24);
    *((_QWORD *)a1 + 4) = *((_QWORD *)v7 - 1);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *((_QWORD *)v7 - 1) = v24;
  *v16 = v19;
  *(__int128 *)((char *)v7 - 24) = v20;
  return v7;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,zilch::TrafficSkeletonTile::Record *,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&)>(__int128 *a1, char *a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v6 = 0;
  v7 = a1[1];
  v22 = *a1;
  v23 = v7;
  v24 = *((_QWORD *)a1 + 4);
  do
    v6 += 40;
  while (((*a3)((char *)a1 + v6, &v22) & 1) != 0);
  v8 = (unint64_t)a1 + v6;
  v9 = (uint64_t)a1 + v6 - 40;
  if (v6 == 40)
  {
    do
    {
      if (v8 >= (unint64_t)a2)
        break;
      a2 -= 40;
    }
    while (((*a3)(a2, &v22) & 1) == 0);
  }
  else
  {
    do
      a2 -= 40;
    while (!(*a3)(a2, &v22));
  }
  if (v8 < (unint64_t)a2)
  {
    v10 = (__int128 *)((char *)a1 + v6);
    v11 = (__int128 *)a2;
    do
    {
      v13 = v10[1];
      v25 = *v10;
      v12 = v25;
      v26 = v13;
      v27 = *((_QWORD *)v10 + 4);
      v14 = v27;
      v16 = *v11;
      v15 = v11[1];
      *((_QWORD *)v10 + 4) = *((_QWORD *)v11 + 4);
      *v10 = v16;
      v10[1] = v15;
      *((_QWORD *)v11 + 4) = v14;
      *v11 = v12;
      v11[1] = v13;
      do
        v10 = (__int128 *)((char *)v10 + 40);
      while (((*a3)((char *)v10, &v22) & 1) != 0);
      do
        v11 = (__int128 *)((char *)v11 - 40);
      while (!(*a3)((char *)v11, &v22));
    }
    while (v10 < v11);
    v9 = (uint64_t)v10 - 40;
  }
  if ((__int128 *)v9 != a1)
  {
    v17 = *(_OWORD *)v9;
    v18 = *(_OWORD *)(v9 + 16);
    *((_QWORD *)a1 + 4) = *(_QWORD *)(v9 + 32);
    *a1 = v17;
    a1[1] = v18;
  }
  v19 = v22;
  v20 = v23;
  *(_QWORD *)(v9 + 32) = v24;
  *(_OWORD *)v9 = v19;
  *(_OWORD *)(v9 + 16) = v20;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a2 - 8) = v11;
      result = 1;
      *v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_QWORD *)(v20 + 152) = *(_QWORD *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_OWORD *)a3;
    v12 = *(_OWORD *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(_QWORD *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 16);
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_QWORD *)(a2 + 32) = v19;
      *(_QWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_QWORD *)(a1 + 32) = v23;
        *(_QWORD *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_OWORD *)a4;
    v15 = *(_OWORD *)(a4 + 16);
    v16 = *(_QWORD *)(a4 + 32);
    v17 = *(_QWORD *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 32) = v17;
    *(_QWORD *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 16);
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(_QWORD *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v22;
      *(_QWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(__n128 *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_QWORD *)(a2 + 32);
        v27 = *(_QWORD *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_QWORD *)(a2 + 32) = v27;
        *(_QWORD *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          result = *(__n128 *)a1;
          v29 = *(_OWORD *)(a1 + 16);
          v30 = *(_QWORD *)(a1 + 32);
          v31 = *(_QWORD *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 32) = v31;
          *(_QWORD *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

__n128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*,zilch::TrafficSkeletonTile::Record*>(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(int64_t, uint64_t), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 v16;
  __n128 v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __n128 *v33;
  __n128 *v34;
  __n128 v35;
  __n128 v36;
  unint64_t v37;

  if ((__n128 *)a1 != a2)
  {
    v7 = a2;
    v9 = (uint64_t)a2 - a1;
    v10 = ((uint64_t)a2 - a1) / 40;
    if ((uint64_t)a2 - a1 >= 41)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)(a1 + 40 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 40);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v16 = *v15;
          v17 = v15[1];
          v18 = v15[2].n128_u64[0];
          v19 = *(_QWORD *)(a1 + 32);
          v20 = *(__n128 *)(a1 + 16);
          *v15 = *(__n128 *)a1;
          v15[1] = v20;
          v15[2].n128_u64[0] = v19;
          *(_QWORD *)(a1 + 32) = v18;
          *(__n128 *)a1 = v16;
          *(__n128 *)(a1 + 16) = v17;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, a4, v10, (__n128 *)a1);
        }
        v15 = (__n128 *)((char *)v15 + 40);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 41)
    {
      return v14;
    }
    else
    {
      v33 = v14;
      v21 = v9 / 0x28uLL;
      do
      {
        v34 = v7;
        v22 = 0;
        v35 = *(__n128 *)a1;
        v36 = *(__n128 *)(a1 + 16);
        v37 = *(_QWORD *)(a1 + 32);
        v23 = a1;
        do
        {
          v24 = v23 + 40 * v22 + 40;
          v25 = (2 * v22) | 1;
          v26 = 2 * v22 + 2;
          if (v26 < v21 && (*a4)(v23 + 40 * v22 + 40, v23 + 40 * v22 + 80))
          {
            v24 += 40;
            v25 = v26;
          }
          v27 = *(_OWORD *)v24;
          v28 = *(_OWORD *)(v24 + 16);
          *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
          *(_OWORD *)v23 = v27;
          *(_OWORD *)(v23 + 16) = v28;
          v23 = v24;
          v22 = v25;
        }
        while (v25 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        v7 = (__n128 *)((char *)v34 - 40);
        if ((__int8 *)v24 == &v34[-3].n128_i8[8])
        {
          *(_QWORD *)(v24 + 32) = v37;
          *(__n128 *)v24 = v35;
          *(__n128 *)(v24 + 16) = v36;
        }
        else
        {
          v29 = *v7;
          v30 = *(__int128 *)((char *)&v34[-2] + 8);
          *(_QWORD *)(v24 + 32) = v34[-1].n128_u64[1];
          *(__n128 *)v24 = v29;
          *(_OWORD *)(v24 + 16) = v30;
          *v7 = v35;
          *(__n128 *)((char *)v34 - 24) = v36;
          v34[-1].n128_u64[1] = v37;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(a1, v24 + 40, (uint64_t (**)(__int128 *, __int128 *))a4, 0xCCCCCCCCCCCCCCCDLL * ((v24 + 40 - a1) >> 3));
        }
      }
      while (v21-- > 2);
      return v33;
    }
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, unsigned int (**a2)(int64_t, uint64_t), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  int64_t v9;
  int64_t v12;
  __int128 *v13;
  int64_t v14;
  __n128 result;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v26 = v4;
    v27 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__int128 *)(a1 + 40 * v12);
      v14 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 40 * v12, (uint64_t)v13 + 40))
      {
        v13 = (__int128 *)((char *)v13 + 40);
        v12 = v14;
      }
      if ((((uint64_t (*)(__int128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v16 = v7[1];
        v23 = *v7;
        v24 = v16;
        v25 = v7[2].n128_i64[0];
        do
        {
          v17 = (__n128 *)v13;
          v18 = (__n128)*v13;
          v19 = v13[1];
          v7[2].n128_u64[0] = *((_QWORD *)v13 + 4);
          *v7 = v18;
          v7[1] = (__n128)v19;
          if (v9 < v12)
            break;
          v20 = (2 * v12) | 1;
          v13 = (__int128 *)(a1 + 40 * v20);
          v21 = 2 * v12 + 2;
          if (v21 < a3)
          {
            if ((*a2)(a1 + 40 * v20, (uint64_t)v13 + 40))
            {
              v13 = (__int128 *)((char *)v13 + 40);
              v20 = v21;
            }
          }
          v7 = v17;
          v12 = v20;
        }
        while (!(*a2)((int64_t)v13, (uint64_t)&v23));
        result = v23;
        v22 = v24;
        v17[2].n128_u64[0] = v25;
        *v17 = result;
        v17[1] = v22;
      }
    }
  }
  return result;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(zilch::TrafficSkeletonTile::Record const&,zilch::TrafficSkeletonTile::Record const&),zilch::TrafficSkeletonTile::Record*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 40 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 40);
    if ((*a3)(v10, (__int128 *)(a2 - 40)))
    {
      v13 = v11[1];
      v18 = *v11;
      v19 = v13;
      v20 = *((_QWORD *)v11 + 4);
      do
      {
        v14 = v10;
        v15 = *v10;
        v16 = v10[1];
        *((_QWORD *)v11 + 4) = *((_QWORD *)v10 + 4);
        *v11 = v15;
        v11[1] = v16;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 40 * v9);
        v11 = v14;
      }
      while (((*a3)(v10, &v18) & 1) != 0);
      result = *(double *)&v18;
      v17 = v19;
      *v14 = v18;
      v14[1] = v17;
      *((_QWORD *)v14 + 4) = v20;
    }
  }
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<int>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_18878A474(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

void std::vector<zilch::TrafficSkeletonTile::Record>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficSkeletonTile::Record>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v15 = &v12[40 * v11];
    v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 40);
        v21 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

zilch::WriteBitstream *zilch::WriteBitstream::WriteBitstream(zilch::WriteBitstream *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_WORD *)(v2 + 32) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_WORD *)(v2 + 32) = 0;
  *(_QWORD *)this = v2;
  return this;
}

zilch::WriteBitstream *zilch::WriteBitstream::WriteBitstream(zilch::WriteBitstream *this, const zilch::WriteBitstream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = operator new();
  v5 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)v4, *(const void **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
  v6 = *(_QWORD *)(v5 + 24);
  *(_WORD *)(v4 + 32) = *(_WORD *)(v5 + 32);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)this = v4;
  return this;
}

void sub_18878A810(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x1010C409C1ECA2DLL);
  _Unwind_Resume(a1);
}

_QWORD *zilch::WriteBitstream::WriteBitstream(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *zilch::WriteBitstream::WriteBitstream(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int v25;
  unint64_t v26;
  __int16 v28;
  __int16 v29;
  char v30[8];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_WORD *)(v4 + 32) = 0;
  *a1 = v4;
  v31 = 0;
  v5 = *((char *)a2 + 23) < 0;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = a2[1];
  if (v6)
  {
    v7 = 0;
    do
    {
      if (v5)
        v8 = (uint64_t *)*a2;
      else
        v8 = a2;
      *(_QWORD *)v30 = v8[v7 / 8];
      v29 = 0;
      v28 = 0;
      sscanf(v30, "%2hhx%2hhx%2hhx%2hhx", (char *)&v29 + 1, &v29, (char *)&v28 + 1, &v28);
      v9 = 0x101010101 * ((2149582850 * HIBYTE(v29)) & 0x884422110);
      HIBYTE(v29) = BYTE4(v9);
      v10 = (0x101010101 * ((2149582850 * v29) & 0x884422110uLL)) >> 32;
      LOBYTE(v29) = (0x101010101 * ((2149582850 * v29) & 0x884422110uLL)) >> 32;
      v11 = (0x101010101 * ((2149582850 * v28) & 0x884422110uLL)) >> 32;
      LOBYTE(v28) = (0x101010101 * ((2149582850 * v28) & 0x884422110uLL)) >> 32;
      v12 = (0x101010101 * ((2149582850 * HIBYTE(v28)) & 0x884422110uLL)) >> 32;
      HIBYTE(v28) = (0x101010101 * ((2149582850 * HIBYTE(v28)) & 0x884422110uLL)) >> 32;
      v13 = ((_DWORD)v11 << 24) | (v12 << 16) | (v10 << 8) | BYTE4(v9);
      v14 = *a1;
      v15 = *(int **)(*a1 + 8);
      v16 = *(_QWORD *)(*a1 + 16);
      if ((unint64_t)v15 >= v16)
      {
        v18 = *(int **)v14;
        v19 = ((uint64_t)v15 - *(_QWORD *)v14) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*a1 + 16, v22);
          v18 = *(int **)v14;
          v15 = *(int **)(v14 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (int *)&v23[4 * v19];
        *v24 = v13;
        v17 = v24 + 1;
        while (v15 != v18)
        {
          v25 = *--v15;
          *--v24 = v25;
        }
        *(_QWORD *)v14 = v24;
        *(_QWORD *)(v14 + 8) = v17;
        *(_QWORD *)(v14 + 16) = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v13;
        v17 = v15 + 1;
      }
      *(_QWORD *)(v14 + 8) = v17;
      v7 += 8;
      v5 = *((char *)a2 + 23) < 0;
      v26 = *((unsigned __int8 *)a2 + 23);
      if ((v26 & 0x80u) != 0)
        v26 = a2[1];
    }
    while (v7 < v26);
  }
  return a1;
}

void sub_18878AADC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

void zilch::WriteBitstream::~WriteBitstream(zilch::WriteBitstream *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100]((uint64_t)this, v1);
}

char **zilch::WriteBitstream::operator=(char **a1, char **a2)
{
  char *v3;
  char *v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *a1;
  if (*a1 != *a2)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(*a1, *(char **)v3, *((_QWORD *)v3 + 1), (uint64_t)(*((_QWORD *)v3 + 1) - *(_QWORD *)v3) >> 2);
  v5 = *((_QWORD *)v3 + 3);
  *((_WORD *)v4 + 16) = *((_WORD *)v3 + 16);
  *((_QWORD *)v4 + 3) = v5;
  return a1;
}

uint64_t *zilch::WriteBitstream::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t zilch::WriteBitstream::setUseOldBitOrder(uint64_t this, char a2)
{
  *(_BYTE *)(*(_QWORD *)this + 33) = a2;
  return this;
}

void zilch::WriteBitstream::put(zilch::WriteBitstream *this, unsigned int a2)
{
  uint64_t v3;
  int v4;
  zilch::EndianUtils *v5;
  int v6;
  int v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;

  v3 = *(_QWORD *)this;
  v4 = *(_DWORD *)(*(_QWORD *)this + 24);
  v5 = (zilch::EndianUtils *)(*(_DWORD *)(*(_QWORD *)this + 28) | (a2 << v4));
  *(_DWORD *)(v3 + 24) = v4 + 1;
  *(_DWORD *)(v3 + 28) = (_DWORD)v5;
  if (v4 >= 31)
  {
    v6 = zilch::EndianUtils::toLittleEndian(v5, a2);
    v7 = v6;
    v8 = *(_QWORD *)(v3 + 16);
    v9 = *(_DWORD **)(v3 + 8);
    if ((unint64_t)v9 >= v8)
    {
      v11 = *(_DWORD **)v3;
      v12 = ((uint64_t)v9 - *(_QWORD *)v3) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v3 + 16, v15);
        v11 = *(_DWORD **)v3;
        v9 = *(_DWORD **)(v3 + 8);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[4 * v12];
      v18 = &v16[4 * v15];
      *(_DWORD *)v17 = v7;
      v10 = v17 + 4;
      while (v9 != v11)
      {
        v19 = *--v9;
        *((_DWORD *)v17 - 1) = v19;
        v17 -= 4;
      }
      *(_QWORD *)v3 = v17;
      *(_QWORD *)(v3 + 8) = v10;
      *(_QWORD *)(v3 + 16) = v18;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v9 = v6;
      v10 = v9 + 1;
    }
    *(_QWORD *)(v3 + 8) = v10;
    *(_QWORD *)(*(_QWORD *)this + 24) = 0;
  }
}

void zilch::WriteBitstream::finalize(zilch::WriteBitstream *this)
{
  uint64_t v1;
  unint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  int v14;

  v1 = *(_QWORD *)this;
  if (*(int *)(*(_QWORD *)this + 24) >= 1)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(_DWORD **)(v1 + 8);
    if ((unint64_t)v4 >= v3)
    {
      v6 = *(_DWORD **)v1;
      v7 = ((uint64_t)v4 - *(_QWORD *)v1) >> 2;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 62)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v9 = v3 - (_QWORD)v6;
      if (v9 >> 1 > v8)
        v8 = v9 >> 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
        v10 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v1 + 16, v10);
        v6 = *(_DWORD **)v1;
        v4 = *(_DWORD **)(v1 + 8);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[4 * v7];
      v13 = &v11[4 * v10];
      *(_DWORD *)v12 = *(_DWORD *)(v1 + 28);
      v5 = v12 + 4;
      while (v4 != v6)
      {
        v14 = *--v4;
        *((_DWORD *)v12 - 1) = v14;
        v12 -= 4;
      }
      *(_QWORD *)v1 = v12;
      *(_QWORD *)(v1 + 8) = v5;
      *(_QWORD *)(v1 + 16) = v13;
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v4 = *(_DWORD *)(v1 + 28);
      v5 = v4 + 1;
    }
    *(_QWORD *)(v1 + 8) = v5;
    v1 = *(_QWORD *)this;
  }
  *(_BYTE *)(v1 + 32) = 1;
}

void zilch::WriteBitstream::put(zilch::WriteBitstream *this, unsigned int a2, int a3)
{
  int v3;
  int v6;

  v3 = a3;
  if (*(_BYTE *)(*(_QWORD *)this + 33))
  {
    if (a3)
    {
      do
      {
        zilch::WriteBitstream::put(this, a2 & 1);
        a2 >>= 1;
        --v3;
      }
      while (v3);
    }
  }
  else if (a3)
  {
    v6 = a3 - 1;
    do
      zilch::WriteBitstream::put(this, (a2 >> v6--) & 1);
    while (v6 != -1);
  }
}

void zilch::WriteBitstream::put64(zilch::WriteBitstream *this, unint64_t a2, int a3)
{
  unsigned int v5;
  uint64_t v6;

  if (a3)
  {
    v5 = a3 - 1;
    do
    {
      v6 = v5;
      zilch::WriteBitstream::put(this, (a2 >> v5--) & 1);
    }
    while (v6);
  }
}

void zilch::WriteBitstream::putEliasGamma(zilch::WriteBitstream *this, unsigned int a2)
{
  int v4;

  v4 = 31;
  while (((a2 >> v4) & 1) == 0)
  {
    if (--v4 == -1)
      goto LABEL_6;
  }
  if (!v4)
    goto LABEL_7;
LABEL_6:
  zilch::WriteBitstream::put(this, 0, v4);
LABEL_7:
  zilch::WriteBitstream::put(this, a2, v4 + 1);
}

void zilch::WriteBitstream::putRice(zilch::WriteBitstream *this, unsigned int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;

  v6 = a2 >> a3;
  if (a2 >> a3)
  {
    v7 = a2 >> a3;
    do
    {
      --v7;
      zilch::WriteBitstream::put(this, 1u);
    }
    while (v7);
  }
  zilch::WriteBitstream::put(this, 0);
  zilch::WriteBitstream::put(this, a2 - (v6 << a3), a3);
}

void zilch::WriteBitstream::putVariableWidth(zilch::WriteBitstream *this, unsigned int a2)
{
  int v4;
  int v5;

  v4 = 31;
  do
    v5 = v4--;
  while (((a2 >> v5) & 1) == 0 && v5);
  zilch::WriteBitstream::put(this, v4 + 1, 5);
  zilch::WriteBitstream::put(this, a2, v4 + 2);
}

void zilch::WriteBitstream::putVariableWidth64(zilch::WriteBitstream *this, unint64_t a2)
{
  int v4;
  unsigned int v5;
  uint64_t v6;

  v4 = 64;
  do
  {
    v5 = v4 - 1;
    if (((a2 >> (v4 - 1)) & 1) != 0)
      break;
    --v4;
  }
  while (v4);
  zilch::WriteBitstream::put(this, v5, 6);
  do
  {
    v6 = v5;
    zilch::WriteBitstream::put(this, (a2 >> v5--) & 1);
  }
  while (v6);
}

void zilch::WriteBitstream::putRice64(zilch::WriteBitstream *this, unint64_t a2, int a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v6 = a2 >> a3;
  if (a2 >> a3)
  {
    v7 = a2 >> a3;
    do
    {
      --v7;
      zilch::WriteBitstream::put(this, 1u);
    }
    while (v7);
  }
  zilch::WriteBitstream::put(this, 0);
  if (a3)
  {
    v8 = a2 - (v6 << a3);
    v9 = a3 - 1;
    do
    {
      v10 = v9;
      zilch::WriteBitstream::put(this, (v8 >> v9--) & 1);
    }
    while (v10);
  }
}

uint64_t zilch::WriteBitstream::bytes(zilch::WriteBitstream *this)
{
  return **(_QWORD **)this;
}

uint64_t zilch::WriteBitstream::byteSize(zilch::WriteBitstream *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this;
}

uint64_t zilch::WriteBitstream::computeOptimalRiceBits(zilch::WriteBitstream *this, const unsigned int *a2)
{
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = 0;
  v3 = -1;
  LODWORD(v4) = 31;
  do
  {
    if (a2)
    {
      v5 = (*(_DWORD *)this >> v2) + v2;
      v6 = 1;
      do
      {
        v7 = v6;
        if (a2 == (const unsigned int *)v6)
          break;
        v8 = (*((_DWORD *)this + v6++) >> v2) + v2;
        v9 = __CFADD__(v5, v8);
        v5 += v8;
      }
      while (!v9);
      v10 = v7 >= (unint64_t)a2;
    }
    else
    {
      v5 = 0;
      v10 = 1;
    }
    if (v10 && v5 < v3)
    {
      v3 = v5;
      v4 = v2;
    }
    else
    {
      v4 = v4;
    }
    ++v2;
  }
  while (v2 != 32);
  return v4;
}

uint64_t zilch::WriteBitstream::computeOptimalRiceBits64(zilch::WriteBitstream *this, const unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = 0;
  v3 = -1;
  LODWORD(v4) = 63;
  do
  {
    if (a2)
    {
      v5 = (*(_QWORD *)this >> v2) + v2;
      v6 = 1;
      do
      {
        v7 = v6;
        if (a2 == (const unint64_t *)v6)
          break;
        v8 = (*((_QWORD *)this + v6++) >> v2) + v2;
        v9 = __CFADD__(v8, v5);
        v5 += v8;
      }
      while (!v9);
      v10 = v7 >= (unint64_t)a2;
    }
    else
    {
      v5 = 0;
      v10 = 1;
    }
    if (v10 && v5 < v3)
    {
      v3 = v5;
      v4 = v2;
    }
    else
    {
      v4 = v4;
    }
    ++v2;
  }
  while (v2 != 64);
  return v4;
}

void zilch::WriteBitstream::getHexString(uint64_t **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char __str[9];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a2, 2 * ((*this)[1] - **this));
  v4 = **this;
  if ((*this)[1] != v4)
  {
    v5 = 0;
    do
    {
      v6 = *(unsigned int *)(v4 + 4 * v5);
      snprintf(__str, 9uLL, "%02hhx%02hhx%02hhx%02hhx", ((0x101010101 * ((2149582850 * v6) & 0x884422110uLL)) >> 32), ((0x101010101 * ((2149582850 * BYTE1(v6)) & 0x884422110uLL)) >> 32), ((0x101010101 * ((2149582850 * BYTE2(v6)) & 0x884422110uLL)) >> 32), ((0x101010101 * ((2149582850 * (v6 >> 24)) & 0x884422110uLL)) >> 32));
      std::string::append(a2, __str);
      ++v5;
      v4 = **this;
    }
    while (v5 < ((*this)[1] - v4) >> 2);
  }
}

void sub_18878B35C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void zilch::WriteBitstream::align(zilch::WriteBitstream *this)
{
  while (*(_DWORD *)(*(_QWORD *)this + 24))
    zilch::WriteBitstream::put(this, 0);
}

void zilch::WriteBitstream::putByteArray(zilch::WriteBitstream *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t i;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  _DWORD *v17;
  int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  int *v24;
  int v25;

  for (i = *(_QWORD *)this; *(_DWORD *)(i + 24); i = *(_QWORD *)this)
    zilch::WriteBitstream::put(this, 0);
  if (a3)
  {
    v7 = 0;
    do
    {
      v8 = v7 | 1;
      if (v8 >= a3)
        v9 = 0;
      else
        v9 = a2[v8];
      if ((v7 | 2) >= a3)
        v10 = 0;
      else
        v10 = a2[v7 | 2];
      v11 = v7 | 3;
      if (v11 >= a3)
        v12 = 0;
      else
        v12 = a2[v11];
      v13 = (a2[v7] << 24) | (v9 << 16) | (v10 << 8) | v12;
      v14 = *(_QWORD *)this;
      v15 = *(int **)(*(_QWORD *)this + 8);
      v16 = *(_QWORD *)(*(_QWORD *)this + 16);
      if ((unint64_t)v15 >= v16)
      {
        v18 = *(int **)v14;
        v19 = ((uint64_t)v15 - *(_QWORD *)v14) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(_QWORD *)this + 16, v22);
          v18 = *(int **)v14;
          v15 = *(int **)(v14 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (int *)&v23[4 * v19];
        *v24 = v13;
        v17 = v24 + 1;
        while (v15 != v18)
        {
          v25 = *--v15;
          *--v24 = v25;
        }
        *(_QWORD *)v14 = v24;
        *(_QWORD *)(v14 + 8) = v17;
        *(_QWORD *)(v14 + 16) = &v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v13;
        v17 = v15 + 1;
      }
      *(_QWORD *)(v14 + 8) = v17;
      v7 += 4;
    }
    while (v7 < a3);
  }
}

void zilch::WriteBitstream::putBoundedFloat(zilch::WriteBitstream *this, float a2, float a3, float a4, int a5)
{
  if (a2 < a3)
    a2 = a3;
  if (a2 > a4)
    a2 = a4;
  zilch::WriteBitstream::put(this, (float)((float)((float)(a2 - a3) / (float)(a4 - a3)) * (float)~(-1 << a5)), a5);
}

void zilch::WriteBitstream::putHuffmanCode(zilch::WriteBitstream *this, const zilch::HuffmanCode *a2)
{
  unsigned int v4;
  unsigned int i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = zilch::HuffmanCode::size(a2);
  zilch::WriteBitstream::putVariableWidth(this, v4);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      v6 = zilch::HuffmanCode::key(a2, i);
      v7 = zilch::HuffmanCode::code(a2, i);
      v8 = zilch::HuffmanCode::codeLength(a2, i);
      zilch::WriteBitstream::putVariableWidth(this, v6);
      zilch::WriteBitstream::putEliasGamma(this, v8);
      zilch::WriteBitstream::put(this, v7, v8);
    }
  }
}

void zilch::WriteBitstream::putHuffmanKey(zilch::WriteBitstream *this, unsigned int a2, const zilch::HuffmanCode *a3)
{
  unsigned int CodeForKey;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v7 = 0;
  CodeForKey = zilch::HuffmanCode::getCodeForKey(a3, a2, &v7);
  if ((int)v7 >= 1)
  {
    v5 = CodeForKey;
    v6 = v7 + 1;
    do
      zilch::WriteBitstream::put(this, (v5 >> (v6-- - 2)) & 1);
    while (v6 > 1);
  }
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18878B714(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::default_delete<zilch::WriteBitstreamData>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x18D76437CLL);
  }
}

uint64_t addr_obj::venue::TemplateFactory::TemplateForStyleAndParams(uint64_t a1, int a2, int *a3)
{
  return *sub_18878B8A0(a2, *a3);
}

uint64_t *sub_18878B8A0(int a1, int a2)
{
  uint64_t *result;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  addr_obj::Logger *v16;
  void **v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  addr_obj::Logger *v28;
  void **v29;
  uint64_t v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t *v38;
  _QWORD *v39;
  _QWORD *v40;
  addr_obj::Logger *v41;
  void **v42;
  uint64_t v43;
  uint64_t i22;
  uint64_t i23;
  uint64_t i24;
  uint64_t i25;
  uint64_t i26;
  uint64_t i12;
  uint64_t i13;
  uint64_t i14;
  uint64_t i15;
  uint64_t i16;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  uint64_t i2;
  uint64_t i3;
  uint64_t i4;
  uint64_t i17;
  uint64_t i18;
  uint64_t i19;
  uint64_t i20;
  uint64_t i21;
  uint64_t i5;
  uint64_t i6;
  uint64_t i7;
  uint64_t i8;
  uint64_t i9;
  uint64_t i10;
  uint64_t i11;
  _QWORD *v80;
  _QWORD *v81;
  addr_obj::Logger *v82;
  void **v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  std::runtime_error *v87;
  _QWORD *v88;
  _QWORD *v89;
  std::runtime_error *v90;
  _QWORD *v91;
  _QWORD *v92;
  std::runtime_error *v93;
  _QWORD *v94;
  _QWORD *v95;
  std::runtime_error *exception;
  unint64_t v97[3];
  unint64_t v98[3];
  void *v99[2];
  char v100;
  __int128 *v101[3];
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  void *v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  void *v113;
  void *v114;
  __int128 *v115[3];
  void *v116[2];
  char v117;
  void *v118[2];
  char v119;
  void *v120[2];
  char v121;
  void *v122[2];
  char v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  void *v127;
  void *v128;
  char v129;
  void *v130;
  void *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  std::string v135;
  void *v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[22];
  void *v143[2];
  char v144;
  _QWORD v145[3];
  _QWORD v146[3];
  _QWORD v147[3];
  _QWORD v148[3];
  __int128 v149;
  _QWORD v150[3];
  _QWORD v151[3];
  void *v152[3];
  void *v153[2];
  char v154;
  void *v155[2];
  char v156;
  void *v157[2];
  char v158;
  void *__p[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  _BYTE v165[104];
  void *v166;
  void *v167;
  _QWORD v168[2];
  unint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  void *v178[2];
  char v179;
  void *v180[2];
  char v181;
  unint64_t v182;
  void *v183;
  void *v184;
  unint64_t v185[2];
  unint64_t v186;
  std::string v187;
  uint64_t v188;
  int v189;
  std::string v190[4];
  std::string v191[6];
  unint64_t v192[2];

  v192[1] = *MEMORY[0x1E0C80C00];
  switch(a1)
  {
    case 0:
      return sub_18879261C(a2);
    case 1:
      return sub_1887941B8(a2);
    case 2:
      return sub_1887961D4(a2);
    case 3:
      v6 = atomic_load((unsigned __int8 *)&qword_1EDF4FE38);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FE38))
      {
        v153[0] = (void *)1;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, v153, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v98[0] = 1;
        v97[0] = 0;
        addr_obj::venue::Field::Field(&v183, v98, v97);
        v192[0] = 2;
        v186 = 0;
        addr_obj::venue::Field::Field(v185, v192, &v186);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, " ");
        addr_obj::venue::Decorator::Decorator(v143, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, v115, (__int128 **)&v113);
        v182 = 1;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v182, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v125 = 0;
        v126 = 1;
        addr_obj::venue::Field::Field(&v166, &v126, &v125);
        v124 = 2;
        v169 = 0;
        addr_obj::venue::Field::Field(v168, &v124, &v169);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v157, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v155, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)v157, (__int128 **)v155);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FE20, (__int128 **)&v187, 2uLL);
        for (i = 144; i != -144; i -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i));
        v99[0] = v155;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (j = 0; j != -15; j -= 3)
        {
          if (SHIBYTE(v142[j + 2]) < 0)
            operator delete(v142[j]);
        }
        v136[0] = v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (k = 0; k != -12; k -= 3)
        {
          if (SHIBYTE(v152[k + 2]) < 0)
            operator delete(v152[k]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        v136[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF4FE38);
      }
      v7 = atomic_load((unsigned __int8 *)&qword_1EDF4FE58);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FE58))
      {
        v153[0] = (void *)1;
        std::vector<unsigned long>::vector[abi:ne180100](&v183, v153, 1uLL);
        v167 = 0;
        v166 = 0;
        v168[0] = 0;
        v98[0] = 1;
        v97[0] = 0;
        addr_obj::venue::Field::Field(v157, v98, v97);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v133, v157, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v127, "");
        std::string::basic_string[abi:ne180100]<0>(v122, "");
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, ", ");
        addr_obj::venue::Decorator::Decorator(v143, &v127, v122, v120, v118);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v130, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v183, &v166, &v133, &v130);
        std::string::basic_string[abi:ne180100]<0>(v180, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v116, (__int128 *)v180, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(v178, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, (__int128 **)v116, v115);
        v192[0] = 1;
        std::vector<unsigned long>::vector[abi:ne180100](&v113, v192, 1uLL);
        v176 = 0uLL;
        v177 = 0;
        v186 = 1;
        v182 = 0;
        addr_obj::venue::Field::Field(v155, &v186, &v182);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v111, v155, 1uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v108, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v113, &v176, &v111, &v108);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v106, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v101, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)&v106, v101);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FE40, (__int128 **)&v187, 2uLL);
        for (m = 144; m != -144; m -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + m));
        v99[0] = v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (n = 0; n != -15; n -= 3)
        {
          if (SHIBYTE(v142[n + 2]) < 0)
            operator delete(v142[n]);
        }
        v136[0] = &v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (ii = 0; ii != -12; ii -= 3)
        {
          if (SHIBYTE(v152[ii + 2]) < 0)
            operator delete(v152[ii]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = &v108;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        if ((_QWORD)v176)
        {
          *((_QWORD *)&v176 + 1) = v176;
          operator delete((void *)v176);
        }
        if (v113)
        {
          v114 = v113;
          operator delete(v113);
        }
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        v136[0] = v116;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v181 < 0)
          operator delete(v180[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = &v130;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v123 < 0)
          operator delete(v122[0]);
        if (v129 < 0)
          operator delete(v127);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        __cxa_guard_release(&qword_1EDF4FE58);
      }
      v8 = atomic_load((unsigned __int8 *)&qword_1EDF4FE78);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FE78))
      {
        LODWORD(v187.__r_.__value_.__l.__data_) = 1;
        v188 = 0;
        *(_OWORD *)&v187.__r_.__value_.__r.__words[1] = 0uLL;
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v187.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FE20, unk_1EDF4FE28, 0x8E38E38E38E38E39 * ((unk_1EDF4FE28 - qword_1EDF4FE20) >> 4));
        v189 = 0;
        memset(v190, 0, 24);
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v190, (__int128 **)qword_1EDF4FE40, unk_1EDF4FE48, 0x8E38E38E38E38E39 * ((unk_1EDF4FE48 - qword_1EDF4FE40) >> 4));
        std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FE60, (int *)&v187, 2);
        for (jj = 40; jj != -24; jj -= 32)
        {
          v136[0] = (char *)&v187 + jj;
          std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        }
        __cxa_guard_release(&qword_1EDF4FE78);
      }
      v9 = qword_1EDF4FE68;
      if (!qword_1EDF4FE68)
        goto LABEL_23;
      v10 = &qword_1EDF4FE68;
      do
      {
        v11 = *(_DWORD *)(v9 + 32);
        v12 = v11 < a2;
        if (v11 >= a2)
          v13 = (uint64_t *)v9;
        else
          v13 = (uint64_t *)(v9 + 8);
        if (!v12)
          v10 = (uint64_t *)v9;
        v9 = *v13;
      }
      while (*v13);
      if (v10 == &qword_1EDF4FE68 || *((_DWORD *)v10 + 8) > a2)
      {
LABEL_23:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"Invalid LabelPattern enum: ", 27);
        v14 = (_QWORD *)std::ostream::operator<<();
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; library version: ",
                19);
        v16 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"11.3.0", 6);
        if (addr_obj::Logger::isInitialized(v16))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v136);
          std::stringbuf::str();
          if ((SBYTE7(v160) & 0x80u) == 0)
            v17 = __p;
          else
            v17 = (void **)__p[0];
          if ((SBYTE7(v160) & 0x80u) == 0)
            v18 = BYTE7(v160);
          else
            v18 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v17, v18);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
          std::string::basic_string[abi:ne180100]<0>(v143, "Short");
          std::stringbuf::str();
          std::string::basic_string[abi:ne180100]<0>(&v170, "");
          addr_obj::Logger::log(16, (uint64_t)__p, 236, (uint64_t)v143, (uint64_t)&v135, (uint64_t)&v170);
          if (SBYTE7(v171) < 0)
            operator delete((void *)v170);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (v144 < 0)
            operator delete(v143[0]);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::ostringstream::~ostringstream((uint64_t)v136);
        }
        v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"; at ", 5);
        v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)":", 1);
        std::ostream::operator<<();
        exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "DataError");
        std::stringbuf::str();
        addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v136, (uint64_t)__p);
      }
      goto LABEL_91;
    case 4:
      return sub_1887981F0(a2);
    case 5:
      return sub_18879A378(a2);
    case 6:
      return sub_18879C634(a2);
    case 7:
      v19 = atomic_load((unsigned __int8 *)&qword_1EDF4FFB8);
      if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FFB8))
      {
        v153[0] = 0;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, v153, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v98[0] = 0;
        v97[0] = 0;
        addr_obj::venue::Field::Field(&v183, v98, v97);
        v192[0] = 2;
        v186 = 0;
        addr_obj::venue::Field::Field(v185, v192, &v186);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, ", ");
        addr_obj::venue::Decorator::Decorator(v143, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, v115, (__int128 **)&v113);
        v182 = 0;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v182, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v125 = 0;
        v126 = 0;
        addr_obj::venue::Field::Field(&v166, &v126, &v125);
        v124 = 2;
        v169 = 0;
        addr_obj::venue::Field::Field(v168, &v124, &v169);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v157, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v155, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)v157, (__int128 **)v155);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FFA0, (__int128 **)&v187, 2uLL);
        for (kk = 144; kk != -144; kk -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + kk));
        v99[0] = v155;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (mm = 0; mm != -15; mm -= 3)
        {
          if (SHIBYTE(v142[mm + 2]) < 0)
            operator delete(v142[mm]);
        }
        v136[0] = v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (nn = 0; nn != -12; nn -= 3)
        {
          if (SHIBYTE(v152[nn + 2]) < 0)
            operator delete(v152[nn]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        v136[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF4FFB8);
      }
      v20 = atomic_load((unsigned __int8 *)&qword_1EDF4FFD8);
      if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FFD8))
      {
        v153[0] = 0;
        std::vector<unsigned long>::vector[abi:ne180100](&v183, v153, 1uLL);
        v167 = 0;
        v166 = 0;
        v168[0] = 0;
        v98[0] = 0;
        v97[0] = 0;
        addr_obj::venue::Field::Field(v157, v98, v97);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v133, v157, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v127, "");
        std::string::basic_string[abi:ne180100]<0>(v122, "");
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, ", ");
        addr_obj::venue::Decorator::Decorator(v143, &v127, v122, v120, v118);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v130, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v183, &v166, &v133, &v130);
        std::string::basic_string[abi:ne180100]<0>(v180, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v116, (__int128 *)v180, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(v178, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, (__int128 **)v116, v115);
        v192[0] = 0;
        std::vector<unsigned long>::vector[abi:ne180100](&v113, v192, 1uLL);
        v176 = 0uLL;
        v177 = 0;
        v186 = 0;
        v182 = 0;
        addr_obj::venue::Field::Field(v155, &v186, &v182);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v111, v155, 1uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v108, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v113, &v176, &v111, &v108);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v106, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v101, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)&v106, v101);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FFC0, (__int128 **)&v187, 2uLL);
        for (i1 = 144; i1 != -144; i1 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i1));
        v99[0] = v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (i2 = 0; i2 != -15; i2 -= 3)
        {
          if (SHIBYTE(v142[i2 + 2]) < 0)
            operator delete(v142[i2]);
        }
        v136[0] = &v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (i3 = 0; i3 != -12; i3 -= 3)
        {
          if (SHIBYTE(v152[i3 + 2]) < 0)
            operator delete(v152[i3]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = &v108;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        if ((_QWORD)v176)
        {
          *((_QWORD *)&v176 + 1) = v176;
          operator delete((void *)v176);
        }
        if (v113)
        {
          v114 = v113;
          operator delete(v113);
        }
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        v136[0] = v116;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v181 < 0)
          operator delete(v180[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = &v130;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v123 < 0)
          operator delete(v122[0]);
        if (v129 < 0)
          operator delete(v127);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        __cxa_guard_release(&qword_1EDF4FFD8);
      }
      v21 = atomic_load((unsigned __int8 *)&qword_1EDF4FFF8);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FFF8))
      {
        LODWORD(v187.__r_.__value_.__l.__data_) = 1;
        v188 = 0;
        *(_OWORD *)&v187.__r_.__value_.__r.__words[1] = 0uLL;
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v187.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FFA0, unk_1EDF4FFA8, 0x8E38E38E38E38E39 * ((unk_1EDF4FFA8 - qword_1EDF4FFA0) >> 4));
        v189 = 0;
        memset(v190, 0, 24);
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v190, (__int128 **)qword_1EDF4FFC0, unk_1EDF4FFC8, 0x8E38E38E38E38E39 * ((unk_1EDF4FFC8 - qword_1EDF4FFC0) >> 4));
        std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FFE0, (int *)&v187, 2);
        for (i4 = 40; i4 != -24; i4 -= 32)
        {
          v136[0] = (char *)&v187 + i4;
          std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        }
        __cxa_guard_release(&qword_1EDF4FFF8);
      }
      v22 = qword_1EDF4FFE8;
      if (!qword_1EDF4FFE8)
        goto LABEL_54;
      v10 = &qword_1EDF4FFE8;
      do
      {
        v23 = *(_DWORD *)(v22 + 32);
        v24 = v23 < a2;
        if (v23 >= a2)
          v25 = (uint64_t *)v22;
        else
          v25 = (uint64_t *)(v22 + 8);
        if (!v24)
          v10 = (uint64_t *)v22;
        v22 = *v25;
      }
      while (*v25);
      if (v10 == &qword_1EDF4FFE8 || *((_DWORD *)v10 + 8) > a2)
      {
LABEL_54:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"Invalid LabelPattern enum: ", 27);
        v26 = (_QWORD *)std::ostream::operator<<();
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"; library version: ",
                19);
        v28 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"11.3.0", 6);
        if (addr_obj::Logger::isInitialized(v28))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v136);
          std::stringbuf::str();
          if ((SBYTE7(v160) & 0x80u) == 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          if ((SBYTE7(v160) & 0x80u) == 0)
            v30 = BYTE7(v160);
          else
            v30 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v29, v30);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
          std::string::basic_string[abi:ne180100]<0>(v143, "ExteriorLong");
          std::stringbuf::str();
          std::string::basic_string[abi:ne180100]<0>(&v170, "");
          addr_obj::Logger::log(16, (uint64_t)__p, 504, (uint64_t)v143, (uint64_t)&v135, (uint64_t)&v170);
          if (SBYTE7(v171) < 0)
            operator delete((void *)v170);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (v144 < 0)
            operator delete(v143[0]);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::ostringstream::~ostringstream((uint64_t)v136);
        }
        v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"; at ", 5);
        v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)":", 1);
        std::ostream::operator<<();
        v93 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "DataError");
        std::stringbuf::str();
        addr_obj::Exception<std::runtime_error>::Exception(v93, (const void **)v136, (uint64_t)__p);
      }
      goto LABEL_91;
    case 8:
      v32 = atomic_load((unsigned __int8 *)&qword_1EDF50018);
      if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50018))
      {
        v153[0] = (void *)1;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, v153, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v98[0] = 1;
        v97[0] = 0;
        addr_obj::venue::Field::Field(&v183, v98, v97);
        v192[0] = 2;
        v186 = 0;
        addr_obj::venue::Field::Field(v185, v192, &v186);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, " ");
        addr_obj::venue::Decorator::Decorator(v143, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, v115, (__int128 **)&v113);
        v182 = 1;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v182, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v125 = 0;
        v126 = 1;
        addr_obj::venue::Field::Field(&v166, &v126, &v125);
        v124 = 2;
        v169 = 0;
        addr_obj::venue::Field::Field(v168, &v124, &v169);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v157, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v155, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)v157, (__int128 **)v155);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF50000, (__int128 **)&v187, 2uLL);
        for (i5 = 144; i5 != -144; i5 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i5));
        v99[0] = v155;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (i6 = 0; i6 != -15; i6 -= 3)
        {
          if (SHIBYTE(v142[i6 + 2]) < 0)
            operator delete(v142[i6]);
        }
        v136[0] = v157;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (i7 = 0; i7 != -12; i7 -= 3)
        {
          if (SHIBYTE(v152[i7 + 2]) < 0)
            operator delete(v152[i7]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        v136[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF50018);
      }
      v33 = atomic_load((unsigned __int8 *)&qword_1EDF50038);
      if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50038))
      {
        v153[0] = (void *)1;
        std::vector<unsigned long>::vector[abi:ne180100](&v183, v153, 1uLL);
        v167 = 0;
        v166 = 0;
        v168[0] = 0;
        v98[0] = 1;
        v97[0] = 0;
        addr_obj::venue::Field::Field(v157, v98, v97);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v133, v157, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v127, "");
        std::string::basic_string[abi:ne180100]<0>(v122, "");
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, ", ");
        addr_obj::venue::Decorator::Decorator(v143, &v127, v122, v120, v118);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v130, (addr_obj::venue::Decorator *)v143, 1uLL);
        addr_obj::venue::Template::Template(__p, &v183, &v166, &v133, &v130);
        std::string::basic_string[abi:ne180100]<0>(v180, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v116, (__int128 *)v180, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(v178, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)__p, (__int128 **)v116, v115);
        v192[0] = 1;
        std::vector<unsigned long>::vector[abi:ne180100](&v113, v192, 1uLL);
        v176 = 0uLL;
        v177 = 0;
        v186 = 1;
        v182 = 0;
        addr_obj::venue::Field::Field(v155, &v186, &v182);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v111, v155, 1uLL);
        v174 = 0u;
        v175 = 0u;
        v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v108, (addr_obj::venue::Decorator *)&v170, 1uLL);
        addr_obj::venue::Template::Template(&v135, &v113, &v176, &v111, &v108);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v106, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "CN");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v137 + 1, "HK");
        std::string::basic_string[abi:ne180100]<0>(&v139, "TW");
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v140 + 1, "JP");
        std::string::basic_string[abi:ne180100]<0>(v142, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v101, (__int128 *)v136, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v135, (__int128 **)&v106, v101);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF50020, (__int128 **)&v187, 2uLL);
        for (i8 = 144; i8 != -144; i8 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i8));
        v99[0] = v101;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
        for (i9 = 0; i9 != -15; i9 -= 3)
        {
          if (SHIBYTE(v142[i9 + 2]) < 0)
            operator delete(v142[i9]);
        }
        v136[0] = &v106;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        for (i10 = 0; i10 != -12; i10 -= 3)
        {
          if (SHIBYTE(v152[i10 + 2]) < 0)
            operator delete(v152[i10]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        v136[0] = &v108;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator((void **)&v170);
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        if ((_QWORD)v176)
        {
          *((_QWORD *)&v176 + 1) = v176;
          operator delete((void *)v176);
        }
        if (v113)
        {
          v114 = v113;
          operator delete(v113);
        }
        v136[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v179 < 0)
          operator delete(v178[0]);
        v136[0] = v116;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        if (v181 < 0)
          operator delete(v180[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
        v136[0] = &v130;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        addr_obj::venue::Decorator::~Decorator(v143);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v123 < 0)
          operator delete(v122[0]);
        if (v129 < 0)
          operator delete(v127);
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        if (v166)
        {
          v167 = v166;
          operator delete(v166);
        }
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        __cxa_guard_release(&qword_1EDF50038);
      }
      v34 = atomic_load((unsigned __int8 *)&qword_1EDF50058);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50058))
      {
        LODWORD(v187.__r_.__value_.__l.__data_) = 1;
        v188 = 0;
        *(_OWORD *)&v187.__r_.__value_.__r.__words[1] = 0uLL;
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v187.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF50000, unk_1EDF50008, 0x8E38E38E38E38E39 * ((unk_1EDF50008 - qword_1EDF50000) >> 4));
        v189 = 0;
        memset(v190, 0, 24);
        std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v190, (__int128 **)qword_1EDF50020, unk_1EDF50028, 0x8E38E38E38E38E39 * ((unk_1EDF50028 - qword_1EDF50020) >> 4));
        std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF50040, (int *)&v187, 2);
        for (i11 = 40; i11 != -24; i11 -= 32)
        {
          v136[0] = (char *)&v187 + i11;
          std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v136);
        }
        __cxa_guard_release(&qword_1EDF50058);
      }
      v35 = qword_1EDF50048;
      if (!qword_1EDF50048)
        goto LABEL_93;
      v10 = &qword_1EDF50048;
      do
      {
        v36 = *(_DWORD *)(v35 + 32);
        v37 = v36 < a2;
        if (v36 >= a2)
          v38 = (uint64_t *)v35;
        else
          v38 = (uint64_t *)(v35 + 8);
        if (!v37)
          v10 = (uint64_t *)v35;
        v35 = *v38;
      }
      while (*v38);
      if (v10 == &qword_1EDF50048 || *((_DWORD *)v10 + 8) > a2)
      {
LABEL_93:
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v187);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"Invalid LabelPattern enum: ", 27);
        v39 = (_QWORD *)std::ostream::operator<<();
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"; library version: ",
                19);
        v41 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"11.3.0", 6);
        if (addr_obj::Logger::isInitialized(v41))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v136);
          std::stringbuf::str();
          if ((SBYTE7(v160) & 0x80u) == 0)
            v42 = __p;
          else
            v42 = (void **)__p[0];
          if ((SBYTE7(v160) & 0x80u) == 0)
            v43 = BYTE7(v160);
          else
            v43 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v42, v43);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
          std::string::basic_string[abi:ne180100]<0>(v143, "ExteriorShort");
          std::stringbuf::str();
          std::string::basic_string[abi:ne180100]<0>(&v170, "");
          addr_obj::Logger::log(16, (uint64_t)__p, 548, (uint64_t)v143, (uint64_t)&v135, (uint64_t)&v170);
          if (SBYTE7(v171) < 0)
            operator delete((void *)v170);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          if (v144 < 0)
            operator delete(v143[0]);
          if (SBYTE7(v160) < 0)
            operator delete(__p[0]);
          std::ostringstream::~ostringstream((uint64_t)v136);
        }
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"; at ", 5);
        v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)":", 1);
        std::ostream::operator<<();
        v90 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
        std::string::basic_string[abi:ne180100]<0>(v136, "DataError");
        std::stringbuf::str();
        addr_obj::Exception<std::runtime_error>::Exception(v90, (const void **)v136, (uint64_t)__p);
      }
LABEL_91:
      result = v10 + 5;
      break;
    case 9:
      v5 = atomic_load((unsigned __int8 *)&qword_1EDF50078);
      if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50078))
      {
        v186 = 3;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, &v186, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v182 = 3;
        v126 = 0;
        addr_obj::venue::Field::Field(&v183, &v182, &v126);
        v125 = 5;
        v124 = 1;
        addr_obj::venue::Field::Field(v185, &v125, &v124);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        *(_OWORD *)v136 = 0u;
        v137 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "-");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, "");
        addr_obj::venue::Decorator::Decorator(v142, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v136, 2uLL);
        addr_obj::venue::Template::Template(&v135, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)&v135, v115, (__int128 **)&v113);
        v169 = 3;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v169, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v104 = 0;
        v105 = 3;
        addr_obj::venue::Field::Field(&v166, &v105, &v104);
        v103 = 5;
        v102 = 1;
        addr_obj::venue::Field::Field(v168, &v103, &v102);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        *(_OWORD *)__p = 0u;
        v160 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v157, "");
        std::string::basic_string[abi:ne180100]<0>(v155, "-");
        std::string::basic_string[abi:ne180100]<0>(v99, "");
        std::string::basic_string[abi:ne180100]<0>(v153, "");
        addr_obj::venue::Decorator::Decorator(v165, v157, v155, v99, v153);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)__p, 2uLL);
        addr_obj::venue::Template::Template(&v170, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v98, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v143, "CN");
        std::string::basic_string[abi:ne180100]<0>(v145, "HK");
        std::string::basic_string[abi:ne180100]<0>(v146, "TW");
        std::string::basic_string[abi:ne180100]<0>(v147, "JP");
        std::string::basic_string[abi:ne180100]<0>(v148, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v97, (__int128 *)v143, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v170, (__int128 **)v98, (__int128 **)v97);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&unk_1EDF50060, (__int128 **)&v187, 2uLL);
        for (i12 = 144; i12 != -144; i12 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i12));
        v192[0] = (unint64_t)v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v192);
        for (i13 = 0; i13 != -15; i13 -= 3)
        {
          if (SHIBYTE(v148[i13 + 2]) < 0)
            operator delete((void *)v148[i13]);
        }
        v143[0] = v98;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i14 = 0; i14 != -12; i14 -= 3)
        {
          if (SHIBYTE(v152[i14 + 2]) < 0)
            operator delete(v152[i14]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v170);
        v143[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i15 = 12; i15 != -12; i15 -= 12)
          addr_obj::venue::Decorator::~Decorator(&__p[i15]);
        if (v154 < 0)
          operator delete(v153[0]);
        if (v100 < 0)
          operator delete(v99[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        if (v158 < 0)
          operator delete(v157[0]);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        __p[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        __p[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        __p[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        for (i16 = 12; i16 != -12; i16 -= 12)
          addr_obj::venue::Decorator::~Decorator(&v136[i16]);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF50078);
      }
      result = (uint64_t *)&unk_1EDF50060;
      break;
    case 10:
      v31 = atomic_load((unsigned __int8 *)&qword_1EDF50098);
      if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50098))
      {
        v186 = 3;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, &v186, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v182 = 3;
        v126 = 0;
        addr_obj::venue::Field::Field(&v183, &v182, &v126);
        v125 = 6;
        v124 = 1;
        addr_obj::venue::Field::Field(v185, &v125, &v124);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        *(_OWORD *)v136 = 0u;
        v137 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "-");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, "");
        addr_obj::venue::Decorator::Decorator(v142, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v136, 2uLL);
        addr_obj::venue::Template::Template(&v135, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)&v135, v115, (__int128 **)&v113);
        v169 = 3;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v169, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v104 = 0;
        v105 = 3;
        addr_obj::venue::Field::Field(&v166, &v105, &v104);
        v103 = 6;
        v102 = 1;
        addr_obj::venue::Field::Field(v168, &v103, &v102);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        *(_OWORD *)__p = 0u;
        v160 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v157, "");
        std::string::basic_string[abi:ne180100]<0>(v155, "-");
        std::string::basic_string[abi:ne180100]<0>(v99, "");
        std::string::basic_string[abi:ne180100]<0>(v153, "");
        addr_obj::venue::Decorator::Decorator(v165, v157, v155, v99, v153);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)__p, 2uLL);
        addr_obj::venue::Template::Template(&v170, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v98, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v143, "CN");
        std::string::basic_string[abi:ne180100]<0>(v145, "HK");
        std::string::basic_string[abi:ne180100]<0>(v146, "TW");
        std::string::basic_string[abi:ne180100]<0>(v147, "JP");
        std::string::basic_string[abi:ne180100]<0>(v148, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v97, (__int128 *)v143, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v170, (__int128 **)v98, (__int128 **)v97);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&unk_1EDF50080, (__int128 **)&v187, 2uLL);
        for (i17 = 144; i17 != -144; i17 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i17));
        v192[0] = (unint64_t)v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v192);
        for (i18 = 0; i18 != -15; i18 -= 3)
        {
          if (SHIBYTE(v148[i18 + 2]) < 0)
            operator delete((void *)v148[i18]);
        }
        v143[0] = v98;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i19 = 0; i19 != -12; i19 -= 3)
        {
          if (SHIBYTE(v152[i19 + 2]) < 0)
            operator delete(v152[i19]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v170);
        v143[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i20 = 12; i20 != -12; i20 -= 12)
          addr_obj::venue::Decorator::~Decorator(&__p[i20]);
        if (v154 < 0)
          operator delete(v153[0]);
        if (v100 < 0)
          operator delete(v99[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        if (v158 < 0)
          operator delete(v157[0]);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        __p[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        __p[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        __p[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        for (i21 = 12; i21 != -12; i21 -= 12)
          addr_obj::venue::Decorator::~Decorator(&v136[i21]);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF50098);
      }
      result = (uint64_t *)&unk_1EDF50080;
      break;
    case 11:
      v4 = atomic_load((unsigned __int8 *)&qword_1EDF500B8);
      if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF500B8))
      {
        v186 = 4;
        std::vector<unsigned long>::vector[abi:ne180100](&v133, &v186, 1uLL);
        v130 = 0;
        v131 = 0;
        v132 = 0;
        v182 = 4;
        v126 = 0;
        addr_obj::venue::Field::Field(&v183, &v182, &v126);
        v125 = 6;
        v124 = 1;
        addr_obj::venue::Field::Field(v185, &v125, &v124);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v127, &v183, 2uLL);
        v140 = 0u;
        v141 = 0u;
        v138 = 0u;
        v139 = 0u;
        *(_OWORD *)v136 = 0u;
        v137 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v120, "");
        std::string::basic_string[abi:ne180100]<0>(v118, "-");
        std::string::basic_string[abi:ne180100]<0>(v116, "");
        std::string::basic_string[abi:ne180100]<0>(v180, "");
        addr_obj::venue::Decorator::Decorator(v142, v120, v118, v116, v180);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v122, (addr_obj::venue::Decorator *)v136, 2uLL);
        addr_obj::venue::Template::Template(&v135, &v133, &v130, &v127, v122);
        std::string::basic_string[abi:ne180100]<0>(v178, "qq");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v115, (__int128 *)v178, 1uLL);
        std::string::basic_string[abi:ne180100]<0>(&v176, "ZZZ");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v113, &v176, 1uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v187, (const addr_obj::venue::Template *)&v135, v115, (__int128 **)&v113);
        v169 = 4;
        std::vector<unsigned long>::vector[abi:ne180100](&v111, &v169, 1uLL);
        v108 = 0;
        v109 = 0;
        v110 = 0;
        v104 = 0;
        v105 = 4;
        addr_obj::venue::Field::Field(&v166, &v105, &v104);
        v103 = 6;
        v102 = 1;
        addr_obj::venue::Field::Field(v168, &v103, &v102);
        std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v106, &v166, 2uLL);
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        *(_OWORD *)__p = 0u;
        v160 = 0u;
        std::string::basic_string[abi:ne180100]<0>(v157, "");
        std::string::basic_string[abi:ne180100]<0>(v155, "-");
        std::string::basic_string[abi:ne180100]<0>(v99, "");
        std::string::basic_string[abi:ne180100]<0>(v153, "");
        addr_obj::venue::Decorator::Decorator(v165, v157, v155, v99, v153);
        std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v101, (addr_obj::venue::Decorator *)__p, 2uLL);
        addr_obj::venue::Template::Template(&v170, &v111, &v108, &v106, v101);
        std::string::basic_string[abi:ne180100]<0>(&v149, "zh-Hans");
        std::string::basic_string[abi:ne180100]<0>(v150, "zh-Hant");
        std::string::basic_string[abi:ne180100]<0>(v151, "ja");
        std::string::basic_string[abi:ne180100]<0>(v152, "ko");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v98, &v149, 4uLL);
        std::string::basic_string[abi:ne180100]<0>(v143, "CN");
        std::string::basic_string[abi:ne180100]<0>(v145, "HK");
        std::string::basic_string[abi:ne180100]<0>(v146, "TW");
        std::string::basic_string[abi:ne180100]<0>(v147, "JP");
        std::string::basic_string[abi:ne180100]<0>(v148, "KO");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)v97, (__int128 *)v143, 5uLL);
        addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v191, (const addr_obj::venue::Template *)&v170, (__int128 **)v98, (__int128 **)v97);
        std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&unk_1EDF500A0, (__int128 **)&v187, 2uLL);
        for (i22 = 144; i22 != -144; i22 -= 144)
          addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v187 + i22));
        v192[0] = (unint64_t)v97;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v192);
        for (i23 = 0; i23 != -15; i23 -= 3)
        {
          if (SHIBYTE(v148[i23 + 2]) < 0)
            operator delete((void *)v148[i23]);
        }
        v143[0] = v98;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i24 = 0; i24 != -12; i24 -= 3)
        {
          if (SHIBYTE(v152[i24 + 2]) < 0)
            operator delete(v152[i24]);
        }
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v170);
        v143[0] = v101;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v143);
        for (i25 = 12; i25 != -12; i25 -= 12)
          addr_obj::venue::Decorator::~Decorator(&__p[i25]);
        if (v154 < 0)
          operator delete(v153[0]);
        if (v100 < 0)
          operator delete(v99[0]);
        if (v156 < 0)
          operator delete(v155[0]);
        if (v158 < 0)
          operator delete(v157[0]);
        if (v106)
        {
          v107 = v106;
          operator delete(v106);
        }
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        if (v111)
        {
          v112 = v111;
          operator delete(v111);
        }
        __p[0] = &v113;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v177) < 0)
          operator delete((void *)v176);
        __p[0] = v115;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v179 < 0)
          operator delete(v178[0]);
        addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v135);
        __p[0] = v122;
        std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        for (i26 = 12; i26 != -12; i26 -= 12)
          addr_obj::venue::Decorator::~Decorator(&v136[i26]);
        if (v181 < 0)
          operator delete(v180[0]);
        if (v117 < 0)
          operator delete(v116[0]);
        if (v119 < 0)
          operator delete(v118[0]);
        if (v121 < 0)
          operator delete(v120[0]);
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        if (v130)
        {
          v131 = v130;
          operator delete(v130);
        }
        if (v133)
        {
          v134 = v133;
          operator delete(v133);
        }
        __cxa_guard_release(&qword_1EDF500B8);
      }
      result = (uint64_t *)&unk_1EDF500A0;
      break;
    case 12:
      result = sub_18879E7BC(a2);
      break;
    case 13:
      result = sub_1887A0548(a2);
      break;
    default:
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v187);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"Invalid TemplateStyle enum: ", 28);
      v80 = (_QWORD *)std::ostream::operator<<();
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"; library version: ",
              19);
      v82 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"11.3.0", 6);
      if (addr_obj::Logger::isInitialized(v82))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v136);
        std::stringbuf::str();
        if ((SBYTE7(v160) & 0x80u) == 0)
          v83 = __p;
        else
          v83 = (void **)__p[0];
        if ((SBYTE7(v160) & 0x80u) == 0)
          v84 = BYTE7(v160);
        else
          v84 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v83, v84);
        if (SBYTE7(v160) < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
        std::string::basic_string[abi:ne180100]<0>(v143, "LocalizedTemplatesForStyleAndPattern");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&v170, "");
        addr_obj::Logger::log(16, (uint64_t)__p, 674, (uint64_t)v143, (uint64_t)&v135, (uint64_t)&v170);
        if (SBYTE7(v171) < 0)
          operator delete((void *)v170);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        if (v144 < 0)
          operator delete(v143[0]);
        if (SBYTE7(v160) < 0)
          operator delete(__p[0]);
        std::ostringstream::~ostringstream((uint64_t)v136);
      }
      v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v187, (uint64_t)"; at ", 5);
      v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)":", 1);
      std::ostream::operator<<();
      v87 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(v136, "DataError");
      std::stringbuf::str();
      addr_obj::Exception<std::runtime_error>::Exception(v87, (const void **)v136, (uint64_t)__p);
  }
  return result;
}

void sub_1887925E0()
{
  __cxa_end_catch();
  JUMPOUT(0x188792604);
}

void sub_188792600(_Unwind_Exception *a1)
{
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x620]);
  _Unwind_Resume(a1);
}

uint64_t *sub_18879261C(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  _QWORD *v24;
  _QWORD *v25;
  std::runtime_error *exception;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 *v31[3];
  __int128 *v32[3];
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  void *v39[2];
  char v40;
  _BYTE v41[24];
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  __int128 *v51[3];
  __int128 *v52[3];
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _BYTE v61[24];
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  __int128 **v72;
  void *v73[2];
  _OWORD v74[2];
  _OWORD v75[3];
  void *v76[22];
  void *__p[2];
  unsigned __int8 v78;
  _QWORD v79[3];
  _QWORD v80[3];
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[2];
  _QWORD v84[2];
  uint64_t v85;
  _QWORD v86[2];
  _QWORD v87[2];
  uint64_t v88;
  __int128 v89;
  _QWORD v90[3];
  _QWORD v91[3];
  void *v92[3];
  void *v93[2];
  char v94;
  unint64_t v95;
  __int128 v96;
  unint64_t v97;
  std::string v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  __int128 v105;
  uint64_t v106;
  std::string v107;
  uint64_t v108;
  int v109;
  std::string v110[4];
  std::string v111[6];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FD18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FD18))
  {
    v106 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v70, &v106, 1uLL);
    v105 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v68, &v105, 2uLL);
    v64 = 0;
    v65 = 0;
    addr_obj::venue::Field::Field(v86, &v65, &v64);
    v62 = 0;
    v63 = 3;
    addr_obj::venue::Field::Field(v87, &v63, &v62);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v66, v86, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, ", ");
    addr_obj::venue::Decorator::Decorator(v103, v59, v57, v55, v53);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)v103, 1uLL);
    addr_obj::venue::Template::Template(__p, &v70, &v68, &v66, v61);
    std::string::basic_string[abi:ne180100]<0>(v101, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v52, (__int128 *)v101, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v99, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, (__int128 *)v99, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v107, (const addr_obj::venue::Template *)__p, v52, v51);
    v97 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v49, &v97, 1uLL);
    v96 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v47, &v96, 2uLL);
    v44 = 0;
    v95 = 0;
    addr_obj::venue::Field::Field(v83, &v44, &v95);
    v42 = 0;
    v43 = 3;
    addr_obj::venue::Field::Field(v84, &v43, &v42);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v45, v83, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v39, "");
    std::string::basic_string[abi:ne180100]<0>(v37, "");
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    std::string::basic_string[abi:ne180100]<0>(v33, " ");
    addr_obj::venue::Decorator::Decorator(v93, v39, v37, v35, v33);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v41, (addr_obj::venue::Decorator *)v93, 1uLL);
    addr_obj::venue::Template::Template(&v98, &v49, &v47, &v45, v41);
    std::string::basic_string[abi:ne180100]<0>(&v89, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v90, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v91, "ja");
    std::string::basic_string[abi:ne180100]<0>(v92, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v32, &v89, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "CN");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v74 + 1, "HK");
    std::string::basic_string[abi:ne180100]<0>(v75, "TW");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v75[1] + 1, "JP");
    std::string::basic_string[abi:ne180100]<0>(v76, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, (__int128 *)v73, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v111, (const addr_obj::venue::Template *)&v98, v32, v31);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FD00, (__int128 **)&v107, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v107 + i));
    v72 = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v76[j + 2]) < 0)
        operator delete(v76[j]);
    }
    v73[0] = v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v92[k + 2]) < 0)
        operator delete(v92[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v98);
    v73[0] = v41;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    addr_obj::venue::Decorator::~Decorator(v93);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v38 < 0)
      operator delete(v37[0]);
    if (v40 < 0)
      operator delete(v39[0]);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    v73[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    if (v100 < 0)
      operator delete(v99[0]);
    v73[0] = v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    if (v102 < 0)
      operator delete(v101[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
    v73[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    addr_obj::venue::Decorator::~Decorator(v103);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __cxa_guard_release(&qword_1EDF4FD18);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FD38);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FD38))
  {
    v106 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v70, &v106, 1uLL);
    v105 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v68, &v105, 2uLL);
    v64 = 0;
    v65 = 0;
    addr_obj::venue::Field::Field(v86, &v65, &v64);
    v62 = 0;
    v63 = 2;
    addr_obj::venue::Field::Field(v87, &v63, &v62);
    v97 = 3;
    v44 = 0;
    addr_obj::venue::Field::Field(&v88, &v97, &v44);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v66, v86, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, ", ");
    addr_obj::venue::Decorator::Decorator(&v98, v59, v57, v55, v53);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)&v98, 1uLL);
    addr_obj::venue::Template::Template(v103, &v70, &v68, &v66, v61);
    std::string::basic_string[abi:ne180100]<0>(v101, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v52, (__int128 *)v101, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v99, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, (__int128 *)v99, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v107, (const addr_obj::venue::Template *)v103, v52, v51);
    v95 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v49, &v95, 1uLL);
    v96 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v47, &v96, 2uLL);
    v42 = 0;
    v43 = 0;
    addr_obj::venue::Field::Field(v83, &v43, &v42);
    v29 = 0;
    v30 = 2;
    addr_obj::venue::Field::Field(v84, &v30, &v29);
    v28 = 3;
    v27 = 1;
    addr_obj::venue::Field::Field(&v85, &v28, &v27);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v45, v83, 3uLL);
    memset(v75, 0, sizeof(v75));
    *(_OWORD *)v73 = 0u;
    memset(v74, 0, sizeof(v74));
    std::string::basic_string[abi:ne180100]<0>(v39, " ");
    std::string::basic_string[abi:ne180100]<0>(v37, "");
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    addr_obj::venue::Decorator::Decorator(v76, v39, v37, v35, v33);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v41, (addr_obj::venue::Decorator *)v73, 2uLL);
    addr_obj::venue::Template::Template(v93, &v49, &v47, &v45, v41);
    std::string::basic_string[abi:ne180100]<0>(&v89, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v90, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v91, "ja");
    std::string::basic_string[abi:ne180100]<0>(v92, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v32, &v89, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "CN");
    std::string::basic_string[abi:ne180100]<0>(v79, "HK");
    std::string::basic_string[abi:ne180100]<0>(v80, "TW");
    std::string::basic_string[abi:ne180100]<0>(v81, "JP");
    std::string::basic_string[abi:ne180100]<0>(v82, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, (__int128 *)__p, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v111, (const addr_obj::venue::Template *)v93, v32, v31);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FD20, (__int128 **)&v107, 2uLL);
    for (m = 144; m != -144; m -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v107 + m));
    v72 = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v72);
    for (n = 0; n != -15; n -= 3)
    {
      if (SHIBYTE(v82[n + 2]) < 0)
        operator delete((void *)v82[n]);
    }
    __p[0] = v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (ii = 0; ii != -12; ii -= 3)
    {
      if (SHIBYTE(v92[ii + 2]) < 0)
        operator delete(v92[ii]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v93);
    __p[0] = v41;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (jj = 12; jj != -12; jj -= 12)
      addr_obj::venue::Decorator::~Decorator(&v73[jj]);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v38 < 0)
      operator delete(v37[0]);
    if (v40 < 0)
      operator delete(v39[0]);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    v73[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    if (v100 < 0)
      operator delete(v99[0]);
    v73[0] = v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    if (v102 < 0)
      operator delete(v101[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v103);
    v73[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    addr_obj::venue::Decorator::~Decorator((void **)&v98.__r_.__value_.__l.__data_);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v66)
    {
      v67 = v66;
      operator delete(v66);
    }
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    if (v70)
    {
      v71 = v70;
      operator delete(v70);
    }
    __cxa_guard_release(&qword_1EDF4FD38);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FD58);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FD58))
  {
    LODWORD(v107.__r_.__value_.__l.__data_) = 1;
    v108 = 0;
    *(_OWORD *)&v107.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v107.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FD20, unk_1EDF4FD28, 0x8E38E38E38E38E39 * ((unk_1EDF4FD28 - qword_1EDF4FD20) >> 4));
    v109 = 0;
    memset(v110, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v110, (__int128 **)qword_1EDF4FD00, unk_1EDF4FD08, 0x8E38E38E38E38E39 * ((unk_1EDF4FD08 - qword_1EDF4FD00) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FD40, (int *)&v107, 2);
    for (kk = 40; kk != -24; kk -= 32)
    {
      v73[0] = (char *)&v107 + kk;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
    }
    __cxa_guard_release(&qword_1EDF4FD58);
  }
  v5 = qword_1EDF4FD48;
  if (!qword_1EDF4FD48)
    goto LABEL_15;
  v6 = &qword_1EDF4FD48;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FD48 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v73);
      std::stringbuf::str();
      if ((v78 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((v78 & 0x80u) == 0)
        v15 = v78;
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v14, v15);
      if ((char)v78 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v103, "Long");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v93, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 84, (uint64_t)v103, (uint64_t)&v98, (uint64_t)v93);
      if (v94 < 0)
        operator delete(v93[0]);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v104 < 0)
        operator delete(v103[0]);
      if ((char)v78 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v73);
    }
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"; at ", 5);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v73, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v73, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_188794120()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x377]) < 0)
    operator delete((void *)STACK[0x360]);
  if (SLOBYTE(STACK[0x267]) < 0)
  {
    operator delete((void *)STACK[0x250]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x1887941B0);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_18879417C(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1887941B8(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  _QWORD *v27;
  _QWORD *v28;
  std::runtime_error *exception;
  __int128 *v30[3];
  __int128 *v31[3];
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  _BYTE v40[24];
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56[2];
  char v57;
  __int128 *v58[3];
  __int128 *v59[3];
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  _BYTE v76[24];
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  std::string v92;
  __int128 **v93;
  void *v94[2];
  char v95;
  _QWORD v96[3];
  _QWORD v97[3];
  _QWORD v98[3];
  _QWORD v99[4];
  __int128 v100;
  _QWORD v101[3];
  _QWORD v102[3];
  _QWORD v103[3];
  void *__p[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[96];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  void *v121[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[96];
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[2];
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  std::string v135;
  uint64_t v136;
  int v137;
  std::string v138[4];
  std::string v139[6];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FD78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FD78))
  {
    v133 = xmmword_189C5BC10;
    v134 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](&v90, &v133, 3uLL);
    v88 = 0;
    v87 = 0;
    v89 = 0;
    v84 = 0;
    v83 = 0;
    addr_obj::venue::Field::Field(v129, &v84, &v83);
    v82 = 2;
    v81 = 0;
    addr_obj::venue::Field::Field(v130, &v82, &v81);
    v80 = 3;
    v79 = 1;
    addr_obj::venue::Field::Field(v131, &v80, &v79);
    v78 = 5;
    v77 = 2;
    addr_obj::venue::Field::Field(&v132, &v78, &v77);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v85, v129, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, ", ");
    addr_obj::venue::Decorator::Decorator(v121, v74, v72, v70, v68);
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v66, "");
    std::string::basic_string[abi:ne180100]<0>(v64, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v60, ", ");
    addr_obj::venue::Decorator::Decorator(v128, v66, v64, v62, v60);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v76, (addr_obj::venue::Decorator *)v121, 3uLL);
    addr_obj::venue::Template::Template(&v92, &v90, &v87, &v85, v76);
    std::string::basic_string[abi:ne180100]<0>(v119, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v59, (__int128 *)v119, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v117, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v58, (__int128 *)v117, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v135, (const addr_obj::venue::Template *)&v92, v59, v58);
    v115 = xmmword_189C5BC10;
    v116 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](&v54, &v115, 3uLL);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v47 = 0;
    v48 = 0;
    addr_obj::venue::Field::Field(v111, &v48, &v47);
    v45 = 0;
    v46 = 2;
    addr_obj::venue::Field::Field(v112, &v46, &v45);
    v44 = 3;
    v43 = 1;
    addr_obj::venue::Field::Field(v113, &v44, &v43);
    v41 = 0;
    v42 = 5;
    addr_obj::venue::Field::Field(&v114, &v42, &v41);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v49, v111, 4uLL);
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    *(_OWORD *)__p = 0u;
    v105 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v110, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, &v54, &v51, &v49, v40);
    std::string::basic_string[abi:ne180100]<0>(&v100, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v101, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v102, "ja");
    std::string::basic_string[abi:ne180100]<0>(v103, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v100, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v94, "CN");
    std::string::basic_string[abi:ne180100]<0>(v96, "HK");
    std::string::basic_string[abi:ne180100]<0>(v97, "TW");
    std::string::basic_string[abi:ne180100]<0>(v98, "JP");
    std::string::basic_string[abi:ne180100]<0>(v99, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v94, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v139, (const addr_obj::venue::Template *)v56, v31, v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FD60, (__int128 **)&v135, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v135 + i));
    v93 = v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v99[j + 2]) < 0)
        operator delete((void *)v99[j]);
    }
    v94[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v103[k + 2]) < 0)
        operator delete((void *)v103[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v94[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    __p[0] = v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v118 < 0)
      operator delete(v117[0]);
    __p[0] = v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v120 < 0)
      operator delete(v119[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v92);
    __p[0] = v76;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 24; n != -12; n -= 12)
      addr_obj::venue::Decorator::~Decorator(&v121[n]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    __cxa_guard_release(&qword_1EDF4FD78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FD98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FD98))
  {
    v133 = xmmword_189C5BC10;
    v134 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](&v90, &v133, 3uLL);
    v88 = 0;
    v87 = 0;
    v89 = 0;
    v84 = 0;
    v83 = 0;
    addr_obj::venue::Field::Field(v129, &v84, &v83);
    v82 = 3;
    v81 = 1;
    addr_obj::venue::Field::Field(v130, &v82, &v81);
    v80 = 5;
    v79 = 2;
    addr_obj::venue::Field::Field(v131, &v80, &v79);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v85, v129, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, ", ");
    addr_obj::venue::Decorator::Decorator(v121, v74, v72, v70, v68);
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v66, "");
    std::string::basic_string[abi:ne180100]<0>(v64, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v60, ", ");
    addr_obj::venue::Decorator::Decorator(v128, v66, v64, v62, v60);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v76, (addr_obj::venue::Decorator *)v121, 3uLL);
    addr_obj::venue::Template::Template(&v92, &v90, &v87, &v85, v76);
    std::string::basic_string[abi:ne180100]<0>(v119, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v59, (__int128 *)v119, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v117, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v58, (__int128 *)v117, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v135, (const addr_obj::venue::Template *)&v92, v59, v58);
    v115 = xmmword_189C5BC10;
    v116 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](&v54, &v115, 3uLL);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v78 = 0;
    v77 = 0;
    addr_obj::venue::Field::Field(v111, &v78, &v77);
    v48 = 3;
    v47 = 1;
    addr_obj::venue::Field::Field(v112, &v48, &v47);
    v45 = 0;
    v46 = 5;
    addr_obj::venue::Field::Field(v113, &v46, &v45);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v49, v111, 3uLL);
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    *(_OWORD *)__p = 0u;
    v105 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v110, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, &v54, &v51, &v49, v40);
    std::string::basic_string[abi:ne180100]<0>(&v100, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v101, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v102, "ja");
    std::string::basic_string[abi:ne180100]<0>(v103, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v100, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v94, "CN");
    std::string::basic_string[abi:ne180100]<0>(v96, "HK");
    std::string::basic_string[abi:ne180100]<0>(v97, "TW");
    std::string::basic_string[abi:ne180100]<0>(v98, "JP");
    std::string::basic_string[abi:ne180100]<0>(v99, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v94, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v139, (const addr_obj::venue::Template *)v56, v31, v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FD80, (__int128 **)&v135, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v135 + ii));
    v93 = v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v99[jj + 2]) < 0)
        operator delete((void *)v99[jj]);
    }
    v94[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v103[kk + 2]) < 0)
        operator delete((void *)v103[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v94[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (mm = 12; mm != -12; mm -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[mm]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    __p[0] = v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v118 < 0)
      operator delete(v117[0]);
    __p[0] = v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v120 < 0)
      operator delete(v119[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v92);
    __p[0] = v76;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (nn = 24; nn != -12; nn -= 12)
      addr_obj::venue::Decorator::~Decorator(&v121[nn]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    __cxa_guard_release(&qword_1EDF4FD98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FDB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FDB8))
  {
    LODWORD(v135.__r_.__value_.__l.__data_) = 1;
    v136 = 0;
    *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v135.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FD60, unk_1EDF4FD68, 0x8E38E38E38E38E39 * ((unk_1EDF4FD68 - qword_1EDF4FD60) >> 4));
    v137 = 0;
    memset(v138, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v138, (__int128 **)qword_1EDF4FD80, unk_1EDF4FD88, 0x8E38E38E38E38E39 * ((unk_1EDF4FD88 - qword_1EDF4FD80) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FDA0, (int *)&v135, 2);
    for (i1 = 40; i1 != -24; i1 -= 32)
    {
      v121[0] = (char *)&v135 + i1;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
    }
    __cxa_guard_release(&qword_1EDF4FDB8);
  }
  v5 = qword_1EDF4FDA8;
  if (!qword_1EDF4FDA8)
    goto LABEL_15;
  v6 = &qword_1EDF4FDA8;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FDA8 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v135, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v121);
      std::stringbuf::str();
      if ((SBYTE7(v105) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v105) & 0x80u) == 0)
        v15 = BYTE7(v105);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v14, v15);
      if (SBYTE7(v105) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v94, "LongWithUpper");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 138, (uint64_t)v94, (uint64_t)&v92, (uint64_t)v56);
      if (v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (v95 < 0)
        operator delete(v94[0]);
      if (SBYTE7(v105) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v121);
    }
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v135, (uint64_t)"; at ", 5);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v121, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v121, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_18879613C()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
  {
    operator delete((void *)STACK[0x5D0]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x1887961CCLL);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_188796198(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1887961D4(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  _QWORD *v27;
  _QWORD *v28;
  std::runtime_error *exception;
  __int128 *v30[3];
  __int128 *v31[3];
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  _BYTE v40[24];
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56[2];
  char v57;
  __int128 *v58[3];
  __int128 *v59[3];
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  _BYTE v76[24];
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  uint64_t v89;
  void *v90;
  void *v91;
  std::string v92;
  __int128 **v93;
  void *v94[2];
  char v95;
  _QWORD v96[3];
  _QWORD v97[3];
  _QWORD v98[3];
  _QWORD v99[4];
  __int128 v100;
  _QWORD v101[3];
  _QWORD v102[3];
  _QWORD v103[3];
  void *__p[2];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[96];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  void *v117[2];
  char v118;
  void *v119[2];
  char v120;
  void *v121[2];
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[96];
  _QWORD v129[2];
  _QWORD v130[2];
  _QWORD v131[2];
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  std::string v135;
  uint64_t v136;
  int v137;
  std::string v138[4];
  std::string v139[6];
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FDD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FDD8))
  {
    v133 = xmmword_189C5BC28;
    v134 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v90, &v133, 3uLL);
    v88 = 0;
    v87 = 0;
    v89 = 0;
    v84 = 0;
    v83 = 0;
    addr_obj::venue::Field::Field(v129, &v84, &v83);
    v82 = 2;
    v81 = 0;
    addr_obj::venue::Field::Field(v130, &v82, &v81);
    v80 = 4;
    v79 = 1;
    addr_obj::venue::Field::Field(v131, &v80, &v79);
    v78 = 6;
    v77 = 2;
    addr_obj::venue::Field::Field(&v132, &v78, &v77);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v85, v129, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, ", ");
    addr_obj::venue::Decorator::Decorator(v121, v74, v72, v70, v68);
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v66, "");
    std::string::basic_string[abi:ne180100]<0>(v64, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v60, "");
    addr_obj::venue::Decorator::Decorator(v128, v66, v64, v62, v60);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v76, (addr_obj::venue::Decorator *)v121, 3uLL);
    addr_obj::venue::Template::Template(&v92, &v90, &v87, &v85, v76);
    std::string::basic_string[abi:ne180100]<0>(v119, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v59, (__int128 *)v119, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v117, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v58, (__int128 *)v117, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v135, (const addr_obj::venue::Template *)&v92, v59, v58);
    v115 = xmmword_189C5BC28;
    v116 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v54, &v115, 3uLL);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v47 = 0;
    v48 = 0;
    addr_obj::venue::Field::Field(v111, &v48, &v47);
    v45 = 0;
    v46 = 2;
    addr_obj::venue::Field::Field(v112, &v46, &v45);
    v44 = 4;
    v43 = 1;
    addr_obj::venue::Field::Field(v113, &v44, &v43);
    v41 = 0;
    v42 = 6;
    addr_obj::venue::Field::Field(&v114, &v42, &v41);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v49, v111, 4uLL);
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    *(_OWORD *)__p = 0u;
    v105 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v110, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, &v54, &v51, &v49, v40);
    std::string::basic_string[abi:ne180100]<0>(&v100, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v101, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v102, "ja");
    std::string::basic_string[abi:ne180100]<0>(v103, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v100, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v94, "CN");
    std::string::basic_string[abi:ne180100]<0>(v96, "HK");
    std::string::basic_string[abi:ne180100]<0>(v97, "TW");
    std::string::basic_string[abi:ne180100]<0>(v98, "JP");
    std::string::basic_string[abi:ne180100]<0>(v99, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v94, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v139, (const addr_obj::venue::Template *)v56, v31, v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FDC0, (__int128 **)&v135, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v135 + i));
    v93 = v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v99[j + 2]) < 0)
        operator delete((void *)v99[j]);
    }
    v94[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v103[k + 2]) < 0)
        operator delete((void *)v103[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v94[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    __p[0] = v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v118 < 0)
      operator delete(v117[0]);
    __p[0] = v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v120 < 0)
      operator delete(v119[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v92);
    __p[0] = v76;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 24; n != -12; n -= 12)
      addr_obj::venue::Decorator::~Decorator(&v121[n]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    __cxa_guard_release(&qword_1EDF4FDD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FDF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FDF8))
  {
    v133 = xmmword_189C5BC28;
    v134 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v90, &v133, 3uLL);
    v88 = 0;
    v87 = 0;
    v89 = 0;
    v84 = 0;
    v83 = 0;
    addr_obj::venue::Field::Field(v129, &v84, &v83);
    v82 = 4;
    v81 = 1;
    addr_obj::venue::Field::Field(v130, &v82, &v81);
    v80 = 6;
    v79 = 2;
    addr_obj::venue::Field::Field(v131, &v80, &v79);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v85, v129, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, ", ");
    addr_obj::venue::Decorator::Decorator(v121, v74, v72, v70, v68);
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v66, "");
    std::string::basic_string[abi:ne180100]<0>(v64, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v60, "");
    addr_obj::venue::Decorator::Decorator(v128, v66, v64, v62, v60);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v76, (addr_obj::venue::Decorator *)v121, 3uLL);
    addr_obj::venue::Template::Template(&v92, &v90, &v87, &v85, v76);
    std::string::basic_string[abi:ne180100]<0>(v119, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v59, (__int128 *)v119, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v117, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v58, (__int128 *)v117, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v135, (const addr_obj::venue::Template *)&v92, v59, v58);
    v115 = xmmword_189C5BC28;
    v116 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v54, &v115, 3uLL);
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v78 = 0;
    v77 = 0;
    addr_obj::venue::Field::Field(v111, &v78, &v77);
    v48 = 4;
    v47 = 1;
    addr_obj::venue::Field::Field(v112, &v48, &v47);
    v45 = 0;
    v46 = 6;
    addr_obj::venue::Field::Field(v113, &v46, &v45);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v49, v111, 3uLL);
    v108 = 0u;
    v109 = 0u;
    v106 = 0u;
    v107 = 0u;
    *(_OWORD *)__p = 0u;
    v105 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v110, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, &v54, &v51, &v49, v40);
    std::string::basic_string[abi:ne180100]<0>(&v100, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v101, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v102, "ja");
    std::string::basic_string[abi:ne180100]<0>(v103, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v100, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v94, "CN");
    std::string::basic_string[abi:ne180100]<0>(v96, "HK");
    std::string::basic_string[abi:ne180100]<0>(v97, "TW");
    std::string::basic_string[abi:ne180100]<0>(v98, "JP");
    std::string::basic_string[abi:ne180100]<0>(v99, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v94, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v139, (const addr_obj::venue::Template *)v56, v31, v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FDE0, (__int128 **)&v135, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v135 + ii));
    v93 = v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v93);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v99[jj + 2]) < 0)
        operator delete((void *)v99[jj]);
    }
    v94[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v103[kk + 2]) < 0)
        operator delete((void *)v103[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v94[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v94);
    for (mm = 12; mm != -12; mm -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[mm]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    if (v51)
    {
      v52 = v51;
      operator delete(v51);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    __p[0] = v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v118 < 0)
      operator delete(v117[0]);
    __p[0] = v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v120 < 0)
      operator delete(v119[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v92);
    __p[0] = v76;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (nn = 24; nn != -12; nn -= 12)
      addr_obj::venue::Decorator::~Decorator(&v121[nn]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v85)
    {
      v86 = v85;
      operator delete(v85);
    }
    if (v87)
    {
      v88 = v87;
      operator delete(v87);
    }
    if (v90)
    {
      v91 = v90;
      operator delete(v90);
    }
    __cxa_guard_release(&qword_1EDF4FDF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FE18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FE18))
  {
    LODWORD(v135.__r_.__value_.__l.__data_) = 1;
    v136 = 0;
    *(_OWORD *)&v135.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v135.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FDC0, unk_1EDF4FDC8, 0x8E38E38E38E38E39 * ((unk_1EDF4FDC8 - qword_1EDF4FDC0) >> 4));
    v137 = 0;
    memset(v138, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v138, (__int128 **)qword_1EDF4FDE0, unk_1EDF4FDE8, 0x8E38E38E38E38E39 * ((unk_1EDF4FDE8 - qword_1EDF4FDE0) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FE00, (int *)&v135, 2);
    for (i1 = 40; i1 != -24; i1 -= 32)
    {
      v121[0] = (char *)&v135 + i1;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v121);
    }
    __cxa_guard_release(&qword_1EDF4FE18);
  }
  v5 = qword_1EDF4FE08;
  if (!qword_1EDF4FE08)
    goto LABEL_15;
  v6 = &qword_1EDF4FE08;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FE08 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v135);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v135, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v121);
      std::stringbuf::str();
      if ((SBYTE7(v105) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v105) & 0x80u) == 0)
        v15 = BYTE7(v105);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v14, v15);
      if (SBYTE7(v105) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v94, "LongWithShortUpper");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 193, (uint64_t)v94, (uint64_t)&v92, (uint64_t)v56);
      if (v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (v95 < 0)
        operator delete(v94[0]);
      if (SBYTE7(v105) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v121);
    }
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v135, (uint64_t)"; at ", 5);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v121, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v121, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_188798158()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x497]) < 0)
    operator delete((void *)STACK[0x480]);
  if (SLOBYTE(STACK[0x5E7]) < 0)
  {
    operator delete((void *)STACK[0x5D0]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x1887981E8);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1887981B4(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1887981F0(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  unint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  unint64_t nn;
  uint64_t i1;
  _QWORD *v27;
  _QWORD *v28;
  std::runtime_error *exception;
  unint64_t v30[3];
  unint64_t v31[3];
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50[2];
  char v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55[3];
  void *v56[2];
  char v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61[3];
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  _BYTE v82[24];
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  std::string v98;
  unint64_t v99;
  void *v100[2];
  char v101;
  _QWORD v102[3];
  _QWORD v103[3];
  _QWORD v104[3];
  _QWORD v105[4];
  __int128 v106;
  _QWORD v107[3];
  _QWORD v108[3];
  _QWORD v109[3];
  void *__p[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[96];
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void *v123[2];
  char v124;
  __int128 v125;
  uint64_t v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::string v131;
  uint64_t v132;
  int v133;
  std::string v134[2];
  uint64_t v135;
  std::string v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[2];
  _QWORD v146[2];
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  std::string v150[4];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  std::string v154[2];
  _QWORD v155[13];

  v155[12] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FE98);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FE98))
  {
    v148 = xmmword_189C5BC40;
    v149 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v96, &v148, 3uLL);
    v94 = 0;
    v93 = 0;
    v95 = 0;
    v90 = 1;
    v89 = 0;
    addr_obj::venue::Field::Field(&v144, &v90, &v89);
    v88 = 2;
    v87 = 1;
    addr_obj::venue::Field::Field(v145, &v88, &v87);
    v86 = 4;
    v85 = 2;
    addr_obj::venue::Field::Field(v146, &v86, &v85);
    v84 = 6;
    v83 = 3;
    addr_obj::venue::Field::Field(&v147, &v84, &v83);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v91, &v144, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v80, "");
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, "");
    std::string::basic_string[abi:ne180100]<0>(v74, " ");
    addr_obj::venue::Decorator::Decorator(&v131, v80, v78, v76, v74);
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, "");
    std::string::basic_string[abi:ne180100]<0>(v66, ", ");
    addr_obj::venue::Decorator::Decorator(&v135, v72, v70, v68, v66);
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v64, "");
    std::string::basic_string[abi:ne180100]<0>(v129, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v127, ", ");
    addr_obj::venue::Decorator::Decorator(&v143, v64, v129, v62, v127);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v82, (addr_obj::venue::Decorator *)&v131, 4uLL);
    addr_obj::venue::Template::Template(&v98, &v96, &v93, &v91, v82);
    std::string::basic_string[abi:ne180100]<0>(&v125, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v61, &v125, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v123, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v58, (__int128 *)v123, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v150, (const addr_obj::venue::Template *)&v98, (__int128 **)v61, (__int128 **)&v58);
    v121 = xmmword_189C5BC40;
    v122 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](v55, &v121, 3uLL);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v48 = 0;
    v49 = 1;
    addr_obj::venue::Field::Field(v117, &v49, &v48);
    v46 = 0;
    v47 = 2;
    addr_obj::venue::Field::Field(v118, &v47, &v46);
    v45 = 4;
    v44 = 1;
    addr_obj::venue::Field::Field(v119, &v45, &v44);
    v42 = 0;
    v43 = 6;
    addr_obj::venue::Field::Field(&v120, &v43, &v42);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v50, v117, 4uLL);
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    *(_OWORD *)__p = 0u;
    v111 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v116, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, v55, &v52, v50, v40);
    std::string::basic_string[abi:ne180100]<0>(&v106, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v107, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v108, "ja");
    std::string::basic_string[abi:ne180100]<0>(v109, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v106, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v100, "CN");
    std::string::basic_string[abi:ne180100]<0>(v102, "HK");
    std::string::basic_string[abi:ne180100]<0>(v103, "TW");
    std::string::basic_string[abi:ne180100]<0>(v104, "JP");
    std::string::basic_string[abi:ne180100]<0>(v105, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v100, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v154, (const addr_obj::venue::Template *)v56, (__int128 **)v31, (__int128 **)v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FE80, (__int128 **)v150, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)&v150[i / 0x18]);
    v99 = (unint64_t)v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v105[j + 2]) < 0)
        operator delete((void *)v105[j]);
    }
    v100[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v109[k + 2]) < 0)
        operator delete((void *)v109[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v100[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v50[0])
    {
      v50[1] = v50[0];
      operator delete(v50[0]);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    __p[0] = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v124 < 0)
      operator delete(v123[0]);
    __p[0] = v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v126) < 0)
      operator delete((void *)v125);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v98);
    __p[0] = v82;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 288; n != -96; n -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)((char *)&v131.__r_.__value_.__l.__data_ + n));
    if (v128 < 0)
      operator delete(v127[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v130 < 0)
      operator delete(v129[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    __cxa_guard_release(&qword_1EDF4FE98);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FEB8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FEB8))
  {
    v148 = xmmword_189C5BC40;
    v149 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v96, &v148, 3uLL);
    v94 = 0;
    v93 = 0;
    v95 = 0;
    v32[0] = (void *)1;
    v31[0] = 0;
    addr_obj::venue::Field::Field(&v144, (const unint64_t *)v32, v31);
    v30[0] = 4;
    v99 = 1;
    addr_obj::venue::Field::Field(v145, v30, &v99);
    v90 = 6;
    v89 = 2;
    addr_obj::venue::Field::Field(v146, &v90, &v89);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v91, &v144, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v80, "");
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, "");
    std::string::basic_string[abi:ne180100]<0>(v74, ", ");
    addr_obj::venue::Decorator::Decorator(v150, v80, v78, v76, v74);
    memset(v154, 0, sizeof(v154));
    v153 = 0u;
    v152 = 0u;
    v151 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "-");
    std::string::basic_string[abi:ne180100]<0>(v68, "");
    std::string::basic_string[abi:ne180100]<0>(v66, ", ");
    addr_obj::venue::Decorator::Decorator(v155, v72, v70, v68, v66);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v82, (addr_obj::venue::Decorator *)v150, 3uLL);
    addr_obj::venue::Template::Template(&v98, &v96, &v93, &v91, v82);
    std::string::basic_string[abi:ne180100]<0>(v129, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)v129, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v127, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v62, (__int128 *)v127, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v131, (const addr_obj::venue::Template *)&v98, (__int128 **)v64, (__int128 **)v62);
    v125 = xmmword_189C5BC40;
    v126 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](v61, &v125, 3uLL);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v88 = 1;
    v87 = 0;
    addr_obj::venue::Field::Field(v117, &v88, &v87);
    v86 = 4;
    v85 = 1;
    addr_obj::venue::Field::Field(v118, &v86, &v85);
    v84 = 6;
    v83 = 0;
    addr_obj::venue::Field::Field(v119, &v84, &v83);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v123, v117, 3uLL);
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    *(_OWORD *)__p = 0u;
    v111 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v121, " ");
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    std::string::basic_string[abi:ne180100]<0>(v50, "-");
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    addr_obj::venue::Decorator::Decorator(v116, &v121, &v52, v50, v40);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v55, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, v61, &v58, v123, v55);
    std::string::basic_string[abi:ne180100]<0>(&v106, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v107, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v108, "ja");
    std::string::basic_string[abi:ne180100]<0>(v109, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v38, &v106, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v100, "CN");
    std::string::basic_string[abi:ne180100]<0>(v102, "HK");
    std::string::basic_string[abi:ne180100]<0>(v103, "TW");
    std::string::basic_string[abi:ne180100]<0>(v104, "JP");
    std::string::basic_string[abi:ne180100]<0>(v105, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v36, (__int128 *)v100, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v136, (const addr_obj::venue::Template *)v56, (__int128 **)v38, (__int128 **)v36);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FEA0, (__int128 **)&v131, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v131 + ii));
    v34[0] = v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v105[jj + 2]) < 0)
        operator delete((void *)v105[jj]);
    }
    v100[0] = v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v109[kk + 2]) < 0)
        operator delete((void *)v109[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v100[0] = v55;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (mm = 12; mm != -12; mm -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[mm]);
    if (v41 < 0)
      operator delete(v40[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    if (SHIBYTE(v54) < 0)
      operator delete(v52);
    if (SHIBYTE(v122) < 0)
      operator delete((void *)v121);
    if (v123[0])
    {
      v123[1] = v123[0];
      operator delete(v123[0]);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    __p[0] = v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v128 < 0)
      operator delete(v127[0]);
    __p[0] = v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v130 < 0)
      operator delete(v129[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v98);
    __p[0] = v82;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (nn = 192; nn != -96; nn -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)&v150[nn / 0x18].__r_.__value_.__l.__data_);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    __cxa_guard_release(&qword_1EDF4FEB8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FED8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FED8))
  {
    LODWORD(v131.__r_.__value_.__l.__data_) = 1;
    v132 = 0;
    *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v131.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FE80, unk_1EDF4FE88, 0x8E38E38E38E38E39 * ((unk_1EDF4FE88 - qword_1EDF4FE80) >> 4));
    v133 = 0;
    memset(v134, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v134, (__int128 **)qword_1EDF4FEA0, unk_1EDF4FEA8, 0x8E38E38E38E38E39 * ((unk_1EDF4FEA8 - qword_1EDF4FEA0) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FEC0, (int *)&v131, 2);
    for (i1 = 40; i1 != -24; i1 -= 32)
    {
      v150[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v131 + i1;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
    }
    __cxa_guard_release(&qword_1EDF4FED8);
  }
  v5 = qword_1EDF4FEC8;
  if (!qword_1EDF4FEC8)
    goto LABEL_15;
  v6 = &qword_1EDF4FEC8;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FEC8 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v131);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v131, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
      std::stringbuf::str();
      if ((SBYTE7(v111) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v111) & 0x80u) == 0)
        v15 = BYTE7(v111);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v14, v15);
      if (SBYTE7(v111) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v100, "ShortWithUpper");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 290, (uint64_t)v100, (uint64_t)&v98, (uint64_t)v56);
      if (v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v101 < 0)
        operator delete(v100[0]);
      if (SBYTE7(v111) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v150);
    }
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v131, (uint64_t)"; at ", 5);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v150, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v150[0].__r_.__value_.__l.__data_, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_18879A2E0()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x81F]) < 0)
  {
    operator delete((void *)STACK[0x808]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x18879A370);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_18879A33C(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_18879A378(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  unint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  uint64_t nn;
  uint64_t i1;
  unint64_t i2;
  uint64_t i3;
  _QWORD *v29;
  _QWORD *v30;
  std::runtime_error *exception;
  unint64_t v32[3];
  unint64_t v33[3];
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  void *v42[2];
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void *v52[2];
  char v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57[3];
  void *v58[2];
  char v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63[3];
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  void *v82[2];
  char v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void *v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  std::string v103;
  _QWORD v104[3];
  _QWORD v105[3];
  _QWORD v106[3];
  _QWORD v107[3];
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[3];
  _QWORD v113[3];
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[2];
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[6];
  void *v121[2];
  uint64_t v122;
  uint64_t v123;
  void *v124[2];
  char v125;
  _QWORD v126[3];
  _QWORD v127[3];
  _QWORD v128[3];
  _QWORD v129[4];
  __int128 v130;
  _QWORD v131[3];
  _QWORD v132[3];
  void *v133[3];
  void *__p[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[96];
  void *v141[2];
  uint64_t v142;
  void *v143[2];
  char v144;
  void *v145[2];
  uint64_t v146;
  std::string v147;
  uint64_t v148;
  int v149;
  std::string v150[2];
  uint64_t v151;
  std::string v152[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  void *v160[2];
  uint64_t v161;
  std::string v162[4];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  std::string v166[2];
  _QWORD v167[13];

  v167[12] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FEF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FEF8))
  {
    v114 = xmmword_189C5BC58;
    v115 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](v121, &v114, 3uLL);
    v100 = 0;
    v99 = 0;
    v101 = 0;
    v98 = 1;
    v97 = 0;
    addr_obj::venue::Field::Field(v117, &v98, &v97);
    v96 = 2;
    v95 = 1;
    addr_obj::venue::Field::Field(&v118, &v96, &v95);
    v94 = 3;
    v93 = 2;
    addr_obj::venue::Field::Field(&v119, &v94, &v93);
    v92 = 5;
    v91 = 3;
    addr_obj::venue::Field::Field(v120, &v92, &v91);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v160, v117, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v86, "");
    std::string::basic_string[abi:ne180100]<0>(v84, "");
    std::string::basic_string[abi:ne180100]<0>(v82, "");
    std::string::basic_string[abi:ne180100]<0>(v80, " ");
    addr_obj::venue::Decorator::Decorator(&v147, v86, v84, v82, v80);
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, "");
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, ", ");
    addr_obj::venue::Decorator::Decorator(&v151, v78, v76, v74, v72);
    v158 = 0u;
    v157 = 0u;
    v156 = 0u;
    v155 = 0u;
    v154 = 0u;
    v153 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, "-");
    std::string::basic_string[abi:ne180100]<0>(v66, "");
    std::string::basic_string[abi:ne180100]<0>(v64, ", ");
    addr_obj::venue::Decorator::Decorator(&v159, v70, v68, v66, v64);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)&v88, (addr_obj::venue::Decorator *)&v147, 4uLL);
    addr_obj::venue::Template::Template(&v103, v121, &v99, v160, &v88);
    std::string::basic_string[abi:ne180100]<0>(v145, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v63, (__int128 *)v145, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v143, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v60, (__int128 *)v143, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v162, (const addr_obj::venue::Template *)&v103, (__int128 **)v63, (__int128 **)&v60);
    *(_OWORD *)v141 = xmmword_189C5BC58;
    v142 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](v57, v141, 3uLL);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v50 = 0;
    v51 = 1;
    addr_obj::venue::Field::Field(&v108, &v51, &v50);
    v48 = 0;
    v49 = 2;
    addr_obj::venue::Field::Field(&v109, &v49, &v48);
    v47 = 3;
    v46 = 1;
    addr_obj::venue::Field::Field(&v111, &v47, &v46);
    v44 = 0;
    v45 = 5;
    addr_obj::venue::Field::Field(v112, &v45, &v44);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v52, &v108, 4uLL);
    v139 = 0u;
    v138 = 0u;
    v137 = 0u;
    v136 = 0u;
    v135 = 0u;
    *(_OWORD *)__p = 0u;
    std::string::basic_string[abi:ne180100]<0>(v40, " ");
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    std::string::basic_string[abi:ne180100]<0>(v36, "-");
    std::string::basic_string[abi:ne180100]<0>(v34, "");
    addr_obj::venue::Decorator::Decorator(v140, v40, v38, v36, v34);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v42, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v58, v57, &v54, v52, v42);
    std::string::basic_string[abi:ne180100]<0>(&v130, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v131, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v132, "ja");
    std::string::basic_string[abi:ne180100]<0>(v133, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v33, &v130, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v124, "CN");
    std::string::basic_string[abi:ne180100]<0>(v126, "HK");
    std::string::basic_string[abi:ne180100]<0>(v127, "TW");
    std::string::basic_string[abi:ne180100]<0>(v128, "JP");
    std::string::basic_string[abi:ne180100]<0>(v129, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v32, (__int128 *)v124, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v166, (const addr_obj::venue::Template *)v58, (__int128 **)v33, (__int128 **)v32);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FEE0, (__int128 **)v162, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)&v162[i / 0x18]);
    v102 = (unint64_t)v32;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v129[j + 2]) < 0)
        operator delete((void *)v129[j]);
    }
    v124[0] = v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v133[k + 2]) < 0)
        operator delete(v133[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v58);
    v124[0] = v42;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v124);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v41 < 0)
      operator delete(v40[0]);
    if (v52[0])
    {
      v52[1] = v52[0];
      operator delete(v52[0]);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    __p[0] = &v60;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v144 < 0)
      operator delete(v143[0]);
    __p[0] = v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v146) < 0)
      operator delete(v145[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v103);
    __p[0] = &v88;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 288; n != -96; n -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)((char *)&v147.__r_.__value_.__l.__data_ + n));
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v83 < 0)
      operator delete(v82[0]);
    if (v85 < 0)
      operator delete(v84[0]);
    if (v87 < 0)
      operator delete(v86[0]);
    if (v160[0])
    {
      v160[1] = v160[0];
      operator delete(v160[0]);
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
    if (v121[0])
    {
      v121[1] = v121[0];
      operator delete(v121[0]);
    }
    __cxa_guard_release(&qword_1EDF4FEF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FF18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FF18))
  {
    *(_OWORD *)v160 = xmmword_189C5BC58;
    v161 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](&v99, v160, 3uLL);
    v89 = 0;
    v88 = 0;
    v90 = 0;
    v34[0] = (void *)1;
    v33[0] = 0;
    addr_obj::venue::Field::Field(v121, (const unint64_t *)v34, v33);
    v32[0] = 3;
    v102 = 1;
    addr_obj::venue::Field::Field(&v122, v32, &v102);
    v98 = 5;
    v97 = 2;
    addr_obj::venue::Field::Field(&v123, &v98, &v97);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v86, v121, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v82, "");
    std::string::basic_string[abi:ne180100]<0>(v80, "");
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, ", ");
    addr_obj::venue::Decorator::Decorator(v162, v82, v80, v78, v76);
    v165 = 0u;
    memset(v166, 0, sizeof(v166));
    v163 = 0u;
    v164 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    std::string::basic_string[abi:ne180100]<0>(v72, "-");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, ", ");
    addr_obj::venue::Decorator::Decorator(v167, v74, v72, v70, v68);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v84, (addr_obj::venue::Decorator *)v162, 3uLL);
    addr_obj::venue::Template::Template(v58, &v99, &v88, v86, v84);
    std::string::basic_string[abi:ne180100]<0>(&v130, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v131, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v132, "ja");
    std::string::basic_string[abi:ne180100]<0>(v133, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v66, &v130, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v124, "CN");
    std::string::basic_string[abi:ne180100]<0>(v126, "HK");
    std::string::basic_string[abi:ne180100]<0>(v127, "TW");
    std::string::basic_string[abi:ne180100]<0>(v128, "JP");
    std::string::basic_string[abi:ne180100]<0>(v129, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)v124, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v147, (const addr_obj::venue::Template *)v58, (__int128 **)v66, (__int128 **)v64);
    *(_OWORD *)v145 = xmmword_189C5BC58;
    v146 = 5;
    std::vector<unsigned long>::vector[abi:ne180100](v63, v145, 3uLL);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v96 = 1;
    v95 = 0;
    addr_obj::venue::Field::Field(&v114, &v96, &v95);
    v94 = 3;
    v93 = 1;
    addr_obj::venue::Field::Field(&v115, &v94, &v93);
    v92 = 5;
    v91 = 0;
    addr_obj::venue::Field::Field(&v116, &v92, &v91);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v143, &v114, 3uLL);
    v139 = 0u;
    v138 = 0u;
    v137 = 0u;
    v136 = 0u;
    v135 = 0u;
    *(_OWORD *)__p = 0u;
    std::string::basic_string[abi:ne180100]<0>(v141, " ");
    std::string::basic_string[abi:ne180100]<0>(&v54, "");
    std::string::basic_string[abi:ne180100]<0>(v52, "-");
    std::string::basic_string[abi:ne180100]<0>(v42, "");
    addr_obj::venue::Decorator::Decorator(v140, v141, &v54, v52, v42);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v57, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v117, v63, &v60, v143, v57);
    std::string::basic_string[abi:ne180100]<0>(&v108, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(&v110, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v112, "ja");
    std::string::basic_string[abi:ne180100]<0>(v113, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v40, &v108, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(&v103, "CN");
    std::string::basic_string[abi:ne180100]<0>(v104, "HK");
    std::string::basic_string[abi:ne180100]<0>(v105, "TW");
    std::string::basic_string[abi:ne180100]<0>(v106, "JP");
    std::string::basic_string[abi:ne180100]<0>(v107, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v38, (__int128 *)&v103, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v152, (const addr_obj::venue::Template *)v117, (__int128 **)v40, (__int128 **)v38);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FF00, (__int128 **)&v147, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v147 + ii));
    v36[0] = v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v107[jj + 2]) < 0)
        operator delete((void *)v107[jj]);
    }
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v113[kk + 2]) < 0)
        operator delete((void *)v113[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v117);
    v103.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
    for (mm = 12; mm != -12; mm -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[mm]);
    if (v43 < 0)
      operator delete(v42[0]);
    if (v53 < 0)
      operator delete(v52[0]);
    if (SHIBYTE(v56) < 0)
      operator delete(v54);
    if (SHIBYTE(v142) < 0)
      operator delete(v141[0]);
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
    if (v60)
    {
      v61 = v60;
      operator delete(v60);
    }
    if (v63[0])
    {
      v63[1] = v63[0];
      operator delete(v63[0]);
    }
    __p[0] = v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (nn = 0; nn != -15; nn -= 3)
    {
      if (SHIBYTE(v129[nn + 2]) < 0)
        operator delete((void *)v129[nn]);
    }
    __p[0] = v66;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (i1 = 0; i1 != -12; i1 -= 3)
    {
      if (SHIBYTE(v133[i1 + 2]) < 0)
        operator delete(v133[i1]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v58);
    __p[0] = v84;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (i2 = 192; i2 != -96; i2 -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)&v162[i2 / 0x18].__r_.__value_.__l.__data_);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v83 < 0)
      operator delete(v82[0]);
    if (v86[0])
    {
      v86[1] = v86[0];
      operator delete(v86[0]);
    }
    if (v88)
    {
      v89 = v88;
      operator delete(v88);
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
    __cxa_guard_release(&qword_1EDF4FF18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FF38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FF38))
  {
    LODWORD(v147.__r_.__value_.__l.__data_) = 1;
    v148 = 0;
    *(_OWORD *)&v147.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v147.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FEE0, unk_1EDF4FEE8, 0x8E38E38E38E38E39 * ((unk_1EDF4FEE8 - qword_1EDF4FEE0) >> 4));
    v149 = 0;
    memset(v150, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v150, (__int128 **)qword_1EDF4FF00, unk_1EDF4FF08, 0x8E38E38E38E38E39 * ((unk_1EDF4FF08 - qword_1EDF4FF00) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FF20, (int *)&v147, 2);
    for (i3 = 40; i3 != -24; i3 -= 32)
    {
      v162[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v147 + i3;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v162);
    }
    __cxa_guard_release(&qword_1EDF4FF38);
  }
  v5 = qword_1EDF4FF28;
  if (!qword_1EDF4FF28)
    goto LABEL_15;
  v6 = &qword_1EDF4FF28;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FF28 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v147);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v147, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v162);
      std::stringbuf::str();
      if ((SBYTE7(v135) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v135) & 0x80u) == 0)
        v15 = BYTE7(v135);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v162, (uint64_t)v14, v15);
      if (SBYTE7(v135) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v124, "ShortWithLongUpper");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v58, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 345, (uint64_t)v124, (uint64_t)&v103, (uint64_t)v58);
      if (v59 < 0)
        operator delete(v58[0]);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      if (v125 < 0)
        operator delete(v124[0]);
      if (SBYTE7(v135) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v162);
    }
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v147, (uint64_t)"; at ", 5);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v162, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v162[0].__r_.__value_.__l.__data_, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_18879C59C()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x5F7]) < 0)
    operator delete((void *)STACK[0x5E0]);
  if (SLOBYTE(STACK[0x89F]) < 0)
  {
    operator delete((void *)STACK[0x888]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x18879C62CLL);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_18879C5F8(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_18879C634(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  unint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  unint64_t nn;
  uint64_t i1;
  _QWORD *v27;
  _QWORD *v28;
  std::runtime_error *exception;
  unint64_t v30[3];
  unint64_t v31[3];
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void *v50[2];
  char v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55[3];
  void *v56[2];
  char v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61[3];
  void *v62[2];
  char v63;
  void *v64[2];
  char v65;
  void *v66[2];
  char v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72[2];
  char v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  void *v78[2];
  char v79;
  void *v80[2];
  char v81;
  _BYTE v82[24];
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  uint64_t v95;
  void *v96;
  void *v97;
  std::string v98;
  unint64_t v99;
  void *v100[2];
  char v101;
  _QWORD v102[3];
  _QWORD v103[3];
  _QWORD v104[3];
  _QWORD v105[4];
  __int128 v106;
  _QWORD v107[3];
  _QWORD v108[3];
  _QWORD v109[3];
  void *__p[2];
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _BYTE v116[96];
  _QWORD v117[2];
  _QWORD v118[2];
  _QWORD v119[2];
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  void *v123[2];
  char v124;
  __int128 v125;
  uint64_t v126;
  void *v127[2];
  char v128;
  void *v129[2];
  char v130;
  std::string v131;
  uint64_t v132;
  int v133;
  std::string v134[2];
  uint64_t v135;
  std::string v136[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD v145[2];
  _QWORD v146[2];
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  std::string v150[4];
  __int128 v151;
  __int128 v152;
  __int128 v153;
  std::string v154[2];
  _QWORD v155[13];

  v155[12] = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF4FF58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FF58))
  {
    v148 = xmmword_189C5BC70;
    v149 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v96, &v148, 3uLL);
    v94 = 0;
    v93 = 0;
    v95 = 0;
    v90 = 1;
    v89 = 0;
    addr_obj::venue::Field::Field(&v144, &v90, &v89);
    v88 = 2;
    v87 = 1;
    addr_obj::venue::Field::Field(v145, &v88, &v87);
    v86 = 3;
    v85 = 2;
    addr_obj::venue::Field::Field(v146, &v86, &v85);
    v84 = 6;
    v83 = 3;
    addr_obj::venue::Field::Field(&v147, &v84, &v83);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v91, &v144, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v80, "");
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, "");
    std::string::basic_string[abi:ne180100]<0>(v74, " ");
    addr_obj::venue::Decorator::Decorator(&v131, v80, v78, v76, v74);
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "");
    std::string::basic_string[abi:ne180100]<0>(v68, "");
    std::string::basic_string[abi:ne180100]<0>(v66, ", ");
    addr_obj::venue::Decorator::Decorator(&v135, v72, v70, v68, v66);
    v141 = 0u;
    v142 = 0u;
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v64, "");
    std::string::basic_string[abi:ne180100]<0>(v129, "-");
    std::string::basic_string[abi:ne180100]<0>(v62, "");
    std::string::basic_string[abi:ne180100]<0>(v127, ", ");
    addr_obj::venue::Decorator::Decorator(&v143, v64, v129, v62, v127);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v82, (addr_obj::venue::Decorator *)&v131, 4uLL);
    addr_obj::venue::Template::Template(&v98, &v96, &v93, &v91, v82);
    std::string::basic_string[abi:ne180100]<0>(&v125, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v61, &v125, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v123, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v58, (__int128 *)v123, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v150, (const addr_obj::venue::Template *)&v98, (__int128 **)v61, (__int128 **)&v58);
    v121 = xmmword_189C5BC70;
    v122 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](v55, &v121, 3uLL);
    v52 = 0;
    v53 = 0;
    v54 = 0;
    v48 = 0;
    v49 = 1;
    addr_obj::venue::Field::Field(v117, &v49, &v48);
    v46 = 0;
    v47 = 2;
    addr_obj::venue::Field::Field(v118, &v47, &v46);
    v45 = 3;
    v44 = 1;
    addr_obj::venue::Field::Field(v119, &v45, &v44);
    v42 = 0;
    v43 = 6;
    addr_obj::venue::Field::Field(&v120, &v43, &v42);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v50, v117, 4uLL);
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    *(_OWORD *)__p = 0u;
    v111 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v38, " ");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    std::string::basic_string[abi:ne180100]<0>(v34, "-");
    std::string::basic_string[abi:ne180100]<0>(v32, "");
    addr_obj::venue::Decorator::Decorator(v116, v38, v36, v34, v32);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v40, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, v55, &v52, v50, v40);
    std::string::basic_string[abi:ne180100]<0>(&v106, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v107, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v108, "ja");
    std::string::basic_string[abi:ne180100]<0>(v109, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v106, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v100, "CN");
    std::string::basic_string[abi:ne180100]<0>(v102, "HK");
    std::string::basic_string[abi:ne180100]<0>(v103, "TW");
    std::string::basic_string[abi:ne180100]<0>(v104, "JP");
    std::string::basic_string[abi:ne180100]<0>(v105, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v30, (__int128 *)v100, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v154, (const addr_obj::venue::Template *)v56, (__int128 **)v31, (__int128 **)v30);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FF40, (__int128 **)v150, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)&v150[i / 0x18]);
    v99 = (unint64_t)v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v105[j + 2]) < 0)
        operator delete((void *)v105[j]);
    }
    v100[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v109[k + 2]) < 0)
        operator delete((void *)v109[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v100[0] = v40;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v33 < 0)
      operator delete(v32[0]);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v37 < 0)
      operator delete(v36[0]);
    if (v39 < 0)
      operator delete(v38[0]);
    if (v50[0])
    {
      v50[1] = v50[0];
      operator delete(v50[0]);
    }
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v55[0])
    {
      v55[1] = v55[0];
      operator delete(v55[0]);
    }
    __p[0] = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v124 < 0)
      operator delete(v123[0]);
    __p[0] = v61;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v126) < 0)
      operator delete((void *)v125);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v98);
    __p[0] = v82;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 288; n != -96; n -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)((char *)&v131.__r_.__value_.__l.__data_ + n));
    if (v128 < 0)
      operator delete(v127[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    if (v130 < 0)
      operator delete(v129[0]);
    if (v65 < 0)
      operator delete(v64[0]);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    __cxa_guard_release(&qword_1EDF4FF58);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF4FF78);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FF78))
  {
    v148 = xmmword_189C5BC70;
    v149 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](&v96, &v148, 3uLL);
    v94 = 0;
    v93 = 0;
    v95 = 0;
    v32[0] = (void *)1;
    v31[0] = 0;
    addr_obj::venue::Field::Field(&v144, (const unint64_t *)v32, v31);
    v30[0] = 3;
    v99 = 1;
    addr_obj::venue::Field::Field(v145, v30, &v99);
    v90 = 6;
    v89 = 2;
    addr_obj::venue::Field::Field(v146, &v90, &v89);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v91, &v144, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v80, "");
    std::string::basic_string[abi:ne180100]<0>(v78, "");
    std::string::basic_string[abi:ne180100]<0>(v76, "");
    std::string::basic_string[abi:ne180100]<0>(v74, ", ");
    addr_obj::venue::Decorator::Decorator(v150, v80, v78, v76, v74);
    memset(v154, 0, sizeof(v154));
    v153 = 0u;
    v152 = 0u;
    v151 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v72, "");
    std::string::basic_string[abi:ne180100]<0>(v70, "-");
    std::string::basic_string[abi:ne180100]<0>(v68, "");
    std::string::basic_string[abi:ne180100]<0>(v66, ", ");
    addr_obj::venue::Decorator::Decorator(v155, v72, v70, v68, v66);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v82, (addr_obj::venue::Decorator *)v150, 3uLL);
    addr_obj::venue::Template::Template(&v98, &v96, &v93, &v91, v82);
    std::string::basic_string[abi:ne180100]<0>(v129, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v64, (__int128 *)v129, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v127, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v62, (__int128 *)v127, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v131, (const addr_obj::venue::Template *)&v98, (__int128 **)v64, (__int128 **)v62);
    v125 = xmmword_189C5BC70;
    v126 = 6;
    std::vector<unsigned long>::vector[abi:ne180100](v61, &v125, 3uLL);
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v88 = 1;
    v87 = 0;
    addr_obj::venue::Field::Field(v117, &v88, &v87);
    v86 = 3;
    v85 = 1;
    addr_obj::venue::Field::Field(v118, &v86, &v85);
    v84 = 6;
    v83 = 0;
    addr_obj::venue::Field::Field(v119, &v84, &v83);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v123, v117, 3uLL);
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    *(_OWORD *)__p = 0u;
    v111 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v121, " ");
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    std::string::basic_string[abi:ne180100]<0>(v50, "-");
    std::string::basic_string[abi:ne180100]<0>(v40, "");
    addr_obj::venue::Decorator::Decorator(v116, &v121, &v52, v50, v40);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v55, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v56, v61, &v58, v123, v55);
    std::string::basic_string[abi:ne180100]<0>(&v106, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v107, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v108, "ja");
    std::string::basic_string[abi:ne180100]<0>(v109, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v38, &v106, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v100, "CN");
    std::string::basic_string[abi:ne180100]<0>(v102, "HK");
    std::string::basic_string[abi:ne180100]<0>(v103, "TW");
    std::string::basic_string[abi:ne180100]<0>(v104, "JP");
    std::string::basic_string[abi:ne180100]<0>(v105, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v36, (__int128 *)v100, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v136, (const addr_obj::venue::Template *)v56, (__int128 **)v38, (__int128 **)v36);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF4FF60, (__int128 **)&v131, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v131 + ii));
    v34[0] = v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v34);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v105[jj + 2]) < 0)
        operator delete((void *)v105[jj]);
    }
    v100[0] = v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v109[kk + 2]) < 0)
        operator delete((void *)v109[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v56);
    v100[0] = v55;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
    for (mm = 12; mm != -12; mm -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[mm]);
    if (v41 < 0)
      operator delete(v40[0]);
    if (v51 < 0)
      operator delete(v50[0]);
    if (SHIBYTE(v54) < 0)
      operator delete(v52);
    if (SHIBYTE(v122) < 0)
      operator delete((void *)v121);
    if (v123[0])
    {
      v123[1] = v123[0];
      operator delete(v123[0]);
    }
    if (v58)
    {
      v59 = v58;
      operator delete(v58);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    __p[0] = v62;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v128 < 0)
      operator delete(v127[0]);
    __p[0] = v64;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v130 < 0)
      operator delete(v129[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v98);
    __p[0] = v82;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (nn = 192; nn != -96; nn -= 96)
      addr_obj::venue::Decorator::~Decorator((void **)&v150[nn / 0x18].__r_.__value_.__l.__data_);
    if (v67 < 0)
      operator delete(v66[0]);
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v73 < 0)
      operator delete(v72[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    if (v79 < 0)
      operator delete(v78[0]);
    if (v81 < 0)
      operator delete(v80[0]);
    if (v91)
    {
      v92 = v91;
      operator delete(v91);
    }
    if (v93)
    {
      v94 = v93;
      operator delete(v93);
    }
    if (v96)
    {
      v97 = v96;
      operator delete(v96);
    }
    __cxa_guard_release(&qword_1EDF4FF78);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF4FF98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF4FF98))
  {
    LODWORD(v131.__r_.__value_.__l.__data_) = 1;
    v132 = 0;
    *(_OWORD *)&v131.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v131.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF4FF40, unk_1EDF4FF48, 0x8E38E38E38E38E39 * ((unk_1EDF4FF48 - qword_1EDF4FF40) >> 4));
    v133 = 0;
    memset(v134, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v134, (__int128 **)qword_1EDF4FF60, unk_1EDF4FF68, 0x8E38E38E38E38E39 * ((unk_1EDF4FF68 - qword_1EDF4FF60) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF4FF80, (int *)&v131, 2);
    for (i1 = 40; i1 != -24; i1 -= 32)
    {
      v150[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v131 + i1;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v150);
    }
    __cxa_guard_release(&qword_1EDF4FF98);
  }
  v5 = qword_1EDF4FF88;
  if (!qword_1EDF4FF88)
    goto LABEL_15;
  v6 = &qword_1EDF4FF88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF4FF88 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v131);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v131, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v150);
      std::stringbuf::str();
      if ((SBYTE7(v111) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v111) & 0x80u) == 0)
        v15 = BYTE7(v111);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)v14, v15);
      if (SBYTE7(v111) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v100, "ShortWithLongLowerShortUpper");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v56, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 400, (uint64_t)v100, (uint64_t)&v98, (uint64_t)v56);
      if (v57 < 0)
        operator delete(v56[0]);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      if (v101 < 0)
        operator delete(v100[0]);
      if (SBYTE7(v111) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v150);
    }
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v131, (uint64_t)"; at ", 5);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v150, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v150[0].__r_.__value_.__l.__data_, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_18879E724()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x4C7]) < 0)
    operator delete((void *)STACK[0x4B0]);
  if (SLOBYTE(STACK[0x81F]) < 0)
  {
    operator delete((void *)STACK[0x808]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x18879E7B4);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_18879E780(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_18879E7BC(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  uint64_t mm;
  _QWORD *v25;
  _QWORD *v26;
  std::runtime_error *exception;
  __int128 *v28[3];
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41[2];
  char v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47[3];
  void *v48[3];
  void *v49[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _BYTE v61[24];
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  std::string v73;
  unint64_t v74;
  void *v75[2];
  _QWORD v76[3];
  _QWORD v77[3];
  _QWORD v78[3];
  void *v79[21];
  void *v80[2];
  char v81;
  _QWORD v82[3];
  _QWORD v83[3];
  _QWORD v84[3];
  _QWORD v85[3];
  __int128 *v86[3];
  __int128 v87;
  _QWORD v88[3];
  _QWORD v89[3];
  void *v90[3];
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *__p[2];
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[2];
  _QWORD v103[2];
  uint64_t v104;
  unint64_t v105[2];
  uint64_t v106;
  void *v107[2];
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  unint64_t v117;
  _QWORD v118[2];
  _QWORD v119[2];
  uint64_t v120;
  unint64_t v121[2];
  unint64_t v122;
  std::string v123;
  uint64_t v124;
  int v125;
  std::string v126[4];
  std::string v127[6];
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF500D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF500D8))
  {
    v122 = 1;
    std::vector<unsigned long>::vector[abi:ne180100](&v71, &v122, 1uLL);
    *(_OWORD *)v121 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v69, v121, 2uLL);
    v117 = 1;
    v66 = 0;
    addr_obj::venue::Field::Field(v118, &v117, &v66);
    v65 = 2;
    v64 = 1;
    addr_obj::venue::Field::Field(v119, &v65, &v64);
    v62 = 0;
    v63 = 3;
    addr_obj::venue::Field::Field(&v120, &v63, &v62);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v67, v118, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, " ");
    addr_obj::venue::Decorator::Decorator(v75, v59, v57, v55, v53);
    std::string::basic_string[abi:ne180100]<0>(v51, "");
    std::string::basic_string[abi:ne180100]<0>(v115, "");
    std::string::basic_string[abi:ne180100]<0>(v49, "");
    std::string::basic_string[abi:ne180100]<0>(v113, ", ");
    addr_obj::venue::Decorator::Decorator(v79, v51, v115, v49, v113);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)v75, 2uLL);
    addr_obj::venue::Template::Template(&v73, &v71, &v69, &v67, v61);
    std::string::basic_string[abi:ne180100]<0>(v111, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v48, (__int128 *)v111, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v109, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v47, (__int128 *)v109, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v123, (const addr_obj::venue::Template *)&v73, (__int128 **)v48, (__int128 **)v47);
    v106 = 1;
    std::vector<unsigned long>::vector[abi:ne180100](v45, &v106, 1uLL);
    *(_OWORD *)v105 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](v43, v105, 2uLL);
    v39 = 0;
    v40 = 1;
    addr_obj::venue::Field::Field(v102, &v40, &v39);
    v37 = 0;
    v38 = 2;
    addr_obj::venue::Field::Field(v103, &v38, &v37);
    v36 = 3;
    v35 = 1;
    addr_obj::venue::Field::Field(&v104, &v36, &v35);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v41, v102, 3uLL);
    v100 = 0u;
    v99 = 0u;
    v98 = 0u;
    v97 = 0u;
    v96 = 0u;
    *(_OWORD *)__p = 0u;
    std::string::basic_string[abi:ne180100]<0>(v31, " ");
    std::string::basic_string[abi:ne180100]<0>(v29, "");
    std::string::basic_string[abi:ne180100]<0>(v93, "");
    std::string::basic_string[abi:ne180100]<0>(v91, "");
    addr_obj::venue::Decorator::Decorator(&v101, v31, v29, v93, v91);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v33, (addr_obj::venue::Decorator *)__p, 2uLL);
    addr_obj::venue::Template::Template(v107, v45, v43, v41, v33);
    std::string::basic_string[abi:ne180100]<0>(&v87, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v88, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v89, "ja");
    std::string::basic_string[abi:ne180100]<0>(v90, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v28, &v87, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v80, "CN");
    std::string::basic_string[abi:ne180100]<0>(v82, "HK");
    std::string::basic_string[abi:ne180100]<0>(v83, "TW");
    std::string::basic_string[abi:ne180100]<0>(v84, "JP");
    std::string::basic_string[abi:ne180100]<0>(v85, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v86, (__int128 *)v80, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v127, (const addr_obj::venue::Template *)v107, v28, v86);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF500C0, (__int128 **)&v123, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v123 + i));
    v74 = (unint64_t)v86;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v85[j + 2]) < 0)
        operator delete((void *)v85[j]);
    }
    v80[0] = v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v90[k + 2]) < 0)
        operator delete(v90[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v107);
    v80[0] = v33;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&__p[m]);
    if (v92 < 0)
      operator delete(v91[0]);
    if (v94 < 0)
      operator delete(v93[0]);
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v41[0])
    {
      v41[1] = v41[0];
      operator delete(v41[0]);
    }
    if (v43[0])
    {
      v43[1] = v43[0];
      operator delete(v43[0]);
    }
    if (v45[0])
    {
      v45[1] = v45[0];
      operator delete(v45[0]);
    }
    __p[0] = v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v110 < 0)
      operator delete(v109[0]);
    __p[0] = v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v112 < 0)
      operator delete(v111[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v73);
    __p[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (n = 12; n != -12; n -= 12)
      addr_obj::venue::Decorator::~Decorator(&v75[n]);
    if (v114 < 0)
      operator delete(v113[0]);
    if (v50 < 0)
      operator delete(v49[0]);
    if (v116 < 0)
      operator delete(v115[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    __cxa_guard_release(&qword_1EDF500D8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF500F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF500F8))
  {
    v86[0] = (__int128 *)1;
    std::vector<unsigned long>::vector[abi:ne180100](&v71, v86, 1uLL);
    *(_OWORD *)v93 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](&v69, v93, 2uLL);
    v121[0] = 1;
    v105[0] = 0;
    addr_obj::venue::Field::Field(v118, v121, v105);
    v74 = 3;
    v122 = 0;
    addr_obj::venue::Field::Field(v119, &v74, &v122);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v67, v118, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, ", ");
    addr_obj::venue::Decorator::Decorator(v80, v59, v57, v55, v53);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)v80, 1uLL);
    addr_obj::venue::Template::Template(__p, &v71, &v69, &v67, v61);
    std::string::basic_string[abi:ne180100]<0>(v115, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, (__int128 *)v115, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v113, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v49, (__int128 *)v113, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v123, (const addr_obj::venue::Template *)__p, (__int128 **)v51, (__int128 **)v49);
    v117 = 1;
    std::vector<unsigned long>::vector[abi:ne180100](v48, &v117, 1uLL);
    *(_OWORD *)v91 = xmmword_189C5BC90;
    std::vector<unsigned long>::vector[abi:ne180100](v111, v91, 2uLL);
    v65 = 0;
    v66 = 1;
    addr_obj::venue::Field::Field(v102, &v66, &v65);
    v63 = 0;
    v64 = 3;
    addr_obj::venue::Field::Field(v103, &v64, &v63);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](v47, v102, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "");
    std::string::basic_string[abi:ne180100]<0>(v43, "");
    std::string::basic_string[abi:ne180100]<0>(v41, "");
    std::string::basic_string[abi:ne180100]<0>(v33, " ");
    addr_obj::venue::Decorator::Decorator(v107, v45, v43, v41, v33);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v109, (addr_obj::venue::Decorator *)v107, 1uLL);
    addr_obj::venue::Template::Template(&v73, v48, v111, v47, v109);
    std::string::basic_string[abi:ne180100]<0>(&v87, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v88, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v89, "ja");
    std::string::basic_string[abi:ne180100]<0>(v90, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v31, &v87, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v75, "CN");
    std::string::basic_string[abi:ne180100]<0>(v76, "HK");
    std::string::basic_string[abi:ne180100]<0>(v77, "TW");
    std::string::basic_string[abi:ne180100]<0>(v78, "JP");
    std::string::basic_string[abi:ne180100]<0>(v79, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v29, (__int128 *)v75, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v127, (const addr_obj::venue::Template *)&v73, (__int128 **)v31, (__int128 **)v29);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF500E0, (__int128 **)&v123, 2uLL);
    for (ii = 144; ii != -144; ii -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v123 + ii));
    v28[0] = (__int128 *)v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v28);
    for (jj = 0; jj != -15; jj -= 3)
    {
      if (SHIBYTE(v79[jj + 2]) < 0)
        operator delete(v79[jj]);
    }
    v75[0] = v31;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    for (kk = 0; kk != -12; kk -= 3)
    {
      if (SHIBYTE(v90[kk + 2]) < 0)
        operator delete(v90[kk]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v73);
    v75[0] = v109;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    addr_obj::venue::Decorator::~Decorator(v107);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v42 < 0)
      operator delete(v41[0]);
    if (v44 < 0)
      operator delete(v43[0]);
    if (v46 < 0)
      operator delete(v45[0]);
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    if (v111[0])
    {
      v111[1] = v111[0];
      operator delete(v111[0]);
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    v75[0] = v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v114 < 0)
      operator delete(v113[0]);
    v75[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v116 < 0)
      operator delete(v115[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
    v75[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    addr_obj::venue::Decorator::~Decorator(v80);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v71)
    {
      v72 = v71;
      operator delete(v71);
    }
    __cxa_guard_release(&qword_1EDF500F8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF50118);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50118))
  {
    LODWORD(v123.__r_.__value_.__l.__data_) = 1;
    v124 = 0;
    *(_OWORD *)&v123.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v123.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF500C0, unk_1EDF500C8, 0x8E38E38E38E38E39 * ((unk_1EDF500C8 - qword_1EDF500C0) >> 4));
    v125 = 0;
    memset(v126, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v126, (__int128 **)qword_1EDF500E0, unk_1EDF500E8, 0x8E38E38E38E38E39 * ((unk_1EDF500E8 - qword_1EDF500E0) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF50100, (int *)&v123, 2);
    for (mm = 40; mm != -24; mm -= 32)
    {
      v75[0] = (char *)&v123 + mm;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    }
    __cxa_guard_release(&qword_1EDF50118);
  }
  v5 = qword_1EDF50108;
  if (!qword_1EDF50108)
    goto LABEL_15;
  v6 = &qword_1EDF50108;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF50108 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v123);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v75);
      std::stringbuf::str();
      if ((SBYTE7(v96) & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((SBYTE7(v96) & 0x80u) == 0)
        v15 = BYTE7(v96);
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v14, v15);
      if (SBYTE7(v96) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v80, "LevelLong");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v107, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 593, (uint64_t)v80, (uint64_t)&v73, (uint64_t)v107);
      if (v108 < 0)
        operator delete(v107[0]);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      if (v81 < 0)
        operator delete(v80[0]);
      if (SBYTE7(v96) < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v75);
    }
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v123, (uint64_t)"; at ", 5);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v75, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v75, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_1887A04B0()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x4E7]) < 0)
    operator delete((void *)STACK[0x4D0]);
  if (SLOBYTE(STACK[0x2AF]) < 0)
  {
    operator delete((void *)STACK[0x298]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x1887A0540);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1887A050C(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1887A0548(int a1)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void **v14;
  uint64_t v15;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  uint64_t jj;
  uint64_t kk;
  _QWORD *v24;
  _QWORD *v25;
  std::runtime_error *exception;
  __int128 *v27[3];
  __int128 *v28[3];
  void *v29[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;
  void *v35[2];
  char v36;
  _BYTE v37[24];
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  __int128 *v51[3];
  __int128 *v52[3];
  void *v53[2];
  char v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  _BYTE v61[24];
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  void *v73;
  __int128 **v74;
  void *v75[2];
  _OWORD v76[2];
  _OWORD v77[3];
  void *v78[22];
  void *__p[2];
  unsigned __int8 v80;
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[3];
  _QWORD v84[3];
  __int128 v85;
  _QWORD v86[3];
  _QWORD v87[3];
  _QWORD v88[3];
  _QWORD v89[2];
  _QWORD v90[2];
  uint64_t v91;
  unint64_t v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  std::string v99;
  unint64_t v100;
  _QWORD v101[2];
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  void *v105[2];
  char v106;
  std::string v107;
  uint64_t v108;
  int v109;
  std::string v110[4];
  std::string v111[6];
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v2 = atomic_load((unsigned __int8 *)&qword_1EDF50138);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50138))
  {
    v104 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v72, &v104, 1uLL);
    v70 = 0;
    v69 = 0;
    v71 = 0;
    v65 = 0;
    v66 = 0;
    addr_obj::venue::Field::Field(v101, &v66, &v65);
    v63 = 0;
    v64 = 2;
    addr_obj::venue::Field::Field(v102, &v64, &v63);
    v100 = 4;
    v62 = 0;
    addr_obj::venue::Field::Field(&v103, &v100, &v62);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v67, v101, 3uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, ", ");
    addr_obj::venue::Decorator::Decorator(&v99, v59, v57, v55, v53);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)&v99, 1uLL);
    addr_obj::venue::Template::Template(v105, &v72, &v69, &v67, v61);
    std::string::basic_string[abi:ne180100]<0>(v97, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v52, (__int128 *)v97, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v95, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, (__int128 *)v95, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v107, (const addr_obj::venue::Template *)v105, v52, v51);
    v92 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v49, &v92, 1uLL);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v42 = 0;
    v43 = 0;
    addr_obj::venue::Field::Field(v89, &v43, &v42);
    v40 = 0;
    v41 = 2;
    addr_obj::venue::Field::Field(v90, &v41, &v40);
    v39 = 4;
    v38 = 1;
    addr_obj::venue::Field::Field(&v91, &v39, &v38);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v44, v89, 3uLL);
    memset(v77, 0, sizeof(v77));
    *(_OWORD *)v75 = 0u;
    memset(v76, 0, sizeof(v76));
    std::string::basic_string[abi:ne180100]<0>(v35, " ");
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    std::string::basic_string[abi:ne180100]<0>(v29, "");
    addr_obj::venue::Decorator::Decorator(v78, v35, v33, v31, v29);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v37, (addr_obj::venue::Decorator *)v75, 2uLL);
    addr_obj::venue::Template::Template(v93, &v49, &v46, &v44, v37);
    std::string::basic_string[abi:ne180100]<0>(&v85, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v86, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v87, "ja");
    std::string::basic_string[abi:ne180100]<0>(v88, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v28, &v85, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "CN");
    std::string::basic_string[abi:ne180100]<0>(v81, "HK");
    std::string::basic_string[abi:ne180100]<0>(v82, "TW");
    std::string::basic_string[abi:ne180100]<0>(v83, "JP");
    std::string::basic_string[abi:ne180100]<0>(v84, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v27, (__int128 *)__p, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v111, (const addr_obj::venue::Template *)v93, v28, v27);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF50120, (__int128 **)&v107, 2uLL);
    for (i = 144; i != -144; i -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v107 + i));
    v74 = v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    for (j = 0; j != -15; j -= 3)
    {
      if (SHIBYTE(v84[j + 2]) < 0)
        operator delete((void *)v84[j]);
    }
    __p[0] = v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (k = 0; k != -12; k -= 3)
    {
      if (SHIBYTE(v88[k + 2]) < 0)
        operator delete((void *)v88[k]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v93);
    __p[0] = v37;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    for (m = 12; m != -12; m -= 12)
      addr_obj::venue::Decorator::~Decorator(&v75[m]);
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    v75[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v96 < 0)
      operator delete(v95[0]);
    v75[0] = v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v98 < 0)
      operator delete(v97[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)v105);
    v75[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    addr_obj::venue::Decorator::~Decorator((void **)&v99.__r_.__value_.__l.__data_);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    __cxa_guard_release(&qword_1EDF50138);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_1EDF50158);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50158))
  {
    v104 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v72, &v104, 1uLL);
    v70 = 0;
    v69 = 0;
    v71 = 0;
    v65 = 0;
    v66 = 0;
    addr_obj::venue::Field::Field(v101, &v66, &v65);
    v63 = 0;
    v64 = 4;
    addr_obj::venue::Field::Field(v102, &v64, &v63);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v67, v101, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v59, "");
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    std::string::basic_string[abi:ne180100]<0>(v53, ", ");
    addr_obj::venue::Decorator::Decorator(v105, v59, v57, v55, v53);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v61, (addr_obj::venue::Decorator *)v105, 1uLL);
    addr_obj::venue::Template::Template(__p, &v72, &v69, &v67, v61);
    std::string::basic_string[abi:ne180100]<0>(v97, "qq");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v52, (__int128 *)v97, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v95, "ZZZ");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v51, (__int128 *)v95, 1uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(&v107, (const addr_obj::venue::Template *)__p, v52, v51);
    v100 = 0;
    std::vector<unsigned long>::vector[abi:ne180100](&v49, &v100, 1uLL);
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v62 = 0;
    v92 = 0;
    addr_obj::venue::Field::Field(v89, &v62, &v92);
    v42 = 0;
    v43 = 4;
    addr_obj::venue::Field::Field(v90, &v43, &v42);
    std::vector<addr_obj::venue::Field>::vector[abi:ne180100](&v44, v89, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    std::string::basic_string[abi:ne180100]<0>(v29, " ");
    addr_obj::venue::Decorator::Decorator(v93, v35, v33, v31, v29);
    std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100]((uint64_t)v37, (addr_obj::venue::Decorator *)v93, 1uLL);
    addr_obj::venue::Template::Template(&v99, &v49, &v46, &v44, v37);
    std::string::basic_string[abi:ne180100]<0>(&v85, "zh-Hans");
    std::string::basic_string[abi:ne180100]<0>(v86, "zh-Hant");
    std::string::basic_string[abi:ne180100]<0>(v87, "ja");
    std::string::basic_string[abi:ne180100]<0>(v88, "ko");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v28, &v85, 4uLL);
    std::string::basic_string[abi:ne180100]<0>(v75, "CN");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)v76 + 1, "HK");
    std::string::basic_string[abi:ne180100]<0>(v77, "TW");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v77[1] + 1, "JP");
    std::string::basic_string[abi:ne180100]<0>(v78, "KO");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)v27, (__int128 *)v75, 5uLL);
    addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v111, (const addr_obj::venue::Template *)&v99, v28, v27);
    std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100]((uint64_t)&qword_1EDF50140, (__int128 **)&v107, 2uLL);
    for (n = 144; n != -144; n -= 144)
      addr_obj::venue::LocalizedTemplate::~LocalizedTemplate((addr_obj::venue::LocalizedTemplate *)((char *)&v107 + n));
    v74 = v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
    for (ii = 0; ii != -15; ii -= 3)
    {
      if (SHIBYTE(v78[ii + 2]) < 0)
        operator delete(v78[ii]);
    }
    v75[0] = v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    for (jj = 0; jj != -12; jj -= 3)
    {
      if (SHIBYTE(v88[jj + 2]) < 0)
        operator delete((void *)v88[jj]);
    }
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)&v99);
    v75[0] = v37;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    addr_obj::venue::Decorator::~Decorator(v93);
    if (v30 < 0)
      operator delete(v29[0]);
    if (v32 < 0)
      operator delete(v31[0]);
    if (v34 < 0)
      operator delete(v33[0]);
    if (v36 < 0)
      operator delete(v35[0]);
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    if (v46)
    {
      v47 = v46;
      operator delete(v46);
    }
    if (v49)
    {
      v50 = v49;
      operator delete(v49);
    }
    v75[0] = v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v96 < 0)
      operator delete(v95[0]);
    v75[0] = v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    if (v98 < 0)
      operator delete(v97[0]);
    addr_obj::venue::Template::~Template((addr_obj::venue::Template *)__p);
    v75[0] = v61;
    std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    addr_obj::venue::Decorator::~Decorator(v105);
    if (v54 < 0)
      operator delete(v53[0]);
    if (v56 < 0)
      operator delete(v55[0]);
    if (v58 < 0)
      operator delete(v57[0]);
    if (v60 < 0)
      operator delete(v59[0]);
    if (v67)
    {
      v68 = v67;
      operator delete(v67);
    }
    if (v69)
    {
      v70 = v69;
      operator delete(v69);
    }
    if (v72)
    {
      v73 = v72;
      operator delete(v72);
    }
    __cxa_guard_release(&qword_1EDF50158);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_1EDF50178);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50178))
  {
    LODWORD(v107.__r_.__value_.__l.__data_) = 1;
    v108 = 0;
    *(_OWORD *)&v107.__r_.__value_.__r.__words[1] = 0uLL;
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)&v107.__r_.__value_.__r.__words[1], (__int128 **)qword_1EDF50120, unk_1EDF50128, 0x8E38E38E38E38E39 * ((unk_1EDF50128 - qword_1EDF50120) >> 4));
    v109 = 0;
    memset(v110, 0, 24);
    std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(v110, (__int128 **)qword_1EDF50140, unk_1EDF50148, 0x8E38E38E38E38E39 * ((unk_1EDF50148 - qword_1EDF50140) >> 4));
    std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100]((uint64_t)&unk_1EDF50160, (int *)&v107, 2);
    for (kk = 40; kk != -24; kk -= 32)
    {
      v75[0] = (char *)&v107 + kk;
      std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100]((void ***)v75);
    }
    __cxa_guard_release(&qword_1EDF50178);
  }
  v5 = qword_1EDF50168;
  if (!qword_1EDF50168)
    goto LABEL_15;
  v6 = &qword_1EDF50168;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a1;
    if (v7 >= a1)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = (uint64_t *)v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EDF50168 || *((_DWORD *)v6 + 8) > a1)
  {
LABEL_15:
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v107);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"Invalid LabelPattern enum: ", 27);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v75);
      std::stringbuf::str();
      if ((v80 & 0x80u) == 0)
        v14 = __p;
      else
        v14 = (void **)__p[0];
      if ((v80 & 0x80u) == 0)
        v15 = v80;
      else
        v15 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v14, v15);
      if ((char)v80 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(v105, "VenueLong");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v93, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 638, (uint64_t)v105, (uint64_t)&v99, (uint64_t)v93);
      if (v94 < 0)
        operator delete(v93[0]);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      if (v106 < 0)
        operator delete(v105[0]);
      if ((char)v80 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v75);
    }
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v107, (uint64_t)"; at ", 5);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_TemplateFactory.cpp", 95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v75, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v75, (uint64_t)__p);
  }
  return v6 + 5;
}

void sub_1887A1FCC()
{
  void *v0;
  int v1;
  uint64_t v2;

  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  if (SLOBYTE(STACK[0x257]) < 0)
  {
    operator delete((void *)STACK[0x240]);
    if ((v1 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v1)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v2);
    JUMPOUT(0x1887A205CLL);
  }
  __cxa_free_exception(v0);
  goto LABEL_8;
}

void sub_1887A2028(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1887A2128(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D764310](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](a1 + 112);
  return a1;
}

_QWORD *std::vector<unsigned long>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1887A223C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<addr_obj::venue::Field>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 16 * a3);
    a1[1] = &v6[16 * a3];
  }
  return a1;
}

void sub_1887A22BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<addr_obj::venue::Decorator>::vector[abi:ne180100](uint64_t a1, addr_obj::venue::Decorator *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<addr_obj::venue::Decorator>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator const*,addr_obj::venue::Decorator const*,addr_obj::venue::Decorator*>(v4, a2, (addr_obj::venue::Decorator *)((char *)a2 + 96 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1887A2354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1887A23F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<addr_obj::venue::LocalizedTemplate>::vector[abi:ne180100](uint64_t a1, __int128 **a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<addr_obj::venue::LocalizedTemplate>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate const*,addr_obj::venue::LocalizedTemplate const*,addr_obj::venue::LocalizedTemplate*>(v4, a2, (addr_obj::venue::LocalizedTemplate *)&a2[18 * a3], *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1887A248C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void addr_obj::venue::LocalizedTemplate::~LocalizedTemplate(addr_obj::venue::LocalizedTemplate *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v5 = (void **)((char *)this + 72);
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void addr_obj::venue::Template::~Template(addr_obj::venue::Template *this)
{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)((char *)this + 72);
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v4;
    operator delete(v4);
  }
}

void addr_obj::venue::Decorator::~Decorator(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

char *std::vector<addr_obj::venue::Decorator>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator const*,addr_obj::venue::Decorator const*,addr_obj::venue::Decorator*>(uint64_t a1, addr_obj::venue::Decorator *a2, addr_obj::venue::Decorator *a3, std::string *this)
{
  std::string *v4;
  const addr_obj::venue::Decorator *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      addr_obj::venue::Decorator::Decorator(v4, v6);
      v6 = (const addr_obj::venue::Decorator *)((char *)v6 + 96);
      v4 = v11 + 4;
      v11 += 4;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1887A271C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *addr_obj::venue::Decorator::Decorator(std::string *this, const addr_obj::venue::Decorator *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  v7 = this + 3;
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return this;
}

void sub_1887A2810(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 96;
      std::allocator<addr_obj::venue::Decorator>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<addr_obj::venue::Decorator>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<addr_obj::venue::Decorator>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1887A2A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

std::string *addr_obj::venue::LocalizedTemplate::LocalizedTemplate(std::string *a1, const addr_obj::venue::Template *a2, __int128 **a3, __int128 **a4)
{
  std::string *v7;

  v7 = addr_obj::venue::Template::Template(a1, a2);
  v7[4].__r_.__value_.__r.__words[0] = 0;
  v7[4].__r_.__value_.__l.__size_ = 0;
  v7[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v7 + 4, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  a1[5].__r_.__value_.__r.__words[0] = 0;
  a1[5].__r_.__value_.__l.__size_ = 0;
  a1[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 5, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  return a1;
}

void sub_1887A2C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  addr_obj::venue::Template *v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  addr_obj::venue::Template::~Template(v2);
  _Unwind_Resume(a1);
}

std::string *addr_obj::venue::Template::Template(std::string *this, const addr_obj::venue::Template *a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<addr_obj::venue::Field>::__init_with_size[abi:ne180100]<addr_obj::venue::Field*,addr_obj::venue::Field*>(this[2].__r_.__value_.__r.__words, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<addr_obj::venue::Decorator>::__init_with_size[abi:ne180100]<addr_obj::venue::Decorator*,addr_obj::venue::Decorator*>(this + 3, *((addr_obj::venue::Decorator **)a2 + 9), *((addr_obj::venue::Decorator **)a2 + 10), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 5));
  return this;
}

void sub_1887A2CE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 56) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v6;
    operator delete(v6);
  }
  v7 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1887A2D90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<addr_obj::venue::Field>::__init_with_size[abi:ne180100]<addr_obj::venue::Field*,addr_obj::venue::Field*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1887A2E08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<addr_obj::venue::Decorator>::__init_with_size[abi:ne180100]<addr_obj::venue::Decorator*,addr_obj::venue::Decorator*>(std::string *result, addr_obj::venue::Decorator *a2, addr_obj::venue::Decorator *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<addr_obj::venue::Decorator>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*,addr_obj::venue::Decorator*,addr_obj::venue::Decorator*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1887A2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*,addr_obj::venue::Decorator*,addr_obj::venue::Decorator*>(uint64_t a1, addr_obj::venue::Decorator *a2, addr_obj::venue::Decorator *a3, std::string *this)
{
  std::string *v4;
  const addr_obj::venue::Decorator *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      addr_obj::venue::Decorator::Decorator(v4, v6);
      v6 = (const addr_obj::venue::Decorator *)((char *)v6 + 96);
      v4 = v11 + 4;
      v11 += 4;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1887A2F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,addr_obj::venue::Decorator*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1887A2FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1887A3074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<addr_obj::venue::LocalizedTemplate>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x1C71C71C71C71C8)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(144 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate const*,addr_obj::venue::LocalizedTemplate const*,addr_obj::venue::LocalizedTemplate*>(uint64_t a1, __int128 **a2, addr_obj::venue::LocalizedTemplate *a3, std::string *this)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  addr_obj::venue::LocalizedTemplate *v10;
  addr_obj::venue::LocalizedTemplate *v11;

  v4 = this;
  v10 = (addr_obj::venue::LocalizedTemplate *)this;
  v11 = (addr_obj::venue::LocalizedTemplate *)this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != (__int128 **)a3)
  {
    v6 = a2;
    do
    {
      addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v4, v6);
      v6 += 18;
      v4 = (std::string *)((char *)v11 + 144);
      v11 = (addr_obj::venue::LocalizedTemplate *)((char *)v11 + 144);
    }
    while (v6 != (__int128 **)a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1887A31B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *addr_obj::venue::LocalizedTemplate::LocalizedTemplate(std::string *this, __int128 **a2)
{
  std::string *v4;

  v4 = addr_obj::venue::Template::Template(this, (const addr_obj::venue::Template *)a2);
  v4[4].__r_.__value_.__r.__words[0] = 0;
  v4[4].__r_.__value_.__l.__size_ = 0;
  v4[4].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4 + 4, a2[12], a2[13], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[13] - (char *)a2[12]) >> 3));
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(this + 5, a2[15], a2[16], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[16] - (char *)a2[15]) >> 3));
  return this;
}

void sub_1887A3248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;

  v12 = v11;
  a10 = v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 72);
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *(void **)(v10 + 48);
  if (v14)
  {
    *(_QWORD *)(v10 + 56) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 24);
  if (v15)
  {
    *(_QWORD *)(v10 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 144;
      std::allocator<addr_obj::venue::LocalizedTemplate>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<addr_obj::venue::LocalizedTemplate>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v6 = (void **)(a2 + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a2 + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a2 + 72);
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&v6);
  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    *(_QWORD *)(a2 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    *(_QWORD *)(a2 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 144;
        std::allocator<addr_obj::venue::LocalizedTemplate>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(std::string *result, __int128 **a2, addr_obj::venue::LocalizedTemplate *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<addr_obj::venue::LocalizedTemplate>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1887A349C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>(uint64_t a1, __int128 **a2, addr_obj::venue::LocalizedTemplate *a3, std::string *this)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  addr_obj::venue::LocalizedTemplate *v10;
  addr_obj::venue::LocalizedTemplate *v11;

  v4 = this;
  v10 = (addr_obj::venue::LocalizedTemplate *)this;
  v11 = (addr_obj::venue::LocalizedTemplate *)this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != (__int128 **)a3)
  {
    v6 = a2;
    do
    {
      addr_obj::venue::LocalizedTemplate::LocalizedTemplate(v4, v6);
      v6 += 18;
      v4 = (std::string *)((char *)v11 + 144);
      v11 = (addr_obj::venue::LocalizedTemplate *)((char *)v11 + 144);
    }
    while (v6 != (__int128 **)a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1887A3548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::LocalizedTemplate>,addr_obj::venue::LocalizedTemplate*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__emplace_hint_unique_key_args<addr_obj::venue::LabelPattern,std::pair<addr_obj::venue::LabelPattern const,std::vector<addr_obj::venue::LocalizedTemplate>> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1887A35C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__emplace_hint_unique_key_args<addr_obj::venue::LabelPattern,std::pair<addr_obj::venue::LabelPattern const,std::vector<addr_obj::venue::LocalizedTemplate>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__find_equal<addr_obj::venue::LabelPattern>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__construct_node<std::pair<addr_obj::venue::LabelPattern const,std::vector<addr_obj::venue::LocalizedTemplate>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__find_equal<addr_obj::venue::LabelPattern>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

std::string *std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::__construct_node<std::pair<addr_obj::venue::LabelPattern const,std::vector<addr_obj::venue::LocalizedTemplate>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 5) = 0;
  result = std::vector<addr_obj::venue::LocalizedTemplate>::__init_with_size[abi:ne180100]<addr_obj::venue::LocalizedTemplate*,addr_obj::venue::LocalizedTemplate*>((std::string *)(v6 + 40), *(__int128 ***)(a2 + 8), *(addr_obj::venue::LocalizedTemplate **)(a2 + 16), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1887A388C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 5;
    std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

void std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::destroy(uint64_t a1, char *a2)
{
  void **v4;

  if (a2)
  {
    std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::__map_value_compare<addr_obj::venue::LabelPattern,std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>,std::less<addr_obj::venue::LabelPattern>,true>,std::allocator<std::__value_type<addr_obj::venue::LabelPattern,std::vector<addr_obj::venue::LocalizedTemplate>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = (void **)(a2 + 40);
    std::vector<addr_obj::venue::LocalizedTemplate>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

std::runtime_error *addr_obj::Exception<std::runtime_error>::Exception(std::runtime_error *a1, const void **a2, uint64_t a3)
{
  std::runtime_error *v6;

  v6 = std::runtime_error::runtime_error(a1, "");
  addr_obj::AddressObjectException::AddressObjectException((uint64_t)&v6[1], a2, a3);
  a1->__vftable = (std::runtime_error_vtbl *)&off_1E1BFA208;
  return a1;
}

void sub_1887A39A0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void addr_obj::Exception<std::runtime_error>::~Exception(std::runtime_error *a1)
{
  addr_obj::Exception<std::runtime_error>::~Exception(a1);
  JUMPOUT(0x18D76437CLL);
}

char *addr_obj::Exception<std::runtime_error>::what(uint64_t a1)
{
  return addr_obj::AddressObjectException::what((char *)(a1 + 16));
}

void addr_obj::Exception<std::runtime_error>::~Exception(std::runtime_error *this)
{
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::runtime_error::~runtime_error(this);
}

_QWORD *addr_obj::Json::escape(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  _BYTE *v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  char v15[271];
  _BYTE v16[9];

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
  v3 = *((unsigned __int8 *)a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  if (v3)
  {
    if (v4 >= 0)
      v5 = a2;
    else
      v5 = (_BYTE *)*a2;
    while (1)
    {
      v6 = (char)*v5;
      if (v6 <= 26)
      {
        switch(*v5)
        {
          case 8:
            v7 = "\\b";
            goto LABEL_20;
          case 9:
            v7 = "\\t";
            goto LABEL_20;
          case 0xA:
            v7 = "\\n";
            goto LABEL_20;
          case 0xC:
            v7 = "\\f";
            goto LABEL_20;
          case 0xD:
            v7 = "\\r";
            goto LABEL_20;
          default:
            goto LABEL_29;
        }
      }
      if (v6 == 92)
        break;
      if (v6 == 34)
      {
        v7 = "\\\"";
        goto LABEL_20;
      }
      if (v6 == 27)
      {
        v7 = "\\\\u001b";
        v8 = 7;
LABEL_21:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, v8);
        goto LABEL_22;
      }
LABEL_29:
      if (*v5 > 0x1Fu)
      {
        v16[0] = *v5;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v16, 1);
      }
      else
      {
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\\u", 2);
        v12 = *v11;
        *(_DWORD *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 8) & 0xFFFFFFB5 | 8;
        *(uint64_t *)((char *)v11 + *(_QWORD *)(v12 - 24) + 24) = 4;
        v15[0] = 48;
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, v15);
        std::ostream::operator<<();
      }
LABEL_22:
      ++v5;
      v9 = *((unsigned __int8 *)a2 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = a2;
      else
        v10 = (uint64_t *)*a2;
      if ((v9 & 0x80u) != 0)
        v9 = a2[1];
      if (v5 == (char *)v10 + v9)
        goto LABEL_32;
    }
    v7 = "\\\\";
LABEL_20:
    v8 = 2;
    goto LABEL_21;
  }
LABEL_32:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
  return a1;
}

void sub_1887A3C28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36)
{
  addr_obj::Logger *v37;
  _QWORD *v38;
  const char *v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  _QWORD *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  addr_obj::Logger *v50;
  addr_obj::Logger *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;

  if (a2 == 4)
  {
    v37 = (addr_obj::Logger *)__cxa_begin_catch(a1);
    if (addr_obj::Logger::isInitialized(v37))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a36, (uint64_t)"std::exception: ", 16);
      v39 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v37 + 16))(v37);
      v40 = strlen(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a23, "escape");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, (uint64_t)&a30, 60, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&__p);
      if (a16 < 0)
        operator delete(__p);
      if (a22 < 0)
        operator delete(a17);
      if (a28 < 0)
        operator delete(a23);
      if (a35 < 0)
        operator delete(a30);
      std::ostringstream::~ostringstream((uint64_t)&a36);
    }
    v41 = addr_obj::Json::operator<<<char [3]>(a9, "; ");
    v42 = addr_obj::Json::operator<<<char [50]>(v41, "Json &addr_obj::Json::escape(const std::string &)");
    v43 = addr_obj::Json::operator<<<char [19]>(v42, ": std::exception: ");
    a36 = (*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v37 + 16))(v37);
    addr_obj::Json::operator<<<char const*>(v43, (char **)&a36);
    __cxa_end_catch();
  }
  else if (a2 == 3)
  {
    v44 = (char *)__cxa_begin_catch(a1);
    a10 = v44;
    if (addr_obj::Logger::isInitialized((addr_obj::Logger *)v44))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a36);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a36, (uint64_t)"const char* exception: ", 23);
      v46 = strlen(v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v44, v46);
      std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a23, "escape");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, (uint64_t)&a30, 60, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&__p);
      if (a16 < 0)
        operator delete(__p);
      if (a22 < 0)
        operator delete(a17);
      if (a28 < 0)
        operator delete(a23);
      if (a35 < 0)
        operator delete(a30);
      std::ostringstream::~ostringstream((uint64_t)&a36);
    }
    v47 = addr_obj::Json::operator<<<char [3]>(a9, "; ");
    v48 = addr_obj::Json::operator<<<char [50]>(v47, "Json &addr_obj::Json::escape(const std::string &)");
    v49 = addr_obj::Json::operator<<<char [17]>(v48, ": const char *: ");
    addr_obj::Json::operator<<<char const*>(v49, &a10);
    __cxa_end_catch();
  }
  else
  {
    v50 = (addr_obj::Logger *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v51 = v50;
      if (addr_obj::Logger::isInitialized(v50))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a36);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a36, (uint64_t)"std::string exception: ", 23);
        v53 = *((char *)v51 + 23);
        if (v53 >= 0)
          v54 = (uint64_t)v51;
        else
          v54 = *(_QWORD *)v51;
        if (v53 >= 0)
          v55 = *((unsigned __int8 *)v51 + 23);
        else
          v55 = *((_QWORD *)v51 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
        std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a23, "escape");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        addr_obj::Logger::log(16, (uint64_t)&a30, 60, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&__p);
        if (a16 < 0)
          operator delete(__p);
        if (a22 < 0)
          operator delete(a17);
        if (a28 < 0)
          operator delete(a23);
        if (a35 < 0)
          operator delete(a30);
        std::ostringstream::~ostringstream((uint64_t)&a36);
      }
      v56 = addr_obj::Json::operator<<<char [3]>(a9, "; ");
      v57 = addr_obj::Json::operator<<<char [50]>(v56, "Json &addr_obj::Json::escape(const std::string &)");
      v58 = addr_obj::Json::operator<<<char [26]>(v57, ": std::string exception: ");
      addr_obj::Json::escape(v58, (uint64_t *)v51);
      __cxa_end_catch();
    }
    else
    {
      if (addr_obj::Logger::isInitialized(v50))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a36, (uint64_t)"unknown exception", 17);
        std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a23, "escape");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        addr_obj::Logger::log(16, (uint64_t)&a30, 60, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&__p);
        if (a16 < 0)
          operator delete(__p);
        if (a22 < 0)
          operator delete(a17);
        if (a28 < 0)
          operator delete(a23);
        if (a35 < 0)
          operator delete(a30);
        std::ostringstream::~ostringstream((uint64_t)&a36);
      }
      v59 = addr_obj::Json::operator<<<char [3]>(a9, "; ");
      v60 = addr_obj::Json::operator<<<char [50]>(v59, "Json &addr_obj::Json::escape(const std::string &)");
      addr_obj::Json::operator<<<char [20]>(v60, ": unknown exception");
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1887A3C04);
}

void sub_1887A40F8(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,__int128 a23,std::string::size_type a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v40;
  void *v41;
  const std::string::value_type *v42;
  std::string *v43;
  __int128 v44;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (a22 < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a31 < 0)
    operator delete(a26);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  v40 = __cxa_begin_catch(a1);
  if (a2 == v37)
  {
    v41 = v40;
    std::string::basic_string[abi:ne180100]<0>(&a32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a26, "escape");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v42 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
    v43 = std::string::append((std::string *)&a17, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    a24 = v43->__r_.__value_.__r.__words[2];
    a23 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a32, 60, (uint64_t)&a26, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a22 < 0)
      operator delete(a17);
    if (a31 < 0)
      operator delete(a26);
    if (a37 < 0)
      operator delete(a32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a26, "escape");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a32, 60, (uint64_t)&a26, (uint64_t)&a23, (uint64_t)&a17);
    if (a22 < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a31 < 0)
      operator delete(a26);
    if (a37 < 0)
      operator delete(a32);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887A3FC0);
}

void sub_1887A472C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A3FF0);
}

void sub_1887A47C4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A4BF8);
}

void sub_1887A47D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A4680);
}

void sub_1887A485C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A47B4);
}

void sub_1887A4868(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,__int128 a23,std::string::size_type a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  int v37;
  void *v40;
  void *v41;
  const std::string::value_type *v42;
  std::string *v43;
  __int128 v44;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (a22 < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a31 < 0)
    operator delete(a26);
  std::ostringstream::~ostringstream((uint64_t)&a32);
  v40 = __cxa_begin_catch(a1);
  if (a2 == v37)
  {
    v41 = v40;
    std::string::basic_string[abi:ne180100]<0>(&a32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a26, "escape");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v42 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v41 + 16))(v41);
    v43 = std::string::append((std::string *)&a17, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    a24 = v43->__r_.__value_.__r.__words[2];
    a23 = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a32, 60, (uint64_t)&a26, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a22 < 0)
      operator delete(a17);
    if (a31 < 0)
      operator delete(a26);
    if (a37 < 0)
      operator delete(a32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a26, "escape");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a32, 60, (uint64_t)&a26, (uint64_t)&a23, (uint64_t)&a17);
    if (a22 < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a31 < 0)
      operator delete(a26);
    if (a37 < 0)
      operator delete(a32);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887A3D3CLL);
}

void sub_1887A48D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  std::ostringstream::~ostringstream((uint64_t *)va);
  JUMPOUT(0x1887A4C08);
}

void sub_1887A48E4()
{
  JUMPOUT(0x1887A48ECLL);
}

void sub_1887A4AA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A3EC0);
}

void sub_1887A4B3C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A4BF8);
}

void sub_1887A4B48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A49F8);
}

void sub_1887A4BD4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A4B2CLL);
}

void sub_1887A4BE0()
{
  JUMPOUT(0x1887A4BE8);
}

void sub_1887A4C00()
{
  JUMPOUT(0x1887A4C08);
}

void sub_1887A4DA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A3D88);
}

void sub_1887A4E40()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A4BF8);
}

void sub_1887A4E4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A4CFCLL);
}

void sub_1887A4ED8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A4E30);
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1887A4F74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::Json::operator<<<char [3]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char [50]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char [20]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char [26]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char [17]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char const*>(_QWORD *a1, char **a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, *a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::operator<<<char [19]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

addr_obj::Json *addr_obj::Json::escape(addr_obj::Json *this, const AddrObjGoogle::protobuf::Message *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  const AddrObjGoogle::protobuf::Message *v11;
  void *v12;
  uint64_t v13;
  uint64_t **v14;
  _QWORD *v15;
  addr_obj::Logger *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  const AddrObjGoogle::protobuf::Message *v20;
  void *v21;
  uint64_t v22;
  uint64_t **v23;
  _QWORD *v24;
  addr_obj::Logger *v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32[2];
  char v33;
  std::string v34;
  void *v35[2];
  char v36;
  void *v37;
  uint64_t v38;
  unsigned __int8 v39;
  void *v40;
  uint64_t v41;
  unsigned __int8 v42;
  void *v43;
  char v44;
  _BYTE v45[152];
  void *__p;
  uint64_t v47;
  char v48;
  void *v49;
  char v50;
  _BYTE v51[152];
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;

  v4 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 144))(a2);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, _QWORD **))(*(_QWORD *)v4 + 96))(v4, a2, &v52);
  v5 = v52;
  if (v52 != v53)
  {
    v31 = (void *)*MEMORY[0x1E0DE4F60];
    v30 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v6 = 1;
    v29 = MEMORY[0x1E0DE4FB8] + 16;
    do
    {
      v7 = *v5;
      if (*(_DWORD *)(*v5 + 48) == 3)
      {
        v8 = 0;
        v9 = 1;
        while ((int)v8 < (*(int (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 48))(v4, a2, v7))
        {
          if ((v9 & 1) != 0)
          {
            if ((v6 & 1) == 0)
            {
              LOBYTE(__p) = 44;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)&__p, 1);
            }
            v10 = addr_obj::Json::escape(this, *(uint64_t **)(v7 + 24));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)":[", 2);
            v6 = 0;
          }
          else
          {
            LOBYTE(__p) = 44;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)&__p, 1);
          }
          switch(*(_DWORD *)(v7 + 44))
          {
            case 1:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 320))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 2:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 312))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 3:
            case 0x10:
            case 0x12:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 288))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 4:
            case 6:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 304))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 5:
            case 0xF:
            case 0x11:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 280))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 7:
            case 0xD:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 296))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 8:
              (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 328))(v4, a2, v7, v8);
              std::ostream::operator<<();
              break;
            case 9:
              (*(void (**)(void **__return_ptr, uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 336))(&__p, v4, a2, v7, v8);
              addr_obj::Json::escape(this, (uint64_t *)&__p);
              if (v48 < 0)
                operator delete(__p);
              break;
            case 0xB:
              addr_obj::Json::Json((addr_obj::Json *)&__p);
              v11 = (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 352))(v4, a2, v7, v8);
              addr_obj::Json::escape((addr_obj::Json *)&__p, v11);
              addr_obj::Json::str((uint64_t *)&v40, (addr_obj::Json *)&__p);
              if ((v42 & 0x80u) == 0)
                v12 = &v40;
              else
                v12 = v40;
              if ((v42 & 0x80u) == 0)
                v13 = v42;
              else
                v13 = v41;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)v12, v13);
              goto LABEL_50;
            case 0xE:
              v14 = (uint64_t **)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, uint64_t))(*(_QWORD *)v4 + 344))(v4, a2, v7, v8);
              addr_obj::Json::escape(this, *v14);
              break;
            default:
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unsupported protobuf field type <", 33);
              v15 = (_QWORD *)std::ostream::operator<<();
              v16 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)">", 1);
              if (addr_obj::Logger::isInitialized(v16))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
                std::stringbuf::str();
                if ((v39 & 0x80u) == 0)
                  v17 = &v37;
                else
                  v17 = v37;
                if ((v39 & 0x80u) == 0)
                  v18 = v39;
                else
                  v18 = v38;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v17, v18);
                if ((char)v39 < 0)
                  operator delete(v37);
                std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
                std::string::basic_string[abi:ne180100]<0>(v35, "escape");
                std::stringbuf::str();
                std::string::basic_string[abi:ne180100]<0>(v32, "");
                addr_obj::Logger::log(16, (uint64_t)&v37, 140, (uint64_t)v35, (uint64_t)&v34, (uint64_t)v32);
                if (v33 < 0)
                  operator delete(v32[0]);
                if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v34.__r_.__value_.__l.__data_);
                if (v36 < 0)
                  operator delete(v35[0]);
                if ((char)v39 < 0)
                  operator delete(v37);
                v40 = v31;
                *(void **)((char *)&v40 + *((_QWORD *)v31 - 3)) = v30;
                v41 = v29;
                if (v44 < 0)
                  operator delete(v43);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x18D764310](v45);
              }
              std::stringbuf::str();
              addr_obj::Json::escape(this, (uint64_t *)&v40);
LABEL_50:
              if ((char)v42 < 0)
                operator delete(v40);
              __p = v31;
              *(void **)((char *)&__p + *((_QWORD *)v31 - 3)) = v30;
              v47 = MEMORY[0x1E0DE4FB8] + 16;
              if (v50 < 0)
                operator delete(v49);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x18D764310](v51);
              break;
          }
          v9 = 0;
          v8 = (v8 + 1);
        }
        if ((v9 & 1) == 0)
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)"]", 1);
      }
      else if ((*(unsigned int (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, _QWORD))(*(_QWORD *)v4 + 40))(v4, a2, *v5))
      {
        if ((v6 & 1) == 0)
        {
          LOBYTE(__p) = 44;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)&__p, 1);
        }
        v19 = addr_obj::Json::escape(this, *(uint64_t **)(v7 + 24));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)":", 1);
        switch(*(_DWORD *)(v7 + 44))
        {
          case 1:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 144))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 2:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 136))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 3:
          case 0x10:
          case 0x12:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 112))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 4:
          case 6:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 128))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 5:
          case 0xF:
          case 0x11:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 104))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 7:
          case 0xD:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 120))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 8:
            (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 152))(v4, a2, v7);
            std::ostream::operator<<();
            break;
          case 9:
            (*(void (**)(void **__return_ptr, uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 160))(&__p, v4, a2, v7);
            addr_obj::Json::escape(this, (uint64_t *)&__p);
            if (v48 < 0)
              operator delete(__p);
            break;
          case 0xB:
            addr_obj::Json::Json((addr_obj::Json *)&__p);
            v20 = (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t, _QWORD))(*(_QWORD *)v4 + 176))(v4, a2, v7, 0);
            addr_obj::Json::escape((addr_obj::Json *)&__p, v20);
            addr_obj::Json::str((uint64_t *)&v40, (addr_obj::Json *)&__p);
            if ((v42 & 0x80u) == 0)
              v21 = &v40;
            else
              v21 = v40;
            if ((v42 & 0x80u) == 0)
              v22 = v42;
            else
              v22 = v41;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)v21, v22);
            goto LABEL_100;
          case 0xE:
            v23 = (uint64_t **)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)v4 + 168))(v4, a2, v7);
            addr_obj::Json::escape(this, *v23);
            break;
          default:
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unsupported protobuf field type <", 33);
            v24 = (_QWORD *)std::ostream::operator<<();
            v25 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)">", 1);
            if (addr_obj::Logger::isInitialized(v25))
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
              std::stringbuf::str();
              if ((v39 & 0x80u) == 0)
                v26 = &v37;
              else
                v26 = v37;
              if ((v39 & 0x80u) == 0)
                v27 = v39;
              else
                v27 = v38;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v26, v27);
              if ((char)v39 < 0)
                operator delete(v37);
              std::string::basic_string[abi:ne180100]<0>(&v37, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
              std::string::basic_string[abi:ne180100]<0>(v35, "escape");
              std::stringbuf::str();
              std::string::basic_string[abi:ne180100]<0>(v32, "");
              addr_obj::Logger::log(16, (uint64_t)&v37, 202, (uint64_t)v35, (uint64_t)&v34, (uint64_t)v32);
              if (v33 < 0)
                operator delete(v32[0]);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34.__r_.__value_.__l.__data_);
              if (v36 < 0)
                operator delete(v35[0]);
              if ((char)v39 < 0)
                operator delete(v37);
              v40 = v31;
              *(void **)((char *)&v40 + *((_QWORD *)v31 - 3)) = v30;
              v41 = MEMORY[0x1E0DE4FB8] + 16;
              if (v44 < 0)
                operator delete(v43);
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x18D764310](v45);
            }
            std::stringbuf::str();
            addr_obj::Json::escape(this, (uint64_t *)&v40);
LABEL_100:
            if ((char)v42 < 0)
              operator delete(v40);
            __p = v31;
            *(void **)((char *)&__p + *((_QWORD *)v31 - 3)) = v30;
            v47 = MEMORY[0x1E0DE4FB8] + 16;
            if (v50 < 0)
              operator delete(v49);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x18D764310](v51);
            break;
        }
        v6 = 0;
      }
      ++v5;
    }
    while (v5 != v53);
  }
  addr_obj::Json::close(this);
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  return this;
}

void sub_1887A6228(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;
  void *v66;

  __cxa_end_catch();
  std::ostringstream::~ostringstream((uint64_t)&a64);
  v66 = *(void **)(v64 - 112);
  if (v66)
  {
    *(_QWORD *)(v64 - 104) = v66;
    operator delete(v66);
  }
  __cxa_call_unexpected(a1);
}

uint64_t addr_obj::Json::str(addr_obj::Json *this)
{
  return std::stringbuf::str();
}

void sub_1887A6348(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  _QWORD *v34;
  addr_obj::Logger *v36;
  addr_obj::Logger *v37;
  _QWORD *v38;
  const char *v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  const char *v44;
  size_t v45;
  _QWORD *v46;
  _QWORD *v47;

  v36 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v37 = v36;
    if (addr_obj::Logger::isInitialized(v36))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a34);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a34, (uint64_t)"std::exception: ", 16);
      v39 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v37 + 16))(v37);
      v40 = strlen(v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
      std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a21, "str");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, (uint64_t)&a28, 278, (uint64_t)&a21, (uint64_t)&a15, (uint64_t)&__p);
      if (a14 < 0)
        operator delete(__p);
      if (a20 < 0)
        operator delete(a15);
      if (a26 < 0)
        operator delete(a21);
      if (a33 < 0)
        operator delete(a28);
      std::ostringstream::~ostringstream((uint64_t)&a34);
    }
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"; ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"std::string addr_obj::Json::str() const", 39);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)": std::exception: ", 18);
    v44 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v37 + 16))(v37);
    v45 = strlen(v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    std::stringbuf::str();
    __cxa_end_catch();
  }
  else
  {
    if (addr_obj::Logger::isInitialized(v36))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a34);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a34, (uint64_t)"unknown exception", 17);
      std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a21, "str");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, (uint64_t)&a28, 288, (uint64_t)&a21, (uint64_t)&a15, (uint64_t)&__p);
      if (a14 < 0)
        operator delete(__p);
      if (a20 < 0)
        operator delete(a15);
      if (a26 < 0)
        operator delete(a21);
      if (a33 < 0)
        operator delete(a28);
      std::ostringstream::~ostringstream((uint64_t)&a34);
    }
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"; ", 2);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"std::string addr_obj::Json::str() const", 39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": unknown exception", 19);
    std::stringbuf::str();
    __cxa_end_catch();
  }
  JUMPOUT(0x1887A632CLL);
}

void sub_1887A6610(void *__p, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *__pa, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,__int128 a21,std::string::size_type a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  int v35;
  void *v38;
  void *v39;
  const std::string::value_type *v40;
  std::string *v41;
  __int128 v42;

  if (SHIBYTE(a14) < 0)
    operator delete(__pa);
  if (a20 < 0)
    operator delete(a15);
  if (SHIBYTE(a22) < 0)
    operator delete((void *)a21);
  if (a29 < 0)
    operator delete(a24);
  std::ostringstream::~ostringstream((uint64_t)&a30);
  v38 = __cxa_begin_catch(__p);
  if (a2 == v35)
  {
    v39 = v38;
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "str");
    std::string::basic_string[abi:ne180100]<0>(&a15, "Exception caught during formatting of the log line: ");
    v40 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39);
    v41 = std::string::append((std::string *)&a15, v40);
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    a22 = v41->__r_.__value_.__r.__words[2];
    a21 = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a30, 278, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&__pa);
    if (SHIBYTE(a14) < 0)
      operator delete(__pa);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a20 < 0)
      operator delete(a15);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a30, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a24, "str");
    std::string::basic_string[abi:ne180100]<0>(&a21, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a15, "");
    addr_obj::Logger::log(16, (uint64_t)&a30, 278, (uint64_t)&a24, (uint64_t)&a21, (uint64_t)&a15);
    if (a20 < 0)
      operator delete(a15);
    if (SHIBYTE(a22) < 0)
      operator delete((void *)a21);
    if (a29 < 0)
      operator delete(a24);
    if (a35 < 0)
      operator delete(a30);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887A6450);
}

void sub_1887A6BA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A6B9CLL);
}

void sub_1887A6C18(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A64C0);
}

void sub_1887A6C28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A6AF8);
}

void sub_1887A6CB4(void *a1)
{
  __cxa_end_catch();
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887A64C0);
}

void sub_1887A6CE4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A6CC4);
}

void sub_1887A6D08()
{
  __cxa_end_catch();
  JUMPOUT(0x1887A6CC4);
}

addr_obj::Json *addr_obj::Json::close(addr_obj::Json *this)
{
  unint64_t v2;
  unint64_t v3;
  void **v4;
  _BOOL4 v5;
  char *v6;
  void *v8[2];
  unsigned __int8 v9;
  _BYTE v10[16];
  void *__p[2];
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  std::stringbuf::str();
  v2 = v12;
  if ((v12 & 0x80u) != 0)
    v2 = (unint64_t)__p[1];
  if (!v2)
  {
    v5 = 0;
    if ((v12 & 0x80) == 0)
      goto LABEL_12;
LABEL_15:
    operator delete(__p[0]);
    if (!v5)
      goto LABEL_20;
    goto LABEL_16;
  }
  std::stringbuf::str();
  v3 = (unint64_t)v8[1];
  if ((v9 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (void **)v8[0];
  if ((v9 & 0x80u) == 0)
    v3 = v9;
  v5 = *((unsigned __int8 *)v4 + v3 - 1) == 44;
  if ((char)v9 < 0)
    operator delete(v8[0]);
  if ((v12 & 0x80) != 0)
    goto LABEL_15;
LABEL_12:
  if (!v5)
    goto LABEL_20;
LABEL_16:
  MEMORY[0x18D7641B4](v10, this);
  v6 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  if ((v6[32] & 5) == 0)
  {
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v6 + 5) + 32))(__p, *((_QWORD *)v6 + 5), -1, 2, 16);
    if (v13 == -1)
      std::ios_base::clear((std::ios_base *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), *(_DWORD *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24) + 32) | 4);
  }
  MEMORY[0x18D7641C0](v10);
LABEL_20:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(this, (uint64_t)"}", 1);
  return this;
}

void sub_1887A6E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::string *a17, void *a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,char a24,uint64_t a25,void *a26,uint64_t a27,void *a28)
{
  _QWORD *v28;
  addr_obj::Logger *v31;
  _QWORD *v32;
  const char *v33;
  size_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  char *v38;
  _QWORD *v39;
  size_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  addr_obj::Logger *v44;
  addr_obj::Logger *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;

  if (a2)
  {
    MEMORY[0x18D7641C0](&a26);
    if (a2 == 4)
    {
      v31 = (addr_obj::Logger *)__cxa_begin_catch(exception_object);
      if (addr_obj::Logger::isInitialized(v31))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a28);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a28, (uint64_t)"std::exception: ", 16);
        v33 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v31 + 16))(v31);
        v34 = strlen(v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v33, v34);
        std::string::basic_string[abi:ne180100]<0>(&a23, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a20, "close");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        addr_obj::Logger::log(16, (uint64_t)&a23, 235, (uint64_t)&a20, (uint64_t)&a17, (uint64_t)&__p);
        if (a16 < 0)
          operator delete(__p);
        if (SHIBYTE(a19) < 0)
          operator delete(a17);
        if (SHIBYTE(a22) < 0)
          operator delete(a20);
        if (SHIBYTE(a25) < 0)
          operator delete(a23);
        std::ostringstream::~ostringstream((uint64_t)&a28);
      }
      v35 = addr_obj::Json::operator<<<char [3]>(v28, "; ");
      v36 = addr_obj::Json::operator<<<char [30]>(v35, "Json &addr_obj::Json::close()");
      v37 = addr_obj::Json::operator<<<char [19]>(v36, ": std::exception: ");
      a28 = (void *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v31 + 16))(v31);
      addr_obj::Json::operator<<<char const*>(v37, (char **)&a28);
      __cxa_end_catch();
    }
    else if (a2 == 3)
    {
      v38 = (char *)__cxa_begin_catch(exception_object);
      a10 = v38;
      if (addr_obj::Logger::isInitialized((addr_obj::Logger *)v38))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a28);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a28, (uint64_t)"const char* exception: ", 23);
        v40 = strlen(v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v38, v40);
        std::string::basic_string[abi:ne180100]<0>(&a23, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a20, "close");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        addr_obj::Logger::log(16, (uint64_t)&a23, 235, (uint64_t)&a20, (uint64_t)&a17, (uint64_t)&__p);
        if (a16 < 0)
          operator delete(__p);
        if (SHIBYTE(a19) < 0)
          operator delete(a17);
        if (SHIBYTE(a22) < 0)
          operator delete(a20);
        if (SHIBYTE(a25) < 0)
          operator delete(a23);
        std::ostringstream::~ostringstream((uint64_t)&a28);
      }
      v41 = addr_obj::Json::operator<<<char [3]>(v28, "; ");
      v42 = addr_obj::Json::operator<<<char [30]>(v41, "Json &addr_obj::Json::close()");
      v43 = addr_obj::Json::operator<<<char [17]>(v42, ": const char *: ");
      addr_obj::Json::operator<<<char const*>(v43, &a10);
      __cxa_end_catch();
    }
    else
    {
      v44 = (addr_obj::Logger *)__cxa_begin_catch(exception_object);
      if (a2 == 2)
      {
        v45 = v44;
        if (addr_obj::Logger::isInitialized(v44))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a28);
          v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a28, (uint64_t)"std::string exception: ", 23);
          v47 = *((char *)v45 + 23);
          if (v47 >= 0)
            v48 = (uint64_t)v45;
          else
            v48 = *(_QWORD *)v45;
          if (v47 >= 0)
            v49 = *((unsigned __int8 *)v45 + 23);
          else
            v49 = *((_QWORD *)v45 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
          std::string::basic_string[abi:ne180100]<0>(&a23, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
          std::string::basic_string[abi:ne180100]<0>(&a20, "close");
          std::stringbuf::str();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          addr_obj::Logger::log(16, (uint64_t)&a23, 235, (uint64_t)&a20, (uint64_t)&a17, (uint64_t)&__p);
          if (a16 < 0)
            operator delete(__p);
          if (SHIBYTE(a19) < 0)
            operator delete(a17);
          if (SHIBYTE(a22) < 0)
            operator delete(a20);
          if (SHIBYTE(a25) < 0)
            operator delete(a23);
          std::ostringstream::~ostringstream((uint64_t)&a28);
        }
        v50 = addr_obj::Json::operator<<<char [3]>(v28, "; ");
        v51 = addr_obj::Json::operator<<<char [30]>(v50, "Json &addr_obj::Json::close()");
        v52 = addr_obj::Json::operator<<<char [26]>(v51, ": std::string exception: ");
        addr_obj::Json::escape(v52, (uint64_t *)v45);
        __cxa_end_catch();
      }
      else
      {
        if (addr_obj::Logger::isInitialized(v44))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a28);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a28, (uint64_t)"unknown exception", 17);
          std::string::basic_string[abi:ne180100]<0>(&a23, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Json.cpp");
          std::string::basic_string[abi:ne180100]<0>(&a20, "close");
          std::stringbuf::str();
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          addr_obj::Logger::log(16, (uint64_t)&a23, 235, (uint64_t)&a20, (uint64_t)&a17, (uint64_t)&__p);
          if (a16 < 0)
            operator delete(__p);
          if (SHIBYTE(a19) < 0)
            operator delete(a17);
          if (SHIBYTE(a22) < 0)
            operator delete(a20);
          if (SHIBYTE(a25) < 0)
            operator delete(a23);
          std::ostringstream::~ostringstream((uint64_t)&a28);
        }
        v53 = addr_obj::Json::operator<<<char [3]>(v28, "; ");
        v54 = addr_obj::Json::operator<<<char [30]>(v53, "Json &addr_obj::Json::close()");
        addr_obj::Json::operator<<<char [20]>(v54, ": unknown exception");
        __cxa_end_catch();
      }
    }
    JUMPOUT(0x1887A6E58);
  }
  _Unwind_Resume(exception_object);
}

void sub_1887A8020(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1887A802CLL);
  JUMPOUT(0x1887A8018);
}

void sub_1887A81CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1887A7048);
  }
  JUMPOUT(0x1887A8018);
}

void sub_1887A8280(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1887A828CLL);
  }
  JUMPOUT(0x1887A8018);
}

void sub_1887A8294(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a2)
  {
    if (a16 < 0)
      operator delete(__p);
    if (a28 < 0)
      operator delete(a23);
    if (a22 < 0)
      operator delete(a17);
    if (a34 < 0)
      operator delete(a29);
    if (a42 < 0)
      operator delete(a37);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1887A8120);
  }
  JUMPOUT(0x1887A8018);
}

void sub_1887A8338(uint64_t a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1887A8270);
  }
  JUMPOUT(0x1887A8018);
}

void sub_1887A8348(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1887A8018);
}

_QWORD *addr_obj::Json::append(_QWORD *a1, uint64_t *a2, const AddrObjGoogle::protobuf::Message *a3)
{
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  addr_obj::Json::Json((addr_obj::Json *)v7);
  addr_obj::Json::escape((addr_obj::Json *)v7, a3);
  addr_obj::Json::append(a1, a2, (addr_obj::Json *)v7);
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v9);
  return a1;
}

void sub_1887A8420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::Json::append(_QWORD *a1, uint64_t *a2, addr_obj::Json *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  unsigned __int8 v12;

  v5 = addr_obj::Json::escape(a1, a2);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)":", 1);
  addr_obj::Json::str((uint64_t *)__p, a3);
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) == 0)
    v8 = v12;
  else
    v8 = (uint64_t)__p[1];
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1887A84D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *addr_obj::Json::append(_QWORD *a1, uint64_t *a2, addr_obj::Localization *a3)
{
  _BYTE v7[64];
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  addr_obj::Json::Json((addr_obj::Json *)v8);
  addr_obj::parse<addr_obj::geo3::Address,addr_obj::SerializedAddress>(a3, (addr_obj::geo3::Address *)v7);
  addr_obj::Json::escape((addr_obj::Json *)v8, (const AddrObjGoogle::protobuf::Message *)v7);
  addr_obj::Json::append(a1, a2, (addr_obj::Json *)v8);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)v7);
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v10);
  return a1;
}

{
  _BYTE v7[248];
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  addr_obj::Json::Json((addr_obj::Json *)v8);
  addr_obj::parse<addr_obj::geo3::StructuredAddress,addr_obj::SerializedStructuredAddress>(a3, (addr_obj::geo3::StructuredAddress *)v7);
  addr_obj::Json::escape((addr_obj::Json *)v8, (const AddrObjGoogle::protobuf::Message *)v7);
  addr_obj::Json::append(a1, a2, (addr_obj::Json *)v8);
  addr_obj::geo3::StructuredAddress::~StructuredAddress((addr_obj::geo3::StructuredAddress *)v7);
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v10);
  return a1;
}

void sub_1887A85C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)va);
  std::ostringstream::~ostringstream((uint64_t)va1);
  _Unwind_Resume(a1);
}

void addr_obj::parse<addr_obj::geo3::Address,addr_obj::SerializedAddress>(addr_obj::Localization *a1@<X0>, addr_obj::geo3::Address *a2@<X8>)
{
  const addr_obj::geo3::Address *v4;
  _BYTE v5[64];

  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)v5);
  v4 = (const addr_obj::geo3::Address *)addr_obj::parse(a1, (uint64_t)v5);
  addr_obj::geo3::Address::Address(a2, v4);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)v5);
}

void sub_1887A863C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)&a9);
  _Unwind_Resume(a1);
}

void sub_1887A872C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  addr_obj::geo3::StructuredAddress::~StructuredAddress((addr_obj::geo3::StructuredAddress *)&a9);
  std::ostringstream::~ostringstream((uint64_t)&a40);
  _Unwind_Resume(a1);
}

void addr_obj::parse<addr_obj::geo3::StructuredAddress,addr_obj::SerializedStructuredAddress>(addr_obj::Localization *a1@<X0>, addr_obj::geo3::StructuredAddress *a2@<X8>)
{
  const addr_obj::geo3::StructuredAddress *v4;
  _BYTE v5[248];

  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v5);
  v4 = (const addr_obj::geo3::StructuredAddress *)addr_obj::parse(a1, (uint64_t)v5);
  addr_obj::geo3::StructuredAddress::StructuredAddress(a2, v4);
  addr_obj::geo3::StructuredAddress::~StructuredAddress((addr_obj::geo3::StructuredAddress *)v5);
}

void sub_1887A87A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  addr_obj::geo3::StructuredAddress::~StructuredAddress((addr_obj::geo3::StructuredAddress *)va);
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::Json::operator<<<char [30]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

addr_obj::Json *addr_obj::Json::Json(addr_obj::Json *this)
{
  _QWORD *v2;

  v2 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"{", 1);
  return this;
}

void sub_1887A8840(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostringstream::~ostringstream(v1);
  _Unwind_Resume(a1);
}

addr_obj::Json *addr_obj::Json::Json(addr_obj::Json *this, const addr_obj::Json *a2)
{
  std::string __p;

  std::stringbuf::str();
  std::ostringstream::basic_ostringstream[abi:ne180100](this, &__p, 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return this;
}

void sub_1887A88A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::ostringstream::basic_ostringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  a1[14] = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t)(a1 + 1);
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *a1 = v9;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v11, a1 + 1);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  *a1 = v6 + 24;
  a1[14] = v7;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3 | 0x10);
  return a1;
}

void sub_1887A897C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x18D764310](v1);
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::Json::append(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;

  v5 = addr_obj::Json::escape(a1, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)":", 1);
  v6 = addr_obj::Json::escape(a1, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)",", 1);
  return a1;
}

_QWORD *addr_obj::Json::append(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  void *__p[2];
  char v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  addr_obj::Json::Json((addr_obj::Json *)v11);
  std::string::basic_string[abi:ne180100]<0>(__p, "default");
  addr_obj::Json::append(v11, (uint64_t *)__p, a3);
  if (v10 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "true");
  addr_obj::Json::append(v11, (uint64_t *)__p, a4);
  if (v10 < 0)
    operator delete(__p[0]);
  addr_obj::Json::close((addr_obj::Json *)v11);
  addr_obj::Json::append(a1, a2, (addr_obj::Json *)v11);
  v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v11[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v13);
  return a1;
}

void sub_1887A8B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf();
  *(_QWORD *)v6 = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_1887A8BC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

void addr_obj::Localization::~Localization(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0)
    operator delete(*(void **)(a2 + 56));
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

_QWORD *std::shared_ptr<addr_obj::AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BFB720;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887A8E78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<addr_obj::AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BFB790;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887A8F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::AddressObject>::__shared_ptr_default_delete<addr_obj::AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1887A900C(addr_obj *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  addr_obj::geo3 *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  AddrObjGoogle::protobuf *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  addr_obj::protobuf_AddDesc_AddressObject_2eproto(a1, a2, a3, a4);
  addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(v4, v5, v6, v7);
  AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(v8, v9, v10, v11);
}

double addr_obj::AddressObjectFactory::fromContact@<D0>(addr_obj::Logger *a1@<X0>, addr_obj::Localization *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double result;
  void *__p[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  __int128 *v97[11];
  char v98;
  uint64_t v99;

  if (addr_obj::Logger::isInitialized(a1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v97);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"input parameters: ", 18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"localization", 12);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"==", 2);
    v22 = addr_obj::operator<<(v21, a2);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"formattedAddress", 16);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"==", 2);
    v26 = *(char *)(a3 + 23);
    if (v26 >= 0)
      v27 = a3;
    else
      v27 = *(_QWORD *)a3;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a3 + 23);
    else
      v28 = *(_QWORD *)(a3 + 8);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)", ", 2);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"street", 6);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"==", 2);
    v33 = *(char *)(a4 + 23);
    if (v33 >= 0)
      v34 = a4;
    else
      v34 = *(_QWORD *)a4;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(a4 + 23);
    else
      v35 = *(_QWORD *)(a4 + 8);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, v34, v35);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", ", 2);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"city", 4);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"==", 2);
    v40 = *(char *)(a5 + 23);
    if (v40 >= 0)
      v41 = a5;
    else
      v41 = *(_QWORD *)a5;
    if (v40 >= 0)
      v42 = *(unsigned __int8 *)(a5 + 23);
    else
      v42 = *(_QWORD *)(a5 + 8);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", ", 2);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"state", 5);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"==", 2);
    v47 = *(char *)(a6 + 23);
    if (v47 >= 0)
      v48 = a6;
    else
      v48 = *(_QWORD *)a6;
    if (v47 >= 0)
      v49 = *(unsigned __int8 *)(a6 + 23);
    else
      v49 = *(_QWORD *)(a6 + 8);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, v48, v49);
    v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", ", 2);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"postalCode", 10);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"==", 2);
    v54 = *(char *)(a7 + 23);
    if (v54 >= 0)
      v55 = a7;
    else
      v55 = *(_QWORD *)a7;
    if (v54 >= 0)
      v56 = *(unsigned __int8 *)(a7 + 23);
    else
      v56 = *(_QWORD *)(a7 + 8);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, v55, v56);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", ", 2);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"country", 7);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"==", 2);
    v61 = *(char *)(a8 + 23);
    if (v61 >= 0)
      v62 = a8;
    else
      v62 = *(_QWORD *)a8;
    if (v61 >= 0)
      v63 = *(unsigned __int8 *)(a8 + 23);
    else
      v63 = *(_QWORD *)(a8 + 8);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", ", 2);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"isoCountryCode", 14);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"==", 2);
    v68 = *(char *)(a10 + 23);
    if (v68 >= 0)
      v69 = a10;
    else
      v69 = *(_QWORD *)a10;
    if (v68 >= 0)
      v70 = *(unsigned __int8 *)(a10 + 23);
    else
      v70 = *(_QWORD *)(a10 + 8);
    v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)", ", 2);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"subAdministrativeArea", 21);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"==", 2);
    v75 = *(char *)(a11 + 23);
    if (v75 >= 0)
      v76 = a11;
    else
      v76 = *(_QWORD *)a11;
    if (v75 >= 0)
      v77 = *(unsigned __int8 *)(a11 + 23);
    else
      v77 = *(_QWORD *)(a11 + 8);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"subLocality", 11);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"==", 2);
    v82 = *(char *)(a12 + 23);
    if (v82 >= 0)
      v83 = a12;
    else
      v83 = *(_QWORD *)a12;
    if (v82 >= 0)
      v84 = *(unsigned __int8 *)(a12 + 23);
    else
      v84 = *(_QWORD *)(a12 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
    std::string::basic_string[abi:ne180100]<0>(v95, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v93, "fromContact");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    addr_obj::Logger::log(2, (uint64_t)v95, 137, (uint64_t)v93, (uint64_t)v91, (uint64_t)__p);
    if (v90 < 0)
      operator delete(__p[0]);
    if (v92 < 0)
      operator delete(v91[0]);
    if (v94 < 0)
      operator delete(v93[0]);
    if (v96 < 0)
      operator delete(v95[0]);
    v97[0] = *(__int128 **)MEMORY[0x1E0DE4F60];
    *(__int128 **)((char *)v97 + *((_QWORD *)v97[0] - 3)) = *(__int128 **)(MEMORY[0x1E0DE4F60] + 24);
    v97[1] = (__int128 *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v98 < 0)
      operator delete(v97[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v99);
  }
  v85 = operator new();
  std::string::basic_string[abi:ne180100]<0>(v95, "fromContact");
  addr_obj::Fingerprints::Fingerprints(v97, a1, v95);
  addr_obj::V0AddressObject::V0AddressObject(v85, (__int128 *)a2, v97, a3, a4, a5, a6, a7, a8, a10, a11, a12);
  std::shared_ptr<addr_obj::V0AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V0AddressObject,void>(v93, v85);
  v91[0] = v97;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)v91);
  if (v96 < 0)
    operator delete(v95[0]);
  result = *(double *)v93;
  *a9 = *(_OWORD *)v93;
  return result;
}

void sub_1887A9554(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, addr_obj::Localization *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::string *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,addr_obj::Localization *a24,void *__pa,int a26,__int16 a27,char a28,char a29,void *a30,void *a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,__int128 a40,std::string::size_type a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  void *v55;
  void *v56;
  const std::string::value_type *v57;
  std::string *v58;
  __int128 v59;
  void *v60;

  if (SHIBYTE(a30) < 0)
    operator delete(__pa);
  if (a39 < 0)
    operator delete(a31);
  if (SHIBYTE(a41) < 0)
    operator delete((void *)a40);
  if (a47 < 0)
    operator delete(a42);
  std::ostringstream::~ostringstream((uint64_t)&a48);
  v55 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v56 = v55;
    std::string::basic_string[abi:ne180100]<0>(&a48, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a42, "fromContact");
    std::string::basic_string[abi:ne180100]<0>(&a31, "Exception caught during formatting of the log line: ");
    v57 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
    v58 = std::string::append((std::string *)&a31, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    a41 = v58->__r_.__value_.__r.__words[2];
    a40 = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(2, (uint64_t)&a48, 137, (uint64_t)&a42, (uint64_t)&a40, (uint64_t)&__pa);
    if (SHIBYTE(a30) < 0)
      operator delete(__pa);
    if (SHIBYTE(a41) < 0)
      operator delete((void *)a40);
    if (a39 < 0)
    {
      v60 = a31;
LABEL_20:
      operator delete(v60);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a48, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a42, "fromContact");
    std::string::basic_string[abi:ne180100]<0>(&a40, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a31, "");
    addr_obj::Logger::log(2, (uint64_t)&a48, 137, (uint64_t)&a42, (uint64_t)&a40, (uint64_t)&a31);
    if (a39 < 0)
      operator delete(a31);
    if (SHIBYTE(a41) < 0)
    {
      v60 = (void *)a40;
      goto LABEL_20;
    }
  }
  if (a47 < 0)
    operator delete(a42);
  if (a53 < 0)
    operator delete(a48);
  __cxa_end_catch();
  JUMPOUT(0x1887A9480);
}

void sub_1887AAA60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a24 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (a30 < 0)
    operator delete(a25);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AAA58);
}

void sub_1887AAB6C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AA8D0);
}

void addr_obj::AddressObjectFactory::fromLegacy(addr_obj::Logger *a1@<X0>, addr_obj::Localization *a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned __int8 *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unsigned __int8 *a10, __int128 **a11, uint64_t a12, int a13)
{
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  addr_obj *v68;
  uint64_t v69;
  addr_obj *v70;
  __int128 *v71;
  __int128 *v72;
  __int128 *v73;
  __int128 *v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  __int128 *v78;
  __int128 *v79;
  uint64_t v80;
  __int128 v81;
  std::string *v82;
  int v91;
  void *v92[2];
  uint64_t v93;
  void *__p[2];
  uint64_t v95;
  void *v96[2];
  char v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  _QWORD v102[5];
  addr_obj *v103;
  char v104;
  void *v105;
  char v106;
  uint64_t v107;

  if (addr_obj::Logger::isInitialized(a1))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v102);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"input parameters: ", 18);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"localization", 12);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"==", 2);
    v17 = addr_obj::operator<<(v16, a2);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"name", 4);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"==", 2);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", ", 2);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"address", 7);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"==", 2);
    v28 = addr_obj::operator<<(v27, a4);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"spokenName", 10);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"==", 2);
    v32 = *(char *)(a5 + 23);
    if (v32 >= 0)
      v33 = a5;
    else
      v33 = *(_QWORD *)a5;
    if (v32 >= 0)
      v34 = *(unsigned __int8 *)(a5 + 23);
    else
      v34 = *(_QWORD *)(a5 + 8);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", ", 2);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"spokenAddress", 13);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"==", 2);
    v39 = *(char *)(a6 + 23);
    if (v39 >= 0)
      v40 = a6;
    else
      v40 = *(_QWORD *)a6;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(a6 + 23);
    else
      v41 = *(_QWORD *)(a6 + 8);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", ", 2);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"spokenStructuredAddress", 23);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"==", 2);
    v46 = addr_obj::operator<<(v45, a7);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", ", 2);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"phoneticName", 12);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"==", 2);
    v50 = *(char *)(a8 + 23);
    if (v50 >= 0)
      v51 = a8;
    else
      v51 = *(_QWORD *)a8;
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a8 + 23);
    else
      v52 = *(_QWORD *)(a8 + 8);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)", ", 2);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"phoneticAddress", 15);
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"==", 2);
    v57 = addr_obj::operator<<(v56, a10);
    v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)", ", 2);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"venueData", 9);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"==", 2);
    v61 = addr_obj::operator<<(v60, a11);
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", ", 2);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"locationAddress", 15);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"==", 2);
    v65 = *(char *)(a12 + 23);
    if (v65 >= 0)
      v66 = a12;
    else
      v66 = *(_QWORD *)a12;
    if (v65 >= 0)
      v67 = *(unsigned __int8 *)(a12 + 23);
    else
      v67 = *(_QWORD *)(a12 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, v66, v67);
    std::string::basic_string[abi:ne180100]<0>(v100, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(v98, "fromLegacy");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    addr_obj::Logger::log(2, (uint64_t)v100, 171, (uint64_t)v98, (uint64_t)v96, (uint64_t)__p);
    if (SHIBYTE(v95) < 0)
      operator delete(__p[0]);
    if (v97 < 0)
      operator delete(v96[0]);
    if (SHIBYTE(v99) < 0)
      operator delete(v98[0]);
    if (SHIBYTE(v101) < 0)
      operator delete(v100[0]);
    v102[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v102 + *(_QWORD *)(v102[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v102[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v106 < 0)
      operator delete(v105);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v107);
  }
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)v102);
  v100[0] = 0;
  v100[1] = 0;
  v101 = 0;
  addr_obj::parse((addr_obj::Localization *)a4, (uint64_t)v102);
  if ((v104 & 2) != 0)
  {
    v68 = v103;
    if (!v103)
      v68 = *(addr_obj **)(addr_obj::geo3::Address::default_instance_(0) + 40);
    addr_obj::getCountryCode(v68, (uint64_t)v98);
    if (SHIBYTE(v101) < 0)
      operator delete(v100[0]);
    *(_OWORD *)v100 = *(_OWORD *)v98;
    v101 = v99;
  }
  if (a13)
    goto LABEL_54;
  v69 = *(unsigned __int8 *)(a12 + 23);
  if ((v69 & 0x80u) != 0)
    v69 = *(_QWORD *)(a12 + 8);
  if (v69 || addr_obj::Formatting::overrideLegacyShortAddress(a2, (uint64_t)v100))
  {
LABEL_54:
    v82 = (std::string *)operator new();
    std::string::basic_string[abi:ne180100]<0>(v96, "fromLegacy");
    v70 = (addr_obj *)addr_obj::Fingerprints::Fingerprints(v98, a1, v96);
    v71 = addr_obj::emptyString(v70);
    v72 = addr_obj::emptyString((addr_obj *)v71);
    v73 = addr_obj::emptyString((addr_obj *)v72);
    v74 = addr_obj::emptyString((addr_obj *)v73);
    v75 = addr_obj::emptyString((addr_obj *)v74);
    v76 = addr_obj::emptyString((addr_obj *)v75);
    v77 = addr_obj::emptyString((addr_obj *)v76);
    v78 = addr_obj::emptyString((addr_obj *)v77);
    v79 = addr_obj::emptyString((addr_obj *)v78);
    __p[0] = 0;
    __p[1] = 0;
    v95 = 0;
    v92[0] = 0;
    v92[1] = 0;
    v93 = 0;
    v91 = 2;
    *((_QWORD *)&v81 + 1) = a8;
    *(_QWORD *)&v81 = a7;
    addr_obj::V2AddressObject::V2AddressObject(v82, (__int128 *)a2, (__int128 **)v98, (const addr_obj::VenueInfo *)a11, a3, (addr_obj::Localization *)a4, (const std::string *)a5, (std::string *)a6, v81, (addr_obj::Localization *)a10, (uint64_t)v71, (uint64_t)v72, (uint64_t)v73, (uint64_t)v74, (uint64_t)v75, (std::string *)v76, (std::string *)v77, (uint64_t)v78, a12,
      (uint64_t)v79,
      a13,
      (uint64_t)__p,
      (uint64_t)v92,
      &v91);
    std::shared_ptr<addr_obj::AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(a9, (uint64_t)v82);
    if (SHIBYTE(v93) < 0)
      operator delete(v92[0]);
    if (SHIBYTE(v95) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v80 = operator new();
    LODWORD(v92[0]) = 1;
    std::string::basic_string[abi:ne180100]<0>(v96, "fromLegacy");
    addr_obj::Fingerprints::Fingerprints(v98, a1, v96);
    addr_obj::V1AddressObject::V1AddressObject(v80, (int *)v92, (__int128 *)a2, (__int128 **)v98, (const addr_obj::VenueInfo *)a11, a3, (addr_obj::Localization *)a4, (const std::string *)a5, (std::string *)a6, (addr_obj::Localization *)a7, (std::string *)a8, (addr_obj::Localization *)a10);
    std::shared_ptr<addr_obj::AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(a9, v80);
  }
  __p[0] = v98;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v97 < 0)
    operator delete(v96[0]);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)v102);
}

void sub_1887AB228(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 **a29,unsigned __int8 *a30,uint64_t a31,unsigned __int8 *a32,uint64_t a33,uint64_t a34,uint64_t a35,addr_obj::Localization *a36,uint64_t a37,unsigned __int8 *a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  uint64_t a68;
  uint64_t v68;
  void *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  addr_obj::Logger *v129;
  addr_obj::Logger *v130;
  _QWORD *v131;
  _QWORD *v132;
  const char *v133;
  size_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  _QWORD *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  _QWORD *v186;
  _QWORD *v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  _QWORD *v194;
  _QWORD *v195;
  _QWORD *v196;
  _QWORD *v197;
  _QWORD *v198;
  _QWORD *v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  _QWORD *v205;
  _QWORD *v206;
  _QWORD *v207;
  _QWORD *v208;
  _QWORD *v209;
  _QWORD *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  _QWORD *v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  int v244;
  uint64_t v245;
  uint64_t v246;

  if (a54 < 0)
    operator delete(__p);
  MEMORY[0x18D76437C](v68, 0x10F3C40CF03993ALL);
  if (a67 < 0)
    operator delete(a62);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)&a68);
  if (a2 == 3)
  {
    v71 = __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"; ", 2);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"fromLegacy", 10);
    v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" failed for ", 12);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"input parameters: ", 18);
    v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"localization", 12);
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"==", 2);
    v78 = addr_obj::operator<<(v77, a36);
    v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
    v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"name", 4);
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"==", 2);
    v82 = *(char *)(a35 + 23);
    if (v82 >= 0)
      v83 = a35;
    else
      v83 = *(_QWORD *)a35;
    if (v82 >= 0)
      v84 = *(unsigned __int8 *)(a35 + 23);
    else
      v84 = *(_QWORD *)(a35 + 8);
    v85 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, v83, v84);
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v85, (uint64_t)", ", 2);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"address", 7);
    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"==", 2);
    v89 = addr_obj::operator<<(v88, a38);
    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)", ", 2);
    v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"spokenName", 10);
    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)"==", 2);
    v93 = *(char *)(a34 + 23);
    if (v93 >= 0)
      v94 = a34;
    else
      v94 = *(_QWORD *)a34;
    if (v93 >= 0)
      v95 = *(unsigned __int8 *)(a34 + 23);
    else
      v95 = *(_QWORD *)(a34 + 8);
    v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
    v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)", ", 2);
    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"spokenAddress", 13);
    v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"==", 2);
    v100 = *(char *)(a33 + 23);
    if (v100 >= 0)
      v101 = a33;
    else
      v101 = *(_QWORD *)a33;
    if (v100 >= 0)
      v102 = *(unsigned __int8 *)(a33 + 23);
    else
      v102 = *(_QWORD *)(a33 + 8);
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, v101, v102);
    v104 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)", ", 2);
    v105 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v104, (uint64_t)"spokenStructuredAddress", 23);
    v106 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"==", 2);
    v107 = addr_obj::operator<<(v106, a32);
    v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)", ", 2);
    v109 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)"phoneticName", 12);
    v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"==", 2);
    v111 = *(char *)(a31 + 23);
    if (v111 >= 0)
      v112 = a31;
    else
      v112 = *(_QWORD *)a31;
    if (v111 >= 0)
      v113 = *(unsigned __int8 *)(a31 + 23);
    else
      v113 = *(_QWORD *)(a31 + 8);
    v114 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, v112, v113);
    v115 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)", ", 2);
    v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)"phoneticAddress", 15);
    v117 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"==", 2);
    v118 = addr_obj::operator<<(v117, a30);
    v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v118, (uint64_t)", ", 2);
    v120 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)"venueData", 9);
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"==", 2);
    v122 = addr_obj::operator<<(v121, a29);
    v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)", ", 2);
    v124 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)"locationAddress", 15);
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v124, (uint64_t)"==", 2);
    v126 = *(char *)(a37 + 23);
    if (v126 >= 0)
      v127 = a37;
    else
      v127 = *(_QWORD *)a37;
    if (v126 >= 0)
      v128 = *(unsigned __int8 *)(a37 + 23);
    else
      v128 = *(_QWORD *)(a37 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, v127, v128);
    std::stringbuf::str();
    addr_obj::AddressObjectException::operator+=(v71, &a62);
    if (a67 < 0)
      operator delete(a62);
    std::ostringstream::~ostringstream((uint64_t)&a68);
    __cxa_rethrow();
  }
  v129 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v130 = v129;
    if (addr_obj::Logger::isInitialized(v129))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
      v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"fromLegacy", 10);
      v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" failed: ", 9);
      v133 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v130 + 16))(v130);
      v134 = strlen(v133);
      v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v133, v134);
      v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"; for ", 6);
      v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)"input parameters: ", 18);
      v138 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)"localization", 12);
      v139 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)"==", 2);
      v140 = addr_obj::operator<<(v139, a36);
      v141 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)", ", 2);
      v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)"name", 4);
      v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"==", 2);
      v144 = *(char *)(a35 + 23);
      if (v144 >= 0)
        v145 = a35;
      else
        v145 = *(_QWORD *)a35;
      if (v144 >= 0)
        v146 = *(unsigned __int8 *)(a35 + 23);
      else
        v146 = *(_QWORD *)(a35 + 8);
      v147 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, v145, v146);
      v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)", ", 2);
      v149 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)"address", 7);
      v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)"==", 2);
      v151 = addr_obj::operator<<(v150, a38);
      v152 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)", ", 2);
      v153 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v152, (uint64_t)"spokenName", 10);
      v154 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v153, (uint64_t)"==", 2);
      v155 = *(char *)(a34 + 23);
      if (v155 >= 0)
        v156 = a34;
      else
        v156 = *(_QWORD *)a34;
      if (v155 >= 0)
        v157 = *(unsigned __int8 *)(a34 + 23);
      else
        v157 = *(_QWORD *)(a34 + 8);
      v158 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v154, v156, v157);
      v159 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v158, (uint64_t)", ", 2);
      v160 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v159, (uint64_t)"spokenAddress", 13);
      v161 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)"==", 2);
      v162 = *(char *)(a33 + 23);
      if (v162 >= 0)
        v163 = a33;
      else
        v163 = *(_QWORD *)a33;
      if (v162 >= 0)
        v164 = *(unsigned __int8 *)(a33 + 23);
      else
        v164 = *(_QWORD *)(a33 + 8);
      v165 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, v163, v164);
      v166 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v165, (uint64_t)", ", 2);
      v167 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v166, (uint64_t)"spokenStructuredAddress", 23);
      v168 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v167, (uint64_t)"==", 2);
      v169 = addr_obj::operator<<(v168, a32);
      v170 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v169, (uint64_t)", ", 2);
      v171 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v170, (uint64_t)"phoneticName", 12);
      v172 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v171, (uint64_t)"==", 2);
      v173 = *(char *)(a31 + 23);
      if (v173 >= 0)
        v174 = a31;
      else
        v174 = *(_QWORD *)a31;
      if (v173 >= 0)
        v175 = *(unsigned __int8 *)(a31 + 23);
      else
        v175 = *(_QWORD *)(a31 + 8);
      v176 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v172, v174, v175);
      v177 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v176, (uint64_t)", ", 2);
      v178 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v177, (uint64_t)"phoneticAddress", 15);
      v179 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v178, (uint64_t)"==", 2);
      v180 = addr_obj::operator<<(v179, a30);
      v181 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v180, (uint64_t)", ", 2);
      v182 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v181, (uint64_t)"venueData", 9);
      v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v182, (uint64_t)"==", 2);
      v184 = addr_obj::operator<<(v183, a29);
      v185 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)", ", 2);
      v186 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v185, (uint64_t)"locationAddress", 15);
      v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v186, (uint64_t)"==", 2);
      v188 = *(char *)(a37 + 23);
      if (v188 >= 0)
        v189 = a37;
      else
        v189 = *(_QWORD *)a37;
      if (v188 >= 0)
        v190 = *(unsigned __int8 *)(a37 + 23);
      else
        v190 = *(_QWORD *)(a37 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, v189, v190);
      std::string::basic_string[abi:ne180100]<0>(&a62, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a55, "fromLegacy");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a43, "");
      addr_obj::Logger::log(16, (uint64_t)&a62, 228, (uint64_t)&a55, (uint64_t)&__p, (uint64_t)&a43);
      if (a48 < 0)
        operator delete(a43);
      if (a54 < 0)
        operator delete(__p);
      if (a60 < 0)
        operator delete(a55);
      if (a67 < 0)
        operator delete(a62);
      std::ostringstream::~ostringstream((uint64_t)&a68);
    }
    __cxa_rethrow();
  }
  if (addr_obj::Logger::isInitialized(v129))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a68);
    v191 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a68, (uint64_t)"fromLegacy", 10);
    v192 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)" failed for ", 12);
    v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)"input parameters: ", 18);
    v194 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)"localization", 12);
    v195 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v194, (uint64_t)"==", 2);
    v196 = addr_obj::operator<<(v195, a36);
    v197 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v196, (uint64_t)", ", 2);
    v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v197, (uint64_t)"name", 4);
    v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)"==", 2);
    v200 = *(char *)(a35 + 23);
    if (v200 >= 0)
      v201 = a35;
    else
      v201 = *(_QWORD *)a35;
    if (v200 >= 0)
      v202 = *(unsigned __int8 *)(a35 + 23);
    else
      v202 = *(_QWORD *)(a35 + 8);
    v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, v201, v202);
    v204 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)", ", 2);
    v205 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v204, (uint64_t)"address", 7);
    v206 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v205, (uint64_t)"==", 2);
    v207 = addr_obj::operator<<(v206, a38);
    v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v207, (uint64_t)", ", 2);
    v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"spokenName", 10);
    v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)"==", 2);
    v211 = *(char *)(a34 + 23);
    if (v211 >= 0)
      v212 = a34;
    else
      v212 = *(_QWORD *)a34;
    if (v211 >= 0)
      v213 = *(unsigned __int8 *)(a34 + 23);
    else
      v213 = *(_QWORD *)(a34 + 8);
    v214 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, v212, v213);
    v215 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v214, (uint64_t)", ", 2);
    v216 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v215, (uint64_t)"spokenAddress", 13);
    v217 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v216, (uint64_t)"==", 2);
    v218 = *(char *)(a33 + 23);
    if (v218 >= 0)
      v219 = a33;
    else
      v219 = *(_QWORD *)a33;
    if (v218 >= 0)
      v220 = *(unsigned __int8 *)(a33 + 23);
    else
      v220 = *(_QWORD *)(a33 + 8);
    v221 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, v219, v220);
    v222 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v221, (uint64_t)", ", 2);
    v223 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v222, (uint64_t)"spokenStructuredAddress", 23);
    v224 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)"==", 2);
    v225 = addr_obj::operator<<(v224, a32);
    v226 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v225, (uint64_t)", ", 2);
    v227 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v226, (uint64_t)"phoneticName", 12);
    v228 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v227, (uint64_t)"==", 2);
    v229 = *(char *)(a31 + 23);
    if (v229 >= 0)
      v230 = a31;
    else
      v230 = *(_QWORD *)a31;
    if (v229 >= 0)
      v231 = *(unsigned __int8 *)(a31 + 23);
    else
      v231 = *(_QWORD *)(a31 + 8);
    v232 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v228, v230, v231);
    v233 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v232, (uint64_t)", ", 2);
    v234 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v233, (uint64_t)"phoneticAddress", 15);
    v235 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v234, (uint64_t)"==", 2);
    v236 = addr_obj::operator<<(v235, a30);
    v237 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v236, (uint64_t)", ", 2);
    v238 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v237, (uint64_t)"venueData", 9);
    v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v238, (uint64_t)"==", 2);
    v240 = addr_obj::operator<<(v239, a29);
    v241 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v240, (uint64_t)", ", 2);
    v242 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v241, (uint64_t)"locationAddress", 15);
    v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v242, (uint64_t)"==", 2);
    v244 = *(char *)(a37 + 23);
    if (v244 >= 0)
      v245 = a37;
    else
      v245 = *(_QWORD *)a37;
    if (v244 >= 0)
      v246 = *(unsigned __int8 *)(a37 + 23);
    else
      v246 = *(_QWORD *)(a37 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, v245, v246);
    std::string::basic_string[abi:ne180100]<0>(&a62, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectFactory.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a55, "fromLegacy");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&a43, "");
    addr_obj::Logger::log(16, (uint64_t)&a62, 228, (uint64_t)&a55, (uint64_t)&__p, (uint64_t)&a43);
    if (a48 < 0)
      operator delete(a43);
    if (a54 < 0)
      operator delete(__p);
    if (a60 < 0)
      operator delete(a55);
    if (a67 < 0)
      operator delete(a62);
    std::ostringstream::~ostringstream((uint64_t)&a68);
  }
  __cxa_rethrow();
}

void sub_1887AC568(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1887AC740(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  char a72;
  void **v72;

  if (a48 < 0)
    operator delete(__p);
  if (a60 < 0)
    operator delete(a55);
  if (a54 < 0)
    operator delete(a49);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(*v72);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AC734);
}

void sub_1887AC84C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AC5A8);
}

uint64_t std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>(uint64_t (***a1)(void))
{
  return (**a1)();
}

_QWORD *std::shared_ptr<addr_obj::V0AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V0AddressObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BFB6E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887AC8BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<addr_obj::V0AddressObject *,std::shared_ptr<addr_obj::V0AddressObject>::__shared_ptr_default_delete<addr_obj::V0AddressObject,addr_obj::V0AddressObject>,std::allocator<addr_obj::V0AddressObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V0AddressObject *,std::shared_ptr<addr_obj::V0AddressObject>::__shared_ptr_default_delete<addr_obj::V0AddressObject,addr_obj::V0AddressObject>,std::allocator<addr_obj::V0AddressObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<addr_obj::V0AddressObject *,std::shared_ptr<addr_obj::V0AddressObject>::__shared_ptr_default_delete<addr_obj::V0AddressObject,addr_obj::V0AddressObject>,std::allocator<addr_obj::V0AddressObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<addr_obj::V1AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V1AddressObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BFB758;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887AC9B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::V1AddressObject>::__shared_ptr_default_delete<addr_obj::V1AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::V1AddressObject>::__shared_ptr_default_delete<addr_obj::V1AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<addr_obj::V1AddressObject *,std::shared_ptr<addr_obj::V1AddressObject>::__shared_ptr_default_delete<addr_obj::V1AddressObject,addr_obj::V1AddressObject>,std::allocator<addr_obj::V1AddressObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<addr_obj::V2AddressObject>::shared_ptr[abi:ne180100]<addr_obj::V2AddressObject,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E1BFB7C8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1887ACAA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::V2AddressObject>::__shared_ptr_default_delete<addr_obj::V2AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t std::__shared_ptr_pointer<addr_obj::V2AddressObject *,std::shared_ptr<addr_obj::V2AddressObject>::__shared_ptr_default_delete<addr_obj::V2AddressObject,addr_obj::V2AddressObject>,std::allocator<addr_obj::V2AddressObject>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void addr_obj::AddressObjectBase::toBase64String(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  void *__p[2];
  char v4;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 192))(__p);
  addr_obj::Base64::encodeString((unsigned __int8 *)__p, a2);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1887ACB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *addr_obj::AddressObjectBase::asBase64String@<X0>(addr_obj::AddressObjectBase *this@<X0>, _QWORD *a2@<X8>)
{
  return (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)this + 200))(a2);
}

void sub_1887ACBFC(void *a1, int a2, int a3, __int16 a4, char a5, char a6, std::string *a7, void *a8, void *a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__pa,uint64_t a29,int a30,__int16 a31,char a32,unsigned __int8 a33,void *a34)
{
  std::string *v34;
  uint64_t v35;
  addr_obj::Logger *v37;
  addr_obj::Logger *v38;
  uint64_t isInitialized;
  _QWORD *v40;
  const char *v41;
  size_t v42;
  _QWORD *v43;
  _QWORD *v44;
  void *p_pa;
  uint64_t v46;
  __int128 *v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;

  v37 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v38 = v37;
    isInitialized = addr_obj::Logger::isInitialized(v37);
    if ((_DWORD)isInitialized)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a34);
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a34, (uint64_t)"toBase64String() failed: ", 25);
      v41 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v38 + 16))(v38);
      v42 = strlen(v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" for ", 5);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v35 + 208))(&__pa, v35);
      if ((a33 & 0x80u) == 0)
        p_pa = &__pa;
      else
        p_pa = __pa;
      if ((a33 & 0x80u) == 0)
        v46 = a33;
      else
        v46 = a29;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)p_pa, v46);
      if ((char)a33 < 0)
        operator delete(__pa);
      std::string::basic_string[abi:ne180100]<0>(&__pa, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a21, "asBase64String");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a9, "");
      addr_obj::Logger::log(16, (uint64_t)&__pa, 75, (uint64_t)&a21, (uint64_t)&__p, (uint64_t)&a9);
      if (SHIBYTE(a14) < 0)
        operator delete(a9);
      if (a20 < 0)
        operator delete(__p);
      if (a26 < 0)
        operator delete(a21);
      if ((char)a33 < 0)
        operator delete(__pa);
      isInitialized = std::ostringstream::~ostringstream((uint64_t)&a34);
    }
    v47 = addr_obj::emptyString((addr_obj *)isInitialized);
    if (*((char *)v47 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)v47, *((_QWORD *)v47 + 1));
    }
    else
    {
      v48 = *v47;
      v34->__r_.__value_.__r.__words[2] = *((_QWORD *)v47 + 2);
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v48;
    }
    __cxa_end_catch();
    JUMPOUT(0x1887ACBE4);
  }
  if (addr_obj::Logger::isInitialized(v37))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a34);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a34, (uint64_t)"toBase64String() failed", 23);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" for ", 5);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v35 + 208))(&__pa, v35);
    if ((a33 & 0x80u) == 0)
      v51 = &__pa;
    else
      v51 = __pa;
    if ((a33 & 0x80u) == 0)
      v52 = a33;
    else
      v52 = a29;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    if ((char)a33 < 0)
      operator delete(__pa);
    std::string::basic_string[abi:ne180100]<0>(&__pa, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a21, "asBase64String");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&a9, "");
    addr_obj::Logger::log(16, (uint64_t)&__pa, 80, (uint64_t)&a21, (uint64_t)&__p, (uint64_t)&a9);
    if (SHIBYTE(a14) < 0)
      operator delete(a9);
    if (a20 < 0)
      operator delete(__p);
    if (a26 < 0)
      operator delete(a21);
    if ((char)a33 < 0)
      operator delete(__pa);
    std::ostringstream::~ostringstream((uint64_t)&a34);
  }
  __cxa_rethrow();
}

void sub_1887AD2A4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AD2C4);
}

void sub_1887AD2D8()
{
  JUMPOUT(0x1887AD2E0);
}

void sub_1887AD488(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  if (a36 < 0)
    operator delete(a31);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AD480);
}

void sub_1887AD4FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  __cxa_end_catch();
  __cxa_end_catch();
  __cxa_call_unexpected(a1);
}

uint64_t addr_obj::AddressObjectBase::toDebugJsonString@<X0>(addr_obj::AddressObjectBase *this@<X0>, uint64_t *a2@<X8>)
{
  addr_obj::Localization *v4;
  uint64_t **v5;
  addr_obj::Json *v6;
  addr_obj::Json *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18;
  char v19;
  uint64_t v20;
  _QWORD v21[11];
  char v22;
  uint64_t v23;

  addr_obj::Json::Json((addr_obj::Json *)v21);
  std::string::basic_string[abi:ne180100]<0>(v16, "getName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 16))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 24))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (addr_obj::Localization *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getSpokenName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 32))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getSpokenAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 40))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getSpokenStructuredAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 48))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (addr_obj::Localization *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getPhoneticName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 56))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getPhoneticAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 64))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (addr_obj::Localization *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getLocalization");
  v4 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 152))(this);
  addr_obj::Json::append<addr_obj::Localization>(v21, (uint64_t *)v16, v4);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getFullAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 72))(__p, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 72))(v14, this, 1);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p, (uint64_t *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getShortAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 88))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getAboveDoorShortAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 104))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getCityAndAbove");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 112))(__p, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 112))(v14, this, 1);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p, (uint64_t *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getDisplayLocality");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 136))(__p, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 136))(v14, this, 1);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p, (uint64_t *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getSpokenLocality");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 144))(__p, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 144))(v14, this, 1);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p, (uint64_t *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getParkingName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 216))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getWeatherName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 224))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getWeatherLocationName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 232))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getCountryCode");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 176))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getCountryName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 168))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getVenueShortAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 240))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getLocationAddress");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 256))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getNeighborhoodName");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 264))(__p, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 264))(v14, this, 1);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p, (uint64_t *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "toVCard");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 184))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "getVenueInfo");
  v5 = (uint64_t **)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 160))(this);
  addr_obj::Json::append<addr_obj::VenueInfo>(v21, (uint64_t *)v16, v5);
  if (v17 < 0)
    operator delete(v16[0]);
  std::string::basic_string[abi:ne180100]<0>(v16, "toBase64String");
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *))(*(_QWORD *)this + 200))(__p, this);
  addr_obj::Json::append(v21, (uint64_t *)v16, (uint64_t *)__p);
  if (v13 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  addr_obj::Json::Json((addr_obj::Json *)v16);
  std::string::basic_string[abi:ne180100]<0>(__p, "accessors");
  v6 = addr_obj::Json::close((addr_obj::Json *)v21);
  addr_obj::Json::append(v16, (uint64_t *)__p, v6);
  if (v13 < 0)
    operator delete(__p[0]);
  addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)__p);
  (*(void (**)(addr_obj::AddressObjectBase *, void **))(*(_QWORD *)this + 304))(this, __p);
  std::string::basic_string[abi:ne180100]<0>(v14, "internal");
  addr_obj::Json::append(v16, (uint64_t *)v14, (const AddrObjGoogle::protobuf::Message *)__p);
  if (v15 < 0)
    operator delete(v14[0]);
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)__p);
  v7 = addr_obj::Json::close((addr_obj::Json *)v16);
  addr_obj::Json::str(a2, v7);
  v8 = (void *)*MEMORY[0x1E0DE4F60];
  v16[0] = v8;
  v9 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  *(void **)((char *)v16 + *((_QWORD *)v8 - 3)) = v9;
  v10 = MEMORY[0x1E0DE4FB8] + 16;
  v16[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v19 < 0)
    operator delete(v18);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v20);
  v21[0] = v8;
  *(_QWORD *)((char *)v21 + *((_QWORD *)v8 - 3)) = v9;
  v21[1] = v10;
  if (v22 < 0)
    operator delete((void *)v21[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v23);
}

void sub_1887AE044(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char *__s,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  void *v73;
  char *v74;

  if (a37 < 0)
    operator delete(__p);
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)&a10);
  if (a2 == 4)
  {
    v73 = __cxa_begin_catch(a1);
    std::string::basic_string[abi:ne180100]<0>(&a10, "Exception: ");
    v74 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v73 + 16))(v73);
    std::string::basic_string[abi:ne180100]<0>(&__p, v74);
    addr_obj::Json::append(&a39, (uint64_t *)&a10, (uint64_t *)&__p);
    if (a37 < 0)
      operator delete(__p);
    if (a15 < 0)
      operator delete(a10);
    __cxa_end_catch();
    JUMPOUT(0x1887ADF70);
  }
  std::ostringstream::~ostringstream((uint64_t)&a39);
  std::ostringstream::~ostringstream((uint64_t)&a71);
  __cxa_call_unexpected(a1);
}

void sub_1887AE830()
{
  JUMPOUT(0x1887AE83CLL);
}

void sub_1887AECF0(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 113, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 113, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887AEBC0);
}

void sub_1887AF320(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AEBF0);
}

void sub_1887AF3B8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887AF3C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AF274);
}

void sub_1887AF450()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AF3A8);
}

void sub_1887AF45C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 113, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 113, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887AE948);
}

void sub_1887AF4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887AF7ECLL);
}

void sub_1887AF4D8()
{
  JUMPOUT(0x1887AF4E0);
}

void sub_1887AF698(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AEAC4);
}

void sub_1887AF734(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AF5ECLL);
}

void sub_1887AF7C0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AF720);
}

void sub_1887AF7CC()
{
  JUMPOUT(0x1887AF7D4);
}

void sub_1887AF7E4()
{
  JUMPOUT(0x1887AF7ECLL);
}

void sub_1887AF98C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AE994);
}

void sub_1887AFA24()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887AFA30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AF8E0);
}

void sub_1887AFABC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AFA14);
}

void sub_1887AFAC8()
{
  JUMPOUT(0x1887AFAD4);
}

void sub_1887AFF88(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 112, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 112, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887AFE58);
}

void sub_1887B05B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AFE88);
}

void sub_1887B0650()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B065C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B050CLL);
}

void sub_1887B06E8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B0640);
}

void sub_1887B06F4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 112, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 112, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887AFBE0);
}

void sub_1887B0764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B0A84);
}

void sub_1887B0770()
{
  JUMPOUT(0x1887B0778);
}

void sub_1887B0930(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AFD5CLL);
}

void sub_1887B09CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B0884);
}

void sub_1887B0A58()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B09B8);
}

void sub_1887B0A64()
{
  JUMPOUT(0x1887B0A6CLL);
}

void sub_1887B0A7C()
{
  JUMPOUT(0x1887B0A84);
}

void sub_1887B0C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887AFC2CLL);
}

void sub_1887B0CBC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B0CC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B0B78);
}

void sub_1887B0D54()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B0CACLL);
}

void sub_1887B0D60()
{
  JUMPOUT(0x1887B0D6CLL);
}

void sub_1887B1220(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 111, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 111, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B10F0);
}

void sub_1887B1850(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B1120);
}

void sub_1887B18E8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B18F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B17A4);
}

void sub_1887B1980()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B18D8);
}

void sub_1887B198C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 111, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 111, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B0E78);
}

void sub_1887B19FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B1D1CLL);
}

void sub_1887B1A08()
{
  JUMPOUT(0x1887B1A10);
}

void sub_1887B1BC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B0FF4);
}

void sub_1887B1C64(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B1B1CLL);
}

void sub_1887B1CF0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B1C50);
}

void sub_1887B1CFC()
{
  JUMPOUT(0x1887B1D04);
}

void sub_1887B1D14()
{
  JUMPOUT(0x1887B1D1CLL);
}

void sub_1887B1EBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B0EC4);
}

void sub_1887B1F54()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B1F60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B1E10);
}

void sub_1887B1FEC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B1F44);
}

void sub_1887B1FF8()
{
  JUMPOUT(0x1887B2004);
}

void sub_1887B24B8(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 110, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 110, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B2388);
}

void sub_1887B2AE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B23B8);
}

void sub_1887B2B80()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B2B8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B2A3CLL);
}

void sub_1887B2C18()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B2B70);
}

void sub_1887B2C24(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 110, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 110, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B2110);
}

void sub_1887B2C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B2FB4);
}

void sub_1887B2CA0()
{
  JUMPOUT(0x1887B2CA8);
}

void sub_1887B2E60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B228CLL);
}

void sub_1887B2EFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B2DB4);
}

void sub_1887B2F88()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B2EE8);
}

void sub_1887B2F94()
{
  JUMPOUT(0x1887B2F9CLL);
}

void sub_1887B2FAC()
{
  JUMPOUT(0x1887B2FB4);
}

void sub_1887B3154(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B215CLL);
}

void sub_1887B31EC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B31F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B30A8);
}

void sub_1887B3284()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B31DCLL);
}

void sub_1887B3290()
{
  JUMPOUT(0x1887B329CLL);
}

void sub_1887B3750(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 109, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 109, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B3620);
}

void sub_1887B3D80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B3650);
}

void sub_1887B3E18()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B3E24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B3CD4);
}

void sub_1887B3EB0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B3E08);
}

void sub_1887B3EBC(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 109, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 109, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B33A8);
}

void sub_1887B3F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B424CLL);
}

void sub_1887B3F38()
{
  JUMPOUT(0x1887B3F40);
}

void sub_1887B40F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B3524);
}

void sub_1887B4194(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B404CLL);
}

void sub_1887B4220()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B4180);
}

void sub_1887B422C()
{
  JUMPOUT(0x1887B4234);
}

void sub_1887B4244()
{
  JUMPOUT(0x1887B424CLL);
}

void sub_1887B43EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B33F4);
}

void sub_1887B4484()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B4490(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B4340);
}

void sub_1887B451C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B4474);
}

void sub_1887B4528()
{
  JUMPOUT(0x1887B4534);
}

void sub_1887B49E8(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 108, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 108, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B48B8);
}

void sub_1887B5018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B48E8);
}

void sub_1887B50B0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B50BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B4F6CLL);
}

void sub_1887B5148()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B50A0);
}

void sub_1887B5154(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 108, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 108, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B4640);
}

void sub_1887B51C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B54E4);
}

void sub_1887B51D0()
{
  JUMPOUT(0x1887B51D8);
}

void sub_1887B5390(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B47BCLL);
}

void sub_1887B542C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B52E4);
}

void sub_1887B54B8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B5418);
}

void sub_1887B54C4()
{
  JUMPOUT(0x1887B54CCLL);
}

void sub_1887B54DC()
{
  JUMPOUT(0x1887B54E4);
}

void sub_1887B5684(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B468CLL);
}

void sub_1887B571C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B5728(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B55D8);
}

void sub_1887B57B4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B570CLL);
}

void sub_1887B57C0()
{
  JUMPOUT(0x1887B57CCLL);
}

void sub_1887B5C80(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 107, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 107, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B5B50);
}

void sub_1887B62B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B5B80);
}

void sub_1887B6348()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B6354(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B6204);
}

void sub_1887B63E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B6338);
}

void sub_1887B63EC(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 107, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 107, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B58D8);
}

void sub_1887B645C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B677CLL);
}

void sub_1887B6468()
{
  JUMPOUT(0x1887B6470);
}

void sub_1887B6628(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B5A54);
}

void sub_1887B66C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B657CLL);
}

void sub_1887B6750()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B66B0);
}

void sub_1887B675C()
{
  JUMPOUT(0x1887B6764);
}

void sub_1887B6774()
{
  JUMPOUT(0x1887B677CLL);
}

void sub_1887B691C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B5924);
}

void sub_1887B69B4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B69C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B6870);
}

void sub_1887B6A4C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B69A4);
}

void sub_1887B6A58()
{
  JUMPOUT(0x1887B6A64);
}

void sub_1887B6F18(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 106, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 106, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B6DE8);
}

void sub_1887B7548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B6E18);
}

void sub_1887B75E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B75EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B749CLL);
}

void sub_1887B7678()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B75D0);
}

void sub_1887B7684(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 106, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 106, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B6B70);
}

void sub_1887B76F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B7A14);
}

void sub_1887B7700()
{
  JUMPOUT(0x1887B7708);
}

void sub_1887B78C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B6CECLL);
}

void sub_1887B795C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B7814);
}

void sub_1887B79E8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B7948);
}

void sub_1887B79F4()
{
  JUMPOUT(0x1887B79FCLL);
}

void sub_1887B7A0C()
{
  JUMPOUT(0x1887B7A14);
}

void sub_1887B7BB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B6BBCLL);
}

void sub_1887B7C4C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B7C58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B7B08);
}

void sub_1887B7CE4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B7C3CLL);
}

void sub_1887B7CF0()
{
  JUMPOUT(0x1887B7CFCLL);
}

void sub_1887B81B0(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 105, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 105, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B8080);
}

void sub_1887B87E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B80B0);
}

void sub_1887B8878()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B8884(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B8734);
}

void sub_1887B8910()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B8868);
}

void sub_1887B891C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 105, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 105, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B7E08);
}

void sub_1887B898C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B8CACLL);
}

void sub_1887B8998()
{
  JUMPOUT(0x1887B89A0);
}

void sub_1887B8B58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B7F84);
}

void sub_1887B8BF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B8AACLL);
}

void sub_1887B8C80()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B8BE0);
}

void sub_1887B8C8C()
{
  JUMPOUT(0x1887B8C94);
}

void sub_1887B8CA4()
{
  JUMPOUT(0x1887B8CACLL);
}

void sub_1887B8E4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B7E54);
}

void sub_1887B8EE4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B8EF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B8DA0);
}

void sub_1887B8F7C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B8ED4);
}

void sub_1887B8F88()
{
  JUMPOUT(0x1887B8F94);
}

void sub_1887B9448(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 104, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 104, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B9318);
}

void sub_1887B9A78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B9348);
}

void sub_1887B9B10()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887B9B1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B99CCLL);
}

void sub_1887B9BA8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B9B00);
}

void sub_1887B9BB4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 104, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 104, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887B90A0);
}

void sub_1887B9C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887B9F44);
}

void sub_1887B9C30()
{
  JUMPOUT(0x1887B9C38);
}

void sub_1887B9DF0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B921CLL);
}

void sub_1887B9E8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B9D44);
}

void sub_1887B9F18()
{
  __cxa_end_catch();
  JUMPOUT(0x1887B9E78);
}

void sub_1887B9F24()
{
  JUMPOUT(0x1887B9F2CLL);
}

void sub_1887B9F3C()
{
  JUMPOUT(0x1887B9F44);
}

void sub_1887BA0E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887B90ECLL);
}

void sub_1887BA17C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BA188(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BA038);
}

void sub_1887BA214()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BA16CLL);
}

void sub_1887BA220()
{
  JUMPOUT(0x1887BA22CLL);
}

void sub_1887BA6E0(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 103, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 103, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BA5B0);
}

void sub_1887BAD10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BA5E0);
}

void sub_1887BADA8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BADB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BAC64);
}

void sub_1887BAE40()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BAD98);
}

void sub_1887BAE4C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 103, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 103, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BA338);
}

void sub_1887BAEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887BB1DCLL);
}

void sub_1887BAEC8()
{
  JUMPOUT(0x1887BAED0);
}

void sub_1887BB088(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BA4B4);
}

void sub_1887BB124(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BAFDCLL);
}

void sub_1887BB1B0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BB110);
}

void sub_1887BB1BC()
{
  JUMPOUT(0x1887BB1C4);
}

void sub_1887BB1D4()
{
  JUMPOUT(0x1887BB1DCLL);
}

void sub_1887BB37C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BA384);
}

void sub_1887BB414()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BB420(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BB2D0);
}

void sub_1887BB4AC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BB404);
}

void sub_1887BB4B8()
{
  JUMPOUT(0x1887BB4C4);
}

void sub_1887BB978(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 102, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 102, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BB848);
}

void sub_1887BBFA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BB878);
}

void sub_1887BC040()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BC04C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BBEFCLL);
}

void sub_1887BC0D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BC030);
}

void sub_1887BC0E4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 102, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 102, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BB5D0);
}

void sub_1887BC154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887BC474);
}

void sub_1887BC160()
{
  JUMPOUT(0x1887BC168);
}

void sub_1887BC320(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BB74CLL);
}

void sub_1887BC3BC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BC274);
}

void sub_1887BC448()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BC3A8);
}

void sub_1887BC454()
{
  JUMPOUT(0x1887BC45CLL);
}

void sub_1887BC46C()
{
  JUMPOUT(0x1887BC474);
}

void sub_1887BC614(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BB61CLL);
}

void sub_1887BC6AC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BC6B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BC568);
}

void sub_1887BC744()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BC69CLL);
}

void sub_1887BC750()
{
  JUMPOUT(0x1887BC75CLL);
}

void sub_1887BCC10(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 101, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 101, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BCAE0);
}

void sub_1887BD240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BCB10);
}

void sub_1887BD2D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BD2E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BD194);
}

void sub_1887BD370()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BD2C8);
}

void sub_1887BD37C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 101, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 101, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BC868);
}

void sub_1887BD3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887BD70CLL);
}

void sub_1887BD3F8()
{
  JUMPOUT(0x1887BD400);
}

void sub_1887BD5B8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BC9E4);
}

void sub_1887BD654(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BD50CLL);
}

void sub_1887BD6E0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BD640);
}

void sub_1887BD6EC()
{
  JUMPOUT(0x1887BD6F4);
}

void sub_1887BD704()
{
  JUMPOUT(0x1887BD70CLL);
}

void sub_1887BD8AC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BC8B4);
}

void sub_1887BD944()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BD950(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BD800);
}

void sub_1887BD9DC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BD934);
}

void sub_1887BD9E8()
{
  JUMPOUT(0x1887BD9F4);
}

void sub_1887BDEA8(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 100, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 100, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BDD78);
}

void sub_1887BE4D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BDDA8);
}

void sub_1887BE570()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BE57C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BE42CLL);
}

void sub_1887BE608()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BE560);
}

void sub_1887BE614(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 100, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 100, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BDB00);
}

void sub_1887BE684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887BE9A4);
}

void sub_1887BE690()
{
  JUMPOUT(0x1887BE698);
}

void sub_1887BE850(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BDC7CLL);
}

void sub_1887BE8EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BE7A4);
}

void sub_1887BE978()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BE8D8);
}

void sub_1887BE984()
{
  JUMPOUT(0x1887BE98CLL);
}

void sub_1887BE99C()
{
  JUMPOUT(0x1887BE9A4);
}

void sub_1887BEB44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BDB4CLL);
}

void sub_1887BEBDC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BEBE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BEA98);
}

void sub_1887BEC74()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BEBCCLL);
}

void sub_1887BEC80()
{
  JUMPOUT(0x1887BEC8CLL);
}

void sub_1887BF140(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 99, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 99, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BF010);
}

void sub_1887BF770(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BF040);
}

void sub_1887BF808()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BF814(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BF6C4);
}

void sub_1887BF8A0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BF7F8);
}

void sub_1887BF8AC(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 99, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 99, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887BED98);
}

void sub_1887BF91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887BFC3CLL);
}

void sub_1887BF928()
{
  JUMPOUT(0x1887BF930);
}

void sub_1887BFAE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BEF14);
}

void sub_1887BFB84(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BFA3CLL);
}

void sub_1887BFC10()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BFB70);
}

void sub_1887BFC1C()
{
  JUMPOUT(0x1887BFC24);
}

void sub_1887BFC34()
{
  JUMPOUT(0x1887BFC3CLL);
}

void sub_1887BFDDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BEDE4);
}

void sub_1887BFE74()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887BFE80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887BFD30);
}

void sub_1887BFF0C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887BFE64);
}

void sub_1887BFF18()
{
  JUMPOUT(0x1887BFF24);
}

void sub_1887C03D8(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 98, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 98, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C02A8);
}

void sub_1887C0A08(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C02D8);
}

void sub_1887C0AA0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C0AAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C095CLL);
}

void sub_1887C0B38()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C0A90);
}

void sub_1887C0B44(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 98, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 98, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C0030);
}

void sub_1887C0BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C0ED4);
}

void sub_1887C0BC0()
{
  JUMPOUT(0x1887C0BC8);
}

void sub_1887C0D80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C01ACLL);
}

void sub_1887C0E1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C0CD4);
}

void sub_1887C0EA8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C0E08);
}

void sub_1887C0EB4()
{
  JUMPOUT(0x1887C0EBCLL);
}

void sub_1887C0ECC()
{
  JUMPOUT(0x1887C0ED4);
}

void sub_1887C1074(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C007CLL);
}

void sub_1887C110C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C1118(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C0FC8);
}

void sub_1887C11A4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C10FCLL);
}

void sub_1887C11B0()
{
  JUMPOUT(0x1887C11BCLL);
}

void sub_1887C1670(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 97, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 97, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C1540);
}

void sub_1887C1CA0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C1570);
}

void sub_1887C1D38()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C1D44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C1BF4);
}

void sub_1887C1DD0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C1D28);
}

void sub_1887C1DDC(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 97, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 97, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C12C8);
}

void sub_1887C1E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C216CLL);
}

void sub_1887C1E58()
{
  JUMPOUT(0x1887C1E60);
}

void sub_1887C2018(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C1444);
}

void sub_1887C20B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C1F6CLL);
}

void sub_1887C2140()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C20A0);
}

void sub_1887C214C()
{
  JUMPOUT(0x1887C2154);
}

void sub_1887C2164()
{
  JUMPOUT(0x1887C216CLL);
}

void sub_1887C230C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C1314);
}

void sub_1887C23A4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C23B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C2260);
}

void sub_1887C243C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C2394);
}

void sub_1887C2448()
{
  JUMPOUT(0x1887C2454);
}

void sub_1887C2908(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 96, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 96, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C27D8);
}

void sub_1887C2F38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C2808);
}

void sub_1887C2FD0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C2FDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C2E8CLL);
}

void sub_1887C3068()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C2FC0);
}

void sub_1887C3074(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 96, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 96, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C2560);
}

void sub_1887C30E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C3404);
}

void sub_1887C30F0()
{
  JUMPOUT(0x1887C30F8);
}

void sub_1887C32B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C26DCLL);
}

void sub_1887C334C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C3204);
}

void sub_1887C33D8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C3338);
}

void sub_1887C33E4()
{
  JUMPOUT(0x1887C33ECLL);
}

void sub_1887C33FC()
{
  JUMPOUT(0x1887C3404);
}

void sub_1887C35A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C25ACLL);
}

void sub_1887C363C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C3648(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C34F8);
}

void sub_1887C36D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C362CLL);
}

void sub_1887C36E0()
{
  JUMPOUT(0x1887C36ECLL);
}

void sub_1887C3BA0(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 95, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 95, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C3A70);
}

void sub_1887C41D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C3AA0);
}

void sub_1887C4268()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C4274(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C4124);
}

void sub_1887C4300()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C4258);
}

void sub_1887C430C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 95, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 95, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C37F8);
}

void sub_1887C437C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C469CLL);
}

void sub_1887C4388()
{
  JUMPOUT(0x1887C4390);
}

void sub_1887C4548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C3974);
}

void sub_1887C45E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C449CLL);
}

void sub_1887C4670()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C45D0);
}

void sub_1887C467C()
{
  JUMPOUT(0x1887C4684);
}

void sub_1887C4694()
{
  JUMPOUT(0x1887C469CLL);
}

void sub_1887C483C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C3844);
}

void sub_1887C48D4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C48E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C4790);
}

void sub_1887C496C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C48C4);
}

void sub_1887C4978()
{
  JUMPOUT(0x1887C4984);
}

void sub_1887C4E38(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 94, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 94, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C4D08);
}

void sub_1887C5468(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C4D38);
}

void sub_1887C5500()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C550C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C53BCLL);
}

void sub_1887C5598()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C54F0);
}

void sub_1887C55A4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 94, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 94, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C4A90);
}

void sub_1887C5614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C5934);
}

void sub_1887C5620()
{
  JUMPOUT(0x1887C5628);
}

void sub_1887C57E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C4C0CLL);
}

void sub_1887C587C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C5734);
}

void sub_1887C5908()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C5868);
}

void sub_1887C5914()
{
  JUMPOUT(0x1887C591CLL);
}

void sub_1887C592C()
{
  JUMPOUT(0x1887C5934);
}

void sub_1887C5AD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C4ADCLL);
}

void sub_1887C5B6C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C5B78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C5A28);
}

void sub_1887C5C04()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C5B5CLL);
}

void sub_1887C5C10()
{
  JUMPOUT(0x1887C5C1CLL);
}

void sub_1887C60D0(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 93, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 93, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C5FA0);
}

void sub_1887C6700(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C5FD0);
}

void sub_1887C6798()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C67A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C6654);
}

void sub_1887C6830()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C6788);
}

void sub_1887C683C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 93, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 93, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C5D28);
}

void sub_1887C68AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C6BCCLL);
}

void sub_1887C68B8()
{
  JUMPOUT(0x1887C68C0);
}

void sub_1887C6A78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C5EA4);
}

void sub_1887C6B14(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C69CCLL);
}

void sub_1887C6BA0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C6B00);
}

void sub_1887C6BAC()
{
  JUMPOUT(0x1887C6BB4);
}

void sub_1887C6BC4()
{
  JUMPOUT(0x1887C6BCCLL);
}

void sub_1887C6D6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C5D74);
}

void sub_1887C6E04()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C6E10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C6CC0);
}

void sub_1887C6E9C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C6DF4);
}

void sub_1887C6EA8()
{
  JUMPOUT(0x1887C6EB4);
}

void sub_1887C7368(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 92, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 92, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C7238);
}

void sub_1887C7998(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C7268);
}

void sub_1887C7A30()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C7A3C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C78ECLL);
}

void sub_1887C7AC8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C7A20);
}

void sub_1887C7AD4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 92, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 92, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C6FC0);
}

void sub_1887C7B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C7E64);
}

void sub_1887C7B50()
{
  JUMPOUT(0x1887C7B58);
}

void sub_1887C7D10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C713CLL);
}

void sub_1887C7DAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C7C64);
}

void sub_1887C7E38()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C7D98);
}

void sub_1887C7E44()
{
  JUMPOUT(0x1887C7E4CLL);
}

void sub_1887C7E5C()
{
  JUMPOUT(0x1887C7E64);
}

void sub_1887C8004(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C700CLL);
}

void sub_1887C809C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C80A8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C7F58);
}

void sub_1887C8134()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C808CLL);
}

void sub_1887C8140()
{
  JUMPOUT(0x1887C814CLL);
}

void sub_1887C8600(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 91, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 91, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C84D0);
}

void sub_1887C8C30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C8500);
}

void sub_1887C8CC8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C8CD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C8B84);
}

void sub_1887C8D60()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C8CB8);
}

void sub_1887C8D6C(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 91, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 91, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C8258);
}

void sub_1887C8DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887C90FCLL);
}

void sub_1887C8DE8()
{
  JUMPOUT(0x1887C8DF0);
}

void sub_1887C8FA8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C83D4);
}

void sub_1887C9044(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C8EFCLL);
}

void sub_1887C90D0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C9030);
}

void sub_1887C90DC()
{
  JUMPOUT(0x1887C90E4);
}

void sub_1887C90F4()
{
  JUMPOUT(0x1887C90FCLL);
}

void sub_1887C929C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C82A4);
}

void sub_1887C9334()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C9340(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C91F0);
}

void sub_1887C93CC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C9324);
}

void sub_1887C93D8()
{
  JUMPOUT(0x1887C93E4);
}

void sub_1887C9898(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 90, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 90, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C9768);
}

void sub_1887C9EC8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C9798);
}

void sub_1887C9F60()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887C9F6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C9E1CLL);
}

void sub_1887C9FF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887C9F50);
}

void sub_1887CA004(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,std::string::size_type a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  _OWORD *v47;
  int v48;
  int v49;
  void *v51;
  void *v52;
  const std::string::value_type *v53;
  std::string *v54;
  __int128 v55;

  v49 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a40) < 0)
    operator delete(a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a42);
  v51 = __cxa_begin_catch(a1);
  if (v49 == v48)
  {
    v52 = v51;
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v53 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 16))(v52);
    v54 = std::string::append((std::string *)&a32, v53);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    a40 = v54->__r_.__value_.__r.__words[2];
    *v47 = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 90, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a42, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a42, 90, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a40) < 0)
      operator delete(a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a47 < 0)
      operator delete(a42);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887C94F0);
}

void sub_1887CA074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887CA394);
}

void sub_1887CA080()
{
  JUMPOUT(0x1887CA088);
}

void sub_1887CA240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C966CLL);
}

void sub_1887CA2DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CA194);
}

void sub_1887CA368()
{
  __cxa_end_catch();
  JUMPOUT(0x1887CA2C8);
}

void sub_1887CA374()
{
  JUMPOUT(0x1887CA37CLL);
}

void sub_1887CA38C()
{
  JUMPOUT(0x1887CA394);
}

void sub_1887CA534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887C953CLL);
}

void sub_1887CA5CC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887CA5D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CA488);
}

void sub_1887CA664()
{
  __cxa_end_catch();
  JUMPOUT(0x1887CA5BCLL);
}

void sub_1887CA670()
{
  JUMPOUT(0x1887CA678);
}

void sub_1887CAB30(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,__int128 a38,std::string::size_type a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  int v46;
  int v47;
  void *v49;
  void *v50;
  const std::string::value_type *v51;
  std::string *v52;
  __int128 v53;

  v47 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a39) < 0)
    operator delete((void *)a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  v49 = __cxa_begin_catch(a1);
  if (v47 == v46)
  {
    v50 = v49;
    std::string::basic_string[abi:ne180100]<0>(&a41, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v51 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
    v52 = std::string::append((std::string *)&a32, v51);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    a39 = v52->__r_.__value_.__r.__words[2];
    a38 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a41, 89, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a39) < 0)
      operator delete((void *)a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a46 < 0)
      operator delete(a41);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a41, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a41, 89, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a39) < 0)
      operator delete((void *)a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a46 < 0)
      operator delete(a41);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887CAA00);
}

void sub_1887CB168(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CAA30);
}

void sub_1887CB200()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887CB20C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CB0BCLL);
}

void sub_1887CB298()
{
  __cxa_end_catch();
  JUMPOUT(0x1887CB1F0);
}

void sub_1887CB2A4(void *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::string *a24,void *a25,void *__pa,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,__int128 a38,std::string::size_type a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  int v46;
  int v47;
  void *v49;
  void *v50;
  const std::string::value_type *v51;
  std::string *v52;
  __int128 v53;

  v47 = (int)a2;
  if (SHIBYTE(a31) < 0)
    operator delete(__pa);
  if (a37 < 0)
    operator delete(a32);
  if (SHIBYTE(a39) < 0)
    operator delete((void *)a38);
  if (SHIBYTE(a12) < 0)
    operator delete(a10);
  std::ostringstream::~ostringstream((uint64_t)&a41);
  v49 = __cxa_begin_catch(a1);
  if (v47 == v46)
  {
    v50 = v49;
    std::string::basic_string[abi:ne180100]<0>(&a41, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a32, "Exception caught during formatting of the log line: ");
    v51 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
    v52 = std::string::append((std::string *)&a32, v51);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    a39 = v52->__r_.__value_.__r.__words[2];
    a38 = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a41, 89, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&__pa);
    if (SHIBYTE(a31) < 0)
      operator delete(__pa);
    if (SHIBYTE(a39) < 0)
      operator delete((void *)a38);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a46 < 0)
      operator delete(a41);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a41, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a10, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a38, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a32, "");
    addr_obj::Logger::log(16, (uint64_t)&a41, 89, (uint64_t)&a10, (uint64_t)&a38, (uint64_t)&a32);
    if (a37 < 0)
      operator delete(a32);
    if (SHIBYTE(a39) < 0)
      operator delete((void *)a38);
    if (SHIBYTE(a12) < 0)
      operator delete(a10);
    if (a46 < 0)
      operator delete(a41);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887CA780);
}

void sub_1887CB314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::ostringstream::~ostringstream(&a33);
  JUMPOUT(0x1887CB640);
}

void sub_1887CB320()
{
  JUMPOUT(0x1887CB328);
}

void sub_1887CB4E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CA904);
}

void sub_1887CB57C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887CB588(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CB438);
}

void sub_1887CB614()
{
  __cxa_end_catch();
  JUMPOUT(0x1887CB56CLL);
}

void sub_1887CB620()
{
  JUMPOUT(0x1887CB628);
}

void sub_1887CB638()
{
  JUMPOUT(0x1887CB640);
}

void sub_1887CB7E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CA7CCLL);
}

void sub_1887CB87C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887AE824);
}

void sub_1887CB888(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a31 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  if (a37 < 0)
    operator delete(a32);
  if (a15 < 0)
    operator delete(a10);
  if (a50 < 0)
    operator delete(a45);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887CB738);
}

void sub_1887CB914()
{
  __cxa_end_catch();
  JUMPOUT(0x1887CB86CLL);
}

_QWORD *addr_obj::Json::operator<<<char [70]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::Json::append<addr_obj::Localization>(_QWORD *a1, uint64_t *a2, addr_obj::Localization *this)
{
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  addr_obj::Localization::toDebugJsonString(this, (addr_obj::Json *)v7);
  v5 = addr_obj::Json::append(a1, a2, (addr_obj::Json *)v7);
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v9);
  return v5;
}

void sub_1887CBA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::Json::append<addr_obj::VenueInfo>(_QWORD *a1, uint64_t *a2, uint64_t **this)
{
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;

  addr_obj::VenueInfo::toDebugJsonString(this, (addr_obj::Json *)v7);
  v5 = addr_obj::Json::append(a1, a2, (addr_obj::Json *)v7);
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x18D764310](&v9);
  return v5;
}

void sub_1887CBB18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::operator<<()
{
  return std::ostream::operator<<();
}

void addr_obj::AddressObjectBase::getRelativeFullAddress(addr_obj *a1@<X0>, addr_obj **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  char v8;

  (*(void (**)(void **__return_ptr, addr_obj *, uint64_t))(*(_QWORD *)a1 + 72))(__p, a1, a3);
  addr_obj::AddressObjectBase::stripSameCountry(a1, a2, (uint64_t)__p, a4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1887CBBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::stripSameCountry(addr_obj *a1@<X0>, addr_obj **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  const addr_obj::AddressObjectBase *Base;
  const addr_obj::AddressObjectBase *v8;
  addr_obj::Debugging *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string __p;
  std::string v15;
  std::string __str;

  if (*a2
    && (Base = (const addr_obj::AddressObjectBase *)addr_obj::getBase(*a2, (AddressObject *)a2),
        addr_obj::sameCountry(a1, Base, v8)))
  {
    addr_obj::Debugging::stripDebug(a3, &__str);
    (*(void (**)(std::string *__return_ptr, addr_obj *))(*(_QWORD *)a1 + 168))(&__p, a1);
    addr_obj::Debugging::stripDebug((uint64_t)&__p, &v15);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    addr_obj::Formatting::stripCountry(&__str, (unsigned __int8 *)&v15, &__p);
    if (addr_obj::Debugging::addChar(v9)
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (size = HIBYTE(__p.__r_.__value_.__r.__words[2]))
        : (size = __p.__r_.__value_.__l.__size_),
          size))
    {
      std::operator+<char>();
      v11 = std::string::append(&v13, "]");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    else if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *a4 = __p;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
}

void sub_1887CBD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::getRelativeShortAddress(addr_obj *a1@<X0>, addr_obj **a2@<X1>, std::string *a3@<X8>)
{
  void *__p[2];
  char v7;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 88))(__p);
  addr_obj::AddressObjectBase::stripSameCountry(a1, a2, (uint64_t)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1887CBE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::getCityAndAbove(addr_obj::AddressObjectBase *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  addr_obj *v5;
  __int128 *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  __int128 *v11;
  void **v12;
  __int128 *v13;
  __int128 v14;
  void *__s1[2];
  int64_t v16;

  if ((a2 & 1) != 0)
  {
    v5 = (addr_obj *)(*(_QWORD *(**)(void **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 136))(__s1, this, 1);
    v6 = addr_obj::emptyString(v5);
    v7 = HIBYTE(v16);
    if (v16 >= 0)
      v8 = (void *)HIBYTE(v16);
    else
      v8 = __s1[1];
    v9 = (void *)*((unsigned __int8 *)v6 + 23);
    v10 = (char)v9;
    if ((char)v9 < 0)
      v9 = (void *)*((_QWORD *)v6 + 1);
    if (v8 == v9)
    {
      if (v10 >= 0)
        v11 = v6;
      else
        v11 = *(__int128 **)v6;
      if ((v16 & 0x8000000000000000) == 0)
      {
        if (HIBYTE(v16))
        {
          v12 = __s1;
          while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v11)
          {
            v12 = (void **)((char *)v12 + 1);
            v11 = (__int128 *)((char *)v11 + 1);
            if (!--v7)
              goto LABEL_23;
          }
          goto LABEL_21;
        }
        goto LABEL_23;
      }
      if (!memcmp(__s1[0], v11, (size_t)__s1[1]))
      {
LABEL_23:
        (*(void (**)(addr_obj::AddressObjectBase *, __int128 *))(*(_QWORD *)this + 88))(this, v11);
        if (SHIBYTE(v16) < 0)
          operator delete(__s1[0]);
        return;
      }
    }
LABEL_21:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)__s1;
    a3->__r_.__value_.__r.__words[2] = v16;
    return;
  }
  v13 = addr_obj::emptyString(this);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
  }
  else
  {
    v14 = *v13;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
  }
}

void sub_1887CBF90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::getRelativeCityAndAbove(addr_obj *a1@<X0>, addr_obj **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  char v8;

  (*(void (**)(void **__return_ptr, addr_obj *, uint64_t))(*(_QWORD *)a1 + 112))(__p, a1, a3);
  addr_obj::AddressObjectBase::stripSameCountry(a1, a2, (uint64_t)__p, a4);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1887CC018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::getWeatherName(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  std::string::value_type *__s[2];
  std::string::size_type v5;

  (*(void (**)(std::string::value_type **__return_ptr, addr_obj::AddressObjectBase *, uint64_t))(*(_QWORD *)this + 136))(__s, this, 1);
  if (SHIBYTE(v5) < 0)
  {
    if (__s[1])
    {
      std::string::__init_copy_ctor_external(a2, __s[0], (std::string::size_type)__s[1]);
      goto LABEL_7;
    }
  }
  else if (HIBYTE(v5))
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)__s;
    a2->__r_.__value_.__r.__words[2] = v5;
    goto LABEL_7;
  }
  (*(void (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 16))(this);
LABEL_7:
  if (SHIBYTE(v5) < 0)
    operator delete(__s[0]);
}

void sub_1887CC0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::AddressObjectBase::getWeatherLocationName(addr_obj::AddressObjectBase *this)
{
  uint64_t v2;
  void *v3;
  void *v5[2];
  char v6;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 216))(v5);
  if (v6 < 0)
  {
    v3 = v5[1];
    operator delete(v5[0]);
    if (v3)
      goto LABEL_3;
LABEL_5:
    v2 = 28;
    return (*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 8 * v2))(this);
  }
  if (!v6)
    goto LABEL_5;
LABEL_3:
  v2 = 27;
  return (*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 8 * v2))(this);
}

void addr_obj::AddressObjectBase::getVenueShortAddress(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  addr_obj *v5;
  addr_obj *v6;
  std::string::size_type size;
  addr_obj *v8;
  addr_obj *v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  addr_obj *v14;
  addr_obj *v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string v19;
  void *v20[2];
  char v21;
  std::string v22;

  v4 = addr_obj::Debugging::addChar(this);
  if (!v4)
    goto LABEL_11;
  v5 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 160))(this);
  (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 136))(v20, this, 0);
  v6 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 152))(this);
  addr_obj::VenueInfo::getShortAddress(v5, (uint64_t)v20, v6, &v22);
  size = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v22.__r_.__value_.__l.__size_;
  if (size)
  {
    v8 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 160))(this);
    (*(void (**)(void **__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 136))(__p, this, 0);
    v9 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 152))(this);
    addr_obj::VenueInfo::getShortAddress(v8, (uint64_t)__p, v9, &v18);
    v10 = std::string::insert(&v18, 0, "[");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v19, "]");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (v17 < 0)
      operator delete(__p[0]);
  }
  else
  {
LABEL_11:
    v14 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 160))(this);
    (*(void (**)(std::string *__return_ptr, addr_obj::AddressObjectBase *, _QWORD))(*(_QWORD *)this + 136))(&v19, this, 0);
    v15 = (addr_obj *)(*(uint64_t (**)(addr_obj::AddressObjectBase *))(*(_QWORD *)this + 152))(this);
    addr_obj::VenueInfo::getShortAddress(v14, (uint64_t)&v19, v15, a2);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (!v4)
        return;
    }
    else if (!v4)
    {
      return;
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v21 < 0)
    operator delete(v20[0]);
}

void sub_1887CC368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v33 - 33) < 0)
    operator delete(*(void **)(v33 - 56));
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

void addr_obj::AddressObjectBase::comparisonText(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  AddrObjGoogle::protobuf::internal *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  addr_obj::AddressObjectProto::AddressObjectProto((addr_obj::AddressObjectProto *)v8);
  v4 = (AddrObjGoogle::protobuf::internal *)(*(uint64_t (**)(addr_obj::AddressObjectBase *, _BYTE *))(*(_QWORD *)this + 304))(this, v8);
  v5 = (uint64_t *)v9;
  if (v5 != AddrObjGoogle::protobuf::internal::kEmptyString(v4))
  {
    v6 = v9;
    if (*(char *)(v9 + 23) < 0)
    {
      **(_BYTE **)v9 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v9 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
  v12 &= ~2u;
  if (v11 >= 1)
  {
    for (i = 0; i < v11; ++i)
      (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 8 * i) + 32))(*(_QWORD *)(v10 + 8 * i));
  }
  v11 = 0;
  AddrObjGoogle::protobuf::MessageLite::SerializeAsString((AddrObjGoogle::protobuf::MessageLite *)v8, a2);
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)v8);
}

void sub_1887CC4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  addr_obj::AddressObjectProto::~AddressObjectProto((addr_obj::AddressObjectProto *)&a9);
  _Unwind_Resume(a1);
}

BOOL addr_obj::AddressObjectBase::operator==(addr_obj::AddressObjectBase *a1, addr_obj *this)
{
  addr_obj::AddressObjectBase *Base;
  addr_obj::AddressObjectBase *v4;
  char v5;
  std::string::size_type size;
  std::string::size_type v7;
  int v8;
  std::string *p_p;
  uint64_t v10;
  std::string *p_s1;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v17;
  _BOOL8 v18;
  std::string __p;
  std::string __s1;

  Base = (addr_obj::AddressObjectBase *)addr_obj::getBase(this, (const AddressObject *)this);
  if (Base != a1)
  {
    v4 = Base;
    addr_obj::AddressObjectBase::comparisonText(a1, &__s1);
    addr_obj::AddressObjectBase::comparisonText(v4, &__p);
    v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    else
      size = __s1.__r_.__value_.__l.__size_;
    v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v7 = __p.__r_.__value_.__l.__size_;
    if (size != v7)
    {
      v18 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_28;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
    }
    else
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        v18 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_25:
          if ((v5 & 0x80) == 0)
            return v18;
LABEL_29:
          operator delete(__s1.__r_.__value_.__l.__data_);
          return v18;
        }
LABEL_28:
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          return v18;
        goto LABEL_29;
      }
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        v13 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        v12 = v13;
        v15 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        v14 = v15;
        v17 = v10-- != 0;
        v18 = v12 == v14;
      }
      while (v12 == v14 && v17);
    }
    if ((v8 & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  return 1;
}

void sub_1887CC610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *addr_obj::getBase(addr_obj *this, const AddressObject *a2)
{
  void *result;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  addr_obj::Logger *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::logic_error *exception;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  void *v21[2];
  unsigned __int8 v22;
  void *__p[2];
  unsigned __int8 v24;
  _QWORD v25[33];

  if (!result)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"given AddressObject instance is not derived from AddressObjectBase", 66);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj *))(*(_QWORD *)this + 200))(__p, this);
    if ((v24 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v7 = v24;
    else
      v7 = (uint64_t)__p[1];
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; library version: ",
           19);
    v10 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"11.3.0", 6);
    if ((char)v24 < 0)
      operator delete(__p[0]);
    if (addr_obj::Logger::isInitialized(v10))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v22 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (void **)v21[0];
      if ((v22 & 0x80u) == 0)
        v12 = v22;
      else
        v12 = (uint64_t)v21[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v11, v12);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v19, "getBase");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v16, "");
      addr_obj::Logger::log(16, (uint64_t)v21, 281, (uint64_t)v19, (uint64_t)&v18, (uint64_t)v16);
      if (v17 < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; at ", 5);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp", 91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "LogicError");
    std::stringbuf::str();
    addr_obj::Exception<std::logic_error>::Exception(exception, (const void **)__p, (uint64_t)v21);
  }
  return result;
}

void sub_1887CCBE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887CCC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;

  std::ostringstream::~ostringstream((uint64_t)&v27);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::AddressObjectBase::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1) ^ 1;
}

uint64_t addr_obj::AddressObjectBase::hash(addr_obj::AddressObjectBase *this)
{
  std::string __p;

  if (!*((_BYTE *)this + 240))
  {
    addr_obj::AddressObjectBase::comparisonText(this, &__p);
    *((_QWORD *)this + 29) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&unk_1EDF50188, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *((_BYTE *)this + 240) = 1;
  }
  return *((_QWORD *)this + 29);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

void *addr_obj::getBase(addr_obj *this, AddressObject *a2)
{
  void *result;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  addr_obj::Logger *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  std::logic_error *exception;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  char v20;
  void *v21[2];
  unsigned __int8 v22;
  void *__p[2];
  unsigned __int8 v24;
  _QWORD v25[33];

  if (!result)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"given AddressObject instance is not derived from AddressObjectBase", 66);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj *))(*(_QWORD *)this + 200))(__p, this);
    if ((v24 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v24 & 0x80u) == 0)
      v7 = v24;
    else
      v7 = (uint64_t)__p[1];
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; library version: ",
           19);
    v10 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"11.3.0", 6);
    if ((char)v24 < 0)
      operator delete(__p[0]);
    if (addr_obj::Logger::isInitialized(v10))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v22 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (void **)v21[0];
      if ((v22 & 0x80u) == 0)
        v12 = v22;
      else
        v12 = (uint64_t)v21[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v11, v12);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::string::basic_string[abi:ne180100]<0>(v21, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp");
      std::string::basic_string[abi:ne180100]<0>(v19, "getBase");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v16, "");
      addr_obj::Logger::log(16, (uint64_t)v21, 286, (uint64_t)v19, (uint64_t)&v18, (uint64_t)v16);
      if (v17 < 0)
        operator delete(v16[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (v20 < 0)
        operator delete(v19[0]);
      if ((char)v22 < 0)
        operator delete(v21[0]);
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"; at ", 5);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObjectBase.cpp", 91);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "LogicError");
    std::stringbuf::str();
    addr_obj::Exception<std::logic_error>::Exception(exception, (const void **)__p, (uint64_t)v21);
  }
  return result;
}

void sub_1887CD300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887CD35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;

  std::ostringstream::~ostringstream((uint64_t)&v27);
  _Unwind_Resume(a1);
}

void *addr_obj::AddressObjectBase::getVenueInfo(addr_obj::AddressObjectBase *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF501B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF501B0))
  {
    addr_obj::VenueInfo::VenueInfo((addr_obj::VenueInfo *)&unk_1EDF50190);
    __cxa_guard_release(&qword_1EDF501B0);
  }
  return &unk_1EDF50190;
}

void sub_1887CD400(void *a1)
{
  __cxa_guard_abort(&qword_1EDF501B0);
  __cxa_call_unexpected(a1);
}

uint64_t addr_obj::AddressObjectBase::getShortAddressType(addr_obj::AddressObjectBase *this)
{
  return *((unsigned int *)this + 2);
}

void addr_obj::AddressObjectBase::getLocationAddress(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void addr_obj::AddressObjectBase::getNeighborhoodName(addr_obj::AddressObjectBase *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *std::vector<addr_obj::Fingerprints::Fingerprint>::__init_with_size[abi:ne180100]<addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<addr_obj::Fingerprints::Fingerprint>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1887CD51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<addr_obj::Fingerprints::Fingerprint>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*,addr_obj::Fingerprints::Fingerprint*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  int v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    v7 = a1;
    do
    {
      std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint&>(v7, v4, v6);
      v6 += 5;
      v4 = (std::string *)((char *)v12 + 80);
      v12 = (std::string *)((char *)v12 + 80);
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1887CD664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v6 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = (std::string *)((char *)this + 56);
  if (*((char *)a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 7), *((_QWORD *)a3 + 8));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 9);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1887CD72C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,addr_obj::Fingerprints::Fingerprint*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 80;
      std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

std::logic_error *addr_obj::Exception<std::logic_error>::Exception(std::logic_error *a1, const void **a2, uint64_t a3)
{
  std::logic_error *v6;

  v6 = std::logic_error::logic_error(a1, "");
  addr_obj::AddressObjectException::AddressObjectException((uint64_t)&v6[1], a2, a3);
  a1->__vftable = (std::logic_error_vtbl *)&off_1E1BFA1E0;
  return a1;
}

void sub_1887CDCA8(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void addr_obj::Exception<std::logic_error>::~Exception(std::logic_error *a1)
{
  addr_obj::Exception<std::logic_error>::~Exception(a1);
  JUMPOUT(0x18D76437CLL);
}

char *addr_obj::Exception<std::logic_error>::what(uint64_t a1)
{
  return addr_obj::AddressObjectException::what((char *)(a1 + 16));
}

void addr_obj::Exception<std::logic_error>::~Exception(std::logic_error *this)
{
  if (SHIBYTE(this[2].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::logic_error::~logic_error(this);
}

void ***std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](void ****a1, void ***a2)
{
  void ***result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    addr_obj::VenueInfo::~VenueInfo(result);
    JUMPOUT(0x18D76437CLL);
  }
  return result;
}

uint64_t addr_obj::V0AddressObject::V0AddressObject(uint64_t a1, __int128 *a2, __int128 **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  int v26;
  std::string *v27;
  uint64_t v28;
  std::string *v29;
  __int128 v30;
  int v31;
  std::string *v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  std::string *v39;
  __int128 v40;
  int v41;
  std::string *v42;
  uint64_t v43;
  std::string *v44;
  __int128 v45;
  int v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  int v51;
  std::string *v52;
  uint64_t v53;
  std::string *v54;
  __int128 v55;
  int v56;
  std::string *v57;
  uint64_t v58;
  std::string *v59;
  __int128 v60;
  int v61;
  std::string *v62;
  uint64_t v63;
  std::string *v64;
  __int128 v65;
  int v66;
  _QWORD *v68;
  _QWORD *v69;
  std::string *v70;
  std::string::size_type size;
  _QWORD *v72;
  _QWORD *v73;
  addr_obj::Logger *v74;
  std::string *v75;
  std::string::size_type v76;
  _QWORD *v77;
  _QWORD *v78;
  std::runtime_error *exception;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string *v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string __str;

  LODWORD(__str.__r_.__value_.__l.__data_) = 0;
  v18 = addr_obj::AddressObjectBase::AddressObjectBase(a1, (int *)&__str, a2, a3);
  *(_QWORD *)v18 = &off_1E1BF9270;
  *(_OWORD *)(v18 + 248) = 0u;
  v19 = (std::string *)(v18 + 248);
  v84 = (std::string *)(v18 + 296);
  v85 = (std::string *)(v18 + 272);
  v82 = (std::string *)(v18 + 344);
  v83 = (std::string *)(v18 + 320);
  v80 = (std::string *)(v18 + 392);
  v81 = (std::string *)(v18 + 368);
  v20 = (std::string *)(v18 + 416);
  v21 = (std::string *)(v18 + 440);
  *(_QWORD *)(v18 + 456) = 0;
  *(_OWORD *)(v18 + 264) = 0u;
  *(_OWORD *)(v18 + 280) = 0u;
  *(_OWORD *)(v18 + 296) = 0u;
  *(_OWORD *)(v18 + 312) = 0u;
  *(_OWORD *)(v18 + 328) = 0u;
  *(_OWORD *)(v18 + 344) = 0u;
  *(_OWORD *)(v18 + 360) = 0u;
  *(_OWORD *)(v18 + 376) = 0u;
  *(_OWORD *)(v18 + 392) = 0u;
  *(_OWORD *)(v18 + 408) = 0u;
  *(_OWORD *)(v18 + 424) = 0u;
  *(_OWORD *)(v18 + 440) = 0u;
  v22 = *(unsigned __int8 *)(a4 + 23);
  if ((v22 & 0x80u) != 0)
    v22 = *(_QWORD *)(a4 + 8);
  if (!v22)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
    v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"formattedAddress is empty", 25);
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"; base64==", 10);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 200))(&v94, a1);
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v94;
    else
      v70 = (std::string *)v94.__r_.__value_.__r.__words[0];
    if ((v94.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v94.__r_.__value_.__r.__words[2]);
    else
      size = v94.__r_.__value_.__l.__size_;
    v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v70, size);
    v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"; library version: ",
            19);
    v74 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"11.3.0", 6);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (addr_obj::Logger::isInitialized(v74))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v94);
      std::stringbuf::str();
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v93;
      else
        v75 = (std::string *)v93.__r_.__value_.__r.__words[0];
      if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v76 = HIBYTE(v93.__r_.__value_.__r.__words[2]);
      else
        v76 = v93.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v94, (uint64_t)v75, v76);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v93, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(&v92, "V0AddressObject");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&v90, "");
      addr_obj::Logger::log(16, (uint64_t)&v93, 36, (uint64_t)&v92, (uint64_t)&v91, (uint64_t)&v90);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      std::ostringstream::~ostringstream((uint64_t)&v94);
    }
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"; at ", 5);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v94, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v94.__r_.__value_.__l.__data_, (uint64_t)&v93);
  }
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v18)
    && (*(char *)(a4 + 23) >= 0 ? (v23 = *(unsigned __int8 *)(a4 + 23)) : (v23 = *(_QWORD *)(a4 + 8)), v23))
  {
    std::operator+<char>();
    v24 = std::string::append(&v94, ">");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = 1;
  }
  else if ((*(_BYTE *)(a4 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    v26 = 0;
  }
  else
  {
    v26 = 0;
    __str = *(std::string *)a4;
  }
  v27 = std::string::operator=(v19, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v26 && SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v27)
    && (*(char *)(a5 + 23) >= 0 ? (v28 = *(unsigned __int8 *)(a5 + 23)) : (v28 = *(_QWORD *)(a5 + 8)), v28))
  {
    std::operator+<char>();
    v29 = std::string::append(&v93, ">");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = 1;
  }
  else if ((*(_BYTE *)(a5 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
    v31 = 0;
  }
  else
  {
    v31 = 0;
    __str = *(std::string *)a5;
  }
  v32 = std::string::operator=(v85, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v31 && SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v32)
    && (*(char *)(a6 + 23) >= 0 ? (v33 = *(unsigned __int8 *)(a6 + 23)) : (v33 = *(_QWORD *)(a6 + 8)), v33))
  {
    std::operator+<char>();
    v34 = std::string::append(&v92, ">");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    v36 = 1;
  }
  else if ((*(_BYTE *)(a6 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    v36 = 0;
  }
  else
  {
    v36 = 0;
    __str = *(std::string *)a6;
  }
  v37 = std::string::operator=(v84, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v36 && SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v37)
    && (*(char *)(a7 + 23) >= 0 ? (v38 = *(unsigned __int8 *)(a7 + 23)) : (v38 = *(_QWORD *)(a7 + 8)), v38))
  {
    std::operator+<char>();
    v39 = std::string::append(&v91, ">");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = 1;
  }
  else if ((*(_BYTE *)(a7 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    v41 = 0;
  }
  else
  {
    v41 = 0;
    __str = *(std::string *)a7;
  }
  v42 = std::string::operator=(v83, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v41 && SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v42)
    && (*(char *)(a8 + 23) >= 0 ? (v43 = *(unsigned __int8 *)(a8 + 23)) : (v43 = *(_QWORD *)(a8 + 8)), v43))
  {
    std::operator+<char>();
    v44 = std::string::append(&v90, ">");
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = 1;
  }
  else if ((*(_BYTE *)(a8 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
    v46 = 0;
  }
  else
  {
    v46 = 0;
    __str = *(std::string *)a8;
  }
  v47 = std::string::operator=(v82, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v46 && SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v47)
    && (*(char *)(a9 + 23) >= 0 ? (v48 = *(unsigned __int8 *)(a9 + 23)) : (v48 = *(_QWORD *)(a9 + 8)), v48))
  {
    std::operator+<char>();
    v49 = std::string::append(&v89, ">");
    v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    v51 = 1;
  }
  else if ((*(_BYTE *)(a9 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
    v51 = 0;
  }
  else
  {
    v51 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  v52 = std::string::operator=(v81, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v51 && SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v52)
    && (*(char *)(a10 + 23) >= 0 ? (v53 = *(unsigned __int8 *)(a10 + 23)) : (v53 = *(_QWORD *)(a10 + 8)), v53))
  {
    std::operator+<char>();
    v54 = std::string::append(&v88, ">");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = 1;
  }
  else if ((*(_BYTE *)(a10 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
    v56 = 0;
  }
  else
  {
    v56 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  v57 = std::string::operator=(v80, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v56 && SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v57)
    && (*(char *)(a11 + 23) >= 0 ? (v58 = *(unsigned __int8 *)(a11 + 23)) : (v58 = *(_QWORD *)(a11 + 8)), v58))
  {
    std::operator+<char>();
    v59 = std::string::append(&v87, ">");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v61 = 1;
  }
  else if ((*(_BYTE *)(a11 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a11, *(_QWORD *)(a11 + 8));
    v61 = 0;
  }
  else
  {
    v61 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a11 + 16);
  }
  v62 = std::string::operator=(v20, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v61 && SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v62)
    && (*(char *)(a12 + 23) >= 0 ? (v63 = *(unsigned __int8 *)(a12 + 23)) : (v63 = *(_QWORD *)(a12 + 8)), v63))
  {
    std::operator+<char>();
    v64 = std::string::append(&v86, ">");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = 1;
  }
  else if ((*(_BYTE *)(a12 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a12, *(_QWORD *)(a12 + 8));
    v66 = 0;
  }
  else
  {
    v66 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a12;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a12 + 16);
  }
  std::string::operator=(v21, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v66 && SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  return a1;
}

{
  return addr_obj::V0AddressObject::V0AddressObject(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_1887CEA7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  void *v50;
  int v51;
  uint64_t v52;

  if (a44 < 0)
    operator delete(__p);
  if (a50 < 0)
  {
    operator delete(a45);
    if ((v51 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v51)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v52);
    JUMPOUT(0x1887CED84);
  }
  __cxa_free_exception(v50);
  goto LABEL_8;
}

void sub_1887CEAD8()
{
  uint64_t v0;
  void **v1;
  void **v2;
  void **v3;
  _Unwind_Exception *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  uint64_t v11;

  std::ostringstream::~ostringstream((uint64_t)&v11);
  if (*(char *)(v0 + 463) < 0)
    operator delete(*v3);
  if (*(char *)(v0 + 439) < 0)
    operator delete(*v2);
  if (*(char *)(v0 + 415) < 0)
    operator delete(*v5);
  if (*(char *)(v0 + 391) < 0)
    operator delete(*v6);
  if (*(char *)(v0 + 367) < 0)
    operator delete(*v7);
  if (*(char *)(v0 + 343) < 0)
    operator delete(*v8);
  if (*(char *)(v0 + 319) < 0)
    operator delete(*v9);
  if (*(char *)(v0 + 295) < 0)
    operator delete(*v10);
  if (*(char *)(v0 + 271) < 0)
    operator delete(*v1);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v0);
  _Unwind_Resume(v4);
}

void sub_1887CEBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;
  int v24;
  void **v25;
  void **v26;
  _Unwind_Exception *v27;
  void **v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  void **v33;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v24 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  if (a22 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v22 + 463) < 0)
    operator delete(*v26);
  if (*(char *)(v22 + 439) < 0)
    operator delete(*v25);
  if (*(char *)(v22 + 415) < 0)
    operator delete(*v28);
  if (*(char *)(v22 + 391) < 0)
    operator delete(*v29);
  if (*(char *)(v22 + 367) < 0)
    operator delete(*v30);
  if (*(char *)(v22 + 343) < 0)
    operator delete(*v31);
  if (*(char *)(v22 + 319) < 0)
    operator delete(*v32);
  if (*(char *)(v22 + 295) < 0)
    operator delete(*v33);
  if (*(char *)(v22 + 271) < 0)
    operator delete(*v23);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v22);
  _Unwind_Resume(v27);
}

void sub_1887CEBE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void **v26;
  int v27;
  void **v28;
  void **v29;
  _Unwind_Exception *v30;
  void **v31;
  void **v32;
  void **v33;
  void **v34;
  void **v35;
  void **v36;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v27 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  if (a25 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v25 + 463) < 0)
    operator delete(*v29);
  if (*(char *)(v25 + 439) < 0)
    operator delete(*v28);
  if (*(char *)(v25 + 415) < 0)
    operator delete(*v31);
  if (*(char *)(v25 + 391) < 0)
    operator delete(*v32);
  if (*(char *)(v25 + 367) < 0)
    operator delete(*v33);
  if (*(char *)(v25 + 343) < 0)
    operator delete(*v34);
  if (*(char *)(v25 + 319) < 0)
    operator delete(*v35);
  if (*(char *)(v25 + 295) < 0)
    operator delete(*v36);
  if (*(char *)(v25 + 271) < 0)
    operator delete(*v26);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v25);
  _Unwind_Resume(v30);
}

void sub_1887CEC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  int v30;
  void **v31;
  void **v32;
  _Unwind_Exception *v33;
  void **v34;
  void **v35;
  void **v36;
  void **v37;
  void **v38;
  void **v39;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v30 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  if (a28 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v28 + 463) < 0)
    operator delete(*v32);
  if (*(char *)(v28 + 439) < 0)
    operator delete(*v31);
  if (*(char *)(v28 + 415) < 0)
    operator delete(*v34);
  if (*(char *)(v28 + 391) < 0)
    operator delete(*v35);
  if (*(char *)(v28 + 367) < 0)
    operator delete(*v36);
  if (*(char *)(v28 + 343) < 0)
    operator delete(*v37);
  if (*(char *)(v28 + 319) < 0)
    operator delete(*v38);
  if (*(char *)(v28 + 295) < 0)
    operator delete(*v39);
  if (*(char *)(v28 + 271) < 0)
    operator delete(*v29);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v28);
  _Unwind_Resume(v33);
}

void sub_1887CEC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void **v32;
  int v33;
  void **v34;
  void **v35;
  _Unwind_Exception *v36;
  void **v37;
  void **v38;
  void **v39;
  void **v40;
  void **v41;
  void **v42;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v33 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v33)
  {
    goto LABEL_6;
  }
  if (a31 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v31 + 463) < 0)
    operator delete(*v35);
  if (*(char *)(v31 + 439) < 0)
    operator delete(*v34);
  if (*(char *)(v31 + 415) < 0)
    operator delete(*v37);
  if (*(char *)(v31 + 391) < 0)
    operator delete(*v38);
  if (*(char *)(v31 + 367) < 0)
    operator delete(*v39);
  if (*(char *)(v31 + 343) < 0)
    operator delete(*v40);
  if (*(char *)(v31 + 319) < 0)
    operator delete(*v41);
  if (*(char *)(v31 + 295) < 0)
    operator delete(*v42);
  if (*(char *)(v31 + 271) < 0)
    operator delete(*v32);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v31);
  _Unwind_Resume(v36);
}

void sub_1887CEC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void **v35;
  int v36;
  void **v37;
  void **v38;
  _Unwind_Exception *v39;
  void **v40;
  void **v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v36 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v36)
  {
    goto LABEL_6;
  }
  if (a34 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v34 + 463) < 0)
    operator delete(*v38);
  if (*(char *)(v34 + 439) < 0)
    operator delete(*v37);
  if (*(char *)(v34 + 415) < 0)
    operator delete(*v40);
  if (*(char *)(v34 + 391) < 0)
    operator delete(*v41);
  if (*(char *)(v34 + 367) < 0)
    operator delete(*v42);
  if (*(char *)(v34 + 343) < 0)
    operator delete(*v43);
  if (*(char *)(v34 + 319) < 0)
    operator delete(*v44);
  if (*(char *)(v34 + 295) < 0)
    operator delete(*v45);
  if (*(char *)(v34 + 271) < 0)
    operator delete(*v35);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v34);
  _Unwind_Resume(v39);
}

void sub_1887CECB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  void **v38;
  int v39;
  void **v40;
  void **v41;
  _Unwind_Exception *v42;
  void **v43;
  void **v44;
  void **v45;
  void **v46;
  void **v47;
  void **v48;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v39 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v39)
  {
    goto LABEL_6;
  }
  if (a37 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v37 + 463) < 0)
    operator delete(*v41);
  if (*(char *)(v37 + 439) < 0)
    operator delete(*v40);
  if (*(char *)(v37 + 415) < 0)
    operator delete(*v43);
  if (*(char *)(v37 + 391) < 0)
    operator delete(*v44);
  if (*(char *)(v37 + 367) < 0)
    operator delete(*v45);
  if (*(char *)(v37 + 343) < 0)
    operator delete(*v46);
  if (*(char *)(v37 + 319) < 0)
    operator delete(*v47);
  if (*(char *)(v37 + 295) < 0)
    operator delete(*v48);
  if (*(char *)(v37 + 271) < 0)
    operator delete(*v38);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v37);
  _Unwind_Resume(v42);
}

void sub_1887CECE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  void **v41;
  int v42;
  void **v43;
  void **v44;
  _Unwind_Exception *v45;
  void **v46;
  void **v47;
  void **v48;
  void **v49;
  void **v50;
  void **v51;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v42 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v42)
  {
    goto LABEL_6;
  }
  if (a40 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v40 + 463) < 0)
    operator delete(*v44);
  if (*(char *)(v40 + 439) < 0)
    operator delete(*v43);
  if (*(char *)(v40 + 415) < 0)
    operator delete(*v46);
  if (*(char *)(v40 + 391) < 0)
    operator delete(*v47);
  if (*(char *)(v40 + 367) < 0)
    operator delete(*v48);
  if (*(char *)(v40 + 343) < 0)
    operator delete(*v49);
  if (*(char *)(v40 + 319) < 0)
    operator delete(*v50);
  if (*(char *)(v40 + 295) < 0)
    operator delete(*v51);
  if (*(char *)(v40 + 271) < 0)
    operator delete(*v41);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v40);
  _Unwind_Resume(v45);
}

void sub_1887CED18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  uint64_t v44;
  void **v45;
  int v46;
  void **v47;
  void **v48;
  _Unwind_Exception *v49;
  void **v50;
  void **v51;
  void **v52;
  void **v53;
  void **v54;
  void **v55;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v46 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v46)
  {
    goto LABEL_6;
  }
  if (a44 < 0)
    JUMPOUT(0x1887CED78);
LABEL_6:
  if (*(char *)(v44 + 463) < 0)
    operator delete(*v48);
  if (*(char *)(v44 + 439) < 0)
    operator delete(*v47);
  if (*(char *)(v44 + 415) < 0)
    operator delete(*v50);
  if (*(char *)(v44 + 391) < 0)
    operator delete(*v51);
  if (*(char *)(v44 + 367) < 0)
    operator delete(*v52);
  if (*(char *)(v44 + 343) < 0)
    operator delete(*v53);
  if (*(char *)(v44 + 319) < 0)
    operator delete(*v54);
  if (*(char *)(v44 + 295) < 0)
    operator delete(*v55);
  if (*(char *)(v44 + 271) < 0)
    operator delete(*v45);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v44);
  _Unwind_Resume(v49);
}

void sub_1887CED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;
  void **v48;
  int v49;
  void **v50;
  void **v51;
  _Unwind_Exception *v52;
  void **v53;
  void **v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;

  if (SLOBYTE(STACK[0x227]) < 0)
  {
    operator delete((void *)STACK[0x210]);
    if ((v49 & 1) == 0)
      goto LABEL_7;
  }
  else if (!v49)
  {
    goto LABEL_7;
  }
  if (a47 < 0)
    operator delete(a42);
LABEL_7:
  if (*(char *)(v47 + 463) < 0)
    operator delete(*v51);
  if (*(char *)(v47 + 439) < 0)
    operator delete(*v50);
  if (*(char *)(v47 + 415) < 0)
    operator delete(*v53);
  if (*(char *)(v47 + 391) < 0)
    operator delete(*v54);
  if (*(char *)(v47 + 367) < 0)
    operator delete(*v55);
  if (*(char *)(v47 + 343) < 0)
    operator delete(*v56);
  if (*(char *)(v47 + 319) < 0)
    operator delete(*v57);
  if (*(char *)(v47 + 295) < 0)
    operator delete(*v58);
  if (*(char *)(v47 + 271) < 0)
    operator delete(*v48);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v47);
  _Unwind_Resume(v52);
}

addr_obj::V0AddressObject *addr_obj::V0AddressObject::V0AddressObject(addr_obj::V0AddressObject *this, const addr_obj::Localization *a2, __int128 **a3, const addr_obj::V0AddressObjectProto **a4)
{
  uint64_t v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  const addr_obj::V0AddressObjectProto *v16;
  __int16 v17;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  addr_obj::Logger *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  std::runtime_error *exception;
  std::string *v32;
  void *v33[2];
  char v34;
  std::string v35;
  void *v36[2];
  char v37;
  void *v38[2];
  unsigned __int8 v39;
  void *__p[2];
  unsigned __int8 v41;
  std::string *v42[11];
  int v43;

  LODWORD(v42[0]) = 0;
  v6 = addr_obj::AddressObjectBase::AddressObjectBase((uint64_t)this, (int *)v42, (__int128 *)a2, a3);
  *(_QWORD *)v6 = &off_1E1BF9270;
  *(_OWORD *)(v6 + 248) = 0u;
  v7 = (std::string *)(v6 + 248);
  *(_QWORD *)(v6 + 456) = 0;
  v32 = (std::string *)(v6 + 272);
  v8 = (std::string *)(v6 + 296);
  v9 = (std::string *)(v6 + 320);
  v10 = (std::string *)(v6 + 344);
  v11 = (std::string *)(v6 + 368);
  v12 = (std::string *)(v6 + 392);
  v13 = (std::string *)(v6 + 416);
  v14 = (std::string *)(v6 + 440);
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  if (((_BYTE)a4[11] & 0x10) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v42);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"v0address is missing in ", 24);
    v20 = addr_obj::operator<<(v19, (AddrObjGoogle::protobuf::Message *)a4);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj::V0AddressObject *))(*(_QWORD *)this + 200))(__p, this);
    if ((v41 & 0x80u) == 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    if ((v41 & 0x80u) == 0)
      v23 = v41;
    else
      v23 = (uint64_t)__p[1];
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"; library version: ",
            19);
    v26 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"11.3.0", 6);
    if ((char)v41 < 0)
      operator delete(__p[0]);
    if (addr_obj::Logger::isInitialized(v26))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v39 & 0x80u) == 0)
        v27 = v38;
      else
        v27 = (void **)v38[0];
      if ((v39 & 0x80u) == 0)
        v28 = v39;
      else
        v28 = (uint64_t)v38[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v27, v28);
      if ((char)v39 < 0)
        operator delete(v38[0]);
      std::string::basic_string[abi:ne180100]<0>(v38, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v36, "V0AddressObject");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v33, "");
      addr_obj::Logger::log(16, (uint64_t)v38, 52, (uint64_t)v36, (uint64_t)&v35, (uint64_t)v33);
      if (v34 < 0)
        operator delete(v33[0]);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      if (v37 < 0)
        operator delete(v36[0]);
      if ((char)v39 < 0)
        operator delete(v38[0]);
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"; at ", 5);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)__p, (uint64_t)v38);
  }
  v15 = addr_obj::AddressObjectBase::fromProto(this, (const std::string **)a4);
  v16 = a4[7];
  if (!v16)
    v16 = *(const addr_obj::V0AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)v15)
                                                   + 56);
  addr_obj::V0AddressObjectProto::V0AddressObjectProto((addr_obj::V0AddressObjectProto *)v42, v16);
  v17 = v43;
  if ((v43 & 1) != 0)
  {
    std::string::operator=(v7, v42[2]);
    v17 = v43;
  }
  if ((v17 & 2) != 0)
  {
    std::string::operator=(v32, v42[3]);
    v17 = v43;
  }
  if ((v17 & 4) != 0)
  {
    std::string::operator=(v8, v42[4]);
    v17 = v43;
  }
  if ((v17 & 8) != 0)
  {
    std::string::operator=(v9, v42[5]);
    v17 = v43;
  }
  if ((v17 & 0x10) != 0)
  {
    std::string::operator=(v10, v42[6]);
    v17 = v43;
  }
  if ((v17 & 0x20) != 0)
  {
    std::string::operator=(v11, v42[7]);
    v17 = v43;
  }
  if ((v17 & 0x40) != 0)
  {
    std::string::operator=(v12, v42[8]);
    v17 = v43;
  }
  if ((v17 & 0x80) != 0)
  {
    std::string::operator=(v13, v42[9]);
    v17 = v43;
  }
  if ((v17 & 0x100) != 0)
    std::string::operator=(v14, v42[10]);
  addr_obj::V0AddressObjectProto::~V0AddressObjectProto((addr_obj::V0AddressObjectProto *)v42);
  return this;
}

void sub_1887CF56C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  int v34;
  uint64_t v35;

  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v34 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v34)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v35);
    JUMPOUT(0x1887CF624);
  }
  __cxa_free_exception(a10);
  goto LABEL_8;
}

void sub_1887CF5C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::ostringstream::~ostringstream((uint64_t)&v31);
  JUMPOUT(0x1887CF624);
}

void sub_1887CF608()
{
  char *v0;
  void **v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  _Unwind_Exception *v9;
  void **v10;

  if (v0[463] < 0)
    operator delete(*v8);
  if (v0[439] < 0)
    operator delete(*v7);
  if (v0[415] < 0)
    operator delete(*v6);
  if (v0[391] < 0)
    operator delete(*v5);
  if (v0[367] < 0)
    operator delete(*v4);
  if (v0[343] < 0)
    operator delete(*v3);
  if (v0[319] < 0)
    operator delete(*v2);
  if (v0[295] < 0)
    operator delete(*v10);
  if (v0[271] < 0)
    operator delete(*v1);
  addr_obj::AddressObjectBase::~AddressObjectBase((addr_obj::AddressObjectBase *)v0);
  _Unwind_Resume(v9);
}

void sub_1887CF618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  addr_obj::V0AddressObjectProto::~V0AddressObjectProto((addr_obj::V0AddressObjectProto *)&a59);
  JUMPOUT(0x1887CF624);
}

void addr_obj::V0AddressObject::getName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string::size_type v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string::size_type v12;
  std::string v13;
  std::string v14;
  std::string v15;
  char v16;

  v4 = addr_obj::Debugging::addChar(this);
  if (!v4)
    goto LABEL_9;
  v5 = std::string::find((const std::string *)((char *)this + 248), 10, 0);
  std::string::basic_string(&v15, (const std::string *)((char *)this + 248), 0, v5, (std::allocator<char> *)&v14);
  size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v15.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = std::string::find((const std::string *)((char *)this + 248), 10, 0);
    std::string::basic_string(&v13, (const std::string *)((char *)this + 248), 0, v7, (std::allocator<char> *)&v16);
    v8 = std::string::insert(&v13, 0, "[");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = std::string::append(&v14, "]");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_9:
    v12 = std::string::find((const std::string *)((char *)this + 248), 10, 0);
    std::string::basic_string(a2, (const std::string *)((char *)this + 248), 0, v12, (std::allocator<char> *)&v14);
    if (!v4)
      return;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
}

void sub_1887CF82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void addr_obj::V0AddressObject::getAddress(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *v5;
  __int128 v6;
  int v7;
  int v8;
  uint64_t v9;
  std::string *v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  int v15;
  uint64_t *v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  __int128 v20;
  int v21;
  uint64_t *v22;
  std::string *v23;
  uint64_t v24;
  std::string *v25;
  __int128 v26;
  int v27;
  uint64_t *v28;
  std::string *v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  int v33;
  uint64_t *v34;
  std::string *v35;
  uint64_t v36;
  std::string *v37;
  __int128 v38;
  int v39;
  uint64_t *v40;
  std::string *v41;
  uint64_t v42;
  std::string *v43;
  __int128 v44;
  int v45;
  uint64_t *v46;
  std::string *v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  int v51;
  uint64_t *v52;
  std::string *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  int v57;
  uint64_t *v58;
  std::string *v59;
  _QWORD *v60;
  _QWORD *v61;
  void **v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  addr_obj::Logger *v66;
  void **v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  std::runtime_error *exception;
  void *v72[2];
  char v73;
  std::string v74;
  void *v75[2];
  char v76;
  void *v77[2];
  unsigned __int8 v78;
  void *v79[2];
  unsigned __int8 v80;
  std::string __str;
  __int128 __p;
  uint64_t v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  _BYTE v93[16];
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;

  v4 = (std::string *)addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)v93);
  if (*((char *)this + 271) < 0)
  {
    if (!*((_QWORD *)this + 32))
      goto LABEL_24;
  }
  else if (!*((_BYTE *)this + 271))
  {
    goto LABEL_24;
  }
  v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if ((_DWORD)v5)
  {
    if ((*((_BYTE *)this + 271) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 32))
        goto LABEL_8;
    }
    else if (*((_BYTE *)this + 271))
    {
LABEL_8:
      std::operator+<char>();
      v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)std::string::append(&v92, ")");
      v6 = *(_OWORD *)v5;
      __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = 0;
      v7 = 1;
      goto LABEL_13;
    }
  }
  if ((*((_BYTE *)this + 271) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 31), *((_QWORD *)this + 32));
    v7 = 0;
  }
  else
  {
    v7 = 0;
    __str = *(std::string *)((char *)this + 248);
  }
LABEL_13:
  v8 = v96;
  v9 = v95;
  if (v95 >= v96)
  {
    if (v96 == v97)
    {
      v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)&v94, v96 + 1);
      v8 = v96;
    }
    v96 = v8 + 1;
    v10 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(v5);
    v11 = v95++;
    *(_QWORD *)(v94 + 8 * v11) = v10;
  }
  else
  {
    ++v95;
    v10 = *(std::string **)(v94 + 8 * v9);
  }
  v4 = std::string::operator=(v10, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_24;
  }
  else if (!v7)
  {
    goto LABEL_24;
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_24:
  if (*((char *)this + 295) < 0)
  {
    if (!*((_QWORD *)this + 35))
      goto LABEL_47;
  }
  else if (!*((_BYTE *)this + 295))
  {
    goto LABEL_47;
  }
  v99 |= 2u;
  v12 = v98;
  if (!v98)
  {
    v12 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v12);
    v98 = v12;
  }
  v13 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v13)
    goto LABEL_35;
  if ((*((_BYTE *)this + 295) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 35))
      goto LABEL_33;
LABEL_35:
    if ((*((_BYTE *)this + 295) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 34), *((_QWORD *)this + 35));
      v15 = 0;
    }
    else
    {
      v15 = 0;
      __str = *(std::string *)((char *)this + 272);
    }
    goto LABEL_38;
  }
  if (!*((_BYTE *)this + 295))
    goto LABEL_35;
LABEL_33:
  std::operator+<char>();
  v13 = std::string::append(&v91, ")");
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = 1;
LABEL_38:
  *(_DWORD *)(v12 + 244) |= 0x800u;
  v16 = *(uint64_t **)(v12 + 104);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v13))
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__r.__words[0] = 0;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v12 + 104) = v17;
  }
  else
  {
    v17 = *(std::string **)(v12 + 104);
  }
  v4 = std::string::operator=(v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v15)
      goto LABEL_47;
  }
  else if (!v15)
  {
    goto LABEL_47;
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
LABEL_47:
  if (*((char *)this + 319) < 0)
  {
    if (!*((_QWORD *)this + 38))
      goto LABEL_70;
  }
  else if (!*((_BYTE *)this + 319))
  {
    goto LABEL_70;
  }
  v99 |= 2u;
  v18 = v98;
  if (!v98)
  {
    v18 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v18);
    v98 = v18;
  }
  v19 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v19)
    goto LABEL_58;
  if ((*((_BYTE *)this + 319) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 38))
      goto LABEL_56;
LABEL_58:
    if ((*((_BYTE *)this + 319) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
      v21 = 0;
    }
    else
    {
      v21 = 0;
      __str = *(std::string *)((char *)this + 296);
    }
    goto LABEL_61;
  }
  if (!*((_BYTE *)this + 319))
    goto LABEL_58;
LABEL_56:
  std::operator+<char>();
  v19 = std::string::append(&v90, ")");
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  v21 = 1;
LABEL_61:
  *(_DWORD *)(v18 + 244) |= 0x20u;
  v22 = *(uint64_t **)(v18 + 56);
  if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v19))
  {
    v23 = (std::string *)operator new();
    v23->__r_.__value_.__r.__words[0] = 0;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v18 + 56) = v23;
  }
  else
  {
    v23 = *(std::string **)(v18 + 56);
  }
  v4 = std::string::operator=(v23, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v21)
      goto LABEL_70;
  }
  else if (!v21)
  {
    goto LABEL_70;
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
LABEL_70:
  if (*((char *)this + 343) < 0)
  {
    if (!*((_QWORD *)this + 41))
      goto LABEL_93;
  }
  else if (!*((_BYTE *)this + 343))
  {
    goto LABEL_93;
  }
  v99 |= 2u;
  v24 = v98;
  if (!v98)
  {
    v24 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v24);
    v98 = v24;
  }
  v25 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v25)
    goto LABEL_81;
  if ((*((_BYTE *)this + 343) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 41))
      goto LABEL_79;
LABEL_81:
    if ((*((_BYTE *)this + 343) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 40), *((_QWORD *)this + 41));
      v27 = 0;
    }
    else
    {
      v27 = 0;
      __str = *(std::string *)((char *)this + 320);
    }
    goto LABEL_84;
  }
  if (!*((_BYTE *)this + 343))
    goto LABEL_81;
LABEL_79:
  std::operator+<char>();
  v25 = std::string::append(&v89, ")");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  v27 = 1;
LABEL_84:
  *(_DWORD *)(v24 + 244) |= 4u;
  v28 = *(uint64_t **)(v24 + 32);
  if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v25))
  {
    v29 = (std::string *)operator new();
    v29->__r_.__value_.__r.__words[0] = 0;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v24 + 32) = v29;
  }
  else
  {
    v29 = *(std::string **)(v24 + 32);
  }
  v4 = std::string::operator=(v29, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v27)
      goto LABEL_93;
  }
  else if (!v27)
  {
    goto LABEL_93;
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
LABEL_93:
  if (*((char *)this + 367) < 0)
  {
    if (!*((_QWORD *)this + 44))
      goto LABEL_116;
  }
  else if (!*((_BYTE *)this + 367))
  {
    goto LABEL_116;
  }
  v99 |= 2u;
  v30 = v98;
  if (!v98)
  {
    v30 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v30);
    v98 = v30;
  }
  v31 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v31)
    goto LABEL_104;
  if ((*((_BYTE *)this + 367) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 44))
      goto LABEL_102;
LABEL_104:
    if ((*((_BYTE *)this + 367) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 43), *((_QWORD *)this + 44));
      v33 = 0;
    }
    else
    {
      v33 = 0;
      __str = *(std::string *)((char *)this + 344);
    }
    goto LABEL_107;
  }
  if (!*((_BYTE *)this + 367))
    goto LABEL_104;
LABEL_102:
  std::operator+<char>();
  v31 = std::string::append(&v88, ")");
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  v33 = 1;
LABEL_107:
  *(_DWORD *)(v30 + 244) |= 0x40u;
  v34 = *(uint64_t **)(v30 + 64);
  if (v34 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v31))
  {
    v35 = (std::string *)operator new();
    v35->__r_.__value_.__r.__words[0] = 0;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v30 + 64) = v35;
  }
  else
  {
    v35 = *(std::string **)(v30 + 64);
  }
  v4 = std::string::operator=(v35, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v33)
      goto LABEL_116;
  }
  else if (!v33)
  {
    goto LABEL_116;
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
LABEL_116:
  if (*((char *)this + 391) < 0)
  {
    if (!*((_QWORD *)this + 47))
      goto LABEL_139;
  }
  else if (!*((_BYTE *)this + 391))
  {
    goto LABEL_139;
  }
  v99 |= 2u;
  v36 = v98;
  if (!v98)
  {
    v36 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v36);
    v98 = v36;
  }
  v37 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v37)
    goto LABEL_127;
  if ((*((_BYTE *)this + 391) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 47))
      goto LABEL_125;
LABEL_127:
    if ((*((_BYTE *)this + 391) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 46), *((_QWORD *)this + 47));
      v39 = 0;
    }
    else
    {
      v39 = 0;
      __str = *(std::string *)((char *)this + 368);
    }
    goto LABEL_130;
  }
  if (!*((_BYTE *)this + 391))
    goto LABEL_127;
LABEL_125:
  std::operator+<char>();
  v37 = std::string::append(&v87, ")");
  v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  v39 = 1;
LABEL_130:
  *(_DWORD *)(v36 + 244) |= 1u;
  v40 = *(uint64_t **)(v36 + 16);
  if (v40 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v37))
  {
    v41 = (std::string *)operator new();
    v41->__r_.__value_.__r.__words[0] = 0;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v36 + 16) = v41;
  }
  else
  {
    v41 = *(std::string **)(v36 + 16);
  }
  v4 = std::string::operator=(v41, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v39)
      goto LABEL_139;
  }
  else if (!v39)
  {
    goto LABEL_139;
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
LABEL_139:
  if (*((char *)this + 415) < 0)
  {
    if (!*((_QWORD *)this + 50))
      goto LABEL_162;
  }
  else if (!*((_BYTE *)this + 415))
  {
    goto LABEL_162;
  }
  v99 |= 2u;
  v42 = v98;
  if (!v98)
  {
    v42 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v42);
    v98 = v42;
  }
  v43 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v43)
    goto LABEL_150;
  if ((*((_BYTE *)this + 415) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 50))
      goto LABEL_148;
LABEL_150:
    if ((*((_BYTE *)this + 415) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 49), *((_QWORD *)this + 50));
      v45 = 0;
    }
    else
    {
      v45 = 0;
      __str = *(std::string *)((char *)this + 392);
    }
    goto LABEL_153;
  }
  if (!*((_BYTE *)this + 415))
    goto LABEL_150;
LABEL_148:
  std::operator+<char>();
  v43 = std::string::append(&v86, ")");
  v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  v45 = 1;
LABEL_153:
  *(_DWORD *)(v42 + 244) |= 2u;
  v46 = *(uint64_t **)(v42 + 24);
  if (v46 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v43))
  {
    v47 = (std::string *)operator new();
    v47->__r_.__value_.__r.__words[0] = 0;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v42 + 24) = v47;
  }
  else
  {
    v47 = *(std::string **)(v42 + 24);
  }
  v4 = std::string::operator=(v47, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v45)
      goto LABEL_162;
  }
  else if (!v45)
  {
    goto LABEL_162;
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
LABEL_162:
  if (*((char *)this + 439) < 0)
  {
    if (!*((_QWORD *)this + 53))
      goto LABEL_185;
  }
  else if (!*((_BYTE *)this + 439))
  {
    goto LABEL_185;
  }
  v99 |= 2u;
  v48 = v98;
  if (!v98)
  {
    v48 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v48);
    v98 = v48;
  }
  v49 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v49)
    goto LABEL_173;
  if ((*((_BYTE *)this + 439) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 53))
      goto LABEL_171;
LABEL_173:
    if ((*((_BYTE *)this + 439) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 52), *((_QWORD *)this + 53));
      v51 = 0;
    }
    else
    {
      v51 = 0;
      __str = *(std::string *)((char *)this + 416);
    }
    goto LABEL_176;
  }
  if (!*((_BYTE *)this + 439))
    goto LABEL_173;
LABEL_171:
  std::operator+<char>();
  v49 = std::string::append(&v85, ")");
  v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v50;
  v49->__r_.__value_.__l.__size_ = 0;
  v49->__r_.__value_.__r.__words[2] = 0;
  v49->__r_.__value_.__r.__words[0] = 0;
  v51 = 1;
LABEL_176:
  *(_DWORD *)(v48 + 244) |= 0x10u;
  v52 = *(uint64_t **)(v48 + 48);
  if (v52 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v49))
  {
    v53 = (std::string *)operator new();
    v53->__r_.__value_.__r.__words[0] = 0;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v48 + 48) = v53;
  }
  else
  {
    v53 = *(std::string **)(v48 + 48);
  }
  v4 = std::string::operator=(v53, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v51)
      goto LABEL_185;
  }
  else if (!v51)
  {
    goto LABEL_185;
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_185:
  if (*((char *)this + 463) < 0)
  {
    if (!*((_QWORD *)this + 56))
      goto LABEL_208;
  }
  else if (!*((_BYTE *)this + 463))
  {
    goto LABEL_208;
  }
  v99 |= 2u;
  v54 = v98;
  if (!v98)
  {
    v54 = operator new();
    v4 = (std::string *)addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)v54);
    v98 = v54;
  }
  v55 = (std::string *)addr_obj::Debugging::addChar((addr_obj::Debugging *)v4);
  if (!(_DWORD)v55)
    goto LABEL_196;
  if ((*((_BYTE *)this + 463) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 56))
      goto LABEL_194;
LABEL_196:
    if ((*((_BYTE *)this + 463) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)this + 55), *((_QWORD *)this + 56));
      v57 = 0;
    }
    else
    {
      v57 = 0;
      __str = *(std::string *)((char *)this + 440);
    }
    goto LABEL_199;
  }
  if (!*((_BYTE *)this + 463))
    goto LABEL_196;
LABEL_194:
  std::operator+<char>();
  v55 = std::string::append(&v84, ")");
  v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  v57 = 1;
LABEL_199:
  *(_DWORD *)(v54 + 244) |= 0x80u;
  v58 = *(uint64_t **)(v54 + 72);
  if (v58 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v55))
  {
    v59 = (std::string *)operator new();
    v59->__r_.__value_.__r.__words[0] = 0;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    *(_QWORD *)(v54 + 72) = v59;
  }
  else
  {
    v59 = *(std::string **)(v54 + 72);
  }
  std::string::operator=(v59, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v57)
      goto LABEL_208;
  }
  else if (!v57)
  {
    goto LABEL_208;
  }
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
LABEL_208:
  __p = 0uLL;
  v83 = 0;
  if ((AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)v93, (uint64_t)&__p) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
    v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"failed SerializeToString()", 26);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"; base64==", 10);
    (*(void (**)(void **__return_ptr, addr_obj::V0AddressObject *))(*(_QWORD *)this + 200))(v79, this);
    if ((v80 & 0x80u) == 0)
      v62 = v79;
    else
      v62 = (void **)v79[0];
    if ((v80 & 0x80u) == 0)
      v63 = v80;
    else
      v63 = (uint64_t)v79[1];
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"; library version: ",
            19);
    v66 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"11.3.0", 6);
    if ((char)v80 < 0)
      operator delete(v79[0]);
    if (addr_obj::Logger::isInitialized(v66))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v79);
      std::stringbuf::str();
      if ((v78 & 0x80u) == 0)
        v67 = v77;
      else
        v67 = (void **)v77[0];
      if ((v78 & 0x80u) == 0)
        v68 = v78;
      else
        v68 = (uint64_t)v77[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)v67, v68);
      if ((char)v78 < 0)
        operator delete(v77[0]);
      std::string::basic_string[abi:ne180100]<0>(v77, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v75, "getAddress");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v72, "");
      addr_obj::Logger::log(16, (uint64_t)v77, 126, (uint64_t)v75, (uint64_t)&v74, (uint64_t)v72);
      if (v73 < 0)
        operator delete(v72[0]);
      if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v74.__r_.__value_.__l.__data_);
      if (v76 < 0)
        operator delete(v75[0]);
      if ((char)v78 < 0)
        operator delete(v77[0]);
      std::ostringstream::~ostringstream((uint64_t)v79);
    }
    v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"; at ", 5);
    v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v79, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v79, (uint64_t)v77);
  }
  addr_obj::SerializedAddress::SerializedAddress(a2, &__p);
  if (SHIBYTE(v83) < 0)
    operator delete((void *)__p);
  addr_obj::geo3::Address::~Address((addr_obj::geo3::Address *)v93);
}

void sub_1887D0AB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  int v31;
  uint64_t v32;

  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
  {
    operator delete(a25);
    if ((v31 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v31)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v32);
    JUMPOUT(0x1887D0E04);
  }
  __cxa_free_exception(v30);
  goto LABEL_8;
}

void sub_1887D0B14()
{
  uint64_t v0;

  std::ostringstream::~ostringstream((uint64_t)&v0);
  JUMPOUT(0x1887D0E04);
}

void sub_1887D0C48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 113) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0C78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (SLOBYTE(STACK[0x2AF]) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0CA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (SLOBYTE(STACK[0x2C7]) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0CD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (SLOBYTE(STACK[0x2DF]) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0D08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 233) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0D38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 209) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0D68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 185) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0D98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 161) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0DC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  int v60;
  uint64_t v61;

  if (a60 < 0)
  {
    operator delete(__p);
    if ((v60 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v60)
  {
    goto LABEL_6;
  }
  if (*(char *)(v61 - 137) < 0)
    JUMPOUT(0x1887D0E10);
LABEL_6:
  JUMPOUT(0x1887D0E14);
}

void sub_1887D0DF8()
{
  JUMPOUT(0x1887D0E14);
}

void addr_obj::V0AddressObject::getSpokenName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void addr_obj::V0AddressObject::getSpokenAddress(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *addr_obj::V0AddressObject::getSpokenStructuredAddress@<X0>(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;

  v3 = addr_obj::emptyString(this);
  return addr_obj::SerializedAddress::SerializedAddress(a2, v3);
}

void addr_obj::V0AddressObject::getPhoneticName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

std::string *addr_obj::V0AddressObject::getPhoneticAddress@<X0>(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;

  v3 = addr_obj::emptyString(this);
  return addr_obj::SerializedAddress::SerializedAddress(a2, v3);
}

void addr_obj::V0AddressObject::getCountryCode(addr_obj::V0AddressObject *this@<X0>, uint64_t a2@<X8>)
{
  addr_obj::cleanCountryCode((uint64_t)this + 392, a2);
}

void addr_obj::V0AddressObject::getCountryName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::Debugging::stripDebug((uint64_t)this + 368, a2);
}

void addr_obj::V0AddressObject::getFullAddress(addr_obj::V0AddressObject *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  int v6;
  int v7;
  addr_obj::Localization *v8;
  std::string::size_type size;
  addr_obj::Localization *v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  int v15;
  addr_obj::Localization *v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  std::string v21;

  v6 = addr_obj::Debugging::addChar(this);
  v7 = v6;
  if (!a2)
  {
    if ((v6 & 1) == 0)
    {
      if ((*((_BYTE *)this + 271) & 0x80) == 0)
        goto LABEL_14;
      goto LABEL_18;
    }
    v15 = *((char *)this + 271);
    if (v15 < 0)
    {
      if (!*((_QWORD *)this + 32))
      {
LABEL_13:
        if ((v15 & 0x80) == 0)
        {
LABEL_14:
          *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 248);
          a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 33);
          return;
        }
LABEL_18:
        std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 31), *((_QWORD *)this + 32));
        return;
      }
    }
    else if (!*((_BYTE *)this + 271))
    {
      goto LABEL_13;
    }
    std::operator+<char>();
    v17 = std::string::append(&v21, "]");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    goto LABEL_21;
  }
  if (!v6)
    goto LABEL_15;
  v8 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V0AddressObject *))(*(_QWORD *)this + 152))(this);
  addr_obj::Formatting::joinLines(v8, (const std::string *)((char *)this + 248), &v21);
  size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v21.__r_.__value_.__l.__size_;
  if (size)
  {
    v10 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V0AddressObject *))(*(_QWORD *)this + 152))(this);
    addr_obj::Formatting::joinLines(v10, (const std::string *)((char *)this + 248), &v19);
    v11 = std::string::insert(&v19, 0, "[");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v20, "]");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
LABEL_15:
    v16 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V0AddressObject *))(*(_QWORD *)this + 152))(this);
    addr_obj::Formatting::joinLines(v16, (const std::string *)((char *)this + 248), a3);
    if (!v7)
      return;
  }
LABEL_21:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1887D115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void addr_obj::V0AddressObject::getShortAddress(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj *v4;
  addr_obj::Debugging *v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string *v8;
  __int128 v9;
  std::string __p;
  std::string v11;

  v4 = (addr_obj *)(*(uint64_t (**)(addr_obj::V0AddressObject *))(*(_QWORD *)this + 152))(this);
  (*(void (**)(std::string *__return_ptr, addr_obj::V0AddressObject *))(*(_QWORD *)this + 176))(&__p, this);
  addr_obj::Formatting::buildLegacyShortAddress(v4, (uint64_t)this + 272, (uint64_t)this + 296, (uint64_t)&__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v11.__r_.__value_.__l.__size_;
  if (size)
  {
    if (addr_obj::Debugging::addChar(v5)
      && ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v7 = HIBYTE(v11.__r_.__value_.__r.__words[2]))
        : (v7 = v11.__r_.__value_.__l.__size_),
          v7))
    {
      std::operator+<char>();
      v8 = std::string::append(&__p, "]");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      if ((*((_BYTE *)&v11.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        *a2 = v11;
        return;
      }
      std::string::__init_copy_ctor_external(a2, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    (*(void (**)(addr_obj::V0AddressObject *, uint64_t))(*(_QWORD *)this + 72))(this, 1);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1887D131C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::V0AddressObject::getAboveDoorShortAddress(addr_obj::V0AddressObject *this)
{
  return (*(uint64_t (**)(addr_obj::V0AddressObject *))(*(_QWORD *)this + 88))(this);
}

void addr_obj::V0AddressObject::getViewportName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v7;
  __int128 v8;

  v7 = addr_obj::emptyString(this);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
}

void addr_obj::V0AddressObject::getDisplayLocality(addr_obj::V0AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  char *v5;
  std::string *v6;
  __int128 v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  __int128 *v11;
  __int128 v12;
  std::string v13;

  if (*((char *)this + 319) < 0)
  {
    if (*((_QWORD *)this + 38))
      goto LABEL_3;
LABEL_9:
    if ((a2 & 1) != 0)
    {
      if (*((char *)this + 343) < 0)
      {
        if (*((_QWORD *)this + 41))
        {
LABEL_12:
          v5 = (char *)this + 320;
          if (addr_obj::Debugging::addChar(this))
          {
            if ((*((_BYTE *)this + 343) & 0x80) != 0)
            {
              if (*((_QWORD *)this + 41))
                goto LABEL_6;
            }
            else if (*((_BYTE *)this + 343))
            {
              goto LABEL_6;
            }
          }
          if ((*((_BYTE *)this + 343) & 0x80) == 0)
            goto LABEL_18;
          v8 = (const std::string::value_type *)*((_QWORD *)this + 40);
          v9 = *((_QWORD *)this + 41);
          goto LABEL_38;
        }
      }
      else if (*((_BYTE *)this + 343))
      {
        goto LABEL_12;
      }
      if (*((char *)this + 391) < 0)
      {
        if (*((_QWORD *)this + 47))
        {
LABEL_23:
          v5 = (char *)this + 368;
          if (addr_obj::Debugging::addChar(this))
          {
            if ((*((_BYTE *)this + 391) & 0x80) != 0 ? *((_QWORD *)this + 47) : *((unsigned __int8 *)this + 391))
              goto LABEL_6;
          }
          if ((*((_BYTE *)this + 391) & 0x80) == 0)
          {
LABEL_18:
            *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
            a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
            return;
          }
          v8 = (const std::string::value_type *)*((_QWORD *)this + 46);
          v9 = *((_QWORD *)this + 47);
LABEL_38:
          std::string::__init_copy_ctor_external(a3, v8, v9);
          return;
        }
      }
      else if (*((_BYTE *)this + 391))
      {
        goto LABEL_23;
      }
    }
    v11 = addr_obj::emptyString(this);
    if ((*((char *)v11 + 23) & 0x80000000) == 0)
    {
      v12 = *v11;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
      return;
    }
    v8 = *(const std::string::value_type **)v11;
    v9 = *((_QWORD *)v11 + 1);
    goto LABEL_38;
  }
  if (!*((_BYTE *)this + 319))
    goto LABEL_9;
LABEL_3:
  v5 = (char *)this + 296;
  if (!addr_obj::Debugging::addChar(this))
    goto LABEL_17;
  if ((*((_BYTE *)this + 319) & 0x80) == 0)
  {
    if (*((_BYTE *)this + 319))
      goto LABEL_6;
    goto LABEL_17;
  }
  if (!*((_QWORD *)this + 38))
  {
LABEL_17:
    if ((*((_BYTE *)this + 319) & 0x80) == 0)
      goto LABEL_18;
    v8 = (const std::string::value_type *)*((_QWORD *)this + 37);
    v9 = *((_QWORD *)this + 38);
    goto LABEL_38;
  }
LABEL_6:
  std::operator+<char>();
  v6 = std::string::append(&v13, "]");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1887D15BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V0AddressObject::getSpokenLocality(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void addr_obj::V0AddressObject::getParkingName(addr_obj::V0AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void addr_obj::V0AddressObject::toVCard(addr_obj::V0AddressObject *this)
{
  void *__p[2];
  char v3;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 16))(__p);
  addr_obj::buildVCard((uint64_t)__p, (uint64_t)this + 272, (uint64_t)this + 296, (uint64_t)this + 320, (uint64_t)this + 344, (uint64_t)this + 368);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1887D16F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void **a22,uint64_t __p,uint64_t a24,void *__pa,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  addr_obj::AddressObjectBase *v30;
  void *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  addr_obj::Logger *v39;
  addr_obj::Logger *v40;
  _QWORD *v41;
  _QWORD *v42;
  const char *v43;
  size_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void **v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void **v51;
  uint64_t v52;

  if (a30 < 0)
    operator delete(__pa);
  if (a2 == 3)
  {
    v33 = __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__pa);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__pa, (uint64_t)"; ", 2);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"toVCard", 7);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" failed for ", 12);
    addr_obj::AddressObjectBase::asBase64String(v30, &a22);
    if (a24 >= 0)
      v37 = (void **)&a22;
    else
      v37 = a22;
    if (a24 >= 0)
      v38 = HIBYTE(a24);
    else
      v38 = __p;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v37, v38);
    if (SHIBYTE(a24) < 0)
      operator delete(a22);
    std::stringbuf::str();
    addr_obj::AddressObjectException::operator+=(v33, &a22);
    if (SHIBYTE(a24) < 0)
      operator delete(a22);
    std::ostringstream::~ostringstream((uint64_t)&__pa);
    __cxa_rethrow();
  }
  v39 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v40 = v39;
    if (addr_obj::Logger::isInitialized(v39))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__pa);
      v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__pa, (uint64_t)"toVCard", 7);
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" failed: ", 9);
      v43 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v40 + 16))(v40);
      v44 = strlen(v43);
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v43, v44);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"; for ", 6);
      addr_obj::AddressObjectBase::asBase64String(v30, &a22);
      if (a24 >= 0)
        v47 = (void **)&a22;
      else
        v47 = a22;
      if (a24 >= 0)
        v48 = HIBYTE(a24);
      else
        v48 = __p;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v47, v48);
      if (SHIBYTE(a24) < 0)
        operator delete(a22);
      std::string::basic_string[abi:ne180100]<0>(&a22, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a18, "toVCard");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a9, "");
      addr_obj::Logger::log(16, (uint64_t)&a22, 241, (uint64_t)&a18, (uint64_t)&a15, (uint64_t)&a9);
      if (a14 < 0)
        operator delete(a9);
      if (SHIBYTE(a17) < 0)
        operator delete(a15);
      if (SHIBYTE(a20) < 0)
        operator delete(a18);
      if (SHIBYTE(a24) < 0)
        operator delete(a22);
      std::ostringstream::~ostringstream((uint64_t)&__pa);
    }
    __cxa_rethrow();
  }
  if (addr_obj::Logger::isInitialized(v39))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__pa);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__pa, (uint64_t)"toVCard", 7);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" failed for ", 12);
    addr_obj::AddressObjectBase::asBase64String(v30, &a22);
    if (a24 >= 0)
      v51 = (void **)&a22;
    else
      v51 = a22;
    if (a24 >= 0)
      v52 = HIBYTE(a24);
    else
      v52 = __p;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
    if (SHIBYTE(a24) < 0)
      operator delete(a22);
    std::string::basic_string[abi:ne180100]<0>(&a22, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V0AddressObject.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a18, "toVCard");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&a9, "");
    addr_obj::Logger::log(16, (uint64_t)&a22, 241, (uint64_t)&a18, (uint64_t)&a15, (uint64_t)&a9);
    if (a14 < 0)
      operator delete(a9);
    if (SHIBYTE(a17) < 0)
      operator delete(a15);
    if (SHIBYTE(a20) < 0)
      operator delete(a18);
    if (SHIBYTE(a24) < 0)
      operator delete(a22);
    std::ostringstream::~ostringstream((uint64_t)&__pa);
  }
  __cxa_rethrow();
}

void sub_1887D2158(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

std::string *addr_obj::V0AddressObject::toProto(addr_obj::V0AddressObject *this, addr_obj::AddressObjectProto *a2)
{
  std::string *result;
  uint64_t v5;
  uint64_t *v6;
  std::string *v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t *v10;
  std::string *v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t *v14;
  std::string *v15;
  uint64_t *v16;
  std::string *v17;
  uint64_t *v18;
  std::string *v19;
  uint64_t *v20;
  std::string *v21;
  const std::string *v22;
  uint64_t *v23;
  std::string *v24;

  result = (std::string *)addr_obj::AddressObjectBase::toProto(this, a2);
  *((_DWORD *)a2 + 22) |= 0x10u;
  v5 = *((_QWORD *)a2 + 7);
  if (!v5)
  {
    v5 = operator new();
    result = (std::string *)addr_obj::V0AddressObjectProto::V0AddressObjectProto((addr_obj::V0AddressObjectProto *)v5);
    *((_QWORD *)a2 + 7) = v5;
  }
  if (*((char *)this + 271) < 0)
  {
    if (!*((_QWORD *)this + 32))
      goto LABEL_11;
  }
  else if (!*((_BYTE *)this + 271))
  {
    goto LABEL_11;
  }
  *(_DWORD *)(v5 + 92) |= 1u;
  v6 = *(uint64_t **)(v5 + 16);
  if (v6 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v7 = (std::string *)operator new();
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 16) = v7;
  }
  else
  {
    v7 = *(std::string **)(v5 + 16);
  }
  result = std::string::operator=(v7, (const std::string *)((char *)this + 248));
LABEL_11:
  if (*((char *)this + 295) < 0)
  {
    if (!*((_QWORD *)this + 35))
      goto LABEL_19;
  }
  else if (!*((_BYTE *)this + 295))
  {
    goto LABEL_19;
  }
  *(_DWORD *)(v5 + 92) |= 2u;
  v8 = *(uint64_t **)(v5 + 24);
  if (v8 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v9 = (std::string *)operator new();
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 24) = v9;
  }
  else
  {
    v9 = *(std::string **)(v5 + 24);
  }
  result = std::string::operator=(v9, (const std::string *)((char *)this + 272));
LABEL_19:
  if (*((char *)this + 319) < 0)
  {
    if (!*((_QWORD *)this + 38))
      goto LABEL_27;
  }
  else if (!*((_BYTE *)this + 319))
  {
    goto LABEL_27;
  }
  *(_DWORD *)(v5 + 92) |= 4u;
  v10 = *(uint64_t **)(v5 + 32);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 32) = v11;
  }
  else
  {
    v11 = *(std::string **)(v5 + 32);
  }
  result = std::string::operator=(v11, (const std::string *)((char *)this + 296));
LABEL_27:
  if (*((char *)this + 343) < 0)
  {
    if (!*((_QWORD *)this + 41))
      goto LABEL_35;
  }
  else if (!*((_BYTE *)this + 343))
  {
    goto LABEL_35;
  }
  *(_DWORD *)(v5 + 92) |= 8u;
  v12 = *(uint64_t **)(v5 + 40);
  if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v13 = (std::string *)operator new();
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 40) = v13;
  }
  else
  {
    v13 = *(std::string **)(v5 + 40);
  }
  result = std::string::operator=(v13, (const std::string *)((char *)this + 320));
LABEL_35:
  if (*((char *)this + 367) < 0)
  {
    if (!*((_QWORD *)this + 44))
      goto LABEL_43;
  }
  else if (!*((_BYTE *)this + 367))
  {
    goto LABEL_43;
  }
  *(_DWORD *)(v5 + 92) |= 0x10u;
  v14 = *(uint64_t **)(v5 + 48);
  if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v15 = (std::string *)operator new();
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 48) = v15;
  }
  else
  {
    v15 = *(std::string **)(v5 + 48);
  }
  result = std::string::operator=(v15, (const std::string *)((char *)this + 344));
LABEL_43:
  if (*((char *)this + 391) < 0)
  {
    if (!*((_QWORD *)this + 47))
      goto LABEL_51;
  }
  else if (!*((_BYTE *)this + 391))
  {
    goto LABEL_51;
  }
  *(_DWORD *)(v5 + 92) |= 0x20u;
  v16 = *(uint64_t **)(v5 + 56);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 56) = v17;
  }
  else
  {
    v17 = *(std::string **)(v5 + 56);
  }
  result = std::string::operator=(v17, (const std::string *)((char *)this + 368));
LABEL_51:
  if (*((char *)this + 415) < 0)
  {
    if (!*((_QWORD *)this + 50))
      goto LABEL_59;
  }
  else if (!*((_BYTE *)this + 415))
  {
    goto LABEL_59;
  }
  *(_DWORD *)(v5 + 92) |= 0x40u;
  v18 = *(uint64_t **)(v5 + 64);
  if (v18 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v19 = (std::string *)operator new();
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 64) = v19;
  }
  else
  {
    v19 = *(std::string **)(v5 + 64);
  }
  result = std::string::operator=(v19, (const std::string *)((char *)this + 392));
LABEL_59:
  if (*((char *)this + 439) < 0)
  {
    if (!*((_QWORD *)this + 53))
      goto LABEL_67;
  }
  else if (!*((_BYTE *)this + 439))
  {
    goto LABEL_67;
  }
  *(_DWORD *)(v5 + 92) |= 0x80u;
  v20 = *(uint64_t **)(v5 + 72);
  if (v20 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v21 = (std::string *)operator new();
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 72) = v21;
  }
  else
  {
    v21 = *(std::string **)(v5 + 72);
  }
  result = std::string::operator=(v21, (const std::string *)((char *)this + 416));
LABEL_67:
  if (*((char *)this + 463) < 0)
  {
    if (!*((_QWORD *)this + 56))
      return result;
  }
  else if (!*((_BYTE *)this + 463))
  {
    return result;
  }
  v22 = (const std::string *)((char *)this + 440);
  *(_DWORD *)(v5 + 92) |= 0x100u;
  v23 = *(uint64_t **)(v5 + 80);
  if (v23 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)result))
  {
    v24 = (std::string *)operator new();
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(v5 + 80) = v24;
  }
  else
  {
    v24 = *(std::string **)(v5 + 80);
  }
  return std::string::operator=(v24, v22);
}

void sub_1887D2600(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40892FDF1FLL);
  _Unwind_Resume(a1);
}

void addr_obj::V0AddressObject::~V0AddressObject(void **this)
{
  addr_obj::V0AddressObject::~V0AddressObject(this);
  JUMPOUT(0x18D76437CLL);
}

{
  *this = &off_1E1BF9270;
  if (*((char *)this + 463) < 0)
    operator delete(this[55]);
  if (*((char *)this + 439) < 0)
    operator delete(this[52]);
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  addr_obj::AddressObjectBase::~AddressObjectBase(this);
}

uint64_t addr_obj::V1AddressObject::V1AddressObject(uint64_t a1, __int128 *a2, __int128 **a3, std::string::size_type *a4, const addr_obj::VenueInfoProto *a5, int *a6)
{
  _QWORD *v9;
  addr_obj::VenueInfo *v10;

  v9 = (_QWORD *)addr_obj::AddressObjectBase::AddressObjectBase(a1, a6, a2, a3);
  *v9 = &off_1E1BF93B8;
  v9[31] = 0;
  v9[32] = 0;
  v9[33] = 0;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(v9 + 34));
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)(a1 + 384));
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(a1 + 656));
  v10 = (addr_obj::VenueInfo *)operator new();
  addr_obj::VenueInfo::VenueInfo(v10, a5);
  *(_QWORD *)(a1 + 720) = v10;
  addr_obj::V1AddressObject::init((addr_obj::V1AddressObject *)a1, a4);
  return a1;
}

void sub_1887D27F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  addr_obj::geo3::Address *v2;
  addr_obj::geo3::StructuredAddress *v3;
  addr_obj::geo3::Address *v4;
  void ****v5;
  void **v6;
  void **v7;

  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](v5, 0);
  addr_obj::geo3::Address::~Address(v4);
  if (*(char *)(v1 + 655) < 0)
    operator delete(*v7);
  addr_obj::geo3::StructuredAddress::~StructuredAddress(v3);
  if (*(char *)(v1 + 383) < 0)
    operator delete(*(void **)(v1 + 360));
  if (*(char *)(v1 + 359) < 0)
    operator delete(*(void **)(v1 + 336));
  addr_obj::geo3::Address::~Address(v2);
  if (*(char *)(v1 + 271) < 0)
    operator delete(*v6);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1887D28A4()
{
  JUMPOUT(0x1887D2884);
}

uint64_t addr_obj::V1AddressObject::V1AddressObject(uint64_t a1, int *a2, __int128 *a3, __int128 **a4, const addr_obj::VenueInfo *a5, uint64_t a6, addr_obj::Localization *a7, const std::string *a8, std::string *a9, addr_obj::Localization *a10, std::string *a11, addr_obj::Localization *a12)
{
  _QWORD *v17;
  std::string *v18;
  addr_obj::geo3::Address *v19;
  addr_obj::VenueInfo *v20;
  addr_obj::Debugging *v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  uint64_t DisplayLanguage;
  const char *v27;
  uint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  addr_obj::Logger *v33;
  void **v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  std::runtime_error *exception;
  void *v39[2];
  char v40;
  std::string v41;
  void *v42[2];
  char v43;
  void *__p[2];
  unsigned __int8 v45;
  std::string v46;
  std::string __str;

  v17 = (_QWORD *)addr_obj::AddressObjectBase::AddressObjectBase(a1, a2, a3, a4);
  *v17 = &off_1E1BF93B8;
  v17[31] = 0;
  v18 = (std::string *)(v17 + 31);
  v17[32] = 0;
  v17[33] = 0;
  v19 = (addr_obj::geo3::Address *)(v17 + 34);
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(v17 + 34));
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  addr_obj::geo3::StructuredAddress::StructuredAddress((addr_obj::geo3::StructuredAddress *)(a1 + 384));
  *(_QWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  addr_obj::geo3::Address::Address((addr_obj::geo3::Address *)(a1 + 656));
  v20 = (addr_obj::VenueInfo *)operator new();
  v21 = (addr_obj::Debugging *)addr_obj::VenueInfo::VenueInfo(v20, a5);
  *(_QWORD *)(a1 + 720) = v20;
  if (addr_obj::Debugging::addChar(v21)
    && (*(char *)(a6 + 23) >= 0 ? (v22 = *(unsigned __int8 *)(a6 + 23)) : (v22 = *(_QWORD *)(a6 + 8)), v22))
  {
    std::operator+<char>();
    v23 = std::string::append(&v46, "}");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string::operator=(v18, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)v46.__r_.__value_.__r.__words[0];
LABEL_15:
      operator delete(v25);
    }
  }
  else
  {
    if ((*(_BYTE *)(a6 + 23) & 0x80) != 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      __str = *(std::string *)a6;
    std::string::operator=(v18, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)__str.__r_.__value_.__r.__words[0];
      goto LABEL_15;
    }
  }
  addr_obj::parse(a7, (uint64_t)v19);
  DisplayLanguage = addr_obj::Localization::getDisplayLanguage(a7);
  v28 = *(unsigned __int8 *)(DisplayLanguage + 23);
  if ((v28 & 0x80u) != 0)
    v28 = *(_QWORD *)(DisplayLanguage + 8);
  if (v28 && *(int *)(a1 + 296) <= 0)
  {
    addr_obj::geo3::Address::Clear(v19);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__str);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"there are no formatted address lines in ", 40);
    v31 = addr_obj::operator<<(v30, (unsigned __int8 *)a7);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"; library version: ",
            19);
    v33 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v33))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v46);
      std::stringbuf::str();
      if ((v45 & 0x80u) == 0)
        v34 = __p;
      else
        v34 = (void **)__p[0];
      if ((v45 & 0x80u) == 0)
        v35 = v45;
      else
        v35 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)v34, v35);
      if ((char)v45 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(v42, "V1AddressObject");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 109, (uint64_t)v42, (uint64_t)&v41, (uint64_t)v39);
      if (v40 < 0)
        operator delete(v39[0]);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v41.__r_.__value_.__l.__data_);
      if (v43 < 0)
        operator delete(v42[0]);
      if ((char)v45 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)&v46);
    }
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__str, (uint64_t)"; at ", 5);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp", 89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(&v46, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)&v46.__r_.__value_.__l.__data_, (uint64_t)__p);
  }
  addr_obj::brace(v19, (addr_obj::geo3::Address *)"{}", v27);
  std::string::operator=((std::string *)(a1 + 336), a8);
  std::string::operator=((std::string *)(a1 + 360), a9);
  addr_obj::parse(a10, a1 + 384);
  std::string::operator=((std::string *)(a1 + 632), a11);
  addr_obj::parse(a12, a1 + 656);
  return a1;
}

{
  return addr_obj::V1AddressObject::V1AddressObject(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_1887D3010(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;
  uint64_t v36;

  if (a28 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v35 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v35)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v36);
    JUMPOUT(0x1887D3114);
  }
  __cxa_free_exception(v34);
  goto LABEL_8;
}

void sub_1887D306C()
{
  uint64_t v0;

  std::ostringstream::~ostringstream((uint64_t)&v0);
  JUMPOUT(0x1887D3114);
}

void sub_1887D3090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;
  void **v32;
  addr_obj::geo3::Address *v33;
  void **v34;
  addr_obj::geo3::Address *v35;
  void ****v36;
  void **v38;
  void **v39;
  addr_obj::geo3::StructuredAddress *v40;

  std::unique_ptr<addr_obj::VenueInfo const>::reset[abi:ne180100](v36, 0);
  addr_obj::geo3::Address::~Address(v35);
  if (*(char *)(v31 + 655) < 0)
    operator delete(*v34);
  addr_obj::geo3::StructuredAddress::~StructuredAddress(v40);
  if (*(char *)(v31 + 383) < 0)
    operator delete(*v38);
  if (*(char *)(v31 + 359) < 0)
    operator delete(*v39);
  addr_obj::geo3::Address::~Address(v33);
  if (*(char *)(v31 + 271) < 0)
    operator delete(*v32);
  addr_obj::AddressObjectBase::~AddressObjectBase((void **)v31);
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObject::getName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  const std::string *v7;
  int v8;
  std::string::size_type v9;
  std::string::size_type size;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string::size_type v16;
  __int128 *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string v21;
  std::string v22;
  std::string v23;
  char v24;

  if (*((char *)this + 271) < 0)
  {
    if (*((_QWORD *)this + 32))
      goto LABEL_3;
LABEL_8:
    if (*((int *)this + 74) >= 1)
    {
      v7 = (const std::string *)**((_QWORD **)this + 36);
      v8 = addr_obj::Debugging::addChar(this);
      if (!v8)
        goto LABEL_17;
      v9 = std::string::find(v7, 10, 0);
      std::string::basic_string(&v23, v7, 0, v9, (std::allocator<char> *)&v22);
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v23.__r_.__value_.__l.__size_;
      if (size)
      {
        v11 = std::string::find(v7, 10, 0);
        std::string::basic_string(&v21, v7, 0, v11, (std::allocator<char> *)&v24);
        v12 = std::string::insert(&v21, 0, "(");
        v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
        v22.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v13;
        v12->__r_.__value_.__l.__size_ = 0;
        v12->__r_.__value_.__r.__words[2] = 0;
        v12->__r_.__value_.__r.__words[0] = 0;
        v14 = std::string::append(&v22, ")");
        v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v15;
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v21.__r_.__value_.__l.__data_);
      }
      else
      {
LABEL_17:
        v16 = std::string::find(v7, 10, 0);
        std::string::basic_string(a2, v7, 0, v16, (std::allocator<char> *)&v22);
        if (!v8)
          return;
      }
      goto LABEL_18;
    }
    v17 = addr_obj::emptyString(this);
    if ((*((char *)v17 + 23) & 0x80000000) == 0)
    {
      v18 = *v17;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v18;
      return;
    }
    v19 = *(const std::string::value_type **)v17;
    v20 = *((_QWORD *)v17 + 1);
LABEL_28:
    std::string::__init_copy_ctor_external(a2, v19, v20);
    return;
  }
  if (!*((_BYTE *)this + 271))
    goto LABEL_8;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 248);
  if (!addr_obj::Debugging::addChar(this))
    goto LABEL_23;
  if ((*((_BYTE *)this + 271) & 0x80) != 0)
  {
    if (*((_QWORD *)this + 32))
      goto LABEL_6;
    goto LABEL_23;
  }
  if (!*((_BYTE *)this + 271))
  {
LABEL_23:
    if ((*((_BYTE *)this + 271) & 0x80) == 0)
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 33);
      return;
    }
    v19 = (const std::string::value_type *)*((_QWORD *)this + 31);
    v20 = *((_QWORD *)this + 32);
    goto LABEL_28;
  }
LABEL_6:
  std::operator+<char>();
  v5 = std::string::append(&v23, ")");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
LABEL_18:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1887D33E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::V1AddressObject::getAddressProto(addr_obj::V1AddressObject *this)
{
  return (uint64_t)this + 272;
}

void addr_obj::V1AddressObject::getSpokenName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 359) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 42), *((_QWORD *)this + 43));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 21);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 44);
  }
}

void addr_obj::V1AddressObject::getSpokenAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 383) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 45), *((_QWORD *)this + 46));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 360);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 47);
  }
}

void addr_obj::V1AddressObject::getSpokenStructuredAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::serialize((addr_obj::V1AddressObject *)((char *)this + 384), this, a2);
}

void addr_obj::V1AddressObject::getPhoneticName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 655) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 79), *((_QWORD *)this + 80));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 632);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 81);
  }
}

void addr_obj::V1AddressObject::getPhoneticAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::serialize((addr_obj::V1AddressObject *)((char *)this + 656), this, a2);
}

void addr_obj::V1AddressObject::getCountryName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 39);
  if (!v3)
    v3 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(this) + 40);
  addr_obj::Debugging::stripDebug(*(_QWORD *)(v3 + 16), a2);
}

void addr_obj::V1AddressObject::getCountryCode(addr_obj::V1AddressObject *this@<X0>, uint64_t a2@<X8>)
{
  addr_obj *v3;

  v3 = (addr_obj *)*((_QWORD *)this + 39);
  if (!v3)
    v3 = *(addr_obj **)(addr_obj::geo3::Address::default_instance_(0) + 40);
  addr_obj::getCountryCode(v3, a2);
}

void *addr_obj::V1AddressObject::getVenueInfo(addr_obj::V1AddressObject *this)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_1EDF501D8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF501D8))
  {
    addr_obj::VenueInfo::VenueInfo((addr_obj::VenueInfo *)&unk_1EDF501B8);
    __cxa_guard_release(&qword_1EDF501D8);
  }
  if (*((_QWORD *)this + 90))
    return (void *)*((_QWORD *)this + 90);
  else
    return &unk_1EDF501B8;
}

void sub_1887D35C8(void *a1)
{
  __cxa_guard_abort(&qword_1EDF501D8);
  __cxa_call_unexpected(a1);
}

void addr_obj::V1AddressObject::getFullAddress(addr_obj::V1AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  addr_obj::V1AddressObject *v4;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  int v10;
  addr_obj::Localization *v11;
  std::string::size_type size;
  addr_obj::Localization *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  addr_obj::Localization *v24;
  void *v25;
  void *__p[2];
  char v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  uint64_t v32;
  std::string *v33;
  unint64_t v34;

  v4 = this;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  if (*((int *)this + 74) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*((_QWORD *)v4 + 36) + 8 * v7);
      if ((unint64_t)v6 >= v34)
      {
        this = (addr_obj::V1AddressObject *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v32, (__int128 *)v8);
        v6 = (std::string *)this;
      }
      else
      {
        if (*(char *)(v8 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v8, *(_QWORD *)(v8 + 8));
        }
        else
        {
          v9 = *(_OWORD *)v8;
          v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 16);
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v9;
        }
        ++v6;
      }
      v33 = v6;
      ++v7;
    }
    while (v7 < *((int *)v4 + 74));
  }
  if ((a2 & 1) != 0)
  {
    v10 = addr_obj::Debugging::addChar(this);
    if (!v10)
      goto LABEL_29;
    v11 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V1AddressObject *))(*(_QWORD *)v4 + 152))(v4);
    addr_obj::Formatting::joinLines(v11, (addr_obj *)&v32, &v31);
    size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__r_.__value_.__l.__size_;
    if (size)
    {
      v13 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V1AddressObject *))(*(_QWORD *)v4 + 152))(v4);
      addr_obj::Formatting::joinLines(v13, (addr_obj *)&v32, &v29);
      v14 = std::string::insert(&v29, 0, "[");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      v16 = std::string::append(&v30, "]");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
    }
    else
    {
LABEL_29:
      v24 = (addr_obj::Localization *)(*(uint64_t (**)(addr_obj::V1AddressObject *))(*(_QWORD *)v4 + 152))(v4);
      addr_obj::Formatting::joinLines(v24, (addr_obj *)&v32, a3);
      if (!v10)
        goto LABEL_41;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_40:
      operator delete(v25);
    }
  }
  else
  {
    v18 = addr_obj::Debugging::addChar(this);
    if (!v18)
      goto LABEL_32;
    std::string::basic_string[abi:ne180100]<0>(&v30, "\n");
    addr_obj::Formatting::joinLines((addr_obj *)&v32, (const void **)&v30.__r_.__value_.__l.__data_, &v31);
    v19 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = v31.__r_.__value_.__l.__size_;
    if (v19)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "\n");
      addr_obj::Formatting::joinLines((addr_obj *)&v32, (const void **)__p, &v28);
      v20 = std::string::insert(&v28, 0, "[");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      v22 = std::string::append(&v29, "]");
      v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v23;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(__p[0]);
    }
    else
    {
LABEL_32:
      std::string::basic_string[abi:ne180100]<0>(&v29, "\n");
      addr_obj::Formatting::joinLines((addr_obj *)&v32, (const void **)&v29.__r_.__value_.__l.__data_, a3);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if (!v18)
          goto LABEL_41;
      }
      else if (!v18)
      {
        goto LABEL_41;
      }
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      v25 = (void *)v30.__r_.__value_.__r.__words[0];
      goto LABEL_40;
    }
  }
LABEL_41:
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
}

void sub_1887D3900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v33 - 73) < 0)
    operator delete(*(void **)(v33 - 96));
  if (a33 < 0)
    operator delete(a28);
  __p = (void *)(v33 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObject::getShortAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::geo3::Address *v4;
  addr_obj *v5;
  uint64_t v6;
  uint64_t v7;
  addr_obj::Debugging *v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  void *__p[2];
  char v14;
  std::string v15;
  std::string v16;

  v4 = (addr_obj::geo3::Address *)(*(uint64_t (**)(addr_obj::V1AddressObject *))(*(_QWORD *)this + 152))(this);
  v5 = v4;
  v6 = *((_QWORD *)this + 39);
  if (!v6)
    v6 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v4) + 40);
  v7 = *(_QWORD *)(v6 + 104);
  (*(void (**)(std::string *__return_ptr, addr_obj::V1AddressObject *, _QWORD))(*(_QWORD *)this + 136))(&v15, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *))(*(_QWORD *)this + 176))(__p, this);
  addr_obj::Formatting::buildLegacyShortAddress(v5, v7, (uint64_t)&v15, (uint64_t)__p, &v16);
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v16.__r_.__value_.__l.__size_;
  if (size)
  {
    if (addr_obj::Debugging::addChar(v8)
      && ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v10 = HIBYTE(v16.__r_.__value_.__r.__words[2]))
        : (v10 = v16.__r_.__value_.__l.__size_),
          v10))
    {
      std::operator+<char>();
      v11 = std::string::append(&v15, "]");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
    else
    {
      if ((*((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        *a2 = v16;
        return;
      }
      std::string::__init_copy_ctor_external(a2, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    (*(void (**)(addr_obj::V1AddressObject *, uint64_t))(*(_QWORD *)this + 72))(this, 1);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1887D3BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V1AddressObject::getAboveDoorShortAddress(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  addr_obj::geo3::Address *v4;
  addr_obj *v5;
  uint64_t v6;
  uint64_t v7;
  addr_obj::Debugging *v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  void *__p[2];
  char v14;
  std::string v15;
  std::string v16;

  v4 = (addr_obj::geo3::Address *)(*(uint64_t (**)(addr_obj::V1AddressObject *))(*(_QWORD *)this + 152))(this);
  v5 = v4;
  v6 = *((_QWORD *)this + 39);
  if (!v6)
    v6 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v4) + 40);
  v7 = *(_QWORD *)(v6 + 88);
  (*(void (**)(std::string *__return_ptr, addr_obj::V1AddressObject *, _QWORD))(*(_QWORD *)this + 136))(&v15, this, 0);
  (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *))(*(_QWORD *)this + 176))(__p, this);
  addr_obj::Formatting::buildLegacyShortAddress(v5, v7, (uint64_t)&v15, (uint64_t)__p, &v16);
  if (v14 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v16.__r_.__value_.__l.__size_;
  if (size)
  {
    if (addr_obj::Debugging::addChar(v8)
      && ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v10 = HIBYTE(v16.__r_.__value_.__r.__words[2]))
        : (v10 = v16.__r_.__value_.__l.__size_),
          v10))
    {
      std::operator+<char>();
      v11 = std::string::append(&v15, "]");
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
    }
    else
    {
      if ((*((_BYTE *)&v16.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        *a2 = v16;
        return;
      }
      std::string::__init_copy_ctor_external(a2, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    (*(void (**)(addr_obj::V1AddressObject *))(*(_QWORD *)this + 88))(this);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1887D3D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V1AddressObject::getCityAndAbove(addr_obj::V1AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  addr_obj::geo3::Address *v6;
  unint64_t v7;
  uint64_t v8;
  addr_obj::Debugging *v9;
  uint64_t v10;
  std::string *v11;
  __int128 v12;
  std::string __p;
  _BYTE v14[8];
  __int128 v15;
  int64_t v16;
  void *v17[2];
  unsigned __int8 v18;

  v6 = (addr_obj::geo3::Address *)(*(_QWORD *(**)(void **__return_ptr, addr_obj::V1AddressObject *, uint64_t))(*(_QWORD *)this + 72))(v17, this, 1);
  v7 = v18;
  if ((v18 & 0x80u) != 0)
    v7 = (unint64_t)v17[1];
  if (!v7 || (*((_BYTE *)this + 328) & 2) == 0)
    goto LABEL_20;
  v8 = *((_QWORD *)this + 39);
  if (!v8)
    v8 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v6) + 40);
  if (!addr_obj::Formatting::verifyFormattedAddressInStructuredAddress((uint64_t)v17, v8))
    goto LABEL_20;
  addr_obj::Formatting::stripForCityAndAbove((uint64_t)v17, v8, (uint64_t)v14);
  if (!v14[0])
  {
    if (SHIBYTE(v16) < 0)
      operator delete((void *)v15);
LABEL_20:
    addr_obj::AddressObjectBase::getCityAndAbove(this, a2, a3);
    goto LABEL_21;
  }
  if (addr_obj::Debugging::addChar(v9)
    && (v16 >= 0 ? (v10 = HIBYTE(v16)) : (v10 = *((_QWORD *)&v15 + 1)), v10))
  {
    std::operator+<char>();
    v11 = std::string::append(&__p, "]");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else if (v16 < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v15, *((std::string::size_type *)&v15 + 1));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v15;
    a3->__r_.__value_.__r.__words[2] = v16;
  }
  if (SHIBYTE(v16) < 0)
    operator delete((void *)v15);
LABEL_21:
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_1887D3F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void addr_obj::V1AddressObject::getViewportName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v7;
  __int128 v8;

  v7 = addr_obj::emptyString(this);
  if (*((char *)v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
  }
  else
  {
    v8 = *v7;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v8;
  }
}

void addr_obj::V1AddressObject::getDisplayLocality(addr_obj::V1AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  std::string v4;
  void *__p;
  char v6;

  addr_obj::V1AddressObject::getLocalities(this, a2, &v4);
  *a3 = v4;
  memset(&v4, 0, sizeof(v4));
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void addr_obj::V1AddressObject::getLocalities(addr_obj::V1AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  addr_obj::V1AddressObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  addr_obj::geo3::Address *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  addr_obj::geo3::Address *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  __int128 v25;
  int v26;
  __int128 *v27;
  __int128 v28;
  addr_obj::geo3::Address *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  __int128 *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  __int128 *v39;
  __int128 v40;
  std::string v41;
  std::string v42;

  if ((*((_BYTE *)this + 328) & 2) == 0)
    goto LABEL_34;
  v5 = this;
  v6 = *((_QWORD *)this + 39);
  if (!v6)
  {
    this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
    v6 = *((_QWORD *)this + 5);
  }
  if ((*(_BYTE *)(v6 + 244) & 0x20) != 0)
  {
    v14 = *((_QWORD *)v5 + 39);
    if (!v14)
    {
      this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
      v14 = *((_QWORD *)this + 5);
    }
    v15 = *(_QWORD *)(v14 + 56);
    if (*(char *)(v15 + 23) < 0)
    {
      if (!*(_QWORD *)(v15 + 8))
        goto LABEL_5;
    }
    else if (!*(_BYTE *)(v15 + 23))
    {
      goto LABEL_5;
    }
    v16 = (addr_obj::geo3::Address *)addr_obj::Debugging::addChar(this);
    v17 = *((_QWORD *)v5 + 39);
    if (!(_DWORD)v16)
      goto LABEL_45;
    if (!v17)
    {
      v16 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(v16);
      v17 = *((_QWORD *)v16 + 5);
    }
    v18 = *(_QWORD *)(v17 + 56);
    v19 = *(char *)(v18 + 23) < 0 ? *(_QWORD *)(v18 + 8) : *(unsigned __int8 *)(v18 + 23);
    v17 = *((_QWORD *)v5 + 39);
    if (v19)
    {
      if (!v17)
        addr_obj::geo3::Address::default_instance_(v16);
      std::operator+<char>();
      v24 = std::string::append(&v41, "]");
      v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = 1;
    }
    else
    {
LABEL_45:
      if (!v17)
        v17 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v16) + 40);
      v27 = *(__int128 **)(v17 + 56);
      if (*((char *)v27 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
        v26 = 0;
      }
      else
      {
        v26 = 0;
        v28 = *v27;
        v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v28;
      }
    }
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string const&,0>(a3, (__int128 *)&v42, *((__int128 **)v5 + 55));
    goto LABEL_79;
  }
LABEL_5:
  if ((a2 & 1) == 0)
    goto LABEL_34;
  v7 = *((_QWORD *)v5 + 39);
  v8 = v7;
  if (!v7)
  {
    this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
    v8 = *((_QWORD *)this + 5);
    v7 = *((_QWORD *)v5 + 39);
  }
  if ((*(_BYTE *)(v8 + 244) & 4) == 0)
  {
LABEL_31:
    if (!v7)
    {
      this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
      v7 = *((_QWORD *)this + 5);
    }
    if ((*(_BYTE *)(v7 + 244) & 1) == 0)
      goto LABEL_34;
    v22 = *((_QWORD *)v5 + 39);
    if (!v22)
    {
      this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
      v22 = *((_QWORD *)this + 5);
    }
    v23 = *(_QWORD *)(v22 + 16);
    if ((*(char *)(v23 + 23) & 0x80000000) == 0)
    {
      if (!*(_BYTE *)(v23 + 23))
        goto LABEL_34;
LABEL_52:
      v29 = (addr_obj::geo3::Address *)addr_obj::Debugging::addChar(this);
      v30 = *((_QWORD *)v5 + 39);
      if (!(_DWORD)v29)
        goto LABEL_73;
      if (!v30)
      {
        v29 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(v29);
        v30 = *((_QWORD *)v29 + 5);
      }
      v31 = *(_QWORD *)(v30 + 16);
      v32 = *(char *)(v31 + 23) < 0 ? *(_QWORD *)(v31 + 8) : *(unsigned __int8 *)(v31 + 23);
      v30 = *((_QWORD *)v5 + 39);
      if (v32)
      {
        if (!v30)
          addr_obj::geo3::Address::default_instance_(v29);
        std::operator+<char>();
        v37 = std::string::append(&v41, "]");
        v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        v26 = 1;
      }
      else
      {
LABEL_73:
        if (!v30)
          v30 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v29) + 40);
        v39 = *(__int128 **)(v30 + 16);
        if (*((char *)v39 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
          v26 = 0;
        }
        else
        {
          v26 = 0;
          v40 = *v39;
          v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v40;
        }
      }
      std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string const&,0>(a3, (__int128 *)&v42, *((__int128 **)v5 + 50));
      goto LABEL_79;
    }
    if (*(_QWORD *)(v23 + 8))
      goto LABEL_52;
LABEL_34:
    v20 = addr_obj::emptyString(this);
    v21 = addr_obj::emptyString((addr_obj *)v20);
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(a3, v20, v21);
    return;
  }
  if (!v7)
  {
    this = (addr_obj::V1AddressObject *)addr_obj::geo3::Address::default_instance_(this);
    v7 = *((_QWORD *)this + 5);
  }
  v9 = *(_QWORD *)(v7 + 32);
  if ((*(char *)(v9 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(v9 + 23))
      goto LABEL_13;
    goto LABEL_30;
  }
  if (!*(_QWORD *)(v9 + 8))
  {
LABEL_30:
    v7 = *((_QWORD *)v5 + 39);
    goto LABEL_31;
  }
LABEL_13:
  v10 = (addr_obj::geo3::Address *)addr_obj::Debugging::addChar(this);
  v11 = *((_QWORD *)v5 + 39);
  if (!(_DWORD)v10)
    goto LABEL_62;
  if (!v11)
  {
    v10 = (addr_obj::geo3::Address *)addr_obj::geo3::Address::default_instance_(v10);
    v11 = *((_QWORD *)v10 + 5);
  }
  v12 = *(_QWORD *)(v11 + 32);
  v13 = *(char *)(v12 + 23) < 0 ? *(_QWORD *)(v12 + 8) : *(unsigned __int8 *)(v12 + 23);
  v11 = *((_QWORD *)v5 + 39);
  if (v13)
  {
    if (!v11)
      addr_obj::geo3::Address::default_instance_(v10);
    std::operator+<char>();
    v33 = std::string::append(&v41, "]");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v26 = 1;
  }
  else
  {
LABEL_62:
    if (!v11)
      v11 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v10) + 40);
    v35 = *(__int128 **)(v11 + 32);
    if (*((char *)v35 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
      v26 = 0;
    }
    else
    {
      v26 = 0;
      v36 = *v35;
      v42.__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v36;
    }
  }
  std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string const&,0>(a3, (__int128 *)&v42, *((__int128 **)v5 + 52));
LABEL_79:
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (v26)
  {
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
  }
}

void sub_1887D4480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V1AddressObject::getSpokenLocality(addr_obj::V1AddressObject *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  std::string __p;
  __int128 v5;
  uint64_t v6;

  addr_obj::V1AddressObject::getLocalities(this, a2, &__p);
  *(_OWORD *)a3 = v5;
  *(_QWORD *)(a3 + 16) = v6;
  v6 = 0;
  v5 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void addr_obj::V1AddressObject::toVCard(addr_obj::V1AddressObject *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  v2 = *((_QWORD *)this + 39);
  if (!v2)
    v2 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(this) + 40);
  v3 = *(_DWORD *)(v2 + 244);
  if ((v3 & 0x80000) != 0)
  {
    v4 = *(_QWORD *)(v2 + 216);
    if (*(char *)(v4 + 23) < 0)
    {
      if (!*(_QWORD *)(v4 + 8))
        goto LABEL_4;
    }
    else if (!*(_BYTE *)(v4 + 23))
    {
      goto LABEL_4;
    }
    if ((v3 & 8) == 0)
      goto LABEL_11;
    goto LABEL_12;
  }
LABEL_4:
  v4 = *(_QWORD *)(v2 + 64);
  if ((v3 & 8) == 0)
    goto LABEL_11;
LABEL_12:
  v5 = *(_QWORD *)(v2 + 40);
  if (*(char *)(v5 + 23) < 0)
  {
    if (*(_QWORD *)(v5 + 8))
      goto LABEL_16;
LABEL_11:
    v5 = *(_QWORD *)(v2 + 32);
    goto LABEL_16;
  }
  if (!*(_BYTE *)(v5 + 23))
    goto LABEL_11;
LABEL_16:
  (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *))(*(_QWORD *)this + 16))(__p, this);
  v6 = *(_QWORD *)(v2 + 104);
  (*(void (**)(void **__return_ptr, addr_obj::V1AddressObject *, _QWORD))(*(_QWORD *)this + 136))(v9, this, 0);
  addr_obj::buildVCard((uint64_t)__p, v6, (uint64_t)v9, v5, v4, *(_QWORD *)(v2 + 16));
  if (v10 < 0)
    operator delete(v9[0]);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1887D4658(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::string *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,void *a22)
{
  addr_obj::AddressObjectBase *v22;
  uint64_t v23;
  void *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  addr_obj::Logger *v32;
  addr_obj::Logger *v33;
  _QWORD *v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  _QWORD *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;

  if (a2 == 3)
  {
    v25 = __cxa_begin_catch(a1);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a22);
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a22, (uint64_t)"; ", 2);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"toVCard", 7);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" failed for ", 12);
    addr_obj::AddressObjectBase::asBase64String(v22, (_QWORD *)(v23 - 88));
    v29 = *(char *)(v23 - 65);
    if (v29 >= 0)
      v30 = v23 - 88;
    else
      v30 = *(_QWORD *)(v23 - 88);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(v23 - 65);
    else
      v31 = *(_QWORD *)(v23 - 80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
    if (*(char *)(v23 - 65) < 0)
      operator delete(*(void **)(v23 - 88));
    std::stringbuf::str();
    addr_obj::AddressObjectException::operator+=(v25, v23 - 88);
    if (*(char *)(v23 - 65) < 0)
      operator delete(*(void **)(v23 - 88));
    std::ostringstream::~ostringstream((uint64_t)&a22);
    __cxa_rethrow();
  }
  v32 = (addr_obj::Logger *)__cxa_begin_catch(a1);
  if (a2 == 2)
  {
    v33 = v32;
    if (addr_obj::Logger::isInitialized(v32))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a22);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a22, (uint64_t)"toVCard", 7);
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" failed: ", 9);
      v36 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v33 + 16))(v33);
      v37 = strlen(v36);
      v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"; for ", 6);
      addr_obj::AddressObjectBase::asBase64String(v22, (_QWORD *)(v23 - 88));
      v40 = *(char *)(v23 - 65);
      if (v40 >= 0)
        v41 = v23 - 88;
      else
        v41 = *(_QWORD *)(v23 - 88);
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(v23 - 65);
      else
        v42 = *(_QWORD *)(v23 - 80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      if (*(char *)(v23 - 65) < 0)
        operator delete(*(void **)(v23 - 88));
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v23 - 88), "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a18, "toVCard");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      addr_obj::Logger::log(16, v23 - 88, 297, (uint64_t)&a18, (uint64_t)&a15, (uint64_t)&__p);
      if (a14 < 0)
        operator delete(__p);
      if (SHIBYTE(a17) < 0)
        operator delete(a15);
      if (SHIBYTE(a20) < 0)
        operator delete(a18);
      if (*(char *)(v23 - 65) < 0)
        operator delete(*(void **)(v23 - 88));
      std::ostringstream::~ostringstream((uint64_t)&a22);
    }
    __cxa_rethrow();
  }
  if (addr_obj::Logger::isInitialized(v32))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&a22);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a22, (uint64_t)"toVCard", 7);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" failed for ", 12);
    addr_obj::AddressObjectBase::asBase64String(v22, (_QWORD *)(v23 - 88));
    v45 = *(char *)(v23 - 65);
    if (v45 >= 0)
      v46 = v23 - 88;
    else
      v46 = *(_QWORD *)(v23 - 88);
    if (v45 >= 0)
      v47 = *(unsigned __int8 *)(v23 - 65);
    else
      v47 = *(_QWORD *)(v23 - 80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
    if (*(char *)(v23 - 65) < 0)
      operator delete(*(void **)(v23 - 88));
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v23 - 88), "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/V1AddressObject.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a18, "toVCard");
    std::stringbuf::str();
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    addr_obj::Logger::log(16, v23 - 88, 297, (uint64_t)&a18, (uint64_t)&a15, (uint64_t)&__p);
    if (a14 < 0)
      operator delete(__p);
    if (SHIBYTE(a17) < 0)
      operator delete(a15);
    if (SHIBYTE(a20) < 0)
      operator delete(a18);
    if (*(char *)(v23 - 65) < 0)
      operator delete(*(void **)(v23 - 88));
    std::ostringstream::~ostringstream((uint64_t)&a22);
  }
  __cxa_rethrow();
}

void sub_1887D50E0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObject::getParkingName(addr_obj::V1AddressObject *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = addr_obj::emptyString(this);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1887D52AC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1887D54A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<std::string const,std::string const&,0>(std::string *this, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_1887D5534(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::V2AddressObject::V2AddressObject(uint64_t a1, __int128 *a2, __int128 **a3, std::string::size_type *a4, const addr_obj::VenueInfoProto *a5, int *a6)
{
  uint64_t v8;

  v8 = addr_obj::V1AddressObject::V1AddressObject(a1, a2, a3, a4, a5, a6);
  *(_QWORD *)v8 = &off_1E1BF9500;
  *(_OWORD *)(v8 + 728) = 0u;
  *(_OWORD *)(v8 + 744) = 0u;
  *(_OWORD *)(v8 + 760) = 0u;
  *(_OWORD *)(v8 + 776) = 0u;
  *(_OWORD *)(v8 + 792) = 0u;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(_OWORD *)(v8 + 888) = 0u;
  *(_OWORD *)(v8 + 904) = 0u;
  *(_OWORD *)(v8 + 920) = 0u;
  *(_OWORD *)(v8 + 936) = 0u;
  *(_OWORD *)(v8 + 952) = 0u;
  *(_OWORD *)(v8 + 968) = 0u;
  *(_OWORD *)(v8 + 984) = 0u;
  *(_OWORD *)(v8 + 1000) = 0u;
  addr_obj::V2AddressObject::init((addr_obj::V2AddressObject *)v8, (const addr_obj::AddressObjectProto *)a4);
  return a1;
}

void sub_1887D55C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 1015) < 0)
    operator delete(*(void **)(v1 + 992));
  if (*(char *)(v1 + 991) < 0)
    operator delete(*(void **)(v1 + 968));
  if (*(char *)(v1 + 967) < 0)
    operator delete(*(void **)(v1 + 944));
  if (*(char *)(v1 + 943) < 0)
    operator delete(*(void **)(v1 + 920));
  if (*(char *)(v1 + 919) < 0)
    operator delete(*(void **)(v1 + 896));
  if (*(char *)(v1 + 895) < 0)
    operator delete(*(void **)(v1 + 872));
  if (*(char *)(v1 + 871) < 0)
    operator delete(*(void **)(v1 + 848));
  if (*(char *)(v1 + 847) < 0)
    operator delete(*(void **)(v1 + 824));
  if (*(char *)(v1 + 823) < 0)
    operator delete(*(void **)(v1 + 800));
  if (*(char *)(v1 + 799) < 0)
    operator delete(*(void **)(v1 + 776));
  if (*(char *)(v1 + 775) < 0)
    operator delete(*(void **)(v1 + 752));
  if (*(char *)(v1 + 751) < 0)
    operator delete(*v2);
  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)v1);
  _Unwind_Resume(a1);
}

std::string *addr_obj::V2AddressObject::V2AddressObject(std::string *a1, __int128 *a2, __int128 **a3, const addr_obj::VenueInfo *a4, uint64_t a5, addr_obj::Localization *a6, const std::string *a7, std::string *a8, __int128 a9, addr_obj::Localization *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::string *a16, std::string *a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,int *a24)
{
  uint64_t v25;
  std::string *v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  std::string *v32;
  std::string *v33;
  uint64_t v34;
  std::string *v35;
  __int128 v36;
  int v37;
  std::string *v38;
  uint64_t v39;
  std::string *v40;
  __int128 v41;
  int v42;
  std::string *v43;
  uint64_t v44;
  std::string *v45;
  __int128 v46;
  int v47;
  std::string *v48;
  uint64_t v49;
  std::string *v50;
  __int128 v51;
  int v52;
  std::string *v53;
  uint64_t v54;
  std::string *v55;
  __int128 v56;
  int v57;
  std::string *v58;
  uint64_t v59;
  std::string *v60;
  __int128 v61;
  int v62;
  std::string *v63;
  uint64_t v64;
  std::string *v65;
  __int128 v66;
  int v67;
  std::string *v68;
  uint64_t v69;
  std::string *v70;
  __int128 v71;
  int v72;
  std::string *v73;
  uint64_t v74;
  std::string *v75;
  __int128 v76;
  int v77;
  std::string *v78;
  uint64_t v79;
  std::string *v80;
  __int128 v81;
  int v82;
  std::string *v84;
  std::string *v85;
  std::string *v86;
  std::string *v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string __str;

  v25 = addr_obj::V1AddressObject::V1AddressObject((uint64_t)a1, a24, a2, a3, a4, a5, a6, a7, a8, (addr_obj::Localization *)a9, *((std::string **)&a9 + 1), a10);
  *(_QWORD *)v25 = &off_1E1BF9500;
  v26 = (std::string *)(v25 + 728);
  v27 = (std::string *)(v25 + 752);
  *(_OWORD *)(v25 + 728) = 0u;
  *(_OWORD *)(v25 + 744) = 0u;
  v84 = (std::string *)(v25 + 800);
  v85 = (std::string *)(v25 + 776);
  v86 = (std::string *)(v25 + 848);
  v87 = (std::string *)(v25 + 824);
  *(_OWORD *)(v25 + 760) = 0u;
  *(_OWORD *)(v25 + 776) = 0u;
  v28 = (std::string *)(v25 + 872);
  v29 = (std::string *)(v25 + 896);
  v30 = (std::string *)(v25 + 920);
  v31 = (std::string *)(v25 + 944);
  *(_OWORD *)(v25 + 792) = 0u;
  *(_OWORD *)(v25 + 808) = 0u;
  v32 = (std::string *)(v25 + 968);
  v33 = (std::string *)(v25 + 992);
  *(_OWORD *)(v25 + 824) = 0u;
  *(_OWORD *)(v25 + 840) = 0u;
  *(_OWORD *)(v25 + 856) = 0u;
  *(_OWORD *)(v25 + 872) = 0u;
  *(_OWORD *)(v25 + 888) = 0u;
  *(_OWORD *)(v25 + 904) = 0u;
  *(_OWORD *)(v25 + 920) = 0u;
  *(_OWORD *)(v25 + 936) = 0u;
  *(_OWORD *)(v25 + 952) = 0u;
  *(_OWORD *)(v25 + 968) = 0u;
  *(_OWORD *)(v25 + 984) = 0u;
  *(_OWORD *)(v25 + 1000) = 0u;
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v25)
    && (*(char *)(a11 + 23) >= 0 ? (v34 = *(unsigned __int8 *)(a11 + 23)) : (v34 = *(_QWORD *)(a11 + 8)), v34))
  {
    std::operator+<char>();
    v35 = std::string::append(&v97, "<");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = 1;
  }
  else if ((*(_BYTE *)(a11 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a11, *(_QWORD *)(a11 + 8));
    v37 = 0;
  }
  else
  {
    v37 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a11;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a11 + 16);
  }
  v38 = std::string::operator=(v26, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v37)
      goto LABEL_16;
  }
  else if (!v37)
  {
    goto LABEL_16;
  }
  if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v97.__r_.__value_.__l.__data_);
LABEL_16:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v38)
    && (*(char *)(a12 + 23) >= 0 ? (v39 = *(unsigned __int8 *)(a12 + 23)) : (v39 = *(_QWORD *)(a12 + 8)), v39))
  {
    std::operator+<char>();
    v40 = std::string::append(&v96, "<");
    v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = 1;
  }
  else if ((*(_BYTE *)(a12 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a12, *(_QWORD *)(a12 + 8));
    v42 = 0;
  }
  else
  {
    v42 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a12;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a12 + 16);
  }
  v43 = std::string::operator=(v27, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v42)
      goto LABEL_31;
  }
  else if (!v42)
  {
    goto LABEL_31;
  }
  if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v96.__r_.__value_.__l.__data_);
LABEL_31:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v43)
    && (*(char *)(a13 + 23) >= 0 ? (v44 = *(unsigned __int8 *)(a13 + 23)) : (v44 = *(_QWORD *)(a13 + 8)), v44))
  {
    std::operator+<char>();
    v45 = std::string::append(&v95, "<");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = 1;
  }
  else if ((*(_BYTE *)(a13 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a13, *(_QWORD *)(a13 + 8));
    v47 = 0;
  }
  else
  {
    v47 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a13;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a13 + 16);
  }
  v48 = std::string::operator=(v87, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v47)
      goto LABEL_46;
  }
  else if (!v47)
  {
    goto LABEL_46;
  }
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
LABEL_46:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v48)
    && (*(char *)(a14 + 23) >= 0 ? (v49 = *(unsigned __int8 *)(a14 + 23)) : (v49 = *(_QWORD *)(a14 + 8)), v49))
  {
    std::operator+<char>();
    v50 = std::string::append(&v94, "<");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = 1;
  }
  else if ((*(_BYTE *)(a14 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a14, *(_QWORD *)(a14 + 8));
    v52 = 0;
  }
  else
  {
    v52 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a14;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a14 + 16);
  }
  v53 = std::string::operator=(v86, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v52)
      goto LABEL_61;
  }
  else if (!v52)
  {
    goto LABEL_61;
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
LABEL_61:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v53)
    && (*(char *)(a18 + 23) >= 0 ? (v54 = *(unsigned __int8 *)(a18 + 23)) : (v54 = *(_QWORD *)(a18 + 8)), v54))
  {
    std::operator+<char>();
    v55 = std::string::append(&v93, "<");
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = 1;
  }
  else if ((*(_BYTE *)(a18 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a18, *(_QWORD *)(a18 + 8));
    v57 = 0;
  }
  else
  {
    v57 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a18;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a18 + 16);
  }
  v58 = std::string::operator=(v28, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v57)
      goto LABEL_76;
  }
  else if (!v57)
  {
    goto LABEL_76;
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v93.__r_.__value_.__l.__data_);
LABEL_76:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v58)
    && (*(char *)(a15 + 23) >= 0 ? (v59 = *(unsigned __int8 *)(a15 + 23)) : (v59 = *(_QWORD *)(a15 + 8)), v59))
  {
    std::operator+<char>();
    v60 = std::string::append(&v92, "<");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = 1;
  }
  else if ((*(_BYTE *)(a15 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a15, *(_QWORD *)(a15 + 8));
    v62 = 0;
  }
  else
  {
    v62 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a15;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a15 + 16);
  }
  std::string::operator=(v29, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v62)
      goto LABEL_91;
  }
  else if (!v62)
  {
    goto LABEL_91;
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v92.__r_.__value_.__l.__data_);
LABEL_91:
  std::string::operator=(v85, a16);
  v63 = std::string::operator=(v84, a17);
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v63)
    && (*(char *)(a19 + 23) >= 0 ? (v64 = *(unsigned __int8 *)(a19 + 23)) : (v64 = *(_QWORD *)(a19 + 8)), v64))
  {
    std::operator+<char>();
    v65 = std::string::append(&v91, "<");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = 1;
  }
  else if ((*(_BYTE *)(a19 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a19, *(_QWORD *)(a19 + 8));
    v67 = 0;
  }
  else
  {
    v67 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a19;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a19 + 16);
  }
  v68 = std::string::operator=(v30, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v67)
      goto LABEL_106;
  }
  else if (!v67)
  {
    goto LABEL_106;
  }
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
LABEL_106:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v68)
    && (*(char *)(a20 + 23) >= 0 ? (v69 = *(unsigned __int8 *)(a20 + 23)) : (v69 = *(_QWORD *)(a20 + 8)), v69))
  {
    std::operator+<char>();
    v70 = std::string::append(&v90, "<");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    v72 = 1;
  }
  else if ((*(_BYTE *)(a20 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a20, *(_QWORD *)(a20 + 8));
    v72 = 0;
  }
  else
  {
    v72 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a20;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a20 + 16);
  }
  v73 = std::string::operator=(v31, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v72)
      goto LABEL_121;
  }
  else if (!v72)
  {
    goto LABEL_121;
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90.__r_.__value_.__l.__data_);
LABEL_121:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v73)
    && (*(char *)(a22 + 23) >= 0 ? (v74 = *(unsigned __int8 *)(a22 + 23)) : (v74 = *(_QWORD *)(a22 + 8)), v74))
  {
    std::operator+<char>();
    v75 = std::string::append(&v89, "<");
    v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v76;
    v75->__r_.__value_.__l.__size_ = 0;
    v75->__r_.__value_.__r.__words[2] = 0;
    v75->__r_.__value_.__r.__words[0] = 0;
    v77 = 1;
  }
  else if ((*(_BYTE *)(a22 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a22, *(_QWORD *)(a22 + 8));
    v77 = 0;
  }
  else
  {
    v77 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a22;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a22 + 16);
  }
  v78 = std::string::operator=(v32, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v77)
      goto LABEL_136;
  }
  else if (!v77)
  {
    goto LABEL_136;
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
LABEL_136:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)v78)
    && (*(char *)(a23 + 23) >= 0 ? (v79 = *(unsigned __int8 *)(a23 + 23)) : (v79 = *(_QWORD *)(a23 + 8)), v79))
  {
    std::operator+<char>();
    v80 = std::string::append(&v88, "<");
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = 1;
  }
  else if ((*(_BYTE *)(a23 + 23) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a23, *(_QWORD *)(a23 + 8));
    v82 = 0;
  }
  else
  {
    v82 = 0;
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)a23;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a23 + 16);
  }
  std::string::operator=(v33, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if (!v82)
      goto LABEL_151;
  }
  else if (!v82)
  {
    goto LABEL_151;
  }
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
LABEL_151:
  addr_obj::V2AddressObject::processShortAddress(a1, a21);
  return a1;
}

{
  return addr_obj::V2AddressObject::V2AddressObject(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

void sub_1887D5FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, void **a14, void **a15, void **a16, void **a17, void **a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  char *v54;
  void **v55;
  void **v56;
  void **v57;
  void **v58;
  void **v59;
  void **v60;
  void **v61;

  if (v54[1015] < 0)
    operator delete(*v58);
  if (v54[991] < 0)
    operator delete(*v57);
  if (v54[967] < 0)
    operator delete(*v56);
  if (v54[943] < 0)
    operator delete(*v61);
  if (v54[919] < 0)
    operator delete(*v60);
  if (v54[895] < 0)
    operator delete(*v59);
  if (v54[871] < 0)
    operator delete(*a17);
  if (v54[847] < 0)
    operator delete(*a18);
  if (v54[823] < 0)
    operator delete(*a15);
  if (v54[799] < 0)
    operator delete(*a16);
  if (v54[775] < 0)
    operator delete(*a14);
  if (v54[751] < 0)
    operator delete(*v55);
  addr_obj::V1AddressObject::~V1AddressObject((addr_obj::V1AddressObject *)v54);
  _Unwind_Resume(a1);
}

double addr_obj::V2AddressObject::processShortAddress(std::string *this, int a2)
{
  std::string *v3;
  void **p_size;
  std::string *v5;
  addr_obj::Localization *v6;
  int v7;
  addr_obj::geo3::Address *v8;
  addr_obj *v9;
  std::string::size_type v10;
  uint64_t v11;
  void *v12;
  uint64_t AddressProto;
  std::string::size_type size;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  double result;
  _QWORD v19[2];
  char v20;
  std::string __p;
  char v22;
  std::string v23;

  v3 = this;
  if (this[38].__r_.__value_.__s.__data_[7] < 0)
  {
    if (this[37].__r_.__value_.__r.__words[2])
      return result;
  }
  else if (this[38].__r_.__value_.__s.__data_[7])
  {
    return result;
  }
  p_size = (void **)&this[37].__r_.__value_.__l.__size_;
  switch(a2)
  {
    case 0:
      this = (std::string *)addr_obj::V1AddressObject::getAddressProto((addr_obj::V1AddressObject *)this);
      if ((this[2].__r_.__value_.__s.__data_[8] & 2) != 0)
      {
        v5 = this;
        v6 = (addr_obj::Localization *)(*(uint64_t (**)(std::string *))(v3->__r_.__value_.__r.__words[0] + 152))(v3);
        (*(void (**)(std::string *__return_ptr, std::string *))(v3->__r_.__value_.__r.__words[0] + 176))(&__p, v3);
        this = (std::string *)addr_obj::Formatting::overrideLegacyShortAddress(v6, (uint64_t)&__p);
        v7 = (int)this;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v7)
        {
          v8 = (addr_obj::geo3::Address *)(*(uint64_t (**)(std::string *))(v3->__r_.__value_.__r.__words[0]
                                                                                   + 152))(v3);
          v9 = v8;
          v10 = v5[1].__r_.__value_.__r.__words[2];
          if (!v10)
            v10 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_(v8) + 40);
          v11 = *(_QWORD *)(v10 + 104);
          (*(void (**)(std::string *__return_ptr, std::string *, _QWORD))(v3->__r_.__value_.__r.__words[0]
                                                                                   + 136))(&v23, v3, 0);
          (*(void (**)(_QWORD *__return_ptr, std::string *))(v3->__r_.__value_.__r.__words[0] + 176))(v19, v3);
          addr_obj::Formatting::buildLegacyShortAddress(v9, v11, (uint64_t)&v23, (uint64_t)v19, &__p);
          if (v3[38].__r_.__value_.__s.__data_[7] < 0)
            operator delete(*p_size);
          *(_OWORD *)p_size = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v3[38].__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[2];
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (v20 < 0)
          {
            v12 = (void *)v19[0];
            goto LABEL_28;
          }
          goto LABEL_29;
        }
      }
      break;
    case 1:
      AddressProto = addr_obj::V1AddressObject::getAddressProto((addr_obj::V1AddressObject *)this);
      this = (std::string *)(*(_QWORD *(**)(std::string *__return_ptr, std::string *, uint64_t))(v3->__r_.__value_.__r.__words[0] + 72))(&v23, v3, 1);
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v23.__r_.__value_.__l.__size_;
      if (size && (*(_BYTE *)(AddressProto + 56) & 2) != 0)
      {
        v15 = *(_QWORD *)(AddressProto + 40);
        if (!v15)
          v15 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_((addr_obj::geo3::Address *)this) + 40);
        this = (std::string *)addr_obj::Formatting::verifyFormattedAddressInStructuredAddress((uint64_t)&v23, v15);
        if ((_DWORD)this)
        {
          addr_obj::Formatting::stripForCityAndAbove((uint64_t)&v23, v15, (uint64_t)&__p);
          if (__p.__r_.__value_.__s.__data_[0])
            this = std::string::operator=((std::string *)((char *)v3 + 896), (const std::string *)&__p.__r_.__value_.__r.__words[1]);
          if (v22 < 0)
          {
            v12 = (void *)__p.__r_.__value_.__l.__size_;
LABEL_28:
            operator delete(v12);
          }
        }
      }
LABEL_29:
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      break;
    case 2:
      this = (std::string *)(*(_QWORD *(**)(std::string *__return_ptr, std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 136))(&__p, this, 1);
      goto LABEL_32;
    case 3:
      this = (std::string *)(*(_QWORD *(**)(std::string *__return_ptr, std::string *))(this->__r_.__value_.__r.__words[0]
                                                                                                + 168))(&__p, this);
LABEL_32:
      if (v3[38].__r_.__value_.__s.__data_[7] < 0)
        operator delete(*p_size);
      *(_OWORD *)p_size = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v3[38].__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[2];
      break;
    default:
      break;
  }
  if ((v3[38].__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
  {
    if (!v3[38].__r_.__value_.__s.__data_[7])
      goto LABEL_38;
    goto LABEL_37;
  }
  if (v3[37].__r_.__value_.__r.__words[2])
LABEL_37:
    LODWORD(v3->__r_.__value_.__r.__words[1]) = a2;
LABEL_38:
  if (addr_obj::Debugging::addChar((addr_obj::Debugging *)this))
  {
    if (v3[38].__r_.__value_.__s.__data_[7] < 0)
    {
      if (v3[37].__r_.__value_.__r.__words[2])
        goto LABEL_41;
    }
    else if (v3[38].__r_.__value_.__s.__data_[7])
    {
LABEL_41:
      std::operator+<char>();
      v16 = std::string::append(&v23, "<");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (v3[38].__r_.__value_.__s.__data_[7] < 0)
        operator delete(*p_size);
      result = *(double *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)p_size = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v3[38].__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[2];
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      return result;
    }
  }
  if (v3[38].__r_.__value_.__s.__data_[7] < 0)
  {
    std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v3[37].__r_.__value_.__l.__size_, v3[37].__r_.__value_.__r.__words[2]);
    if (v3[38].__r_.__value_.__s.__data_[7] < 0)
      operator delete(*p_size);
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)p_size;
    __p.__r_.__value_.__r.__words[2] = v3[38].__r_.__value_.__r.__words[0];
  }
  result = *(double *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)p_size = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  v3[38].__r_.__value_.__r.__words[0] = __p.__r_.__value_.__r.__words[2];
  return result;
}

void sub_1887D66B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getDisplayLocality(addr_obj::V2AddressObject *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  _OWORD *v6;
  std::string *v7;
  __int128 v8;
  addr_obj *v9;
  std::string::size_type size;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string __p;
  std::string v20;

  if (*((char *)this + 751) < 0)
  {
    if (*((_QWORD *)this + 92))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 751))
  {
LABEL_3:
    v6 = (_OWORD *)((char *)this + 728);
    if (addr_obj::Debugging::addChar(this))
    {
      if ((*((_BYTE *)this + 751) & 0x80) != 0)
      {
        if (*((_QWORD *)this + 92))
          goto LABEL_6;
      }
      else if (*((_BYTE *)this + 751))
      {
LABEL_6:
        std::operator+<char>();
        v7 = std::string::append(&v20, "]");
        v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
        a3->__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v8;
        v7->__r_.__value_.__l.__size_ = 0;
        v7->__r_.__value_.__r.__words[2] = 0;
        v7->__r_.__value_.__r.__words[0] = 0;
        goto LABEL_39;
      }
    }
    if ((*((_BYTE *)this + 751) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 91), *((_QWORD *)this + 92));
      return;
    }
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v6;
    v12 = *((_QWORD *)this + 93);
LABEL_25:
    a3->__r_.__value_.__r.__words[2] = v12;
    return;
  }
  addr_obj::V1AddressObject::getDisplayLocality(this, 0, &v20);
  size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v20.__r_.__value_.__l.__size_;
  if (!size)
  {
    if (!a2)
    {
      v15 = addr_obj::emptyString(v9);
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v16 = *v15;
        a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v16;
      }
      goto LABEL_39;
    }
    if ((addr_obj::Debugging::addChar(v9) & 1) != 0)
    {
      v13 = *((char *)this + 775);
      if (v13 < 0)
        v14 = *((_QWORD *)this + 95);
      else
        v14 = *((unsigned __int8 *)this + 775);
      if (v14)
        goto LABEL_34;
    }
    else
    {
      LOBYTE(v13) = *((_BYTE *)this + 775);
    }
    if ((v13 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 94), *((_QWORD *)this + 95));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *((_OWORD *)this + 47);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 96);
    }
    goto LABEL_39;
  }
  if (addr_obj::Debugging::addChar(v9))
  {
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(v20.__r_.__value_.__r.__words[2])
       : v20.__r_.__value_.__l.__size_)
    {
LABEL_34:
      std::operator+<char>();
      v17 = std::string::append(&__p, "]");
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_39;
    }
  }
  if ((*((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
    v12 = v20.__r_.__value_.__r.__words[2];
    goto LABEL_25;
  }
  std::string::__init_copy_ctor_external(a3, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
LABEL_39:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1887D69DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 addr_obj::V2AddressObject::getSpokenLocality@<Q0>(addr_obj::V2AddressObject *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  __int128 *v6;
  __n128 result;
  std::string::size_type v8;
  addr_obj *v9;
  std::string::size_type size;
  std::string::size_type *v11;
  std::string v12;

  v6 = (__int128 *)((char *)this + 776);
  if (*((char *)this + 799) < 0)
  {
    v8 = *((_QWORD *)this + 98);
    if (v8)
      goto LABEL_5;
  }
  else if (*((_BYTE *)this + 799))
  {
LABEL_3:
    result = (__n128)*v6;
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v6;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    return result;
  }
  addr_obj::V1AddressObject::getDisplayLocality(this, 0, &v12);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v12.__r_.__value_.__l.__size_;
    operator delete(v12.__r_.__value_.__l.__data_);
    if (size)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (!*((_BYTE *)&v12.__r_.__value_.__s + 23))
  {
LABEL_11:
    if (a2)
    {
      v6 = (__int128 *)((char *)this + 800);
      if ((*((char *)this + 823) & 0x80000000) == 0)
        goto LABEL_3;
      v11 = (std::string::size_type *)((char *)this + 808);
    }
    else
    {
      v6 = addr_obj::emptyString(v9);
      if ((*((char *)v6 + 23) & 0x80000000) == 0)
      {
        result = (__n128)*v6;
        a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(__n128 *)&a3->__r_.__value_.__l.__data_ = result;
        return result;
      }
      v11 = (std::string::size_type *)v6 + 1;
    }
    v8 = *v11;
LABEL_5:
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v6, v8);
    return result;
  }
LABEL_8:
  addr_obj::V1AddressObject::getSpokenLocality(this, 0, (uint64_t)a3);
  return result;
}

void addr_obj::V2AddressObject::getParkingName(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  int v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((addr_obj::Debugging::addChar(this) & 1) == 0)
  {
    if ((*((_BYTE *)this + 847) & 0x80) == 0)
      goto LABEL_5;
LABEL_7:
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 103), *((_QWORD *)this + 104));
    return;
  }
  v4 = *((char *)this + 847);
  if (v4 < 0)
  {
    if (!*((_QWORD *)this + 104))
    {
LABEL_4:
      if ((v4 & 0x80) == 0)
      {
LABEL_5:
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 824);
        a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 105);
        return;
      }
      goto LABEL_7;
    }
  }
  else if (!*((_BYTE *)this + 847))
  {
    goto LABEL_4;
  }
  std::operator+<char>();
  v5 = std::string::append(&v7, "]");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1887D6BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getWeatherName(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((*((char *)this + 871) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 871))
      goto LABEL_3;
LABEL_8:
    (*(void (**)(std::string *__return_ptr, addr_obj::V2AddressObject *, uint64_t))(*(_QWORD *)this + 136))(&v7, this, 1);
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v7.__r_.__value_.__l.__size_)
      {
        std::string::__init_copy_ctor_external(a2, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
        goto LABEL_14;
      }
    }
    else if (*((_BYTE *)&v7.__r_.__value_.__s + 23))
    {
      *a2 = v7;
      goto LABEL_14;
    }
    addr_obj::V1AddressObject::getName(this, a2);
LABEL_14:
    if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__r_.__value_.__l.__data_);
    return;
  }
  if (!*((_QWORD *)this + 107))
    goto LABEL_8;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 848);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 871) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 107))
        goto LABEL_6;
    }
    else if (*((_BYTE *)this + 871))
    {
LABEL_6:
      std::operator+<char>();
      v5 = std::string::append(&v7, "]");
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      goto LABEL_14;
    }
  }
  if ((*((_BYTE *)this + 871) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 106), *((_QWORD *)this + 107));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 108);
  }
}

void sub_1887D6D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getWeatherLocationName(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((*((char *)this + 895) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 895))
      goto LABEL_3;
LABEL_9:
    addr_obj::AddressObjectBase::getWeatherLocationName(this);
    return;
  }
  if (!*((_QWORD *)this + 110))
    goto LABEL_9;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 872);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 895) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 110))
      {
LABEL_6:
        std::operator+<char>();
        v5 = std::string::append(&v7, "]");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v7.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 895))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 895) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 109), *((_QWORD *)this + 110));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 111);
  }
}

void sub_1887D6E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getLocationAddress(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((*((char *)this + 943) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 943))
      goto LABEL_3;
LABEL_9:
    addr_obj::AddressObjectBase::getLocationAddress(this, a2);
    return;
  }
  if (!*((_QWORD *)this + 116))
    goto LABEL_9;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 920);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 943) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 116))
      {
LABEL_6:
        std::operator+<char>();
        v5 = std::string::append(&v7, "]");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v7.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 943))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 943) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 115), *((_QWORD *)this + 116));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 117);
  }
}

void sub_1887D6FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getNeighborhoodName(addr_obj::V2AddressObject *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  _OWORD *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;

  if (*((char *)this + 967) < 0)
  {
    if (*((_QWORD *)this + 119))
      goto LABEL_3;
LABEL_9:
    if (a2)
      (*(void (**)(addr_obj::V2AddressObject *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
    else
      addr_obj::AddressObjectBase::getNeighborhoodName(this, a3);
    return;
  }
  if (!*((_BYTE *)this + 967))
    goto LABEL_9;
LABEL_3:
  v5 = (_OWORD *)((char *)this + 944);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 967) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 119))
      {
LABEL_6:
        std::operator+<char>();
        v6 = std::string::append(&v8, "]");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        a3->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 967))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 967) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 118), *((_QWORD *)this + 119));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v5;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 120);
  }
}

void sub_1887D7104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getCityAndAbove(addr_obj::V2AddressObject *this@<X0>, char a2@<W1>, std::string *a3@<X8>)
{
  _OWORD *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;

  if ((*((char *)this + 991) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 991))
      goto LABEL_3;
LABEL_9:
    addr_obj::V1AddressObject::getCityAndAbove(this, a2, a3);
    return;
  }
  if (!*((_QWORD *)this + 122))
    goto LABEL_9;
LABEL_3:
  v5 = (_OWORD *)((char *)this + 968);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 991) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 122))
      {
LABEL_6:
        std::operator+<char>();
        v6 = std::string::append(&v8, "]");
        v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        a3->__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v8.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 991))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 991) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)this + 121), *((_QWORD *)this + 122));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *v5;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 123);
  }
}

void sub_1887D722C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getShortAddress(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((*((char *)this + 919) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 919))
      goto LABEL_3;
LABEL_9:
    addr_obj::V1AddressObject::getShortAddress(this, a2);
    return;
  }
  if (!*((_QWORD *)this + 113))
    goto LABEL_9;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 896);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 919) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 113))
      {
LABEL_6:
        std::operator+<char>();
        v5 = std::string::append(&v7, "]");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v7.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 919))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 919) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 112), *((_QWORD *)this + 113));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 114);
  }
}

void sub_1887D7354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::V2AddressObject::getAboveDoorShortAddress(addr_obj::V2AddressObject *this@<X0>, std::string *a2@<X8>)
{
  _OWORD *v4;
  std::string *v5;
  __int128 v6;
  std::string v7;

  if ((*((char *)this + 1015) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 1015))
      goto LABEL_3;
LABEL_9:
    addr_obj::V1AddressObject::getAboveDoorShortAddress(this, a2);
    return;
  }
  if (!*((_QWORD *)this + 125))
    goto LABEL_9;
LABEL_3:
  v4 = (_OWORD *)((char *)this + 992);
  if (addr_obj::Debugging::addChar(this))
  {
    if ((*((_BYTE *)this + 1015) & 0x80) != 0)
    {
      if (*((_QWORD *)this + 125))
      {
LABEL_6:
        std::operator+<char>();
        v5 = std::string::append(&v7, "]");
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        a2->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v7.__r_.__value_.__l.__data_);
        return;
      }
    }
    else if (*((_BYTE *)this + 1015))
    {
      goto LABEL_6;
    }
  }
  if ((*((_BYTE *)this + 1015) & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 124), *((_QWORD *)this + 125));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *v4;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 126);
  }
}

void sub_1887D747C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *addr_obj::Localization::Localization(std::string *this, std::string *__str, uint64_t a3, uint64_t a4)
{
  std::string *v7;
  std::string *v8;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  addr_obj::Logger *v13;
  void *p_p;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  addr_obj::Logger *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  addr_obj::Logger *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  std::runtime_error *v30;
  _QWORD *v31;
  _QWORD *v32;
  std::runtime_error *v33;
  _QWORD *v34;
  _QWORD *v35;
  std::runtime_error *exception;
  void *v37[2];
  char v38;
  std::string v39;
  void *v40[2];
  char v41;
  void *__p;
  uint64_t v43;
  unsigned __int8 v44;
  void *v45[2];
  _QWORD v46[33];

  *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = 0u;
  v7 = this + 2;
  v8 = this + 1;
  this[2].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0 && __str->__r_.__value_.__l.__size_ >= 0x201)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"display language is too long: <", 31);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)">", 1);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; library version: ",
            19);
    v13 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v13))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v44 & 0x80u) == 0)
        v15 = v44;
      else
        v15 = v43;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)p_p, v15);
      if ((char)v44 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 19, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v41 < 0)
        operator delete(v40[0]);
      if ((char)v44 < 0)
        operator delete(__p);
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v45, (uint64_t)&__p);
  }
  if (*(char *)(a3 + 23) < 0 && *(_QWORD *)(a3 + 8) >= 0x201uLL)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"country name is too long: <", 27);
    v16 = (_QWORD *)std::ostream::operator<<();
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)">", 1);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"; library version: ",
            19);
    v19 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v19))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0)
        v20 = &__p;
      else
        v20 = __p;
      if ((v44 & 0x80u) == 0)
        v21 = v44;
      else
        v21 = v43;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v20, v21);
      if ((char)v44 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 20, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v41 < 0)
        operator delete(v40[0]);
      if ((char)v44 < 0)
        operator delete(__p);
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)":", 1);
    std::ostream::operator<<();
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(v33, (const void **)v45, (uint64_t)&__p);
  }
  if (*(char *)(a4 + 23) < 0 && *(_QWORD *)(a4 + 8) >= 0x201uLL)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"phoneticLocale is too long: <", 29);
    v22 = (_QWORD *)std::ostream::operator<<();
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)">", 1);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; library version: ",
            19);
    v25 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v25))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v45);
      std::stringbuf::str();
      if ((v44 & 0x80u) == 0)
        v26 = &__p;
      else
        v26 = __p;
      if ((v44 & 0x80u) == 0)
        v27 = v44;
      else
        v27 = v43;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v26, v27);
      if ((char)v44 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(v40, "Localization");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v37, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 21, (uint64_t)v40, (uint64_t)&v39, (uint64_t)v37);
      if (v38 < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      if (v41 < 0)
        operator delete(v40[0]);
      if ((char)v44 < 0)
        operator delete(__p);
      std::ostringstream::~ostringstream((uint64_t)v45);
    }
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"; at ", 5);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)":", 1);
    std::ostream::operator<<();
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v45, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(v30, (const void **)v45, (uint64_t)&__p);
  }
  std::string::operator=(this, __str);
  std::string::operator=(v8, (const std::string *)a3);
  std::string::operator=(v7, (const std::string *)a4);
  return this;
}

void sub_1887D85B0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887D85CCLL);
}

void sub_1887D85C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;
  void **v55;
  void **v56;

  std::ostringstream::~ostringstream((uint64_t)&a54);
  if (*(char *)(v54 + 71) < 0)
    operator delete(*v56);
  if (*(char *)(v54 + 47) < 0)
    operator delete(*v55);
  if (*(char *)(v54 + 23) < 0)
    operator delete(*(void **)v54);
  _Unwind_Resume(a1);
}

void sub_1887D85D8()
{
  JUMPOUT(0x1887D85E8);
}

uint64_t addr_obj::Localization::getPhoneticLocale(addr_obj::Localization *this)
{
  return (uint64_t)this + 48;
}

void addr_obj::Localization::str(addr_obj::Localization *this@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  std::string *v5;
  addr_obj::Localization *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  std::string v21;

  if (*((char *)this + 23) >= 0)
    v4 = *((unsigned __int8 *)this + 23);
  else
    v4 = *((_QWORD *)this + 1);
  v5 = &v19;
  std::string::basic_string[abi:ne180100]((uint64_t)&v19, v4 + 1);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*((char *)this + 23) >= 0)
      v6 = this;
    else
      v6 = *(addr_obj::Localization **)this;
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  v7 = *((char *)this + 47);
  if (v7 >= 0)
    v8 = (char *)this + 24;
  else
    v8 = (const std::string::value_type *)*((_QWORD *)this + 3);
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)this + 47);
  else
    v9 = *((_QWORD *)this + 4);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v20, "/");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = *((char *)this + 71);
  if (v14 >= 0)
    v15 = (char *)this + 48;
  else
    v15 = (const std::string::value_type *)*((_QWORD *)this + 6);
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)this + 71);
  else
    v16 = *((_QWORD *)this + 7);
  v17 = std::string::append(&v21, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v17->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1887D8794(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::string *v28;
  uint64_t v29;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  __cxa_begin_catch(a1);
  if (*(char *)(v29 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v29, *(_QWORD *)(v29 + 8));
  }
  else
  {
    *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)v29;
    v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v29 + 16);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887D8780);
}

void sub_1887D8818(void *a1)
{
  __cxa_end_catch();
  __cxa_call_unexpected(a1);
}

uint64_t addr_obj::Localization::toDebugJsonString@<X0>(addr_obj::Localization *this@<X0>, addr_obj::Json *a2@<X8>)
{
  addr_obj::Json *v4;
  void *__p[2];
  char v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  addr_obj::Json::Json((addr_obj::Json *)v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "getDisplayLanguage");
  addr_obj::Json::append(v8, (uint64_t *)__p, (uint64_t *)this);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "getDeviceCountryCode");
  addr_obj::Json::append(v8, (uint64_t *)__p, (uint64_t *)this + 3);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "getPhoneticLocale");
  addr_obj::Json::append(v8, (uint64_t *)__p, (uint64_t *)this + 6);
  if (v7 < 0)
    operator delete(__p[0]);
  v4 = addr_obj::Json::close((addr_obj::Json *)v8);
  addr_obj::Json::Json(a2, v4);
  v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v10);
}

void sub_1887D8984(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *__s, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  addr_obj::Logger *v73;
  _QWORD *v74;
  const char *v75;
  size_t v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  size_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  addr_obj::Logger *v86;
  addr_obj::Logger *v87;
  _QWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;

  if (a40 < 0)
    operator delete(__p);
  if (a2 == 4)
  {
    v73 = (addr_obj::Logger *)__cxa_begin_catch(a1);
    if (addr_obj::Logger::isInitialized(v73))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"std::exception: ", 16);
      v75 = (const char *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v73 + 16))(v73);
      v76 = strlen(v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
      std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a23, "toDebugJsonString");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a11, "");
      addr_obj::Logger::log(16, (uint64_t)&a29, 82, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&a11);
      if (a16 < 0)
        operator delete(a11);
      if (a22 < 0)
        operator delete(a17);
      if (a28 < 0)
        operator delete(a23);
      if (a34 < 0)
        operator delete(a29);
      std::ostringstream::~ostringstream((uint64_t)&__p);
    }
    v77 = addr_obj::Json::operator<<<char [3]>(&a71, "; ");
    v78 = addr_obj::Json::operator<<<char [55]>(v77, "Json addr_obj::Localization::toDebugJsonString() const");
    v79 = addr_obj::Json::operator<<<char [19]>(v78, ": std::exception: ");
    __p = (void *)(*(uint64_t (**)(addr_obj::Logger *))(*(_QWORD *)v73 + 16))(v73);
    addr_obj::Json::operator<<<char const*>(v79, (char **)&__p);
    __cxa_end_catch();
  }
  else if (a2 == 3)
  {
    v80 = (char *)__cxa_begin_catch(a1);
    __s = v80;
    if (addr_obj::Logger::isInitialized((addr_obj::Logger *)v80))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
      v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"const char* exception: ", 23);
      v82 = strlen(v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v80, v82);
      std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
      std::string::basic_string[abi:ne180100]<0>(&a23, "toDebugJsonString");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(&a11, "");
      addr_obj::Logger::log(16, (uint64_t)&a29, 82, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&a11);
      if (a16 < 0)
        operator delete(a11);
      if (a22 < 0)
        operator delete(a17);
      if (a28 < 0)
        operator delete(a23);
      if (a34 < 0)
        operator delete(a29);
      std::ostringstream::~ostringstream((uint64_t)&__p);
    }
    v83 = addr_obj::Json::operator<<<char [3]>(&a71, "; ");
    v84 = addr_obj::Json::operator<<<char [55]>(v83, "Json addr_obj::Localization::toDebugJsonString() const");
    v85 = addr_obj::Json::operator<<<char [17]>(v84, ": const char *: ");
    addr_obj::Json::operator<<<char const*>(v85, &__s);
    __cxa_end_catch();
  }
  else
  {
    v86 = (addr_obj::Logger *)__cxa_begin_catch(a1);
    if (a2 == 2)
    {
      v87 = v86;
      if (addr_obj::Logger::isInitialized(v86))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"std::string exception: ", 23);
        v89 = *((char *)v87 + 23);
        if (v89 >= 0)
          v90 = (uint64_t)v87;
        else
          v90 = *(_QWORD *)v87;
        if (v89 >= 0)
          v91 = *((unsigned __int8 *)v87 + 23);
        else
          v91 = *((_QWORD *)v87 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v90, v91);
        std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a23, "toDebugJsonString");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&a11, "");
        addr_obj::Logger::log(16, (uint64_t)&a29, 82, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&a11);
        if (a16 < 0)
          operator delete(a11);
        if (a22 < 0)
          operator delete(a17);
        if (a28 < 0)
          operator delete(a23);
        if (a34 < 0)
          operator delete(a29);
        std::ostringstream::~ostringstream((uint64_t)&__p);
      }
      v92 = addr_obj::Json::operator<<<char [3]>(&a71, "; ");
      v93 = addr_obj::Json::operator<<<char [55]>(v92, "Json addr_obj::Localization::toDebugJsonString() const");
      v94 = addr_obj::Json::operator<<<char [26]>(v93, ": std::string exception: ");
      addr_obj::Json::escape(v94, (uint64_t *)v87);
      __cxa_end_catch();
    }
    else
    {
      if (addr_obj::Logger::isInitialized(v86))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"unknown exception", 17);
        std::string::basic_string[abi:ne180100]<0>(&a29, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
        std::string::basic_string[abi:ne180100]<0>(&a23, "toDebugJsonString");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(&a11, "");
        addr_obj::Logger::log(16, (uint64_t)&a29, 82, (uint64_t)&a23, (uint64_t)&a17, (uint64_t)&a11);
        if (a16 < 0)
          operator delete(a11);
        if (a22 < 0)
          operator delete(a17);
        if (a28 < 0)
          operator delete(a23);
        if (a34 < 0)
          operator delete(a29);
        std::ostringstream::~ostringstream((uint64_t)&__p);
      }
      v95 = addr_obj::Json::operator<<<char [3]>(&a71, "; ");
      v96 = addr_obj::Json::operator<<<char [55]>(v95, "Json addr_obj::Localization::toDebugJsonString() const");
      addr_obj::Json::operator<<<char [20]>(v96, ": unknown exception");
      __cxa_end_catch();
    }
  }
  JUMPOUT(0x1887D88F0);
}

void sub_1887D8E94(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  int v54;
  void *v57;
  void *v58;
  const std::string::value_type *v59;
  std::string *v60;
  __int128 v61;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (SHIBYTE(a27) < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a28);
  v57 = __cxa_begin_catch(a1);
  if (a2 == v54)
  {
    v58 = v57;
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v59 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v58 + 16))(v58);
    v60 = std::string::append((std::string *)&a17, v59);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    a24 = v60->__r_.__value_.__r.__words[2];
    a23 = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 82, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a27) < 0)
      operator delete(a25);
    if (SHIBYTE(a30) < 0)
      operator delete(a28);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a28, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a28, 82, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a27) < 0)
      operator delete(a25);
    if (SHIBYTE(a30) < 0)
      operator delete(a28);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887D8D64);
}

void sub_1887D94C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D8D94);
}

void sub_1887D955C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887D9568(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D9418);
}

void sub_1887D95F4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887D954CLL);
}

void sub_1887D9600(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v39;
  void *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a30 < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  v39 = __cxa_begin_catch(a1);
  if (a2 == v36)
  {
    v40 = v39;
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    v42 = std::string::append((std::string *)&a17, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a24 = v42->__r_.__value_.__r.__words[2];
    a23 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 82, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 82, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887D8AECLL);
}

void sub_1887D9670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t *)va);
  JUMPOUT(0x1887D9990);
}

void sub_1887D967C()
{
  JUMPOUT(0x1887D9684);
}

void sub_1887D983C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D8C68);
}

void sub_1887D98D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D9790);
}

void sub_1887D9964()
{
  __cxa_end_catch();
  JUMPOUT(0x1887D98C4);
}

void sub_1887D9970()
{
  JUMPOUT(0x1887D9978);
}

void sub_1887D9988()
{
  JUMPOUT(0x1887D9990);
}

void sub_1887D9B30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D8B38);
}

void sub_1887D9BC8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887D9BD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D9A84);
}

void sub_1887D9C60()
{
  __cxa_end_catch();
  JUMPOUT(0x1887D9BB8);
}

void sub_1887D9C6C()
{
  JUMPOUT(0x1887D9C74);
}

void sub_1887DA128(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v39;
  void *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a30 < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  v39 = __cxa_begin_catch(a1);
  if (a2 == v36)
  {
    v40 = v39;
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    v42 = std::string::append((std::string *)&a17, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a24 = v42->__r_.__value_.__r.__words[2];
    a23 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 81, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 81, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887D9FF8);
}

void sub_1887DA758(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DA028);
}

void sub_1887DA7F0()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887DA7FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DA6ACLL);
}

void sub_1887DA888()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DA7E0);
}

void sub_1887DA894(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v39;
  void *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a30 < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  v39 = __cxa_begin_catch(a1);
  if (a2 == v36)
  {
    v40 = v39;
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    v42 = std::string::append((std::string *)&a17, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a24 = v42->__r_.__value_.__r.__words[2];
    a23 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 81, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 81, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887D9D80);
}

void sub_1887DA904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t *)va);
  JUMPOUT(0x1887DAC24);
}

void sub_1887DA910()
{
  JUMPOUT(0x1887DA918);
}

void sub_1887DAAD0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D9EFCLL);
}

void sub_1887DAB6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DAA24);
}

void sub_1887DABF8()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DAB58);
}

void sub_1887DAC04()
{
  JUMPOUT(0x1887DAC0CLL);
}

void sub_1887DAC1C()
{
  JUMPOUT(0x1887DAC24);
}

void sub_1887DADC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887D9DCCLL);
}

void sub_1887DAE5C()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887DAE68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DAD18);
}

void sub_1887DAEF4()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DAE4CLL);
}

void sub_1887DAF00()
{
  JUMPOUT(0x1887DAF08);
}

void sub_1887DB3C0(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v39;
  void *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a30 < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  v39 = __cxa_begin_catch(a1);
  if (a2 == v36)
  {
    v40 = v39;
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    v42 = std::string::append((std::string *)&a17, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a24 = v42->__r_.__value_.__r.__words[2];
    a23 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 80, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 80, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887DB290);
}

void sub_1887DB9F0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DB2C0);
}

void sub_1887DBA88()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887DBA94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DB944);
}

void sub_1887DBB20()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DBA78);
}

void sub_1887DBB2C(void *a1, int a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, std::string *a9, void *a10, void *__pa, int a12, __int16 a13, char a14, char a15, void *a16, void *a17, int a18, __int16 a19, char a20,char a21,void *a22,__int128 a23,std::string::size_type a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v36;
  void *v39;
  void *v40;
  const std::string::value_type *v41;
  std::string *v42;
  __int128 v43;

  if (SHIBYTE(a16) < 0)
    operator delete(__pa);
  if (SHIBYTE(a22) < 0)
    operator delete(a17);
  if (SHIBYTE(a24) < 0)
    operator delete((void *)a23);
  if (a30 < 0)
    operator delete(a25);
  std::ostringstream::~ostringstream((uint64_t)&a31);
  v39 = __cxa_begin_catch(a1);
  if (a2 == v36)
  {
    v40 = v39;
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a17, "Exception caught during formatting of the log line: ");
    v41 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
    v42 = std::string::append((std::string *)&a17, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    a24 = v42->__r_.__value_.__r.__words[2];
    a23 = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(&__pa, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 80, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&__pa);
    if (SHIBYTE(a16) < 0)
      operator delete(__pa);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&a31, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/Localization.cpp");
    std::string::basic_string[abi:ne180100]<0>(&a25, "toDebugJsonString");
    std::string::basic_string[abi:ne180100]<0>(&a23, "Unexpected exception caught during formatting of the log line");
    std::string::basic_string[abi:ne180100]<0>(&a17, "");
    addr_obj::Logger::log(16, (uint64_t)&a31, 80, (uint64_t)&a25, (uint64_t)&a23, (uint64_t)&a17);
    if (SHIBYTE(a22) < 0)
      operator delete(a17);
    if (SHIBYTE(a24) < 0)
      operator delete((void *)a23);
    if (a30 < 0)
      operator delete(a25);
    if (a36 < 0)
      operator delete(a31);
  }
  __cxa_end_catch();
  JUMPOUT(0x1887DB010);
}

void sub_1887DBB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  std::ostringstream::~ostringstream((uint64_t *)va);
  JUMPOUT(0x1887DBEC4);
}

void sub_1887DBBA8()
{
  JUMPOUT(0x1887DBBB0);
}

void sub_1887DBD68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DB194);
}

void sub_1887DBE00()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887DBE0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DBCBCLL);
}

void sub_1887DBE98()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DBDF0);
}

void sub_1887DBEA4()
{
  JUMPOUT(0x1887DBEACLL);
}

void sub_1887DBEBC()
{
  JUMPOUT(0x1887DBEC4);
}

void sub_1887DC064(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DB05CLL);
}

void sub_1887DC0FC()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC1A8);
}

void sub_1887DC108(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a16 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a17);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887DBFB8);
}

void sub_1887DC194()
{
  __cxa_end_catch();
  JUMPOUT(0x1887DC0ECLL);
}

void sub_1887DC1A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  std::ostringstream::~ostringstream((uint64_t)&a56);
  __cxa_call_unexpected(a1);
}

_QWORD *addr_obj::Json::operator<<<char [55]>(_QWORD *a1, char *a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  addr_obj::Json::escape(a1, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return a1;
}

_QWORD *addr_obj::operator<<(_QWORD *a1, addr_obj::Localization *this)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  addr_obj::Localization::str(this, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1887DC27C(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::string::~string((std::string *)&a10);
  __cxa_call_unexpected(a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void addr_obj::Formatting::joinLines(addr_obj::Localization *a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  char *DisplayLanguage;
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  DisplayLanguage = (char *)addr_obj::Localization::getDisplayLanguage(a1);
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  v6 = (char *)sub_1887DC580(DisplayLanguage, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  addr_obj::Formatting::joinLines(a2, (const void **)__p, a3);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1887DC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t addr_obj::Formatting::joinLines@<X0>(const std::string *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  uint64_t v9;
  void *__p[2];
  std::string::size_type v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  _QWORD v16[13];
  char v17;
  uint64_t v18;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v16, a1, 24);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  while (1)
  {
    v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, (uint64_t)__p, 0xAu);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = v14;
    if ((unint64_t)v14 >= v15)
    {
      v8 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v13, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        v7 = *(_OWORD *)__p;
        v14->__r_.__value_.__r.__words[2] = v12;
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      v8 = v6 + 1;
    }
    v14 = v8;
  }
  addr_obj::Formatting::joinLines((addr_obj *)&v13, a2, a3);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  __p[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v16[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v16[2] = v9;
  v16[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x18D764310](&v18);
}

void sub_1887DC53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

const char *sub_1887DC580(char *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  const char *v6;
  int v7;
  int *v8;
  uint64_t v9;
  int *v11;
  int v18;
  int v19;
  _WORD *v27;
  int *v33;
  _WORD *v37;
  int *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void **v45;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  addr_obj::Formatting::getLanguageCandidates(a1, &v42);
  v3 = v42;
  if (v42 != v43)
  {
    v4 = *(char *)(a2 + 23);
    v5 = *(_QWORD *)(a2 + 8);
    v6 = ", ";
    while (1)
    {
      v7 = *(unsigned __int8 *)(v3 + 23);
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
        switch(*(_BYTE *)(v3 + 23))
        {
          case 2:
            v8 = (int *)v3;
            if (*(_WORD *)v3 != 28261)
              goto LABEL_96;
            goto LABEL_300;
          case 5:
            if (*(_DWORD *)v3 == 1734307429 && *(_BYTE *)(v3 + 4) == 98)
              goto LABEL_300;
            v8 = (int *)v3;
            if (v7 == 2)
              goto LABEL_96;
            if (v7 != 5)
              goto LABEL_292;
            if (*(_DWORD *)v3 != 1667197050 || *(_BYTE *)(v3 + 4) != 110)
              goto LABEL_33;
            goto LABEL_295;
          case 6:
            goto LABEL_100;
          case 7:
            if (*(_DWORD *)v3 != 1751083130 || *(_DWORD *)(v3 + 3) != 1936613736)
            {
              v8 = (int *)v3;
              switch((int)v3)
              {
                case 0:
                  goto LABEL_96;
                case 3:
                  goto LABEL_68;
                case 4:
                  goto LABEL_100;
                case 5:
                  if (*(_DWORD *)v3 != 1751083130 || *(_DWORD *)(v3 + 3) != 1953390952)
                    goto LABEL_292;
                  goto LABEL_295;
                default:
                  goto LABEL_292;
              }
            }
            goto LABEL_295;
          default:
            goto LABEL_292;
        }
      }
      v9 = *(_QWORD *)(v3 + 8);
      if (v9 == 2 && **(_WORD **)v3 == 28261)
        goto LABEL_300;
      if (v9 == 5)
      {
        if (**(_DWORD **)v3 == 1734307429 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 98)
          goto LABEL_300;
        v9 = *(_QWORD *)(v3 + 8);
        if (v9 == 5)
        {
          v11 = *(int **)v3;
          if (**(_DWORD **)v3 == 1667197050 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 110)
          {
LABEL_295:
            v6 = " ";
            goto LABEL_300;
          }
          if ((v7 & 0x80) == 0)
          {
            v8 = (int *)v3;
            if (v7 == 2)
              goto LABEL_96;
            if (v7 != 5)
              goto LABEL_292;
LABEL_33:
            if (*(_DWORD *)v3 == 1751083130 && *(_BYTE *)(v3 + 4) == 107)
              goto LABEL_295;
            goto LABEL_67;
          }
          v18 = *v11;
          v19 = *((unsigned __int8 *)v11 + 4);
          if (v18 == 1751083130 && v19 == 107)
            goto LABEL_295;
          v9 = *(_QWORD *)(v3 + 8);
        }
      }
      if (v9 == 7)
      {
        if (**(_DWORD **)v3 == 1751083130 && *(_DWORD *)(*(_QWORD *)v3 + 3) == 1936613736)
          goto LABEL_295;
        v9 = *(_QWORD *)(v3 + 8);
        if (v9 == 7)
        {
          if (**(_DWORD **)v3 == 1751083130 && *(_DWORD *)(*(_QWORD *)v3 + 3) == 1953390952)
            goto LABEL_295;
          if ((v7 & 0x80) == 0)
          {
            v8 = (int *)v3;
            if (v7 == 2)
              goto LABEL_96;
            if (v7 == 6)
            {
LABEL_100:
              if (*(_DWORD *)v3 == 878670693 && *(_WORD *)(v3 + 4) == 14641)
                goto LABEL_300;
              if ((v7 & 0x80) == 0)
              {
                if (v7 != 2)
                {
LABEL_106:
                  if (v7 != 5)
                    goto LABEL_292;
LABEL_107:
                  if (*(_DWORD *)v3 == 1834972005 && *(_BYTE *)(v3 + 4) == 120)
                    goto LABEL_300;
                  if (*(_DWORD *)v3 == 1667199590 && *(_BYTE *)(v3 + 4) == 97)
                    goto LABEL_300;
                  if (*(_DWORD *)v3 == 1650422896 && *(_BYTE *)(v3 + 4) == 114)
                    goto LABEL_300;
                  if (*(_DWORD *)v3 == 1885303920 && *(_BYTE *)(v3 + 4) == 116)
                    goto LABEL_300;
                  goto LABEL_292;
                }
                goto LABEL_156;
              }
              goto LABEL_164;
            }
LABEL_67:
            if (v7 != 5)
              goto LABEL_292;
LABEL_68:
            if (*(_DWORD *)v3 == 1952409722 && *(_BYTE *)(v3 + 4) == 119)
              goto LABEL_295;
            if ((v7 & 0x80) == 0)
            {
              v8 = (int *)v3;
              if (v7 != 2)
              {
                if (v7 != 5)
                  goto LABEL_292;
                if (*(_DWORD *)v3 == 1633644133 && *(_BYTE *)(v3 + 4) == 117)
                  goto LABEL_300;
                goto LABEL_107;
              }
LABEL_96:
              if (*(_WORD *)v8 == 29281)
              {
                if ((v4 & 0x80000000) == 0)
                {
                  v27 = (_WORD *)a2;
                  if (v4 != 2)
                    goto LABEL_127;
LABEL_126:
                  if (*v27 == 16723)
                    goto LABEL_299;
                  goto LABEL_127;
                }
                v27 = *(_WORD **)a2;
                if (v5 == 2)
                  goto LABEL_126;
              }
LABEL_127:
              if ((v7 & 0x80) == 0)
              {
                if (v7 != 2)
                  goto LABEL_292;
                if (*(_WORD *)v3 == 29281)
                  goto LABEL_299;
                if (*(_WORD *)v3 == 24931 || *(_WORD *)v3 == 29539)
                  goto LABEL_300;
                goto LABEL_132;
              }
              v9 = *(_QWORD *)(v3 + 8);
              if (v9 == 2)
              {
                if (**(_WORD **)v3 == 29281)
                {
LABEL_299:
                  v6 = "، \u200F";
                  goto LABEL_300;
                }
                if (**(_WORD **)v3 == 24931)
                  goto LABEL_300;
                v9 = *(_QWORD *)(v3 + 8);
                if (v9 == 2)
                {
                  if (**(_WORD **)v3 == 29539)
                    goto LABEL_300;
                  if ((v7 & 0x80) == 0)
                  {
                    if (v7 != 2)
                      goto LABEL_292;
LABEL_132:
                    if (*(_WORD *)v3 == 24932 || *(_WORD *)v3 == 25956)
                      goto LABEL_300;
LABEL_134:
                    if (*(_WORD *)v3 == 27749 || *(_WORD *)v3 == 29541)
                      goto LABEL_300;
LABEL_156:
                    if (*(_WORD *)v3 == 26982)
                      goto LABEL_300;
                    v33 = (int *)v3;
                    if (*(_WORD *)v3 == 29286)
                      goto LABEL_300;
                    goto LABEL_186;
                  }
                  if (**(_WORD **)v3 == 24932)
                    goto LABEL_300;
                  v9 = *(_QWORD *)(v3 + 8);
                  if (v9 == 2)
                  {
                    if (**(_WORD **)v3 == 25956)
                      goto LABEL_300;
                    if ((v7 & 0x80) == 0)
                    {
                      if (v7 != 2)
                        goto LABEL_292;
                      goto LABEL_134;
                    }
                    if (**(_WORD **)v3 == 27749)
                      goto LABEL_300;
                    v9 = *(_QWORD *)(v3 + 8);
                    if (v9 == 2)
                    {
                      if (**(_WORD **)v3 == 29541)
                        goto LABEL_300;
                      if ((v7 & 0x80) == 0)
                      {
                        if (v7 != 2)
                          goto LABEL_292;
                        goto LABEL_156;
                      }
                    }
                  }
                }
              }
              goto LABEL_159;
            }
            goto LABEL_86;
          }
        }
      }
      if (v9 != 5)
        goto LABEL_94;
      if (**(_DWORD **)v3 == 1952409722 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 119)
        goto LABEL_295;
LABEL_86:
      v9 = *(_QWORD *)(v3 + 8);
      if (v9 == 5)
      {
        if (**(_DWORD **)v3 == 1633644133 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 117)
          goto LABEL_300;
        if ((v7 & 0x80) == 0)
        {
          v8 = (int *)v3;
          if (v7 != 2)
            goto LABEL_106;
          goto LABEL_96;
        }
      }
LABEL_94:
      if (v9 == 2)
      {
        v8 = *(int **)v3;
        goto LABEL_96;
      }
LABEL_159:
      if (v9 != 6)
        goto LABEL_165;
      if (**(_DWORD **)v3 == 878670693 && *(_WORD *)(*(_QWORD *)v3 + 4) == 14641)
        goto LABEL_300;
LABEL_164:
      v9 = *(_QWORD *)(v3 + 8);
LABEL_165:
      if (v9 == 5)
      {
        if (**(_DWORD **)v3 == 1834972005 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 120)
          goto LABEL_300;
        v9 = *(_QWORD *)(v3 + 8);
      }
      if (v9 != 2)
        goto LABEL_178;
      if (**(_WORD **)v3 == 26982)
        goto LABEL_300;
      v9 = *(_QWORD *)(v3 + 8);
      if (v9 != 2)
        goto LABEL_178;
      if (**(_WORD **)v3 == 29286)
        goto LABEL_300;
      if ((v7 & 0x80) == 0)
      {
        v33 = (int *)v3;
        if (v7 != 2)
          goto LABEL_292;
      }
      else
      {
LABEL_178:
        if (v9 == 5)
        {
          if (**(_DWORD **)v3 == 1667199590 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 97)
            goto LABEL_300;
          v9 = *(_QWORD *)(v3 + 8);
        }
        if (v9 != 2)
          goto LABEL_249;
        v33 = *(int **)v3;
      }
LABEL_186:
      if (*(_WORD *)v33 == 25960)
      {
        if (v4 < 0)
        {
          v37 = *(_WORD **)a2;
          if (v5 == 2)
          {
LABEL_191:
            if (*v37 == 19529)
              goto LABEL_300;
          }
        }
        else
        {
          v37 = (_WORD *)a2;
          if (v4 == 2)
            goto LABEL_191;
        }
      }
      if ((v7 & 0x80) == 0)
      {
        if (v7 != 2)
          goto LABEL_292;
        if (*(_WORD *)v3 == 25960 || *(_WORD *)v3 == 26984 || *(_WORD *)v3 == 29288)
          goto LABEL_300;
        goto LABEL_197;
      }
      v9 = *(_QWORD *)(v3 + 8);
      if (v9 == 2)
      {
        if (**(_WORD **)v3 == 25960 || **(_WORD **)v3 == 26984)
          goto LABEL_300;
        v9 = *(_QWORD *)(v3 + 8);
        if (v9 == 2)
        {
          if (**(_WORD **)v3 == 29288)
            goto LABEL_300;
          if ((v7 & 0x80) == 0)
          {
            if (v7 != 2)
              goto LABEL_292;
LABEL_197:
            if (*(_WORD *)v3 == 30056 || *(_WORD *)v3 == 25705)
              goto LABEL_300;
LABEL_199:
            if (*(_WORD *)v3 == 29801 || *(_WORD *)v3 == 24938)
              goto LABEL_300;
LABEL_221:
            if (*(_WORD *)v3 == 28523 || *(_WORD *)v3 == 29549)
              goto LABEL_300;
LABEL_229:
            if (*(_WORD *)v3 == 25198 || *(_WORD *)v3 == 28526)
              goto LABEL_300;
LABEL_237:
            if (*(_WORD *)v3 == 27758 || *(_WORD *)v3 == 27760)
              goto LABEL_300;
LABEL_245:
            if (*(_WORD *)v3 == 29808)
              goto LABEL_300;
LABEL_260:
            if (v7 == 2)
            {
              if (*(_WORD *)v3 == 28530 || *(_WORD *)v3 == 30066)
                goto LABEL_300;
LABEL_270:
              if (*(_WORD *)v3 == 27507 || *(_WORD *)v3 == 30323)
                goto LABEL_300;
LABEL_278:
              if (*(_WORD *)v3 == 26740)
                goto LABEL_295;
              if (*(_WORD *)v3 == 29300)
                goto LABEL_300;
LABEL_286:
              if (*(_WORD *)v3 == 27509)
                goto LABEL_300;
              v40 = (int *)v3;
LABEL_291:
              if (*(_WORD *)v40 == 26998)
                goto LABEL_300;
              goto LABEL_292;
            }
            goto LABEL_292;
          }
          if (**(_WORD **)v3 == 30056)
            goto LABEL_300;
          v9 = *(_QWORD *)(v3 + 8);
          if (v9 == 2)
          {
            if (**(_WORD **)v3 == 25705)
              goto LABEL_300;
            if ((v7 & 0x80) == 0)
            {
              if (v7 != 2)
                goto LABEL_292;
              goto LABEL_199;
            }
            if (**(_WORD **)v3 == 29801)
              goto LABEL_300;
            v9 = *(_QWORD *)(v3 + 8);
            if (v9 == 2)
            {
              if (**(_WORD **)v3 == 24938)
                goto LABEL_300;
              if ((v7 & 0x80) == 0)
              {
                if (v7 != 2)
                  goto LABEL_292;
                goto LABEL_221;
              }
              if (**(_WORD **)v3 == 28523)
                goto LABEL_300;
              v9 = *(_QWORD *)(v3 + 8);
              if (v9 == 2)
              {
                if (**(_WORD **)v3 == 29549)
                  goto LABEL_300;
                if ((v7 & 0x80) == 0)
                {
                  if (v7 != 2)
                    goto LABEL_292;
                  goto LABEL_229;
                }
                if (**(_WORD **)v3 == 25198)
                  goto LABEL_300;
                v9 = *(_QWORD *)(v3 + 8);
                if (v9 == 2)
                {
                  if (**(_WORD **)v3 == 28526)
                    goto LABEL_300;
                  if ((v7 & 0x80) == 0)
                  {
                    if (v7 != 2)
                      goto LABEL_292;
                    goto LABEL_237;
                  }
                  if (**(_WORD **)v3 == 27758)
                    goto LABEL_300;
                  v9 = *(_QWORD *)(v3 + 8);
                  if (v9 == 2)
                  {
                    if (**(_WORD **)v3 == 27760)
                      goto LABEL_300;
                    if ((v7 & 0x80) == 0)
                    {
                      if (v7 != 2)
                        goto LABEL_292;
                      goto LABEL_245;
                    }
                    if (**(_WORD **)v3 == 29808)
                      goto LABEL_300;
                    v9 = *(_QWORD *)(v3 + 8);
                  }
                }
              }
            }
          }
        }
      }
LABEL_249:
      if (v9 == 5)
      {
        if (**(_DWORD **)v3 == 1650422896 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 114)
          goto LABEL_300;
        v9 = *(_QWORD *)(v3 + 8);
        if (v9 == 5)
        {
          if (**(_DWORD **)v3 == 1885303920 && *(_BYTE *)(*(_QWORD *)v3 + 4) == 116)
            goto LABEL_300;
          if ((v7 & 0x80) == 0)
            goto LABEL_260;
        }
      }
      if (v9 == 2)
      {
        if (**(_WORD **)v3 == 28530)
          goto LABEL_300;
        if (*(_QWORD *)(v3 + 8) == 2)
        {
          if (**(_WORD **)v3 == 30066)
            goto LABEL_300;
          if ((v7 & 0x80) != 0)
          {
            if (**(_WORD **)v3 == 27507)
              goto LABEL_300;
            if (*(_QWORD *)(v3 + 8) == 2)
            {
              if (**(_WORD **)v3 == 30323)
                goto LABEL_300;
              if ((v7 & 0x80) != 0)
              {
                if (**(_WORD **)v3 == 26740)
                  goto LABEL_295;
                if (*(_QWORD *)(v3 + 8) == 2)
                {
                  if (**(_WORD **)v3 == 29300)
                    goto LABEL_300;
                  if ((v7 & 0x80) != 0)
                  {
                    if (**(_WORD **)v3 == 27509)
                      goto LABEL_300;
                    if (*(_QWORD *)(v3 + 8) == 2)
                    {
                      v40 = *(int **)v3;
                      goto LABEL_291;
                    }
                  }
                  else if (v7 == 2)
                  {
                    goto LABEL_286;
                  }
                }
              }
              else if (v7 == 2)
              {
                goto LABEL_278;
              }
            }
          }
          else if (v7 == 2)
          {
            goto LABEL_270;
          }
        }
      }
LABEL_292:
      v3 += 24;
      if (v3 == v43)
        goto LABEL_300;
    }
  }
  v6 = ", ";
LABEL_300:
  v45 = (void **)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v45);
  return v6;
}

void sub_1887DD254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](_QWORD *a1, const std::string *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = MEMORY[0x1E0DE4FD0];
  v6 = MEMORY[0x1E0DE4FD0] + 104;
  a1[16] = MEMORY[0x1E0DE4FD0] + 104;
  a1[2] = v5 + 64;
  v7 = a1 + 2;
  v8 = (uint64_t)(a1 + 3);
  v9 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *a1 = v10;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v10 - 24)) = v11;
  a1[1] = 0;
  v12 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v12, a1 + 3);
  v12[1].__vftable = 0;
  v12[1].__fmtflags_ = -1;
  v13 = v9[4];
  v14 = v9[5];
  a1[2] = v13;
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v13 - 24)) = v14;
  v15 = v9[1];
  *a1 = v15;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v15 - 24)) = v9[6];
  *a1 = v5 + 24;
  a1[16] = v6;
  a1[2] = v5 + 64;
  std::stringbuf::basic_stringbuf[abi:ne180100](v8, a2, a3);
  return a1;
}

void sub_1887DD364(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x18D764310](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x18D764190](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1887DD4B8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1887DD484);
  }
  __cxa_rethrow();
}

void sub_1887DD4FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void addr_obj::Formatting::joinLines(addr_obj *a1@<X0>, const void **a2@<X1>, std::string *a3@<X8>)
{
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v13;
  std::string::size_type v14;
  void *__p[2];
  unsigned __int8 v16;

  v6 = addr_obj::emptyString(a1);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
  }
  v9 = *(_QWORD *)a1;
  v8 = *((_QWORD *)a1 + 1);
  if (*(_QWORD *)a1 != v8)
  {
    while (1)
    {
      if (*(char *)(v9 + 23) < 0)
      {
        if (*(_QWORD *)(v9 + 8))
          break;
      }
      else if (*(_BYTE *)(v9 + 23))
      {
        break;
      }
      v9 += 24;
      if (v9 == v8)
        return;
    }
  }
  if (v9 == v8)
    return;
  std::string::operator=(a3, (const std::string *)v9);
  v10 = v9 + 24;
  v11 = *((_QWORD *)a1 + 1);
  if (v10 == v11)
    return;
  do
  {
    for (v10 += 24; (*(char *)(v10 - 1) & 0x80000000) == 0; v10 += 24)
    {
      if (*(_BYTE *)(v10 - 1))
        goto LABEL_21;
LABEL_18:
      if (v10 == v11)
        return;
    }
    if (!*(_QWORD *)(v10 - 16))
      goto LABEL_18;
LABEL_21:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (const void **)(v10 - 24), (uint64_t)__p);
    if ((v16 & 0x80u) == 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v14 = v16;
    else
      v14 = (std::string::size_type)__p[1];
    std::string::append(a3, (const std::string::value_type *)v13, v14);
    if ((char)v16 < 0)
      operator delete(__p[0]);
    v11 = *((_QWORD *)a1 + 1);
  }
  while (v10 != v11);
}

void sub_1887DD658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

void addr_obj::Formatting::joinLines(addr_obj::Localization *a1@<X0>, addr_obj *a2@<X1>, std::string *a3@<X8>)
{
  char *DisplayLanguage;
  char *v6;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;

  DisplayLanguage = (char *)addr_obj::Localization::getDisplayLanguage(a1);
  std::string::basic_string[abi:ne180100]<0>(v7, "");
  v6 = (char *)sub_1887DC580(DisplayLanguage, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  addr_obj::Formatting::joinLines(a2, (const void **)__p, a3);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1887DD720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void addr_obj::Formatting::buildLegacyShortAddress(addr_obj *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v7;
  std::string::size_type v8;
  uint64_t v9;
  uint64_t v10;
  char *DisplayLanguage;
  int v14;
  size_t v15;
  std::string *p_p;
  const std::string::value_type *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string::size_type v22;
  __int128 *v23;
  __int128 v24;
  const std::string::value_type *v25;
  size_t v26;
  std::string *v27;
  const std::string::value_type *v28;
  int v29;
  size_t v30;
  std::string *v31;
  const std::string::value_type *v32;
  int v33;
  size_t v34;
  std::string *v35;
  const std::string::value_type *v36;
  char *v37;
  int v38;
  size_t v39;
  std::string *v40;
  const std::string::value_type *v41;
  char *v42;
  int v43;
  size_t v44;
  std::string *v45;
  const std::string::value_type *v46;
  char *v47;
  int v48;
  size_t v49;
  std::string *v50;
  const std::string::value_type *v51;
  char *v52;
  int v53;
  std::string *v54;
  __int128 v55;
  std::string __p;

  v7 = *(char *)(a2 + 23);
  v8 = *(_QWORD *)(a2 + 8);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = *(unsigned __int8 *)(a3 + 23);
  if (!v9)
  {
    v8 = *(_QWORD *)(a3 + 8);
    if ((v10 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
    if (v21)
    {
      if ((v10 & 0x80) == 0)
      {
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
        v22 = *(_QWORD *)(a3 + 16);
LABEL_33:
        a5->__r_.__value_.__r.__words[2] = v22;
        return;
      }
      v25 = *(const std::string::value_type **)a3;
    }
    else
    {
LABEL_34:
      v23 = addr_obj::emptyString(a1);
      if ((*((char *)v23 + 23) & 0x80000000) == 0)
      {
        v24 = *v23;
        a5->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
        *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v24;
        return;
      }
      v25 = *(const std::string::value_type **)v23;
      v8 = *((_QWORD *)v23 + 1);
    }
LABEL_39:
    std::string::__init_copy_ctor_external(a5, v25, v8);
    return;
  }
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    if ((v7 & 0x80000000) == 0)
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v22 = *(_QWORD *)(a2 + 16);
      goto LABEL_33;
    }
    v25 = *(const std::string::value_type **)a2;
    goto LABEL_39;
  }
  DisplayLanguage = (char *)addr_obj::Localization::getDisplayLanguage(a1);
  a1 = (addr_obj *)sub_1887DC580(DisplayLanguage, a4);
  switch(v14)
  {
    case 0:
      if (*(char *)(a2 + 23) >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v15)
      {
        if (*(char *)(a2 + 23) >= 0)
          v17 = (const std::string::value_type *)a2;
        else
          v17 = *(const std::string::value_type **)a2;
        memmove(p_p, v17, v15);
      }
      *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v15) = 32;
      v18 = *(char *)(a3 + 23);
      if (v18 >= 0)
        v19 = (const std::string::value_type *)a3;
      else
        v19 = *(const std::string::value_type **)a3;
      if (v18 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      goto LABEL_137;
    case 1:
      if (*(char *)(a2 + 23) >= 0)
        v26 = *(unsigned __int8 *)(a2 + 23);
      else
        v26 = *(_QWORD *)(a2 + 8);
      v27 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v26 + 2);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v26)
      {
        if (*(char *)(a2 + 23) >= 0)
          v28 = (const std::string::value_type *)a2;
        else
          v28 = *(const std::string::value_type **)a2;
        memmove(v27, v28, v26);
      }
      strcpy((char *)v27 + v26, ", ");
      v29 = *(char *)(a3 + 23);
      if (v29 >= 0)
        v19 = (const std::string::value_type *)a3;
      else
        v19 = *(const std::string::value_type **)a3;
      if (v29 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      goto LABEL_137;
    case 2:
      if (*(char *)(a3 + 23) >= 0)
        v30 = *(unsigned __int8 *)(a3 + 23);
      else
        v30 = *(_QWORD *)(a3 + 8);
      v31 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v30 + 1);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v30)
      {
        if (*(char *)(a3 + 23) >= 0)
          v32 = (const std::string::value_type *)a3;
        else
          v32 = *(const std::string::value_type **)a3;
        memmove(v31, v32, v30);
      }
      *(_WORD *)((char *)&v31->__r_.__value_.__l.__data_ + v30) = 32;
      v33 = *(char *)(a2 + 23);
      if (v33 >= 0)
        v19 = (const std::string::value_type *)a2;
      else
        v19 = *(const std::string::value_type **)a2;
      if (v33 >= 0)
        v20 = *(unsigned __int8 *)(a2 + 23);
      else
        v20 = *(_QWORD *)(a2 + 8);
      goto LABEL_137;
    case 3:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a3, (const void **)a2, (uint64_t)a5);
      return;
    case 4:
      if (*(char *)(a3 + 23) >= 0)
        v34 = *(unsigned __int8 *)(a3 + 23);
      else
        v34 = *(_QWORD *)(a3 + 8);
      v35 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v34 + 5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v34)
      {
        if (*(char *)(a3 + 23) >= 0)
          v36 = (const std::string::value_type *)a3;
        else
          v36 = *(const std::string::value_type **)a3;
        memmove(v35, v36, v34);
      }
      v37 = (char *)v35 + v34;
      *(_DWORD *)v37 = -2132664276;
      *((_WORD *)v37 + 2) = 143;
      v38 = *(char *)(a2 + 23);
      if (v38 >= 0)
        v19 = (const std::string::value_type *)a2;
      else
        v19 = *(const std::string::value_type **)a2;
      if (v38 >= 0)
        v20 = *(unsigned __int8 *)(a2 + 23);
      else
        v20 = *(_QWORD *)(a2 + 8);
      goto LABEL_137;
    case 5:
      if (*(char *)(a3 + 23) >= 0)
        v39 = *(unsigned __int8 *)(a3 + 23);
      else
        v39 = *(_QWORD *)(a3 + 8);
      v40 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v39 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v39)
      {
        if (*(char *)(a3 + 23) >= 0)
          v41 = (const std::string::value_type *)a3;
        else
          v41 = *(const std::string::value_type **)a3;
        memmove(v40, v41, v39);
      }
      v42 = (char *)v40 + v39;
      *((_WORD *)v42 + 2) = -28800;
      *(_DWORD *)v42 = -501183272;
      v42[6] = 0;
      v43 = *(char *)(a2 + 23);
      if (v43 >= 0)
        v19 = (const std::string::value_type *)a2;
      else
        v19 = *(const std::string::value_type **)a2;
      if (v43 >= 0)
        v20 = *(unsigned __int8 *)(a2 + 23);
      else
        v20 = *(_QWORD *)(a2 + 8);
      goto LABEL_137;
    case 6:
      if (*(char *)(a2 + 23) >= 0)
        v49 = *(unsigned __int8 *)(a2 + 23);
      else
        v49 = *(_QWORD *)(a2 + 8);
      v50 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v49)
      {
        if (*(char *)(a2 + 23) >= 0)
          v51 = (const std::string::value_type *)a2;
        else
          v51 = *(const std::string::value_type **)a2;
        memmove(v50, v51, v49);
      }
      v52 = (char *)v50 + v49;
      *(_DWORD *)v52 = -2132664276;
      *((_WORD *)v52 + 2) = 143;
      v53 = *(char *)(a3 + 23);
      if (v53 >= 0)
        v19 = (const std::string::value_type *)a3;
      else
        v19 = *(const std::string::value_type **)a3;
      if (v53 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
      goto LABEL_137;
    case 7:
      if (*(char *)(a2 + 23) >= 0)
        v44 = *(unsigned __int8 *)(a2 + 23);
      else
        v44 = *(_QWORD *)(a2 + 8);
      v45 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v44 + 6);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v44)
      {
        if (*(char *)(a2 + 23) >= 0)
          v46 = (const std::string::value_type *)a2;
        else
          v46 = *(const std::string::value_type **)a2;
        memmove(v45, v46, v44);
      }
      v47 = (char *)v45 + v44;
      *((_WORD *)v47 + 2) = -28800;
      *(_DWORD *)v47 = -501183272;
      v47[6] = 0;
      v48 = *(char *)(a3 + 23);
      if (v48 >= 0)
        v19 = (const std::string::value_type *)a3;
      else
        v19 = *(const std::string::value_type **)a3;
      if (v48 >= 0)
        v20 = *(unsigned __int8 *)(a3 + 23);
      else
        v20 = *(_QWORD *)(a3 + 8);
LABEL_137:
      v54 = std::string::append(&__p, v19, v20);
      v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
      a5->__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = v55;
      v54->__r_.__value_.__l.__size_ = 0;
      v54->__r_.__value_.__r.__words[2] = 0;
      v54->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      break;
    default:
      goto LABEL_34;
  }
}

void sub_1887DDD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL addr_obj::Formatting::overrideLegacyShortAddress(addr_obj::Localization *a1, uint64_t a2)
{
  char *DisplayLanguage;
  int v4;

  DisplayLanguage = (char *)addr_obj::Localization::getDisplayLanguage(a1);
  sub_1887DC580(DisplayLanguage, a2);
  return (v4 & 0xFFFFFFFE) == 6;
}

void addr_obj::Formatting::getLanguageCandidates(char *a1, uint64_t *a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  std::string::value_type v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unsigned int v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  BOOL v35;
  std::string v36;

  std::vector<std::string>::__clear[abi:ne180100](a2);
  memset(&v36, 0, sizeof(v36));
  v4 = a1[23];
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  if (v4 >= 0)
    v6 = a1[23];
  else
    v6 = *((_QWORD *)a1 + 1);
  v7 = MEMORY[0x1E0C80978];
  if (v6)
  {
    v8 = &v5[v6];
    while (1)
    {
      v9 = *v5;
      if ((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x500uLL) : *(_DWORD *)(v7 + 4 * v9 + 60) & 0x500)
        break;
      ++v5;
      if (!--v6)
      {
        v5 = v8;
        break;
      }
    }
  }
LABEL_15:
  while (1)
  {
    if (a1[23] < 0)
    {
      v13 = *(char **)a1;
      v11 = *((_QWORD *)a1 + 1);
      v12 = (char *)(*(_QWORD *)a1 + v11);
    }
    else
    {
      v11 = a1[23];
      v12 = &a1[v11];
      v13 = a1;
    }
    if (v5 == v12)
      break;
    v14 = &v13[v11];
    if (v5 != &v13[v11])
    {
      v15 = v5;
      while (1)
      {
        v16 = *v15;
        if (!((v16 & 0x80000000) != 0 ? __maskrune(v16, 0x500uLL) : *(_DWORD *)(v7 + 4 * v16 + 60) & 0x500))
          break;
        if (++v15 == v14)
        {
          v15 = v14;
          break;
        }
      }
      if (v5 != v15)
      {
        do
        {
          v18 = __tolower(*v5);
          std::string::push_back(&v36, v18);
          ++v5;
        }
        while (v5 != v15);
        v5 = v15;
      }
    }
    v19 = a2[1];
    if (v19 >= a2[2])
    {
      v21 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, (__int128 *)&v36);
    }
    else
    {
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a2[1], v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
      }
      else
      {
        v20 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
        *(_QWORD *)(v19 + 16) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
        *(_OWORD *)v19 = v20;
      }
      v21 = v19 + 24;
      a2[1] = v19 + 24;
    }
    a2[1] = v21;
    std::string::push_back(&v36, 95);
    v22 = a1[23];
    if ((v22 & 0x80u) == 0)
      v23 = a1;
    else
      v23 = *(char **)a1;
    if ((v22 & 0x80u) != 0)
      v22 = *((_QWORD *)a1 + 1);
    v24 = &v23[v22];
    if (v5 != &v23[v22])
    {
      while (1)
      {
        v25 = *v5;
        if ((v25 & 0x80000000) != 0 ? __maskrune(v25, 0x500uLL) : *(_DWORD *)(v7 + 4 * v25 + 60) & 0x500)
          break;
        if (++v5 == v24)
        {
          v5 = v24;
          goto LABEL_15;
        }
      }
    }
  }
  v27 = *a2;
  v28 = a2[1];
  v29 = v28 - 24;
  if (*a2 != v28 && v29 > v27)
  {
    v31 = v27 + 24;
    do
    {
      v32 = *(_QWORD *)(v31 - 8);
      v33 = *(_OWORD *)(v31 - 24);
      v34 = *(_QWORD *)(v29 + 16);
      *(_OWORD *)(v31 - 24) = *(_OWORD *)v29;
      *(_QWORD *)(v31 - 8) = v34;
      *(_OWORD *)v29 = v33;
      *(_QWORD *)(v29 + 16) = v32;
      v29 -= 24;
      v35 = v31 >= v29;
      v31 += 24;
    }
    while (!v35);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
}

void sub_1887DE048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::Formatting::stripCountry(std::string *__str@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  std::string::size_type v7;
  std::string::size_type size;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  std::string *v16;
  uint64_t v17;
  void *v18;
  std::string *v19;
  std::string::size_type v20;
  unint64_t v21;
  std::string::size_type v22;
  char v23;
  std::string *v24;
  __int128 *v25;
  size_t v26;
  std::string::size_type v27;
  char *v28;
  std::string::size_type v29;
  std::string::size_type v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  std::string *v34;
  uint64_t v35;
  std::string::size_type v36;
  void *v37;
  std::string::size_type v38;
  BOOL v39;
  std::string::size_type v40;
  std::string *v41;
  __int128 *v42;
  std::string::size_type v43;
  std::string::size_type v44;
  uint64_t v45;
  std::string::size_type v46;
  int v47;
  std::string::size_type v48;
  std::string *v49;
  size_t v50;
  char *v51;
  void *v52;
  std::string::size_type v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  __int128 v63;
  std::string *v64;
  __int128 v65;
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string v71;

  v6 = atomic_load((unsigned __int8 *)&qword_1EDF501F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF501F8))
  {
    memset(&v66, 0, sizeof(v66));
    v54 = std::string::append(&v66, "\n");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v67, " ");
    v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    v58 = std::string::append(&v68, ", ");
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v69, ", \u200F");
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    v62 = std::string::append(&v70, "، \u200F");
    v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
    v71.__r_.__value_.__r.__words[2] = v62->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v71.__r_.__value_.__l.__data_ = v63;
    v62->__r_.__value_.__l.__size_ = 0;
    v62->__r_.__value_.__r.__words[2] = 0;
    v62->__r_.__value_.__r.__words[0] = 0;
    v64 = std::string::append(&v71, "，");
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    unk_1EDF501F0 = *((_QWORD *)&v64->__r_.__value_.__l + 2);
    xmmword_1EDF501E0 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v71.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v66.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_1EDF501F8);
  }
  if ((a2[23] & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
    if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_13;
LABEL_114:
    v10 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
    size = __str->__r_.__value_.__l.__size_;
    goto LABEL_115;
  }
  size = __str->__r_.__value_.__l.__size_;
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v9 = __str->__r_.__value_.__l.__size_;
  if (v9 >= v7 + 2)
  {
    std::string::basic_string(&v71, __str, 0, v7, (std::allocator<char> *)&v70);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v11 = v71.__r_.__value_.__l.__size_;
    v12 = a2[23];
    LODWORD(v13) = (char)v12;
    v14 = *((_QWORD *)a2 + 1);
    if ((v12 & 0x80u) != 0)
      v12 = *((_QWORD *)a2 + 1);
    if (v11 == v12)
    {
      if ((int)v13 >= 0)
        v15 = a2;
      else
        v15 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v18 = (void *)v71.__r_.__value_.__r.__words[0];
        if (memcmp(v71.__r_.__value_.__l.__data_, v15, v71.__r_.__value_.__l.__size_))
        {
LABEL_32:
          operator delete(v18);
          LOBYTE(v13) = a2[23];
          v14 = *((_QWORD *)a2 + 1);
          goto LABEL_58;
        }
      }
      else if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
      {
        v16 = &v71;
        v17 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
        while (v16->__r_.__value_.__s.__data_[0] == *v15)
        {
          v16 = (std::string *)((char *)v16 + 1);
          ++v15;
          if (!--v17)
            goto LABEL_33;
        }
        goto LABEL_29;
      }
LABEL_33:
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = __str;
      else
        v19 = (std::string *)__str->__r_.__value_.__r.__words[0];
      v20 = std::string::find((const std::string *)&xmmword_1EDF501E0, v19->__r_.__value_.__s.__data_[v11], 0);
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v71.__r_.__value_.__l.__data_);
      LODWORD(v13) = (char)a2[23];
      v14 = *((_QWORD *)a2 + 1);
      if (v20 != -1)
      {
        if ((int)v13 >= 0)
          v21 = a2[23];
        else
          v21 = *((_QWORD *)a2 + 1);
        v22 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        v23 = v22;
        if ((v22 & 0x80u) == 0)
          v24 = __str;
        else
          v24 = (std::string *)__str->__r_.__value_.__r.__words[0];
        if ((v22 & 0x80u) != 0)
          v22 = __str->__r_.__value_.__l.__size_;
        if (byte_1EDF501F7 >= 0)
          v25 = &xmmword_1EDF501E0;
        else
          v25 = (__int128 *)xmmword_1EDF501E0;
        if (byte_1EDF501F7 >= 0)
          v26 = byte_1EDF501F7;
        else
          v26 = *((_QWORD *)&xmmword_1EDF501E0 + 1);
        v27 = v22 - v21;
        if (v22 <= v21)
          goto LABEL_113;
        v28 = (char *)v24 + v21;
        if (v26)
        {
          while (memchr(v25, *v28, v26))
          {
            ++v28;
            if (!--v27)
              goto LABEL_113;
          }
        }
        v53 = v28 - (char *)v24;
LABEL_108:
        if (v53 != -1 && v9 != -1 && v9 > v53)
        {
          std::string::basic_string(a3, __str, v53, v9 - v53, (std::allocator<char> *)&v71);
          return;
        }
        v23 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
LABEL_113:
        if ((v23 & 0x80) == 0)
          goto LABEL_13;
        goto LABEL_114;
      }
LABEL_58:
      v29 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
      if ((v29 & 0x80u) != 0)
        v29 = __str->__r_.__value_.__l.__size_;
      v13 = v13;
      if ((v13 & 0x80u) != 0)
        v13 = v14;
      std::string::basic_string(&v71, __str, v29 - v13, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v70);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      else
        v30 = v71.__r_.__value_.__l.__size_;
      v31 = a2[23];
      v32 = (char)v31;
      if ((v31 & 0x80u) != 0)
        v31 = *((_QWORD *)a2 + 1);
      if (v30 == v31)
      {
        if (v32 >= 0)
          v33 = a2;
        else
          v33 = *(unsigned __int8 **)a2;
        if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v36 = v71.__r_.__value_.__r.__words[0];
          if (memcmp(v71.__r_.__value_.__l.__data_, v33, v71.__r_.__value_.__l.__size_))
          {
LABEL_80:
            v37 = (void *)v36;
LABEL_81:
            operator delete(v37);
            goto LABEL_107;
          }
        }
        else if (*((_BYTE *)&v71.__r_.__value_.__s + 23))
        {
          v34 = &v71;
          v35 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
          while (v34->__r_.__value_.__s.__data_[0] == *v33)
          {
            v34 = (std::string *)((char *)v34 + 1);
            ++v33;
            if (!--v35)
              goto LABEL_82;
          }
          goto LABEL_77;
        }
LABEL_82:
        v38 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        v39 = (v38 & 0x80u) != 0;
        if ((v38 & 0x80u) != 0)
          v38 = __str->__r_.__value_.__l.__size_;
        v40 = v38 + ~v30;
        if (v39)
          v41 = (std::string *)__str->__r_.__value_.__r.__words[0];
        else
          v41 = __str;
        v42 = &xmmword_1EDF501E0;
        v43 = std::string::find((const std::string *)&xmmword_1EDF501E0, v41->__r_.__value_.__s.__data_[v40], 0);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v71.__r_.__value_.__l.__data_);
        if (v43 == -1)
          goto LABEL_107;
        v44 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        if ((v44 & 0x80u) != 0)
          v44 = __str->__r_.__value_.__l.__size_;
        v45 = a2[23];
        if ((v45 & 0x80u) != 0)
          v45 = *((_QWORD *)a2 + 1);
        std::string::basic_string(&v71, __str, 0, v44 - v45, (std::allocator<char> *)&v70);
        v46 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
        v47 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
        v48 = v71.__r_.__value_.__r.__words[0];
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v71;
        else
          v49 = (std::string *)v71.__r_.__value_.__r.__words[0];
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v46 = v71.__r_.__value_.__l.__size_;
        if (byte_1EDF501F7 >= 0)
        {
          v50 = byte_1EDF501F7;
        }
        else
        {
          v50 = *((_QWORD *)&xmmword_1EDF501E0 + 1);
          v42 = (__int128 *)xmmword_1EDF501E0;
        }
        v51 = (char *)&v49[-1].__r_.__value_.__r.__words[2] + 7;
        do
        {
          v9 = v46;
          if (!v46)
            break;
          if (!v50)
            break;
          v52 = memchr(v42, v51[v46], v50);
          v46 = v9 - 1;
        }
        while (v52);
        if ((v47 & 0x80000000) == 0)
          goto LABEL_107;
        v37 = (void *)v48;
        goto LABEL_81;
      }
LABEL_77:
      if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_107:
        v53 = 0;
        goto LABEL_108;
      }
      v36 = v71.__r_.__value_.__r.__words[0];
      goto LABEL_80;
    }
LABEL_29:
    if ((*((_BYTE *)&v71.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_58;
    v18 = (void *)v71.__r_.__value_.__r.__words[0];
    goto LABEL_32;
  }
  if ((*((_BYTE *)&__str->__r_.__value_.__s + 23) & 0x80) == 0)
  {
LABEL_13:
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    return;
  }
  v10 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
LABEL_115:
  std::string::__init_copy_ctor_external(a3, v10, size);
}

void sub_1887DE644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 89) < 0)
    operator delete(*(void **)(v42 - 112));
  if (a42 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  __cxa_guard_abort(&qword_1EDF501F8);
  _Unwind_Resume(a1);
}

void addr_obj::Formatting::stripComponents(uint64_t a1@<X0>, char **a2@<X1>, std::string *a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  char *v8;
  char *v9;
  char v10;
  unint64_t v11;
  int v12;
  std::string *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  std::string *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::string::size_type v23;
  unint64_t v24;
  std::string *v25;
  unint64_t size;
  __int128 *v27;
  size_t v28;
  char *v29;
  unint64_t v30;
  std::string::size_type v31;
  std::string::size_type v32;
  std::string::size_type v33;
  char *v34;
  std::string::size_type v35;
  __int128 *v36;
  size_t v37;
  __int128 *v38;
  size_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string::size_type v42;
  std::string::size_type v43;
  std::string::size_type v44;
  __int128 *v45;
  size_t v46;
  std::string::size_type v47;
  char *v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 *v53;
  size_t v54;
  std::string::size_type v55;
  std::string::size_type v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  std::string *v61;
  unint64_t v62;
  int v63;
  void *v64;
  size_t v65;
  unint64_t v66;
  std::string::size_type v67;
  std::string::size_type v68;
  void *v69;
  std::string::size_type v70;
  std::string::size_type v71;
  std::string::size_type v72;
  uint64_t v73;
  int v74;
  unsigned __int8 *v75;
  uint64_t v76;
  void *v77;
  int v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 *v81;
  size_t v82;
  uint64_t v83;
  std::string::size_type v84;
  void *v85;
  uint64_t i;
  std::string *v87;
  __int128 v88;
  std::string *v89;
  __int128 v90;
  std::string *v91;
  __int128 v92;
  std::string *v93;
  __int128 v94;
  std::string::size_type v95;
  char *v96;
  std::string::size_type v97;
  std::string::size_type v98;
  char *v99;
  std::string::size_type v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  uint64_t v105[3];
  uint64_t v106[3];
  uint64_t v107[3];
  uint64_t v108[3];
  uint64_t v109[3];
  _QWORD v110[6];

  v110[4] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    return;
  }
  v6 = atomic_load((unsigned __int8 *)&qword_1EDF50218);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50218))
  {
    std::string::basic_string[abi:ne180100]<0>(&v104, "〒");
    std::string::basic_string[abi:ne180100]<0>(v105, "우");
    std::string::basic_string[abi:ne180100]<0>(v106, "邮编:");
    std::string::basic_string[abi:ne180100]<0>(v107, "，");
    std::string::basic_string[abi:ne180100]<0>(v108, "، \u200F");
    std::string::basic_string[abi:ne180100]<0>(v109, ", \u200F");
    std::string::basic_string[abi:ne180100]<0>(v110, "　");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_1EDF50200, (__int128 *)&v104, 7uLL);
    for (i = 0; i != -21; i -= 3)
    {
      if (SHIBYTE(v110[i + 2]) < 0)
        operator delete((void *)v110[i]);
    }
    __cxa_guard_release(&qword_1EDF50218);
  }
  v7 = atomic_load((unsigned __int8 *)&qword_1EDF50238);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50238))
  {
    memset(&v101, 0, sizeof(v101));
    v87 = std::string::append(&v101, "\n");
    v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
    v102.__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v88;
    v87->__r_.__value_.__l.__size_ = 0;
    v87->__r_.__value_.__r.__words[2] = 0;
    v87->__r_.__value_.__r.__words[0] = 0;
    v89 = std::string::append(&v102, " ");
    v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v89->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v90;
    v89->__r_.__value_.__l.__size_ = 0;
    v89->__r_.__value_.__r.__words[2] = 0;
    v89->__r_.__value_.__r.__words[0] = 0;
    v91 = std::string::append(&v103, ", ");
    v92 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v91->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v92;
    v91->__r_.__value_.__l.__size_ = 0;
    v91->__r_.__value_.__r.__words[2] = 0;
    v91->__r_.__value_.__r.__words[0] = 0;
    v93 = std::string::append(&v104, "-");
    v94 = *(_OWORD *)&v93->__r_.__value_.__l.__data_;
    unk_1EDF50230 = *((_QWORD *)&v93->__r_.__value_.__l + 2);
    xmmword_1EDF50220 = v94;
    v93->__r_.__value_.__l.__size_ = 0;
    v93->__r_.__value_.__r.__words[2] = 0;
    v93->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    __cxa_guard_release(&qword_1EDF50238);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  }
  v9 = *a2;
  v8 = a2[1];
  v99 = v8;
  while (v9 != v8)
  {
    v10 = v9[23];
    if (v10 < 0)
    {
      if (!*((_QWORD *)v9 + 1))
        goto LABEL_111;
    }
    else if (!v9[23])
    {
      goto LABEL_111;
    }
    v11 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    v12 = (char)v11;
    v96 = (char *)a3->__r_.__value_.__r.__words[0];
    if ((v11 & 0x80u) == 0)
      v13 = a3;
    else
      v13 = (std::string *)a3->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      v14 = v9;
    else
      v14 = *(char **)v9;
    if (v10 >= 0)
      v15 = v9[23];
    else
      v15 = *((_QWORD *)v9 + 1);
    if (!v15)
    {
      v23 = 0;
LABEL_36:
      v24 = v23 + v15;
      if ((char)v11 < 0)
      {
        size = a3->__r_.__value_.__l.__size_;
        v25 = (std::string *)v96;
        if (v24 < size)
        {
LABEL_40:
          if (byte_1EDF50237 >= 0)
            v27 = &xmmword_1EDF50220;
          else
            v27 = (__int128 *)xmmword_1EDF50220;
          if (byte_1EDF50237 >= 0)
            v28 = byte_1EDF50237;
          else
            v28 = *((_QWORD *)&xmmword_1EDF50220 + 1);
          v29 = (char *)v25 + v24;
          if (v28)
          {
            v30 = size - v24;
            while (memchr(v27, *v29, v28))
            {
              ++v29;
              if (!--v30)
              {
                v31 = -1;
                goto LABEL_52;
              }
            }
          }
          v31 = v29 - (char *)v25;
LABEL_52:
          v97 = v23;
          v32 = sub_1887DF07C(a3, v31);
          v33 = v32;
          v11 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
          v12 = (char)v11;
          size = a3->__r_.__value_.__l.__size_;
          if ((v11 & 0x80u) == 0)
            v34 = (char *)a3;
          else
            v34 = (char *)a3->__r_.__value_.__r.__words[0];
          if ((v11 & 0x80u) == 0)
            v35 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
          else
            v35 = a3->__r_.__value_.__l.__size_;
          if (byte_1EDF50237 >= 0)
            v36 = &xmmword_1EDF50220;
          else
            v36 = (__int128 *)xmmword_1EDF50220;
          if (byte_1EDF50237 >= 0)
            v37 = byte_1EDF50237;
          else
            v37 = *((_QWORD *)&xmmword_1EDF50220 + 1);
          if (v35 <= v32)
          {
LABEL_68:
            v24 = -1;
            v25 = (std::string *)v34;
          }
          else
          {
            if (v37)
            {
              while (memchr(v36, v34[v33], v37))
              {
                if (v35 == ++v33)
                  goto LABEL_68;
              }
            }
            v25 = (std::string *)v34;
            v24 = v33;
          }
          v23 = v97;
        }
      }
      else
      {
        if (v24 < v11)
        {
          v25 = a3;
          size = v11;
          goto LABEL_40;
        }
        size = a3->__r_.__value_.__l.__size_;
        v25 = a3;
      }
      if (v12 >= 0)
        size = v11;
      if (byte_1EDF50237 >= 0)
        v38 = &xmmword_1EDF50220;
      else
        v38 = (__int128 *)xmmword_1EDF50220;
      if (byte_1EDF50237 >= 0)
        v39 = byte_1EDF50237;
      else
        v39 = *((_QWORD *)&xmmword_1EDF50220 + 1);
      if (size)
      {
        v40 = v25;
        if (v39)
        {
          v40 = v25;
          while (memchr(v38, v40->__r_.__value_.__s.__data_[0], v39))
          {
            v40 = (std::string *)((char *)v40 + 1);
            if (!--size)
              goto LABEL_88;
          }
        }
        v41 = (char *)v40 - (char *)v25;
      }
      else
      {
LABEL_88:
        v41 = -1;
      }
      v42 = sub_1887DF07C(a3, v41);
      v43 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      if ((v43 & 0x80u) == 0)
        v44 = (std::string::size_type)a3;
      else
        v44 = a3->__r_.__value_.__r.__words[0];
      if ((v43 & 0x80u) != 0)
        v43 = a3->__r_.__value_.__l.__size_;
      if (byte_1EDF50237 >= 0)
        v45 = &xmmword_1EDF50220;
      else
        v45 = (__int128 *)xmmword_1EDF50220;
      if (byte_1EDF50237 >= 0)
        v46 = byte_1EDF50237;
      else
        v46 = *((_QWORD *)&xmmword_1EDF50220 + 1);
      v47 = v43 - v42;
      if (v43 <= v42)
      {
LABEL_105:
        v49 = -1;
      }
      else
      {
        v48 = (char *)(v44 + v42);
        if (v46)
        {
          while (memchr(v45, *v48, v46))
          {
            ++v48;
            if (!--v47)
              goto LABEL_105;
          }
        }
        v49 = (uint64_t)&v48[-v44];
      }
      if (v49 == v23)
        v50 = 0;
      else
        v50 = v23;
      std::string::erase(a3, v50, v24 - v50);
      goto LABEL_111;
    }
    v16 = a3->__r_.__value_.__l.__size_;
    if ((v11 & 0x80u) == 0)
      v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v16 >= v15)
    {
      v17 = (char *)v13 + v16;
      v18 = *v14;
      v19 = v13;
      do
      {
        v20 = v16 - v15;
        if (v20 == -1)
          break;
        v21 = (char *)memchr(v19, v18, v20 + 1);
        if (!v21)
          break;
        v22 = v21;
        if (!memcmp(v21, v14, v15))
        {
          if (v22 != v17)
          {
            v23 = v22 - (char *)v13;
            if (v22 - (char *)v13 != -1)
              goto LABEL_36;
          }
          break;
        }
        v19 = (std::string *)(v22 + 1);
        v16 = v17 - (v22 + 1);
      }
      while (v16 >= v15);
    }
LABEL_111:
    v9 += 24;
    v8 = v99;
  }
  v51 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v51 & 0x80u) == 0)
    v52 = a3;
  else
    v52 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((v51 & 0x80u) != 0)
    v51 = a3->__r_.__value_.__l.__size_;
  if (byte_1EDF50237 >= 0)
    v53 = &xmmword_1EDF50220;
  else
    v53 = (__int128 *)xmmword_1EDF50220;
  if (byte_1EDF50237 >= 0)
    v54 = byte_1EDF50237;
  else
    v54 = *((_QWORD *)&xmmword_1EDF50220 + 1);
  v55 = v51 - 1;
  do
  {
    v56 = v55;
    if (v55 == -1)
      break;
    if (!v54)
      break;
    v57 = memchr(v53, v52->__r_.__value_.__s.__data_[v55], v54);
    v55 = v56 - 1;
  }
  while (v57);
  v95 = v56;
  do
  {
    v58 = qword_1EDF50200;
    v59 = unk_1EDF50208;
    v98 = v56;
    if (qword_1EDF50200 != unk_1EDF50208)
    {
      v100 = v56;
      while (1)
      {
        v60 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
        if (v60 >= 0)
          v61 = a3;
        else
          v61 = (std::string *)a3->__r_.__value_.__r.__words[0];
        if (v60 >= 0)
          v62 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        else
          v62 = a3->__r_.__value_.__l.__size_;
        v63 = *(char *)(v58 + 23);
        if (v63 >= 0)
          v64 = (void *)v58;
        else
          v64 = *(void **)v58;
        if (v63 >= 0)
          v65 = *(unsigned __int8 *)(v58 + 23);
        else
          v65 = *(_QWORD *)(v58 + 8);
        if (v62 > v56)
          v66 = v56 + 1;
        else
          v66 = v62;
        v67 = v66 - 1;
        do
        {
          v68 = v67;
          if (v67 == -1)
            break;
          if (!v65)
            break;
          v69 = memchr(v64, v61->__r_.__value_.__s.__data_[v67], v65);
          v67 = v68 - 1;
        }
        while (v69);
        v70 = v62 - 1;
        if (v56 != -1)
          v70 = v56;
        v71 = v70 - v68;
        if (!v71 || v68 == -2 || v71 != v65)
          goto LABEL_152;
        std::string::basic_string(&v104, a3, v68 + 1, v65, (std::allocator<char> *)&v103);
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v72 = HIBYTE(v104.__r_.__value_.__r.__words[2]);
        else
          v72 = v104.__r_.__value_.__l.__size_;
        v73 = *(unsigned __int8 *)(v58 + 23);
        v74 = (char)v73;
        if ((v73 & 0x80u) != 0)
          v73 = *(_QWORD *)(v58 + 8);
        if (v72 != v73)
          goto LABEL_171;
        v75 = v74 >= 0 ? (unsigned __int8 *)v58 : *(unsigned __int8 **)v58;
        if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) == 0)
          break;
        v77 = (void *)v104.__r_.__value_.__r.__words[0];
        v78 = memcmp(v104.__r_.__value_.__l.__data_, v75, v104.__r_.__value_.__l.__size_);
        operator delete(v77);
        if (!v78)
          goto LABEL_174;
LABEL_152:
        v58 += 24;
        if (v58 == v59)
          goto LABEL_176;
      }
      if (*((_BYTE *)&v104.__r_.__value_.__s + 23))
      {
        v76 = 0;
        while (v104.__r_.__value_.__s.__data_[v76] == v75[v76])
        {
          if (HIBYTE(v104.__r_.__value_.__r.__words[2]) == ++v76)
            goto LABEL_174;
        }
LABEL_171:
        if ((*((_BYTE *)&v104.__r_.__value_.__s + 23) & 0x80) != 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        goto LABEL_152;
      }
LABEL_174:
      v95 = v68;
      v100 = v68;
      v56 = v68;
      goto LABEL_152;
    }
    v100 = v56;
LABEL_176:
    v56 = v100;
  }
  while (v98 != v100);
  v79 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v79 & 0x80u) == 0)
    v80 = a3;
  else
    v80 = (std::string *)a3->__r_.__value_.__r.__words[0];
  if ((v79 & 0x80u) != 0)
    v79 = a3->__r_.__value_.__l.__size_;
  if (byte_1EDF50237 >= 0)
    v81 = &xmmword_1EDF50220;
  else
    v81 = (__int128 *)xmmword_1EDF50220;
  if (byte_1EDF50237 >= 0)
    v82 = byte_1EDF50237;
  else
    v82 = *((_QWORD *)&xmmword_1EDF50220 + 1);
  if (v79 > v95)
    v79 = v95 + 1;
  v83 = (uint64_t)&v80[-1].__r_.__value_.__r.__words[2] + 7;
  while (v79)
  {
    v84 = v79;
    if (v82)
    {
      v85 = memchr(v81, *(char *)(v83 + v79), v82);
      v79 = v84 - 1;
      if (v85)
        continue;
    }
    std::string::erase(a3, v84, 0xFFFFFFFFFFFFFFFFLL);
    return;
  }
}

void sub_1887DEF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;
  uint64_t v39;

  v39 = 0;
  while (1)
  {
    if (*(char *)(v37 + v39 + 167) < 0)
      operator delete(*(void **)(v37 + v39 + 144));
    v39 -= 24;
    if (v39 == -168)
    {
      __cxa_guard_abort(&qword_1EDF50218);
      _Unwind_Resume(a1);
    }
  }
}

std::string::size_type sub_1887DF07C(std::string *__str, std::string::size_type __pos)
{
  std::string::size_type v2;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type size;
  std::string *v7;
  int v8;
  void *v9;
  size_t v10;
  std::string::size_type v11;
  char *v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  void *v22;
  int v23;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string::size_type v27;
  std::string v28;
  char v29;

  v2 = __pos;
  v26 = __pos;
  do
  {
    v4 = qword_1EDF50200;
    v5 = unk_1EDF50208;
    v25 = v2;
    if (qword_1EDF50200 != unk_1EDF50208)
    {
      v27 = v2;
      while (1)
      {
        size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0)
          v7 = __str;
        else
          v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
        if ((size & 0x80u) != 0)
          size = __str->__r_.__value_.__l.__size_;
        v8 = *(char *)(v4 + 23);
        if (v8 >= 0)
          v9 = (void *)v4;
        else
          v9 = *(void **)v4;
        if (v8 >= 0)
          v10 = *(unsigned __int8 *)(v4 + 23);
        else
          v10 = *(_QWORD *)(v4 + 8);
        v11 = size - v2;
        if (size <= v2)
        {
LABEL_19:
          v13 = -1;
        }
        else
        {
          v12 = (char *)v7 + v2;
          if (v10)
          {
            while (memchr(v9, *v12, v10))
            {
              ++v12;
              if (!--v11)
                goto LABEL_19;
            }
          }
          v13 = v12 - (char *)v7;
        }
        if (v13 == v2)
          goto LABEL_45;
        std::string::basic_string(&v28, __str, v2, v13 - v2, (std::allocator<char> *)&v29);
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
        else
          v14 = v28.__r_.__value_.__l.__size_;
        v15 = *(unsigned __int8 *)(v4 + 23);
        v16 = (char)v15;
        if ((v15 & 0x80u) != 0)
          v15 = *(_QWORD *)(v4 + 8);
        if (v14 != v15)
        {
          if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) != 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          goto LABEL_45;
        }
        v17 = v16 >= 0 ? (unsigned __int8 *)v4 : *(unsigned __int8 **)v4;
        if ((*((_BYTE *)&v28.__r_.__value_.__s + 23) & 0x80) == 0)
          break;
        v22 = (void *)v28.__r_.__value_.__r.__words[0];
        v23 = memcmp(v28.__r_.__value_.__l.__data_, v17, v28.__r_.__value_.__l.__size_);
        operator delete(v22);
        if (!v23)
          goto LABEL_44;
LABEL_45:
        v4 += 24;
        if (v4 == v5)
          goto LABEL_48;
      }
      if (*((_BYTE *)&v28.__r_.__value_.__s + 23))
      {
        v18 = 0;
        do
        {
          v19 = v28.__r_.__value_.__s.__data_[v18];
          v20 = v17[v18];
        }
        while (v19 == v20 && HIBYTE(v28.__r_.__value_.__r.__words[2]) - 1 != v18++);
        if (v19 != v20)
          goto LABEL_45;
      }
LABEL_44:
      v26 = v13;
      v27 = v13;
      v2 = v13;
      goto LABEL_45;
    }
    v27 = v2;
LABEL_48:
    v2 = v27;
  }
  while (v25 != v27);
  return v26;
}

void addr_obj::Formatting::stripForCityAndAbove(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 *v5;
  __int128 v6;
  __int128 **v7;
  unint64_t v8;
  __int128 **v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  std::__compressed_pair<std::string *> v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  std::string::size_type size;
  std::string::size_type v19;
  int64_t v20;
  int v21;
  std::string *v22;
  char *v23;
  uint64_t v24;
  const std::string *end;
  std::vector<std::string>::pointer begin;
  int v27;
  char *v28;
  int64_t v29;
  char *v30;
  int v31;
  char *v32;
  int64_t v33;
  int v34;
  int64_t v35;
  void *v36;
  int64_t v37;
  char *v38;
  char *v39;
  std::string *v40;
  std::vector<std::string>::pointer v41;
  std::vector<std::string>::pointer v42;
  uint64_t v43;
  char *v44;
  int v45;
  char *data;
  int64_t v47;
  __int128 v48;
  char *v49;
  int v50;
  void *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  int v56;
  void *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  addr_obj *v61;
  std::vector<std::string>::const_iterator v62;
  std::vector<std::string>::const_iterator v63;
  const std::string *v64;
  std::vector<std::string>::pointer v65;
  int v66;
  char *v67;
  int64_t v68;
  char *v69;
  int v70;
  char *v71;
  int64_t v72;
  int v73;
  int64_t v74;
  void *v75;
  int64_t v76;
  char *v77;
  char *v78;
  std::string *v79;
  std::vector<std::string>::pointer v80;
  std::vector<std::string>::pointer v81;
  uint64_t v82;
  char *v83;
  int v84;
  char *v85;
  int64_t v86;
  __int128 v87;
  char *v88;
  int v89;
  void *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  std::vector<std::string>::const_iterator v94;
  std::vector<std::string>::const_iterator v95;
  __int128 *v96;
  std::string *v97;
  uint64_t v98;
  std::string::size_type v99;
  __int128 v100;
  int v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  std::string *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  const AddrObjGoogle::protobuf::EnumDescriptor *v113;
  AddrObjGoogle::protobuf::internal *v114;
  uint64_t *v115;
  __int128 v116;
  size_t v117;
  char v118;
  std::string::size_type v119;
  std::string::value_type *v120;
  std::string *v121;
  std::string::value_type *v122;
  std::string *v123;
  std::string::value_type *v124;
  size_t v125;
  std::string *v126;
  std::string *v127;
  uint64_t v128;
  int v129;
  const std::string::value_type *v130;
  std::string::size_type v131;
  char *v132;
  char v133;
  std::vector<std::string>::pointer v134;
  std::string *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  std::string *v139;
  std::string *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  std::string::size_type v144;
  uint64_t v145;
  __int128 *v146;
  __int128 v147;
  std::string *v148;
  std::__split_buffer<std::string>::pointer v149;
  uint64_t v150;
  std::__compressed_pair<std::string *> v151;
  __int128 *v152;
  __int128 v153;
  __int128 *v154;
  __int128 v155;
  uint64_t i;
  std::vector<std::string>::pointer v157;
  const std::string *v158;
  unsigned __int8 *v159;
  int v160;
  std::string::size_type v161;
  uint64_t v162;
  uint64_t v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  std::string *v166;
  std::vector<std::string>::pointer v167;
  std::vector<std::string>::pointer v168;
  int v169;
  std::string::size_type v170;
  uint64_t v171;
  uint64_t v172;
  unsigned __int8 *v173;
  unsigned __int8 *v174;
  __int128 v175;
  std::vector<std::string>::const_iterator v176;
  std::vector<std::string>::const_iterator v177;
  uint64_t *v178;
  int v179;
  _BYTE *v180;
  std::__split_buffer<std::string>::pointer v181;
  std::string *v182;
  const void **v183;
  size_t v184;
  std::string *v185;
  const void *v186;
  std::string *v187;
  int64_t v188;
  std::string *v189;
  int end_high;
  std::__split_buffer<std::string>::pointer first;
  char *p_str;
  int64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  std::string *v200;
  int64_t v201;
  char *v202;
  uint64_t v204;
  uint64_t v205;
  std::string::size_type v206;
  const std::string *v207;
  const std::string *v208;
  std::vector<std::string> v209;
  std::vector<std::string> v210;
  std::vector<std::string> v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::__split_buffer<std::string> __str;
  uint64_t v216;
  std::string v217;
  std::string v218;
  uint64_t v219;
  _QWORD v220[5];

  v220[2] = *MEMORY[0x1E0C80C00];
  v5 = *(__int128 **)(a2 + 72);
  if (*((char *)v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v212, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
  }
  else
  {
    v6 = *v5;
    v212.__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v6;
  }
  v7 = *(__int128 ***)(a2 + 160);
  v8 = *(int *)(a2 + 168);
  memset(&v211, 0, sizeof(v211));
  std::vector<std::string>::__init_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>((std::string *)&v211, v7, &v7[v8], v8);
  v9 = *(__int128 ***)(a2 + 120);
  v10 = *(int *)(a2 + 128);
  memset(&v210, 0, sizeof(v210));
  std::vector<std::string>::__init_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>((std::string *)&v210, v9, &v9[v10], v10);
  v11 = *(__int128 **)(a2 + 32);
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    __str.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v11 + 2);
    *(_OWORD *)&__str.__first_ = v12;
  }
  v13 = *(_QWORD *)(a2 + 56);
  if (*(char *)(v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str.__end_cap_, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
  }
  else
  {
    v14 = *(std::__compressed_pair<std::string *> *)v13;
    v216 = *(_QWORD *)(v13 + 16);
    __str.__end_cap_ = v14;
  }
  v15 = *(__int128 **)(a2 + 48);
  if (*((char *)v15 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
  }
  else
  {
    v16 = *v15;
    v217.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v16;
  }
  v204 = a3;
  memset(&v214, 0, sizeof(v214));
  v213.__r_.__value_.__r.__words[0] = (std::string::size_type)&v214;
  v213.__r_.__value_.__s.__data_[8] = 0;
  v214.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
  v214.__r_.__value_.__l.__size_ = v214.__r_.__value_.__r.__words[0];
  v214.__r_.__value_.__r.__words[2] = v214.__r_.__value_.__r.__words[0] + 72;
  v17 = 0;
  v214.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v214.__r_.__value_.__r.__words[2], (__int128 *)&__str, (__int128 *)&v218, (std::string *)v214.__r_.__value_.__l.__data_);
  do
  {
    if (SHIBYTE(v217.__r_.__value_.__r.__words[v17 + 2]) < 0)
      operator delete(*(void **)((char *)&v217.__r_.__value_.__l.__data_ + v17 * 8));
    v17 -= 3;
  }
  while (v17 != -9);
  size = v214.__r_.__value_.__l.__size_;
  v19 = v214.__r_.__value_.__r.__words[0];
  v205 = a2;
  v206 = v214.__r_.__value_.__l.__size_;
  while (v19 != size)
  {
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    else
      v20 = v212.__r_.__value_.__l.__size_;
    if (v20)
    {
      v21 = *(char *)(v19 + 23);
      if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v212;
      else
        v22 = (std::string *)v212.__r_.__value_.__r.__words[0];
      if (v21 >= 0)
        v23 = (char *)v19;
      else
        v23 = *(char **)v19;
      v24 = *(unsigned __int8 *)(v19 + 23);
      if (v21 < 0)
        v24 = *(_QWORD *)(v19 + 8);
      if (v24 >= v20)
      {
        v55 = &v23[v24];
        v56 = v22->__r_.__value_.__s.__data_[0];
        v57 = v23;
        do
        {
          v58 = v24 - v20;
          if (v58 == -1)
            break;
          v59 = (char *)memchr(v57, v56, v58 + 1);
          if (!v59)
            break;
          v60 = v59;
          v61 = (addr_obj *)memcmp(v59, v22, v20);
          if (!(_DWORD)v61)
          {
            if (v60 != v55 && v60 - v23 != -1)
            {
              v96 = addr_obj::emptyString(v61);
              std::string::operator=(&v212, (const std::string *)v96);
            }
            break;
          }
          v57 = v60 + 1;
          v24 = v55 - (v60 + 1);
        }
        while (v24 >= v20);
      }
    }
    begin = v211.__begin_;
    end = v211.__end_;
    if (v211.__begin_ == v211.__end_)
    {
      end = v211.__begin_;
LABEL_91:
      v41 = begin;
    }
    else
    {
      v27 = *(char *)(v19 + 23);
      if (v27 >= 0)
        v28 = (char *)v19;
      else
        v28 = *(char **)v19;
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(v19 + 23);
      else
        v29 = *(_QWORD *)(v19 + 8);
      v30 = &v28[v29];
      while (1)
      {
        v31 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
        v32 = v31 >= 0 ? (char *)begin : (char *)begin->__r_.__value_.__r.__words[0];
        v33 = v31 >= 0 ? HIBYTE(begin->__r_.__value_.__r.__words[2]) : begin->__r_.__value_.__l.__size_;
        if (!v33)
          break;
        if (v29 >= v33)
        {
          v34 = *v32;
          v35 = v29;
          v36 = v28;
          do
          {
            v37 = v35 - v33;
            if (v37 == -1)
              break;
            v38 = (char *)memchr(v36, v34, v37 + 1);
            if (!v38)
              break;
            v39 = v38;
            if (!memcmp(v38, v32, v33))
            {
              if (v39 == v30 || v39 - v28 == -1)
                break;
              goto LABEL_58;
            }
            v36 = v39 + 1;
            v35 = v30 - (v39 + 1);
          }
          while (v35 >= v33);
        }
        if (++begin == end)
          goto LABEL_89;
      }
LABEL_58:
      if (begin == end)
      {
LABEL_89:
        v41 = (std::vector<std::string>::pointer)end;
        goto LABEL_98;
      }
      v40 = begin + 1;
      if (&begin[1] == end)
        goto LABEL_91;
      v41 = begin;
      v207 = end;
      do
      {
        v42 = begin;
        begin = v40;
        v43 = *(unsigned __int8 *)(v19 + 23);
        if ((v43 & 0x80u) == 0)
          v44 = (char *)v19;
        else
          v44 = *(char **)v19;
        if ((v43 & 0x80u) != 0)
          v43 = *(_QWORD *)(v19 + 8);
        v45 = SHIBYTE(v42[1].__r_.__value_.__r.__words[2]);
        if (v45 >= 0)
          data = (char *)begin;
        else
          data = v42[1].__r_.__value_.__l.__data_;
        if (v45 >= 0)
          v47 = HIBYTE(v42[1].__r_.__value_.__r.__words[2]);
        else
          v47 = v42[1].__r_.__value_.__l.__size_;
        if (v47)
        {
          if (v43 >= v47)
          {
            v49 = &v44[v43];
            v50 = *data;
            v51 = v44;
            do
            {
              v52 = v43 - v47;
              if (v52 == -1)
                break;
              v53 = (char *)memchr(v51, v50, v52 + 1);
              if (!v53)
                break;
              v54 = v53;
              if (!memcmp(v53, data, v47))
              {
                if (v54 != v49 && v54 - v44 != -1)
                  goto LABEL_77;
                break;
              }
              v51 = v54 + 1;
              v43 = v49 - (v54 + 1);
            }
            while (v43 >= v47);
          }
          if (SHIBYTE(v41->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v41->__r_.__value_.__l.__data_);
          v48 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          v41->__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v48;
          ++v41;
          *((_BYTE *)&v42[1].__r_.__value_.__s + 23) = 0;
          begin->__r_.__value_.__s.__data_[0] = 0;
LABEL_77:
          end = v207;
        }
        v40 = begin + 1;
      }
      while (&begin[1] != end);
      end = v211.__end_;
    }
LABEL_98:
    v62.__i_ = v41;
    v63.__i_ = end;
    std::vector<std::string>::erase(&v211, v62, v63);
    v65 = v210.__begin_;
    v64 = v210.__end_;
    if (v210.__begin_ == v210.__end_)
    {
      v64 = v210.__begin_;
LABEL_157:
      v80 = v65;
    }
    else
    {
      v66 = *(char *)(v19 + 23);
      if (v66 >= 0)
        v67 = (char *)v19;
      else
        v67 = *(char **)v19;
      if (v66 >= 0)
        v68 = *(unsigned __int8 *)(v19 + 23);
      else
        v68 = *(_QWORD *)(v19 + 8);
      v69 = &v67[v68];
      while (1)
      {
        v70 = SHIBYTE(v65->__r_.__value_.__r.__words[2]);
        v71 = v70 >= 0 ? (char *)v65 : (char *)v65->__r_.__value_.__r.__words[0];
        v72 = v70 >= 0 ? HIBYTE(v65->__r_.__value_.__r.__words[2]) : v65->__r_.__value_.__l.__size_;
        if (!v72)
          break;
        if (v68 >= v72)
        {
          v73 = *v71;
          v74 = v68;
          v75 = v67;
          do
          {
            v76 = v74 - v72;
            if (v76 == -1)
              break;
            v77 = (char *)memchr(v75, v73, v76 + 1);
            if (!v77)
              break;
            v78 = v77;
            if (!memcmp(v77, v71, v72))
            {
              if (v78 == v69 || v78 - v67 == -1)
                break;
              goto LABEL_124;
            }
            v75 = v78 + 1;
            v74 = v69 - (v78 + 1);
          }
          while (v74 >= v72);
        }
        if (++v65 == v64)
          goto LABEL_155;
      }
LABEL_124:
      if (v65 == v64)
      {
LABEL_155:
        v80 = (std::vector<std::string>::pointer)v64;
        goto LABEL_158;
      }
      v79 = v65 + 1;
      if (&v65[1] == v64)
        goto LABEL_157;
      v80 = v65;
      v208 = v64;
      do
      {
        v81 = v65;
        v65 = v79;
        v82 = *(unsigned __int8 *)(v19 + 23);
        if ((v82 & 0x80u) == 0)
          v83 = (char *)v19;
        else
          v83 = *(char **)v19;
        if ((v82 & 0x80u) != 0)
          v82 = *(_QWORD *)(v19 + 8);
        v84 = SHIBYTE(v81[1].__r_.__value_.__r.__words[2]);
        if (v84 >= 0)
          v85 = (char *)v65;
        else
          v85 = v81[1].__r_.__value_.__l.__data_;
        if (v84 >= 0)
          v86 = HIBYTE(v81[1].__r_.__value_.__r.__words[2]);
        else
          v86 = v81[1].__r_.__value_.__l.__size_;
        if (v86)
        {
          if (v82 >= v86)
          {
            v88 = &v83[v82];
            v89 = *v85;
            v90 = v83;
            do
            {
              v91 = v82 - v86;
              if (v91 == -1)
                break;
              v92 = (char *)memchr(v90, v89, v91 + 1);
              if (!v92)
                break;
              v93 = v92;
              if (!memcmp(v92, v85, v86))
              {
                if (v93 != v88 && v93 - v83 != -1)
                  goto LABEL_143;
                break;
              }
              v90 = v93 + 1;
              v82 = v88 - (v93 + 1);
            }
            while (v82 >= v86);
          }
          if (SHIBYTE(v80->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v80->__r_.__value_.__l.__data_);
          v87 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v80->__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v87;
          ++v80;
          *((_BYTE *)&v81[1].__r_.__value_.__s + 23) = 0;
          v65->__r_.__value_.__s.__data_[0] = 0;
LABEL_143:
          v64 = v208;
        }
        v79 = v65 + 1;
      }
      while (&v65[1] != v64);
      v64 = v210.__end_;
    }
LABEL_158:
    v94.__i_ = v80;
    v95.__i_ = v64;
    std::vector<std::string>::erase(&v210, v94, v95);
    v19 += 24;
    size = v206;
  }
  __str.__first_ = &v214;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  v97 = 0;
  memset(&v209, 0, sizeof(v209));
  if ((*(_BYTE *)(v205 + 245) & 8) != 0)
  {
    v98 = *(_QWORD *)(v205 + 104);
    if (*(char *)(v98 + 23) < 0)
    {
      if (*(_QWORD *)(v98 + 8))
        goto LABEL_165;
    }
    else if (*(_BYTE *)(v98 + 23))
    {
LABEL_165:
      v97 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v209, (__int128 *)v98);
      v209.__end_ = v97;
      goto LABEL_168;
    }
    v97 = 0;
  }
LABEL_168:
  v99 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
  if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v99 = v212.__r_.__value_.__l.__size_;
  if (v99)
  {
    if (v97 >= v209.__end_cap_.__value_)
    {
      v97 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v209, (__int128 *)&v212);
    }
    else
    {
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v97, v212.__r_.__value_.__l.__data_, v212.__r_.__value_.__l.__size_);
      }
      else
      {
        v100 = *(_OWORD *)&v212.__r_.__value_.__l.__data_;
        v97->__r_.__value_.__r.__words[2] = v212.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v100;
      }
      ++v97;
    }
    v209.__end_ = v97;
  }
  v101 = *(_DWORD *)(v205 + 244);
  if ((v101 & 0x80000) == 0)
  {
LABEL_179:
    if ((v101 & 0x1000) == 0)
      goto LABEL_198;
LABEL_192:
    v104 = *(_QWORD *)(v205 + 112);
    if (*(char *)(v104 + 23) < 0)
    {
      if (!*(_QWORD *)(v104 + 8))
        goto LABEL_198;
    }
    else if (!*(_BYTE *)(v104 + 23))
    {
      goto LABEL_198;
    }
    if (v97 >= v209.__end_cap_.__value_)
    {
      v97 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v209, (__int128 *)v104);
    }
    else
    {
      if ((*(_BYTE *)(v104 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v104, *(_QWORD *)(v104 + 8));
      }
      else
      {
        v105 = *(_OWORD *)v104;
        v97->__r_.__value_.__r.__words[2] = *(_QWORD *)(v104 + 16);
        *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v105;
      }
      ++v97;
    }
    v209.__end_ = v97;
    if ((*(_DWORD *)(v205 + 244) & 0x40) == 0)
      goto LABEL_215;
    goto LABEL_204;
  }
  v102 = *(_QWORD *)(v205 + 216);
  if (*(char *)(v102 + 23) < 0)
  {
    if (!*(_QWORD *)(v102 + 8))
      goto LABEL_179;
  }
  else if (!*(_BYTE *)(v102 + 23))
  {
    goto LABEL_179;
  }
  if (v97 >= v209.__end_cap_.__value_)
  {
    v97 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v209, (__int128 *)v102);
  }
  else
  {
    if ((*(_BYTE *)(v102 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v102, *(_QWORD *)(v102 + 8));
    }
    else
    {
      v103 = *(_OWORD *)v102;
      v97->__r_.__value_.__r.__words[2] = *(_QWORD *)(v102 + 16);
      *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v103;
    }
    ++v97;
  }
  v209.__end_ = v97;
  v101 = *(_DWORD *)(v205 + 244);
  if ((v101 & 0x1000) != 0)
    goto LABEL_192;
LABEL_198:
  if ((v101 & 0x40) == 0)
    goto LABEL_215;
LABEL_204:
  v106 = *(_QWORD *)(v205 + 64);
  if (*(char *)(v106 + 23) < 0)
  {
    if (!*(_QWORD *)(v106 + 8))
      goto LABEL_215;
  }
  else if (!*(_BYTE *)(v106 + 23))
  {
    goto LABEL_215;
  }
  if (v97 >= v209.__end_cap_.__value_)
  {
    v97 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v209, (__int128 *)v106);
  }
  else
  {
    if ((*(_BYTE *)(v106 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v97, *(const std::string::value_type **)v106, *(_QWORD *)(v106 + 8));
    }
    else
    {
      v107 = *(_OWORD *)v106;
      v97->__r_.__value_.__r.__words[2] = *(_QWORD *)(v106 + 16);
      *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v107;
    }
    ++v97;
  }
  v209.__end_ = v97;
LABEL_215:
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v209, v97, v211.__begin_, (__int128 *)v211.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v211.__end_ - (char *)v211.__begin_) >> 3));
  v108 = std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v209, v209.__end_, v210.__begin_, (__int128 *)v210.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v210.__end_ - (char *)v210.__begin_) >> 3));
  v109 = *(int *)(v205 + 200);
  if ((_DWORD)v109)
  {
    v110 = *(uint64_t **)(v205 + 192);
    v111 = &v110[v109];
    do
    {
      v112 = *v110;
      v113 = (const AddrObjGoogle::protobuf::EnumDescriptor *)*(unsigned int *)(*v110 + 24);
      v114 = (AddrObjGoogle::protobuf::internal *)addr_obj::geo3::StructuredAddress_SubPremise_SubPremiseType_descriptor((addr_obj::geo3 *)v108);
      v115 = AddrObjGoogle::protobuf::internal::NameOfEnum(v114, v113);
      if (*((char *)v115 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v214, (const std::string::value_type *)*v115, v115[1]);
      }
      else
      {
        v116 = *(_OWORD *)v115;
        v214.__r_.__value_.__r.__words[2] = v115[2];
        *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v116;
      }
      v117 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      v118 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      v119 = v214.__r_.__value_.__l.__size_;
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = (char *)&v214 + HIBYTE(v214.__r_.__value_.__r.__words[2]);
      else
        v120 = (std::string::value_type *)(v214.__r_.__value_.__r.__words[0] + v214.__r_.__value_.__l.__size_);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v121 = &v214;
      else
        v121 = (std::string *)v214.__r_.__value_.__r.__words[0];
      v122 = &v121->__r_.__value_.__s.__data_[1];
      if ((char *)&v121->__r_.__value_.__l.__data_ + 1 != v120)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v123 = &v214;
        else
          v123 = (std::string *)v214.__r_.__value_.__r.__words[0];
        v124 = &v123->__r_.__value_.__s.__data_[1];
        do
          *v124++ = __tolower(*v122++);
        while (v122 != v120);
        v117 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
        v119 = v214.__r_.__value_.__l.__size_;
        v118 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      }
      if (v118 >= 0)
        v125 = v117;
      else
        v125 = v119;
      std::string::basic_string[abi:ne180100]((uint64_t)&v213, v125 + 1);
      if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v126 = &v213;
      else
        v126 = (std::string *)v213.__r_.__value_.__r.__words[0];
      if (v125)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = &v214;
        else
          v127 = (std::string *)v214.__r_.__value_.__r.__words[0];
        memmove(v126, v127, v125);
      }
      *(_WORD *)((char *)&v126->__r_.__value_.__l.__data_ + v125) = 32;
      v128 = *(_QWORD *)(v112 + 16);
      v129 = *(char *)(v128 + 23);
      if (v129 >= 0)
        v130 = *(const std::string::value_type **)(v112 + 16);
      else
        v130 = *(const std::string::value_type **)v128;
      if (v129 >= 0)
        v131 = *(unsigned __int8 *)(v128 + 23);
      else
        v131 = *(_QWORD *)(v128 + 8);
      v108 = std::string::append(&v213, v130, v131);
      v132 = (char *)v108->__r_.__value_.__r.__words[0];
      v220[0] = v108->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v220 + 7) = *(std::string::size_type *)((char *)&v108->__r_.__value_.__r.__words[1] + 7);
      v133 = HIBYTE(v108->__r_.__value_.__r.__words[2]);
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      v134 = v209.__end_;
      if (v209.__end_ >= v209.__end_cap_.__value_)
      {
        v136 = 0xAAAAAAAAAAAAAAABLL * (((char *)v209.__end_ - (char *)v209.__begin_) >> 3);
        v137 = v136 + 1;
        if (v136 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v209.__end_cap_.__value_ - (char *)v209.__begin_) >> 3) > v137)
          v137 = 0x5555555555555556 * (((char *)v209.__end_cap_.__value_ - (char *)v209.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v209.__end_cap_.__value_ - (char *)v209.__begin_) >> 3) >= 0x555555555555555)
          v138 = 0xAAAAAAAAAAAAAAALL;
        else
          v138 = v137;
        __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v209.__end_cap_;
        if (v138)
          v139 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)&v209.__end_cap_, v138);
        else
          v139 = 0;
        v140 = v139 + v136;
        __str.__first_ = v139;
        __str.__begin_ = v140;
        __str.__end_cap_.__value_ = &v139[v138];
        v140->__r_.__value_.__r.__words[0] = (std::string::size_type)v132;
        v140->__r_.__value_.__l.__size_ = v220[0];
        *(std::string::size_type *)((char *)&v140->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v220 + 7);
        *((_BYTE *)&v140->__r_.__value_.__s + 23) = v133;
        __str.__end_ = v140 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v209, &__str);
        v135 = v209.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__str);
      }
      else
      {
        v209.__end_->__r_.__value_.__l.__data_ = v132;
        v134->__r_.__value_.__l.__size_ = v220[0];
        *(std::string::size_type *)((char *)&v134->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v220 + 7);
        *((_BYTE *)&v134->__r_.__value_.__s + 23) = v133;
        v135 = v134 + 1;
      }
      v209.__end_ = v135;
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v213.__r_.__value_.__l.__data_);
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v214.__r_.__value_.__l.__data_);
      ++v110;
    }
    while (v110 != v111);
  }
  v141 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v209.__end_ - (char *)v209.__begin_) >> 3));
  if (v209.__end_ == v209.__begin_)
    v142 = 0;
  else
    v142 = v141;
  sub_1887E1D3C((uint64_t)v209.__begin_, (uint64_t *)v209.__end_, v142, 1);
  v143 = a1;
  addr_obj::Formatting::stripComponents(a1, (char **)&v209, &v214);
  v144 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
  if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v144 = v214.__r_.__value_.__l.__size_;
  v145 = v205;
  if (!v144 || !addr_obj::Formatting::verifyFormattedAddressInStructuredAddress((uint64_t)&v214, v205))
  {
    *(_BYTE *)v204 = 0;
    v148 = (std::string *)(v204 + 8);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v148, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
      goto LABEL_402;
    }
    *(_OWORD *)&v148->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    v149 = *(std::__split_buffer<std::string>::pointer *)(a1 + 16);
    goto LABEL_401;
  }
  v146 = *(__int128 **)(v205 + 32);
  if (*((char *)v146 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v146, *((_QWORD *)v146 + 1));
  }
  else
  {
    v147 = *v146;
    __str.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v146 + 2);
    *(_OWORD *)&__str.__first_ = v147;
  }
  v150 = *(_QWORD *)(v205 + 40);
  if (*(char *)(v150 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str.__end_cap_, *(const std::string::value_type **)v150, *(_QWORD *)(v150 + 8));
  }
  else
  {
    v151 = *(std::__compressed_pair<std::string *> *)v150;
    v216 = *(_QWORD *)(v150 + 16);
    __str.__end_cap_ = v151;
  }
  v152 = *(__int128 **)(v205 + 16);
  if (*((char *)v152 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v217, *(const std::string::value_type **)v152, *((_QWORD *)v152 + 1));
  }
  else
  {
    v153 = *v152;
    v217.__r_.__value_.__r.__words[2] = *((_QWORD *)v152 + 2);
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v153;
  }
  v154 = *(__int128 **)(v205 + 24);
  if (*((char *)v154 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)v154, *((_QWORD *)v154 + 1));
  }
  else
  {
    v155 = *v154;
    v218.__r_.__value_.__r.__words[2] = *((_QWORD *)v154 + 2);
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v155;
  }
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v209, (std::string *)&__str, (__int128 *)&v219, 4uLL);
  for (i = 0; i != -12; i -= 3)
  {
    if (SHIBYTE(v218.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v218.__r_.__value_.__l.__data_ + i * 8));
  }
  v157 = v209.__begin_;
  v158 = v209.__end_;
  if (v209.__begin_ == v209.__end_)
  {
    v158 = v209.__begin_;
LABEL_340:
    v167 = v157;
    goto LABEL_342;
  }
  v159 = *(unsigned __int8 **)(v205 + 56);
  while (1)
  {
    v160 = SHIBYTE(v157->__r_.__value_.__r.__words[2]);
    v161 = v157->__r_.__value_.__l.__size_;
    if (v160 >= 0)
      v161 = HIBYTE(v157->__r_.__value_.__r.__words[2]);
    if (!v161)
      break;
    v162 = v159[23];
    if ((v162 & 0x80u) == 0)
      v163 = v159[23];
    else
      v163 = *((_QWORD *)v159 + 1);
    if (v163 == v161)
    {
      if (v160 >= 0)
        v164 = (unsigned __int8 *)v157;
      else
        v164 = (unsigned __int8 *)v157->__r_.__value_.__r.__words[0];
      if ((v162 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v159, v164, *((_QWORD *)v159 + 1)))
          break;
      }
      else
      {
        if (!v159[23])
          break;
        v165 = v159;
        while (*v165 == *v164)
        {
          ++v165;
          ++v164;
          if (!--v162)
            goto LABEL_314;
        }
      }
    }
    if (++v157 == v158)
      goto LABEL_341;
  }
LABEL_314:
  if (v157 != v158)
  {
    v166 = v157 + 1;
    if (&v157[1] != v158)
    {
      v167 = v157;
      while (1)
      {
        v168 = v157;
        v157 = v166;
        v169 = SHIBYTE(v168[1].__r_.__value_.__r.__words[2]);
        v170 = v168[1].__r_.__value_.__l.__size_;
        if (v169 >= 0)
          v170 = HIBYTE(v168[1].__r_.__value_.__r.__words[2]);
        if (!v170)
          goto LABEL_337;
        v171 = v159[23];
        if ((v171 & 0x80u) == 0)
          v172 = v159[23];
        else
          v172 = *((_QWORD *)v159 + 1);
        if (v172 != v170)
          goto LABEL_334;
        if (v169 >= 0)
          v173 = (unsigned __int8 *)v157;
        else
          v173 = (unsigned __int8 *)v157->__r_.__value_.__r.__words[0];
        if ((v171 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v159, v173, *((_QWORD *)v159 + 1)))
            goto LABEL_334;
        }
        else if (v159[23])
        {
          v174 = v159;
          while (*v174 == *v173)
          {
            ++v174;
            ++v173;
            if (!--v171)
              goto LABEL_337;
          }
LABEL_334:
          if (SHIBYTE(v167->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v167->__r_.__value_.__l.__data_);
          v175 = *(_OWORD *)&v157->__r_.__value_.__l.__data_;
          v167->__r_.__value_.__r.__words[2] = v157->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167->__r_.__value_.__l.__data_ = v175;
          ++v167;
          *((_BYTE *)&v168[1].__r_.__value_.__s + 23) = 0;
          v157->__r_.__value_.__s.__data_[0] = 0;
        }
LABEL_337:
        v166 = v157 + 1;
        if (&v157[1] == v158)
        {
          v158 = v209.__end_;
          v143 = a1;
          goto LABEL_342;
        }
      }
    }
    goto LABEL_340;
  }
LABEL_341:
  v167 = (std::vector<std::string>::pointer)v158;
LABEL_342:
  v176.__i_ = v167;
  v177.__i_ = v158;
  std::vector<std::string>::erase(&v209, v176, v177);
  addr_obj::Formatting::stripComponents((uint64_t)&v214, (char **)&v209, (std::string *)&__str);
  if ((SHIBYTE(__str.__end_) & 0x80000000) == 0)
  {
    if (HIBYTE(__str.__end_))
      goto LABEL_344;
LABEL_348:
    *(_BYTE *)v204 = 0;
    v182 = (std::string *)(v204 + 8);
    if (*(char *)(v143 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v182, *(const std::string::value_type **)v143, *(_QWORD *)(v143 + 8));
    }
    else
    {
      *(_OWORD *)&v182->__r_.__value_.__l.__data_ = *(_OWORD *)v143;
      *(_QWORD *)(v204 + 24) = *(_QWORD *)(v143 + 16);
    }
    goto LABEL_402;
  }
  v181 = __str.__begin_;
  operator delete(__str.__first_);
  if (!v181)
    goto LABEL_348;
LABEL_344:
  v178 = *(uint64_t **)(v205 + 24);
  v179 = *((char *)v178 + 23);
  if ((v179 & 0x80000000) == 0)
  {
    v180 = (_BYTE *)v204;
    if (v179 != 2)
      goto LABEL_399;
LABEL_352:
    if (*(_WORD *)v178 == 17732)
    {
      v183 = *(const void ***)(v205 + 56);
      if (*((char *)v183 + 23) >= 0)
        v184 = *((unsigned __int8 *)v183 + 23);
      else
        v184 = (size_t)v183[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v213, v184 + 1);
      if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v185 = &v213;
      else
        v185 = (std::string *)v213.__r_.__value_.__r.__words[0];
      if (v184)
      {
        if (*((char *)v183 + 23) >= 0)
          v186 = v183;
        else
          v186 = *v183;
        memmove(v185, v186, v184);
      }
      *(_WORD *)((char *)&v185->__r_.__value_.__l.__data_ + v184) = 32;
      v187 = std::string::append(&v213, "-");
      __str.__end_ = (std::__split_buffer<std::string>::pointer)v187->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__first_ = *(_OWORD *)&v187->__r_.__value_.__l.__data_;
      v187->__r_.__value_.__l.__size_ = 0;
      v187->__r_.__value_.__r.__words[2] = 0;
      v187->__r_.__value_.__r.__words[0] = 0;
      v188 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
      if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v189 = &v214;
      else
        v189 = (std::string *)v214.__r_.__value_.__r.__words[0];
      end_high = SHIBYTE(__str.__end_);
      first = __str.__first_;
      if (SHIBYTE(__str.__end_) >= 0)
        p_str = (char *)&__str;
      else
        p_str = (char *)__str.__first_;
      if (SHIBYTE(__str.__end_) >= 0)
        v193 = HIBYTE(__str.__end_);
      else
        v193 = (int64_t)__str.__begin_;
      if (v193)
      {
        if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v188 = v214.__r_.__value_.__l.__size_;
        v194 = (char *)v189 + v188;
        if (v188 >= v193)
        {
          v199 = *p_str;
          v200 = v189;
          do
          {
            v201 = v188 - v193;
            if (v201 == -1)
              break;
            v202 = (char *)memchr(v200, v199, v201 + 1);
            if (!v202)
              break;
            v195 = v202;
            if (!memcmp(v202, p_str, v193))
              goto LABEL_378;
            v200 = (std::string *)(v195 + 1);
            v188 = v194 - (v195 + 1);
          }
          while (v188 >= v193);
        }
        v195 = v194;
LABEL_378:
        if (v195 == v194)
          v196 = -1;
        else
          v196 = v195 - (char *)v189;
        v145 = v205;
      }
      else
      {
        v196 = 0;
      }
      if (end_high < 0)
        operator delete(first);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v213.__r_.__value_.__l.__data_);
      v180 = (_BYTE *)v204;
      if (v196 != -1)
      {
        v197 = *(_QWORD *)(v145 + 56);
        if (*(char *)(v197 + 23) < 0)
          v198 = *(_QWORD *)(v197 + 8);
        else
          v198 = *(unsigned __int8 *)(v197 + 23);
        std::string::replace(&v214, v198 + v196, 2uLL, ",");
      }
    }
    goto LABEL_399;
  }
  v180 = (_BYTE *)v204;
  if (v178[1] == 2)
  {
    v178 = (uint64_t *)*v178;
    goto LABEL_352;
  }
LABEL_399:
  memset(&__str, 0, 24);
  addr_obj::Formatting::removeMultipleWhitespaces((uint64_t)&v214, (std::string *)&__str);
  *v180 = 1;
  v148 = (std::string *)(v180 + 8);
  if ((SHIBYTE(__str.__end_) & 0x80000000) == 0)
  {
    *(_OWORD *)&v148->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
    v149 = __str.__end_;
LABEL_401:
    v148->__r_.__value_.__r.__words[2] = (std::string::size_type)v149;
    goto LABEL_402;
  }
  std::string::__init_copy_ctor_external(v148, (const std::string::value_type *)__str.__first_, (std::string::size_type)__str.__begin_);
  if (SHIBYTE(__str.__end_) < 0)
    operator delete(__str.__first_);
LABEL_402:
  if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v214.__r_.__value_.__l.__data_);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v210;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v211;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v212.__r_.__value_.__l.__data_);
}

void sub_1887E03CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,void *a29,uint64_t a30,std::__split_buffer<std::string> *a31,void *a32,uint64_t a33,uint64_t a34,void *__pa,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__pa);
  a32 = &a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  a32 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (SHIBYTE(a31) < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

BOOL addr_obj::Formatting::verifyFormattedAddressInStructuredAddress(uint64_t a1, uint64_t a2)
{
  int v4;
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  std::string *v25;
  uint64_t v26;
  const void **v27;
  size_t v28;
  std::string *v29;
  const void *v30;
  uint64_t v31;
  int v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  char *v36;
  char v37;
  std::vector<std::string>::pointer end;
  std::string *v39;
  uint64_t v40;
  std::vector<std::string>::pointer v41;
  __int128 v42;
  std::string *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  uint64_t v49;
  std::vector<std::string>::pointer v50;
  __int128 v51;
  std::string *v52;
  uint64_t v53;
  std::vector<std::string>::pointer v54;
  __int128 v55;
  std::string *v56;
  uint64_t v57;
  std::vector<std::string>::pointer v58;
  __int128 v59;
  std::string *v60;
  uint64_t v61;
  std::vector<std::string>::pointer v62;
  __int128 v63;
  std::string *v64;
  std::string *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  const AddrObjGoogle::protobuf::EnumDescriptor *v70;
  AddrObjGoogle::protobuf::internal *v71;
  uint64_t *v72;
  __int128 v73;
  size_t v74;
  char v75;
  std::string::size_type size;
  std::string::value_type *v77;
  std::string *v78;
  std::string::value_type *v79;
  std::string *v80;
  std::string::value_type *v81;
  size_t v82;
  std::string *v83;
  std::string *v84;
  uint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  char *v89;
  char v90;
  std::vector<std::string>::pointer v91;
  std::string *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  std::string *v96;
  std::string *v97;
  unint64_t v98;
  uint64_t v99;
  int end_high;
  std::__split_buffer<std::string>::pointer begin;
  uint64_t **v102;
  int v103;
  _BOOL8 v104;
  const std::string *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void *v110;
  char *v111;
  std::string::size_type v112;
  std::string *v113;
  std::string *v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  std::vector<std::string> v118;
  std::string v119;
  std::__split_buffer<std::string> __v;
  std::string v121;
  std::string v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  memset(&v118, 0, sizeof(v118));
  v4 = *(_DWORD *)(a2 + 244);
  if ((v4 & 0x800) != 0)
  {
    v6 = *(_QWORD *)(a2 + 104);
    if (*(char *)(v6 + 23) < 0)
    {
      if (!*(_QWORD *)(v6 + 8))
        goto LABEL_2;
    }
    else if (!*(_BYTE *)(v6 + 23))
    {
      goto LABEL_2;
    }
    v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v6);
    v4 = *(_DWORD *)(a2 + 244);
    v118.__end_ = v5;
    if ((v4 & 1) == 0)
      goto LABEL_15;
    goto LABEL_9;
  }
LABEL_2:
  v5 = 0;
  if ((v4 & 1) == 0)
    goto LABEL_15;
LABEL_9:
  v7 = *(_QWORD *)(a2 + 16);
  if (*(char *)(v7 + 23) < 0)
  {
    if (*(_QWORD *)(v7 + 8))
    {
LABEL_11:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v7);
      }
      else
      {
        if ((*(_BYTE *)(v7 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v8 = *(_OWORD *)v7;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v8;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 4) == 0)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  else if (*(_BYTE *)(v7 + 23))
  {
    goto LABEL_11;
  }
LABEL_15:
  if ((v4 & 4) == 0)
    goto LABEL_27;
LABEL_21:
  v9 = *(_QWORD *)(a2 + 32);
  if (*(char *)(v9 + 23) < 0)
  {
    if (*(_QWORD *)(v9 + 8))
    {
LABEL_23:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v9);
      }
      else
      {
        if ((*(_BYTE *)(v9 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
        }
        else
        {
          v10 = *(_OWORD *)v9;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v10;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x10) == 0)
        goto LABEL_39;
      goto LABEL_33;
    }
  }
  else if (*(_BYTE *)(v9 + 23))
  {
    goto LABEL_23;
  }
LABEL_27:
  if ((v4 & 0x10) == 0)
    goto LABEL_39;
LABEL_33:
  v11 = *(_QWORD *)(a2 + 48);
  if (*(char *)(v11 + 23) < 0)
  {
    if (*(_QWORD *)(v11 + 8))
    {
LABEL_35:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v11);
      }
      else
      {
        if ((*(_BYTE *)(v11 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v11;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v11 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v12;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x20) == 0)
        goto LABEL_51;
      goto LABEL_45;
    }
  }
  else if (*(_BYTE *)(v11 + 23))
  {
    goto LABEL_35;
  }
LABEL_39:
  if ((v4 & 0x20) == 0)
    goto LABEL_51;
LABEL_45:
  v13 = *(_QWORD *)(a2 + 56);
  if (*(char *)(v13 + 23) < 0)
  {
    if (*(_QWORD *)(v13 + 8))
    {
LABEL_47:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v13);
      }
      else
      {
        if ((*(_BYTE *)(v13 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v13, *(_QWORD *)(v13 + 8));
        }
        else
        {
          v14 = *(_OWORD *)v13;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v14;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x80) == 0)
        goto LABEL_63;
      goto LABEL_57;
    }
  }
  else if (*(_BYTE *)(v13 + 23))
  {
    goto LABEL_47;
  }
LABEL_51:
  if ((v4 & 0x80) == 0)
    goto LABEL_63;
LABEL_57:
  v15 = *(_QWORD *)(a2 + 72);
  if (*(char *)(v15 + 23) < 0)
  {
    if (*(_QWORD *)(v15 + 8))
    {
LABEL_59:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v15);
      }
      else
      {
        if ((*(_BYTE *)(v15 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
        }
        else
        {
          v16 = *(_OWORD *)v15;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v16;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x4000) == 0)
        goto LABEL_75;
      goto LABEL_69;
    }
  }
  else if (*(_BYTE *)(v15 + 23))
  {
    goto LABEL_59;
  }
LABEL_63:
  if ((v4 & 0x4000) == 0)
    goto LABEL_75;
LABEL_69:
  v17 = *(_QWORD *)(a2 + 144);
  if (*(char *)(v17 + 23) < 0)
  {
    if (*(_QWORD *)(v17 + 8))
    {
LABEL_71:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v17);
      }
      else
      {
        if ((*(_BYTE *)(v17 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
        }
        else
        {
          v18 = *(_OWORD *)v17;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v18;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x8000) == 0)
        goto LABEL_87;
      goto LABEL_81;
    }
  }
  else if (*(_BYTE *)(v17 + 23))
  {
    goto LABEL_71;
  }
LABEL_75:
  if ((v4 & 0x8000) == 0)
    goto LABEL_87;
LABEL_81:
  v19 = *(_QWORD *)(a2 + 152);
  if (*(char *)(v19 + 23) < 0)
  {
    if (*(_QWORD *)(v19 + 8))
    {
LABEL_83:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v19);
      }
      else
      {
        if ((*(_BYTE *)(v19 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v19, *(_QWORD *)(v19 + 8));
        }
        else
        {
          v20 = *(_OWORD *)v19;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v19 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v20;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x100) == 0)
        goto LABEL_99;
      goto LABEL_93;
    }
  }
  else if (*(_BYTE *)(v19 + 23))
  {
    goto LABEL_83;
  }
LABEL_87:
  if ((v4 & 0x100) == 0)
    goto LABEL_99;
LABEL_93:
  v21 = *(_QWORD *)(a2 + 80);
  if (*(char *)(v21 + 23) < 0)
  {
    if (*(_QWORD *)(v21 + 8))
    {
LABEL_95:
      if (v5 >= v118.__end_cap_.__value_)
      {
        v5 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v21);
      }
      else
      {
        if ((*(_BYTE *)(v21 + 23) & 0x80) != 0)
        {
          std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v21;
          v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
          *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v22;
        }
        ++v5;
      }
      v118.__end_ = v5;
      v4 = *(_DWORD *)(a2 + 244);
      if ((v4 & 0x20000) == 0)
        goto LABEL_116;
      goto LABEL_105;
    }
  }
  else if (*(_BYTE *)(v21 + 23))
  {
    goto LABEL_95;
  }
LABEL_99:
  if ((v4 & 0x20000) == 0)
    goto LABEL_116;
LABEL_105:
  v23 = *(_QWORD *)(a2 + 184);
  if (*(char *)(v23 + 23) < 0)
  {
    if (!*(_QWORD *)(v23 + 8))
      goto LABEL_116;
  }
  else if (!*(_BYTE *)(v23 + 23))
  {
    goto LABEL_116;
  }
  if (v5 >= v118.__end_cap_.__value_)
  {
    v25 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v23);
  }
  else
  {
    if ((*(_BYTE *)(v23 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    }
    else
    {
      v24 = *(_OWORD *)v23;
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(v23 + 16);
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v24;
    }
    v25 = v5 + 1;
  }
  v118.__end_ = v25;
  v4 = *(_DWORD *)(a2 + 244);
LABEL_116:
  if ((~v4 & 0x1040) != 0)
    goto LABEL_143;
  v26 = *(_QWORD *)(a2 + 112);
  if (*(char *)(v26 + 23) < 0)
  {
    if (!*(_QWORD *)(v26 + 8))
      goto LABEL_143;
LABEL_121:
    v27 = *(const void ***)(a2 + 64);
    if (*((char *)v27 + 23) < 0)
    {
      if (!v27[1])
        goto LABEL_143;
    }
    else if (!*((_BYTE *)v27 + 23))
    {
      goto LABEL_143;
    }
    if (*((char *)v27 + 23) >= 0)
      v28 = *((unsigned __int8 *)v27 + 23);
    else
      v28 = (size_t)v27[1];
    std::string::basic_string[abi:ne180100]((uint64_t)&v119, v28 + 1);
    if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &v119;
    else
      v29 = (std::string *)v119.__r_.__value_.__r.__words[0];
    if (v28)
    {
      if (*((char *)v27 + 23) >= 0)
        v30 = v27;
      else
        v30 = *v27;
      memmove(v29, v30, v28);
    }
    *(_WORD *)((char *)&v29->__r_.__value_.__l.__data_ + v28) = 45;
    v31 = *(_QWORD *)(a2 + 112);
    v32 = *(char *)(v31 + 23);
    if (v32 >= 0)
      v33 = *(const std::string::value_type **)(a2 + 112);
    else
      v33 = *(const std::string::value_type **)v31;
    if (v32 >= 0)
      v34 = *(unsigned __int8 *)(v31 + 23);
    else
      v34 = *(_QWORD *)(v31 + 8);
    v35 = std::string::append(&v119, v33, v34);
    v36 = (char *)v35->__r_.__value_.__r.__words[0];
    v122.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v122.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
    v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    end = v118.__end_;
    if (v118.__end_ >= v118.__end_cap_.__value_)
    {
      v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_ - (char *)v118.__begin_) >> 3);
      v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) > v45)
        v45 = 0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v45;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v118.__end_cap_;
      if (v46)
        v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)&v118.__end_cap_, v46);
      else
        v47 = 0;
      v48 = v47 + v44;
      __v.__first_ = v47;
      __v.__begin_ = v48;
      __v.__end_cap_.__value_ = &v47[v46];
      v48->__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
      v48->__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v122.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&v48->__r_.__value_.__s + 23) = v37;
      __v.__end_ = v48 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v118, &__v);
      v39 = v118.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v118.__end_->__r_.__value_.__l.__data_ = v36;
      end->__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v122.__r_.__value_.__r.__words + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v37;
      v39 = end + 1;
    }
    v118.__end_ = v39;
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v4 = *(_DWORD *)(a2 + 244);
    if ((v4 & 0x80000) == 0)
      goto LABEL_168;
    goto LABEL_144;
  }
  if (*(_BYTE *)(v26 + 23))
    goto LABEL_121;
LABEL_143:
  if ((v4 & 0x80000) == 0)
    goto LABEL_168;
LABEL_144:
  v40 = *(_QWORD *)(a2 + 216);
  if (*(char *)(v40 + 23) < 0)
  {
    if (!*(_QWORD *)(v40 + 8))
      goto LABEL_168;
  }
  else if (!*(_BYTE *)(v40 + 23))
  {
    goto LABEL_168;
  }
  v41 = v118.__end_;
  if (v118.__end_ >= v118.__end_cap_.__value_)
  {
    v43 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v40);
  }
  else
  {
    if ((*(_BYTE *)(v40 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v118.__end_, *(const std::string::value_type **)v40, *(_QWORD *)(v40 + 8));
    }
    else
    {
      v42 = *(_OWORD *)v40;
      v118.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v40 + 16);
      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
    }
    v43 = v41 + 1;
  }
  v118.__end_ = v43;
  v4 = *(_DWORD *)(a2 + 244);
LABEL_168:
  if ((v4 & 0x1000) == 0)
    goto LABEL_169;
  v49 = *(_QWORD *)(a2 + 112);
  if (*(char *)(v49 + 23) < 0)
  {
    if (!*(_QWORD *)(v49 + 8))
      goto LABEL_169;
  }
  else if (!*(_BYTE *)(v49 + 23))
  {
LABEL_169:
    if ((v4 & 0x40) == 0)
      goto LABEL_188;
    goto LABEL_182;
  }
  v50 = v118.__end_;
  if (v118.__end_ >= v118.__end_cap_.__value_)
  {
    v52 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v49);
  }
  else
  {
    if ((*(_BYTE *)(v49 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v118.__end_, *(const std::string::value_type **)v49, *(_QWORD *)(v49 + 8));
    }
    else
    {
      v51 = *(_OWORD *)v49;
      v118.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v49 + 16);
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
    }
    v52 = v50 + 1;
  }
  v118.__end_ = v52;
  v4 = *(_DWORD *)(a2 + 244);
  if ((v4 & 0x40) == 0)
  {
LABEL_188:
    if ((v4 & 2) == 0)
      goto LABEL_200;
LABEL_194:
    v57 = *(_QWORD *)(a2 + 24);
    if (*(char *)(v57 + 23) < 0)
    {
      if (!*(_QWORD *)(v57 + 8))
        goto LABEL_200;
    }
    else if (!*(_BYTE *)(v57 + 23))
    {
      goto LABEL_200;
    }
    v58 = v118.__end_;
    if (v118.__end_ >= v118.__end_cap_.__value_)
    {
      v60 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v57);
    }
    else
    {
      if ((*(_BYTE *)(v57 + 23) & 0x80) != 0)
      {
        std::string::__init_copy_ctor_external(v118.__end_, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
      }
      else
      {
        v59 = *(_OWORD *)v57;
        v118.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v57 + 16);
        *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
      }
      v60 = v58 + 1;
    }
    v118.__end_ = v60;
    if ((*(_DWORD *)(a2 + 244) & 8) == 0)
      goto LABEL_217;
    goto LABEL_206;
  }
LABEL_182:
  v53 = *(_QWORD *)(a2 + 64);
  if (*(char *)(v53 + 23) < 0)
  {
    if (!*(_QWORD *)(v53 + 8))
      goto LABEL_188;
  }
  else if (!*(_BYTE *)(v53 + 23))
  {
    goto LABEL_188;
  }
  v54 = v118.__end_;
  if (v118.__end_ >= v118.__end_cap_.__value_)
  {
    v56 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v53);
  }
  else
  {
    if ((*(_BYTE *)(v53 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v118.__end_, *(const std::string::value_type **)v53, *(_QWORD *)(v53 + 8));
    }
    else
    {
      v55 = *(_OWORD *)v53;
      v118.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v53 + 16);
      *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
    }
    v56 = v54 + 1;
  }
  v118.__end_ = v56;
  v4 = *(_DWORD *)(a2 + 244);
  if ((v4 & 2) != 0)
    goto LABEL_194;
LABEL_200:
  if ((v4 & 8) == 0)
    goto LABEL_217;
LABEL_206:
  v61 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v61 + 23) < 0)
  {
    if (!*(_QWORD *)(v61 + 8))
      goto LABEL_217;
  }
  else if (!*(_BYTE *)(v61 + 23))
  {
    goto LABEL_217;
  }
  v62 = v118.__end_;
  if (v118.__end_ >= v118.__end_cap_.__value_)
  {
    v64 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v118, (__int128 *)v61);
  }
  else
  {
    if ((*(_BYTE *)(v61 + 23) & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(v118.__end_, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
    }
    else
    {
      v63 = *(_OWORD *)v61;
      v118.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 16);
      *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
    }
    v64 = v62 + 1;
  }
  v118.__end_ = v64;
LABEL_217:
  v116 = a1;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>(&v118, v118.__end_, *(__int128 ***)(a2 + 120), (__int128 **)(*(_QWORD *)(a2 + 120) + 8 * *(int *)(a2 + 128)), *(int *)(a2 + 128));
  v65 = std::vector<std::string>::__insert_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>(&v118, v118.__end_, *(__int128 ***)(a2 + 160), (__int128 **)(*(_QWORD *)(a2 + 160) + 8 * *(int *)(a2 + 168)), *(int *)(a2 + 168));
  v117 = a2;
  v66 = *(int *)(a2 + 200);
  if ((_DWORD)v66)
  {
    v67 = *(uint64_t **)(a2 + 192);
    v68 = &v67[v66];
    do
    {
      v69 = *v67;
      v70 = (const AddrObjGoogle::protobuf::EnumDescriptor *)*(unsigned int *)(*v67 + 24);
      v71 = (AddrObjGoogle::protobuf::internal *)addr_obj::geo3::StructuredAddress_SubPremise_SubPremiseType_descriptor((addr_obj::geo3 *)v65);
      v72 = AddrObjGoogle::protobuf::internal::NameOfEnum(v71, v70);
      if (*((char *)v72 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v119, (const std::string::value_type *)*v72, v72[1]);
      }
      else
      {
        v73 = *(_OWORD *)v72;
        v119.__r_.__value_.__r.__words[2] = v72[2];
        *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v73;
      }
      v74 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      v75 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      size = v119.__r_.__value_.__l.__size_;
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = (char *)&v119 + HIBYTE(v119.__r_.__value_.__r.__words[2]);
      else
        v77 = (std::string::value_type *)(v119.__r_.__value_.__r.__words[0] + v119.__r_.__value_.__l.__size_);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = &v119;
      else
        v78 = (std::string *)v119.__r_.__value_.__r.__words[0];
      v79 = &v78->__r_.__value_.__s.__data_[1];
      if ((char *)&v78->__r_.__value_.__l.__data_ + 1 != v77)
      {
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v80 = &v119;
        else
          v80 = (std::string *)v119.__r_.__value_.__r.__words[0];
        v81 = &v80->__r_.__value_.__s.__data_[1];
        do
          *v81++ = __tolower(*v79++);
        while (v79 != v77);
        v74 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
        size = v119.__r_.__value_.__l.__size_;
        v75 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      }
      if (v75 >= 0)
        v82 = v74;
      else
        v82 = size;
      std::string::basic_string[abi:ne180100]((uint64_t)&v122, v82 + 1);
      if ((v122.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v122;
      else
        v83 = (std::string *)v122.__r_.__value_.__r.__words[0];
      if (v82)
      {
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v84 = &v119;
        else
          v84 = (std::string *)v119.__r_.__value_.__r.__words[0];
        memmove(v83, v84, v82);
      }
      *(_WORD *)((char *)&v83->__r_.__value_.__l.__data_ + v82) = 32;
      v85 = *(_QWORD *)(v69 + 16);
      v86 = *(char *)(v85 + 23);
      if (v86 >= 0)
        v87 = *(const std::string::value_type **)(v69 + 16);
      else
        v87 = *(const std::string::value_type **)v85;
      if (v86 >= 0)
        v88 = *(unsigned __int8 *)(v85 + 23);
      else
        v88 = *(_QWORD *)(v85 + 8);
      v65 = std::string::append(&v122, v87, v88);
      v89 = (char *)v65->__r_.__value_.__r.__words[0];
      v121.__r_.__value_.__r.__words[0] = v65->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v121.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
      v90 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
      v65->__r_.__value_.__l.__size_ = 0;
      v65->__r_.__value_.__r.__words[2] = 0;
      v65->__r_.__value_.__r.__words[0] = 0;
      v91 = v118.__end_;
      if (v118.__end_ >= v118.__end_cap_.__value_)
      {
        v93 = 0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_ - (char *)v118.__begin_) >> 3);
        v94 = v93 + 1;
        if (v93 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) > v94)
          v94 = 0x5555555555555556 * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_cap_.__value_ - (char *)v118.__begin_) >> 3) >= 0x555555555555555)
          v95 = 0xAAAAAAAAAAAAAAALL;
        else
          v95 = v94;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v118.__end_cap_;
        if (v95)
          v96 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)&v118.__end_cap_, v95);
        else
          v96 = 0;
        v97 = v96 + v93;
        __v.__first_ = v96;
        __v.__begin_ = v97;
        __v.__end_cap_.__value_ = &v96[v95];
        v97->__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
        v97->__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v97->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v121.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v97->__r_.__value_.__s + 23) = v90;
        __v.__end_ = v97 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v118, &__v);
        v92 = v118.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
      else
      {
        v118.__end_->__r_.__value_.__l.__data_ = v89;
        v91->__r_.__value_.__l.__size_ = v121.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v91->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v121.__r_.__value_.__r.__words + 7);
        *((_BYTE *)&v91->__r_.__value_.__s + 23) = v90;
        v92 = v91 + 1;
      }
      v118.__end_ = v92;
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      ++v67;
    }
    while (v67 != v68);
  }
  v98 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v118.__end_ - (char *)v118.__begin_) >> 3));
  if (v118.__end_ == v118.__begin_)
    v99 = 0;
  else
    v99 = v98;
  sub_1887E3484((uint64_t)v118.__begin_, (uint64_t *)v118.__end_, v99, 1);
  addr_obj::Formatting::stripComponents(v116, (char **)&v118, (std::string *)&__v);
  end_high = HIBYTE(__v.__end_);
  if (SHIBYTE(__v.__end_) >= 0)
    begin = (std::__split_buffer<std::string>::pointer)HIBYTE(__v.__end_);
  else
    begin = __v.__begin_;
  if (begin)
  {
    v102 = *(uint64_t ***)(v117 + 24);
    v103 = *((char *)v102 + 23);
    if (v103 < 0)
    {
      if (v102[1] != (uint64_t *)2)
        goto LABEL_282;
      v102 = (uint64_t **)*v102;
    }
    else if (v103 != 2)
    {
      goto LABEL_282;
    }
    if (*(_WORD *)v102 != 20554)
      goto LABEL_282;
    v106 = *(const std::string **)(v117 + 56);
    if (SHIBYTE(v106->__r_.__value_.__r.__words[2]) < 0)
    {
      v107 = v106->__r_.__value_.__l.__size_;
      if (!v107)
        goto LABEL_282;
      v108 = (char *)v106->__r_.__value_.__r.__words[0];
    }
    else
    {
      v107 = HIBYTE(v106->__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&v106->__r_.__value_.__s + 23))
        goto LABEL_282;
      v108 = *(char **)(v117 + 56);
    }
    if (v107 >= 2)
    {
      v109 = &v108[v107];
      v110 = v108;
      do
      {
        v111 = (char *)memchr(v110, 44, v107 - 1);
        if (!v111)
          break;
        if (*(_WORD *)v111 == 8236)
        {
          if (v111 != v109)
          {
            v112 = v111 - v108;
            if (v111 - v108 != -1)
            {
              std::string::basic_string(&v119, v106, 0, v112, (std::allocator<char> *)&v121);
              std::string::basic_string(&v122, *(const std::string **)(v117 + 56), v112 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v121);
              v113 = (std::string *)std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>((uint64_t)v118.__begin_, (uint64_t)v118.__end_, *(unsigned __int8 ***)(v117 + 56));
              if (v113 != v118.__end_)
              {
                v114 = v113;
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v122.__r_.__value_.__l.__data_, (const void **)&v119.__r_.__value_.__l.__data_, (uint64_t)&v121);
                if (SHIBYTE(v114->__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v114->__r_.__value_.__l.__data_);
                v115 = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
                v114->__r_.__value_.__r.__words[2] = v121.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v114->__r_.__value_.__l.__data_ = v115;
                addr_obj::Formatting::stripComponents(v116, (char **)&v118, &v121);
                if (SHIBYTE(__v.__end_) < 0)
                  operator delete(__v.__first_);
                *(_OWORD *)&__v.__first_ = *(_OWORD *)&v121.__r_.__value_.__l.__data_;
                __v.__end_ = (std::__split_buffer<std::string>::pointer)v121.__r_.__value_.__r.__words[2];
              }
              if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v122.__r_.__value_.__l.__data_);
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v119.__r_.__value_.__l.__data_);
              end_high = HIBYTE(__v.__end_);
            }
          }
          break;
        }
        v110 = v111 + 1;
        v107 = v109 - (_BYTE *)v110;
      }
      while (v109 - (_BYTE *)v110 >= 2);
    }
  }
LABEL_282:
  if ((end_high & 0x80) != 0)
  {
    v104 = __v.__begin_ == 0;
    operator delete(__v.__first_);
  }
  else
  {
    v104 = end_high == 0;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v118;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v104;
}

void sub_1887E1408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, std::__split_buffer<std::string> *a14, char a15, uint64_t a16, uint64_t a17, void *__pa, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 97) < 0)
    operator delete(*(void **)(v30 - 120));
  if (a23 < 0)
    operator delete(__pa);
  if (a30 < 0)
    operator delete(a25);
  *(_QWORD *)(v30 - 120) = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 120));
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  std::string *v5;
  std::string *v6;
  std::vector<std::string>::pointer end;
  char v9;

  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (__int128 *)__last.__i_, (__int128 *)this->__end_, (uint64_t)__first.__i_);
    v6 = v5;
    end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(end[-1].__r_.__value_.__l.__data_);
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

void addr_obj::Formatting::removeMultipleWhitespaces(uint64_t a1, std::string *this)
{
  int v3;
  std::string::value_type *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::value_type *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;

  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (std::string::value_type *)a1;
  else
    v4 = *(std::string::value_type **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    std::string::push_back(this, *v4);
    v6 = v5 - 1;
    if (v5 != 1)
    {
      v7 = v4 + 1;
      v8 = MEMORY[0x1E0C80978];
      while (1)
      {
        v9 = *v4;
        v10 = *v7;
        if ((v9 & 0x80000000) != 0)
        {
          if (!__maskrune(v9, 0x4000uLL))
            goto LABEL_20;
        }
        else if ((*(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000) == 0)
        {
          goto LABEL_20;
        }
        if ((v10 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(v8 + 4 * v10 + 60) & 0x4000) == 0)
          goto LABEL_20;
LABEL_21:
        ++v7;
        if (!--v6)
          return;
      }
      if (__maskrune(v10, 0x4000uLL))
        goto LABEL_21;
LABEL_20:
      std::string::push_back(this, *v7);
      v4 = v7;
      goto LABEL_21;
    }
  }
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>(std::string *result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1887E1724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *this)
{
  std::string *v4;
  __int128 **v6;
  __int128 *v7;
  __int128 v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      if (*((char *)*v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
        v4 = v13;
      }
      else
      {
        v8 = *v7;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v6;
      v13 = ++v4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1887E17F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(std::vector<std::string> *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 *v21;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + (((char *)v12 - (char *)a2) >> 3));
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string *,0>(a3, (std::string *)v21, v5);
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>((uint64_t)&__v, (__int128 *)a3, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_1887E1A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<std::__wrap_iter<std::string*>>(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v4;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1887E1B28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a4;
  v10 = a4;
  v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v10 = v4;
  }
  v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void sub_1887E1D3C(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  BOOL v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 *v148;
  _QWORD *v150;
  _BYTE v151[7];
  _BYTE v152[7];
  _BYTE v153[7];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[15];
  _BYTE v162[7];
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

__int128 *sub_1887E2A7C(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a2 + 1);
  if (*((char *)result + 23) >= 0)
    v4 = *((unsigned __int8 *)result + 23);
  else
    v4 = *((_QWORD *)result + 1);
  v5 = *((unsigned __int8 *)a3 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a3 + 1);
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v9 = *((_QWORD *)a2 + 2);
      v10 = *a2;
      v11 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v11;
      *a3 = v10;
      *((_QWORD *)a3 + 2) = v9;
      v12 = *((unsigned __int8 *)a2 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *((_QWORD *)a2 + 1);
      v13 = *((unsigned __int8 *)result + 23);
      if ((v13 & 0x80u) != 0)
        v13 = *((_QWORD *)result + 1);
      if (v12 > v13)
      {
        v14 = *((_QWORD *)result + 2);
        v15 = *result;
        v16 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v16;
        *a2 = v15;
        *((_QWORD *)a2 + 2) = v14;
      }
    }
  }
  else
  {
    if (v5 > v3)
    {
      v6 = *((_QWORD *)result + 2);
      v7 = *result;
      v8 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v8;
LABEL_24:
      *a3 = v7;
      *((_QWORD *)a3 + 2) = v6;
      return result;
    }
    v17 = *((_QWORD *)result + 2);
    v18 = *result;
    v19 = *((_QWORD *)a2 + 2);
    *result = *a2;
    *((_QWORD *)result + 2) = v19;
    *a2 = v18;
    *((_QWORD *)a2 + 2) = v17;
    v20 = *((unsigned __int8 *)a3 + 23);
    if ((v20 & 0x80u) != 0)
      v20 = *((_QWORD *)a3 + 1);
    v21 = *((unsigned __int8 *)a2 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *((_QWORD *)a2 + 1);
    if (v20 > v21)
    {
      v6 = *((_QWORD *)a2 + 2);
      v7 = *a2;
      v22 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v22;
      goto LABEL_24;
    }
  }
  return result;
}

BOOL sub_1887E2BDC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[7];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(a2 - 16);
      v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1887E2F4C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 24);
      v26 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 72);
      sub_1887E2F4C(a1, a1 + 24, a1 + 48, a1 + 72);
      v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(a2 - 16);
      v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a1 + 80);
      if (v28 > v29)
      {
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *v27;
        v32 = *(_QWORD *)(a2 - 8);
        *v27 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 24) = v31;
        *(_QWORD *)(a2 - 8) = v30;
        v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0)
          v33 = *(_QWORD *)(a1 + 80);
        v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(a1 + 56);
        if (v33 > v34)
        {
          v35 = *(_QWORD *)(a1 + 64);
          v36 = *v26;
          *v26 = *v27;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v27 = v36;
          *(_QWORD *)(a1 + 88) = v35;
          v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a1 + 56);
          v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0)
            v38 = *(_QWORD *)(a1 + 32);
          if (v37 > v38)
          {
            v39 = *(_QWORD *)(a1 + 40);
            v40 = *v25;
            *v25 = *v26;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v26 = v40;
            *(_QWORD *)(a1 + 64) = v39;
            v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(a1 + 32);
            v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0)
              v42 = *(_QWORD *)(a1 + 8);
            if (v41 > v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v25 = v44;
              *(_QWORD *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 48;
      sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v12 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v12 + 8);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v12 + 8);
    v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v11 + 8);
    if (v15 > v18)
    {
      v19 = *(_QWORD *)v12;
      *(_DWORD *)v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&v45[3] = *(_DWORD *)(v12 + 19);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(_QWORD *)(v21 + 88) = *(_QWORD *)(a1 + v20 + 64);
        *(_BYTE *)(v21 + 71) = 0;
        *(_BYTE *)(v21 + 48) = 0;
        if (v20 == -48)
          break;
        v22 = *(unsigned __int8 *)(v21 + 47);
        v23 = *(_QWORD *)(v21 + 32);
        if ((v22 & 0x80u) == 0)
          v23 = v22;
        v20 -= 24;
        if (v15 <= v23)
        {
          v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      v24 = a1;
LABEL_23:
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(_BYTE *)(v24 + 23) = v16;
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

__n128 sub_1887E2F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_1887E2A7C((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(unsigned __int8 *)(a4 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a4 + 8);
  v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (v9 > v10)
  {
    v11 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v12 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v12;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v11;
    v13 = *(unsigned __int8 *)(a3 + 23);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a3 + 8);
    v14 = *(unsigned __int8 *)(a2 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a2 + 8);
    if (v13 > v14)
    {
      v15 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v15;
      v17 = *(unsigned __int8 *)(a2 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(a2 + 8);
      v18 = *(unsigned __int8 *)(a1 + 23);
      if ((v18 & 0x80u) != 0)
        v18 = *(_QWORD *)(a1 + 8);
      if (v17 > v18)
      {
        v19 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v20 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v20;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<zilch::TrafficDynamicTile::Flow>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<std::string *>,std::__wrap_iter<std::string *>,std::string *,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1887E31DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1887E31E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::vector<std::string>::__insert_with_size[abi:ne180100]<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>(std::vector<std::string> *a1, std::string *a2, __int128 **a3, __int128 **a4, uint64_t a5)
{
  std::string *v5;
  __int128 **v7;
  std::allocator<std::string> *p_end_cap;
  std::string *v10;
  std::string *value;
  std::string *v12;
  std::vector<std::string>::pointer begin;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 **v21;
  std::string *v22;
  __int128 *v23;
  std::__split_buffer<std::string> __v;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    value = a1->__end_cap_.__value_;
    p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
    v10 = value;
    v12 = (std::string *)*((_QWORD *)p_end_cap - 1);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v12) >> 3)) >= a5)
    {
      v20 = (char *)v12 - (char *)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)) >= a5)
      {
        v21 = &a3[a5];
      }
      else
      {
        v21 = &a3[0xAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)a2) >> 3)];
        a1->__end_ = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>((uint64_t)p_end_cap, v21, a4, *((std::string **)p_end_cap - 1));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::string>::__move_range(a1, v5, v12, &v5[a5]);
      if (v21 != v7)
      {
        v22 = v5;
        do
        {
          v23 = *v7++;
          std::string::operator=(v22++, (const std::string *)v23);
        }
        while (v7 != v21);
      }
    }
    else
    {
      begin = a1->__begin_;
      v14 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)begin) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)begin) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = a5 - 0x5555555555555555 * (((char *)v12 - (char *)a1->__begin_) >> 3);
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      __v.__end_cap_.__value_ = p_end_cap;
      if (v18)
        v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::TrafficDynamicTile::Flow>>((uint64_t)p_end_cap, v18);
      else
        v19 = 0;
      __v.__first_ = v19;
      __v.__begin_ = v19 + v15;
      __v.__end_ = __v.__begin_;
      __v.__end_cap_.__value_ = &v19[v18];
      std::__split_buffer<std::string>::__construct_at_end_with_size<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>((uint64_t)&__v, v7, a5);
      v5 = std::vector<std::string>::__swap_out_circular_buffer(a1, &__v, v5);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
  }
  return v5;
}

void sub_1887E33D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void std::__split_buffer<std::string>::__construct_at_end_with_size<AddrObjGoogle::protobuf::internal::RepeatedPtrIterator<std::string const>>(uint64_t a1, __int128 **a2, uint64_t a3)
{
  std::string *v4;
  std::string *v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;

  v4 = *(std::string **)(a1 + 16);
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 24 * a3;
    do
    {
      v8 = *a2;
      if (*((char *)*a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v9;
      }
      ++v4;
      ++a2;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  *(_QWORD *)(a1 + 16) = v4;
}

void sub_1887E347C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1887E3484(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 *v46;
  __int128 *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 *v59;
  __int128 *v60;
  __int128 *v61;
  unint64_t v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  __int128 v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  BOOL v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int64_t v93;
  int64_t v94;
  int64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  unint64_t v136;
  unint64_t v138;
  uint64_t *v139;
  unint64_t v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  __int128 *v148;
  _QWORD *v150;
  _BYTE v151[7];
  _BYTE v152[7];
  _BYTE v153[7];
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[15];
  _BYTE v162[7];
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;

BOOL sub_1887E41C4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int128 *v25;
  __int128 *v26;
  __int128 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  _BYTE v45[7];

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(unsigned __int8 *)(a2 - 1);
      if ((v6 & 0x80u) != 0)
        v6 = *(_QWORD *)(a2 - 16);
      v7 = *(unsigned __int8 *)(a1 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(a1 + 8);
      if (v6 > v7)
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 24) = v9;
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3uLL:
      sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1887E2F4C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v25 = (__int128 *)(a1 + 24);
      v26 = (__int128 *)(a1 + 48);
      v27 = (__int128 *)(a1 + 72);
      sub_1887E2F4C(a1, a1 + 24, a1 + 48, a1 + 72);
      v28 = *(unsigned __int8 *)(a2 - 1);
      if ((v28 & 0x80u) != 0)
        v28 = *(_QWORD *)(a2 - 16);
      v29 = *(unsigned __int8 *)(a1 + 95);
      if ((v29 & 0x80u) != 0)
        v29 = *(_QWORD *)(a1 + 80);
      if (v28 > v29)
      {
        v30 = *(_QWORD *)(a1 + 88);
        v31 = *v27;
        v32 = *(_QWORD *)(a2 - 8);
        *v27 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v32;
        *(_OWORD *)(a2 - 24) = v31;
        *(_QWORD *)(a2 - 8) = v30;
        v33 = *(unsigned __int8 *)(a1 + 95);
        if ((v33 & 0x80u) != 0)
          v33 = *(_QWORD *)(a1 + 80);
        v34 = *(unsigned __int8 *)(a1 + 71);
        if ((v34 & 0x80u) != 0)
          v34 = *(_QWORD *)(a1 + 56);
        if (v33 > v34)
        {
          v35 = *(_QWORD *)(a1 + 64);
          v36 = *v26;
          *v26 = *v27;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v27 = v36;
          *(_QWORD *)(a1 + 88) = v35;
          v37 = *(unsigned __int8 *)(a1 + 71);
          if ((v37 & 0x80u) != 0)
            v37 = *(_QWORD *)(a1 + 56);
          v38 = *(unsigned __int8 *)(a1 + 47);
          if ((v38 & 0x80u) != 0)
            v38 = *(_QWORD *)(a1 + 32);
          if (v37 > v38)
          {
            v39 = *(_QWORD *)(a1 + 40);
            v40 = *v25;
            *v25 = *v26;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v26 = v40;
            *(_QWORD *)(a1 + 64) = v39;
            v41 = *(unsigned __int8 *)(a1 + 47);
            if ((v41 & 0x80u) != 0)
              v41 = *(_QWORD *)(a1 + 32);
            v42 = *(unsigned __int8 *)(a1 + 23);
            if ((v42 & 0x80u) != 0)
              v42 = *(_QWORD *)(a1 + 8);
            if (v41 > v42)
            {
              v43 = *(_QWORD *)(a1 + 16);
              v44 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v25;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v25 = v44;
              *(_QWORD *)(a1 + 40) = v43;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 48;
      sub_1887E2A7C((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v12 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *(unsigned __int8 *)(v12 + 23);
    v16 = v15;
    v17 = *(_QWORD *)(v12 + 8);
    if ((v15 & 0x80u) != 0)
      v15 = *(_QWORD *)(v12 + 8);
    v18 = *(unsigned __int8 *)(v11 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(v11 + 8);
    if (v15 > v18)
    {
      v19 = *(_QWORD *)v12;
      *(_DWORD *)v45 = *(_DWORD *)(v12 + 16);
      *(_DWORD *)&v45[3] = *(_DWORD *)(v12 + 19);
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v20 = v13;
      while (1)
      {
        v21 = a1 + v20;
        *(_OWORD *)(v21 + 72) = *(_OWORD *)(a1 + v20 + 48);
        *(_QWORD *)(v21 + 88) = *(_QWORD *)(a1 + v20 + 64);
        *(_BYTE *)(v21 + 71) = 0;
        *(_BYTE *)(v21 + 48) = 0;
        if (v20 == -48)
          break;
        v22 = *(unsigned __int8 *)(v21 + 47);
        v23 = *(_QWORD *)(v21 + 32);
        if ((v22 & 0x80u) == 0)
          v23 = v22;
        v20 -= 24;
        if (v15 <= v23)
        {
          v24 = a1 + v20 + 72;
          goto LABEL_23;
        }
      }
      v24 = a1;
LABEL_23:
      *(_QWORD *)v24 = v19;
      *(_QWORD *)(v24 + 8) = v17;
      *(_DWORD *)(v24 + 16) = *(_DWORD *)v45;
      *(_DWORD *)(v24 + 19) = *(_DWORD *)&v45[3];
      *(_BYTE *)(v24 + 23) = v16;
      if (++v14 == 8)
        return v12 + 24 == a2;
    }
    v11 = v12;
    v13 += 24;
    v12 += 24;
    if (v12 == a2)
      return 1;
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

_QWORD *addr_obj::operator<<(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  addr_obj::Base64::encodeString(a2, &v9);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SerializedAddress: <", 20);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v7;
}

{
  _QWORD *v3;
  std::string *v4;
  std::string::size_type size;
  _QWORD *v6;
  _QWORD *v7;
  std::string v9;

  memset(&v9, 0, sizeof(v9));
  addr_obj::Base64::encodeString(a2, &v9);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SerializedStructuredAddress: <", 30);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, size);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)">", 1);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v7;
}

float addr_obj::venue::Field::Field(addr_obj::venue::Field *this, const addr_obj::VenueFieldProto *a2)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v3 = v2;
  *((_QWORD *)&v3 + 1) = HIDWORD(v2);
  *(_OWORD *)this = v3;
  return *(float *)&v2;
}

_QWORD *addr_obj::venue::Field::Field(_QWORD *this, const unint64_t *a2, const unint64_t *a3)
{
  *this = *a2;
  this[1] = *a3;
  return this;
}

int32x2_t addr_obj::venue::Field::toProto(int64x2_t *this, int32x2_t *a2)
{
  int32x2_t result;

  a2[3].i32[1] |= 3u;
  result = vmovn_s64(*this);
  a2[2] = result;
  return result;
}

uint64_t addr_obj::venue::operator<<(_QWORD *a1)
{
  _QWORD *v1;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"fieldId: ", 9);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", decorator: ", 13);
  return std::ostream::operator<<();
}

std::string *addr_obj::venue::Template::Template(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, addr_obj::venue::Decorator **a5)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  std::vector<addr_obj::venue::Field>::__init_with_size[abi:ne180100]<addr_obj::venue::Field*,addr_obj::venue::Field*>(a1[2].__r_.__value_.__r.__words, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  a1[3].__r_.__value_.__r.__words[0] = 0;
  a1[3].__r_.__value_.__l.__size_ = 0;
  a1[3].__r_.__value_.__r.__words[2] = 0;
  std::vector<addr_obj::venue::Decorator>::__init_with_size[abi:ne180100]<addr_obj::venue::Decorator*,addr_obj::venue::Decorator*>(a1 + 3, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 5));
  addr_obj::venue::Template::validate(a1);
  return a1;
}

void sub_1887E4B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v2 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 32) = v7;
    operator delete(v7);
  }
  v8 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

_QWORD *addr_obj::venue::Template::validate(_QWORD *this)
{
  uint64_t i;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  addr_obj::Logger *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::runtime_error *exception;
  void *v15[2];
  char v16;
  std::string v17;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  _QWORD v23[33];

  v2 = this[6];
  for (i = this[7]; v2 != i; v2 += 16)
  {
    if (*(_QWORD *)(v2 + 8) >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(this[10] - this[9]) >> 5))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"there is no decorator for field ", 32);
      v4 = (_QWORD *)addr_obj::venue::operator<<(v3);
      v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" listed in order_;",
             18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" only ", 6);
      v6 = (_QWORD *)std::ostream::operator<<();
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" are defined", 12);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; library version: ",
             19);
      v9 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"11.3.0", 6);
      if (addr_obj::Logger::isInitialized(v9))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
        std::stringbuf::str();
        if ((v21 & 0x80u) == 0)
          v10 = __p;
        else
          v10 = (void **)__p[0];
        if ((v21 & 0x80u) == 0)
          v11 = v21;
        else
          v11 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
        if ((char)v21 < 0)
          operator delete(__p[0]);
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_Template.cpp");
        std::string::basic_string[abi:ne180100]<0>(v18, "validate");
        std::stringbuf::str();
        std::string::basic_string[abi:ne180100]<0>(v15, "");
        addr_obj::Logger::log(16, (uint64_t)__p, 95, (uint64_t)v18, (uint64_t)&v17, (uint64_t)v15);
        if (v16 < 0)
          operator delete(v15[0]);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v17.__r_.__value_.__l.__data_);
        if (v19 < 0)
          operator delete(v18[0]);
        if ((char)v21 < 0)
          operator delete(__p[0]);
        std::ostringstream::~ostringstream((uint64_t)v22);
      }
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; at ", 5);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_Template.cpp", 88);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
      std::ostream::operator<<();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
      std::string::basic_string[abi:ne180100]<0>(v22, "DataError");
      std::stringbuf::str();
      addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v22, (uint64_t)__p);
    }
  }
  return this;
}

void sub_1887E512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887E5188(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

addr_obj::venue::Template *addr_obj::venue::Template::Template(addr_obj::venue::Template *this, const addr_obj::VenueTemplateProto *a2)
{
  char **v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  void *v29[2];
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 __p;
  uint64_t v36;

  *((_OWORD *)this + 3) = 0u;
  v4 = (char **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  v5 = (_QWORD *)((char *)this + 24);
  v6 = (uint64_t *)((char *)this + 72);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  sub_1887E54AC(this, (uint64_t *)a2 + 2);
  sub_1887E54AC(v5, (uint64_t *)a2 + 4);
  if (*((int *)a2 + 14) >= 1)
  {
    v7 = 0;
    do
    {
      addr_obj::venue::Field::Field((addr_obj::venue::Field *)v29, *(const addr_obj::VenueFieldProto **)(*((_QWORD *)a2 + 6) + 8 * v7));
      v9 = (_OWORD *)*((_QWORD *)this + 7);
      v8 = *((_QWORD *)this + 8);
      if ((unint64_t)v9 >= v8)
      {
        v11 = ((char *)v9 - *v4) >> 4;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 60)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v13 = v8 - (_QWORD)*v4;
        if (v13 >> 3 > v12)
          v12 = v13 >> 3;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
          v14 = 0xFFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
          v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<zilch::TrafficDynamicTile::Incident>>>((uint64_t)this + 64, v14);
        else
          v15 = 0;
        v16 = &v15[16 * v11];
        *(_OWORD *)v16 = *(_OWORD *)v29;
        v18 = (char *)*((_QWORD *)this + 6);
        v17 = (char *)*((_QWORD *)this + 7);
        v19 = v16;
        if (v17 != v18)
        {
          do
          {
            *((_OWORD *)v19 - 1) = *((_OWORD *)v17 - 1);
            v19 -= 16;
            v17 -= 16;
          }
          while (v17 != v18);
          v17 = *v4;
        }
        v10 = v16 + 16;
        *((_QWORD *)this + 6) = v19;
        *((_QWORD *)this + 7) = v16 + 16;
        *((_QWORD *)this + 8) = &v15[16 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v9 = *(_OWORD *)v29;
        v10 = v9 + 1;
      }
      *((_QWORD *)this + 7) = v10;
      ++v7;
    }
    while (v7 < *((int *)a2 + 14));
  }
  if (*((int *)a2 + 20) >= 1)
  {
    v20 = 0;
    do
    {
      addr_obj::venue::Decorator::Decorator((addr_obj::venue::Decorator *)v29, *(const addr_obj::VenueDecoratorProto **)(*((_QWORD *)a2 + 9) + 8 * v20));
      v21 = *((_QWORD *)this + 10);
      if (v21 >= *((_QWORD *)this + 11))
      {
        v26 = std::vector<addr_obj::venue::Decorator>::__push_back_slow_path<addr_obj::venue::Decorator>(v6, (__int128 *)v29);
        v27 = SHIBYTE(v36);
        *((_QWORD *)this + 10) = v26;
        if (v27 < 0)
          operator delete((void *)__p);
      }
      else
      {
        v22 = *(_OWORD *)v29;
        *(_QWORD *)(v21 + 16) = v30;
        *(_OWORD *)v21 = v22;
        v29[1] = 0;
        v30 = 0;
        v29[0] = 0;
        v23 = v32;
        *(_OWORD *)(v21 + 24) = v31;
        *(_QWORD *)(v21 + 40) = v23;
        v32 = 0;
        v31 = 0uLL;
        v24 = v33;
        *(_QWORD *)(v21 + 64) = v34;
        *(_OWORD *)(v21 + 48) = v24;
        v34 = 0;
        v33 = 0uLL;
        v25 = __p;
        *(_QWORD *)(v21 + 88) = v36;
        *(_OWORD *)(v21 + 72) = v25;
        __p = 0uLL;
        v36 = 0;
        *((_QWORD *)this + 10) = v21 + 96;
      }
      if (SHIBYTE(v34) < 0)
        operator delete((void *)v33);
      if (SHIBYTE(v32) < 0)
        operator delete((void *)v31);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      ++v20;
    }
    while (v20 < *((int *)a2 + 20));
  }
  addr_obj::venue::Template::validate(this);
  return this;
}

void sub_1887E5448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;

  std::vector<addr_obj::venue::Decorator>::__destroy_vector::operator()[abi:ne180100](&a9);
  v13 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v9 + 56) = v13;
    operator delete(v13);
  }
  v14 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 32) = v14;
    operator delete(v14);
  }
  v15 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

void sub_1887E54AC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  std::vector<unsigned long>::resize((uint64_t)a1, *((int *)a2 + 2));
  v4 = (_QWORD *)*a1;
  v5 = a1[1];
  v6 = v5 - *a1;
  if (v5 != *a1)
  {
    v7 = 0;
    v8 = v6 >> 3;
    v9 = *a2;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      *v4++ = *(int *)(v9 + (v7 >> 30));
      v7 += 0x100000000;
      --v8;
    }
    while (v8);
  }
}

void addr_obj::venue::Template::toProto(int **this, addr_obj::VenueTemplateProto *a2)
{
  _DWORD *v4;
  int64x2_t *i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  addr_obj::VenueFieldProto *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *j;
  int v13;
  uint64_t v14;
  uint64_t v15;
  addr_obj::VenueDecoratorProto *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (_DWORD *)((char *)a2 + 32);
  (*(void (**)(addr_obj::VenueTemplateProto *))(*(_QWORD *)a2 + 32))(a2);
  sub_1887E5680(this, (_DWORD *)a2 + 4);
  sub_1887E5680(this + 3, v4);
  for (i = (int64x2_t *)this[6]; i != (int64x2_t *)this[7]; ++i)
  {
    v6 = *((_DWORD *)a2 + 15);
    v7 = *((int *)a2 + 14);
    if ((int)v7 >= v6)
    {
      if (v6 == *((_DWORD *)a2 + 16))
      {
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)a2 + 12, v6 + 1);
        v6 = *((_DWORD *)a2 + 15);
      }
      *((_DWORD *)a2 + 15) = v6 + 1;
      v9 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFieldProto>::New();
      v10 = *((_QWORD *)a2 + 6);
      v11 = *((int *)a2 + 14);
      *((_DWORD *)a2 + 14) = v11 + 1;
      *(_QWORD *)(v10 + 8 * v11) = v9;
    }
    else
    {
      v8 = *((_QWORD *)a2 + 6);
      *((_DWORD *)a2 + 14) = v7 + 1;
      v9 = *(addr_obj::VenueFieldProto **)(v8 + 8 * v7);
    }
    addr_obj::venue::Field::toProto(i, (int32x2_t *)v9);
  }
  for (j = (std::string *)this[9]; j != (std::string *)this[10]; j += 4)
  {
    v13 = *((_DWORD *)a2 + 21);
    v14 = *((int *)a2 + 20);
    if ((int)v14 >= v13)
    {
      if (v13 == *((_DWORD *)a2 + 22))
      {
        AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)a2 + 18, v13 + 1);
        v13 = *((_DWORD *)a2 + 21);
      }
      *((_DWORD *)a2 + 21) = v13 + 1;
      v16 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueDecoratorProto>::New();
      v17 = *((_QWORD *)a2 + 9);
      v18 = *((int *)a2 + 20);
      *((_DWORD *)a2 + 20) = v18 + 1;
      *(_QWORD *)(v17 + 8 * v18) = v16;
    }
    else
    {
      v15 = *((_QWORD *)a2 + 9);
      *((_DWORD *)a2 + 20) = v14 + 1;
      v16 = *(addr_obj::VenueDecoratorProto **)(v15 + 8 * v14);
    }
    addr_obj::venue::Decorator::toProto(j, v16);
  }
}

int **sub_1887E5680(int **result, _DWORD *a2)
{
  int *v2;
  int *v3;
  int **v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    v5 = result;
    do
    {
      v6 = *v3;
      v7 = a2[2];
      if (v7 == a2[3])
      {
        result = (int **)AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(a2, v7 + 1);
        v7 = a2[2];
        v2 = v5[1];
      }
      v8 = *(_QWORD *)a2;
      a2[2] = v7 + 1;
      *(_DWORD *)(v8 + 4 * v7) = v6;
      v3 += 2;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t addr_obj::venue::Template::getDecorator(addr_obj::venue::Template *this, const addr_obj::venue::Field *a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  addr_obj::Logger *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  std::logic_error *exception;
  void *v20[2];
  char v21;
  std::string v22;
  void *v23[2];
  char v24;
  void *v25[2];
  unsigned __int8 v26;
  void *__p[2];
  unsigned __int8 v28;
  _QWORD v29[33];

  v2 = *((_QWORD *)a2 + 1);
  v3 = *((_QWORD *)this + 9);
  if (v2 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 10) - v3) >> 5))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"the decorator index <", 21);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"> is out of range; ",
           19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"only [0-", 8);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") are available; ",
           17);
    addr_obj::venue::Template::str((addr_obj::venue::Decorator **)this);
    if ((v28 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v28 & 0x80u) == 0)
      v11 = v28;
    else
      v11 = (uint64_t)__p[1];
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"; library version: ",
            19);
    v14 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"11.3.0", 6);
    if ((char)v28 < 0)
      operator delete(__p[0]);
    if (addr_obj::Logger::isInitialized(v14))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      std::stringbuf::str();
      if ((v26 & 0x80u) == 0)
        v15 = v25;
      else
        v15 = (void **)v25[0];
      if ((v26 & 0x80u) == 0)
        v16 = v26;
      else
        v16 = (uint64_t)v25[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v15, v16);
      if ((char)v26 < 0)
        operator delete(v25[0]);
      std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_Template.cpp");
      std::string::basic_string[abi:ne180100]<0>(v23, "getDecorator");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v20, "");
      addr_obj::Logger::log(16, (uint64_t)v25, 82, (uint64_t)v23, (uint64_t)&v22, (uint64_t)v20);
      if (v21 < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      if (v24 < 0)
        operator delete(v23[0]);
      if ((char)v26 < 0)
        operator delete(v25[0]);
      std::ostringstream::~ostringstream((uint64_t)__p);
    }
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"; at ", 5);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/venue_Template.cpp", 88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::logic_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "LogicError");
    std::stringbuf::str();
    addr_obj::Exception<std::logic_error>::Exception(exception, (const void **)__p, (uint64_t)v25);
  }
  return v3 + 96 * v2;
}

void sub_1887E5CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887E5D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v27;

  std::ostringstream::~ostringstream((uint64_t)&v27);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::venue::Template::str(addr_obj::venue::Decorator **this)
{
  _QWORD *v2;
  addr_obj::venue::Decorator *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  addr_obj::venue::Decorator *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  addr_obj::venue::Decorator *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  addr_obj::venue::Decorator *v16;
  _QWORD v18[11];
  char v19;
  uint64_t v20;
  addr_obj::venue::Decorator *v21;
  addr_obj::venue::Decorator *v22;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"venue::Template: required: [", 28);
  v3 = *this;
  v21 = this[1];
  v22 = v3;
  v4 = addr_obj::stream_container<std::__wrap_iter<unsigned long const*>>(v2, &v22, &v21);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"]", 1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"; excluded: [", 13);
  v7 = this[3];
  v21 = this[4];
  v22 = v7;
  v8 = addr_obj::stream_container<std::__wrap_iter<unsigned long const*>>(v6, &v22, &v21);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"; order: [", 10);
  v11 = this[6];
  v21 = this[7];
  v22 = v11;
  v12 = addr_obj::stream_container<std::__wrap_iter<addr_obj::venue::Field const*>>(v10, (uint64_t *)&v22, &v21);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"]", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"; decorators(", 13);
  v14 = (_QWORD *)std::ostream::operator<<();
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"): ", 3);
  v16 = this[9];
  v21 = this[10];
  v22 = v16;
  addr_obj::stream_container<std::__wrap_iter<addr_obj::venue::Decorator const*>>(v15, &v22, &v21);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v20);
}

void sub_1887E5F30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_call_unexpected(a1);
}

_QWORD *addr_obj::venue::operator<<(_QWORD *a1, addr_obj::venue::Decorator **this)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  addr_obj::venue::Template::str(this);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1887E5FC4(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::string::~string((std::string *)&a10);
  __cxa_call_unexpected(a1);
}

addr_obj::VenueFieldProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFieldProto>::New()
{
  addr_obj::VenueFieldProto *v0;

  v0 = (addr_obj::VenueFieldProto *)operator new();
  addr_obj::VenueFieldProto::VenueFieldProto(v0);
  return v0;
}

void sub_1887E6014(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40380937A6);
  _Unwind_Resume(a1);
}

addr_obj::VenueDecoratorProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueDecoratorProto>::New()
{
  addr_obj::VenueDecoratorProto *v0;

  v0 = (addr_obj::VenueDecoratorProto *)operator new();
  addr_obj::VenueDecoratorProto::VenueDecoratorProto(v0);
  return v0;
}

void sub_1887E6074(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4093195C21);
  _Unwind_Resume(a1);
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t std::vector<addr_obj::venue::Decorator>::__push_back_slow_path<addr_obj::venue::Decorator>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  void *v18[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v18[0] = v10;
  v18[1] = v11;
  v18[3] = &v10[96 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v13 = *(__int128 *)((char *)a2 + 24);
  *((_QWORD *)v11 + 5) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v11 + 24) = v13;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v14 = a2[3];
  *((_QWORD *)v11 + 8) = *((_QWORD *)a2 + 8);
  *((_OWORD *)v11 + 3) = v14;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  v15 = *(__int128 *)((char *)a2 + 72);
  *((_QWORD *)v11 + 11) = *((_QWORD *)a2 + 11);
  *(_OWORD *)(v11 + 72) = v15;
  *((_QWORD *)a2 + 9) = 0;
  *((_QWORD *)a2 + 10) = 0;
  *((_QWORD *)a2 + 11) = 0;
  v18[2] = v11 + 96;
  std::vector<addr_obj::venue::Decorator>::__swap_out_circular_buffer(a1, v18);
  v16 = a1[1];
  std::__split_buffer<addr_obj::venue::Decorator>::~__split_buffer(v18);
  return v16;
}

void sub_1887E6310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<addr_obj::venue::Decorator>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<addr_obj::venue::Decorator>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>,std::reverse_iterator<addr_obj::venue::Decorator*>,std::reverse_iterator<addr_obj::venue::Decorator*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>,std::reverse_iterator<addr_obj::venue::Decorator*>,std::reverse_iterator<addr_obj::venue::Decorator*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 96);
      *(_QWORD *)(v9 - 80) = *(_QWORD *)(a3 - 80);
      *(_OWORD *)(v9 - 96) = v10;
      *(_QWORD *)(a3 - 88) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 96) = 0;
      v11 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v11;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v12 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v12;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v13 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v13;
      v9 -= 96;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    *((_QWORD *)&v18 + 1) = v9;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::venue::Decorator>,std::reverse_iterator<addr_obj::venue::Decorator*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<addr_obj::venue::Decorator>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<addr_obj::venue::Decorator>::~__split_buffer(void **a1)
{
  std::__split_buffer<addr_obj::venue::Decorator>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<addr_obj::venue::Decorator>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<addr_obj::venue::Decorator>::destroy[abi:ne180100](v4, i - 96);
  }
}

_DWORD *AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    result[3] = v5;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, 4 * (int)v3[2]);
      JUMPOUT(0x18D764364);
    }
  }
  return result;
}

_QWORD *addr_obj::stream_container<std::__wrap_iter<unsigned long const*>>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;

  if (*a3 != *a2)
  {
    v5 = *a2 + 8;
    std::ostream::operator<<();
    while (v5 != *a3)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      v5 += 8;
      std::ostream::operator<<();
    }
  }
  return a1;
}

_QWORD *addr_obj::stream_container<std::__wrap_iter<addr_obj::venue::Field const*>>(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t i;
  _QWORD *v7;

  v4 = *a2;
  if (*a3 != *a2)
  {
    addr_obj::venue::operator<<(a1);
    for (i = v4 + 16; i != *a3; i += 16)
    {
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      addr_obj::venue::operator<<(v7);
    }
  }
  return a1;
}

_QWORD *addr_obj::stream_container<std::__wrap_iter<addr_obj::venue::Decorator const*>>(_QWORD *a1, addr_obj::venue::Decorator **a2, addr_obj::venue::Decorator **a3)
{
  addr_obj::venue::Decorator *v4;
  addr_obj::venue::Decorator *i;
  _QWORD *v7;

  v4 = *a2;
  if (*a3 != *a2)
  {
    addr_obj::venue::operator<<(a1, *a2);
    for (i = (addr_obj::venue::Decorator *)((char *)v4 + 96); i != *a3; i = (addr_obj::venue::Decorator *)((char *)i + 96))
    {
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      addr_obj::venue::operator<<(v7, i);
    }
  }
  return a1;
}

void addr_obj::Base64::encodeString(unsigned __int8 *a1, std::string *a2)
{
  std::string::value_type __s[1024];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  addr_obj::Base64::Internal::encodeString(a1, a2, __s, 0x400uLL);
}

uint64_t addr_obj::buildVCard(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  _QWORD v64[11];
  char v65;
  uint64_t v66;
  std::locale v67;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v64);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"BEGIN:VCARD", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"VERSION:3.0", 11);
  std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
  v15 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"N:;", 3);
  v17 = *(char *)(a1 + 23);
  if (v17 >= 0)
    v18 = a1;
  else
    v18 = *(_QWORD *)a1;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 23);
  else
    v19 = *(_QWORD *)(a1 + 8);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)";;;", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"FN: ", 4);
  v24 = *(char *)(a1 + 23);
  if (v24 >= 0)
    v25 = a1;
  else
    v25 = *(_QWORD *)a1;
  if (v24 >= 0)
    v26 = *(unsigned __int8 *)(a1 + 23);
  else
    v26 = *(_QWORD *)(a1 + 8);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"   ", 3);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  v30 = *(unsigned __int8 *)(a2 + 23);
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a2 + 8);
  if (v30)
    goto LABEL_28;
  v31 = *(unsigned __int8 *)(a3 + 23);
  if ((v31 & 0x80u) != 0)
    v31 = *(_QWORD *)(a3 + 8);
  if (v31)
    goto LABEL_28;
  v32 = *(unsigned __int8 *)(a4 + 23);
  if ((v32 & 0x80u) != 0)
    v32 = *(_QWORD *)(a4 + 8);
  if (v32)
    goto LABEL_28;
  v33 = *(unsigned __int8 *)(a5 + 23);
  if ((v33 & 0x80u) != 0)
    v33 = *(_QWORD *)(a5 + 8);
  if (v33)
    goto LABEL_28;
  v34 = *(unsigned __int8 *)(a6 + 23);
  if ((v34 & 0x80u) != 0)
    v34 = *(_QWORD *)(a6 + 8);
  if (v34)
  {
LABEL_28:
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"ADR;type=pref:;;",
            16);
    v36 = *(char *)(a2 + 23);
    if (v36 >= 0)
      v37 = a2;
    else
      v37 = *(_QWORD *)a2;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(a2 + 23);
    else
      v38 = *(_QWORD *)(a2 + 8);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v37, v38);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)";", 1);
    v41 = *(char *)(a3 + 23);
    if (v41 >= 0)
      v42 = a3;
    else
      v42 = *(_QWORD *)a3;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(a3 + 23);
    else
      v43 = *(_QWORD *)(a3 + 8);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)";", 1);
    v46 = *(char *)(a4 + 23);
    if (v46 >= 0)
      v47 = a4;
    else
      v47 = *(_QWORD *)a4;
    if (v46 >= 0)
      v48 = *(unsigned __int8 *)(a4 + 23);
    else
      v48 = *(_QWORD *)(a4 + 8);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)";", 1);
    v51 = *(char *)(a5 + 23);
    if (v51 >= 0)
      v52 = a5;
    else
      v52 = *(_QWORD *)a5;
    if (v51 >= 0)
      v53 = *(unsigned __int8 *)(a5 + 23);
    else
      v53 = *(_QWORD *)(a5 + 8);
    v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, v52, v53);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)";", 1);
    v56 = *(char *)(a6 + 23);
    if (v56 >= 0)
      v57 = a6;
    else
      v57 = *(_QWORD *)a6;
    if (v56 >= 0)
      v58 = *(unsigned __int8 *)(a6 + 23);
    else
      v58 = *(_QWORD *)(a6 + 8);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
    std::ios_base::getloc((const std::ios_base *)((char *)v59 + *(_QWORD *)(*v59 - 24)));
    v60 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale(&v67);
    std::ostream::put();
    std::ostream::flush();
  }
  v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"END:VCARD", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
  v62 = std::locale::use_facet(&v67, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale(&v67);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v64[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v64 + *(_QWORD *)(v64[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v64[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v65 < 0)
    operator delete((void *)v64[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v66);
}

void sub_1887E6CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::parse(addr_obj::Localization *a1, uint64_t a2)
{
  uint64_t *DisplayLanguage;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  addr_obj::Logger *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::runtime_error *exception;
  void *v15[2];
  char v16;
  std::string v17;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  _QWORD v23[33];

  DisplayLanguage = (uint64_t *)addr_obj::Localization::getDisplayLanguage(a1);
  if (!AddrObjGoogle::protobuf::MessageLite::ParseFromString(a2, DisplayLanguage))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"parsing failed for geo3::Address from ", 38);
    v7 = addr_obj::operator<<(v6, (unsigned __int8 *)a1);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; library version: ",
           19);
    v9 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v9))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v18, "parse");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 45, (uint64_t)v18, (uint64_t)&v17, (uint64_t)v15);
      if (v16 < 0)
        operator delete(v15[0]);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18[0]);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v22);
    }
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; at ", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v22, (uint64_t)__p);
  }
  return a2;
}

{
  uint64_t *DisplayLanguage;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  addr_obj::Logger *v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::runtime_error *exception;
  void *v15[2];
  char v16;
  std::string v17;
  void *v18[2];
  char v19;
  void *__p[2];
  unsigned __int8 v21;
  void *v22[2];
  _QWORD v23[33];

  DisplayLanguage = (uint64_t *)addr_obj::Localization::getDisplayLanguage(a1);
  if (!AddrObjGoogle::protobuf::MessageLite::ParseFromString(a2, DisplayLanguage))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v23);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"parsing failed for geo3::StructuredAddress from ", 48);
    v7 = addr_obj::operator<<(v6, (unsigned __int8 *)a1);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; library version: ",
           19);
    v9 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"11.3.0", 6);
    if (addr_obj::Logger::isInitialized(v9))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
      std::stringbuf::str();
      if ((v21 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v11 = v21;
      else
        v11 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v10, v11);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v18, "parse");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      addr_obj::Logger::log(16, (uint64_t)__p, 50, (uint64_t)v18, (uint64_t)&v17, (uint64_t)v15);
      if (v16 < 0)
        operator delete(v15[0]);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (v19 < 0)
        operator delete(v18[0]);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      std::ostringstream::~ostringstream((uint64_t)v22);
    }
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"; at ", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v22, (uint64_t)__p);
  }
  return a2;
}

void sub_1887E7288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887E72E4(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void sub_1887E7870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v30 & 1) == 0)
    {
LABEL_8:
      std::ostringstream::~ostringstream((uint64_t)&v32);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void sub_1887E78CC(_Unwind_Exception *a1)
{
  uint64_t v2;

  std::ostringstream::~ostringstream((uint64_t)&v2);
  _Unwind_Resume(a1);
}

void addr_obj::serialize(addr_obj *this@<X0>, const addr_obj::geo3::Address *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  addr_obj::Logger *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  void *v27[2];
  unsigned __int8 v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD v32[33];
  __int128 v33;
  uint64_t v34;

  v33 = 0uLL;
  v34 = 0;
  if ((AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)this, (uint64_t)&v33) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"failed SerializeToString() on ", 30);
    AddrObjGoogle::protobuf::Message::DebugString(this, v27);
    if ((v28 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v9 = v28;
    else
      v9 = (uint64_t)v27[1];
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for ", 5);
    (*(void (**)(void **__return_ptr, const addr_obj::geo3::Address *))(*(_QWORD *)a2 + 200))(&__p, a2);
    if ((v31 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v31 & 0x80u) == 0)
      v13 = v31;
    else
      v13 = v30;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; library version: ",
            19);
    v16 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"11.3.0", 6);
    if ((char)v31 < 0)
      operator delete(__p);
    if ((char)v28 < 0)
      operator delete(v27[0]);
    if (addr_obj::Logger::isInitialized(v16))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::stringbuf::str();
      if ((v31 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      if ((v31 & 0x80u) == 0)
        v18 = v31;
      else
        v18 = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v17, v18);
      if ((char)v31 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v25, "serialize");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 74, (uint64_t)v25, (uint64_t)&v24, (uint64_t)v22);
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
      if ((char)v31 < 0)
        operator delete(__p);
      std::ostringstream::~ostringstream((uint64_t)v27);
    }
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; at ", 5);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v27, (uint64_t)&__p);
  }
  addr_obj::SerializedAddress::SerializedAddress(a3, &v33);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1887E7F14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  int v61;
  uint64_t v62;

  if (a60 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v61 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v61)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v62);
    JUMPOUT(0x1887E7FD4);
  }
  __cxa_free_exception(v60);
  goto LABEL_8;
}

void sub_1887E7F70(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  std::ostringstream::~ostringstream((uint64_t)&v60);
  JUMPOUT(0x1887E7FD4);
}

void sub_1887E7FCC()
{
  JUMPOUT(0x1887E7FD4);
}

void addr_obj::serialize(addr_obj *this@<X0>, const addr_obj::geo3::StructuredAddress *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  void *p_p;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  addr_obj::Logger *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::runtime_error *exception;
  void *v22[2];
  char v23;
  std::string v24;
  void *v25[2];
  char v26;
  void *v27[2];
  unsigned __int8 v28;
  void *__p;
  uint64_t v30;
  unsigned __int8 v31;
  _QWORD v32[33];
  __int128 v33;
  uint64_t v34;

  v33 = 0uLL;
  v34 = 0;
  if ((AddrObjGoogle::protobuf::MessageLite::SerializeToString((uint64_t)this, (uint64_t)&v33) & 1) == 0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"failed SerializeToString() on ", 30);
    AddrObjGoogle::protobuf::Message::DebugString(this, v27);
    if ((v28 & 0x80u) == 0)
      v8 = v27;
    else
      v8 = (void **)v27[0];
    if ((v28 & 0x80u) == 0)
      v9 = v28;
    else
      v9 = (uint64_t)v27[1];
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" for ", 5);
    (*(void (**)(void **__return_ptr, const addr_obj::geo3::StructuredAddress *))(*(_QWORD *)a2 + 200))(&__p, a2);
    if ((v31 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v31 & 0x80u) == 0)
      v13 = v31;
    else
      v13 = v30;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)p_p, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; library version: ",
            19);
    v16 = (addr_obj::Logger *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"11.3.0", 6);
    if ((char)v31 < 0)
      operator delete(__p);
    if ((char)v28 < 0)
      operator delete(v27[0]);
    if (addr_obj::Logger::isInitialized(v16))
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::stringbuf::str();
      if ((v31 & 0x80u) == 0)
        v17 = &__p;
      else
        v17 = __p;
      if ((v31 & 0x80u) == 0)
        v18 = v31;
      else
        v18 = v30;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v17, v18);
      if ((char)v31 < 0)
        operator delete(__p);
      std::string::basic_string[abi:ne180100]<0>(&__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp");
      std::string::basic_string[abi:ne180100]<0>(v25, "serialize");
      std::stringbuf::str();
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      addr_obj::Logger::log(16, (uint64_t)&__p, 87, (uint64_t)v25, (uint64_t)&v24, (uint64_t)v22);
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (v26 < 0)
        operator delete(v25[0]);
      if ((char)v31 < 0)
        operator delete(__p);
      std::ostringstream::~ostringstream((uint64_t)v27);
    }
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; at ", 5);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/helpers.cpp", 81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)":", 1);
    std::ostream::operator<<();
    exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
    std::string::basic_string[abi:ne180100]<0>(v27, "DataError");
    std::stringbuf::str();
    addr_obj::Exception<std::runtime_error>::Exception(exception, (const void **)v27, (uint64_t)&__p);
  }
  addr_obj::SerializedAddress::SerializedAddress(a3, &v33);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1887E860C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void *v60;
  int v61;
  uint64_t v62;

  if (a60 < 0)
    operator delete(__p);
  if (a24 < 0)
  {
    operator delete(a19);
    if ((v61 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v61)
  {
LABEL_8:
    std::ostringstream::~ostringstream((uint64_t)&v62);
    JUMPOUT(0x1887E86CCLL);
  }
  __cxa_free_exception(v60);
  goto LABEL_8;
}

void sub_1887E8668(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  std::ostringstream::~ostringstream((uint64_t)&v60);
  JUMPOUT(0x1887E86CCLL);
}

void sub_1887E86C4()
{
  JUMPOUT(0x1887E86CCLL);
}

void addr_obj::leftBracket(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_5:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a2, (const void **)a1, (uint64_t)a3);
    return;
  }
  std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, 0);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  _BYTE *v7;
  void *v8;
  const void *v9;

  if (*((char *)a2 + 23) >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (_BYTE *)result;
  else
    v7 = *(_BYTE **)result;
  *v7 = a1;
  v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  *((_BYTE *)v8 + v5) = 0;
  return result;
}

void addr_obj::rightBracket(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 8))
  {
LABEL_5:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, *(_BYTE *)(a2 + 1), (uint64_t)a3);
    return;
  }
  std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, 0);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  size_t v5;
  uint64_t result;
  char *v7;
  const void *v8;
  char *v9;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0)
    v7 = (char *)result;
  else
    v7 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = a1;
    else
      v8 = *a1;
    result = (uint64_t)memmove(v7, v8, v5);
  }
  v9 = &v7[v5];
  *v9 = a2;
  v9[1] = 0;
  return result;
}

void addr_obj::bothBrackets(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  std::string v6;

  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      v5 = *(_QWORD *)(a1 + 16);
LABEL_6:
      a3->__r_.__value_.__r.__words[2] = v5;
      return;
    }
LABEL_5:
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(*a2, (const void **)a1, (uint64_t)&v6);
    std::string::push_back(&v6, a2[1]);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)&v6.__r_.__value_.__l.__data_;
    v5 = v6.__r_.__value_.__r.__words[2];
    goto LABEL_6;
  }
  if (*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, 0);
}

void sub_1887E891C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1887E8938(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v21;
  std::string v22;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
  v6 = *(unsigned int *)(v4 + 44);
  if ((int)v6 >= 1)
  {
    v7 = v5;
    for (i = 0; i != v6; ++i)
    {
      v9 = *(_QWORD *)(v4 + 48);
      v10 = v9 + 120 * i;
      v11 = *(_DWORD *)(v10 + 44);
      if (v11 == 11)
      {
        v15 = *(_DWORD *)(v9 + 120 * i + 48);
        v16 = *(_QWORD *)v7;
        if (v15 == 3)
        {
          if ((*(int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v7, a1, v10) >= 1)
          {
            v17 = 0;
            do
            {
              v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 440))(v7, a1, v10, v17);
              sub_1887E8938(v18, a2);
              v17 = (v17 + 1);
            }
            while ((int)v17 < (*(int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1, v10));
          }
        }
        else
        {
          v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v16 + 264))(v7, a1, v10, 0);
          sub_1887E8938(v19, a2);
        }
      }
      else if (v11 == 9)
      {
        v12 = *(_DWORD *)(v9 + 120 * i + 48);
        v13 = *(_QWORD *)v7;
        if (v12 == 3)
        {
          if ((*(int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v7, a1, v10) >= 1)
          {
            v14 = 0;
            do
            {
              (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 336))(__p, v7, a1, v10, v14);
              addr_obj::bothBrackets((uint64_t)__p, a2, &v22);
              if (v21 < 0)
                operator delete(__p[0]);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v7 + 424))(v7, a1, v10, v14, &v22);
              if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v22.__r_.__value_.__l.__data_);
              v14 = (v14 + 1);
            }
            while ((int)v14 < (*(int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 48))(v7, a1, v10));
          }
        }
        else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 40))(v7, a1, v10))
        {
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 160))(__p, v7, a1, v10);
          addr_obj::bothBrackets((uint64_t)__p, a2, &v22);
          (*(void (**)(uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v7 + 248))(v7, a1, v10, &v22);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          if (v21 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1887E8BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *addr_obj::operator<<(_QWORD *a1, AddrObjGoogle::protobuf::Message *a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;

  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"AddressObjectProto: ", 20);
  AddrObjGoogle::protobuf::Message::ShortDebugString(a2, (uint64_t)__p);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1887E8CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void addr_obj::getCountryCode(addr_obj *this@<X0>, uint64_t a2@<X8>)
{
  addr_obj::cleanCountryCode(*((_QWORD *)this + 3), a2);
}

void addr_obj::cleanCountryCode(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  addr_obj *v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;

  addr_obj::Debugging::stripDebug(a1, (std::string *)a2);
  if (*(char *)(a2 + 23) < 0)
  {
    v6 = *(_BYTE **)a2;
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 > 1)
    {
      v5 = &v6[v7];
LABEL_7:
      while (v6 != v5)
      {
        *v6 = __toupper((char)*v6);
        ++v6;
      }
      return;
    }
    operator delete(*(void **)a2);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a2 + 23);
    if (v4 >= 2)
    {
      v5 = (_BYTE *)(a2 + v4);
      v6 = (_BYTE *)a2;
      goto LABEL_7;
    }
  }
  addr_obj::emptyString(v3);
  if (byte_1EDF50257 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, (const std::string::value_type *)xmmword_1EDF50240, *((std::string::size_type *)&xmmword_1EDF50240 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_1EDF50240;
    *(_QWORD *)(a2 + 16) = unk_1EDF50250;
  }
}

void sub_1887E8D84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1887E8D34);
}

__int128 *addr_obj::emptyString(addr_obj *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF50258);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_1EDF50258))
  {
    xmmword_1EDF50240 = 0uLL;
    unk_1EDF50250 = 0;
    __cxa_guard_release(&qword_1EDF50258);
  }
  return &xmmword_1EDF50240;
}

BOOL addr_obj::sameCountry(addr_obj *this, const addr_obj::AddressObjectBase *a2, const addr_obj::AddressObjectBase *a3)
{
  unsigned __int8 v4;
  size_t v5;
  unsigned __int8 v6;
  size_t v7;
  BOOL v8;
  _BOOL8 v9;
  void **v11;
  uint64_t v12;
  void **p_s1;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  void *__p[2];
  unsigned __int8 v21;
  void *__s1;
  size_t __n;
  unsigned __int8 v24;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 176))(&__s1);
  (*(void (**)(void **__return_ptr, const addr_obj::AddressObjectBase *))(*(_QWORD *)a2 + 176))(__p, a2);
  v4 = v24;
  if ((v24 & 0x80u) == 0)
    v5 = v24;
  else
    v5 = __n;
  v6 = v21;
  if (v5 && ((v21 & 0x80u) == 0 ? (v7 = v21) : (v7 = (size_t)__p[1]), v7 ? (v8 = v5 == v7) : (v8 = 0), v8))
  {
    if ((v21 & 0x80u) == 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    if ((char)v24 < 0)
    {
      v9 = memcmp(__s1, v11, __n) == 0;
    }
    else if (v24)
    {
      v12 = v24 - 1;
      p_s1 = &__s1;
      do
      {
        v15 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        v14 = v15;
        v17 = *(unsigned __int8 *)v11;
        v11 = (void **)((char *)v11 + 1);
        v16 = v17;
        v19 = v12-- != 0;
        v9 = v14 == v16;
      }
      while (v14 == v16 && v19);
    }
    else
    {
      v9 = 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if ((v6 & 0x80) != 0)
  {
    operator delete(__p[0]);
    if ((v24 & 0x80) == 0)
      return v9;
LABEL_17:
    operator delete(__s1);
    return v9;
  }
  if ((v4 & 0x80) != 0)
    goto LABEL_17;
  return v9;
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void addr_obj::Debugging::stripDebug(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::value_type *v2;
  uint64_t v3;
  char *v4;
  std::string::value_type *v5;
  unsigned int v6;

  v2 = (std::string::value_type *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(std::string::value_type **)a1;
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
    {
      std::string::__init_copy_ctor_external(a2, v2, 0);
      return;
    }
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
  }
  v4 = &v2[v3];
  v5 = &v2[v3 - 1];
  if (v2 >= v5)
    goto LABEL_26;
  do
  {
    v6 = *v2;
    if (v6 <= 0x3D)
    {
      if (v6 == 33)
      {
        if (*v5 != 33)
          break;
      }
      else if (v6 == 40)
      {
        if (*v5 != 41)
          break;
      }
      else if (v6 != 60 || *v5 != 62)
      {
        break;
      }
      goto LABEL_24;
    }
    if (v6 == 62)
    {
      if (*v5 != 60)
        break;
      goto LABEL_24;
    }
    if (v6 == 91)
    {
      if (*v5 != 93)
        break;
      goto LABEL_24;
    }
    if (v6 != 123 || *v5 != 125)
      break;
LABEL_24:
    ++v2;
    --v5;
  }
  while (v2 < v5);
  v4 = v5 + 1;
LABEL_26:
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, v2, v4, v4 - v2);
}

AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *addr_obj::protobuf_AssignDesc_AddressObject_2eproto(addr_obj *this)
{
  AddrObjGoogle::protobuf::DescriptorPool *v1;
  pthread_mutex_t ***v2;
  uint64_t FileByName;
  uint64_t v4;
  std::string *v5;
  addr_obj::LocalizationProto *v6;
  const AddrObjGoogle::protobuf::Descriptor *v7;
  AddrObjGoogle::protobuf::DescriptorPool *v8;
  AddrObjGoogle::protobuf::MessageFactory *v9;
  AddrObjGoogle::protobuf::MessageFactory *v10;
  addr_obj::FingerprintProto *v11;
  const AddrObjGoogle::protobuf::Descriptor *v12;
  AddrObjGoogle::protobuf::DescriptorPool *v13;
  AddrObjGoogle::protobuf::MessageFactory *v14;
  AddrObjGoogle::protobuf::MessageFactory *v15;
  addr_obj::AddressObjectProto *v16;
  const AddrObjGoogle::protobuf::Descriptor *v17;
  AddrObjGoogle::protobuf::DescriptorPool *v18;
  AddrObjGoogle::protobuf::MessageFactory *v19;
  AddrObjGoogle::protobuf::MessageFactory *v20;
  addr_obj::V0AddressObjectProto *v21;
  const AddrObjGoogle::protobuf::Descriptor *v22;
  AddrObjGoogle::protobuf::DescriptorPool *v23;
  AddrObjGoogle::protobuf::MessageFactory *v24;
  AddrObjGoogle::protobuf::MessageFactory *v25;
  addr_obj::V1AddressObjectProto *v26;
  const AddrObjGoogle::protobuf::Descriptor *v27;
  AddrObjGoogle::protobuf::DescriptorPool *v28;
  AddrObjGoogle::protobuf::MessageFactory *v29;
  AddrObjGoogle::protobuf::MessageFactory *v30;
  addr_obj::V2AddressObjectProto *v31;
  const AddrObjGoogle::protobuf::Descriptor *v32;
  AddrObjGoogle::protobuf::DescriptorPool *v33;
  AddrObjGoogle::protobuf::MessageFactory *v34;
  AddrObjGoogle::protobuf::MessageFactory *v35;
  addr_obj::VenueDecoratorProto *v36;
  const AddrObjGoogle::protobuf::Descriptor *v37;
  AddrObjGoogle::protobuf::DescriptorPool *v38;
  AddrObjGoogle::protobuf::MessageFactory *v39;
  AddrObjGoogle::protobuf::MessageFactory *v40;
  addr_obj::VenueFieldProto *v41;
  const AddrObjGoogle::protobuf::Descriptor *v42;
  AddrObjGoogle::protobuf::DescriptorPool *v43;
  AddrObjGoogle::protobuf::MessageFactory *v44;
  AddrObjGoogle::protobuf::MessageFactory *v45;
  addr_obj::VenueTemplateProto *v46;
  const AddrObjGoogle::protobuf::Descriptor *v47;
  AddrObjGoogle::protobuf::DescriptorPool *v48;
  AddrObjGoogle::protobuf::MessageFactory *v49;
  AddrObjGoogle::protobuf::MessageFactory *v50;
  addr_obj::VenueFormatterProto *v51;
  const AddrObjGoogle::protobuf::Descriptor *v52;
  AddrObjGoogle::protobuf::DescriptorPool *v53;
  AddrObjGoogle::protobuf::MessageFactory *v54;
  AddrObjGoogle::protobuf::MessageFactory *v55;
  addr_obj::VenueInfoProto *v56;
  const AddrObjGoogle::protobuf::Descriptor *v57;
  AddrObjGoogle::protobuf::DescriptorPool *v58;
  AddrObjGoogle::protobuf::MessageFactory *v59;
  AddrObjGoogle::protobuf::MessageFactory *v60;
  addr_obj::V3AddressObjectProto *v61;
  const AddrObjGoogle::protobuf::Descriptor *v62;
  AddrObjGoogle::protobuf::DescriptorPool *v63;
  AddrObjGoogle::protobuf::MessageFactory *v64;
  AddrObjGoogle::protobuf::MessageFactory *v65;
  addr_obj::V4AddressObjectProto *v66;
  const AddrObjGoogle::protobuf::Descriptor *v67;
  AddrObjGoogle::protobuf::DescriptorPool *v68;
  AddrObjGoogle::protobuf::MessageFactory *v69;
  AddrObjGoogle::protobuf::MessageFactory *v70;
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *result;
  char v72;
  std::string __p[2];

  v1 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(this);
  v2 = (pthread_mutex_t ***)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v1);
  std::string::basic_string[abi:ne180100]<0>(__p, "AddressObject.proto");
  FileByName = AddrObjGoogle::protobuf::DescriptorPool::FindFileByName(v2, (char *)__p);
  v4 = FileByName;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v4)
    {
LABEL_5:
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 73);
      v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: file != NULL: ");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v72, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
  }
  else if (!FileByName)
  {
    goto LABEL_5;
  }
  qword_1EDF50260 = *(_QWORD *)(v4 + 80);
  v6 = (addr_obj::LocalizationProto *)operator new();
  v7 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50260;
  v8 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::LocalizationProto::default_instance_(v6);
  v9 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v8);
  v10 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v9);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v6, v7, v8, dword_189C5C38C, 44, 8, -1, v9, v10, 48);
  qword_1EDF50268 = (uint64_t)v6;
  qword_1EDF50270 = *(_QWORD *)(v4 + 80) + 120;
  v11 = (addr_obj::FingerprintProto *)operator new();
  v12 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50270;
  v13 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::FingerprintProto::default_instance_(v11);
  v14 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v13);
  v15 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v14);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v11, v12, v13, dword_189C5C398, 52, 8, -1, v14, v15, 56);
  qword_1EDF50278 = (uint64_t)v11;
  qword_1EDF50280 = *(_QWORD *)(v4 + 80) + 240;
  v16 = (addr_obj::AddressObjectProto *)operator new();
  v17 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50280;
  v18 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::AddressObjectProto::default_instance_(v16);
  v19 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v18);
  v20 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v19);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v16, v17, v18, dword_189C5C3A8, 88, 8, -1, v19, v20, 96);
  qword_1EDF50288 = (uint64_t)v16;
  qword_1EDF50290 = *(_QWORD *)(v4 + 80) + 360;
  v21 = (addr_obj::V0AddressObjectProto *)operator new();
  v22 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50290;
  v23 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::V0AddressObjectProto::default_instance_(v21);
  v24 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v23);
  v25 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v24);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v21, v22, v23, dword_189C5C3C4, 92, 8, -1, v24, v25, 96);
  qword_1EDF50298 = (uint64_t)v21;
  qword_1EDF502A0 = *(_QWORD *)(v4 + 80) + 480;
  v26 = (addr_obj::V1AddressObjectProto *)operator new();
  v27 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502A0;
  v28 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::V1AddressObjectProto::default_instance_(v26);
  v29 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v28);
  v30 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v29);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v26, v27, v28, dword_189C5C3E8, 100, 32, 8, v29, v30, 104);
  qword_1EDF502A8 = (uint64_t)v26;
  qword_1EDF502B0 = *(_QWORD *)(v4 + 80) + 600;
  v31 = (addr_obj::V2AddressObjectProto *)operator new();
  v32 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502B0;
  v33 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::V2AddressObjectProto::default_instance_(v31);
  v34 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v33);
  v35 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v34);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v31, v32, v33, dword_189C5C404, 140, 32, 8, v34, v35, 144);
  qword_1EDF502B8 = (uint64_t)v31;
  qword_1EDF502C0 = *(_QWORD *)(v4 + 80) + 720;
  v36 = (addr_obj::VenueDecoratorProto *)operator new();
  v37 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502C0;
  v38 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::VenueDecoratorProto::default_instance_(v36);
  v39 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v38);
  v40 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v39);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v36, v37, v38, dword_189C5C434, 52, 8, -1, v39, v40, 56);
  qword_1EDF502C8 = (uint64_t)v36;
  qword_1EDF502D0 = *(_QWORD *)(v4 + 80) + 840;
  v41 = (addr_obj::VenueFieldProto *)operator new();
  v42 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502D0;
  v43 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::VenueFieldProto::default_instance_(v41);
  v44 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v43);
  v45 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v44);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v41, v42, v43, (const int *)&unk_189C5C444, 28, 8, -1, v44, v45, 32);
  qword_1EDF502D8 = (uint64_t)v41;
  qword_1EDF502E0 = *(_QWORD *)(v4 + 80) + 960;
  v46 = (addr_obj::VenueTemplateProto *)operator new();
  v47 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502E0;
  v48 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::VenueTemplateProto::default_instance_(v46);
  v49 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v48);
  v50 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v49);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v46, v47, v48, dword_189C5C44C, 100, 8, -1, v49, v50, 104);
  qword_1EDF502E8 = (uint64_t)v46;
  qword_1EDF502F0 = *(_QWORD *)(v4 + 80) + 1080;
  v51 = (addr_obj::VenueFormatterProto *)operator new();
  v52 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF502F0;
  v53 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::VenueFormatterProto::default_instance_(v51);
  v54 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v53);
  v55 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v54);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v51, v52, v53, &dword_189C5C45C, 44, 8, -1, v54, v55, 48);
  qword_1EDF502F8 = (uint64_t)v51;
  qword_1EDF50300 = *(_QWORD *)(v4 + 80) + 1200;
  v56 = (addr_obj::VenueInfoProto *)operator new();
  v57 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50300;
  v58 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::VenueInfoProto::default_instance_(v56);
  v59 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v58);
  v60 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v59);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v56, v57, v58, (const int *)&unk_189C5C460, 68, 8, -1, v59, v60, 72);
  qword_1EDF50308 = (uint64_t)v56;
  qword_1EDF50310 = *(_QWORD *)(qword_1EDF50300 + 80);
  qword_1EDF50318 = *(_QWORD *)(v4 + 80) + 1320;
  v61 = (addr_obj::V3AddressObjectProto *)operator new();
  v62 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50318;
  v63 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::V3AddressObjectProto::default_instance_(v61);
  v64 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v63);
  v65 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v64);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v61, v62, v63, &dword_189C5C468, 28, 8, -1, v64, v65, 32);
  qword_1EDF50320 = (uint64_t)v61;
  qword_1EDF50328 = *(_QWORD *)(v4 + 80) + 1440;
  v66 = (addr_obj::V4AddressObjectProto *)operator new();
  v67 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50328;
  v68 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::V4AddressObjectProto::default_instance_(v66);
  v69 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v68);
  v70 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v69);
  result = AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v66, v67, v68, &dword_189C5C46C, 28, 8, -1, v69, v70, 32);
  qword_1EDF50330 = (uint64_t)v66;
  return result;
}

void sub_1887E980C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::protobuf_ShutdownFile_AddressObject_2eproto(addr_obj *this)
{
  uint64_t v1;
  addr_obj::FingerprintProto *v2;
  uint64_t v3;
  addr_obj::AddressObjectProto *v4;
  uint64_t v5;
  addr_obj::V0AddressObjectProto *v6;
  uint64_t v7;
  addr_obj::V1AddressObjectProto *v8;
  uint64_t v9;
  addr_obj::V2AddressObjectProto *v10;
  uint64_t v11;
  addr_obj::VenueDecoratorProto *v12;
  uint64_t v13;
  addr_obj::VenueFieldProto *v14;
  uint64_t v15;
  addr_obj::VenueTemplateProto *v16;
  uint64_t v17;
  addr_obj::VenueFormatterProto *v18;
  uint64_t v19;
  addr_obj::VenueInfoProto *v20;
  uint64_t v21;
  addr_obj::V3AddressObjectProto *v22;
  uint64_t v23;
  addr_obj::V4AddressObjectProto *v24;
  uint64_t v25;
  uint64_t result;

  v1 = addr_obj::LocalizationProto::default_instance_(this);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = (addr_obj::FingerprintProto *)qword_1EDF50268;
  if (qword_1EDF50268)
    v2 = (addr_obj::FingerprintProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50268 + 8))(qword_1EDF50268);
  v3 = addr_obj::FingerprintProto::default_instance_(v2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (addr_obj::AddressObjectProto *)qword_1EDF50278;
  if (qword_1EDF50278)
    v4 = (addr_obj::AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50278 + 8))(qword_1EDF50278);
  v5 = addr_obj::AddressObjectProto::default_instance_(v4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = (addr_obj::V0AddressObjectProto *)qword_1EDF50288;
  if (qword_1EDF50288)
    v6 = (addr_obj::V0AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50288 + 8))(qword_1EDF50288);
  v7 = addr_obj::V0AddressObjectProto::default_instance_(v6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (addr_obj::V1AddressObjectProto *)qword_1EDF50298;
  if (qword_1EDF50298)
    v8 = (addr_obj::V1AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50298 + 8))(qword_1EDF50298);
  v9 = addr_obj::V1AddressObjectProto::default_instance_(v8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = (addr_obj::V2AddressObjectProto *)qword_1EDF502A8;
  if (qword_1EDF502A8)
    v10 = (addr_obj::V2AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502A8 + 8))(qword_1EDF502A8);
  v11 = addr_obj::V2AddressObjectProto::default_instance_(v10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (addr_obj::VenueDecoratorProto *)qword_1EDF502B8;
  if (qword_1EDF502B8)
    v12 = (addr_obj::VenueDecoratorProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502B8 + 8))(qword_1EDF502B8);
  v13 = addr_obj::VenueDecoratorProto::default_instance_(v12);
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = (addr_obj::VenueFieldProto *)qword_1EDF502C8;
  if (qword_1EDF502C8)
    v14 = (addr_obj::VenueFieldProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502C8 + 8))(qword_1EDF502C8);
  v15 = addr_obj::VenueFieldProto::default_instance_(v14);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = (addr_obj::VenueTemplateProto *)qword_1EDF502D8;
  if (qword_1EDF502D8)
    v16 = (addr_obj::VenueTemplateProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502D8 + 8))(qword_1EDF502D8);
  v17 = addr_obj::VenueTemplateProto::default_instance_(v16);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = (addr_obj::VenueFormatterProto *)qword_1EDF502E8;
  if (qword_1EDF502E8)
    v18 = (addr_obj::VenueFormatterProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502E8 + 8))(qword_1EDF502E8);
  v19 = addr_obj::VenueFormatterProto::default_instance_(v18);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = (addr_obj::VenueInfoProto *)qword_1EDF502F8;
  if (qword_1EDF502F8)
    v20 = (addr_obj::VenueInfoProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF502F8 + 8))(qword_1EDF502F8);
  v21 = addr_obj::VenueInfoProto::default_instance_(v20);
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = (addr_obj::V3AddressObjectProto *)qword_1EDF50308;
  if (qword_1EDF50308)
    v22 = (addr_obj::V3AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50308 + 8))(qword_1EDF50308);
  v23 = addr_obj::V3AddressObjectProto::default_instance_(v22);
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = (addr_obj::V4AddressObjectProto *)qword_1EDF50320;
  if (qword_1EDF50320)
    v24 = (addr_obj::V4AddressObjectProto *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50320 + 8))(qword_1EDF50320);
  v25 = addr_obj::V4AddressObjectProto::default_instance_(v24);
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  result = qword_1EDF50330;
  if (qword_1EDF50330)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50330 + 8))(qword_1EDF50330);
  return result;
}

void sub_1887E9ADC(addr_obj::LocalizationProto *a1)
{
  uint64_t v1;
  const std::string::value_type **v2;
  const AddrObjGoogle::protobuf::Descriptor *v3;
  const AddrObjGoogle::protobuf::Message *v4;
  const std::string::value_type **v5;
  addr_obj::FingerprintProto *v6;
  const AddrObjGoogle::protobuf::Descriptor *v7;
  const AddrObjGoogle::protobuf::Message *v8;
  const std::string::value_type **v9;
  addr_obj::AddressObjectProto *v10;
  const AddrObjGoogle::protobuf::Descriptor *v11;
  const AddrObjGoogle::protobuf::Message *v12;
  const std::string::value_type **v13;
  addr_obj::V0AddressObjectProto *v14;
  const AddrObjGoogle::protobuf::Descriptor *v15;
  const AddrObjGoogle::protobuf::Message *v16;
  const std::string::value_type **v17;
  addr_obj::V1AddressObjectProto *v18;
  const AddrObjGoogle::protobuf::Descriptor *v19;
  const AddrObjGoogle::protobuf::Message *v20;
  const std::string::value_type **v21;
  addr_obj::V2AddressObjectProto *v22;
  const AddrObjGoogle::protobuf::Descriptor *v23;
  const AddrObjGoogle::protobuf::Message *v24;
  const std::string::value_type **v25;
  addr_obj::VenueDecoratorProto *v26;
  const AddrObjGoogle::protobuf::Descriptor *v27;
  const AddrObjGoogle::protobuf::Message *v28;
  const std::string::value_type **v29;
  addr_obj::VenueFieldProto *v30;
  const AddrObjGoogle::protobuf::Descriptor *v31;
  const AddrObjGoogle::protobuf::Message *v32;
  const std::string::value_type **v33;
  addr_obj::VenueTemplateProto *v34;
  const AddrObjGoogle::protobuf::Descriptor *v35;
  const AddrObjGoogle::protobuf::Message *v36;
  const std::string::value_type **v37;
  addr_obj::VenueFormatterProto *v38;
  const AddrObjGoogle::protobuf::Descriptor *v39;
  const AddrObjGoogle::protobuf::Message *v40;
  const std::string::value_type **v41;
  addr_obj::VenueInfoProto *v42;
  const AddrObjGoogle::protobuf::Descriptor *v43;
  const AddrObjGoogle::protobuf::Message *v44;
  const std::string::value_type **v45;
  addr_obj::V3AddressObjectProto *v46;
  const AddrObjGoogle::protobuf::Descriptor *v47;
  const AddrObjGoogle::protobuf::Message *v48;
  const std::string::value_type **v49;
  addr_obj::V4AddressObjectProto *v50;
  const AddrObjGoogle::protobuf::Descriptor *v51;
  const AddrObjGoogle::protobuf::Message *v52;
  _QWORD v53[2];
  char v54;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v53[0] = &off_1E1BF6040;
    v53[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v54 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v53);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v53);
  }
  v2 = (const std::string::value_type **)qword_1EDF50260;
  v3 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::LocalizationProto::default_instance(a1);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v2, v3, v4);
  v5 = (const std::string::value_type **)qword_1EDF50270;
  v7 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::FingerprintProto::default_instance(v6);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v5, v7, v8);
  v9 = (const std::string::value_type **)qword_1EDF50280;
  v11 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::AddressObjectProto::default_instance(v10);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v9, v11, v12);
  v13 = (const std::string::value_type **)qword_1EDF50290;
  v15 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::V0AddressObjectProto::default_instance(v14);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v13, v15, v16);
  v17 = (const std::string::value_type **)qword_1EDF502A0;
  v19 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::V1AddressObjectProto::default_instance(v18);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v17, v19, v20);
  v21 = (const std::string::value_type **)qword_1EDF502B0;
  v23 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::V2AddressObjectProto::default_instance(v22);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v21, v23, v24);
  v25 = (const std::string::value_type **)qword_1EDF502C0;
  v27 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::VenueDecoratorProto::default_instance(v26);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v25, v27, v28);
  v29 = (const std::string::value_type **)qword_1EDF502D0;
  v31 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::VenueFieldProto::default_instance(v30);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v29, v31, v32);
  v33 = (const std::string::value_type **)qword_1EDF502E0;
  v35 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::VenueTemplateProto::default_instance(v34);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v33, v35, v36);
  v37 = (const std::string::value_type **)qword_1EDF502F0;
  v39 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::VenueFormatterProto::default_instance(v38);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v37, v39, v40);
  v41 = (const std::string::value_type **)qword_1EDF50300;
  v43 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::VenueInfoProto::default_instance(v42);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v41, v43, v44);
  v45 = (const std::string::value_type **)qword_1EDF50318;
  v47 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::V3AddressObjectProto::default_instance(v46);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v45, v47, v48);
  v49 = (const std::string::value_type **)qword_1EDF50328;
  v51 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::V4AddressObjectProto::default_instance(v50);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v49, v51, v52);
}

void sub_1887E9C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::LocalizationProto::MergeFrom(addr_obj::LocalizationProto *this, const addr_obj::LocalizationProto *a2)
{
  addr_obj::LocalizationProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  const std::string *v9;
  uint64_t *v10;
  std::string *v11;
  const std::string *v12;
  uint64_t *v13;
  std::string *v14;
  char v15;
  std::string v16[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 773);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v15, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 44);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 44) & 1) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)v3 + 11) |= 1u;
      v7 = (uint64_t *)*((_QWORD *)v3 + 2);
      if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v3 + 2) = v8;
      }
      else
      {
        v8 = (std::string *)*((_QWORD *)v3 + 2);
      }
      this = (addr_obj::LocalizationProto *)std::string::operator=(v8, v6);
      v5 = *((_DWORD *)a2 + 11);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0)
          goto LABEL_20;
        goto LABEL_16;
      }
    }
    else if ((*((_BYTE *)a2 + 44) & 2) == 0)
    {
      goto LABEL_6;
    }
    v9 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)v3 + 11) |= 2u;
    v10 = (uint64_t *)*((_QWORD *)v3 + 3);
    if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v11 = (std::string *)operator new();
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 3) = v11;
    }
    else
    {
      v11 = (std::string *)*((_QWORD *)v3 + 3);
    }
    this = (addr_obj::LocalizationProto *)std::string::operator=(v11, v9);
    if ((*((_DWORD *)a2 + 11) & 4) != 0)
    {
LABEL_16:
      v12 = (const std::string *)*((_QWORD *)a2 + 4);
      *((_DWORD *)v3 + 11) |= 4u;
      v13 = (uint64_t *)*((_QWORD *)v3 + 4);
      if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
      {
        v14 = (std::string *)operator new();
        v14->__r_.__value_.__l.__size_ = 0;
        v14->__r_.__value_.__r.__words[2] = 0;
        v14->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v3 + 4) = v14;
      }
      else
      {
        v14 = (std::string *)*((_QWORD *)v3 + 4);
      }
      std::string::operator=(v14, v12);
    }
  }
LABEL_20:
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::LocalizationProto *)((char *)a2 + 8));
}

void sub_1887E9E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::LocalizationProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

addr_obj::LocalizationProto *addr_obj::LocalizationProto::New(addr_obj::LocalizationProto *this)
{
  addr_obj::LocalizationProto *v1;

  v1 = (addr_obj::LocalizationProto *)operator new();
  addr_obj::LocalizationProto::LocalizationProto(v1);
  return v1;
}

void sub_1887E9E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40E7EDF326);
  _Unwind_Resume(a1);
}

uint64_t **addr_obj::LocalizationProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t **v7;
  _QWORD *v8;

  v4 = (uint64_t)this;
  v5 = *((_DWORD *)this + 11);
  if ((v5 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, (uint64_t)this[2], a2);
    v5 = *(_DWORD *)(v4 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v4 + 24), a2);
  if ((*(_DWORD *)(v4 + 44) & 4) != 0)
LABEL_4:
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v4 + 32), a2);
LABEL_5:
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (uint64_t **)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

void addr_obj::LocalizationProto::MergeFrom(addr_obj::LocalizationProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::LocalizationProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 761);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::LocalizationProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887E9FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::LocalizationProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::LocalizationProto::IsInitialized(addr_obj::LocalizationProto *this)
{
  return 1;
}

uint64_t addr_obj::LocalizationProto::GetMetadata(addr_obj::LocalizationProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50260;
}

void sub_1887EA0DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::FingerprintProto::MergeFrom(addr_obj::FingerprintProto *this, const addr_obj::FingerprintProto *a2)
{
  addr_obj::FingerprintProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  uint64_t v9;
  const std::string *v10;
  uint64_t *v11;
  std::string *v12;
  const std::string *v13;
  uint64_t *v14;
  std::string *v15;
  char v16;
  std::string v17[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v17, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 1146);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v17, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v16, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v17[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 52);
  if (!(_BYTE)v5)
    goto LABEL_22;
  if ((*((_BYTE *)a2 + 52) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 52) & 2) == 0)
      goto LABEL_6;
LABEL_13:
    v9 = *((_QWORD *)a2 + 3);
    *((_DWORD *)v3 + 13) |= 2u;
    *((_QWORD *)v3 + 3) = v9;
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_22;
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  v6 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)v3 + 13) |= 1u;
  v7 = (uint64_t *)*((_QWORD *)v3 + 2);
  if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v8 = (std::string *)operator new();
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 2) = v8;
  }
  else
  {
    v8 = (std::string *)*((_QWORD *)v3 + 2);
  }
  this = (addr_obj::FingerprintProto *)std::string::operator=(v8, v6);
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 2) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) == 0)
    goto LABEL_7;
LABEL_14:
  v10 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)v3 + 13) |= 4u;
  v11 = (uint64_t *)*((_QWORD *)v3 + 4);
  if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v12 = (std::string *)operator new();
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 4) = v12;
  }
  else
  {
    v12 = (std::string *)*((_QWORD *)v3 + 4);
  }
  this = (addr_obj::FingerprintProto *)std::string::operator=(v12, v10);
  if ((*((_DWORD *)a2 + 13) & 8) != 0)
  {
LABEL_18:
    v13 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)v3 + 13) |= 8u;
    v14 = (uint64_t *)*((_QWORD *)v3 + 5);
    if (v14 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v15 = (std::string *)operator new();
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 5) = v15;
    }
    else
    {
      v15 = (std::string *)*((_QWORD *)v3 + 5);
    }
    std::string::operator=(v15, v13);
  }
LABEL_22:
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::FingerprintProto *)((char *)a2 + 8));
}

void sub_1887EA2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::FingerprintProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t addr_obj::FingerprintProto::default_instance(addr_obj::FingerprintProto *this)
{
  addr_obj::FingerprintProto *v1;

  v1 = (addr_obj::FingerprintProto *)addr_obj::FingerprintProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::FingerprintProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::FingerprintProto::default_instance_(v1);
}

addr_obj::FingerprintProto *addr_obj::FingerprintProto::New(addr_obj::FingerprintProto *this)
{
  addr_obj::FingerprintProto *v1;

  v1 = (addr_obj::FingerprintProto *)operator new();
  addr_obj::FingerprintProto::FingerprintProto(v1);
  return v1;
}

void sub_1887EA330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C400739E6B9);
  _Unwind_Resume(a1);
}

uint64_t **addr_obj::FingerprintProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;

  v5 = (uint64_t)this;
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, (uint64_t)this[2], a2);
    v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteSInt64((AddrObjGoogle::protobuf::internal::WireFormatLite *)2, *(_QWORD *)(v5 + 24), a2, a4);
  v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_12:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 32), a2);
  if ((*(_DWORD *)(v5 + 52) & 8) != 0)
LABEL_5:
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 40), a2);
LABEL_6:
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (uint64_t **)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

void addr_obj::FingerprintProto::MergeFrom(addr_obj::FingerprintProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::FingerprintProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 1134);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::FingerprintProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887EA4B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::FingerprintProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::FingerprintProto::IsInitialized(addr_obj::FingerprintProto *this)
{
  return 1;
}

uint64_t addr_obj::FingerprintProto::GetMetadata(addr_obj::FingerprintProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50270;
}

void sub_1887EA594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::AddressObjectProto::MergeFrom(addr_obj::AddressObjectProto *this, const addr_obj::AddressObjectProto *a2)
{
  std::string *v4;
  AddrObjGoogle::protobuf::internal *v5;
  uint64_t v6;
  const addr_obj::FingerprintProto *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  addr_obj::FingerprintProto *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  const std::string *v16;
  uint64_t *v17;
  std::string *v18;
  addr_obj::LocalizationProto *v19;
  const addr_obj::LocalizationProto *v20;
  addr_obj::V0AddressObjectProto *v21;
  const addr_obj::V0AddressObjectProto *v22;
  addr_obj::V1AddressObjectProto *v23;
  const addr_obj::V1AddressObjectProto *v24;
  addr_obj::VenueInfoProto *v25;
  const addr_obj::VenueInfoProto *v26;
  char v27;
  std::string v28[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 1619);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v27, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  v5 = (AddrObjGoogle::protobuf::internal *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 8, *((_DWORD *)a2 + 10) + *((_DWORD *)this + 10));
  if (*((int *)a2 + 10) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const addr_obj::FingerprintProto **)(*((_QWORD *)a2 + 4) + 8 * v6);
      v8 = *((_DWORD *)this + 11);
      v9 = *((int *)this + 10);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 12))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 8, v8 + 1);
          v8 = *((_DWORD *)this + 11);
        }
        *((_DWORD *)this + 11) = v8 + 1;
        v11 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::FingerprintProto>::New();
        v12 = *((_QWORD *)this + 4);
        v13 = *((int *)this + 10);
        *((_DWORD *)this + 10) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 4);
        *((_DWORD *)this + 10) = v9 + 1;
        v11 = *(addr_obj::FingerprintProto **)(v10 + 8 * v9);
      }
      addr_obj::FingerprintProto::MergeFrom(v11, v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 10));
  }
  LOBYTE(v14) = *((_BYTE *)a2 + 88);
  if (!(_BYTE)v14)
    goto LABEL_44;
  if ((*((_BYTE *)a2 + 88) & 1) != 0)
  {
    v15 = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 22) |= 1u;
    *((_DWORD *)this + 20) = v15;
    v14 = *((_DWORD *)a2 + 22);
    if ((v14 & 2) == 0)
    {
LABEL_14:
      if ((v14 & 4) == 0)
        goto LABEL_15;
      goto LABEL_24;
    }
  }
  else if ((*((_BYTE *)a2 + 88) & 2) == 0)
  {
    goto LABEL_14;
  }
  v16 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)this + 22) |= 2u;
  v17 = (uint64_t *)*((_QWORD *)this + 2);
  if (v17 == AddrObjGoogle::protobuf::internal::kEmptyString(v5))
  {
    v18 = (std::string *)operator new();
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)this + 2) = v18;
  }
  else
  {
    v18 = (std::string *)*((_QWORD *)this + 2);
  }
  v5 = (AddrObjGoogle::protobuf::internal *)std::string::operator=(v18, v16);
  v14 = *((_DWORD *)a2 + 22);
  if ((v14 & 4) == 0)
  {
LABEL_15:
    if ((v14 & 0x10) == 0)
      goto LABEL_16;
LABEL_29:
    *((_DWORD *)this + 22) |= 0x10u;
    v21 = (addr_obj::V0AddressObjectProto *)*((_QWORD *)this + 7);
    if (!v21)
    {
      v21 = (addr_obj::V0AddressObjectProto *)operator new();
      v5 = addr_obj::V0AddressObjectProto::V0AddressObjectProto(v21);
      *((_QWORD *)this + 7) = v21;
    }
    v22 = (const addr_obj::V0AddressObjectProto *)*((_QWORD *)a2 + 7);
    if (!v22)
      v22 = *(const addr_obj::V0AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(v5) + 56);
    addr_obj::V0AddressObjectProto::MergeFrom(v21, v22);
    v14 = *((_DWORD *)a2 + 22);
    if ((v14 & 0x20) == 0)
    {
LABEL_17:
      if ((v14 & 0x40) == 0)
        goto LABEL_44;
      goto LABEL_39;
    }
    goto LABEL_34;
  }
LABEL_24:
  *((_DWORD *)this + 22) |= 4u;
  v19 = (addr_obj::LocalizationProto *)*((_QWORD *)this + 3);
  if (!v19)
  {
    v19 = (addr_obj::LocalizationProto *)operator new();
    v5 = addr_obj::LocalizationProto::LocalizationProto(v19);
    *((_QWORD *)this + 3) = v19;
  }
  v20 = (const addr_obj::LocalizationProto *)*((_QWORD *)a2 + 3);
  if (!v20)
    v20 = *(const addr_obj::LocalizationProto **)(addr_obj::AddressObjectProto::default_instance_(v5) + 24);
  addr_obj::LocalizationProto::MergeFrom(v19, v20);
  v14 = *((_DWORD *)a2 + 22);
  if ((v14 & 0x10) != 0)
    goto LABEL_29;
LABEL_16:
  if ((v14 & 0x20) == 0)
    goto LABEL_17;
LABEL_34:
  *((_DWORD *)this + 22) |= 0x20u;
  v23 = (addr_obj::V1AddressObjectProto *)*((_QWORD *)this + 8);
  if (!v23)
  {
    v23 = (addr_obj::V1AddressObjectProto *)operator new();
    v5 = addr_obj::V1AddressObjectProto::V1AddressObjectProto(v23);
    *((_QWORD *)this + 8) = v23;
  }
  v24 = (const addr_obj::V1AddressObjectProto *)*((_QWORD *)a2 + 8);
  if (!v24)
    v24 = *(const addr_obj::V1AddressObjectProto **)(addr_obj::AddressObjectProto::default_instance_(v5) + 64);
  addr_obj::V1AddressObjectProto::MergeFrom(v23, v24);
  if ((*((_DWORD *)a2 + 22) & 0x40) != 0)
  {
LABEL_39:
    *((_DWORD *)this + 22) |= 0x40u;
    v25 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 9);
    if (!v25)
    {
      v25 = (addr_obj::VenueInfoProto *)operator new();
      v5 = addr_obj::VenueInfoProto::VenueInfoProto(v25);
      *((_QWORD *)this + 9) = v25;
    }
    v26 = (const addr_obj::VenueInfoProto *)*((_QWORD *)a2 + 9);
    if (!v26)
      v26 = *(const addr_obj::VenueInfoProto **)(addr_obj::AddressObjectProto::default_instance_(v5) + 72);
    addr_obj::VenueInfoProto::MergeFrom(v25, v26);
  }
LABEL_44:
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::AddressObjectProto *)((char *)a2 + 8));
}

void sub_1887EA8CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 84) = a2;
  return this;
}

uint64_t addr_obj::AddressObjectProto::default_instance(addr_obj::AddressObjectProto *this)
{
  addr_obj::AddressObjectProto *v1;

  v1 = (addr_obj::AddressObjectProto *)addr_obj::AddressObjectProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::AddressObjectProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::AddressObjectProto::default_instance_(v1);
}

addr_obj::AddressObjectProto *addr_obj::AddressObjectProto::New(addr_obj::AddressObjectProto *this)
{
  addr_obj::AddressObjectProto *v1;

  v1 = (addr_obj::AddressObjectProto *)operator new();
  addr_obj::AddressObjectProto::AddressObjectProto(v1);
  return v1;
}

void sub_1887EA9C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C401C489FCDLL);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::V0AddressObjectProto::Clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  AddrObjGoogle::protobuf::UnknownFieldSet *v20;
  uint64_t v21;

  v1 = this;
  if (*((_BYTE *)this + 92))
  {
    if ((*((_BYTE *)this + 92) & 1) != 0)
    {
      v2 = (uint64_t *)this[2];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != this)
      {
        v3 = v1[2];
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 2) != 0)
    {
      v4 = (uint64_t *)v1[3];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v4 != this)
      {
        v5 = v1[3];
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 4) != 0)
    {
      v6 = (uint64_t *)v1[4];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v6 != this)
      {
        v7 = v1[4];
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 8) != 0)
    {
      v8 = (uint64_t *)v1[5];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v8 != this)
      {
        v9 = v1[5];
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 0x10) != 0)
    {
      v10 = (uint64_t *)v1[6];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v10 != this)
      {
        v11 = v1[6];
        if (*(char *)(v11 + 23) < 0)
        {
          **(_BYTE **)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v11 = 0;
          *(_BYTE *)(v11 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 0x20) != 0)
    {
      v12 = (uint64_t *)v1[7];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v12 != this)
      {
        v13 = v1[7];
        if (*(char *)(v13 + 23) < 0)
        {
          **(_BYTE **)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v13 = 0;
          *(_BYTE *)(v13 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 0x40) != 0)
    {
      v14 = (uint64_t *)v1[8];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v14 != this)
      {
        v15 = v1[8];
        if (*(char *)(v15 + 23) < 0)
        {
          **(_BYTE **)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v15 = 0;
          *(_BYTE *)(v15 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 92) & 0x80) != 0)
    {
      v16 = (uint64_t *)v1[9];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v16 != this)
      {
        v17 = v1[9];
        if (*(char *)(v17 + 23) < 0)
        {
          **(_BYTE **)v17 = 0;
          *(_QWORD *)(v17 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v17 = 0;
          *(_BYTE *)(v17 + 23) = 0;
        }
      }
    }
  }
  if ((*((_BYTE *)v1 + 93) & 1) != 0)
  {
    v18 = (uint64_t *)v1[10];
    this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
    if (v18 != this)
    {
      v19 = v1[10];
      if (*(char *)(v19 + 23) < 0)
      {
        **(_BYTE **)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v19 = 0;
        *(_BYTE *)(v19 + 23) = 0;
      }
    }
  }
  v21 = v1[1];
  v20 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 1);
  *((_DWORD *)v20 + 21) = 0;
  if (v21)
    return (uint64_t *)AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v20);
  return this;
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueInfoProto::Clear(addr_obj::VenueInfoProto *this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  uint64_t v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::UnknownFieldSet *v5;
  uint64_t v6;

  result = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Clear<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 16);
  if (*((int *)this + 12) >= 1)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v3);
      result = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      ++v3;
    }
    while (v3 < *((int *)this + 12));
  }
  v6 = *((_QWORD *)this + 1);
  v5 = (addr_obj::VenueInfoProto *)((char *)this + 8);
  *((_DWORD *)v5 + 10) = 0;
  *((_DWORD *)v5 + 15) = 0;
  if (v6)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v5);
  return result;
}

signed int *addr_obj::AddressObjectProto::SerializeWithCachedSizes(signed int *this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  signed int *v5;
  signed int v6;
  uint64_t v7;
  uint64_t v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t **v14;
  _QWORD *v15;

  v5 = this;
  v6 = this[22];
  if ((v6 & 1) != 0)
  {
    this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)1, this[20], a2, a4);
    v6 = v5[22];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *((_QWORD *)v5 + 2), a2);
  if ((v5[22] & 4) == 0)
    goto LABEL_10;
LABEL_7:
  v7 = *((_QWORD *)v5 + 3);
  if (!v7)
    v7 = *(_QWORD *)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 24);
  this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, v7, a2);
LABEL_10:
  if (v5[10] >= 1)
  {
    v8 = 0;
    do
      this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *(_QWORD *)(*((_QWORD *)v5 + 4) + 8 * v8++), a2);
    while (v8 < v5[10]);
  }
  v9 = v5[22];
  if ((v9 & 0x40) != 0)
  {
    v10 = *((_QWORD *)v5 + 9);
    if (!v10)
      v10 = *(_QWORD *)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 72);
    this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, v10, a2);
    v9 = v5[22];
    if ((v9 & 0x10) == 0)
    {
LABEL_15:
      if ((v9 & 0x20) == 0)
        goto LABEL_26;
      goto LABEL_23;
    }
  }
  else if ((v9 & 0x10) == 0)
  {
    goto LABEL_15;
  }
  v11 = *((_QWORD *)v5 + 7);
  if (!v11)
    v11 = *(_QWORD *)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 56);
  this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(100, v11, a2);
  if ((v5[22] & 0x20) != 0)
  {
LABEL_23:
    v12 = *((_QWORD *)v5 + 8);
    if (!v12)
      v12 = *(_QWORD *)(addr_obj::AddressObjectProto::default_instance_((addr_obj::AddressObjectProto *)this) + 64);
    this = (signed int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(101, v12, a2);
  }
LABEL_26:
  v15 = (_QWORD *)*((_QWORD *)v5 + 1);
  v14 = (uint64_t **)(v5 + 2);
  v13 = v15;
  if (v15)
  {
    if (*v13 != v13[1])
      return (signed int *)AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v14, a2, a3);
  }
  return this;
}

void addr_obj::AddressObjectProto::MergeFrom(addr_obj::AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 1607);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887EAEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::V0AddressObjectProto::MergeFrom(addr_obj::V0AddressObjectProto *this, const addr_obj::V0AddressObjectProto *a2)
{
  addr_obj::V0AddressObjectProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  const std::string *v9;
  uint64_t *v10;
  std::string *v11;
  const std::string *v12;
  uint64_t *v13;
  std::string *v14;
  const std::string *v15;
  uint64_t *v16;
  std::string *v17;
  const std::string *v18;
  uint64_t *v19;
  std::string *v20;
  const std::string *v21;
  uint64_t *v22;
  std::string *v23;
  const std::string *v24;
  uint64_t *v25;
  std::string *v26;
  const std::string *v27;
  uint64_t *v28;
  std::string *v29;
  const std::string *v30;
  uint64_t *v31;
  std::string *v32;
  char v33;
  std::string v34[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v34, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 2295);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v34, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v33, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v34[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_DWORD *)a2 + 23);
  if (!(_BYTE)v5)
    goto LABEL_12;
  if ((v5 & 1) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 2);
    *((_DWORD *)v3 + 23) |= 1u;
    v7 = (uint64_t *)*((_QWORD *)v3 + 2);
    if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 2) = v8;
    }
    else
    {
      v8 = (std::string *)*((_QWORD *)v3 + 2);
    }
    this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v8, v6);
    v5 = *((_DWORD *)a2 + 23);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_22;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = (const std::string *)*((_QWORD *)a2 + 3);
  *((_DWORD *)v3 + 23) |= 2u;
  v10 = (uint64_t *)*((_QWORD *)v3 + 3);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 3) = v11;
  }
  else
  {
    v11 = (std::string *)*((_QWORD *)v3 + 3);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v11, v9);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_22:
  v12 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)v3 + 23) |= 4u;
  v13 = (uint64_t *)*((_QWORD *)v3 + 4);
  if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v14 = (std::string *)operator new();
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 4) = v14;
  }
  else
  {
    v14 = (std::string *)*((_QWORD *)v3 + 4);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v14, v12);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_26:
  v15 = (const std::string *)*((_QWORD *)a2 + 5);
  *((_DWORD *)v3 + 23) |= 8u;
  v16 = (uint64_t *)*((_QWORD *)v3 + 5);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 5) = v17;
  }
  else
  {
    v17 = (std::string *)*((_QWORD *)v3 + 5);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v17, v15);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_30:
  v18 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)v3 + 23) |= 0x10u;
  v19 = (uint64_t *)*((_QWORD *)v3 + 6);
  if (v19 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 6) = v20;
  }
  else
  {
    v20 = (std::string *)*((_QWORD *)v3 + 6);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v20, v18);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0)
      goto LABEL_11;
    goto LABEL_38;
  }
LABEL_34:
  v21 = (const std::string *)*((_QWORD *)a2 + 7);
  *((_DWORD *)v3 + 23) |= 0x20u;
  v22 = (uint64_t *)*((_QWORD *)v3 + 7);
  if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v23 = (std::string *)operator new();
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 7) = v23;
  }
  else
  {
    v23 = (std::string *)*((_QWORD *)v3 + 7);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v23, v21);
  v5 = *((_DWORD *)a2 + 23);
  if ((v5 & 0x40) != 0)
  {
LABEL_38:
    v24 = (const std::string *)*((_QWORD *)a2 + 8);
    *((_DWORD *)v3 + 23) |= 0x40u;
    v25 = (uint64_t *)*((_QWORD *)v3 + 8);
    if (v25 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v26 = (std::string *)operator new();
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 8) = v26;
    }
    else
    {
      v26 = (std::string *)*((_QWORD *)v3 + 8);
    }
    this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v26, v24);
    v5 = *((_DWORD *)a2 + 23);
    if ((v5 & 0x80) != 0)
      goto LABEL_42;
LABEL_12:
    if ((v5 & 0x100) == 0)
      goto LABEL_50;
    goto LABEL_46;
  }
LABEL_11:
  if ((v5 & 0x80) == 0)
    goto LABEL_12;
LABEL_42:
  v27 = (const std::string *)*((_QWORD *)a2 + 9);
  *((_DWORD *)v3 + 23) |= 0x80u;
  v28 = (uint64_t *)*((_QWORD *)v3 + 9);
  if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v29 = (std::string *)operator new();
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 9) = v29;
  }
  else
  {
    v29 = (std::string *)*((_QWORD *)v3 + 9);
  }
  this = (addr_obj::V0AddressObjectProto *)std::string::operator=(v29, v27);
  if ((*((_DWORD *)a2 + 23) & 0x100) != 0)
  {
LABEL_46:
    v30 = (const std::string *)*((_QWORD *)a2 + 10);
    *((_DWORD *)v3 + 23) |= 0x100u;
    v31 = (uint64_t *)*((_QWORD *)v3 + 10);
    if (v31 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v32 = (std::string *)operator new();
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 10) = v32;
    }
    else
    {
      v32 = (std::string *)*((_QWORD *)v3 + 10);
    }
    std::string::operator=(v32, v30);
  }
LABEL_50:
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::V0AddressObjectProto *)((char *)a2 + 8));
}

void sub_1887EB2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObjectProto::MergeFrom(addr_obj::V1AddressObjectProto *this, const addr_obj::V1AddressObjectProto *a2)
{
  addr_obj::V1AddressObjectProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  addr_obj::geo3::Address *v9;
  const addr_obj::geo3::Address *v10;
  const std::string *v11;
  uint64_t *v12;
  std::string *v13;
  const std::string *v14;
  uint64_t *v15;
  std::string *v16;
  addr_obj::geo3::StructuredAddress *v17;
  const addr_obj::geo3::StructuredAddress *v18;
  const std::string *v19;
  uint64_t *v20;
  std::string *v21;
  addr_obj::geo3::Address *v22;
  const addr_obj::geo3::Address *v23;
  char v24;
  std::string v25[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v25, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 2850);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v25, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v24, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v25[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 100);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 100) & 1) != 0)
    {
      v6 = (const std::string *)*((_QWORD *)a2 + 5);
      *((_DWORD *)v3 + 25) |= 1u;
      v7 = (uint64_t *)*((_QWORD *)v3 + 5);
      if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
      {
        v8 = (std::string *)operator new();
        v8->__r_.__value_.__l.__size_ = 0;
        v8->__r_.__value_.__r.__words[2] = 0;
        v8->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v3 + 5) = v8;
      }
      else
      {
        v8 = (std::string *)*((_QWORD *)v3 + 5);
      }
      this = (addr_obj::V1AddressObjectProto *)std::string::operator=(v8, v6);
      v5 = *((_DWORD *)a2 + 25);
    }
    if ((v5 & 2) != 0)
    {
      *((_DWORD *)v3 + 25) |= 2u;
      v9 = (addr_obj::geo3::Address *)*((_QWORD *)v3 + 6);
      if (!v9)
      {
        v9 = (addr_obj::geo3::Address *)operator new();
        this = (addr_obj::V1AddressObjectProto *)addr_obj::geo3::Address::Address(v9);
        *((_QWORD *)v3 + 6) = v9;
      }
      v10 = (const addr_obj::geo3::Address *)*((_QWORD *)a2 + 6);
      if (!v10)
        v10 = *(const addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 48);
      addr_obj::geo3::Address::MergeFrom(v9, v10);
      v5 = *((_DWORD *)a2 + 25);
    }
    if ((v5 & 4) != 0)
    {
      v11 = (const std::string *)*((_QWORD *)a2 + 7);
      *((_DWORD *)v3 + 25) |= 4u;
      v12 = (uint64_t *)*((_QWORD *)v3 + 7);
      if (v12 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
      {
        v13 = (std::string *)operator new();
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)v3 + 7) = v13;
      }
      else
      {
        v13 = (std::string *)*((_QWORD *)v3 + 7);
      }
      this = (addr_obj::V1AddressObjectProto *)std::string::operator=(v13, v11);
      v5 = *((_DWORD *)a2 + 25);
      if ((v5 & 8) == 0)
      {
LABEL_17:
        if ((v5 & 0x10) == 0)
          goto LABEL_18;
        goto LABEL_29;
      }
    }
    else if ((v5 & 8) == 0)
    {
      goto LABEL_17;
    }
    v14 = (const std::string *)*((_QWORD *)a2 + 8);
    *((_DWORD *)v3 + 25) |= 8u;
    v15 = (uint64_t *)*((_QWORD *)v3 + 8);
    if (v15 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v16 = (std::string *)operator new();
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 8) = v16;
    }
    else
    {
      v16 = (std::string *)*((_QWORD *)v3 + 8);
    }
    this = (addr_obj::V1AddressObjectProto *)std::string::operator=(v16, v14);
    v5 = *((_DWORD *)a2 + 25);
    if ((v5 & 0x10) == 0)
    {
LABEL_18:
      if ((v5 & 0x20) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_29:
    *((_DWORD *)v3 + 25) |= 0x10u;
    v17 = (addr_obj::geo3::StructuredAddress *)*((_QWORD *)v3 + 9);
    if (!v17)
    {
      v17 = (addr_obj::geo3::StructuredAddress *)operator new();
      this = (addr_obj::V1AddressObjectProto *)addr_obj::geo3::StructuredAddress::StructuredAddress(v17);
      *((_QWORD *)v3 + 9) = v17;
    }
    v18 = (const addr_obj::geo3::StructuredAddress *)*((_QWORD *)a2 + 9);
    if (!v18)
      v18 = *(const addr_obj::geo3::StructuredAddress **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 72);
    addr_obj::geo3::StructuredAddress::MergeFrom(v17, v18);
    v5 = *((_DWORD *)a2 + 25);
    if ((v5 & 0x20) == 0)
    {
LABEL_19:
      if ((v5 & 0x40) == 0)
        goto LABEL_43;
LABEL_38:
      *((_DWORD *)v3 + 25) |= 0x40u;
      v22 = (addr_obj::geo3::Address *)*((_QWORD *)v3 + 11);
      if (!v22)
      {
        v22 = (addr_obj::geo3::Address *)operator new();
        this = (addr_obj::V1AddressObjectProto *)addr_obj::geo3::Address::Address(v22);
        *((_QWORD *)v3 + 11) = v22;
      }
      v23 = (const addr_obj::geo3::Address *)*((_QWORD *)a2 + 11);
      if (!v23)
        v23 = *(const addr_obj::geo3::Address **)(addr_obj::V1AddressObjectProto::default_instance_(this) + 88);
      addr_obj::geo3::Address::MergeFrom(v22, v23);
      goto LABEL_43;
    }
LABEL_34:
    v19 = (const std::string *)*((_QWORD *)a2 + 10);
    *((_DWORD *)v3 + 25) |= 0x20u;
    v20 = (uint64_t *)*((_QWORD *)v3 + 10);
    if (v20 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v21 = (std::string *)operator new();
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 10) = v21;
    }
    else
    {
      v21 = (std::string *)*((_QWORD *)v3 + 10);
    }
    this = (addr_obj::V1AddressObjectProto *)std::string::operator=(v21, v19);
    if ((*((_DWORD *)a2 + 25) & 0x40) == 0)
      goto LABEL_43;
    goto LABEL_38;
  }
LABEL_43:
  AddrObjGoogle::protobuf::internal::ExtensionSet::MergeFrom((uint64_t)v3 + 8, (const AddrObjGoogle::protobuf::internal::ExtensionSet **)a2 + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 4, (const addr_obj::V1AddressObjectProto *)((char *)a2 + 32));
}

void sub_1887EB5F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40C067BF1BLL);
  _Unwind_Resume(a1);
}

void addr_obj::VenueInfoProto::MergeFrom(addr_obj::VenueInfoProto *this, const addr_obj::VenueInfoProto *a2)
{
  std::string *v4;
  AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *v5;
  uint64_t v6;
  const std::string *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const addr_obj::VenueFormatterProto *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  addr_obj::VenueFormatterProto *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  std::string v23[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5244);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v22, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, *((_DWORD *)a2 + 6) + *((_DWORD *)this + 6));
  if (*((int *)a2 + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(const std::string **)(*((_QWORD *)a2 + 2) + 8 * v6);
      v8 = *((_DWORD *)this + 7);
      v9 = *((int *)this + 6);
      if ((int)v9 >= v8)
      {
        if (v8 == *((_DWORD *)this + 8))
        {
          v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, v8 + 1);
          v8 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v8 + 1;
        v11 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New(v5);
        v12 = *((_QWORD *)this + 2);
        v13 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v13 + 1;
        *(_QWORD *)(v12 + 8 * v13) = v11;
      }
      else
      {
        v10 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v9 + 1;
        v11 = *(std::string **)(v10 + 8 * v9);
      }
      v5 = (AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)std::string::operator=(v11, v7);
      ++v6;
    }
    while (v6 < *((int *)a2 + 6));
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 10, *((_DWORD *)a2 + 12) + *((_DWORD *)this + 12));
  if (*((int *)a2 + 12) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(const addr_obj::VenueFormatterProto **)(*((_QWORD *)a2 + 5) + 8 * v14);
      v16 = *((_DWORD *)this + 13);
      v17 = *((int *)this + 12);
      if ((int)v17 >= v16)
      {
        if (v16 == *((_DWORD *)this + 14))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 10, v16 + 1);
          v16 = *((_DWORD *)this + 13);
        }
        *((_DWORD *)this + 13) = v16 + 1;
        v19 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFormatterProto>::New();
        v20 = *((_QWORD *)this + 5);
        v21 = *((int *)this + 12);
        *((_DWORD *)this + 12) = v21 + 1;
        *(_QWORD *)(v20 + 8 * v21) = v19;
      }
      else
      {
        v18 = *((_QWORD *)this + 5);
        *((_DWORD *)this + 12) = v17 + 1;
        v19 = *(addr_obj::VenueFormatterProto **)(v18 + 8 * v17);
      }
      addr_obj::VenueFormatterProto::MergeFrom(v19, v15);
      ++v14;
    }
    while (v14 < *((int *)a2 + 12));
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::VenueInfoProto *)((char *)a2 + 8));
}

void sub_1887EB824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

void addr_obj::AddressObjectProto::CopyFrom(addr_obj::AddressObjectProto *this, const addr_obj::AddressObjectProto *a2)
{
  if (a2 != this)
  {
    (*(void (**)(addr_obj::AddressObjectProto *))(*(_QWORD *)this + 32))(this);
    addr_obj::AddressObjectProto::MergeFrom(this, a2);
  }
}

uint64_t addr_obj::AddressObjectProto::GetMetadata(addr_obj::AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50280;
}

void sub_1887EB93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

addr_obj::V0AddressObjectProto *addr_obj::V0AddressObjectProto::V0AddressObjectProto(addr_obj::V0AddressObjectProto *this, const addr_obj::V0AddressObjectProto *a2)
{
  *(_QWORD *)this = &off_1E1BF9C60;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  addr_obj::V0AddressObjectProto::SharedCtor(this);
  addr_obj::V0AddressObjectProto::MergeFrom(this, a2);
  return this;
}

void sub_1887EB9A8(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void addr_obj::V0AddressObjectProto::~V0AddressObjectProto(addr_obj::V0AddressObjectProto *this)
{
  *(_QWORD *)this = &off_1E1BF9C60;
  addr_obj::V0AddressObjectProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V0AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::V0AddressObjectProto::~V0AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::V0AddressObjectProto::SharedDtor(addr_obj::V0AddressObjectProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 5);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  v14 = (uint64_t *)*((_QWORD *)this + 6);
  v15 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v12);
  if (v14 != v15)
  {
    v16 = *((_QWORD *)this + 6);
    if (v16)
    {
      if (*(char *)(v16 + 23) < 0)
        operator delete(*(void **)v16);
      v15 = (uint64_t *)MEMORY[0x18D76437C](v16, 0x1012C40EC159624);
    }
  }
  v17 = (uint64_t *)*((_QWORD *)this + 7);
  v18 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v15);
  if (v17 != v18)
  {
    v19 = *((_QWORD *)this + 7);
    if (v19)
    {
      if (*(char *)(v19 + 23) < 0)
        operator delete(*(void **)v19);
      v18 = (uint64_t *)MEMORY[0x18D76437C](v19, 0x1012C40EC159624);
    }
  }
  v20 = (uint64_t *)*((_QWORD *)this + 8);
  v21 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v18);
  if (v20 != v21)
  {
    v22 = *((_QWORD *)this + 8);
    if (v22)
    {
      if (*(char *)(v22 + 23) < 0)
        operator delete(*(void **)v22);
      v21 = (uint64_t *)MEMORY[0x18D76437C](v22, 0x1012C40EC159624);
    }
  }
  v23 = (uint64_t *)*((_QWORD *)this + 9);
  v24 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v21);
  if (v23 != v24)
  {
    v25 = *((_QWORD *)this + 9);
    if (v25)
    {
      if (*(char *)(v25 + 23) < 0)
        operator delete(*(void **)v25);
      v24 = (uint64_t *)MEMORY[0x18D76437C](v25, 0x1012C40EC159624);
    }
  }
  v26 = (uint64_t *)*((_QWORD *)this + 10);
  v27 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v24);
  if (v26 != v27)
  {
    v28 = *((_QWORD *)this + 10);
    if (v28)
    {
      if (*(char *)(v28 + 23) < 0)
        operator delete(*(void **)v28);
      v27 = (uint64_t *)MEMORY[0x18D76437C](v28, 0x1012C40EC159624);
    }
  }
  return addr_obj::V0AddressObjectProto::default_instance_((addr_obj::V0AddressObjectProto *)v27);
}

uint64_t addr_obj::V0AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

addr_obj::V0AddressObjectProto *addr_obj::V0AddressObjectProto::New(addr_obj::V0AddressObjectProto *this)
{
  addr_obj::V0AddressObjectProto *v1;

  v1 = (addr_obj::V0AddressObjectProto *)operator new();
  addr_obj::V0AddressObjectProto::V0AddressObjectProto(v1);
  return v1;
}

void sub_1887EBCD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40892FDF1FLL);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V0AddressObjectProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  int v9;
  uint64_t *v10;
  std::string *v11;
  _BYTE *v12;
  uint64_t *v13;
  std::string *v14;
  _BYTE *v15;
  uint64_t *v16;
  std::string *v17;
  _BYTE *v18;
  uint64_t *v19;
  std::string *v20;
  _BYTE *v21;
  uint64_t *v22;
  std::string *v23;
  _BYTE *v24;
  uint64_t *v25;
  std::string *v26;
  _BYTE *v27;
  uint64_t *v28;
  std::string *v29;
  _BYTE *v30;
  uint64_t *v31;
  std::string *v32;
  _BYTE *v33;
  uint64_t *v34;
  std::string *v35;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)v8;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)v8)
        return 1;
    }
    switch(v8 >> 3)
    {
      case 1u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
        *(_DWORD *)(v5 + 92) |= 1u;
        v10 = *(uint64_t **)(v5 + 16);
        if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v11 = (std::string *)operator new();
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v11;
        }
        else
        {
          v11 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v11);
        if ((_DWORD)this)
        {
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
          {
            *((_QWORD *)a2 + 1) = v12 + 1;
            goto LABEL_35;
          }
          continue;
        }
        break;
      case 2u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_35:
        *(_DWORD *)(v5 + 92) |= 2u;
        v13 = *(uint64_t **)(v5 + 24);
        if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v14 = (std::string *)operator new();
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 24) = v14;
        }
        else
        {
          v14 = *(std::string **)(v5 + 24);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v14);
        if ((_DWORD)this)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_42;
          }
          continue;
        }
        break;
      case 3u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_42:
        *(_DWORD *)(v5 + 92) |= 4u;
        v16 = *(uint64_t **)(v5 + 32);
        if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v17 = (std::string *)operator new();
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 32) = v17;
        }
        else
        {
          v17 = *(std::string **)(v5 + 32);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v17);
        if ((_DWORD)this)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 34)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_49;
          }
          continue;
        }
        break;
      case 4u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_49:
        *(_DWORD *)(v5 + 92) |= 8u;
        v19 = *(uint64_t **)(v5 + 40);
        if (v19 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v20 = (std::string *)operator new();
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v20;
        }
        else
        {
          v20 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v20);
        if ((_DWORD)this)
        {
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v21 < *((_QWORD *)a2 + 2) && *v21 == 42)
          {
            *((_QWORD *)a2 + 1) = v21 + 1;
            goto LABEL_56;
          }
          continue;
        }
        break;
      case 5u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_56:
        *(_DWORD *)(v5 + 92) |= 0x10u;
        v22 = *(uint64_t **)(v5 + 48);
        if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v23 = (std::string *)operator new();
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 48) = v23;
        }
        else
        {
          v23 = *(std::string **)(v5 + 48);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v23);
        if ((_DWORD)this)
        {
          v24 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v24 < *((_QWORD *)a2 + 2) && *v24 == 50)
          {
            *((_QWORD *)a2 + 1) = v24 + 1;
            goto LABEL_63;
          }
          continue;
        }
        break;
      case 6u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_63:
        *(_DWORD *)(v5 + 92) |= 0x20u;
        v25 = *(uint64_t **)(v5 + 56);
        if (v25 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v26 = (std::string *)operator new();
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 56) = v26;
        }
        else
        {
          v26 = *(std::string **)(v5 + 56);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v26);
        if ((_DWORD)this)
        {
          v27 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v27 < *((_QWORD *)a2 + 2) && *v27 == 58)
          {
            *((_QWORD *)a2 + 1) = v27 + 1;
            goto LABEL_70;
          }
          continue;
        }
        break;
      case 7u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_70:
        *(_DWORD *)(v5 + 92) |= 0x40u;
        v28 = *(uint64_t **)(v5 + 64);
        if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v29 = (std::string *)operator new();
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 64) = v29;
        }
        else
        {
          v29 = *(std::string **)(v5 + 64);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v29);
        if ((_DWORD)this)
        {
          v30 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v30 < *((_QWORD *)a2 + 2) && *v30 == 66)
          {
            *((_QWORD *)a2 + 1) = v30 + 1;
            goto LABEL_77;
          }
          continue;
        }
        break;
      case 8u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_77:
        *(_DWORD *)(v5 + 92) |= 0x80u;
        v31 = *(uint64_t **)(v5 + 72);
        if (v31 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v32 = (std::string *)operator new();
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 72) = v32;
        }
        else
        {
          v32 = *(std::string **)(v5 + 72);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v32);
        if ((_DWORD)this)
        {
          v33 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v33 < *((_QWORD *)a2 + 2) && *v33 == 74)
          {
            *((_QWORD *)a2 + 1) = v33 + 1;
            goto LABEL_84;
          }
          continue;
        }
        break;
      case 9u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_27;
LABEL_84:
        *(_DWORD *)(v5 + 92) |= 0x100u;
        v34 = *(uint64_t **)(v5 + 80);
        if (v34 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v35 = (std::string *)operator new();
          v35->__r_.__value_.__l.__size_ = 0;
          v35->__r_.__value_.__r.__words[2] = 0;
          v35->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 80) = v35;
        }
        else
        {
          v35 = *(std::string **)(v5 + 80);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v35);
        if ((_DWORD)this)
        {
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
        }
        break;
      default:
        v9 = v8 & 7;
LABEL_27:
        if (v9 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
        if ((this & 1) != 0)
          continue;
        this = 0;
        break;
    }
    return this;
  }
}

uint64_t **addr_obj::V0AddressObjectProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t **v7;
  _QWORD *v8;

  v4 = (uint64_t)this;
  v5 = *((_DWORD *)this + 23);
  if ((v5 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, (uint64_t)this[2], a2);
    v5 = *(_DWORD *)(v4 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v4 + 24), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_18;
  }
LABEL_17:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v4 + 32), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_19;
  }
LABEL_18:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v4 + 40), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_19:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(5, *(_QWORD *)(v4 + 48), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_21;
  }
LABEL_20:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v4 + 56), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_22;
  }
LABEL_21:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v4 + 64), a2);
  v5 = *(_DWORD *)(v4 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
LABEL_22:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(8, *(_QWORD *)(v4 + 72), a2);
  if ((*(_DWORD *)(v4 + 92) & 0x100) != 0)
LABEL_10:
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(9, *(_QWORD *)(v4 + 80), a2);
LABEL_11:
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (uint64_t **)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V0AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V0AddressObjectProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  _BYTE *v16;
  int v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  const void *v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v21;
  _BYTE *v22;
  int v23;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v24;
  const void *v25;
  uint64_t v26;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v27;
  _BYTE *v28;
  int v29;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v30;
  const void *v31;
  uint64_t v32;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v33;
  _BYTE *v34;
  int v35;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v36;
  const void *v37;
  uint64_t v38;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v39;
  _BYTE *v40;
  int v41;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v42;
  const void *v43;
  uint64_t v44;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v45;
  _BYTE *v46;
  int v47;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v48;
  const void *v49;
  uint64_t v50;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v51;
  _BYTE *v52;
  int v53;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v54;
  const void *v55;
  uint64_t v56;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v57;
  _BYTE *v58;
  int v59;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v60;
  const void *v61;
  _QWORD *v62;
  uint64_t **v63;
  _QWORD *v64;

  v4 = a2;
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 10;
    v8 = (char *)a2 + 1;
    if (*(char *)(v7 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      v10 = (char *)v4 + 2;
    }
    v11 = *(char *)(v7 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v7 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v6 = *((_DWORD *)this + 23);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_37;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = *((_QWORD *)this + 3);
  *(_BYTE *)v4 = 18;
  if (*(char *)(v14 + 23) < 0)
    v15 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v14 + 8);
  else
    v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v14 + 23);
  if (v15 > 0x7F)
  {
    v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v15;
    v16 = (char *)v4 + 2;
  }
  v17 = *(char *)(v14 + 23);
  if (v17 >= 0)
    v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14;
  else
    v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v14;
  if (v17 >= 0)
    v19 = (const void *)*(unsigned __int8 *)(v14 + 23);
  else
    v19 = (const void *)*(unsigned int *)(v14 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v18, v19, v16, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_50;
  }
LABEL_37:
  v20 = *((_QWORD *)this + 4);
  *(_BYTE *)v4 = 26;
  if (*(char *)(v20 + 23) < 0)
    v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v20 + 8);
  else
    v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v20 + 23);
  if (v21 > 0x7F)
  {
    v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v21;
    v22 = (char *)v4 + 2;
  }
  v23 = *(char *)(v20 + 23);
  if (v23 >= 0)
    v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v20;
  else
    v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v20;
  if (v23 >= 0)
    v25 = (const void *)*(unsigned __int8 *)(v20 + 23);
  else
    v25 = (const void *)*(unsigned int *)(v20 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v24, v25, v22, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_63;
  }
LABEL_50:
  v26 = *((_QWORD *)this + 5);
  *(_BYTE *)v4 = 34;
  if (*(char *)(v26 + 23) < 0)
    v27 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v26 + 8);
  else
    v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v26 + 23);
  if (v27 > 0x7F)
  {
    v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v27, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v27;
    v28 = (char *)v4 + 2;
  }
  v29 = *(char *)(v26 + 23);
  if (v29 >= 0)
    v30 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v26;
  else
    v30 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v26;
  if (v29 >= 0)
    v31 = (const void *)*(unsigned __int8 *)(v26 + 23);
  else
    v31 = (const void *)*(unsigned int *)(v26 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v30, v31, v28, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_76;
  }
LABEL_63:
  v32 = *((_QWORD *)this + 6);
  *(_BYTE *)v4 = 42;
  if (*(char *)(v32 + 23) < 0)
    v33 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v32 + 8);
  else
    v33 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v32 + 23);
  if (v33 > 0x7F)
  {
    v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v33, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v33;
    v34 = (char *)v4 + 2;
  }
  v35 = *(char *)(v32 + 23);
  if (v35 >= 0)
    v36 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v32;
  else
    v36 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v32;
  if (v35 >= 0)
    v37 = (const void *)*(unsigned __int8 *)(v32 + 23);
  else
    v37 = (const void *)*(unsigned int *)(v32 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v36, v37, v34, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_89;
  }
LABEL_76:
  v38 = *((_QWORD *)this + 7);
  *(_BYTE *)v4 = 50;
  if (*(char *)(v38 + 23) < 0)
    v39 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v38 + 8);
  else
    v39 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v38 + 23);
  if (v39 > 0x7F)
  {
    v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v39, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v39;
    v40 = (char *)v4 + 2;
  }
  v41 = *(char *)(v38 + 23);
  if (v41 >= 0)
    v42 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v38;
  else
    v42 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v38;
  if (v41 >= 0)
    v43 = (const void *)*(unsigned __int8 *)(v38 + 23);
  else
    v43 = (const void *)*(unsigned int *)(v38 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v42, v43, v40, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
LABEL_102:
    v50 = *((_QWORD *)this + 9);
    *(_BYTE *)v4 = 66;
    if (*(char *)(v50 + 23) < 0)
      v51 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v50 + 8);
    else
      v51 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v50 + 23);
    if (v51 > 0x7F)
    {
      v52 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v51, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v51;
      v52 = (char *)v4 + 2;
    }
    v53 = *(char *)(v50 + 23);
    if (v53 >= 0)
      v54 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v50;
    else
      v54 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v50;
    if (v53 >= 0)
      v55 = (const void *)*(unsigned __int8 *)(v50 + 23);
    else
      v55 = (const void *)*(unsigned int *)(v50 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v54, v55, v52, a4);
    if ((*((_DWORD *)this + 23) & 0x100) == 0)
      goto LABEL_128;
    goto LABEL_115;
  }
LABEL_89:
  v44 = *((_QWORD *)this + 8);
  *(_BYTE *)v4 = 58;
  if (*(char *)(v44 + 23) < 0)
    v45 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v44 + 8);
  else
    v45 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v44 + 23);
  if (v45 > 0x7F)
  {
    v46 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v45, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v45;
    v46 = (char *)v4 + 2;
  }
  v47 = *(char *)(v44 + 23);
  if (v47 >= 0)
    v48 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v44;
  else
    v48 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v44;
  if (v47 >= 0)
    v49 = (const void *)*(unsigned __int8 *)(v44 + 23);
  else
    v49 = (const void *)*(unsigned int *)(v44 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v48, v49, v46, a4);
  v6 = *((_DWORD *)this + 23);
  if ((v6 & 0x80) != 0)
    goto LABEL_102;
LABEL_9:
  if ((v6 & 0x100) != 0)
  {
LABEL_115:
    v56 = *((_QWORD *)this + 10);
    *(_BYTE *)v4 = 74;
    if (*(char *)(v56 + 23) < 0)
      v57 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v56 + 8);
    else
      v57 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v56 + 23);
    if (v57 > 0x7F)
    {
      v58 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v57, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v57;
      v58 = (char *)v4 + 2;
    }
    v59 = *(char *)(v56 + 23);
    if (v59 >= 0)
      v60 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v56;
    else
      v60 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v56;
    if (v59 >= 0)
      v61 = (const void *)*(unsigned __int8 *)(v56 + 23);
    else
      v61 = (const void *)*(unsigned int *)(v56 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v60, v61, v58, a4);
  }
LABEL_128:
  v64 = (_QWORD *)*((_QWORD *)this + 1);
  v63 = (uint64_t **)((char *)this + 8);
  v62 = v64;
  if (!v64 || *v62 == v62[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v63, v4, a3, a4);
}

uint64_t addr_obj::V0AddressObjectProto::ByteSize(addr_obj::V0AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  _QWORD *v59;

  v3 = *((_DWORD *)this + 23);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    if ((v3 & 0x100) == 0)
      goto LABEL_96;
    goto LABEL_87;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_25;
    goto LABEL_16;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v3 = *((_DWORD *)this + 23);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 1;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = (v10 + v6 + 1);
  if ((v3 & 2) != 0)
  {
LABEL_16:
    v11 = *((_QWORD *)this + 3);
    v12 = *(unsigned __int8 *)(v11 + 23);
    v13 = v12;
    v14 = *(_QWORD *)(v11 + 8);
    if ((v12 & 0x80u) == 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = v14;
    if (v15 >= 0x80)
    {
      v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v15);
      v12 = *(unsigned __int8 *)(v11 + 23);
      v14 = *(_QWORD *)(v11 + 8);
      v3 = *((_DWORD *)this + 23);
      v13 = *(_BYTE *)(v11 + 23);
    }
    else
    {
      v16 = 1;
    }
    if (v13 < 0)
      v12 = v14;
    v4 = (v4 + v16 + v12 + 1);
  }
LABEL_25:
  if ((v3 & 4) != 0)
  {
    v17 = *((_QWORD *)this + 4);
    v18 = *(unsigned __int8 *)(v17 + 23);
    v19 = v18;
    v20 = *(_QWORD *)(v17 + 8);
    if ((v18 & 0x80u) == 0)
      v21 = *(unsigned __int8 *)(v17 + 23);
    else
      v21 = v20;
    if (v21 >= 0x80)
    {
      v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v21);
      v18 = *(unsigned __int8 *)(v17 + 23);
      v20 = *(_QWORD *)(v17 + 8);
      v3 = *((_DWORD *)this + 23);
      v19 = *(_BYTE *)(v17 + 23);
    }
    else
    {
      v22 = 1;
    }
    if (v19 < 0)
      v18 = v20;
    v4 = (v4 + v22 + v18 + 1);
    if ((v3 & 8) == 0)
    {
LABEL_27:
      if ((v3 & 0x10) == 0)
        goto LABEL_28;
      goto LABEL_51;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_27;
  }
  v23 = *((_QWORD *)this + 5);
  v24 = *(unsigned __int8 *)(v23 + 23);
  v25 = v24;
  v26 = *(_QWORD *)(v23 + 8);
  if ((v24 & 0x80u) == 0)
    v27 = *(unsigned __int8 *)(v23 + 23);
  else
    v27 = v26;
  if (v27 >= 0x80)
  {
    v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v27);
    v24 = *(unsigned __int8 *)(v23 + 23);
    v26 = *(_QWORD *)(v23 + 8);
    v3 = *((_DWORD *)this + 23);
    v25 = *(_BYTE *)(v23 + 23);
  }
  else
  {
    v28 = 1;
  }
  if (v25 < 0)
    v24 = v26;
  v4 = (v4 + v28 + v24 + 1);
  if ((v3 & 0x10) == 0)
  {
LABEL_28:
    if ((v3 & 0x20) == 0)
      goto LABEL_29;
    goto LABEL_60;
  }
LABEL_51:
  v29 = *((_QWORD *)this + 6);
  v30 = *(unsigned __int8 *)(v29 + 23);
  v31 = v30;
  v32 = *(_QWORD *)(v29 + 8);
  if ((v30 & 0x80u) == 0)
    v33 = *(unsigned __int8 *)(v29 + 23);
  else
    v33 = v32;
  if (v33 >= 0x80)
  {
    v34 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v33);
    v30 = *(unsigned __int8 *)(v29 + 23);
    v32 = *(_QWORD *)(v29 + 8);
    v3 = *((_DWORD *)this + 23);
    v31 = *(_BYTE *)(v29 + 23);
  }
  else
  {
    v34 = 1;
  }
  if (v31 < 0)
    v30 = v32;
  v4 = (v4 + v34 + v30 + 1);
  if ((v3 & 0x20) == 0)
  {
LABEL_29:
    if ((v3 & 0x40) == 0)
      goto LABEL_30;
    goto LABEL_69;
  }
LABEL_60:
  v35 = *((_QWORD *)this + 7);
  v36 = *(unsigned __int8 *)(v35 + 23);
  v37 = v36;
  v38 = *(_QWORD *)(v35 + 8);
  if ((v36 & 0x80u) == 0)
    v39 = *(unsigned __int8 *)(v35 + 23);
  else
    v39 = v38;
  if (v39 >= 0x80)
  {
    v40 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v39);
    v36 = *(unsigned __int8 *)(v35 + 23);
    v38 = *(_QWORD *)(v35 + 8);
    v3 = *((_DWORD *)this + 23);
    v37 = *(_BYTE *)(v35 + 23);
  }
  else
  {
    v40 = 1;
  }
  if (v37 < 0)
    v36 = v38;
  v4 = (v4 + v40 + v36 + 1);
  if ((v3 & 0x40) == 0)
  {
LABEL_30:
    if ((v3 & 0x80) == 0)
      goto LABEL_31;
    goto LABEL_78;
  }
LABEL_69:
  v41 = *((_QWORD *)this + 8);
  v42 = *(unsigned __int8 *)(v41 + 23);
  v43 = v42;
  v44 = *(_QWORD *)(v41 + 8);
  if ((v42 & 0x80u) == 0)
    v45 = *(unsigned __int8 *)(v41 + 23);
  else
    v45 = v44;
  if (v45 >= 0x80)
  {
    v46 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v45);
    v42 = *(unsigned __int8 *)(v41 + 23);
    v44 = *(_QWORD *)(v41 + 8);
    v3 = *((_DWORD *)this + 23);
    v43 = *(_BYTE *)(v41 + 23);
  }
  else
  {
    v46 = 1;
  }
  if (v43 < 0)
    v42 = v44;
  v4 = (v4 + v46 + v42 + 1);
  if ((v3 & 0x80) == 0)
  {
LABEL_31:
    if ((v3 & 0x100) == 0)
      goto LABEL_96;
    goto LABEL_87;
  }
LABEL_78:
  v47 = *((_QWORD *)this + 9);
  v48 = *(unsigned __int8 *)(v47 + 23);
  v49 = v48;
  v50 = *(_QWORD *)(v47 + 8);
  if ((v48 & 0x80u) == 0)
    v51 = *(unsigned __int8 *)(v47 + 23);
  else
    v51 = v50;
  if (v51 >= 0x80)
  {
    v52 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v51);
    v48 = *(unsigned __int8 *)(v47 + 23);
    v50 = *(_QWORD *)(v47 + 8);
    v3 = *((_DWORD *)this + 23);
    v49 = *(_BYTE *)(v47 + 23);
  }
  else
  {
    v52 = 1;
  }
  if (v49 < 0)
    v48 = v50;
  v4 = (v4 + v52 + v48 + 1);
  if ((v3 & 0x100) != 0)
  {
LABEL_87:
    v53 = *((_QWORD *)this + 10);
    v54 = *(unsigned __int8 *)(v53 + 23);
    v55 = v54;
    v56 = *(_QWORD *)(v53 + 8);
    if ((v54 & 0x80u) == 0)
      v57 = *(unsigned __int8 *)(v53 + 23);
    else
      v57 = v56;
    if (v57 >= 0x80)
    {
      v58 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v57);
      v54 = *(unsigned __int8 *)(v53 + 23);
      v56 = *(_QWORD *)(v53 + 8);
      v55 = *(_BYTE *)(v53 + 23);
    }
    else
    {
      v58 = 1;
    }
    if (v55 < 0)
      v54 = v56;
    v4 = (v4 + v58 + v54 + 1);
  }
LABEL_96:
  v59 = (_QWORD *)*((_QWORD *)this + 1);
  if (v59 && *v59 != v59[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 22) = v4;
  return v4;
}

void addr_obj::V0AddressObjectProto::MergeFrom(addr_obj::V0AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::V0AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 2283);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::V0AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887ECC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::V0AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::V0AddressObjectProto::IsInitialized(addr_obj::V0AddressObjectProto *this)
{
  return 1;
}

uint64_t addr_obj::V0AddressObjectProto::GetMetadata(addr_obj::V0AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50290;
}

void sub_1887ECD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V1AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

addr_obj::V1AddressObjectProto *addr_obj::V1AddressObjectProto::New(addr_obj::V1AddressObjectProto *this)
{
  addr_obj::V1AddressObjectProto *v1;

  v1 = (addr_obj::V1AddressObjectProto *)operator new();
  addr_obj::V1AddressObjectProto::V1AddressObjectProto(v1);
  return v1;
}

void sub_1887ECD98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40D9981018);
  _Unwind_Resume(a1);
}

void addr_obj::V1AddressObjectProto::SerializeWithCachedSizes(addr_obj::V1AddressObjectProto *this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2)
{
  addr_obj::V1AddressObjectProto *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;

  v3 = this;
  v4 = *((_DWORD *)this + 25);
  if ((v4 & 1) != 0)
  {
    this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, *((_QWORD *)this + 5), a2);
    v4 = *((_DWORD *)v3 + 25);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  v5 = *((_QWORD *)v3 + 6);
  if (!v5)
    v5 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(this) + 48);
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, v5, a2);
  v4 = *((_DWORD *)v3 + 25);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_13:
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *((_QWORD *)v3 + 7), a2);
  v4 = *((_DWORD *)v3 + 25);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_15;
  }
LABEL_14:
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *((_QWORD *)v3 + 8), a2);
  v4 = *((_DWORD *)v3 + 25);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_15:
  v6 = *((_QWORD *)v3 + 9);
  if (!v6)
    v6 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(this) + 72);
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, v6, a2);
  v4 = *((_DWORD *)v3 + 25);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_19;
  }
LABEL_18:
  this = (addr_obj::V1AddressObjectProto *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(6, *((_QWORD *)v3 + 10), a2);
  if ((*((_DWORD *)v3 + 25) & 0x40) == 0)
    goto LABEL_22;
LABEL_19:
  v7 = *((_QWORD *)v3 + 11);
  if (!v7)
    v7 = *(_QWORD *)(addr_obj::V1AddressObjectProto::default_instance_(this) + 88);
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(7, v7, a2);
LABEL_22:
  AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizes((addr_obj::V1AddressObjectProto *)((char *)v3 + 8), 100, 200, a2);
  v11 = (_QWORD *)*((_QWORD *)v3 + 4);
  v10 = (uint64_t **)((char *)v3 + 32);
  v9 = v11;
  if (v11)
  {
    if (*v9 != v9[1])
      AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v10, a2, v8);
  }
}

void addr_obj::V1AddressObjectProto::MergeFrom(addr_obj::V1AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::V1AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 2838);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::V1AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887ECFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::V1AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::V1AddressObjectProto::GetMetadata(addr_obj::V1AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502A0;
}

void sub_1887ED080(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::V2AddressObjectProto::MergeFrom(addr_obj::V2AddressObjectProto *this, const addr_obj::V2AddressObjectProto *a2)
{
  addr_obj::V2AddressObjectProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  const std::string *v9;
  uint64_t *v10;
  std::string *v11;
  const std::string *v12;
  uint64_t *v13;
  std::string *v14;
  const std::string *v15;
  uint64_t *v16;
  std::string *v17;
  const std::string *v18;
  uint64_t *v19;
  std::string *v20;
  const std::string *v21;
  uint64_t *v22;
  std::string *v23;
  const std::string *v24;
  uint64_t *v25;
  std::string *v26;
  const std::string *v27;
  uint64_t *v28;
  std::string *v29;
  const std::string *v30;
  uint64_t *v31;
  std::string *v32;
  const std::string *v33;
  uint64_t *v34;
  std::string *v35;
  const std::string *v36;
  uint64_t *v37;
  std::string *v38;
  const std::string *v39;
  uint64_t *v40;
  std::string *v41;
  char v42;
  std::string v43[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v43, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 3715);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v43, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v42, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v43[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_DWORD *)a2 + 35);
  if (!(_BYTE)v5)
    goto LABEL_45;
  if ((v5 & 1) != 0)
  {
    v6 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)v3 + 35) |= 1u;
    v7 = (uint64_t *)*((_QWORD *)v3 + 5);
    if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v8 = (std::string *)operator new();
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 5) = v8;
    }
    else
    {
      v8 = (std::string *)*((_QWORD *)v3 + 5);
    }
    this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v8, v6);
    v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 2) == 0)
    {
LABEL_6:
      if ((v5 & 4) == 0)
        goto LABEL_7;
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_6;
  }
  v9 = (const std::string *)*((_QWORD *)a2 + 6);
  *((_DWORD *)v3 + 35) |= 2u;
  v10 = (uint64_t *)*((_QWORD *)v3 + 6);
  if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v11 = (std::string *)operator new();
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 6) = v11;
  }
  else
  {
    v11 = (std::string *)*((_QWORD *)v3 + 6);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v11, v9);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0)
      goto LABEL_8;
    goto LABEL_25;
  }
LABEL_21:
  v12 = (const std::string *)*((_QWORD *)a2 + 7);
  *((_DWORD *)v3 + 35) |= 4u;
  v13 = (uint64_t *)*((_QWORD *)v3 + 7);
  if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v14 = (std::string *)operator new();
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 7) = v14;
  }
  else
  {
    v14 = (std::string *)*((_QWORD *)v3 + 7);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v14, v12);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_29;
  }
LABEL_25:
  v15 = (const std::string *)*((_QWORD *)a2 + 8);
  *((_DWORD *)v3 + 35) |= 8u;
  v16 = (uint64_t *)*((_QWORD *)v3 + 8);
  if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v17 = (std::string *)operator new();
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 8) = v17;
  }
  else
  {
    v17 = (std::string *)*((_QWORD *)v3 + 8);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v17, v15);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0)
      goto LABEL_10;
LABEL_33:
    v21 = (const std::string *)*((_QWORD *)a2 + 10);
    *((_DWORD *)v3 + 35) |= 0x20u;
    v22 = (uint64_t *)*((_QWORD *)v3 + 10);
    if (v22 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v23 = (std::string *)operator new();
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 10) = v23;
    }
    else
    {
      v23 = (std::string *)*((_QWORD *)v3 + 10);
    }
    this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v23, v21);
    v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 0x40) == 0)
    {
LABEL_11:
      if ((v5 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_41;
    }
    goto LABEL_37;
  }
LABEL_29:
  v18 = (const std::string *)*((_QWORD *)a2 + 9);
  *((_DWORD *)v3 + 35) |= 0x10u;
  v19 = (uint64_t *)*((_QWORD *)v3 + 9);
  if (v19 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v20 = (std::string *)operator new();
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 9) = v20;
  }
  else
  {
    v20 = (std::string *)*((_QWORD *)v3 + 9);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v20, v18);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x20) != 0)
    goto LABEL_33;
LABEL_10:
  if ((v5 & 0x40) == 0)
    goto LABEL_11;
LABEL_37:
  v24 = (const std::string *)*((_QWORD *)a2 + 11);
  *((_DWORD *)v3 + 35) |= 0x40u;
  v25 = (uint64_t *)*((_QWORD *)v3 + 11);
  if (v25 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v26 = (std::string *)operator new();
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 11) = v26;
  }
  else
  {
    v26 = (std::string *)*((_QWORD *)v3 + 11);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v26, v24);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x80) != 0)
  {
LABEL_41:
    v27 = (const std::string *)*((_QWORD *)a2 + 12);
    *((_DWORD *)v3 + 35) |= 0x80u;
    v28 = (uint64_t *)*((_QWORD *)v3 + 12);
    if (v28 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v29 = (std::string *)operator new();
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 12) = v29;
    }
    else
    {
      v29 = (std::string *)*((_QWORD *)v3 + 12);
    }
    this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v29, v27);
    v5 = *((_DWORD *)a2 + 35);
  }
LABEL_45:
  if ((v5 & 0xFF00) == 0)
    goto LABEL_67;
  if ((v5 & 0x100) != 0)
  {
    v30 = (const std::string *)*((_QWORD *)a2 + 13);
    *((_DWORD *)v3 + 35) |= 0x100u;
    v31 = (uint64_t *)*((_QWORD *)v3 + 13);
    if (v31 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v32 = (std::string *)operator new();
      v32->__r_.__value_.__l.__size_ = 0;
      v32->__r_.__value_.__r.__words[2] = 0;
      v32->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 13) = v32;
    }
    else
    {
      v32 = (std::string *)*((_QWORD *)v3 + 13);
    }
    this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v32, v30);
    v5 = *((_DWORD *)a2 + 35);
    if ((v5 & 0x200) == 0)
    {
LABEL_48:
      if ((v5 & 0x400) == 0)
        goto LABEL_49;
      goto LABEL_59;
    }
  }
  else if ((v5 & 0x200) == 0)
  {
    goto LABEL_48;
  }
  v33 = (const std::string *)*((_QWORD *)a2 + 14);
  *((_DWORD *)v3 + 35) |= 0x200u;
  v34 = (uint64_t *)*((_QWORD *)v3 + 14);
  if (v34 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v35 = (std::string *)operator new();
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 14) = v35;
  }
  else
  {
    v35 = (std::string *)*((_QWORD *)v3 + 14);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v35, v33);
  v5 = *((_DWORD *)a2 + 35);
  if ((v5 & 0x400) == 0)
  {
LABEL_49:
    if ((v5 & 0x800) == 0)
      goto LABEL_67;
    goto LABEL_63;
  }
LABEL_59:
  v36 = (const std::string *)*((_QWORD *)a2 + 15);
  *((_DWORD *)v3 + 35) |= 0x400u;
  v37 = (uint64_t *)*((_QWORD *)v3 + 15);
  if (v37 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v38 = (std::string *)operator new();
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 15) = v38;
  }
  else
  {
    v38 = (std::string *)*((_QWORD *)v3 + 15);
  }
  this = (addr_obj::V2AddressObjectProto *)std::string::operator=(v38, v36);
  if ((*((_DWORD *)a2 + 35) & 0x800) != 0)
  {
LABEL_63:
    v39 = (const std::string *)*((_QWORD *)a2 + 16);
    *((_DWORD *)v3 + 35) |= 0x800u;
    v40 = (uint64_t *)*((_QWORD *)v3 + 16);
    if (v40 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v41 = (std::string *)operator new();
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 16) = v41;
    }
    else
    {
      v41 = (std::string *)*((_QWORD *)v3 + 16);
    }
    std::string::operator=(v41, v39);
  }
LABEL_67:
  AddrObjGoogle::protobuf::internal::ExtensionSet::MergeFrom((uint64_t)v3 + 8, (const AddrObjGoogle::protobuf::internal::ExtensionSet **)a2 + 1);
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 4, (const addr_obj::V2AddressObjectProto *)((char *)a2 + 32));
}

void sub_1887ED5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::V2AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 136) = a2;
  return this;
}

void addr_obj::V2AddressObjectProto::SerializeWithCachedSizes(addr_obj::V2AddressObjectProto *this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2)
{
  int v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  _QWORD *v6;
  uint64_t **v7;
  _QWORD *v8;

  v4 = *((_DWORD *)this + 35);
  if ((v4 & 1) != 0)
  {
    AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, *((_QWORD *)this + 5), a2);
    v4 = *((_DWORD *)this + 35);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_20;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *((_QWORD *)this + 6), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_21;
  }
LABEL_20:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *((_QWORD *)this + 7), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_22;
  }
LABEL_21:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *((_QWORD *)this + 8), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0)
      goto LABEL_7;
    goto LABEL_23;
  }
LABEL_22:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(5, *((_QWORD *)this + 10), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0)
      goto LABEL_8;
    goto LABEL_24;
  }
LABEL_23:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(6, *((_QWORD *)this + 11), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0)
      goto LABEL_9;
    goto LABEL_25;
  }
LABEL_24:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(7, *((_QWORD *)this + 12), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_26;
  }
LABEL_25:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(8, *((_QWORD *)this + 9), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_26:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(9, *((_QWORD *)this + 13), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_28;
  }
LABEL_27:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(10, *((_QWORD *)this + 14), a2);
  v4 = *((_DWORD *)this + 35);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_28:
  AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(11, *((_QWORD *)this + 15), a2);
  if ((*((_DWORD *)this + 35) & 0x800) != 0)
LABEL_13:
    AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(12, *((_QWORD *)this + 16), a2);
LABEL_14:
  AddrObjGoogle::protobuf::internal::ExtensionSet::SerializeWithCachedSizes((addr_obj::V2AddressObjectProto *)((char *)this + 8), 100, 200, a2);
  v8 = (_QWORD *)*((_QWORD *)this + 4);
  v7 = (uint64_t **)((char *)this + 32);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, v5);
  }
}

void addr_obj::V2AddressObjectProto::MergeFrom(addr_obj::V2AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::V2AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 3703);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::V2AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887ED828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::V2AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::V2AddressObjectProto::GetMetadata(addr_obj::V2AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502B0;
}

void sub_1887ED900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueDecoratorProto::MergeFrom(addr_obj::VenueDecoratorProto *this, const addr_obj::VenueDecoratorProto *a2)
{
  addr_obj::VenueDecoratorProto *v3;
  std::string *v4;
  int v5;
  const std::string *v6;
  uint64_t *v7;
  std::string *v8;
  const std::string *v9;
  uint64_t *v10;
  std::string *v11;
  const std::string *v12;
  uint64_t *v13;
  std::string *v14;
  const std::string *v15;
  uint64_t *v16;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4146);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 52);
  if (!(_BYTE)v5)
    goto LABEL_25;
  if ((*((_BYTE *)a2 + 52) & 1) == 0)
  {
    if ((*((_BYTE *)a2 + 52) & 2) == 0)
      goto LABEL_6;
LABEL_13:
    v9 = (const std::string *)*((_QWORD *)a2 + 3);
    *((_DWORD *)v3 + 13) |= 2u;
    v10 = (uint64_t *)*((_QWORD *)v3 + 3);
    if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v11 = (std::string *)operator new();
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 3) = v11;
    }
    else
    {
      v11 = (std::string *)*((_QWORD *)v3 + 3);
    }
    this = (addr_obj::VenueDecoratorProto *)std::string::operator=(v11, v9);
    v5 = *((_DWORD *)a2 + 13);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0)
        goto LABEL_25;
      goto LABEL_21;
    }
    goto LABEL_17;
  }
  v6 = (const std::string *)*((_QWORD *)a2 + 2);
  *((_DWORD *)v3 + 13) |= 1u;
  v7 = (uint64_t *)*((_QWORD *)v3 + 2);
  if (v7 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v8 = (std::string *)operator new();
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 2) = v8;
  }
  else
  {
    v8 = (std::string *)*((_QWORD *)v3 + 2);
  }
  this = (addr_obj::VenueDecoratorProto *)std::string::operator=(v8, v6);
  v5 = *((_DWORD *)a2 + 13);
  if ((v5 & 2) != 0)
    goto LABEL_13;
LABEL_6:
  if ((v5 & 4) == 0)
    goto LABEL_7;
LABEL_17:
  v12 = (const std::string *)*((_QWORD *)a2 + 4);
  *((_DWORD *)v3 + 13) |= 4u;
  v13 = (uint64_t *)*((_QWORD *)v3 + 4);
  if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
  {
    v14 = (std::string *)operator new();
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *((_QWORD *)v3 + 4) = v14;
  }
  else
  {
    v14 = (std::string *)*((_QWORD *)v3 + 4);
  }
  this = (addr_obj::VenueDecoratorProto *)std::string::operator=(v14, v12);
  if ((*((_DWORD *)a2 + 13) & 8) != 0)
  {
LABEL_21:
    v15 = (const std::string *)*((_QWORD *)a2 + 5);
    *((_DWORD *)v3 + 13) |= 8u;
    v16 = (uint64_t *)*((_QWORD *)v3 + 5);
    if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
    {
      v17 = (std::string *)operator new();
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)v3 + 5) = v17;
    }
    else
    {
      v17 = (std::string *)*((_QWORD *)v3 + 5);
    }
    std::string::operator=(v17, v15);
  }
LABEL_25:
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::VenueDecoratorProto *)((char *)a2 + 8));
}

void sub_1887EDB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueDecoratorProto::~VenueDecoratorProto(addr_obj::VenueDecoratorProto *this)
{
  *(_QWORD *)this = &off_1E1BF9B00;
  addr_obj::VenueDecoratorProto::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::VenueDecoratorProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::VenueDecoratorProto::~VenueDecoratorProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::VenueDecoratorProto::SharedDtor(addr_obj::VenueDecoratorProto *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  v6 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v3);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if (*(char *)(v7 + 23) < 0)
        operator delete(*(void **)v7);
      v6 = (uint64_t *)MEMORY[0x18D76437C](v7, 0x1012C40EC159624);
    }
  }
  v8 = (uint64_t *)*((_QWORD *)this + 4);
  v9 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v6);
  if (v8 != v9)
  {
    v10 = *((_QWORD *)this + 4);
    if (v10)
    {
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v9 = (uint64_t *)MEMORY[0x18D76437C](v10, 0x1012C40EC159624);
    }
  }
  v11 = (uint64_t *)*((_QWORD *)this + 5);
  v12 = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)v9);
  if (v11 != v12)
  {
    v13 = *((_QWORD *)this + 5);
    if (v13)
    {
      if (*(char *)(v13 + 23) < 0)
        operator delete(*(void **)v13);
      v12 = (uint64_t *)MEMORY[0x18D76437C](v13, 0x1012C40EC159624);
    }
  }
  return addr_obj::VenueDecoratorProto::default_instance_((addr_obj::VenueDecoratorProto *)v12);
}

uint64_t addr_obj::VenueDecoratorProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 48) = a2;
  return this;
}

uint64_t addr_obj::VenueDecoratorProto::default_instance(addr_obj::VenueDecoratorProto *this)
{
  addr_obj::VenueDecoratorProto *v1;

  v1 = (addr_obj::VenueDecoratorProto *)addr_obj::VenueDecoratorProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::VenueDecoratorProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::VenueDecoratorProto::default_instance_(v1);
}

addr_obj::VenueDecoratorProto *addr_obj::VenueDecoratorProto::New(addr_obj::VenueDecoratorProto *this)
{
  addr_obj::VenueDecoratorProto *v1;

  v1 = (addr_obj::VenueDecoratorProto *)operator new();
  addr_obj::VenueDecoratorProto::VenueDecoratorProto(v1);
  return v1;
}

void sub_1887EDD10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C4093195C21);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::VenueDecoratorProto::Clear(uint64_t *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  AddrObjGoogle::protobuf::UnknownFieldSet *v10;
  uint64_t v11;

  v1 = this;
  if (*((_BYTE *)this + 52))
  {
    if ((*((_BYTE *)this + 52) & 1) != 0)
    {
      v2 = (uint64_t *)this[2];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v2 != this)
      {
        v3 = v1[2];
        if (*(char *)(v3 + 23) < 0)
        {
          **(_BYTE **)v3 = 0;
          *(_QWORD *)(v3 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v3 = 0;
          *(_BYTE *)(v3 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 52) & 2) != 0)
    {
      v4 = (uint64_t *)v1[3];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v4 != this)
      {
        v5 = v1[3];
        if (*(char *)(v5 + 23) < 0)
        {
          **(_BYTE **)v5 = 0;
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v5 = 0;
          *(_BYTE *)(v5 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 52) & 4) != 0)
    {
      v6 = (uint64_t *)v1[4];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v6 != this)
      {
        v7 = v1[4];
        if (*(char *)(v7 + 23) < 0)
        {
          **(_BYTE **)v7 = 0;
          *(_QWORD *)(v7 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v7 = 0;
          *(_BYTE *)(v7 + 23) = 0;
        }
      }
    }
    if ((*((_BYTE *)v1 + 52) & 8) != 0)
    {
      v8 = (uint64_t *)v1[5];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v8 != this)
      {
        v9 = v1[5];
        if (*(char *)(v9 + 23) < 0)
        {
          **(_BYTE **)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v9 = 0;
          *(_BYTE *)(v9 + 23) = 0;
        }
      }
    }
  }
  v11 = v1[1];
  v10 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 1);
  *((_DWORD *)v10 + 11) = 0;
  if (v11)
    return (uint64_t *)AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v10);
  return this;
}

uint64_t addr_obj::VenueDecoratorProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  int v9;
  uint64_t *v10;
  std::string *v11;
  _BYTE *v12;
  uint64_t *v13;
  std::string *v14;
  _BYTE *v15;
  uint64_t *v16;
  std::string *v17;
  _BYTE *v18;
  uint64_t *v19;
  std::string *v20;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (2)
  {
    v7 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
    {
      this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
      *((_DWORD *)a2 + 8) = this;
      if (!(_DWORD)this)
        return 1;
    }
    else
    {
      v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)a2 + 8) = (_DWORD)v8;
      *((_QWORD *)a2 + 1) = v7 + 1;
      if (!(_DWORD)v8)
        return 1;
    }
    switch(v8 >> 3)
    {
      case 1u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_17;
        *(_DWORD *)(v5 + 52) |= 1u;
        v10 = *(uint64_t **)(v5 + 16);
        if (v10 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v11 = (std::string *)operator new();
          v11->__r_.__value_.__l.__size_ = 0;
          v11->__r_.__value_.__r.__words[2] = 0;
          v11->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v11;
        }
        else
        {
          v11 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v11);
        if ((_DWORD)this)
        {
          v12 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
          {
            *((_QWORD *)a2 + 1) = v12 + 1;
            goto LABEL_25;
          }
          continue;
        }
        break;
      case 2u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_17;
LABEL_25:
        *(_DWORD *)(v5 + 52) |= 2u;
        v13 = *(uint64_t **)(v5 + 24);
        if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v14 = (std::string *)operator new();
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 24) = v14;
        }
        else
        {
          v14 = *(std::string **)(v5 + 24);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v14);
        if ((_DWORD)this)
        {
          v15 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v15 < *((_QWORD *)a2 + 2) && *v15 == 26)
          {
            *((_QWORD *)a2 + 1) = v15 + 1;
            goto LABEL_32;
          }
          continue;
        }
        break;
      case 3u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_17;
LABEL_32:
        *(_DWORD *)(v5 + 52) |= 4u;
        v16 = *(uint64_t **)(v5 + 32);
        if (v16 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v17 = (std::string *)operator new();
          v17->__r_.__value_.__l.__size_ = 0;
          v17->__r_.__value_.__r.__words[2] = 0;
          v17->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 32) = v17;
        }
        else
        {
          v17 = *(std::string **)(v5 + 32);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v17);
        if ((_DWORD)this)
        {
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 < *((_QWORD *)a2 + 2) && *v18 == 34)
          {
            *((_QWORD *)a2 + 1) = v18 + 1;
            goto LABEL_39;
          }
          continue;
        }
        break;
      case 4u:
        v9 = v8 & 7;
        if (v9 != 2)
          goto LABEL_17;
LABEL_39:
        *(_DWORD *)(v5 + 52) |= 8u;
        v19 = *(uint64_t **)(v5 + 40);
        if (v19 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v20 = (std::string *)operator new();
          v20->__r_.__value_.__l.__size_ = 0;
          v20->__r_.__value_.__r.__words[2] = 0;
          v20->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 40) = v20;
        }
        else
        {
          v20 = *(std::string **)(v5 + 40);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v20);
        if ((_DWORD)this)
        {
          if (*((_QWORD *)a2 + 1) != *((_QWORD *)a2 + 2)
            || !*((_DWORD *)a2 + 11) && *((_DWORD *)a2 + 6) != *((_DWORD *)a2 + 10))
          {
            continue;
          }
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
        }
        break;
      default:
        v9 = v8 & 7;
LABEL_17:
        if (v9 == 4)
          return 1;
        this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
        if ((this & 1) != 0)
          continue;
        this = 0;
        break;
    }
    return this;
  }
}

uint64_t **addr_obj::VenueDecoratorProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t **v7;
  _QWORD *v8;

  v4 = (uint64_t)this;
  v5 = *((_DWORD *)this + 13);
  if ((v5 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, (uint64_t)this[2], a2);
    v5 = *(_DWORD *)(v4 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v4 + 24), a2);
  v5 = *(_DWORD *)(v4 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_12:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v4 + 32), a2);
  if ((*(_DWORD *)(v4 + 52) & 8) != 0)
LABEL_5:
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v4 + 40), a2);
LABEL_6:
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (uint64_t **)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueDecoratorProto::SerializeWithCachedSizesToArray(addr_obj::VenueDecoratorProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v9;
  _BYTE *v10;
  int v11;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v12;
  const void *v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  _BYTE *v16;
  int v17;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v18;
  const void *v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v21;
  _BYTE *v22;
  int v23;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v24;
  const void *v25;
  uint64_t v26;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v27;
  _BYTE *v28;
  int v29;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v30;
  const void *v31;
  _QWORD *v32;
  uint64_t **v33;
  _QWORD *v34;

  v4 = a2;
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 1) != 0)
  {
    v7 = *((_QWORD *)this + 2);
    *(_BYTE *)a2 = 10;
    v8 = (char *)a2 + 1;
    if (*(char *)(v7 + 23) < 0)
      v9 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
    else
      v9 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
    if (v9 > 0x7F)
    {
      v10 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v9, v8, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v9;
      v10 = (char *)v4 + 2;
    }
    v11 = *(char *)(v7 + 23);
    if (v11 >= 0)
      v12 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
    else
      v12 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
    if (v11 >= 0)
      v13 = (const void *)*(unsigned __int8 *)(v7 + 23);
    else
      v13 = (const void *)*(unsigned int *)(v7 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v12, v13, v10, a4);
    v6 = *((_DWORD *)this + 13);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
LABEL_32:
      v20 = *((_QWORD *)this + 4);
      *(_BYTE *)v4 = 26;
      if (*(char *)(v20 + 23) < 0)
        v21 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v20 + 8);
      else
        v21 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v20 + 23);
      if (v21 > 0x7F)
      {
        v22 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v21, (_BYTE *)v4 + 1, a3);
      }
      else
      {
        *((_BYTE *)v4 + 1) = (_BYTE)v21;
        v22 = (char *)v4 + 2;
      }
      v23 = *(char *)(v20 + 23);
      if (v23 >= 0)
        v24 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v20;
      else
        v24 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v20;
      if (v23 >= 0)
        v25 = (const void *)*(unsigned __int8 *)(v20 + 23);
      else
        v25 = (const void *)*(unsigned int *)(v20 + 8);
      v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v24, v25, v22, a4);
      if ((*((_DWORD *)this + 13) & 8) == 0)
        goto LABEL_58;
      goto LABEL_45;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v14 = *((_QWORD *)this + 3);
  *(_BYTE *)v4 = 18;
  if (*(char *)(v14 + 23) < 0)
    v15 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v14 + 8);
  else
    v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v14 + 23);
  if (v15 > 0x7F)
  {
    v16 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)v4 + 1, a3);
  }
  else
  {
    *((_BYTE *)v4 + 1) = (_BYTE)v15;
    v16 = (char *)v4 + 2;
  }
  v17 = *(char *)(v14 + 23);
  if (v17 >= 0)
    v18 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14;
  else
    v18 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v14;
  if (v17 >= 0)
    v19 = (const void *)*(unsigned __int8 *)(v14 + 23);
  else
    v19 = (const void *)*(unsigned int *)(v14 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v18, v19, v16, a4);
  v6 = *((_DWORD *)this + 13);
  if ((v6 & 4) != 0)
    goto LABEL_32;
LABEL_4:
  if ((v6 & 8) != 0)
  {
LABEL_45:
    v26 = *((_QWORD *)this + 5);
    *(_BYTE *)v4 = 34;
    if (*(char *)(v26 + 23) < 0)
      v27 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v26 + 8);
    else
      v27 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v26 + 23);
    if (v27 > 0x7F)
    {
      v28 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v27, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v27;
      v28 = (char *)v4 + 2;
    }
    v29 = *(char *)(v26 + 23);
    if (v29 >= 0)
      v30 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v26;
    else
      v30 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v26;
    if (v29 >= 0)
      v31 = (const void *)*(unsigned __int8 *)(v26 + 23);
    else
      v31 = (const void *)*(unsigned int *)(v26 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v30, v31, v28, a4);
  }
LABEL_58:
  v34 = (_QWORD *)*((_QWORD *)this + 1);
  v33 = (uint64_t **)((char *)this + 8);
  v32 = v34;
  if (!v34 || *v32 == v32[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v33, v4, a3, a4);
}

uint64_t addr_obj::VenueDecoratorProto::ByteSize(addr_obj::VenueDecoratorProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _QWORD *v30;

  LOBYTE(v3) = *((_BYTE *)this + 52);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_45;
  }
  if ((*((_BYTE *)this + 52) & 1) == 0)
  {
    v4 = 0;
    if ((*((_BYTE *)this + 52) & 2) == 0)
      goto LABEL_24;
    goto LABEL_15;
  }
  v5 = *((_QWORD *)this + 2);
  v6 = *(unsigned __int8 *)(v5 + 23);
  v7 = v6;
  v8 = *(_QWORD *)(v5 + 8);
  if ((v6 & 0x80u) == 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = v8;
  if (v9 >= 0x80)
  {
    v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v9);
    v6 = *(unsigned __int8 *)(v5 + 23);
    v8 = *(_QWORD *)(v5 + 8);
    v10 = v11 + 1;
    v3 = *((_DWORD *)this + 13);
    v7 = *(_BYTE *)(v5 + 23);
  }
  else
  {
    v10 = 2;
  }
  if (v7 < 0)
    v6 = v8;
  v4 = (v10 + v6);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v12 = *((_QWORD *)this + 3);
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = v13;
    v15 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = v15;
    if (v16 >= 0x80)
    {
      v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v16);
      v13 = *(unsigned __int8 *)(v12 + 23);
      v15 = *(_QWORD *)(v12 + 8);
      v3 = *((_DWORD *)this + 13);
      v14 = *(_BYTE *)(v12 + 23);
    }
    else
    {
      v17 = 1;
    }
    if (v14 < 0)
      v13 = v15;
    v4 = (v4 + v17 + v13 + 1);
  }
LABEL_24:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_45;
    goto LABEL_36;
  }
  v18 = *((_QWORD *)this + 4);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = v19;
  v21 = *(_QWORD *)(v18 + 8);
  if ((v19 & 0x80u) == 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = v21;
  if (v22 >= 0x80)
  {
    v23 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v22);
    v19 = *(unsigned __int8 *)(v18 + 23);
    v21 = *(_QWORD *)(v18 + 8);
    v3 = *((_DWORD *)this + 13);
    v20 = *(_BYTE *)(v18 + 23);
  }
  else
  {
    v23 = 1;
  }
  if (v20 < 0)
    v19 = v21;
  v4 = (v4 + v23 + v19 + 1);
  if ((v3 & 8) != 0)
  {
LABEL_36:
    v24 = *((_QWORD *)this + 5);
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = v25;
    v27 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v28 = *(unsigned __int8 *)(v24 + 23);
    else
      v28 = v27;
    if (v28 >= 0x80)
    {
      v29 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v28);
      v25 = *(unsigned __int8 *)(v24 + 23);
      v27 = *(_QWORD *)(v24 + 8);
      v26 = *(_BYTE *)(v24 + 23);
    }
    else
    {
      v29 = 1;
    }
    if (v26 < 0)
      v25 = v27;
    v4 = (v4 + v29 + v25 + 1);
  }
LABEL_45:
  v30 = (_QWORD *)*((_QWORD *)this + 1);
  if (v30 && *v30 != v30[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 12) = v4;
  return v4;
}

void addr_obj::VenueDecoratorProto::MergeFrom(addr_obj::VenueDecoratorProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::VenueDecoratorProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4134);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::VenueDecoratorProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887EE68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::VenueDecoratorProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::VenueDecoratorProto::IsInitialized(addr_obj::VenueDecoratorProto *this)
{
  return 1;
}

uint64_t addr_obj::VenueDecoratorProto::GetMetadata(addr_obj::VenueDecoratorProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502C0;
}

void sub_1887EE76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueFieldProto::MergeFrom(addr_obj::VenueFieldProto *this, const addr_obj::VenueFieldProto *a2)
{
  std::string *v4;
  int v5;
  int v6;
  int v7;
  char v8;
  std::string v9[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4406);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v8, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v9[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 28);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 28) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 4);
      *((_DWORD *)this + 7) |= 1u;
      *((_DWORD *)this + 4) = v6;
      v5 = *((_DWORD *)a2 + 7);
    }
    if ((v5 & 2) != 0)
    {
      v7 = *((_DWORD *)a2 + 5);
      *((_DWORD *)this + 7) |= 2u;
      *((_DWORD *)this + 5) = v7;
    }
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::VenueFieldProto *)((char *)a2 + 8));
}

void sub_1887EE834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueFieldProto::~VenueFieldProto(addr_obj::VenueFieldProto *this)
{
  *(_QWORD *)this = &off_1E1BF9648;
  addr_obj::VenueFieldProto::default_instance_(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::VenueFieldProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::VenueFieldProto::~VenueFieldProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::VenueFieldProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t addr_obj::VenueFieldProto::default_instance(addr_obj::VenueFieldProto *this)
{
  addr_obj::VenueFieldProto *v1;

  v1 = (addr_obj::VenueFieldProto *)addr_obj::VenueFieldProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::VenueFieldProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::VenueFieldProto::default_instance_(v1);
}

addr_obj::VenueFieldProto *addr_obj::VenueFieldProto::New(addr_obj::VenueFieldProto *this)
{
  addr_obj::VenueFieldProto *v1;

  v1 = (addr_obj::VenueFieldProto *)operator new();
  addr_obj::VenueFieldProto::VenueFieldProto(v1);
  return v1;
}

void sub_1887EE910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40380937A6);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueFieldProto::Clear(addr_obj::VenueFieldProto *this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *result;
  uint64_t v2;

  if (*((_BYTE *)this + 28))
    *((_QWORD *)this + 2) = 0;
  v2 = *((_QWORD *)this + 1);
  result = (addr_obj::VenueFieldProto *)((char *)this + 8);
  *((_DWORD *)result + 5) = 0;
  if (v2)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(result);
  return result;
}

uint64_t addr_obj::VenueFieldProto::MergePartialFromCodedStream(addr_obj::VenueFieldProto *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  void ***v6;
  unsigned int *v7;
  char *v8;
  unint64_t TagFallback;
  int v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned __int8 *v16;
  uint64_t result;
  unsigned int v18;

  v6 = (void ***)((char *)this + 8);
  v7 = (unsigned int *)((char *)this + 20);
  while (1)
  {
    while (1)
    {
      v8 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
      {
        TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      else
      {
        TagFallback = *v8;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v8 + 1;
        if (!(_DWORD)TagFallback)
          return 1;
      }
      if (TagFallback >> 3 != 1)
        break;
      v10 = TagFallback & 7;
      if ((TagFallback & 7) != 0)
        goto LABEL_16;
      v18 = 0;
      v13 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v13 >= *((_QWORD *)a2 + 2) || *v13 < 0)
      {
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v18);
        if (!(_DWORD)result)
          return result;
        v14 = v18;
      }
      else
      {
        v14 = *v13;
        *((_QWORD *)a2 + 1) = v13 + 1;
      }
      if (v14 > 6)
      {
        AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 1, (int)v14);
      }
      else
      {
        *((_DWORD *)this + 7) |= 1u;
        *((_DWORD *)this + 4) = v14;
      }
      v15 = (_BYTE *)*((_QWORD *)a2 + 1);
      v11 = *((_QWORD *)a2 + 2);
      if ((unint64_t)v15 < v11 && *v15 == 40)
      {
        v12 = v15 + 1;
        *((_QWORD *)a2 + 1) = v12;
LABEL_27:
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, v7);
          if (!(_DWORD)result)
            return result;
          v16 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
          v11 = *((_QWORD *)a2 + 2);
        }
        else
        {
          *v7 = *v12;
          v16 = (unsigned __int8 *)(v12 + 1);
          *((_QWORD *)a2 + 1) = v16;
        }
        *((_DWORD *)this + 7) |= 2u;
        if (v16 == (unsigned __int8 *)v11 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 5)
    {
      v10 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        v12 = (char *)*((_QWORD *)a2 + 1);
        v11 = *((_QWORD *)a2 + 2);
        goto LABEL_27;
      }
    }
    else
    {
      v10 = TagFallback & 7;
    }
LABEL_16:
    if (v10 == 4)
      return 1;
    if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v6, a4))return 0;
  }
}

BOOL addr_obj::VenueInfoProto_VenueField_IsValid(addr_obj *this)
{
  return this < 7;
}

uint64_t **addr_obj::VenueFieldProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;

  v5 = (uint64_t)this;
  v6 = *((_DWORD *)this + 7);
  if ((v6 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 4), a2, a4);
    v6 = *(_DWORD *)(v5 + 28);
  }
  if ((v6 & 2) != 0)
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteUInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)5, *(_DWORD *)(v5 + 20), a2, a4);
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (uint64_t **)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueFieldProto::SerializeWithCachedSizesToArray(addr_obj::VenueFieldProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unint64_t v5;
  unsigned __int8 *v6;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v7;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = *((int *)this + 4);
    *(_BYTE *)a2 = 8;
    if ((v5 & 0x80000000) != 0)
    {
      v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v5, (_BYTE *)a2 + 1, a3);
    }
    else
    {
      if (v5 <= 0x7F)
      {
        *((_BYTE *)a2 + 1) = v5;
        a2 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
        goto LABEL_8;
      }
      v6 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v5, (_BYTE *)a2 + 1, a3);
    }
    a2 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)v6;
  }
LABEL_8:
  if ((*((_BYTE *)this + 28) & 2) != 0)
  {
    v7 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
    *(_BYTE *)a2 = 40;
    if (v7 > 0x7F)
    {
      a2 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, (_BYTE *)a2 + 1, a3);
    }
    else
    {
      *((_BYTE *)a2 + 1) = (_BYTE)v7;
      a2 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
  }
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v9 = (uint64_t **)((char *)this + 8);
  v8 = v10;
  if (!v10 || *v8 == v8[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v9, a2, a3, a4);
}

uint64_t addr_obj::VenueFieldProto::ByteSize(addr_obj::VenueFieldProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  char v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v6;
  int v7;
  _QWORD *v8;

  v3 = *((_BYTE *)this + 28);
  if (v3)
  {
    if ((*((_BYTE *)this + 28) & 1) == 0)
    {
      v4 = 0;
      if ((*((_BYTE *)this + 28) & 2) == 0)
        goto LABEL_17;
LABEL_13:
      v6 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 5);
      if (v6 >= 0x80)
        v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6) + 1;
      else
        v7 = 2;
      v4 = (v7 + v4);
      goto LABEL_17;
    }
    v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 4);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
    if (v5 < 0x80)
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_17;
      goto LABEL_13;
    }
    v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
    if ((*((_DWORD *)this + 7) & 2) != 0)
      goto LABEL_13;
  }
  else
  {
    v4 = 0;
  }
LABEL_17:
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8 && *v8 != v8[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 6) = v4;
  return v4;
}

void addr_obj::VenueFieldProto::MergeFrom(addr_obj::VenueFieldProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::VenueFieldProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4394);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::VenueFieldProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887EEDCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::VenueFieldProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::VenueFieldProto::IsInitialized(addr_obj::VenueFieldProto *this)
{
  return 1;
}

uint64_t addr_obj::VenueFieldProto::GetMetadata(addr_obj::VenueFieldProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502D0;
}

void sub_1887EEEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueTemplateProto::MergeFrom(addr_obj::VenueTemplateProto *this, const addr_obj::VenueTemplateProto *a2)
{
  std::string *v4;
  int v5;
  int v6;
  uint64_t v7;
  const addr_obj::VenueFieldProto *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  addr_obj::VenueFieldProto *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const addr_obj::VenueDecoratorProto *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  addr_obj::VenueDecoratorProto *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4759);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v23, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_DWORD *)a2 + 6);
  if (v5)
  {
    AddrObjGoogle::protobuf::RepeatedField<int>::Reserve((_DWORD *)this + 4, *((_DWORD *)this + 6) + v5);
    memcpy((void *)(*((_QWORD *)this + 2) + 4 * *((int *)this + 6)), *((const void **)a2 + 2), 4 * *((int *)a2 + 6));
    *((_DWORD *)this + 6) += *((_DWORD *)a2 + 6);
  }
  v6 = *((_DWORD *)a2 + 10);
  if (v6)
  {
    AddrObjGoogle::protobuf::RepeatedField<int>::Reserve((_DWORD *)this + 8, *((_DWORD *)this + 10) + v6);
    memcpy((void *)(*((_QWORD *)this + 4) + 4 * *((int *)this + 10)), *((const void **)a2 + 4), 4 * *((int *)a2 + 10));
    *((_DWORD *)this + 10) += *((_DWORD *)a2 + 10);
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 12, *((_DWORD *)a2 + 14) + *((_DWORD *)this + 14));
  if (*((int *)a2 + 14) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(const addr_obj::VenueFieldProto **)(*((_QWORD *)a2 + 6) + 8 * v7);
      v9 = *((_DWORD *)this + 15);
      v10 = *((int *)this + 14);
      if ((int)v10 >= v9)
      {
        if (v9 == *((_DWORD *)this + 16))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 12, v9 + 1);
          v9 = *((_DWORD *)this + 15);
        }
        *((_DWORD *)this + 15) = v9 + 1;
        v12 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFieldProto>::New();
        v13 = *((_QWORD *)this + 6);
        v14 = *((int *)this + 14);
        *((_DWORD *)this + 14) = v14 + 1;
        *(_QWORD *)(v13 + 8 * v14) = v12;
      }
      else
      {
        v11 = *((_QWORD *)this + 6);
        *((_DWORD *)this + 14) = v10 + 1;
        v12 = *(addr_obj::VenueFieldProto **)(v11 + 8 * v10);
      }
      addr_obj::VenueFieldProto::MergeFrom(v12, v8);
      ++v7;
    }
    while (v7 < *((int *)a2 + 14));
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 18, *((_DWORD *)a2 + 20) + *((_DWORD *)this + 20));
  if (*((int *)a2 + 20) >= 1)
  {
    v15 = 0;
    do
    {
      v16 = *(const addr_obj::VenueDecoratorProto **)(*((_QWORD *)a2 + 9) + 8 * v15);
      v17 = *((_DWORD *)this + 21);
      v18 = *((int *)this + 20);
      if ((int)v18 >= v17)
      {
        if (v17 == *((_DWORD *)this + 22))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 18, v17 + 1);
          v17 = *((_DWORD *)this + 21);
        }
        *((_DWORD *)this + 21) = v17 + 1;
        v20 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueDecoratorProto>::New();
        v21 = *((_QWORD *)this + 9);
        v22 = *((int *)this + 20);
        *((_DWORD *)this + 20) = v22 + 1;
        *(_QWORD *)(v21 + 8 * v22) = v20;
      }
      else
      {
        v19 = *((_QWORD *)this + 9);
        *((_DWORD *)this + 20) = v18 + 1;
        v20 = *(addr_obj::VenueDecoratorProto **)(v19 + 8 * v18);
      }
      addr_obj::VenueDecoratorProto::MergeFrom(v20, v16);
      ++v15;
    }
    while (v15 < *((int *)a2 + 20));
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::VenueTemplateProto *)((char *)a2 + 8));
}

void sub_1887EF120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueTemplateProto::~VenueTemplateProto(addr_obj::VenueTemplateProto *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E1BF9A50;
  addr_obj::VenueTemplateProto::default_instance_(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 9);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 6);
  v2 = *((_QWORD *)this + 4);
  if (v2)
    MEMORY[0x18D764364](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x18D764364](v3, 0x1000C8052888210);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::VenueTemplateProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::VenueTemplateProto::~VenueTemplateProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::VenueTemplateProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 96) = a2;
  return this;
}

uint64_t addr_obj::VenueTemplateProto::default_instance(addr_obj::VenueTemplateProto *this)
{
  addr_obj::VenueTemplateProto *v1;

  v1 = (addr_obj::VenueTemplateProto *)addr_obj::VenueTemplateProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::VenueTemplateProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::VenueTemplateProto::default_instance_(v1);
}

addr_obj::VenueTemplateProto *addr_obj::VenueTemplateProto::New(addr_obj::VenueTemplateProto *this)
{
  addr_obj::VenueTemplateProto *v1;

  v1 = (addr_obj::VenueTemplateProto *)operator new();
  addr_obj::VenueTemplateProto::VenueTemplateProto(v1);
  return v1;
}

void sub_1887EF24C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C40B7099809);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueTemplateProto::Clear(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  AddrObjGoogle::protobuf::UnknownFieldSet *v6;
  uint64_t v7;

  v1 = (uint64_t)this;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  if (*((int *)this + 14) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v2);
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 56));
  }
  *(_DWORD *)(v1 + 56) = 0;
  if (*(int *)(v1 + 80) >= 1)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 8 * v4);
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
      ++v4;
    }
    while (v4 < *(int *)(v1 + 80));
  }
  v7 = *(_QWORD *)(v1 + 8);
  v6 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v6 + 18) = 0;
  *((_DWORD *)v6 + 23) = 0;
  if (v7)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v6);
  return this;
}

uint64_t addr_obj::VenueTemplateProto::MergePartialFromCodedStream(addr_obj::VenueTemplateProto *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  _DWORD *v6;
  _DWORD *v7;
  void ***v8;
  int *v9;
  int *v10;
  char *v11;
  unint64_t TagFallback;
  int v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t result;
  unsigned int v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  addr_obj::VenueFieldProto *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  AddrObjGoogle::protobuf::UnknownFieldSet *v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  addr_obj::VenueDecoratorProto *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  AddrObjGoogle::protobuf::UnknownFieldSet *v54;
  int v55;
  int v56;
  _BYTE *v57;
  unsigned int v58;

  v6 = (_DWORD *)((char *)this + 32);
  v7 = (_DWORD *)((char *)this + 16);
  v8 = (void ***)((char *)this + 8);
  v9 = (int *)((char *)this + 48);
  v10 = (int *)((char *)this + 72);
  while (1)
  {
LABEL_2:
    v11 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v11 < *((_QWORD *)a2 + 2) && (*v11 & 0x80000000) == 0)
    {
      TagFallback = *v11;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v11 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
      goto LABEL_7;
    }
    TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
    *((_DWORD *)a2 + 8) = TagFallback;
    if (!(_DWORD)TagFallback)
      return 1;
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        v13 = TagFallback & 7;
        if (v13 != 2)
        {
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v15 = (char *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          goto LABEL_25;
        }
        result = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(a2, (unsigned int (*)(uint64_t))addr_obj::VenueInfoProto_VenueField_IsValid, v7);
        if (!(_DWORD)result)
          return result;
LABEL_35:
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v21 >= v14)
          continue;
        v22 = *v21;
        if (v22 == 16)
          goto LABEL_52;
        if (v22 != 8)
          continue;
        v15 = v21 + 1;
        *((_QWORD *)a2 + 1) = v15;
LABEL_25:
        v58 = 0;
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v58);
          if (!(_DWORD)result)
            return result;
          v18 = v58;
        }
        else
        {
          v18 = *v15;
          *((_QWORD *)a2 + 1) = v15 + 1;
        }
        if (v18 > 6)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v8, 1, (int)v18);
        }
        else
        {
          v19 = *((_DWORD *)this + 6);
          if (v19 == *((_DWORD *)this + 7))
          {
            AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(v7, v19 + 1);
            v19 = *((_DWORD *)this + 6);
          }
          v20 = *((_QWORD *)this + 2);
          *((_DWORD *)this + 6) = v19 + 1;
          *(_DWORD *)(v20 + 4 * v19) = v18;
        }
        goto LABEL_35;
      case 2u:
        v13 = TagFallback & 7;
        if (v13 != 2)
        {
          if ((TagFallback & 7) != 0)
            goto LABEL_18;
          v16 = (char *)*((_QWORD *)a2 + 1);
          v14 = *((_QWORD *)a2 + 2);
          goto LABEL_39;
        }
        result = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(a2, (unsigned int (*)(uint64_t))addr_obj::VenueInfoProto_VenueField_IsValid, v6);
        if (!(_DWORD)result)
          return result;
LABEL_49:
        v21 = (_BYTE *)*((_QWORD *)a2 + 1);
        v14 = *((_QWORD *)a2 + 2);
        if ((unint64_t)v21 >= v14)
          continue;
        v26 = *v21;
        if (v26 == 26)
          goto LABEL_53;
        if (v26 != 16)
          continue;
LABEL_52:
        v16 = v21 + 1;
        *((_QWORD *)a2 + 1) = v16;
LABEL_39:
        v58 = 0;
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v58);
          if (!(_DWORD)result)
            return result;
          v23 = v58;
        }
        else
        {
          v23 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        if (v23 > 6)
        {
          AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v8, 2, (int)v23);
        }
        else
        {
          v24 = *((_DWORD *)this + 10);
          if (v24 == *((_DWORD *)this + 11))
          {
            AddrObjGoogle::protobuf::RepeatedField<int>::Reserve(v6, v24 + 1);
            v24 = *((_DWORD *)this + 10);
          }
          v25 = *((_QWORD *)this + 4);
          *((_DWORD *)this + 10) = v24 + 1;
          *(_DWORD *)(v25 + 4 * v24) = v23;
        }
        goto LABEL_49;
      case 3u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_18;
        while (1)
        {
          v27 = *((_DWORD *)this + 15);
          v28 = *((int *)this + 14);
          if ((int)v28 >= v27)
          {
            if (v27 == *((_DWORD *)this + 16))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v27 + 1);
              v27 = *((_DWORD *)this + 15);
            }
            *((_DWORD *)this + 15) = v27 + 1;
            v30 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFieldProto>::New();
            v31 = *((_QWORD *)this + 6);
            v32 = *((int *)this + 14);
            *((_DWORD *)this + 14) = v32 + 1;
            *(_QWORD *)(v31 + 8 * v32) = v30;
          }
          else
          {
            v29 = *((_QWORD *)this + 6);
            *((_DWORD *)this + 14) = v28 + 1;
            v30 = *(addr_obj::VenueFieldProto **)(v29 + 8 * v28);
          }
          v58 = 0;
          v33 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v33 >= *((_QWORD *)a2 + 2) || *v33 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v58))
              return 0;
          }
          else
          {
            v58 = *v33;
            *((_QWORD *)a2 + 1) = v33 + 1;
          }
          v34 = *((_DWORD *)a2 + 14);
          v35 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v34 + 1;
          if (v34 >= v35)
            return 0;
          v36 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v58);
          if (!addr_obj::VenueFieldProto::MergePartialFromCodedStream(v30, a2, v37, v38)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v36);
          v39 = *((_DWORD *)a2 + 14);
          v40 = __OFSUB__(v39, 1);
          v41 = v39 - 1;
          if (v41 < 0 == v40)
            *((_DWORD *)a2 + 14) = v41;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v21 >= *((_QWORD *)a2 + 2))
            goto LABEL_2;
          v42 = *v21;
          if (v42 != 26)
            break;
LABEL_53:
          *((_QWORD *)a2 + 1) = v21 + 1;
        }
        if (v42 != 34)
          continue;
        goto LABEL_71;
      case 4u:
        v13 = TagFallback & 7;
        if (v13 != 2)
          goto LABEL_18;
        while (2)
        {
          v43 = *((_DWORD *)this + 21);
          v44 = *((int *)this + 20);
          if ((int)v44 >= v43)
          {
            if (v43 == *((_DWORD *)this + 22))
            {
              AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v10, v43 + 1);
              v43 = *((_DWORD *)this + 21);
            }
            *((_DWORD *)this + 21) = v43 + 1;
            v46 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueDecoratorProto>::New();
            v47 = *((_QWORD *)this + 9);
            v48 = *((int *)this + 20);
            *((_DWORD *)this + 20) = v48 + 1;
            *(_QWORD *)(v47 + 8 * v48) = v46;
          }
          else
          {
            v45 = *((_QWORD *)this + 9);
            *((_DWORD *)this + 20) = v44 + 1;
            v46 = *(addr_obj::VenueDecoratorProto **)(v45 + 8 * v44);
          }
          v58 = 0;
          v49 = (char *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v49 >= *((_QWORD *)a2 + 2) || *v49 < 0)
          {
            if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v58))
              return 0;
          }
          else
          {
            v58 = *v49;
            *((_QWORD *)a2 + 1) = v49 + 1;
          }
          v50 = *((_DWORD *)a2 + 14);
          v51 = *((_DWORD *)a2 + 15);
          *((_DWORD *)a2 + 14) = v50 + 1;
          if (v50 >= v51)
            return 0;
          v52 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v58);
          if (!addr_obj::VenueDecoratorProto::MergePartialFromCodedStream((uint64_t)v46, a2, v53, v54)
            || !*((_BYTE *)a2 + 36))
          {
            return 0;
          }
          AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v52);
          v55 = *((_DWORD *)a2 + 14);
          v40 = __OFSUB__(v55, 1);
          v56 = v55 - 1;
          if (v56 < 0 == v40)
            *((_DWORD *)a2 + 14) = v56;
          v21 = (_BYTE *)*((_QWORD *)a2 + 1);
          v57 = (_BYTE *)*((_QWORD *)a2 + 2);
          if (v21 < v57 && *v21 == 34)
          {
LABEL_71:
            *((_QWORD *)a2 + 1) = v21 + 1;
            continue;
          }
          break;
        }
        if (v21 == v57 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          result = 1;
          *((_BYTE *)a2 + 36) = 1;
          return result;
        }
        break;
      default:
        v13 = TagFallback & 7;
LABEL_18:
        if (v13 == 4)
          return 1;
        if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v8, a4))return 0;
        continue;
    }
  }
}

uint64_t **addr_obj::VenueTemplateProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t **v11;
  _QWORD *v12;

  v5 = (uint64_t)this;
  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)1, *(_DWORD *)(*(_QWORD *)(v5 + 16) + 4 * v6++), a2, a4);
    while (v6 < *(int *)(v5 + 24));
  }
  if (*(int *)(v5 + 40) >= 1)
  {
    v7 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)2, *(_DWORD *)(*(_QWORD *)(v5 + 32) + 4 * v7++), a2, a4);
    while (v7 < *(int *)(v5 + 40));
  }
  if (*(int *)(v5 + 56) >= 1)
  {
    v8 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8++), a2);
    while (v8 < *(int *)(v5 + 56));
  }
  if (*(int *)(v5 + 80) >= 1)
  {
    v9 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(4, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 8 * v9++), a2);
    while (v9 < *(int *)(v5 + 80));
  }
  v12 = *(_QWORD **)(v5 + 8);
  v11 = (uint64_t **)(v5 + 8);
  v10 = v12;
  if (v12)
  {
    if (*v10 != v10[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v11, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueTemplateProto::SerializeWithCachedSizesToArray(addr_obj::VenueTemplateProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  AddrObjGoogle::protobuf::UnknownFieldSet *v9;
  uint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  AddrObjGoogle::protobuf::UnknownFieldSet *v13;
  uint64_t v14;
  unsigned int *v15;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v16;
  const AddrObjGoogle::protobuf::UnknownFieldSet *v17;
  uint64_t v18;
  unsigned int *v19;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v20;
  AddrObjGoogle::protobuf::UnknownFieldSet *v21;
  _QWORD *v22;
  uint64_t **v23;
  _QWORD *v24;

  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(int *)(*((_QWORD *)this + 2) + 4 * v6);
      *(_BYTE *)a2 = 8;
      v8 = (char *)a2 + 1;
      if ((v7 & 0x80000000) != 0)
        break;
      if (v7 > 0x7F)
      {
        v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v7, v8, a3);
        goto LABEL_8;
      }
      *((_BYTE *)a2 + 1) = v7;
      a2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
LABEL_9:
      if (++v6 >= *((int *)this + 6))
        goto LABEL_10;
    }
    v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v7, v8, a3);
LABEL_8:
    a2 = v9;
    goto LABEL_9;
  }
LABEL_10:
  if (*((int *)this + 10) >= 1)
  {
    v10 = 0;
    while (1)
    {
      v11 = *(int *)(*((_QWORD *)this + 4) + 4 * v10);
      *(_BYTE *)a2 = 16;
      v12 = (char *)a2 + 1;
      if ((v11 & 0x80000000) != 0)
        break;
      if (v11 > 0x7F)
      {
        v13 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v11, v12, a3);
        goto LABEL_17;
      }
      *((_BYTE *)a2 + 1) = v11;
      a2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
LABEL_18:
      if (++v10 >= *((int *)this + 10))
        goto LABEL_19;
    }
    v13 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v11, v12, a3);
LABEL_17:
    a2 = v13;
    goto LABEL_18;
  }
LABEL_19:
  if (*((int *)this + 14) >= 1)
  {
    v14 = 0;
    do
    {
      v15 = *(unsigned int **)(*((_QWORD *)this + 6) + 8 * v14);
      *(_BYTE *)a2 = 26;
      v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v15[6];
      if (v16 > 0x7F)
      {
        v17 = (const AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v16, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v16;
        v17 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = addr_obj::VenueFieldProto::SerializeWithCachedSizesToArray((addr_obj::VenueFieldProto *)v15, v17, a3, a4);
      ++v14;
    }
    while (v14 < *((int *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    v18 = 0;
    do
    {
      v19 = *(unsigned int **)(*((_QWORD *)this + 9) + 8 * v18);
      *(_BYTE *)a2 = 34;
      v20 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v19[12];
      if (v20 > 0x7F)
      {
        v21 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v20, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v20;
        v21 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = addr_obj::VenueDecoratorProto::SerializeWithCachedSizesToArray((addr_obj::VenueDecoratorProto *)v19, v21, a3, a4);
      ++v18;
    }
    while (v18 < *((int *)this + 20));
  }
  v24 = (_QWORD *)*((_QWORD *)this + 1);
  v23 = (uint64_t **)((char *)this + 8);
  v22 = v24;
  if (!v24 || *v22 == v22[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v23, a2, a3, a4);
}

uint64_t addr_obj::VenueTemplateProto::ByteSize(addr_obj::VenueTemplateProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  _QWORD *v25;

  v3 = *((_DWORD *)this + 6);
  if (v3 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 2) + 4 * v4);
      if ((v6 & 0x80000000) != 0)
      {
        v7 = 10;
      }
      else if (v6 >= 0x80)
      {
        v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6);
        v3 = *((_DWORD *)this + 6);
      }
      else
      {
        v7 = 1;
      }
      v5 += v7;
      ++v4;
    }
    while (v4 < v3);
  }
  v8 = *((_DWORD *)this + 10);
  if (v8 < 1)
  {
    v10 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned int *)(*((_QWORD *)this + 4) + 4 * v9);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11);
        v8 = *((_DWORD *)this + 10);
      }
      else
      {
        v12 = 1;
      }
      v10 += v12;
      ++v9;
    }
    while (v9 < v8);
  }
  v13 = *((_DWORD *)this + 14);
  v14 = v3 + v5 + v10 + v8 + v13;
  if (v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueFieldProto::ByteSize(*(addr_obj::VenueFieldProto **)(*((_QWORD *)this + 6)+ 8 * v15), a2);
      v17 = (int)v16;
      if (v16 >= 0x80)
        v18 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16);
      else
        v18 = 1;
      v14 += v17 + v18;
      ++v15;
    }
    while (v15 < *((int *)this + 14));
  }
  v19 = *((_DWORD *)this + 20);
  v20 = (v19 + v14);
  if (v19 >= 1)
  {
    v21 = 0;
    do
    {
      v22 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueDecoratorProto::ByteSize(*(addr_obj::VenueDecoratorProto **)(*((_QWORD *)this + 9)+ 8 * v21), a2);
      v23 = (int)v22;
      if (v22 >= 0x80)
        v24 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22);
      else
        v24 = 1;
      v20 = (v23 + v20 + v24);
      ++v21;
    }
    while (v21 < *((int *)this + 20));
  }
  v25 = (_QWORD *)*((_QWORD *)this + 1);
  if (v25 && *v25 != v25[1])
    v20 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v20;
  *((_DWORD *)this + 24) = v20;
  return v20;
}

void addr_obj::VenueTemplateProto::MergeFrom(addr_obj::VenueTemplateProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::VenueTemplateProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4747);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::VenueTemplateProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887EFDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::VenueTemplateProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::VenueTemplateProto::IsInitialized(addr_obj::VenueTemplateProto *this)
{
  return 1;
}

uint64_t addr_obj::VenueTemplateProto::GetMetadata(addr_obj::VenueTemplateProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502E0;
}

void sub_1887EFE8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueFormatterProto::MergeFrom(addr_obj::VenueFormatterProto *this, const addr_obj::VenueFormatterProto *a2)
{
  std::string *v4;
  uint64_t v5;
  const addr_obj::VenueTemplateProto *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  addr_obj::VenueTemplateProto *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4966);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, *((_DWORD *)a2 + 6) + *((_DWORD *)this + 6));
  if (*((int *)a2 + 6) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = *(const addr_obj::VenueTemplateProto **)(*((_QWORD *)a2 + 2) + 8 * v5);
      v7 = *((_DWORD *)this + 7);
      v8 = *((int *)this + 6);
      if ((int)v8 >= v7)
      {
        if (v7 == *((_DWORD *)this + 8))
        {
          AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve((int *)this + 4, v7 + 1);
          v7 = *((_DWORD *)this + 7);
        }
        *((_DWORD *)this + 7) = v7 + 1;
        v10 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueTemplateProto>::New();
        v11 = *((_QWORD *)this + 2);
        v12 = *((int *)this + 6);
        *((_DWORD *)this + 6) = v12 + 1;
        *(_QWORD *)(v11 + 8 * v12) = v10;
      }
      else
      {
        v9 = *((_QWORD *)this + 2);
        *((_DWORD *)this + 6) = v8 + 1;
        v10 = *(addr_obj::VenueTemplateProto **)(v9 + 8 * v8);
      }
      addr_obj::VenueTemplateProto::MergeFrom(v10, v6);
      ++v5;
    }
    while (v5 < *((int *)a2 + 6));
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::VenueFormatterProto *)((char *)a2 + 8));
}

void sub_1887EFFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueFormatterProto::~VenueFormatterProto(addr_obj::VenueFormatterProto *this)
{
  *(_QWORD *)this = &off_1E1BF9BB0;
  addr_obj::VenueFormatterProto::default_instance_(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 2);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::VenueFormatterProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::VenueFormatterProto::~VenueFormatterProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::VenueFormatterProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 40) = a2;
  return this;
}

uint64_t addr_obj::VenueFormatterProto::default_instance(addr_obj::VenueFormatterProto *this)
{
  addr_obj::VenueFormatterProto *v1;

  v1 = (addr_obj::VenueFormatterProto *)addr_obj::VenueFormatterProto::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::VenueFormatterProto *)addr_obj::protobuf_AddDesc_AddressObject_2eproto(0);
  return addr_obj::VenueFormatterProto::default_instance_(v1);
}

addr_obj::VenueFormatterProto *addr_obj::VenueFormatterProto::New(addr_obj::VenueFormatterProto *this)
{
  addr_obj::VenueFormatterProto *v1;

  v1 = (addr_obj::VenueFormatterProto *)operator new();
  addr_obj::VenueFormatterProto::VenueFormatterProto(v1);
  return v1;
}

void sub_1887F00B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueFormatterProto::Clear(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  uint64_t v5;

  v1 = (uint64_t)this;
  if (*((int *)this + 6) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8 * v2);
      this = (AddrObjGoogle::protobuf::UnknownFieldSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 24));
  }
  v5 = *(_QWORD *)(v1 + 8);
  v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 8);
  *((_DWORD *)v4 + 4) = 0;
  *((_DWORD *)v4 + 9) = 0;
  if (v5)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v4);
  return this;
}

uint64_t addr_obj::VenueFormatterProto::MergePartialFromCodedStream(addr_obj::VenueFormatterProto *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  int *v6;
  void ***v7;
  char *v8;
  unint64_t TagFallback;
  int v10;
  uint64_t v11;
  uint64_t v12;
  addr_obj::VenueTemplateProto *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  AddrObjGoogle::protobuf::UnknownFieldSet *v21;
  int v22;
  BOOL v23;
  int v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t result;
  unsigned int v28;

  v6 = (int *)((char *)this + 16);
  v7 = (void ***)((char *)this + 8);
  while (1)
  {
LABEL_2:
    v8 = (char *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 2) || *v8 < 0)
    {
      TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
      *((_DWORD *)a2 + 8) = TagFallback;
    }
    else
    {
      TagFallback = *v8;
      *((_DWORD *)a2 + 8) = TagFallback;
      *((_QWORD *)a2 + 1) = v8 + 1;
    }
    if ((_DWORD)TagFallback == 10)
    {
      while (1)
      {
        v10 = *((_DWORD *)this + 7);
        v11 = *((int *)this + 6);
        if ((int)v11 >= v10)
        {
          if (v10 == *((_DWORD *)this + 8))
          {
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v10 + 1);
            v10 = *((_DWORD *)this + 7);
          }
          *((_DWORD *)this + 7) = v10 + 1;
          v13 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueTemplateProto>::New();
          v14 = *((_QWORD *)this + 2);
          v15 = *((int *)this + 6);
          *((_DWORD *)this + 6) = v15 + 1;
          *(_QWORD *)(v14 + 8 * v15) = v13;
        }
        else
        {
          v12 = *((_QWORD *)this + 2);
          *((_DWORD *)this + 6) = v11 + 1;
          v13 = *(addr_obj::VenueTemplateProto **)(v12 + 8 * v11);
        }
        v28 = 0;
        v16 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v16 >= *((_QWORD *)a2 + 2) || *v16 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v28))
            return 0;
        }
        else
        {
          v28 = *v16;
          *((_QWORD *)a2 + 1) = v16 + 1;
        }
        v17 = *((_DWORD *)a2 + 14);
        v18 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v17 + 1;
        if (v17 >= v18)
          return 0;
        v19 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v28);
        if (!addr_obj::VenueTemplateProto::MergePartialFromCodedStream(v13, a2, v20, v21)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v19);
        v22 = *((_DWORD *)a2 + 14);
        v23 = __OFSUB__(v22, 1);
        v24 = v22 - 1;
        if (v24 < 0 == v23)
          *((_DWORD *)a2 + 14) = v24;
        v25 = (_BYTE *)*((_QWORD *)a2 + 1);
        v26 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v25 >= v26 || *v25 != 10)
        {
          if (v25 == v26 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
          {
            *((_DWORD *)a2 + 8) = 0;
            result = 1;
            *((_BYTE *)a2 + 36) = 1;
            return result;
          }
          goto LABEL_2;
        }
        *((_QWORD *)a2 + 1) = v25 + 1;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      return 1;
    if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v7, a4))return 0;
  }
}

uint64_t **addr_obj::VenueFormatterProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  _QWORD *v8;

  v4 = (uint64_t)this;
  if (*((int *)this + 6) >= 1)
  {
    v5 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v5++), a2);
    while (v5 < *(int *)(v4 + 24));
  }
  v8 = *(_QWORD **)(v4 + 8);
  v7 = (uint64_t **)(v4 + 8);
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueFormatterProto::SerializeWithCachedSizesToArray(addr_obj::VenueFormatterProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v6;
  unsigned int *v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  AddrObjGoogle::protobuf::UnknownFieldSet *v9;
  _QWORD *v10;
  uint64_t **v11;
  _QWORD *v12;

  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(unsigned int **)(*((_QWORD *)this + 2) + 8 * v6);
      *(_BYTE *)a2 = 10;
      v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7[24];
      if (v8 > 0x7F)
      {
        v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v8;
        v9 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = addr_obj::VenueTemplateProto::SerializeWithCachedSizesToArray((addr_obj::VenueTemplateProto *)v7, v9, a3, a4);
      ++v6;
    }
    while (v6 < *((int *)this + 6));
  }
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  v11 = (uint64_t **)((char *)this + 8);
  v10 = v12;
  if (!v12 || *v10 == v10[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v11, a2, a3, a4);
}

uint64_t addr_obj::VenueFormatterProto::ByteSize(addr_obj::VenueFormatterProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  _QWORD *v8;

  v3 = *((unsigned int *)this + 6);
  if ((int)v3 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueTemplateProto::ByteSize(*(addr_obj::VenueTemplateProto **)(*((_QWORD *)this + 2)+ 8 * v4), a2);
      v6 = (int)v5;
      if (v5 >= 0x80)
        v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
      else
        v7 = 1;
      v3 = (v6 + v3 + v7);
      ++v4;
    }
    while (v4 < *((int *)this + 6));
  }
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8 && *v8 != v8[1])
    v3 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v3;
  *((_DWORD *)this + 10) = v3;
  return v3;
}

void addr_obj::VenueFormatterProto::MergeFrom(addr_obj::VenueFormatterProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::VenueFormatterProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 4954);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::VenueFormatterProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F05C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::VenueFormatterProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::VenueFormatterProto::IsInitialized(addr_obj::VenueFormatterProto *this)
{
  return 1;
}

uint64_t addr_obj::VenueFormatterProto::GetMetadata(addr_obj::VenueFormatterProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF502F0;
}

void sub_1887F06A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::VenueInfoProto::~VenueInfoProto(addr_obj::VenueInfoProto *this)
{
  *(_QWORD *)this = &off_1E1BF91C0;
  addr_obj::VenueInfoProto::default_instance_(this);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)this + 5);
  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>((int *)this + 4);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::VenueInfoProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::VenueInfoProto::~VenueInfoProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::VenueInfoProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 64) = a2;
  return this;
}

addr_obj::VenueInfoProto *addr_obj::VenueInfoProto::New(addr_obj::VenueInfoProto *this)
{
  addr_obj::VenueInfoProto *v1;

  v1 = (addr_obj::VenueInfoProto *)operator new();
  addr_obj::VenueInfoProto::VenueInfoProto(v1);
  return v1;
}

void sub_1887F077C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::VenueInfoProto::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  int *v6;
  int *v7;
  void ***v8;
  char *v9;
  AddrObjGoogle::protobuf::io::CodedInputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  addr_obj::VenueFormatterProto *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  AddrObjGoogle::protobuf::UnknownFieldSet *v31;
  int v32;
  BOOL v33;
  int v34;
  _BYTE *v35;
  unsigned int v36;

  v5 = this;
  v6 = (int *)(this + 16);
  v7 = (int *)(this + 40);
  v8 = (void ***)(this + 8);
  while (1)
  {
    while (1)
    {
      while (1)
      {
LABEL_2:
        v9 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v9 >= *((_QWORD *)a2 + 2) || *v9 < 0)
        {
          this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
          v10 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
          *((_DWORD *)a2 + 8) = this;
          if (!(_DWORD)this)
            return 1;
        }
        else
        {
          v10 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v9;
          *((_DWORD *)a2 + 8) = (_DWORD)v10;
          *((_QWORD *)a2 + 1) = v9 + 1;
          if (!(_DWORD)v10)
            return 1;
        }
        if (v10 >> 3 != 1)
          break;
        v11 = v10 & 7;
        if (v11 != 2)
          goto LABEL_22;
        while (1)
        {
          v12 = *(_DWORD *)(v5 + 28);
          v13 = *(int *)(v5 + 24);
          if ((int)v13 >= v12)
          {
            if (v12 == *(_DWORD *)(v5 + 32))
            {
              this = (uint64_t)AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v6, v12 + 1);
              v12 = *(_DWORD *)(v5 + 28);
            }
            *(_DWORD *)(v5 + 28) = v12 + 1;
            v15 = (std::string *)AddrObjGoogle::protobuf::internal::StringTypeHandlerBase::New((AddrObjGoogle::protobuf::internal::StringTypeHandlerBase *)this);
            v16 = *(_QWORD *)(v5 + 16);
            v17 = *(int *)(v5 + 24);
            *(_DWORD *)(v5 + 24) = v17 + 1;
            *(_QWORD *)(v16 + 8 * v17) = v15;
          }
          else
          {
            v14 = *(_QWORD *)(v5 + 16);
            *(_DWORD *)(v5 + 24) = v13 + 1;
            v15 = *(std::string **)(v14 + 8 * v13);
          }
          this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v15);
          if (!(_DWORD)this)
            return this;
          v18 = (_BYTE *)*((_QWORD *)a2 + 1);
          if ((unint64_t)v18 >= *((_QWORD *)a2 + 2))
            break;
          v19 = *v18;
          if (v19 != 10)
          {
            if (v19 != 18)
              goto LABEL_2;
            goto LABEL_26;
          }
          *((_QWORD *)a2 + 1) = v18 + 1;
        }
      }
      if (v10 >> 3 != 2)
        break;
      v11 = v10 & 7;
      if (v11 != 2)
        goto LABEL_22;
      while (1)
      {
        v20 = *(_DWORD *)(v5 + 52);
        v21 = *(int *)(v5 + 48);
        if ((int)v21 >= v20)
        {
          if (v20 == *(_DWORD *)(v5 + 56))
          {
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Reserve(v7, v20 + 1);
            v20 = *(_DWORD *)(v5 + 52);
          }
          *(_DWORD *)(v5 + 52) = v20 + 1;
          v23 = AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFormatterProto>::New();
          v24 = *(_QWORD *)(v5 + 40);
          v25 = *(int *)(v5 + 48);
          *(_DWORD *)(v5 + 48) = v25 + 1;
          *(_QWORD *)(v24 + 8 * v25) = v23;
        }
        else
        {
          v22 = *(_QWORD *)(v5 + 40);
          *(_DWORD *)(v5 + 48) = v21 + 1;
          v23 = *(addr_obj::VenueFormatterProto **)(v22 + 8 * v21);
        }
        v36 = 0;
        v26 = (char *)*((_QWORD *)a2 + 1);
        if ((unint64_t)v26 >= *((_QWORD *)a2 + 2) || *v26 < 0)
        {
          if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v36))
            return 0;
        }
        else
        {
          v36 = *v26;
          *((_QWORD *)a2 + 1) = v26 + 1;
        }
        v27 = *((_DWORD *)a2 + 14);
        v28 = *((_DWORD *)a2 + 15);
        *((_DWORD *)a2 + 14) = v27 + 1;
        if (v27 >= v28)
          return 0;
        v29 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v36);
        if (!addr_obj::VenueFormatterProto::MergePartialFromCodedStream(v23, a2, v30, v31)
          || !*((_BYTE *)a2 + 36))
        {
          return 0;
        }
        this = AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v29);
        v32 = *((_DWORD *)a2 + 14);
        v33 = __OFSUB__(v32, 1);
        v34 = v32 - 1;
        if (v34 < 0 == v33)
          *((_DWORD *)a2 + 14) = v34;
        v18 = (_BYTE *)*((_QWORD *)a2 + 1);
        v35 = (_BYTE *)*((_QWORD *)a2 + 2);
        if (v18 >= v35 || *v18 != 18)
          break;
LABEL_26:
        *((_QWORD *)a2 + 1) = v18 + 1;
      }
      if (v18 == v35 && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        this = 1;
        *((_BYTE *)a2 + 36) = 1;
        return this;
      }
    }
    v11 = v10 & 7;
LABEL_22:
    if (v11 == 4)
      return 1;
    this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v10, v8, a4);
    if ((this & 1) == 0)
      return 0;
  }
}

uint64_t **addr_obj::VenueInfoProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;

  v4 = (uint64_t)this;
  if (*((int *)this + 6) >= 1)
  {
    v5 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v5++), a2);
    while (v5 < *(int *)(v4 + 24));
  }
  if (*(int *)(v4 + 48) >= 1)
  {
    v6 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(2, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8 * v6++), a2);
    while (v6 < *(int *)(v4 + 48));
  }
  v9 = *(_QWORD **)(v4 + 8);
  v8 = (uint64_t **)(v4 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::VenueInfoProto::SerializeWithCachedSizesToArray(addr_obj::VenueInfoProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v6;
  uint64_t v7;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v8;
  _BYTE *v9;
  int v10;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v11;
  const void *v12;
  uint64_t v13;
  unsigned int *v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  AddrObjGoogle::protobuf::UnknownFieldSet *v16;
  _QWORD *v17;
  uint64_t **v18;
  _QWORD *v19;

  if (*((int *)this + 6) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v6);
      *(_BYTE *)a2 = 10;
      if (*(char *)(v7 + 23) < 0)
        v8 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v7 + 8);
      else
        v8 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v7 + 23);
      if (v8 > 0x7F)
      {
        v9 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v8, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v8;
        v9 = (char *)a2 + 2;
      }
      v10 = *(char *)(v7 + 23);
      if (v10 >= 0)
        v11 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v7;
      else
        v11 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v7;
      if (v10 >= 0)
        v12 = (const void *)*(unsigned __int8 *)(v7 + 23);
      else
        v12 = (const void *)*(unsigned int *)(v7 + 8);
      a2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v11, v12, v9, a4);
      ++v6;
    }
    while (v6 < *((int *)this + 6));
  }
  if (*((int *)this + 12) >= 1)
  {
    v13 = 0;
    do
    {
      v14 = *(unsigned int **)(*((_QWORD *)this + 5) + 8 * v13);
      *(_BYTE *)a2 = 18;
      v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v14[10];
      if (v15 > 0x7F)
      {
        v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v15, (_BYTE *)a2 + 1, a3);
      }
      else
      {
        *((_BYTE *)a2 + 1) = (_BYTE)v15;
        v16 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
      }
      a2 = addr_obj::VenueFormatterProto::SerializeWithCachedSizesToArray((addr_obj::VenueFormatterProto *)v14, v16, a3, a4);
      ++v13;
    }
    while (v13 < *((int *)this + 12));
  }
  v19 = (_QWORD *)*((_QWORD *)this + 1);
  v18 = (uint64_t **)((char *)this + 8);
  v17 = v19;
  if (!v19 || *v17 == v17[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v18, a2, a3, a4);
}

uint64_t addr_obj::VenueInfoProto::ByteSize(addr_obj::VenueInfoProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  _QWORD *v18;

  v3 = *((_DWORD *)this + 6);
  if (v3 < 1)
  {
    v5 = *((_DWORD *)this + 6);
  }
  else
  {
    v4 = 0;
    v5 = *((_DWORD *)this + 6);
    do
    {
      v6 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      if ((v7 & 0x80u) == 0)
        v10 = *(unsigned __int8 *)(v6 + 23);
      else
        v10 = v9;
      if (v10 >= 0x80)
      {
        v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v10);
        v7 = *(unsigned __int8 *)(v6 + 23);
        v9 = *(_QWORD *)(v6 + 8);
        v3 = *((_DWORD *)this + 6);
        v8 = *(_BYTE *)(v6 + 23);
      }
      else
      {
        v11 = 1;
      }
      if (v8 < 0)
        v7 = v9;
      v5 += v11 + v7;
      ++v4;
    }
    while (v4 < v3);
  }
  v12 = *((_DWORD *)this + 12);
  v13 = (v12 + v5);
  if (v12 >= 1)
  {
    v14 = 0;
    do
    {
      v15 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueFormatterProto::ByteSize(*(addr_obj::VenueFormatterProto **)(*((_QWORD *)this + 5)+ 8 * v14), a2);
      v16 = (int)v15;
      if (v15 >= 0x80)
        v17 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15);
      else
        v17 = 1;
      v13 = (v16 + v13 + v17);
      ++v14;
    }
    while (v14 < *((int *)this + 12));
  }
  v18 = (_QWORD *)*((_QWORD *)this + 1);
  if (v18 && *v18 != v18[1])
    v13 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)+ v13;
  *((_DWORD *)this + 16) = v13;
  return v13;
}

void addr_obj::VenueInfoProto::MergeFrom(addr_obj::VenueInfoProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::VenueInfoProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5232);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::VenueInfoProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F0E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::VenueInfoProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::VenueInfoProto::IsInitialized(addr_obj::VenueInfoProto *this)
{
  return 1;
}

uint64_t addr_obj::VenueInfoProto::GetMetadata(addr_obj::VenueInfoProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50300;
}

void sub_1887F0F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::V3AddressObjectProto::MergeFrom(addr_obj::V3AddressObjectProto *this, const addr_obj::V3AddressObjectProto *a2)
{
  addr_obj::V3AddressObjectProto *v3;
  std::string *v4;
  addr_obj::VenueInfoProto *v5;
  const addr_obj::VenueInfoProto *v6;
  char v7;
  std::string v8[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5456);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    *((_DWORD *)v3 + 7) |= 1u;
    v5 = (addr_obj::VenueInfoProto *)*((_QWORD *)v3 + 2);
    if (!v5)
    {
      v5 = (addr_obj::VenueInfoProto *)operator new();
      this = addr_obj::VenueInfoProto::VenueInfoProto(v5);
      *((_QWORD *)v3 + 2) = v5;
    }
    v6 = (const addr_obj::VenueInfoProto *)*((_QWORD *)a2 + 2);
    if (!v6)
      v6 = *(const addr_obj::VenueInfoProto **)(addr_obj::V3AddressObjectProto::default_instance_(this) + 16);
    addr_obj::VenueInfoProto::MergeFrom(v5, v6);
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::V3AddressObjectProto *)((char *)a2 + 8));
}

void sub_1887F0FF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

void addr_obj::V3AddressObjectProto::~V3AddressObjectProto(addr_obj::V3AddressObjectProto *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BF9E70;
  if ((addr_obj::V3AddressObjectProto *)addr_obj::V3AddressObjectProto::default_instance_(this) != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V3AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::V3AddressObjectProto::~V3AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::V3AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

addr_obj::V3AddressObjectProto *addr_obj::V3AddressObjectProto::New(addr_obj::V3AddressObjectProto *this)
{
  addr_obj::V3AddressObjectProto *v1;

  v1 = (addr_obj::V3AddressObjectProto *)operator new();
  addr_obj::V3AddressObjectProto::V3AddressObjectProto(v1);
  return v1;
}

void sub_1887F10F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V3AddressObjectProto::Clear(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t v3;

  v1 = this;
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)this + 2);
    if (this)
      this = addr_obj::VenueInfoProto::Clear(this);
  }
  v3 = *((_QWORD *)v1 + 1);
  v2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v1 + 8);
  *((_DWORD *)v2 + 5) = 0;
  if (v3)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v2);
  return this;
}

uint64_t addr_obj::V3AddressObjectProto::MergePartialFromCodedStream(addr_obj::V3AddressObjectProto *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  void ***v6;
  char *v7;
  unint64_t TagFallback;
  addr_obj::VenueInfoProto *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::UnknownFieldSet *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int v20;

  v6 = (void ***)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 7) |= 1u;
      v9 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 2);
      if (!v9)
      {
        v9 = (addr_obj::VenueInfoProto *)operator new();
        addr_obj::VenueInfoProto::VenueInfoProto(v9);
        *((_QWORD *)this + 2) = v9;
      }
      v20 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20))
          return 0;
      }
      else
      {
        v20 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v11 = *((_DWORD *)a2 + 14);
      v12 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v11 + 1;
      if (v11 >= v12)
        return 0;
      v13 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      if (!addr_obj::VenueInfoProto::MergePartialFromCodedStream((uint64_t)v9, a2, v14, v15)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      v16 = *((_DWORD *)a2 + 14);
      v17 = __OFSUB__(v16, 1);
      v18 = v16 - 1;
      if (v18 < 0 == v17)
        *((_DWORD *)a2 + 14) = v18;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v6, a4))return 0;
  }
  return 1;
}

void sub_1887F1310(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

uint64_t **addr_obj::V3AddressObjectProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;

  v4 = this;
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (uint64_t)this[2];
    if (!v5)
      v5 = *(_QWORD *)(addr_obj::V3AddressObjectProto::default_instance_((addr_obj::V3AddressObjectProto *)this) + 16);
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, v5, a2);
  }
  v8 = v4[1];
  v7 = v4 + 1;
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V3AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V3AddressObjectProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int *v6;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    if (!v6)
      v6 = *(unsigned int **)(addr_obj::V3AddressObjectProto::default_instance_(this) + 16);
    *(_BYTE *)a2 = 10;
    v7 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v6[16];
    if (v7 > 0x7F)
    {
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, (_BYTE *)a2 + 1, a3);
    }
    else
    {
      *((_BYTE *)a2 + 1) = (_BYTE)v7;
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = addr_obj::VenueInfoProto::SerializeWithCachedSizesToArray((addr_obj::VenueInfoProto *)v6, v8, a3, a4);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = (uint64_t **)((char *)this + 8);
  v9 = v11;
  if (!v11 || *v9 == v9[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v10, a2, a3, a4);
}

uint64_t addr_obj::V3AddressObjectProto::ByteSize(addr_obj::V3AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  addr_obj::VenueInfoProto *v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  _QWORD *v8;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v4 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 2);
    if (!v4)
      v4 = *(addr_obj::VenueInfoProto **)(addr_obj::V3AddressObjectProto::default_instance_(0) + 16);
    v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueInfoProto::ByteSize(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
    else
      v7 = 1;
    v3 = (v6 + v7 + 1);
  }
  else
  {
    v3 = 0;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8 && *v8 != v8[1])
    v3 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v3;
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void addr_obj::V3AddressObjectProto::MergeFrom(addr_obj::V3AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::V3AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5444);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::V3AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F157C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::V3AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::V3AddressObjectProto::IsInitialized(addr_obj::V3AddressObjectProto *this)
{
  return 1;
}

uint64_t addr_obj::V3AddressObjectProto::GetMetadata(addr_obj::V3AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50318;
}

void sub_1887F165C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::V4AddressObjectProto::MergeFrom(addr_obj::V4AddressObjectProto *this, const addr_obj::V4AddressObjectProto *a2)
{
  addr_obj::V4AddressObjectProto *v3;
  std::string *v4;
  addr_obj::VenueInfoProto *v5;
  const addr_obj::VenueInfoProto *v6;
  char v7;
  std::string v8[2];

  v3 = this;
  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5670);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if ((*((_BYTE *)a2 + 28) & 1) != 0)
  {
    *((_DWORD *)v3 + 7) |= 1u;
    v5 = (addr_obj::VenueInfoProto *)*((_QWORD *)v3 + 2);
    if (!v5)
    {
      v5 = (addr_obj::VenueInfoProto *)operator new();
      this = addr_obj::VenueInfoProto::VenueInfoProto(v5);
      *((_QWORD *)v3 + 2) = v5;
    }
    v6 = (const addr_obj::VenueInfoProto *)*((_QWORD *)a2 + 2);
    if (!v6)
      v6 = *(const addr_obj::VenueInfoProto **)(addr_obj::V4AddressObjectProto::default_instance_(this) + 16);
    addr_obj::VenueInfoProto::MergeFrom(v5, v6);
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)v3 + 1, (const addr_obj::V4AddressObjectProto *)((char *)a2 + 8));
}

void sub_1887F1748(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

void addr_obj::V4AddressObjectProto::~V4AddressObjectProto(addr_obj::V4AddressObjectProto *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BF9F20;
  if ((addr_obj::V4AddressObjectProto *)addr_obj::V4AddressObjectProto::default_instance_(this) != this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::V4AddressObjectProto *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::V4AddressObjectProto::~V4AddressObjectProto(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::V4AddressObjectProto::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

addr_obj::V4AddressObjectProto *addr_obj::V4AddressObjectProto::New(addr_obj::V4AddressObjectProto *this)
{
  addr_obj::V4AddressObjectProto *v1;

  v1 = (addr_obj::V4AddressObjectProto *)operator new();
  addr_obj::V4AddressObjectProto::V4AddressObjectProto(v1);
  return v1;
}

void sub_1887F1844(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A4A8B666);
  _Unwind_Resume(a1);
}

AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V4AddressObjectProto::Clear(AddrObjGoogle::protobuf::UnknownFieldSet *this)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  uint64_t v3;

  v1 = this;
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    this = (AddrObjGoogle::protobuf::UnknownFieldSet *)*((_QWORD *)this + 2);
    if (this)
      this = addr_obj::VenueInfoProto::Clear(this);
  }
  v3 = *((_QWORD *)v1 + 1);
  v2 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v1 + 8);
  *((_DWORD *)v2 + 5) = 0;
  if (v3)
    return AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v2);
  return this;
}

uint64_t addr_obj::V4AddressObjectProto::MergePartialFromCodedStream(addr_obj::V4AddressObjectProto *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  void ***v6;
  char *v7;
  unint64_t TagFallback;
  addr_obj::VenueInfoProto *v9;
  char *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::UnknownFieldSet *v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t result;
  unsigned int v20;

  v6 = (void ***)((char *)this + 8);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        TagFallback = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        *((_DWORD *)a2 + 8) = TagFallback;
      }
      else
      {
        TagFallback = *v7;
        *((_DWORD *)a2 + 8) = TagFallback;
        *((_QWORD *)a2 + 1) = v7 + 1;
      }
      if ((_DWORD)TagFallback != 10)
        break;
      *((_DWORD *)this + 7) |= 1u;
      v9 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 2);
      if (!v9)
      {
        v9 = (addr_obj::VenueInfoProto *)operator new();
        addr_obj::VenueInfoProto::VenueInfoProto(v9);
        *((_QWORD *)this + 2) = v9;
      }
      v20 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        if (!AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v20))
          return 0;
      }
      else
      {
        v20 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      v11 = *((_DWORD *)a2 + 14);
      v12 = *((_DWORD *)a2 + 15);
      *((_DWORD *)a2 + 14) = v11 + 1;
      if (v11 >= v12)
        return 0;
      v13 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(a2, v20);
      if (!addr_obj::VenueInfoProto::MergePartialFromCodedStream((uint64_t)v9, a2, v14, v15)
        || !*((_BYTE *)a2 + 36))
      {
        return 0;
      }
      AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)a2, v13);
      v16 = *((_DWORD *)a2 + 14);
      v17 = __OFSUB__(v16, 1);
      v18 = v16 - 1;
      if (v18 < 0 == v17)
        *((_DWORD *)a2 + 14) = v18;
      if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
        && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
      {
        *((_DWORD *)a2 + 8) = 0;
        result = 1;
        *((_BYTE *)a2 + 36) = 1;
        return result;
      }
    }
    if (!(_DWORD)TagFallback || (TagFallback & 7) == 4)
      break;
    if (!AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, (AddrObjGoogle::protobuf::io::CodedInputStream *)TagFallback, v6, a4))return 0;
  }
  return 1;
}

void sub_1887F1A60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40A7563026);
  _Unwind_Resume(a1);
}

uint64_t **addr_obj::V4AddressObjectProto::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;

  v4 = this;
  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v5 = (uint64_t)this[2];
    if (!v5)
      v5 = *(_QWORD *)(addr_obj::V4AddressObjectProto::default_instance_((addr_obj::V4AddressObjectProto *)this) + 16);
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, v5, a2);
  }
  v8 = v4[1];
  v7 = v4 + 1;
  v6 = v8;
  if (v8)
  {
    if (*v6 != v6[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v7, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::V4AddressObjectProto::SerializeWithCachedSizesToArray(addr_obj::V4AddressObjectProto *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  unsigned int *v6;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v6 = (unsigned int *)*((_QWORD *)this + 2);
    if (!v6)
      v6 = *(unsigned int **)(addr_obj::V4AddressObjectProto::default_instance_(this) + 16);
    *(_BYTE *)a2 = 10;
    v7 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v6[16];
    if (v7 > 0x7F)
    {
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v7, (_BYTE *)a2 + 1, a3);
    }
    else
    {
      *((_BYTE *)a2 + 1) = (_BYTE)v7;
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)a2 + 2);
    }
    a2 = addr_obj::VenueInfoProto::SerializeWithCachedSizesToArray((addr_obj::VenueInfoProto *)v6, v8, a3, a4);
  }
  v11 = (_QWORD *)*((_QWORD *)this + 1);
  v10 = (uint64_t **)((char *)this + 8);
  v9 = v11;
  if (!v11 || *v9 == v9[1])
    return a2;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v10, a2, a3, a4);
}

uint64_t addr_obj::V4AddressObjectProto::ByteSize(addr_obj::V4AddressObjectProto *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  uint64_t v3;
  addr_obj::VenueInfoProto *v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  _QWORD *v8;

  if ((*((_BYTE *)this + 28) & 1) != 0)
  {
    v4 = (addr_obj::VenueInfoProto *)*((_QWORD *)this + 2);
    if (!v4)
      v4 = *(addr_obj::VenueInfoProto **)(addr_obj::V4AddressObjectProto::default_instance_(0) + 16);
    v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)addr_obj::VenueInfoProto::ByteSize(v4, a2);
    v6 = (int)v5;
    if (v5 >= 0x80)
      v7 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5);
    else
      v7 = 1;
    v3 = (v6 + v7 + 1);
  }
  else
  {
    v3 = 0;
  }
  v8 = (_QWORD *)*((_QWORD *)this + 1);
  if (v8 && *v8 != v8[1])
    v3 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v3;
  *((_DWORD *)this + 6) = v3;
  return v3;
}

void addr_obj::V4AddressObjectProto::MergeFrom(addr_obj::V4AddressObjectProto *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::V4AddressObjectProto *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/AddressObject.pb.cc", 5658);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::V4AddressObjectProto::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const Message *addr_obj::V4AddressObjectProto::CopyFrom(const Message *this, const Message *a2)
{
  const Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const Message *))(*(_QWORD *)this + 32))(this);
    return (const Message *)(*(uint64_t (**)(const Message *, const Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::V4AddressObjectProto::IsInitialized(addr_obj::V4AddressObjectProto *this)
{
  return 1;
}

uint64_t addr_obj::V4AddressObjectProto::GetMetadata(addr_obj::V4AddressObjectProto *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50340;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::protobuf_AssignDesc_AddressObject_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50340, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50328;
}

void sub_1887F1DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::LocalizationProto::GetCachedSize(addr_obj::LocalizationProto *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AddrObjGoogle::protobuf::Message::GetReflection(AddrObjGoogle::protobuf::Message *this)
{
  uint64_t v1;

  (*(void (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 152))(this);
  return v1;
}

uint64_t addr_obj::FingerprintProto::GetCachedSize(addr_obj::FingerprintProto *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t addr_obj::AddressObjectProto::GetCachedSize(addr_obj::AddressObjectProto *this)
{
  return *((unsigned int *)this + 21);
}

uint64_t addr_obj::V0AddressObjectProto::GetCachedSize(addr_obj::V0AddressObjectProto *this)
{
  return *((unsigned int *)this + 22);
}

uint64_t addr_obj::V1AddressObjectProto::GetCachedSize(addr_obj::V1AddressObjectProto *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t addr_obj::VenueDecoratorProto::GetCachedSize(addr_obj::VenueDecoratorProto *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t addr_obj::VenueFieldProto::GetCachedSize(addr_obj::VenueFieldProto *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t addr_obj::VenueTemplateProto::GetCachedSize(addr_obj::VenueTemplateProto *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t addr_obj::VenueFormatterProto::GetCachedSize(addr_obj::VenueFormatterProto *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t addr_obj::VenueInfoProto::GetCachedSize(addr_obj::VenueInfoProto *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t addr_obj::V3AddressObjectProto::GetCachedSize(addr_obj::V3AddressObjectProto *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t addr_obj::V4AddressObjectProto::GetCachedSize(addr_obj::V4AddressObjectProto *this)
{
  return *((unsigned int *)this + 6);
}

addr_obj::VenueTemplateProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueTemplateProto>::New()
{
  addr_obj::VenueTemplateProto *v0;

  v0 = (addr_obj::VenueTemplateProto *)operator new();
  addr_obj::VenueTemplateProto::VenueTemplateProto(v0);
  return v0;
}

void sub_1887F1E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C40B7099809);
  _Unwind_Resume(a1);
}

addr_obj::VenueFormatterProto *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::VenueFormatterProto>::New()
{
  addr_obj::VenueFormatterProto *v0;

  v0 = (addr_obj::VenueFormatterProto *)operator new();
  addr_obj::VenueFormatterProto::VenueFormatterProto(v0);
  return v0;
}

void sub_1887F1EDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40F1948F29);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::Fingerprints::Fingerprints(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  addr_obj::Fingerprints::add(a1, a2, a3);
  return a1;
}

void sub_1887F1F34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<addr_obj::Fingerprints::Fingerprint>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void addr_obj::Fingerprints::add(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  std::string v7;
  time_t v8;
  std::string v9;
  void *__p;
  char v11;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v7 = *(std::string *)a2;
  v8 = time(0);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v9 = *(std::string *)a3;
  addr_obj::getVersion(&__p);
  v5 = a1[1];
  if (v5 >= a1[2])
  {
    v6 = std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>(a1, (__int128 *)&v7);
  }
  else
  {
    std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>((_DWORD)a1 + 16, (std::string *)a1[1], (__int128 *)&v7);
    v6 = v5 + 80;
    a1[1] = v5 + 80;
  }
  a1[1] = v6;
  if (v11 < 0)
    operator delete(__p);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1887F2050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  addr_obj::Fingerprints::Fingerprint::~Fingerprint(&__p);
  _Unwind_Resume(a1);
}

void addr_obj::Fingerprints::Fingerprint::~Fingerprint(void **this)
{
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::vector<addr_obj::Fingerprints::Fingerprint>::__push_back_slow_path<addr_obj::Fingerprints::Fingerprint const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  std::string *v11;
  std::string::value_type *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = (std::string *)&v7[80 * v3];
  v13 = &v7[80 * v6];
  std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>((_DWORD)a1 + 16, v11, a2);
  v12 = &v11[3].__r_.__value_.__s.__data_[8];
  std::vector<addr_obj::Fingerprints::Fingerprint>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer(&v10);
  return v8;
}

void sub_1887F21D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<addr_obj::Fingerprints::Fingerprint>::construct[abi:ne180100]<addr_obj::Fingerprints::Fingerprint,addr_obj::Fingerprints::Fingerprint const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 3);
  if (*((char *)a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a3 + 4), *((_QWORD *)a3 + 5));
  }
  else
  {
    v6 = a3[2];
    this[2].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = v6;
  }
  v7 = (std::string *)((char *)this + 56);
  if (*((char *)a3 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a3 + 7), *((_QWORD *)a3 + 8));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 56);
    this[3].__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 9);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1887F22A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 80);
      *(_QWORD *)(v8 - 64) = *(_QWORD *)(a3 + v7 - 64);
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v9 - 72) = 0;
      *(_QWORD *)(v9 - 64) = 0;
      *(_QWORD *)(v9 - 80) = 0;
      *(_QWORD *)(v8 - 56) = *(_QWORD *)(a3 + v7 - 56);
      v11 = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 48) = v11;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      v12 = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_OWORD *)(v8 - 24) = v12;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      *(_QWORD *)(v9 - 24) = 0;
      v7 -= 80;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v18 + 1) = a7 + v7;
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<addr_obj::Fingerprints::Fingerprint>,std::reverse_iterator<addr_obj::Fingerprints::Fingerprint*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<addr_obj::Fingerprints::Fingerprint>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<addr_obj::Fingerprints::Fingerprint>::destroy[abi:ne180100](v4, i - 80);
  }
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
  std::__throw_out_of_range[abi:ne180100]("basic_string");
}

AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto(addr_obj::geo3 *this)
{
  AddrObjGoogle::protobuf::DescriptorPool *v1;
  pthread_mutex_t ***v2;
  uint64_t FileByName;
  uint64_t v4;
  std::string *v5;
  addr_obj::geo3::StructuredAddress *v6;
  const AddrObjGoogle::protobuf::Descriptor *v7;
  AddrObjGoogle::protobuf::DescriptorPool *v8;
  AddrObjGoogle::protobuf::MessageFactory *v9;
  AddrObjGoogle::protobuf::MessageFactory *v10;
  addr_obj::geo3::StructuredAddress_SubPremise *v11;
  const AddrObjGoogle::protobuf::Descriptor *v12;
  AddrObjGoogle::protobuf::DescriptorPool *v13;
  AddrObjGoogle::protobuf::MessageFactory *v14;
  AddrObjGoogle::protobuf::MessageFactory *v15;
  addr_obj::geo3::Address *v16;
  const AddrObjGoogle::protobuf::Descriptor *v17;
  AddrObjGoogle::protobuf::DescriptorPool *v18;
  AddrObjGoogle::protobuf::MessageFactory *v19;
  AddrObjGoogle::protobuf::MessageFactory *v20;
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *result;
  char v22;
  std::string __p[2];

  v1 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(this);
  v2 = (pthread_mutex_t ***)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v1);
  std::string::basic_string[abi:ne180100]<0>(__p, "geo3-slim.proto");
  FileByName = AddrObjGoogle::protobuf::DescriptorPool::FindFileByName(v2, (char *)__p);
  v4 = FileByName;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v4)
    {
LABEL_5:
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 44);
      v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: file != NULL: ");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v22, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
  }
  else if (!FileByName)
  {
    goto LABEL_5;
  }
  qword_1EDF50348 = *(_QWORD *)(v4 + 80);
  v6 = (addr_obj::geo3::StructuredAddress *)operator new();
  v7 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50348;
  v8 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::geo3::StructuredAddress::default_instance_(v6);
  v9 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v8);
  v10 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v9);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v6, v7, v8, dword_189C5D034, 244, 8, -1, v9, v10, 248);
  qword_1EDF50350 = (uint64_t)v6;
  qword_1EDF50358 = *(_QWORD *)(qword_1EDF50348 + 64);
  v11 = (addr_obj::geo3::StructuredAddress_SubPremise *)operator new();
  v12 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50358;
  v13 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(v11);
  v14 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v13);
  v15 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v14);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v11, v12, v13, (const int *)&unk_189C5D088, 32, 8, -1, v14, v15, 40);
  qword_1EDF50360 = (uint64_t)v11;
  qword_1EDF50368 = *(_QWORD *)(qword_1EDF50358 + 80);
  qword_1EDF50370 = *(_QWORD *)(v4 + 80) + 120;
  v16 = (addr_obj::geo3::Address *)operator new();
  v17 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50370;
  v18 = (AddrObjGoogle::protobuf::DescriptorPool *)addr_obj::geo3::Address::default_instance_(v16);
  v19 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v18);
  v20 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v19);
  result = AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v16, v17, v18, dword_189C5D090, 56, 8, -1, v19, v20, 64);
  qword_1EDF50378 = (uint64_t)v16;
  qword_1EDF50380 = *(_QWORD *)(qword_1EDF50370 + 80);
  return result;
}

void sub_1887F26E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::protobuf_ShutdownFile_geo3_2dslim_2eproto(addr_obj::geo3 *this)
{
  uint64_t v1;
  addr_obj::geo3::StructuredAddress_SubPremise *v2;
  uint64_t v3;
  addr_obj::geo3::Address *v4;
  uint64_t v5;
  uint64_t result;

  v1 = addr_obj::geo3::StructuredAddress::default_instance_(this);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v2 = (addr_obj::geo3::StructuredAddress_SubPremise *)qword_1EDF50350;
  if (qword_1EDF50350)
    v2 = (addr_obj::geo3::StructuredAddress_SubPremise *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50350
                                                                                            + 8))(qword_1EDF50350);
  v3 = addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(v2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (addr_obj::geo3::Address *)qword_1EDF50360;
  if (qword_1EDF50360)
    v4 = (addr_obj::geo3::Address *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50360 + 8))(qword_1EDF50360);
  v5 = addr_obj::geo3::Address::default_instance_(v4);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = qword_1EDF50378;
  if (qword_1EDF50378)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF50378 + 8))(qword_1EDF50378);
  return result;
}

void sub_1887F27D8(addr_obj::geo3::StructuredAddress *a1)
{
  uint64_t v1;
  const std::string::value_type **v2;
  const AddrObjGoogle::protobuf::Descriptor *v3;
  const AddrObjGoogle::protobuf::Message *v4;
  const std::string::value_type **v5;
  addr_obj::geo3::StructuredAddress_SubPremise *v6;
  const AddrObjGoogle::protobuf::Descriptor *v7;
  const AddrObjGoogle::protobuf::Message *v8;
  const std::string::value_type **v9;
  addr_obj::geo3::Address *v10;
  const AddrObjGoogle::protobuf::Descriptor *v11;
  const AddrObjGoogle::protobuf::Message *v12;
  _QWORD v13[2];
  char v14;

  v1 = qword_1EDF50390;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v13[0] = &off_1E1BF6040;
    v13[1] = addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto;
    v14 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50390, (uint64_t)v13);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v13);
  }
  v2 = (const std::string::value_type **)qword_1EDF50348;
  v3 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::geo3::StructuredAddress::default_instance(a1);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v2, v3, v4);
  v5 = (const std::string::value_type **)qword_1EDF50358;
  v7 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::geo3::StructuredAddress_SubPremise::default_instance(v6);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v5, v7, v8);
  v9 = (const std::string::value_type **)qword_1EDF50370;
  v11 = (const AddrObjGoogle::protobuf::Descriptor *)addr_obj::geo3::Address::default_instance(v10);
  AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(v9, v11, v12);
}

void sub_1887F2888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise_SubPremiseType_descriptor(addr_obj::geo3 *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50390;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50390, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50368;
}

void sub_1887F290C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::StructuredAddress_SubPremise::MergeFrom(addr_obj::geo3::StructuredAddress_SubPremise *this, const addr_obj::geo3::StructuredAddress_SubPremise *a2)
{
  std::string *v4;
  int v5;
  int v6;
  const std::string *v7;
  uint64_t *v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if (a2 == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 476);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v10, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  LOBYTE(v5) = *((_BYTE *)a2 + 32);
  if ((_BYTE)v5)
  {
    if ((*((_BYTE *)a2 + 32) & 1) != 0)
    {
      v6 = *((_DWORD *)a2 + 6);
      *((_DWORD *)this + 8) |= 1u;
      *((_DWORD *)this + 6) = v6;
      v5 = *((_DWORD *)a2 + 8);
    }
    if ((v5 & 2) != 0)
    {
      v7 = (const std::string *)*((_QWORD *)a2 + 2);
      *((_DWORD *)this + 8) |= 2u;
      v8 = (uint64_t *)*((_QWORD *)this + 2);
      if (v8 == AddrObjGoogle::protobuf::internal::kEmptyString(this))
      {
        v9 = (std::string *)operator new();
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 2) = v9;
      }
      else
      {
        v9 = (std::string *)*((_QWORD *)this + 2);
      }
      std::string::operator=(v9, v7);
    }
  }
  AddrObjGoogle::protobuf::UnknownFieldSet::MergeFrom((void ***)this + 1, (const addr_obj::geo3::StructuredAddress_SubPremise *)((char *)a2 + 8));
}

void sub_1887F2A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void addr_obj::geo3::StructuredAddress_SubPremise::~StructuredAddress_SubPremise(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  *(_QWORD *)this = &off_1E1BFA080;
  addr_obj::geo3::StructuredAddress_SubPremise::SharedDtor(this);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((addr_obj::geo3::StructuredAddress_SubPremise *)((char *)this + 8));
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  addr_obj::geo3::StructuredAddress_SubPremise::~StructuredAddress_SubPremise(this);
  JUMPOUT(0x18D76437CLL);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::SharedDtor(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t *)*((_QWORD *)this + 2);
  v3 = AddrObjGoogle::protobuf::internal::kEmptyString(this);
  if (v2 != v3)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
    {
      if (*(char *)(v4 + 23) < 0)
        operator delete(*(void **)v4);
      v3 = (uint64_t *)MEMORY[0x18D76437C](v4, 0x1012C40EC159624);
    }
  }
  return addr_obj::geo3::StructuredAddress_SubPremise::default_instance_((addr_obj::geo3::StructuredAddress_SubPremise *)v3);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::default_instance(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  addr_obj::geo3::StructuredAddress_SubPremise *v1;

  v1 = (addr_obj::geo3::StructuredAddress_SubPremise *)addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(this);
  if (!v1)
    v1 = (addr_obj::geo3::StructuredAddress_SubPremise *)addr_obj::geo3::protobuf_AddDesc_geo3_2dslim_2eproto(0);
  return addr_obj::geo3::StructuredAddress_SubPremise::default_instance_(v1);
}

addr_obj::geo3::StructuredAddress_SubPremise *addr_obj::geo3::StructuredAddress_SubPremise::New(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  addr_obj::geo3::StructuredAddress_SubPremise *v1;

  v1 = (addr_obj::geo3::StructuredAddress_SubPremise *)operator new();
  addr_obj::geo3::StructuredAddress_SubPremise::StructuredAddress_SubPremise(v1);
  return v1;
}

void sub_1887F2B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

uint64_t *addr_obj::geo3::StructuredAddress_SubPremise::Clear(uint64_t *this)
{
  uint64_t *v1;
  char v2;
  uint64_t *v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::UnknownFieldSet *v5;
  uint64_t v6;

  v1 = this;
  v2 = *((_BYTE *)this + 32);
  if (v2)
  {
    *((_DWORD *)this + 6) = 0;
    if ((v2 & 2) != 0)
    {
      v3 = (uint64_t *)this[2];
      this = AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this);
      if (v3 != this)
      {
        v4 = v1[2];
        if (*(char *)(v4 + 23) < 0)
        {
          **(_BYTE **)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
        }
        else
        {
          *(_BYTE *)v4 = 0;
          *(_BYTE *)(v4 + 23) = 0;
        }
      }
    }
  }
  v6 = v1[1];
  v5 = (AddrObjGoogle::protobuf::UnknownFieldSet *)(v1 + 1);
  *((_DWORD *)v5 + 6) = 0;
  if (v6)
    return (uint64_t *)AddrObjGoogle::protobuf::UnknownFieldSet::ClearFallback(v5);
  return this;
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::MergePartialFromCodedStream(uint64_t this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, uint64_t a3, AddrObjGoogle::protobuf::UnknownFieldSet *a4)
{
  uint64_t v5;
  void ***v6;
  char *v7;
  AddrObjGoogle::protobuf::io::CodedInputStream *v8;
  int v9;
  char *v10;
  unsigned int v11;
  _BYTE *v12;
  uint64_t *v13;
  std::string *v14;
  unsigned int v15;

  v5 = this;
  v6 = (void ***)(this + 8);
  while (1)
  {
    while (1)
    {
      v7 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 2) || *v7 < 0)
      {
        this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadTagFallback(a2);
        v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)this;
        *((_DWORD *)a2 + 8) = this;
        if (!(_DWORD)this)
          return 1;
      }
      else
      {
        v8 = (AddrObjGoogle::protobuf::io::CodedInputStream *)*v7;
        *((_DWORD *)a2 + 8) = (_DWORD)v8;
        *((_QWORD *)a2 + 1) = v7 + 1;
        if (!(_DWORD)v8)
          return 1;
      }
      if (v8 >> 3 != 1)
        break;
      v9 = v8 & 7;
      if ((v8 & 7) != 0)
        goto LABEL_16;
      v15 = 0;
      v10 = (char *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v10 >= *((_QWORD *)a2 + 2) || *v10 < 0)
      {
        this = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(a2, &v15);
        if (!(_DWORD)this)
          return this;
        v11 = v15;
      }
      else
      {
        v11 = *v10;
        *((_QWORD *)a2 + 1) = v10 + 1;
      }
      if (v11 > 3)
      {
        AddrObjGoogle::protobuf::UnknownFieldSet::AddVarint(v6, 1, (int)v11);
      }
      else
      {
        *(_DWORD *)(v5 + 32) |= 1u;
        *(_DWORD *)(v5 + 24) = v11;
      }
      v12 = (_BYTE *)*((_QWORD *)a2 + 1);
      if ((unint64_t)v12 < *((_QWORD *)a2 + 2) && *v12 == 18)
      {
        *((_QWORD *)a2 + 1) = v12 + 1;
LABEL_27:
        *(_DWORD *)(v5 + 32) |= 2u;
        v13 = *(uint64_t **)(v5 + 16);
        if (v13 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
        {
          v14 = (std::string *)operator new();
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          *(_QWORD *)(v5 + 16) = v14;
        }
        else
        {
          v14 = *(std::string **)(v5 + 16);
        }
        this = AddrObjGoogle::protobuf::internal::WireFormatLite::ReadString((uint64_t)a2, v14);
        if (!(_DWORD)this)
          return this;
        if (*((_QWORD *)a2 + 1) == *((_QWORD *)a2 + 2)
          && (*((_DWORD *)a2 + 11) || *((_DWORD *)a2 + 6) == *((_DWORD *)a2 + 10)))
        {
          *((_DWORD *)a2 + 8) = 0;
          this = 1;
          *((_BYTE *)a2 + 36) = 1;
          return this;
        }
      }
    }
    if (v8 >> 3 == 2)
    {
      v9 = v8 & 7;
      if (v9 == 2)
        goto LABEL_27;
    }
    else
    {
      v9 = v8 & 7;
    }
LABEL_16:
    if (v9 == 4)
      return 1;
    this = AddrObjGoogle::protobuf::internal::WireFormat::SkipField(a2, v8, v6, a4);
    if ((this & 1) == 0)
      return 0;
  }
}

uint64_t **addr_obj::geo3::StructuredAddress_SubPremise::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t **v8;
  _QWORD *v9;

  v5 = (uint64_t)this;
  v6 = *((_DWORD *)this + 8);
  if ((v6 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)1, *((_DWORD *)this + 6), a2, a4);
    v6 = *(_DWORD *)(v5 + 32);
  }
  if ((v6 & 2) != 0)
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 16), a2);
  v9 = *(_QWORD **)(v5 + 8);
  v8 = (uint64_t **)(v5 + 8);
  v7 = v9;
  if (v9)
  {
    if (*v7 != v7[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v8, a2, a3);
  }
  return this;
}

const AddrObjGoogle::protobuf::UnknownFieldSet *addr_obj::geo3::StructuredAddress_SubPremise::SerializeWithCachedSizesToArray(addr_obj::geo3::StructuredAddress_SubPremise *this, AddrObjGoogle::protobuf::UnknownFieldSet *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  AddrObjGoogle::protobuf::UnknownFieldSet *v4;
  unint64_t v6;
  _BYTE *v7;
  AddrObjGoogle::protobuf::UnknownFieldSet *v8;
  uint64_t v9;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v10;
  _BYTE *v11;
  int v12;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v13;
  const void *v14;
  _QWORD *v15;
  uint64_t **v16;
  _QWORD *v17;

  v4 = a2;
  if ((*((_BYTE *)this + 32) & 1) != 0)
  {
    v6 = *((int *)this + 6);
    *(_BYTE *)a2 = 8;
    v7 = (char *)a2 + 1;
    if ((v6 & 0x80000000) != 0)
    {
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint64ToArray(v6, v7, a3);
    }
    else
    {
      if (v6 <= 0x7F)
      {
        *((_BYTE *)v4 + 1) = v6;
        v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)((char *)v4 + 2);
        goto LABEL_8;
      }
      v8 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray((AddrObjGoogle::protobuf::io::CodedOutputStream *)v6, v7, a3);
    }
    v4 = v8;
  }
LABEL_8:
  if ((*((_BYTE *)this + 32) & 2) != 0)
  {
    v9 = *((_QWORD *)this + 2);
    *(_BYTE *)v4 = 18;
    if (*(char *)(v9 + 23) < 0)
      v10 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)(v9 + 8);
    else
      v10 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*(unsigned __int8 *)(v9 + 23);
    if (v10 > 0x7F)
    {
      v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::WriteVarint32FallbackToArray(v10, (_BYTE *)v4 + 1, a3);
    }
    else
    {
      *((_BYTE *)v4 + 1) = (_BYTE)v10;
      v11 = (char *)v4 + 2;
    }
    v12 = *(char *)(v9 + 23);
    if (v12 >= 0)
      v13 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)v9;
    else
      v13 = *(AddrObjGoogle::protobuf::io::CodedOutputStream **)v9;
    if (v12 >= 0)
      v14 = (const void *)*(unsigned __int8 *)(v9 + 23);
    else
      v14 = (const void *)*(unsigned int *)(v9 + 8);
    v4 = (AddrObjGoogle::protobuf::UnknownFieldSet *)AddrObjGoogle::protobuf::io::CodedOutputStream::WriteRawToArray(v13, v14, v11, a4);
  }
  v17 = (_QWORD *)*((_QWORD *)this + 1);
  v16 = (uint64_t **)((char *)this + 8);
  v15 = v17;
  if (!v17 || *v15 == v15[1])
    return v4;
  else
    return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(v16, v4, a3, a4);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::ByteSize(addr_obj::geo3::StructuredAddress_SubPremise *this, const AddrObjGoogle::protobuf::UnknownFieldSet *a2)
{
  char v3;
  uint64_t v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;

  v3 = *((_BYTE *)this + 32);
  if (v3)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
    {
      v5 = (AddrObjGoogle::protobuf::io::CodedOutputStream *)*((unsigned int *)this + 6);
      if ((v5 & 0x80000000) != 0)
      {
        v4 = 11;
        if ((v3 & 2) == 0)
          goto LABEL_22;
      }
      else if (v5 >= 0x80)
      {
        v4 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5) + 1;
        if ((*((_DWORD *)this + 8) & 2) == 0)
          goto LABEL_22;
      }
      else
      {
        v4 = 2;
        if ((v3 & 2) == 0)
          goto LABEL_22;
      }
    }
    else
    {
      v4 = 0;
      if ((*((_BYTE *)this + 32) & 2) == 0)
        goto LABEL_22;
    }
    v6 = *((_QWORD *)this + 2);
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = v7;
    v9 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v6 + 23);
    else
      v10 = v9;
    if (v10 >= 0x80)
    {
      v11 = AddrObjGoogle::protobuf::io::CodedOutputStream::VarintSize32Fallback((AddrObjGoogle::protobuf::io::CodedOutputStream *)v10);
      v7 = *(unsigned __int8 *)(v6 + 23);
      v9 = *(_QWORD *)(v6 + 8);
      v8 = *(_BYTE *)(v6 + 23);
    }
    else
    {
      v11 = 1;
    }
    if (v8 < 0)
      v7 = v9;
    v4 = (v4 + v11 + v7 + 1);
  }
  else
  {
    v4 = 0;
  }
LABEL_22:
  v12 = (_QWORD *)*((_QWORD *)this + 1);
  if (v12 && *v12 != v12[1])
    v4 = AddrObjGoogle::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((uint64_t **)this + 1, a2)
       + v4;
  *((_DWORD *)this + 7) = v4;
  return v4;
}

void addr_obj::geo3::StructuredAddress_SubPremise::MergeFrom(addr_obj::geo3::StructuredAddress_SubPremise *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::geo3::StructuredAddress_SubPremise *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 461);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::geo3::StructuredAddress_SubPremise::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F30E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const AddrObjGoogle::protobuf::Message *addr_obj::geo3::StructuredAddress_SubPremise::CopyFrom(const AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  const AddrObjGoogle::protobuf::Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 32))(this);
    return (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *, const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

BOOL addr_obj::geo3::StructuredAddress_SubPremise::IsInitialized(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  return (~*((_DWORD *)this + 8) & 3) == 0;
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::GetMetadata(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50390;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50390, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50358;
}

void sub_1887F31CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

addr_obj::geo3::StructuredAddress *addr_obj::geo3::StructuredAddress::StructuredAddress(addr_obj::geo3::StructuredAddress *this, const addr_obj::geo3::StructuredAddress *a2)
{
  *(_QWORD *)this = &off_1E1BF9FD0;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 44) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  addr_obj::geo3::StructuredAddress::SharedCtor(this);
  addr_obj::geo3::StructuredAddress::MergeFrom(this, a2);
  return this;
}

void sub_1887F3284(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::StructuredAddress::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 240) = a2;
  return this;
}

addr_obj::geo3::StructuredAddress *addr_obj::geo3::StructuredAddress::New(addr_obj::geo3::StructuredAddress *this)
{
  addr_obj::geo3::StructuredAddress *v1;

  v1 = (addr_obj::geo3::StructuredAddress *)operator new();
  addr_obj::geo3::StructuredAddress::StructuredAddress(v1);
  return v1;
}

void sub_1887F3330(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10B1C403F20F32DLL);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<long long,(AddrObjGoogle::protobuf::internal::WireFormatLite::FieldType)3>(AddrObjGoogle::protobuf::io::CodedInputStream *this, _DWORD *a2)
{
  char *v4;
  unsigned int v5;
  uint64_t result;
  int v7;
  char *v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v12 = 0;
  v4 = (char *)*((_QWORD *)this + 1);
  if ((unint64_t)v4 >= *((_QWORD *)this + 2) || *v4 < 0)
  {
    result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v12);
    if (!(_DWORD)result)
      return result;
    v5 = v12;
  }
  else
  {
    v5 = *v4;
    v12 = v5;
    *((_QWORD *)this + 1) = v4 + 1;
  }
  v7 = AddrObjGoogle::protobuf::io::CodedInputStream::PushLimit(this, v5);
  if ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit(this) >= 1)
  {
    do
    {
      v13 = 0;
      v8 = (char *)*((_QWORD *)this + 1);
      if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 < 0)
      {
        result = AddrObjGoogle::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, &v13);
        if (!(_DWORD)result)
          return result;
        v9 = v13;
      }
      else
      {
        v9 = *v8;
        *((_QWORD *)this + 1) = v8 + 1;
      }
      v10 = a2[2];
      if (v10 == a2[3])
      {
        AddrObjGoogle::protobuf::RepeatedField<long long>::Reserve(a2, v10 + 1);
        v10 = a2[2];
      }
      v11 = *(_QWORD *)a2;
      a2[2] = v10 + 1;
      *(_QWORD *)(v11 + 8 * v10) = v9;
    }
    while ((int)AddrObjGoogle::protobuf::io::CodedInputStream::BytesUntilLimit(this) > 0);
  }
  AddrObjGoogle::protobuf::io::CodedInputStream::PopLimit((uint64_t)this, v7);
  return 1;
}

uint64_t **addr_obj::geo3::StructuredAddress::SerializeWithCachedSizes(uint64_t **this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t **v13;
  _QWORD *v14;

  v5 = (uint64_t)this;
  v6 = *((_DWORD *)this + 61);
  if ((v6 & 1) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(1, (uint64_t)this[2], a2);
    v6 = *(_DWORD *)(v5 + 244);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_41;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(2, *(_QWORD *)(v5 + 24), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_42;
  }
LABEL_41:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(3, *(_QWORD *)(v5 + 32), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_43;
  }
LABEL_42:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(4, *(_QWORD *)(v5 + 40), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_44;
  }
LABEL_43:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(5, *(_QWORD *)(v5 + 48), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_45;
  }
LABEL_44:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(6, *(_QWORD *)(v5 + 56), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_46;
  }
LABEL_45:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(7, *(_QWORD *)(v5 + 64), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_47;
  }
LABEL_46:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(8, *(_QWORD *)(v5 + 72), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
    goto LABEL_48;
  }
LABEL_47:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(9, *(_QWORD *)(v5 + 80), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0)
      goto LABEL_12;
    goto LABEL_49;
  }
LABEL_48:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(10, *(_QWORD *)(v5 + 88), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0)
      goto LABEL_13;
    goto LABEL_50;
  }
LABEL_49:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(11, *(_QWORD *)(v5 + 96), a2);
  v6 = *(_DWORD *)(v5 + 244);
  if ((v6 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_50:
  this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(12, *(_QWORD *)(v5 + 104), a2);
  if ((*(_DWORD *)(v5 + 244) & 0x1000) != 0)
LABEL_14:
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(13, *(_QWORD *)(v5 + 112), a2);
LABEL_15:
  if (*(int *)(v5 + 128) >= 1)
  {
    v7 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(14, *(_QWORD *)(*(_QWORD *)(v5 + 120) + 8 * v7++), a2);
    while (v7 < *(int *)(v5 + 128));
  }
  v8 = *(_DWORD *)(v5 + 244);
  if ((v8 & 0x4000) != 0)
  {
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(15, *(_QWORD *)(v5 + 144), a2);
    v8 = *(_DWORD *)(v5 + 244);
  }
  if ((v8 & 0x8000) != 0)
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(16, *(_QWORD *)(v5 + 152), a2);
  if (*(int *)(v5 + 168) >= 1)
  {
    v9 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(17, *(_QWORD *)(*(_QWORD *)(v5 + 160) + 8 * v9++), a2);
    while (v9 < *(int *)(v5 + 168));
  }
  if ((*(_BYTE *)(v5 + 246) & 2) != 0)
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(18, *(_QWORD *)(v5 + 184), a2);
  if (*(int *)(v5 + 200) >= 1)
  {
    v10 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(19, *(_QWORD *)(*(_QWORD *)(v5 + 192) + 8 * v10++), a2);
    while (v10 < *(int *)(v5 + 200));
  }
  if ((*(_BYTE *)(v5 + 246) & 8) != 0)
    this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(20, *(_QWORD *)(v5 + 216), a2);
  if (*(int *)(v5 + 232) >= 1)
  {
    v11 = 0;
    do
      this = (uint64_t **)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt64((AddrObjGoogle::protobuf::internal::WireFormatLite *)0x64, *(_QWORD *)(*(_QWORD *)(v5 + 224) + 8 * v11++), a2, a4);
    while (v11 < *(int *)(v5 + 232));
  }
  v14 = *(_QWORD **)(v5 + 8);
  v13 = (uint64_t **)(v5 + 8);
  v12 = v14;
  if (v14)
  {
    if (*v12 != v12[1])
      return AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v13, a2, a3);
  }
  return this;
}

void addr_obj::geo3::StructuredAddress::MergeFrom(addr_obj::geo3::StructuredAddress *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::geo3::StructuredAddress *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 1952);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::geo3::StructuredAddress::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F3800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const AddrObjGoogle::protobuf::Message *addr_obj::geo3::StructuredAddress::CopyFrom(const AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  const AddrObjGoogle::protobuf::Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 32))(this);
    return (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *, const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::geo3::StructuredAddress::GetMetadata(addr_obj::geo3::StructuredAddress *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50390;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50390, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50348;
}

void sub_1887F38D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

addr_obj::geo3::Address *addr_obj::geo3::Address::Address(addr_obj::geo3::Address *this, const addr_obj::geo3::Address *a2)
{
  *(_QWORD *)this = &off_1E1BFA130;
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)this + 1);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  addr_obj::geo3::Address::MergeFrom(this, a2);
  return this;
}

void sub_1887F3954(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;
  AddrObjGoogle::protobuf::UnknownFieldSet *v2;
  int *v3;

  AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v3);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet(v2);
  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::Address::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 52) = a2;
  return this;
}

addr_obj::geo3::Address *addr_obj::geo3::Address::New(addr_obj::geo3::Address *this)
{
  addr_obj::geo3::Address *v1;

  v1 = (addr_obj::geo3::Address *)operator new();
  addr_obj::geo3::Address::Address(v1);
  return v1;
}

void sub_1887F39CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40C067BF1BLL);
  _Unwind_Resume(a1);
}

int *addr_obj::geo3::Address::SerializeWithCachedSizes(int *this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2, AddrObjGoogle::protobuf::io::CodedOutputStream *a3, AddrObjGoogle::protobuf::io::CodedOutputStream *a4)
{
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;

  v5 = this;
  if (this[6] >= 1)
  {
    v6 = 0;
    do
      this = (int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteString(11, *(_QWORD *)(*((_QWORD *)v5 + 2) + 8 * v6++), a2);
    while (v6 < v5[6]);
  }
  v7 = v5[14];
  if ((v7 & 2) != 0)
  {
    v8 = *((_QWORD *)v5 + 5);
    if (!v8)
      v8 = *(_QWORD *)(addr_obj::geo3::Address::default_instance_((addr_obj::geo3::Address *)this) + 40);
    this = (int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(15, v8, a2);
    v7 = v5[14];
  }
  if ((v7 & 4) != 0)
    this = (int *)AddrObjGoogle::protobuf::internal::WireFormatLite::WriteInt32((AddrObjGoogle::protobuf::internal::WireFormatLite *)0x10, v5[12], a2, a4);
  v11 = (_QWORD *)*((_QWORD *)v5 + 1);
  v10 = (uint64_t **)(v5 + 2);
  v9 = v11;
  if (v11)
  {
    if (*v9 != v9[1])
      return (int *)AddrObjGoogle::protobuf::internal::WireFormat::SerializeUnknownFields(v10, a2, a3);
  }
  return this;
}

void addr_obj::geo3::Address::MergeFrom(addr_obj::geo3::Address *this, const AddrObjGoogle::protobuf::Message *lpsrc)
{
  std::string *v4;
  const addr_obj::geo3::Address *v5;
  AddrObjGoogle::protobuf::Message *v6;
  char v7;
  std::string v8[2];

  if (lpsrc == this)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/src/geo3-slim.pb.cc", 2437);
    v4 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v7, (AddrObjGoogle::protobuf::internal::LogMessage *)v4);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (v5)
    addr_obj::geo3::Address::MergeFrom(this, v5);
  else
    AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(lpsrc, this, v6);
}

void sub_1887F3B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

const AddrObjGoogle::protobuf::Message *addr_obj::geo3::Address::CopyFrom(const AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  const AddrObjGoogle::protobuf::Message *v3;

  if (a2 != this)
  {
    v3 = this;
    (*(void (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 32))(this);
    return (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *, const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)v3 + 112))(v3, a2);
  }
  return this;
}

uint64_t addr_obj::geo3::Address::GetMetadata(addr_obj::geo3::Address *this)
{
  uint64_t v1;
  _QWORD v3[2];
  char v4;

  v1 = qword_1EDF50390;
  __dmb(0xBu);
  if (v1 != 2)
  {
    v3[0] = &off_1E1BF6040;
    v3[1] = addr_obj::geo3::protobuf_AssignDesc_geo3_2dslim_2eproto;
    v4 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50390, (uint64_t)v3);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v3);
  }
  return qword_1EDF50370;
}

void sub_1887F3C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

uint64_t addr_obj::geo3::StructuredAddress_SubPremise::GetCachedSize(addr_obj::geo3::StructuredAddress_SubPremise *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t addr_obj::geo3::StructuredAddress::GetCachedSize(addr_obj::geo3::StructuredAddress *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t addr_obj::geo3::Address::GetCachedSize(addr_obj::geo3::Address *this)
{
  return *((unsigned int *)this + 13);
}

addr_obj::geo3::StructuredAddress_SubPremise *AddrObjGoogle::protobuf::internal::GenericTypeHandler<addr_obj::geo3::StructuredAddress_SubPremise>::New()
{
  addr_obj::geo3::StructuredAddress_SubPremise *v0;

  v0 = (addr_obj::geo3::StructuredAddress_SubPremise *)operator new();
  addr_obj::geo3::StructuredAddress_SubPremise::StructuredAddress_SubPremise(v0);
  return v0;
}

void sub_1887F3C9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10A1C40BEA49330);
  _Unwind_Resume(a1);
}

_DWORD *AddrObjGoogle::protobuf::RepeatedField<long long>::Reserve(_DWORD *result, int a2)
{
  int v2;
  _DWORD *v3;
  const void *v4;
  int v5;

  v2 = result[3];
  if (v2 < a2)
  {
    v3 = result;
    v4 = *(const void **)result;
    v5 = 2 * v2;
    if (v5 <= a2)
      v5 = a2;
    if (v5 <= 4)
      v5 = 4;
    result[3] = v5;
    result = (_DWORD *)operator new[]();
    *(_QWORD *)v3 = result;
    if (v4)
    {
      memcpy(result, v4, 8 * (int)v3[2]);
      JUMPOUT(0x18D764364);
    }
  }
  return result;
}

uint64_t AddrObjGoogle::protobuf::DynamicMessage::DynamicMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)a1 = &off_1E1BF5328;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  v3 = *(_QWORD *)(a2 + 32);
  AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet((_QWORD *)(a1 + *(int *)(a2 + 8)));
  v4 = *(int *)(*(_QWORD *)(a1 + 8) + 12);
  if ((_DWORD)v4 != -1)
    AddrObjGoogle::protobuf::internal::ExtensionSet::ExtensionSet((_QWORD *)(a1 + v4));
  if (*(int *)(v3 + 44) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v3 + 48);
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(int *)(*(_QWORD *)(v8 + 40) + 4 * v6);
      v10 = a1 + v9;
      switch(*(_DWORD *)(v7 + v5 + 44))
      {
        case 1:
          v15 = v7 + v5;
          if (*(_DWORD *)(v15 + 48) == 3)
            goto LABEL_21;
          *(_QWORD *)v10 = *(_QWORD *)(v15 + 112);
          break;
        case 2:
          v17 = v7 + v5;
          if (*(_DWORD *)(v17 + 48) == 3)
            goto LABEL_21;
          *(_DWORD *)v10 = *(_DWORD *)(v17 + 112);
          break;
        case 3:
        case 4:
        case 6:
        case 0x10:
        case 0x12:
          v13 = v7 + v5;
          if (*(_DWORD *)(v13 + 48) == 3)
            goto LABEL_21;
          goto LABEL_9;
        case 5:
        case 7:
        case 0xD:
        case 0xF:
        case 0x11:
          v11 = v7 + v5;
          if (*(_DWORD *)(v11 + 48) == 3)
            goto LABEL_21;
          v12 = *(_DWORD *)(v11 + 112);
          goto LABEL_15;
        case 8:
          v18 = v7 + v5;
          if (*(_DWORD *)(v18 + 48) == 3)
            goto LABEL_21;
          *(_BYTE *)v10 = *(_BYTE *)(v18 + 112);
          break;
        case 9:
        case 0xC:
          if (*(_DWORD *)(v7 + v5 + 48) == 3)
            goto LABEL_26;
          v19 = *(_QWORD *)(v8 + 56);
          if (v19 == a1 || v19 == 0)
          {
            v13 = v7 + v5;
LABEL_9:
            v14 = *(_QWORD *)(v13 + 112);
          }
          else
          {
            v14 = *(_QWORD *)(v19 + v9);
          }
          *(_QWORD *)v10 = v14;
          break;
        case 0xA:
        case 0xB:
          if (*(_DWORD *)(v7 + v5 + 48) != 3)
            goto LABEL_22;
LABEL_26:
          *(_QWORD *)v10 = 0;
          *(_QWORD *)(v10 + 8) = 0;
          *(_DWORD *)(v10 + 16) = 0;
          break;
        case 0xE:
          v16 = v7 + v5;
          if (*(_DWORD *)(v16 + 48) == 3)
          {
LABEL_21:
            *(_QWORD *)(v10 + 8) = 0;
LABEL_22:
            *(_QWORD *)v10 = 0;
          }
          else
          {
            v12 = *(_DWORD *)(*(_QWORD *)(v16 + 112) + 16);
LABEL_15:
            *(_DWORD *)v10 = v12;
          }
          break;
        default:
          break;
      }
      ++v6;
      v5 += 120;
    }
    while (v6 < *(int *)(v3 + 44));
  }
  return a1;
}

void sub_1887F3F28(_Unwind_Exception *a1)
{
  AddrObjGoogle::protobuf::Message *v1;

  AddrObjGoogle::protobuf::Message::~Message(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DynamicMessage::~DynamicMessage(AddrObjGoogle::protobuf::DynamicMessage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  AddrObjGoogle::protobuf::DynamicMessage *v14;
  uint64_t v16;

  *(_QWORD *)this = &off_1E1BF5328;
  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)(v2 + 32);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::DynamicMessage *)((char *)this + *(int *)(v2 + 8)));
  v4 = *(int *)(*((_QWORD *)this + 1) + 12);
  if ((_DWORD)v4 != -1)
    AddrObjGoogle::protobuf::internal::ExtensionSet::~ExtensionSet((AddrObjGoogle::protobuf::DynamicMessage *)((char *)this + v4));
  if (*(int *)(v3 + 44) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v3 + 48);
      v8 = *((_QWORD *)this + 1);
      v9 = (int *)((char *)this + *(int *)(*(_QWORD *)(v8 + 40) + 4 * v6));
      v10 = AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v7 + v5 + 44)];
      if (*(_DWORD *)(v7 + v5 + 48) == 3)
      {
        switch(*(_DWORD *)(v7 + v5 + 44))
        {
          case 1:
          case 3:
          case 4:
          case 6:
          case 0x10:
          case 0x12:
            if (*(_QWORD *)v9)
              goto LABEL_27;
            break;
          case 2:
          case 5:
          case 7:
          case 0xD:
          case 0xE:
          case 0xF:
          case 0x11:
            if (*(_QWORD *)v9)
              goto LABEL_27;
            break;
          case 8:
            if (*(_QWORD *)v9)
LABEL_27:
              MEMORY[0x18D764364]();
            break;
          case 9:
          case 0xC:
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v9);
            break;
          case 0xA:
          case 0xB:
            AddrObjGoogle::protobuf::internal::RepeatedPtrFieldBase::Destroy<AddrObjGoogle::protobuf::RepeatedPtrField<addr_obj::FingerprintProto>::TypeHandler>((uint64_t *)v9);
            break;
          default:
            break;
        }
      }
      else if (v10 == 10)
      {
        v14 = *(AddrObjGoogle::protobuf::DynamicMessage **)(v8 + 56);
        if (v14 != this && v14 != 0)
        {
          v16 = *(_QWORD *)v9;
          if (v16)
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        }
      }
      else if (v10 == 9)
      {
        v11 = *(_QWORD *)v9;
        v12 = *(_QWORD *)(v7 + v5 + 112);
        if (*(_QWORD *)v9 && v11 != v12)
        {
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          MEMORY[0x18D76437C](v11, 0x1012C40EC159624);
        }
      }
      ++v6;
      v5 += 120;
    }
    while (v6 < *(int *)(v3 + 44));
  }
  AddrObjGoogle::protobuf::Message::~Message(this);
}

{
  AddrObjGoogle::protobuf::DynamicMessage::~DynamicMessage(this);
  JUMPOUT(0x18D76437CLL);
}

void AddrObjGoogle::protobuf::DynamicMessage::CrossLinkPrototypes(AddrObjGoogle::protobuf::DynamicMessage *this)
{
  _QWORD *v2;
  AddrObjGoogle::protobuf::DynamicMessage *v3;
  std::string *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  AddrObjGoogle::protobuf::DynamicMessageFactory *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::string v14[2];

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = (AddrObjGoogle::protobuf::DynamicMessage *)v2[7];
  if (v3 != this && v3 != 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/dynamic_message.cc", 397);
    v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: is_prototype(): ");
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v13, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v6 = v2[4];
  v7 = *(_DWORD *)(v6 + 44);
  if (v7 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = (AddrObjGoogle::protobuf::DynamicMessageFactory *)v2[2];
    do
    {
      v11 = *(_QWORD *)(v6 + 48);
      if (AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(v11 + v8 + 44)] == 10
        && *(_DWORD *)(v11 + v8 + 48) != 3)
      {
        v12 = *(int *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 4 * v9);
        *(_QWORD *)((char *)this + v12) = AddrObjGoogle::protobuf::DynamicMessageFactory::GetPrototypeNoLock(v10, *(const AddrObjGoogle::protobuf::Descriptor **)(v11 + v8 + 72));
        v7 = *(_DWORD *)(v6 + 44);
      }
      ++v9;
      v8 += 120;
    }
    while (v9 < v7);
  }
}

void sub_1887F4238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *AddrObjGoogle::protobuf::DynamicMessageFactory::GetPrototypeNoLock(AddrObjGoogle::protobuf::DynamicMessageFactory *this, const AddrObjGoogle::protobuf::Descriptor *a2)
{
  AddrObjGoogle::protobuf::MessageFactory *v4;
  AddrObjGoogle::protobuf::MessageFactory *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  std::string *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  size_t v43;
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *v44;
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *v45;
  uint64_t v47;
  const AddrObjGoogle::protobuf::Descriptor *v48;
  char v49;
  std::string v50[2];

  v48 = a2;
  if (!*((_BYTE *)this + 16)
    || (v4 = *(AddrObjGoogle::protobuf::MessageFactory **)(*((_QWORD *)a2 + 2) + 16),
        v5 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(this),
        v4 != v5))
  {
    v6 = *((_QWORD *)this + 3);
    v50[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    v7 = std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,std::piecewise_construct_t const&,std::tuple<AddrObjGoogle::protobuf::Descriptor const* const&>,std::tuple<>>(v6, (unint64_t *)&v48, (uint64_t)&unk_189C5D549, v50);
    v8 = v7[3];
    if (v8)
      return *(void **)(v8 + 56);
    v10 = v7;
    v11 = (_QWORD *)operator new();
    v12 = (uint64_t)v11;
    v11[5] = 0;
    v13 = v11 + 5;
    v11[6] = 0;
    v11[7] = 0;
    v10[3] = v11;
    v14 = (unint64_t)v48;
    v11[4] = v48;
    v15 = *((_QWORD *)this + 1);
    if (!v15)
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 16);
    v11[2] = this;
    v11[3] = v15;
    v16 = operator new[]();
    v17 = *(_QWORD *)(v12 + 40);
    if (v17 != v16)
    {
      if (v17)
        MEMORY[0x18D764364](v17, 0x1000C8052888210);
      *v13 = v16;
    }
    *(_DWORD *)(v12 + 4) = 24;
    v18 = (unint64_t)v48;
    v19 = *((_DWORD *)v48 + 11);
    v20 = v19 + 31;
    v21 = v19 + 62;
    if (v20 >= 0)
      v21 = v20;
    v22 = 4 * (v21 >> 5) + 31;
    v23 = v22 & 7;
    if (v22 <= 0)
      v23 = -(-v22 & 7);
    v24 = v22 - v23;
    v25 = *((_DWORD *)v48 + 22);
    if (v24 + 31 <= 0)
      v26 = -(-(v24 + 31) & 7);
    else
      v26 = (v24 + 31) & 7;
    v27 = v25 < 1;
    if (v25 >= 1)
      v28 = v24;
    else
      v28 = -1;
    if (v27)
      v29 = v24;
    else
      v29 = v24 + 31 - v26;
    *(_DWORD *)(v12 + 12) = v28;
    if (*(int *)(v18 + 44) < 1)
    {
LABEL_39:
      if (v29 + 7 <= 0)
        v38 = -(-(v29 + 7) & 7);
      else
        v38 = (v29 + 7) & 7;
      v39 = v29 + 7 - v38;
      *(_DWORD *)(v12 + 8) = v39;
      v40 = v39 + 15;
      v41 = v40 & 7;
      if (v40 <= 0)
        v41 = -(-v40 & 7);
      v42 = v40 - v41;
      *(_DWORD *)v12 = v42;
      v43 = v42;
      v9 = operator new(v42);
      bzero(v9, v43);
      AddrObjGoogle::protobuf::DynamicMessage::DynamicMessage((uint64_t)v9, v12);
      *(_QWORD *)(v12 + 56) = v9;
      v44 = (AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *)operator new();
      AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v44, *(const AddrObjGoogle::protobuf::Descriptor **)(v12 + 32), *(const AddrObjGoogle::protobuf::Message **)(v12 + 56), *(const int **)(v12 + 40), *(_DWORD *)(v12 + 4), *(_DWORD *)(v12 + 8), *(_DWORD *)(v12 + 12), *(const AddrObjGoogle::protobuf::DescriptorPool **)(v12 + 24), this, *(_DWORD *)v12);
      v45 = *(AddrObjGoogle::protobuf::internal::GeneratedMessageReflection **)(v12 + 48);
      if (v45 != v44)
      {
        if (v45)
          (*(void (**)(AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *))(*(_QWORD *)v45 + 8))(v45);
        *(_QWORD *)(v12 + 48) = v44;
      }
      AddrObjGoogle::protobuf::DynamicMessage::CrossLinkPrototypes((AddrObjGoogle::protobuf::DynamicMessage *)v9);
      return v9;
    }
    v30 = 0;
    v31 = 0;
    while (1)
    {
      v32 = AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(*(_QWORD *)(v18 + 48)
                                                                                        + v30
                                                                                        + 44)];
      if (*(_DWORD *)(*(_QWORD *)(v18 + 48) + v30 + 48) == 3)
        break;
      if (v32 > 0xA)
        goto LABEL_37;
      if (((1 << v32) & 0x634) != 0)
      {
        v34 = 8;
LABEL_34:
        v35 = 8;
        goto LABEL_38;
      }
      if (((1 << v32) & 0x14A) != 0)
      {
        v34 = 4;
        v35 = 4;
      }
      else
      {
        if (v32 != 7)
        {
LABEL_37:
          AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v50, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/dynamic_message.cc", 141);
          v36 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v50, "Can't get here.");
          AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v49, (AddrObjGoogle::protobuf::internal::LogMessage *)v36);
          AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v50[0].__r_.__value_.__l.__data_);
          v34 = 0;
          v35 = 0;
          v18 = (unint64_t)v48;
          goto LABEL_38;
        }
        v34 = 1;
        v35 = 1;
      }
LABEL_38:
      v37 = (v29 + v35 - 1) / v35 * v35;
      *(_DWORD *)(v16 + 4 * v31) = v37;
      v29 = v37 + v34;
      ++v31;
      v30 += 120;
      if (v31 >= *(int *)(v18 + 44))
        goto LABEL_39;
    }
    v33 = v32 - 1;
    if (v33 >= 0xA)
      goto LABEL_37;
    v34 = dword_189C5D54C[v33];
    goto LABEL_34;
  }
  v47 = AddrObjGoogle::protobuf::MessageFactory::generated_factory(v5);
  return (void *)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Descriptor *))(*(_QWORD *)v47 + 16))(v47, a2);
}

void sub_1887F460C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x18D76437C](v1, 0x10F1C40A2C4A384);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::DynamicMessage::New(AddrObjGoogle::protobuf::DynamicMessage *this)
{
  void *v2;
  int *v3;

  v2 = operator new(**((int **)this + 1));
  v3 = (int *)*((_QWORD *)this + 1);
  bzero(v2, *v3);
  return AddrObjGoogle::protobuf::DynamicMessage::DynamicMessage((uint64_t)v2, (uint64_t)v3);
}

uint64_t AddrObjGoogle::protobuf::DynamicMessage::GetCachedSize(AddrObjGoogle::protobuf::DynamicMessage *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t AddrObjGoogle::protobuf::DynamicMessage::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 16) = a2;
  return this;
}

uint64_t AddrObjGoogle::protobuf::DynamicMessage::GetMetadata(AddrObjGoogle::protobuf::DynamicMessage *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 32);
}

AddrObjGoogle::protobuf::DynamicMessageFactory *AddrObjGoogle::protobuf::DynamicMessageFactory::DynamicMessageFactory(AddrObjGoogle::protobuf::DynamicMessageFactory *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E1BF5B08;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_DWORD *)(v2 + 32) = 1065353216;
  *((_QWORD *)this + 3) = v2;
  AddrObjGoogle::protobuf::internal::Mutex::Mutex((AddrObjGoogle::protobuf::DynamicMessageFactory *)((char *)this + 32));
  return this;
}

void sub_1887F4714(_Unwind_Exception *a1)
{
  addr_obj::Localization *v1;
  uint64_t *v2;

  AddrObjGoogle::protobuf::internal::scoped_ptr<AddrObjGoogle::protobuf::DynamicMessageFactory::PrototypeMap>::~scoped_ptr(v2);
  addr_obj::Localization::getDisplayLanguage(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DynamicMessageFactory::~DynamicMessageFactory(AddrObjGoogle::protobuf::DynamicMessageFactory *this)
{
  uint64_t *v2;
  _QWORD *i;
  AddrObjGoogle::protobuf::DynamicMessage::TypeInfo *v4;

  *(_QWORD *)this = &off_1E1BF5B08;
  v2 = (uint64_t *)((char *)this + 24);
  for (i = *(_QWORD **)(*((_QWORD *)this + 3) + 16); i; i = (_QWORD *)*i)
  {
    v4 = (AddrObjGoogle::protobuf::DynamicMessage::TypeInfo *)i[3];
    if (v4)
    {
      AddrObjGoogle::protobuf::DynamicMessage::TypeInfo::~TypeInfo(v4);
      MEMORY[0x18D76437C]();
    }
  }
  AddrObjGoogle::protobuf::internal::Mutex::~Mutex((AddrObjGoogle::protobuf::DynamicMessageFactory *)((char *)this + 32));
  AddrObjGoogle::protobuf::internal::scoped_ptr<AddrObjGoogle::protobuf::DynamicMessageFactory::PrototypeMap>::~scoped_ptr(v2);
  addr_obj::Localization::getDisplayLanguage(this);
}

{
  AddrObjGoogle::protobuf::DynamicMessageFactory::~DynamicMessageFactory(this);
  JUMPOUT(0x18D76437CLL);
}

void *AddrObjGoogle::protobuf::DynamicMessageFactory::GetPrototype(pthread_mutex_t **this, const AddrObjGoogle::protobuf::Descriptor *a2)
{
  pthread_mutex_t **v4;
  void *PrototypeNoLock;

  v4 = this + 4;
  AddrObjGoogle::protobuf::internal::Mutex::Lock(this + 4);
  PrototypeNoLock = AddrObjGoogle::protobuf::DynamicMessageFactory::GetPrototypeNoLock((AddrObjGoogle::protobuf::DynamicMessageFactory *)this, a2);
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v4);
  return PrototypeNoLock;
}

void sub_1887F4834(_Unwind_Exception *a1)
{
  pthread_mutex_t **v1;

  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::DynamicMessage::TypeInfo::~TypeInfo(AddrObjGoogle::protobuf::DynamicMessage::TypeInfo *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  if (v4)
    MEMORY[0x18D764364](v4, 0x1000C8052888210);
}

uint64_t *AddrObjGoogle::protobuf::internal::scoped_ptr<AddrObjGoogle::protobuf::DynamicMessageFactory::PrototypeMap>::~scoped_ptr(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (v2)
  {
    v3 = std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v2);
    MEMORY[0x18D76437C](v3, 0x10A0C408EF24B1CLL);
  }
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::DynamicMessage::TypeInfo const*>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,std::piecewise_construct_t const&,std::tuple<AddrObjGoogle::protobuf::Descriptor const* const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1887F4AF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::Message::MergeFrom(AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  uint64_t v4;
  AddrObjGoogle::protobuf::Message *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 152))(this);
  if ((*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2) != v4)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 65);
    v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (from.GetDescriptor()) == (descriptor): ");
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v6, ": Tried to merge from a message with a different type.  to: ");
    v8 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v7, *(const std::string::value_type **)(v4 + 8));
    v9 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, ", from:");
    v10 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
    v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, *(const std::string::value_type **)(v10 + 8));
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (AddrObjGoogle::protobuf::internal::LogMessage *)v11);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  AddrObjGoogle::protobuf::internal::ReflectionOps::Merge(a2, this, v5);
}

void sub_1887F4BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::Message::CheckTypeAndMergeFrom(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
}

void AddrObjGoogle::protobuf::Message::CopyFrom(AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  uint64_t v4;
  AddrObjGoogle::protobuf::Message *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  v4 = (*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 152))(this);
  if ((*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2) != v4)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 78);
    v6 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (from.GetDescriptor()) == (descriptor): ");
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v6, ": Tried to copy from a message with a different type.to: ");
    v8 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v7, *(const std::string::value_type **)(v4 + 8));
    v9 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v8, ", from:");
    v10 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
    v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, *(const std::string::value_type **)(v10 + 8));
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v12, (AddrObjGoogle::protobuf::internal::LogMessage *)v11);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  AddrObjGoogle::protobuf::internal::ReflectionOps::Copy(a2, this, v5);
}

void sub_1887F4CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::Message::GetTypeName(AddrObjGoogle::protobuf::Message *this@<X0>, std::string *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;

  v3 = *(__int128 **)((*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 152))(this) + 8);
  if (*((char *)v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void AddrObjGoogle::protobuf::Message::FindInitializationErrors(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  AddrObjGoogle::protobuf::internal::ReflectionOps::FindInitializationErrors(a1, (const void **)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1887F4DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::Message::InitializationErrorString(AddrObjGoogle::protobuf::Message *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  AddrObjGoogle::protobuf::Message::FindInitializationErrors((uint64_t)this, (uint64_t)v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  AddrObjGoogle::protobuf::JoinStrings(v3, ", ", (uint64_t)a2);
  v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1887F4E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;

  if (*(char *)(v12 + 23) < 0)
    operator delete(*(void **)v12);
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::Message::MergePartialFromCodedStream(AddrObjGoogle::protobuf::Message *this, AddrObjGoogle::protobuf::io::CodedInputStream *a2, AddrObjGoogle::protobuf::Message *a3)
{
  return AddrObjGoogle::protobuf::internal::WireFormat::ParseAndMergePartial(a2, this, a3);
}

void AddrObjGoogle::protobuf::Message::SerializeWithCachedSizes(AddrObjGoogle::protobuf::Message *this, AddrObjGoogle::protobuf::io::CodedOutputStream *a2)
{
  const AddrObjGoogle::protobuf::Message *v4;
  AddrObjGoogle::protobuf::io::CodedOutputStream *v5;

  v4 = (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 96))(this);
  AddrObjGoogle::protobuf::internal::WireFormat::SerializeWithCachedSizes(this, v4, a2, v5);
}

uint64_t AddrObjGoogle::protobuf::Message::ByteSize(AddrObjGoogle::protobuf::Message *this, const AddrObjGoogle::protobuf::Message *a2)
{
  uint64_t v3;

  v3 = AddrObjGoogle::protobuf::internal::WireFormat::ByteSize(this, a2);
  (*(void (**)(AddrObjGoogle::protobuf::Message *, uint64_t))(*(_QWORD *)this + 136))(this, v3);
  return v3;
}

uint64_t AddrObjGoogle::protobuf::Message::SpaceUsed(AddrObjGoogle::protobuf::Message *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)this + 144))(this);
  return (*(uint64_t (**)(uint64_t, AddrObjGoogle::protobuf::Message *))(*(_QWORD *)v2 + 32))(v2, this);
}

uint64_t sub_1887F4F30()
{
  uint64_t v0;
  _QWORD v2[2];
  char v3;

  v0 = qword_1EDF50398;
  __dmb(0xBu);
  if (v0 != 2)
  {
    v2[0] = &off_1E1BF6040;
    v2[1] = sub_1887F5068;
    v3 = 0;
    AddrObjGoogle::protobuf::GoogleOnceInitImpl((unint64_t *)&qword_1EDF50398, (uint64_t)v2);
    AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)v2);
  }
  return qword_1EDF503A0;
}

void sub_1887F4FA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::FunctionClosure0::~FunctionClosure0((AddrObjGoogle::protobuf::internal::FunctionClosure0 *)va);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::MessageFactory::InternalRegisterGeneratedMessage(const std::string::value_type **this, const AddrObjGoogle::protobuf::Descriptor *a2, const AddrObjGoogle::protobuf::Message *a3)
{
  uint64_t v5;
  char v6;
  std::string *v7;
  std::string *v8;
  char v9;
  std::string v10[2];

  v5 = sub_1887F4F30();
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)(v5 + 48));
  v10[0].__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  v10[0].__r_.__value_.__l.__size_ = (std::string::size_type)a2;
  std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,std::pair<AddrObjGoogle::protobuf::Descriptor const* const,AddrObjGoogle::protobuf::Message const*>>(v5 + 56, (unint64_t *)v10, v10);
  if ((v6 & 1) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 296);
    v7 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v10, "Type is already registered: ");
    v8 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v7, this[1]);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v9, (AddrObjGoogle::protobuf::internal::LogMessage *)v8);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
}

void sub_1887F5050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sub_1887F5068()
{
  uint64_t v0;
  void (*v1)(void);

  v0 = operator new();
  *(_QWORD *)v0 = &off_1E1BFEE50;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_DWORD *)(v0 + 40) = 1065353216;
  AddrObjGoogle::protobuf::internal::Mutex::Mutex((AddrObjGoogle::protobuf::internal::Mutex *)(v0 + 48));
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_DWORD *)(v0 + 88) = 1065353216;
  qword_1EDF503A0 = v0;
  AddrObjGoogle::protobuf::internal::OnShutdown((AddrObjGoogle::protobuf::internal *)sub_1887F511C, v1);
}

void sub_1887F50F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v2);
  MEMORY[0x18D76437C](v1, 0x10A1C40E48A8396);
  _Unwind_Resume(a1);
}

uint64_t sub_1887F511C()
{
  uint64_t result;

  result = qword_1EDF503A0;
  if (qword_1EDF503A0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)qword_1EDF503A0 + 8))(qword_1EDF503A0);
  return result;
}

_QWORD *sub_1887F5138(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E1BFEE50;
  v2 = (uint64_t)(a1 + 1);
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)(a1 + 7));
  AddrObjGoogle::protobuf::internal::Mutex::~Mutex((AddrObjGoogle::protobuf::internal::Mutex *)(a1 + 6));
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(v2);
  return a1;
}

void sub_1887F5180(_QWORD *a1)
{
  sub_1887F5138(a1);
  JUMPOUT(0x18D76437CLL);
}

uint64_t sub_1887F51A4(uint64_t a1, unint64_t a2)
{
  pthread_mutex_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  AddrObjGoogle::protobuf::DescriptorPool *v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t **v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string *v18;
  char v20;
  std::string v21[2];
  unint64_t v22;

  v22 = a2;
  v3 = (pthread_mutex_t **)(a1 + 48);
  AddrObjGoogle::protobuf::internal::Mutex::Lock((pthread_mutex_t **)(a1 + 48));
  v4 = (_QWORD *)(a1 + 56);
  v5 = std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::find<AddrObjGoogle::protobuf::Descriptor const*>((_QWORD *)(a1 + 56), &v22);
  if (v5)
    v6 = v5[3];
  else
    v6 = 0;
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v3);
  if (v6)
    return v6;
  v8 = *(_QWORD *)(*(_QWORD *)(v22 + 16) + 16);
  if (v8 != AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v7))
    return 0;
  v9 = **(_QWORD **)(v22 + 16);
  if (*(char *)(v9 + 23) < 0)
    v9 = *(_QWORD *)v9;
  v21[0].__r_.__value_.__r.__words[0] = v9;
  v10 = std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::find<char const*>((_QWORD *)(a1 + 8), (const char **)&v21[0].__r_.__value_.__l.__data_);
  if (!v10 || (v11 = v10[3]) == 0)
  {
    AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 316);
    v17 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v21, "File appears to be in generated pool but wasn't registered: ");
    v18 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v17, **(const std::string::value_type ***)(v22 + 16));
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (AddrObjGoogle::protobuf::internal::LogMessage *)v18);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    return 0;
  }
  AddrObjGoogle::protobuf::internal::Mutex::Lock(v3);
  v12 = std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::find<AddrObjGoogle::protobuf::Descriptor const*>(v4, &v22);
  if (!v12 || (v6 = v12[3]) == 0)
  {
    ((void (*)(_QWORD))v11)(**(_QWORD **)(v22 + 16));
    v13 = std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::find<AddrObjGoogle::protobuf::Descriptor const*>(v4, &v22);
    if (!v13 || (v6 = v13[3]) == 0)
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/message.cc", 333);
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v21, "Type appears to be in generated pool but wasn't ");
      v15 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, "registered: ");
      v16 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v15, *(const std::string::value_type **)(v22 + 8));
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v20, (AddrObjGoogle::protobuf::internal::LogMessage *)v16);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
      v6 = 0;
    }
  }
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v3);
  return v6;
}

void sub_1887F5358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pthread_mutex_t **v2;
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  AddrObjGoogle::protobuf::internal::Mutex::Unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::find<AddrObjGoogle::protobuf::Descriptor const*>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
    v5 = *(_QWORD *)&v2 <= v3 ? v3 % *(_QWORD *)&v2 : *a2;
  else
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,void (*)(std::string const&)>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::hash<char const*>,AddrObjGoogle::protobuf::streq,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,void (*)(std::string const&)>,AddrObjGoogle::protobuf::streq,AddrObjGoogle::protobuf::hash<char const*>,true>,std::allocator<std::__hash_value_type<char const*,void (*)(std::string const&)>>>::find<char const*>(_QWORD *a1, const char **a2)
{
  const char *v2;
  char v3;
  unint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int8x8_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t ***v11;
  uint64_t **i;
  unint64_t v13;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(v2 + 1);
    do
    {
      v4 = 5 * v4 + v3;
      v6 = *v5++;
      v3 = v6;
    }
    while (v6);
  }
  else
  {
    v4 = 0;
  }
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v4;
    if (v4 >= *(_QWORD *)&v7)
      v10 = v4 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v4;
  }
  v11 = *(uint64_t ****)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  for (i = *v11; i; i = (uint64_t **)*i)
  {
    v13 = (unint64_t)i[1];
    if (v4 == v13)
    {
      if (!strcmp((const char *)i[2], v2))
        return i;
    }
    else
    {
      if (v9 > 1)
      {
        if (v13 >= *(_QWORD *)&v7)
          v13 %= *(_QWORD *)&v7;
      }
      else
      {
        v13 &= *(_QWORD *)&v7 - 1;
      }
      if (v13 != v10)
        return 0;
    }
  }
  return i;
}

_QWORD *std::__hash_table<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::__unordered_map_hasher<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::__unordered_map_equal<AddrObjGoogle::protobuf::Descriptor const*,std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>,std::equal_to<AddrObjGoogle::protobuf::Descriptor const*>,AddrObjGoogle::protobuf::hash<AddrObjGoogle::protobuf::Descriptor const*>,true>,std::allocator<std::__hash_value_type<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Message const*>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,std::pair<AddrObjGoogle::protobuf::Descriptor const* const,AddrObjGoogle::protobuf::Message const*>>(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1887F5784(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *addr_obj::venue::Decorator::Decorator(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  v12 = this + 3;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v13 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  return this;
}

void sub_1887F5880(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *addr_obj::venue::Decorator::Decorator(std::string *this, const addr_obj::VenueDecoratorProto *a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  __int128 *v8;
  __int128 v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;

  v4 = (__int128 *)*((_QWORD *)a2 + 2);
  if (*((char *)v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = (__int128 *)*((_QWORD *)a2 + 3);
  if (*((char *)v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v7;
  }
  v8 = (__int128 *)*((_QWORD *)a2 + 4);
  if (*((char *)v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v9;
  }
  v10 = this + 3;
  v11 = (__int128 *)*((_QWORD *)a2 + 5);
  if (*((char *)v11 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  return this;
}

void sub_1887F59B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *addr_obj::venue::Decorator::toProto(std::string *this, addr_obj::VenueDecoratorProto *a2)
{
  std::string *v3;
  std::string::size_type size;
  uint64_t *v5;
  std::string *v6;
  std::string::size_type v7;
  uint64_t *v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t *v11;
  std::string *v12;
  std::string::size_type v13;
  const std::string *v14;
  uint64_t *v15;
  std::string *v16;

  v3 = this;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    *((_DWORD *)a2 + 13) |= 1u;
    v5 = (uint64_t *)*((_QWORD *)a2 + 2);
    if (v5 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
    {
      v6 = (std::string *)operator new();
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)a2 + 2) = v6;
    }
    else
    {
      v6 = (std::string *)*((_QWORD *)a2 + 2);
    }
    this = std::string::operator=(v6, v3);
  }
  v7 = HIBYTE(v3[1].__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) != 0)
    v7 = v3[1].__r_.__value_.__l.__size_;
  if (v7)
  {
    *((_DWORD *)a2 + 13) |= 2u;
    v8 = (uint64_t *)*((_QWORD *)a2 + 3);
    if (v8 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
    {
      v9 = (std::string *)operator new();
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)a2 + 3) = v9;
    }
    else
    {
      v9 = (std::string *)*((_QWORD *)a2 + 3);
    }
    this = std::string::operator=(v9, v3 + 1);
  }
  v10 = HIBYTE(v3[2].__r_.__value_.__r.__words[2]);
  if ((v10 & 0x80u) != 0)
    v10 = v3[2].__r_.__value_.__l.__size_;
  if (v10)
  {
    *((_DWORD *)a2 + 13) |= 4u;
    v11 = (uint64_t *)*((_QWORD *)a2 + 4);
    if (v11 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
    {
      v12 = (std::string *)operator new();
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)a2 + 4) = v12;
    }
    else
    {
      v12 = (std::string *)*((_QWORD *)a2 + 4);
    }
    this = std::string::operator=(v12, v3 + 2);
  }
  v13 = HIBYTE(v3[3].__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) != 0)
    v13 = v3[3].__r_.__value_.__l.__size_;
  if (v13)
  {
    v14 = v3 + 3;
    *((_DWORD *)a2 + 13) |= 8u;
    v15 = (uint64_t *)*((_QWORD *)a2 + 5);
    if (v15 == AddrObjGoogle::protobuf::internal::kEmptyString((AddrObjGoogle::protobuf::internal *)this))
    {
      v16 = (std::string *)operator new();
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      *((_QWORD *)a2 + 5) = v16;
    }
    else
    {
      v16 = (std::string *)*((_QWORD *)a2 + 5);
    }
    return std::string::operator=(v16, v14);
  }
  return this;
}

uint64_t addr_obj::venue::Decorator::str(addr_obj::venue::Decorator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  addr_obj::venue::Decorator *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v30[11];
  char v31;
  uint64_t v32;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"venue::Decorator", 16);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)": pre_separator <", 17);
  v4 = *((char *)this + 23);
  if (v4 >= 0)
    v5 = this;
  else
    v5 = *(addr_obj::venue::Decorator **)this;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)this + 23);
  else
    v6 = *((_QWORD *)this + 1);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)">", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"; prefix <", 10);
  v10 = *((char *)this + 47);
  if (v10 >= 0)
    v11 = (char *)this + 24;
  else
    v11 = (char *)*((_QWORD *)this + 3);
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)this + 47);
  else
    v12 = *((_QWORD *)this + 4);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"; postfix <", 11);
  v16 = *((char *)this + 71);
  if (v16 >= 0)
    v17 = (char *)this + 48;
  else
    v17 = (char *)*((_QWORD *)this + 6);
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)this + 71);
  else
    v18 = *((_QWORD *)this + 7);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)">", 1);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"; post_separator <",
          18);
  v24 = *((_QWORD *)this + 9);
  v23 = (char *)this + 72;
  v22 = v24;
  v25 = v23[23];
  if (v25 >= 0)
    v26 = (uint64_t)v23;
  else
    v26 = v22;
  if (v25 >= 0)
    v27 = v23[23];
  else
    v27 = *((_QWORD *)v23 + 1);
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v26, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)">", 1);
  std::stringbuf::str();
  v30[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v32);
}

void sub_1887F5DA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_call_unexpected(a1);
}

_QWORD *addr_obj::venue::operator<<(_QWORD *a1, addr_obj::venue::Decorator *this)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  addr_obj::venue::Decorator::str((uint64_t *)__p, this);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_1887F5E38(void *a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::string::~string((std::string *)&a10);
  __cxa_call_unexpected(a1);
}

void AddrObjGoogle::protobuf::EncodedDescriptorDatabase::~EncodedDescriptorDatabase(AddrObjGoogle::protobuf::EncodedDescriptorDatabase *this)
{
  void **v2;
  unint64_t v3;

  *(_QWORD *)this = &off_1E1BF5DF0;
  v2 = (void **)*((_QWORD *)this + 11);
  if (v2 != *((void ***)this + 10))
  {
    v3 = 0;
    v2 = (void **)*((_QWORD *)this + 10);
    do
    {
      operator delete(v2[v3++]);
      v2 = (void **)*((_QWORD *)this + 10);
    }
    while (v3 < (uint64_t)(*((_QWORD *)this + 11) - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy((uint64_t)this + 56, *((char **)this + 8));
  std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy((uint64_t)this + 32, *((char **)this + 5));
  std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy((uint64_t)this + 8, *((char **)this + 2));
}

{
  AddrObjGoogle::protobuf::EncodedDescriptorDatabase::~EncodedDescriptorDatabase(this);
  JUMPOUT(0x18D76437CLL);
}

BOOL AddrObjGoogle::protobuf::EncodedDescriptorDatabase::FindFileByName(uint64_t a1, const void **a2, AddrObjGoogle::protobuf::MessageLite *a3)
{
  uint64_t v5;
  char *v6;

  v5 = std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v5)
    return 0;
  v6 = *(char **)(v5 + 56);
  return v6 && AddrObjGoogle::protobuf::MessageLite::ParseFromArray(a3, v6, *(_DWORD *)(v5 + 64));
}

char *AddrObjGoogle::protobuf::EncodedDescriptorDatabase::FindFileContainingSymbol(uint64_t a1, const void **a2, AddrObjGoogle::protobuf::MessageLite *a3)
{
  char *result;
  int v5;

  result = (char *)AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindSymbol(a1 + 8, a2);
  if (result)
    return (char *)AddrObjGoogle::protobuf::MessageLite::ParseFromArray(a3, result, v5);
  return result;
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindSymbol(uint64_t a1, const void **a2)
{
  unsigned __int8 *LastLessOrEqual;
  unsigned __int8 *v5;

  LastLessOrEqual = (unsigned __int8 *)AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindLastLessOrEqual(a1, a2);
  if ((unsigned __int8 *)(a1 + 32) == LastLessOrEqual)
    return 0;
  v5 = LastLessOrEqual;
  if (!AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::IsSubSymbol(a1, LastLessOrEqual + 32, (unsigned __int8 *)a2))return 0;
  else
    return *((_QWORD *)v5 + 7);
}

char *AddrObjGoogle::protobuf::EncodedDescriptorDatabase::FindFileContainingExtension(uint64_t a1, uint64_t a2, int a3, AddrObjGoogle::protobuf::MessageLite *a4)
{
  char *result;
  int v6;

  result = (char *)AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindExtension(a1 + 8, a2, a3);
  if (result)
    return (char *)AddrObjGoogle::protobuf::MessageLite::ParseFromArray(a4, result, v6);
  return result;
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindExtension(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string v9;
  int v10;

  v5 = a1 + 48;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v10 = a3;
  v6 = std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::find<std::pair<std::string,int>>(v5, (const void **)&v9.__r_.__value_.__l.__data_);
  if (a1 + 56 == v6)
    v7 = 0;
  else
    v7 = *(_QWORD *)(v6 + 64);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1887F60FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::EncodedDescriptorDatabase::FindAllExtensionNumbers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindAllExtensionNumbers(a1 + 8, a2, a3);
}

uint64_t AddrObjGoogle::protobuf::SimpleDescriptorDatabase::DescriptorIndex<std::pair<void const*,int>>::FindAllExtensionNumbers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BOOL4 v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const void **v17;
  const std::string::value_type *v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  std::string __p;
  int v35;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v35 = 0;
  v6 = (_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 56);
  if (v7)
  {
    v8 = a1 + 64;
    v9 = v6;
    do
    {
      v10 = std::less<std::pair<std::string,int>>::operator()[abi:ne180100](v8, (const void **)(v7 + 32), (const void **)&__p.__r_.__value_.__l.__data_);
      v11 = (uint64_t *)(v7 + 8);
      if (!v10)
      {
        v11 = (uint64_t *)v7;
        v9 = (_QWORD *)v7;
      }
      v7 = *v11;
    }
    while (*v11);
  }
  else
  {
    v9 = (_QWORD *)(a1 + 56);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v9 == v6)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *((unsigned __int8 *)v9 + 55);
      if ((v13 & 0x80u) == 0)
        v14 = *((unsigned __int8 *)v9 + 55);
      else
        v14 = v9[5];
      v15 = *(unsigned __int8 *)(a2 + 23);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(a2 + 8);
      if (v14 != v15)
        break;
      v17 = (const void **)(v9 + 4);
      if (v16 >= 0)
        v18 = (const std::string::value_type *)a2;
      else
        v18 = *(const std::string::value_type **)a2;
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*v17, v18, v9[5]))
          return v12 & 1;
      }
      else if (*((_BYTE *)v9 + 55))
      {
        while (*(unsigned __int8 *)v17 == *(unsigned __int8 *)v18)
        {
          v17 = (const void **)((char *)v17 + 1);
          ++v18;
          if (!--v13)
            goto LABEL_30;
        }
        return v12 & 1;
      }
LABEL_30:
      v20 = *(_DWORD **)(a3 + 8);
      v19 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v20 >= v19)
      {
        v22 = *(_DWORD **)a3;
        v23 = ((uint64_t)v20 - *(_QWORD *)a3) >> 2;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 62)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v25 = v19 - (_QWORD)v22;
        if (v25 >> 1 > v24)
          v24 = v25 >> 1;
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
          v26 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v26 = v24;
        if (v26)
        {
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a3 + 16, v26);
          v22 = *(_DWORD **)a3;
          v20 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v27 = 0;
        }
        v28 = &v27[4 * v23];
        *(_DWORD *)v28 = *((_DWORD *)v9 + 14);
        v21 = v28 + 4;
        while (v20 != v22)
        {
          v29 = *--v20;
          *((_DWORD *)v28 - 1) = v29;
          v28 -= 4;
        }
        *(_QWORD *)a3 = v28;
        *(_QWORD *)(a3 + 8) = v21;
        *(_QWORD *)(a3 + 16) = &v27[4 * v26];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v20 = *((_DWORD *)v9 + 14);
        v21 = v20 + 1;
      }
      *(_QWORD *)(a3 + 8) = v21;
      v30 = (_QWORD *)v9[1];
      if (v30)
      {
        do
        {
          v31 = v30;
          v30 = (_QWORD *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          v31 = (_QWORD *)v9[2];
          v32 = *v31 == (_QWORD)v9;
          v9 = v31;
        }
        while (!v32);
      }
      v12 = 1;
      v9 = v31;
    }
    while (v31 != v6);
  }
  return v12 & 1;
}

void sub_1887F6368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

BOOL std::less<std::pair<std::string,int>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;
  BOOL v13;
  int v15;
  BOOL v16;

  v5 = *((char *)a3 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = (size_t)a3[1];
  if (v5 >= 0)
    v10 = a3;
  else
    v10 = *a3;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  v13 = v7 < v9;
  if (v12)
    v13 = v12 < 0;
  if (v13)
    return 1;
  v15 = memcmp(v10, v8, v11);
  v16 = v9 < v7;
  if (v15)
    v16 = v15 < 0;
  return !v16 && *((_DWORD *)a2 + 6) < *((_DWORD *)a3 + 6);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::pair<void const*,int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

std::string *std::pair<std::pair<std::string,int> const,std::pair<void const*,int>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = a2[2];
  return this;
}

uint64_t std::__tree<std::__value_type<std::string,std::pair<void const*,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<void const*,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<void const*,int>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

uint64_t std::__tree<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::__map_value_compare<std::pair<std::string,int>,std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>,std::less<std::pair<std::string,int>>,true>,std::allocator<std::__value_type<std::pair<std::string,int>,std::pair<void const*,int>>>>::find<std::pair<std::string,int>>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::pair<std::string,int>>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::pair<std::string,int>>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

int *addr_obj::V3AddressObjectProto::v3address(addr_obj::V3AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V3AddressObjectProto *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF503D0);
  if ((v1 & 1) == 0)
  {
    v3 = (addr_obj::V3AddressObjectProto *)__cxa_guard_acquire(&qword_1EDF503D0);
    if ((_DWORD)v3)
    {
      v4 = addr_obj::V3AddressObjectProto::default_instance(v3);
      dword_1EDF503C0 = 101;
      qword_1EDF503C8 = v4;
      __cxa_guard_release(&qword_1EDF503D0);
    }
  }
  return &dword_1EDF503C0;
}

void sub_1887F6744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDF503D0);
  _Unwind_Resume(a1);
}

int *addr_obj::V4AddressObjectProto::v4address(addr_obj::V4AddressObjectProto *this)
{
  unsigned __int8 v1;
  addr_obj::V4AddressObjectProto *v3;
  uint64_t v4;

  v1 = atomic_load((unsigned __int8 *)&qword_1EDF503E8);
  if ((v1 & 1) == 0)
  {
    v3 = (addr_obj::V4AddressObjectProto *)__cxa_guard_acquire(&qword_1EDF503E8);
    if ((_DWORD)v3)
    {
      v4 = addr_obj::V4AddressObjectProto::default_instance(v3);
      dword_1EDF503D8 = 102;
      qword_1EDF503E0 = v4;
      __cxa_guard_release(&qword_1EDF503E8);
    }
  }
  return &dword_1EDF503D8;
}

void sub_1887F67C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EDF503E8);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::Message::DebugString@<W0>(AddrObjGoogle::protobuf::Message *this@<X0>, _QWORD *a2@<X8>)
{
  int v3[2];

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(int *)((char *)v3 + 3) = 0;
  v3[0] = 0;
  return AddrObjGoogle::protobuf::TextFormat::Printer::PrintToString(v3, this, (uint64_t)a2);
}

void sub_1887F6820(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::Message::ShortDebugString(AddrObjGoogle::protobuf::Message *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  __int16 v8;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = 0;
  v6 = 0;
  v7 = 1;
  AddrObjGoogle::protobuf::TextFormat::Printer::PrintToString(&v6, this, a2);
  v3 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if (!v4)
      return;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 23))
      return;
    v4 = *(unsigned __int8 *)(a2 + 23);
  }
  v5 = v4 - 1;
  if ((v3 & 0x80) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)a2 + v5) != 32)
      return;
    v3 = *(_QWORD *)(a2 + 8);
    goto LABEL_10;
  }
  if (*(_BYTE *)(a2 + v5) == 32)
LABEL_10:
    std::string::resize((std::string *)a2, v3 - 1, 0);
}

void sub_1887F68E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_DWORD *AddrObjGoogle::protobuf::TextFormat::Printer::Printer(_DWORD *this)
{
  *(_DWORD *)((char *)this + 3) = 0;
  *this = 0;
  return this;
}

BOOL AddrObjGoogle::protobuf::TextFormat::Printer::PrintToString(int *a1, const AddrObjGoogle::protobuf::Message *a2, uint64_t a3)
{
  _BOOL8 v5;
  _QWORD v7[2];

  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
  }
  AddrObjGoogle::protobuf::io::StringOutputStream::StringOutputStream(v7, a3);
  v5 = AddrObjGoogle::protobuf::TextFormat::Printer::Print(a1, a2, (uint64_t)v7);
  AddrObjGoogle::protobuf::io::StringOutputStream::~StringOutputStream((AddrObjGoogle::protobuf::io::StringOutputStream *)v7);
  return v5;
}

void sub_1887F6980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AddrObjGoogle::protobuf::io::StringOutputStream::~StringOutputStream((AddrObjGoogle::protobuf::io::StringOutputStream *)&a9);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::ParseInfoTree::RecordLocation(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t *v20;

  v19 = a2;
  v20 = &v19;
  v4 = std::__tree<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::__map_value_compare<AddrObjGoogle::protobuf::FieldDescriptor const*,std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::less<AddrObjGoogle::protobuf::FieldDescriptor const*>,true>,std::allocator<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::FieldDescriptor const*,std::piecewise_construct_t const&,std::tuple<AddrObjGoogle::protobuf::FieldDescriptor const* const&>,std::tuple<>>(a1, &v19, (uint64_t)&unk_189C5D73C, (uint64_t **)&v20);
  v5 = (_QWORD *)v4[6];
  v6 = v4[7];
  if ((unint64_t)v5 >= v6)
  {
    v8 = v4[5];
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(v4 + 7), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a3;
    v7 = v14 + 8;
    v17 = (char *)v4[5];
    v16 = (char *)v4[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)v4[5];
    }
    v4[5] = (uint64_t)v14;
    v4[6] = (uint64_t)v7;
    v4[7] = (uint64_t)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = a3;
    v7 = v5 + 1;
  }
  v4[6] = (uint64_t)v7;
}

_QWORD *AddrObjGoogle::protobuf::TextFormat::ParseInfoTree::CreateNested(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t *v21;

  v20 = a2;
  v3 = (_QWORD *)operator new();
  v3[1] = 0;
  *v3 = v3 + 1;
  v3[4] = 0;
  v3[5] = 0;
  v3[2] = 0;
  v3[3] = v3 + 4;
  v21 = &v20;
  v4 = std::__tree<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::__map_value_compare<AddrObjGoogle::protobuf::FieldDescriptor const*,std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::less<AddrObjGoogle::protobuf::FieldDescriptor const*>,true>,std::allocator<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::FieldDescriptor const*,std::piecewise_construct_t const&,std::tuple<AddrObjGoogle::protobuf::FieldDescriptor const* const&>,std::tuple<>>((uint64_t **)(a1 + 24), &v20, (uint64_t)&unk_189C5D73C, (uint64_t **)&v21);
  v5 = (_QWORD *)v4[6];
  v6 = v4[7];
  if ((unint64_t)v5 >= v6)
  {
    v8 = v4[5];
    v9 = ((uint64_t)v5 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v10 = v6 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::StringList::Entry>>((uint64_t)(v4 + 7), v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v3;
    v7 = v14 + 8;
    v17 = (char *)v4[5];
    v16 = (char *)v4[6];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)v4[5];
    }
    v4[5] = (uint64_t)v14;
    v4[6] = (uint64_t)v7;
    v4[7] = (uint64_t)v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v5 = v3;
    v7 = v5 + 1;
  }
  v4[6] = (uint64_t)v7;
  return v3;
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::Parser(uint64_t this)
{
  *(_QWORD *)this = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_WORD *)(this + 24) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::Parse(uint64_t a1, uint64_t a2, AddrObjGoogle::protobuf::Message *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a3 + 32))(a3);
  v6 = (*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a3 + 152))(a3);
  AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserImpl((uint64_t)v10, v6, a2, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), 1, *(_BYTE *)(a1 + 25));
  v8 = AddrObjGoogle::protobuf::TextFormat::Parser::MergeUsingImpl(a1, v7, a3, (uint64_t)v10);
  AddrObjGoogle::protobuf::io::Tokenizer::~Tokenizer((AddrObjGoogle::protobuf::io::Tokenizer *)&v12);
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)&v11);
  return v8;
}

void sub_1887F6C94(_Unwind_Exception *a1)
{
  uint64_t v1;

  AddrObjGoogle::protobuf::io::Tokenizer::~Tokenizer((AddrObjGoogle::protobuf::io::Tokenizer *)(v1 + 40));
  addr_obj::Localization::getDisplayLanguage((addr_obj::Localization *)(v1 + 24));
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::MergeUsingImpl(uint64_t a1, uint64_t a2, AddrObjGoogle::protobuf::Message *a3, uint64_t a4)
{
  std::string *v8;
  __int128 v9;
  std::string v10;
  void *__p[2];
  std::string::size_type v12;
  uint64_t v13[3];

  while (*(_DWORD *)(a4 + 40) != 1)
  {
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeField((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)a4, a3) & 1) == 0)return 0;
  }
  if (*(_BYTE *)(a4 + 229))
    return 0;
  if (!*(_BYTE *)(a1 + 24)
    && ((*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a3 + 40))(a3) & 1) == 0)
  {
    memset(v13, 0, sizeof(v13));
    AddrObjGoogle::protobuf::Message::FindInitializationErrors((uint64_t)a3, (uint64_t)v13);
    memset(&v10, 0, sizeof(v10));
    AddrObjGoogle::protobuf::JoinStrings(v13, ", ", (uint64_t)&v10);
    v8 = std::string::insert(&v10, 0, "Message missing required fields: ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v12 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a4, 0xFFFFFFFFLL, 0, (const std::string::value_type *)__p);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
    __p[0] = v13;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return 0;
  }
  return 1;
}

void sub_1887F6DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParseFromString(uint64_t a1, _DWORD *a2, AddrObjGoogle::protobuf::Message *a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BYTE v10[32];

  v5 = *((char *)a2 + 23);
  v6 = a2[2];
  if (v5 >= 0)
  {
    v7 = v5;
  }
  else
  {
    a2 = *(_DWORD **)a2;
    v7 = v6;
  }
  AddrObjGoogle::protobuf::io::ArrayInputStream::ArrayInputStream((uint64_t)v10, a2, v7, -1);
  v8 = AddrObjGoogle::protobuf::TextFormat::Parser::Parse(a1, (uint64_t)v10, a3);
  AddrObjGoogle::protobuf::io::ArrayInputStream::~ArrayInputStream((AddrObjGoogle::protobuf::io::ArrayInputStream *)v10);
  return v8;
}

void sub_1887F6E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  AddrObjGoogle::protobuf::io::ArrayInputStream::~ArrayInputStream((AddrObjGoogle::protobuf::io::ArrayInputStream *)&a9);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError(uint64_t *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  int v5;
  int v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  char v18;
  std::string v19[2];

  v5 = a3;
  v6 = a2;
  *((_BYTE *)a1 + 229) = 1;
  v8 = *a1;
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, const std::string::value_type *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
  }
  else
  {
    if ((a2 & 0x80000000) != 0)
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 251);
      v17 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "Error parsing text-format ");
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v17, *(const std::string::value_type **)(a1[27] + 8));
    }
    else
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 246);
      v9 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "Error parsing text-format ");
      v10 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, *(const std::string::value_type **)(a1[27] + 8));
      v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v10, ": ");
      v12 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v11, v6 + 1);
      v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v12, ":");
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, v5 + 1);
    }
    v15 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, ": ");
    v16 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v15, a4);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (AddrObjGoogle::protobuf::internal::LogMessage *)v16);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
}

void sub_1887F6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL AddrObjGoogle::protobuf::TextFormat::Printer::Print(int *a1, const AddrObjGoogle::protobuf::Message *a2, uint64_t a3)
{
  _BOOL8 v5;
  std::string v7[2];

  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::TextGenerator((uint64_t)v7, a3, *a1);
  AddrObjGoogle::protobuf::TextFormat::Printer::Print((AddrObjGoogle::protobuf::TextFormat::Printer *)a1, a2, v7);
  v5 = v7[0].__r_.__value_.__s.__data_[21] == 0;
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::~TextGenerator((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)v7);
  return v5;
}

void sub_1887F7070(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::~TextGenerator((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)va);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::Printer::Print(AddrObjGoogle::protobuf::TextFormat::Printer *this, const AddrObjGoogle::protobuf::Message *a2, std::string *a3)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t **v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;

  v6 = (*(uint64_t (**)(const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 144))(a2);
  __p = 0;
  v11 = 0;
  v12 = 0;
  (*(void (**)(uint64_t, const AddrObjGoogle::protobuf::Message *, void **))(*(_QWORD *)v6 + 96))(v6, a2, &__p);
  v7 = __p;
  if (v11 != __p)
  {
    v8 = 0;
    do
    {
      AddrObjGoogle::protobuf::TextFormat::Printer::PrintField((uint64_t)this, (uint64_t)a2, v6, v7[v8++], a3);
      v7 = __p;
    }
    while (v8 < (v11 - (_BYTE *)__p) >> 3);
  }
  v9 = (uint64_t **)(*(uint64_t (**)(uint64_t, const AddrObjGoogle::protobuf::Message *))(*(_QWORD *)v6 + 16))(v6, a2);
  AddrObjGoogle::protobuf::TextFormat::Printer::PrintUnknownFields(this, v9, a3);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_1887F7160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::TextFormat::Printer::PrintUnknownFields(AddrObjGoogle::protobuf::TextFormat::Printer *this, uint64_t **a2, std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  const char *v12;
  int v13;
  char *v14;
  const char *p_p;
  int v16;
  const char *v17;
  int v18;
  const char *v19;
  int v20;
  char *v21;
  const char *v22;
  int v23;
  const char *v24;
  const char *v25;
  int v26;
  char *v27;
  const char *v28;
  int v29;
  const char *v30;
  int v31;
  uint64_t v32;
  char v33;
  const char *v34;
  int v35;
  const void *v36;
  int v37;
  const char *v38;
  std::string *v39;
  uint64_t v40;
  void *v41;
  int v42;
  unsigned __int8 v43;
  void *__p;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;

  v6 = 0;
  v7 = 0;
  v47 = *MEMORY[0x1E0C80C00];
  v39 = a3 + 1;
  while (1)
  {
    v8 = *a2;
    if (*a2)
      v9 = (unint64_t)(v8[1] - *v8) >> 4;
    else
      LODWORD(v9) = 0;
    if (v7 >= (int)v9)
      break;
    v10 = *v8;
    v11 = (_DWORD *)(*v8 + v6);
    AddrObjGoogle::protobuf::SimpleItoa((AddrObjGoogle::protobuf *)(*v11 & 0x1FFFFFFF), (char *)a3, &v41);
    switch(*v11 >> 29)
    {
      case 0:
        if ((v43 & 0x80u) == 0)
          v12 = (const char *)&v41;
        else
          v12 = (const char *)v41;
        if ((v43 & 0x80u) == 0)
          v13 = v43;
        else
          v13 = v42;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v12, v13);
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, ": ", 2);
        AddrObjGoogle::protobuf::SimpleItoa(*(AddrObjGoogle::protobuf **)(v10 + v6 + 8), v14, &__p);
        if ((v46 & 0x80u) == 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        if ((v46 & 0x80u) == 0)
          v16 = v46;
        else
          v16 = v45;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, p_p, v16);
        if ((char)v46 < 0)
          operator delete(__p);
        if (*((_BYTE *)this + 4))
          v17 = " ";
        else
          v17 = "\n";
        v18 = 1;
        goto LABEL_76;
      case 1:
        if ((v43 & 0x80u) == 0)
          v19 = (const char *)&v41;
        else
          v19 = (const char *)v41;
        if ((v43 & 0x80u) == 0)
          v20 = v43;
        else
          v20 = v42;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v19, v20);
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, ": 0x", 4);
        v22 = (const char *)AddrObjGoogle::protobuf::FastHex32ToBuffer((AddrObjGoogle::protobuf *)*(unsigned int *)(v10 + v6 + 8), (uint64_t)&__p, v21);
        v23 = strlen(v22);
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v22, v23);
        if (*((_BYTE *)this + 4))
          v24 = " ";
        else
          v24 = "\n";
        goto LABEL_34;
      case 2:
        if ((v43 & 0x80u) == 0)
          v25 = (const char *)&v41;
        else
          v25 = (const char *)v41;
        if ((v43 & 0x80u) == 0)
          v26 = v43;
        else
          v26 = v42;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v25, v26);
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, ": 0x", 4);
        v28 = (const char *)AddrObjGoogle::protobuf::FastHex64ToBuffer(*(_QWORD *)(v10 + v6 + 8), (uint64_t)&__p, v27);
        v29 = strlen(v28);
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v28, v29);
        if (*((_BYTE *)this + 4))
          v24 = " ";
        else
          v24 = "\n";
LABEL_34:
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v24, 1);
        goto LABEL_82;
      case 3:
        if ((v43 & 0x80u) == 0)
          v30 = (const char *)&v41;
        else
          v30 = (const char *)v41;
        if ((v43 & 0x80u) == 0)
          v31 = v43;
        else
          v31 = v42;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v30, v31);
        v32 = *(_QWORD *)(v10 + v6 + 8);
        AddrObjGoogle::protobuf::UnknownFieldSet::UnknownFieldSet(&v40);
        v33 = *(_BYTE *)(v32 + 23);
        if (v33 < 0)
        {
          if (!*(_QWORD *)(v32 + 8))
            goto LABEL_74;
        }
        else if (!*(_BYTE *)(v32 + 23))
        {
          goto LABEL_74;
        }
        if (v33 >= 0)
          v36 = (const void *)v32;
        else
          v36 = *(const void **)v32;
        if (v33 >= 0)
          v37 = *(unsigned __int8 *)(v32 + 23);
        else
          v37 = *(_DWORD *)(v32 + 8);
        if (!AddrObjGoogle::protobuf::UnknownFieldSet::ParseFromArray((AddrObjGoogle::protobuf::UnknownFieldSet *)&v40, v36, v37))
        {
LABEL_74:
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, ": \"", 3);
          AddrObjGoogle::protobuf::CEscape(v32, &__p);
        }
        if (*((_BYTE *)this + 4))
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, " { ", 3);
        }
        else
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, " {\n", 3);
          std::string::append(v39, "  ");
        }
        AddrObjGoogle::protobuf::TextFormat::Printer::PrintUnknownFields(this, (const AddrObjGoogle::protobuf::UnknownFieldSet *)&v40, (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3);
        if (*((_BYTE *)this + 4))
        {
          v38 = "} ";
        }
        else
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Outdent(a3);
          v38 = "}\n";
        }
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v38, 2);
        AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::UnknownFieldSet *)&v40);
LABEL_82:
        if ((char)v43 < 0)
          operator delete(v41);
        ++v7;
        v6 += 16;
        break;
      case 4:
        if ((v43 & 0x80u) == 0)
          v34 = (const char *)&v41;
        else
          v34 = (const char *)v41;
        if ((v43 & 0x80u) == 0)
          v35 = v43;
        else
          v35 = v42;
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v34, v35);
        if (*((_BYTE *)this + 4))
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, " { ", 3);
        }
        else
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, " {\n", 3);
          std::string::append(v39, "  ");
        }
        AddrObjGoogle::protobuf::TextFormat::Printer::PrintUnknownFields(this, *(const AddrObjGoogle::protobuf::UnknownFieldSet **)(v10 + v6 + 8), (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3);
        if (*((_BYTE *)this + 4))
        {
          v18 = 2;
          v17 = "} ";
        }
        else
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Outdent(a3);
          v18 = 2;
          v17 = "}\n";
        }
LABEL_76:
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a3, v17, v18);
        goto LABEL_82;
      default:
        goto LABEL_82;
    }
  }
}

void sub_1887F767C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  AddrObjGoogle::protobuf::UnknownFieldSet::~UnknownFieldSet((AddrObjGoogle::protobuf::UnknownFieldSet *)&a10);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::PrintField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string *a5)
{
  int v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  unsigned int i;
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *v16;
  const char *v17;
  int v18;
  uint64_t v19;
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *v20;
  const char *v21;
  int v22;

  v10 = *(_DWORD *)(a4 + 48);
  if (*(_BYTE *)(a1 + 5))
  {
    if (v10 == 3)
    {
      if ((AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(a4 + 44)] - 9) >= 2)
        return AddrObjGoogle::protobuf::TextFormat::Printer::PrintShortRepeatedField(a1, a2, a3, (uint64_t *)a4, (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5);
      goto LABEL_6;
    }
  }
  else if (v10 == 3)
  {
LABEL_6:
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, a2, a4);
    goto LABEL_8;
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 40))(a3, a2, a4);
LABEL_8:
  v14 = result;
  if ((int)result >= 1)
  {
    for (i = 0; v14 != i; ++i)
    {
      AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldName(result, v12, v13, (uint64_t *)a4, (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5);
      if (AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(a4 + 44)] == 10)
      {
        if (!*(_BYTE *)(a1 + 4))
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5, " {\n", 3);
          std::string::append(a5 + 1, "  ");
          goto LABEL_15;
        }
        v16 = (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5;
        v17 = " { ";
        v18 = 3;
      }
      else
      {
        v16 = (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5;
        v17 = ": ";
        v18 = 2;
      }
      AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(v16, v17, v18);
LABEL_15:
      if (*(_DWORD *)(a4 + 48) == 3)
        v19 = i;
      else
        v19 = 0xFFFFFFFFLL;
      AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValue(a1, a2, a3, a4, v19, a5);
      v20 = (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5;
      if (AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(a4 + 44)] == 10)
      {
        if (*(_BYTE *)(a1 + 4))
        {
          v21 = "} ";
        }
        else
        {
          AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Outdent(a5);
          v20 = (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)a5;
          v21 = "}\n";
        }
        v22 = 2;
      }
      else
      {
        if (*(_BYTE *)(a1 + 4))
          v21 = " ";
        else
          v21 = "\n";
        v22 = 1;
      }
      result = AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(v20, v21, v22);
    }
  }
  return result;
}

void AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValueToString(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  _BYTE v10[56];
  _QWORD v11[2];

  if (*(char *)(a5 + 23) < 0)
  {
    **(_BYTE **)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 23) = 0;
  }
  AddrObjGoogle::protobuf::io::StringOutputStream::StringOutputStream(v11, a5);
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::TextGenerator((uint64_t)v10, (uint64_t)v11, *a1);
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
  AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValue((AddrObjGoogle::protobuf::TextFormat::Printer *)a1, a2, v9, a3, a4, (AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)v10);
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::~TextGenerator((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)v10);
  AddrObjGoogle::protobuf::io::StringOutputStream::~StringOutputStream((AddrObjGoogle::protobuf::io::StringOutputStream *)v11);
}

void sub_1887F799C(_Unwind_Exception *a1)
{
  uint64_t v1;

  AddrObjGoogle::protobuf::io::StringOutputStream::~StringOutputStream((AddrObjGoogle::protobuf::io::StringOutputStream *)(v1 - 48));
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValue(AddrObjGoogle::protobuf::TextFormat::Printer *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *a6)
{
  uint64_t v8;
  AddrObjGoogle::protobuf *v9;
  char *v10;
  uint64_t v11;
  AddrObjGoogle::protobuf *v12;
  char *v13;
  uint64_t v14;
  AddrObjGoogle::protobuf *v15;
  char *v16;
  uint64_t v17;
  AddrObjGoogle::protobuf *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  double v22;
  uint64_t v23;
  char *v24;
  float v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  const char ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const AddrObjGoogle::protobuf::Message *v33;
  const char *p_p;
  int v35;
  const char *v36;
  int v37;
  int v38;
  uint64_t v39;
  void *v40;
  void *__p;
  uint64_t v42;
  uint64_t v43;

  switch(*(_DWORD *)(a4 + 44))
  {
    case 1:
      v20 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v20 + 320))(a3, a2, a4, a5);
      else
        v22 = (*(double (**)(uint64_t *, uint64_t, uint64_t))(v20 + 144))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleDtoa(v22, v21, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
      goto LABEL_64;
    case 2:
      v23 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v23 + 312))(a3, a2, a4, a5);
      else
        v25 = (*(float (**)(uint64_t *, uint64_t, uint64_t))(v23 + 136))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleFtoa(v25, v24, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
      goto LABEL_64;
    case 3:
    case 0x10:
    case 0x12:
      v11 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v12 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v11 + 288))(a3, a2, a4, a5);
      else
        v12 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v11 + 112))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleItoa(v12, v13, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
      goto LABEL_64;
    case 4:
    case 6:
      v17 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v18 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v17 + 304))(a3, a2, a4, a5);
      else
        v18 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 128))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleItoa(v18, v19, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
      goto LABEL_64;
    case 5:
    case 0xF:
    case 0x11:
      v8 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v9 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v8 + 280))(a3, a2, a4, a5);
      else
        v9 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v8 + 104))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleItoa(v9, v10, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
      goto LABEL_64;
    case 7:
    case 0xD:
      v14 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v15 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v14 + 296))(a3, a2, a4, a5);
      else
        v15 = (AddrObjGoogle::protobuf *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v14 + 120))(a3, a2, a4);
      AddrObjGoogle::protobuf::SimpleItoa(v15, v16, &__p);
      if (v43 >= 0)
        p_p = (const char *)&__p;
      else
        p_p = (const char *)__p;
      if (v43 >= 0)
        v35 = HIBYTE(v43);
      else
        v35 = v42;
LABEL_64:
      AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a6, p_p, v35);
      if (SHIBYTE(v43) < 0)
        operator delete(__p);
      return;
    case 8:
      v26 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v26 + 328))(a3, a2, a4, a5);
      else
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v26 + 152))(a3, a2, a4);
      if (v27)
        v36 = "true";
      else
        v36 = "false";
      if (v27)
        v37 = 4;
      else
        v37 = 5;
      goto LABEL_79;
    case 9:
    case 0xC:
      __p = 0;
      v42 = 0;
      v43 = 0;
      v30 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, void **))(v30 + 360))(a3, a2, a4, a5, &__p);
      else
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, void **))(v30 + 184))(a3, a2, a4, &__p);
      v39 = v31;
      AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a6, "\"", 1);
      if (*((_BYTE *)a1 + 6))
        AddrObjGoogle::protobuf::strings::Utf8SafeCEscape(v39, &v40);
      AddrObjGoogle::protobuf::CEscape(v39, &v40);
    case 0xA:
    case 0xB:
      v32 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v33 = (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v32 + 352))(a3, a2, a4, a5);
      else
        v33 = (const AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD))(v32 + 176))(a3, a2, a4, 0);
      AddrObjGoogle::protobuf::TextFormat::Printer::Print(a1, v33, (std::string *)a6);
      return;
    case 0xE:
      v28 = *a3;
      if (*(_DWORD *)(a4 + 48) == 3)
        v29 = (const char ***)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v28 + 344))(a3, a2, a4, a5);
      else
        v29 = (const char ***)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v28 + 168))(a3, a2, a4);
      v38 = *((char *)*v29 + 23);
      if (v38 >= 0)
        v36 = (const char *)*v29;
      else
        v36 = **v29;
      if (v38 >= 0)
        v37 = *((unsigned __int8 *)*v29 + 23);
      else
        v37 = *((_DWORD *)*v29 + 2);
LABEL_79:
      AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a6, v36, v37);
      break;
    default:
      return;
  }
}

void sub_1887F7EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::PrintShortRepeatedField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *a5)
{
  int v10;
  uint64_t v11;
  const char *v12;

  AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldName(a1, a2, a3, a4, a5);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 48))(a3, a2, a4);
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a5, ": [", 3);
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((_DWORD)v11)
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a5, ", ", 2);
      AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValue(a1, a2, a3, a4, v11, a5);
      v11 = (v11 + 1);
    }
    while (v10 != (_DWORD)v11);
  }
  if (*(_BYTE *)(a1 + 4))
    v12 = "] ";
  else
    v12 = "]\n";
  return AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(a5, v12, 2);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldName(int a1, int a2, int a3, uint64_t *a4, AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *this)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *v13;
  int v14;
  uint64_t v15;
  int v16;

  if (*((_BYTE *)a4 + 52))
  {
    AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(this, "[", 1);
    if (*(_BYTE *)(*(_QWORD *)(a4[7] + 32) + 64)
      && *((_DWORD *)a4 + 11) == 11
      && *((_DWORD *)a4 + 12) == 1
      && (v7 = a4[8], v7 == a4[9]))
    {
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v8 = a4[1];
    }
    v9 = *(char *)(v8 + 23);
    if (v9 >= 0)
      v10 = (const char *)v8;
    else
      v10 = *(const char **)v8;
    if (v9 >= 0)
      LODWORD(v11) = *(unsigned __int8 *)(v8 + 23);
    else
      v11 = *(_QWORD *)(v8 + 8);
    AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(this, v10, v11);
    v12 = "]";
    v13 = this;
    v14 = 1;
  }
  else
  {
    if (*((_DWORD *)a4 + 11) == 10)
      v15 = *(_QWORD *)a4[9];
    else
      v15 = *a4;
    v16 = *(char *)(v15 + 23);
    if (v16 >= 0)
      v12 = (const char *)v15;
    else
      v12 = *(const char **)v15;
    if (v16 >= 0)
      v14 = *(unsigned __int8 *)(v15 + 23);
    else
      v14 = *(_DWORD *)(v15 + 8);
    v13 = this;
  }
  return AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(v13, v12, v14);
}

void AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Outdent(std::string *this)
{
  unint64_t size;
  std::string *v2;
  char v3;
  std::string v4[2];

  if (SHIBYTE(this[1].__r_.__value_.__r.__words[2]) < 0)
  {
    size = this[1].__r_.__value_.__l.__size_;
    if (!size)
    {
LABEL_6:
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v4, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 948);
      v2 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v4, " Outdent() without matching Indent().");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v3, (AddrObjGoogle::protobuf::internal::LogMessage *)v2);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v4[0].__r_.__value_.__l.__data_);
      return;
    }
  }
  else
  {
    size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if (!*((_BYTE *)&this[1].__r_.__value_.__s + 23))
      goto LABEL_6;
  }
  if (size < 2 * SLODWORD(this[2].__r_.__value_.__l.__data_))
    goto LABEL_6;
  std::string::resize(this + 1, size - 2, 0);
}

void sub_1887F81B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::PrintFieldValueToString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4[2];

  *(int *)((char *)v4 + 3) = 0;
  v4[0] = 0;
  AddrObjGoogle::protobuf::TextFormat::Printer::PrintFieldValueToString(v4, a1, a2, a3, a4);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, char a8)
{
  AddrObjGoogle::protobuf::io::Tokenizer *v12;

  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = a6;
  *(_QWORD *)(a1 + 24) = &off_1E1BF5038;
  *(_QWORD *)(a1 + 32) = a1;
  v12 = (AddrObjGoogle::protobuf::io::Tokenizer *)(a1 + 40);
  AddrObjGoogle::protobuf::io::Tokenizer::Tokenizer(a1 + 40, a3, a1 + 24);
  *(_QWORD *)(a1 + 216) = a2;
  *(_DWORD *)(a1 + 224) = a7;
  *(_BYTE *)(a1 + 228) = a8;
  *(_BYTE *)(a1 + 229) = 0;
  *(_BYTE *)(a1 + 204) = 1;
  *(_DWORD *)(a1 + 208) = 1;
  AddrObjGoogle::protobuf::io::Tokenizer::Next(v12);
  return a1;
}

void sub_1887F8294(_Unwind_Exception *a1)
{
  addr_obj::Localization *v1;
  AddrObjGoogle::protobuf::io::Tokenizer *v2;

  AddrObjGoogle::protobuf::io::Tokenizer::~Tokenizer(v2);
  addr_obj::Localization::getDisplayLanguage(v1);
  _Unwind_Resume(a1);
}

void AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserErrorCollector::~ParserErrorCollector(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserErrorCollector *this)
{
  addr_obj::Localization::getDisplayLanguage(this);
  JUMPOUT(0x18D76437CLL);
}

void AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserErrorCollector::AddError(uint64_t a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError(*(uint64_t **)(a1 + 8), a2, a3, a4);
}

void AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ParserErrorCollector::AddWarning(uint64_t a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportWarning(*(uint64_t **)(a1 + 8), a2, a3, a4);
}

void AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportWarning(uint64_t *a1, uint64_t a2, uint64_t a3, const std::string::value_type *a4)
{
  int v5;
  int v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  char v18;
  std::string v19[2];

  v5 = a3;
  v6 = a2;
  v8 = *a1;
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, const std::string::value_type *))(*(_QWORD *)v8 + 24))(v8, a2, a3, a4);
  }
  else
  {
    if ((a2 & 0x80000000) != 0)
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 268);
      v17 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "Warning parsing text-format ");
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v17, *(const std::string::value_type **)(a1[27] + 8));
    }
    else
    {
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)v19, 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 263);
      v9 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v19, "Warning parsing text-format ");
      v10 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v9, *(const std::string::value_type **)(a1[27] + 8));
      v11 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v10, ": ");
      v12 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v11, v6 + 1);
      v13 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v12, ":");
      v14 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v13, v5 + 1);
    }
    v15 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v14, ": ");
    v16 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(v15, a4);
    AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v18, (AddrObjGoogle::protobuf::internal::LogMessage *)v16);
    AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&v19[0].__r_.__value_.__l.__data_);
  }
}

void sub_1887F8428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeField(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this, AddrObjGoogle::protobuf::Message *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  std::string *v10;
  std::string::size_type size;
  uint64_t FieldByName;
  char v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  char v29;
  int v30;
  char v31;
  char v32;
  uint64_t v33;
  std::string *v34;
  __int128 v35;
  uint64_t **v36;
  std::string *v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  int v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 v58;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  uint64_t v63;
  int v64;
  std::string __p[2];
  std::string v66;
  std::string v67;
  std::string v68;
  std::string v69;

  v4 = (uint64_t *)(*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 144))(a2);
  v5 = (*(uint64_t (**)(AddrObjGoogle::protobuf::Message *))(*(_QWORD *)a2 + 152))(a2);
  memset(&v69, 0, sizeof(v69));
  v6 = *((_QWORD *)this + 9);
  std::string::basic_string[abi:ne180100]<0>(__p, "[");
  v7 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
  v8 = v7;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v8)
      goto LABEL_3;
  }
  else if (v7)
  {
LABEL_3:
    if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, &v69))
      goto LABEL_147;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, ".");
      v9 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (!v9)
        break;
      memset(__p, 0, 24);
      if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, __p))
      {
        if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_147;
        v15 = (void *)__p[0].__r_.__value_.__r.__words[0];
        goto LABEL_146;
      }
      std::string::append(&v69, ".");
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = __p;
      else
        v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      else
        size = __p[0].__r_.__value_.__l.__size_;
      std::string::append(&v69, (const std::string::value_type *)v10, size);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "]");
    v13 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)__p);
    v14 = v13;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v14 & 1) == 0)
        goto LABEL_147;
    }
    else if ((v13 & 1) == 0)
    {
      goto LABEL_147;
    }
    v16 = *((_QWORD *)this + 1);
    if (v16)
      v17 = (*(uint64_t (**)(uint64_t, AddrObjGoogle::protobuf::Message *, std::string *))(*(_QWORD *)v16 + 16))(v16, a2, &v69);
    else
      v17 = (*(uint64_t (**)(uint64_t *, std::string *))(*v4 + 528))(v4, &v69);
    FieldByName = v17;
    if (v17)
      goto LABEL_62;
    if (*((_BYTE *)this + 228))
    {
      std::operator+<char>();
      v37 = std::string::append(&v66, "\" is not defined or is not an extension of \"");
      v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      v39 = *(_QWORD *)(v5 + 8);
      v40 = *(char *)(v39 + 23);
      if (v40 >= 0)
        v41 = *(std::string **)(v5 + 8);
      else
        v41 = *(std::string **)v39;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(v39 + 23);
      else
        v42 = *(_QWORD *)(v39 + 8);
      goto LABEL_118;
    }
    std::operator+<char>();
    v61 = std::string::append(&v66, "\" is not defined or is not an extension of \"");
    v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
    v67.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v62;
    v61->__r_.__value_.__l.__size_ = 0;
    v61->__r_.__value_.__r.__words[2] = 0;
    v61->__r_.__value_.__r.__words[0] = 0;
    v63 = *(_QWORD *)(v5 + 8);
    v64 = *(char *)(v63 + 23);
    if (v64 >= 0)
      v53 = *(std::string **)(v5 + 8);
    else
      v53 = *(std::string **)v63;
    if (v64 >= 0)
      v54 = *(unsigned __int8 *)(v63 + 23);
    else
      v54 = *(_QWORD *)(v63 + 8);
LABEL_138:
    v55 = std::string::append(&v67, (const std::string::value_type *)v53, v54);
    v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v68, "\".");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v66.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_147;
    v15 = (void *)v66.__r_.__value_.__r.__words[0];
LABEL_146:
    operator delete(v15);
    goto LABEL_147;
  }
  if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, &v69))
    goto LABEL_147;
  FieldByName = AddrObjGoogle::protobuf::Descriptor::FindFieldByName(v5, (uint64_t)&v69);
  if (!FieldByName)
  {
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(__p, v69.__r_.__value_.__l.__data_, v69.__r_.__value_.__l.__size_);
    else
      __p[0] = v69;
    v18 = (std::string *)((char *)__p + HIBYTE(__p[0].__r_.__value_.__r.__words[2]));
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v19 = __p;
    }
    else
    {
      v18 = (std::string *)(__p[0].__r_.__value_.__r.__words[0] + __p[0].__r_.__value_.__l.__size_);
      v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    }
    while (v19 != v18)
    {
      v20 = v19->__r_.__value_.__s.__data_[0];
      if ((v20 - 65) <= 0x19)
        v19->__r_.__value_.__s.__data_[0] = v20 + 32;
      v19 = (std::string *)((char *)v19 + 1);
    }
    v21 = AddrObjGoogle::protobuf::Descriptor::FindFieldByName(v5, (uint64_t)__p);
    if (v21)
    {
      if (*(_DWORD *)(v21 + 44) == 10)
        FieldByName = v21;
      else
        FieldByName = 0;
    }
    else
    {
      FieldByName = 0;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!FieldByName)
    {
LABEL_111:
      if (!*((_BYTE *)this + 228))
      {
        std::operator+<char>();
        v51 = std::string::append(&v66, "\" has no field named \"");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        v67.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v69;
        else
          v53 = (std::string *)v69.__r_.__value_.__r.__words[0];
        if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
        else
          v54 = v69.__r_.__value_.__l.__size_;
        goto LABEL_138;
      }
      std::operator+<char>();
      v43 = std::string::append(&v66, "\" has no field named \"");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = &v69;
      else
        v41 = (std::string *)v69.__r_.__value_.__r.__words[0];
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v42 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
      else
        v42 = v69.__r_.__value_.__l.__size_;
LABEL_118:
      v45 = std::string::append(&v67, (const std::string::value_type *)v41, v42);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v68.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      v47 = std::string::append(&v68, "\".");
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportWarning((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
      if (!*((_BYTE *)this + 228))
      {
        AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 383);
        v49 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: allow_unknown_field_: ");
        AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v68, (AddrObjGoogle::protobuf::internal::LogMessage *)v49);
        AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, ":");
      if (AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p))
      {
        std::string::basic_string[abi:ne180100]<0>(&v68, "{");
        if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)&v68) & 1) != 0)
        {
          v50 = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v67, "<");
          v50 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)&v67) ^ 1;
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      else
      {
        v50 = 0;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (v50)
          goto LABEL_157;
      }
      else if (v50)
      {
LABEL_157:
        v60 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldValue(this);
LABEL_160:
        v33 = v60;
        goto LABEL_148;
      }
      v60 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldMessage(this);
      goto LABEL_160;
    }
  }
  if (*(_DWORD *)(FieldByName + 44) == 10)
  {
    v22 = **(unsigned __int8 ***)(FieldByName + 72);
    v23 = v22[23];
    if ((v23 & 0x80u) == 0)
      v24 = v22[23];
    else
      v24 = *((_QWORD *)v22 + 1);
    v25 = HIBYTE(v69.__r_.__value_.__r.__words[2]);
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = v69.__r_.__value_.__l.__size_;
    if (v24 != v25)
      goto LABEL_111;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v69;
    else
      v26 = (std::string *)v69.__r_.__value_.__r.__words[0];
    if ((v23 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v22, v26, *((_QWORD *)v22 + 1)))
        goto LABEL_111;
    }
    else if (v22[23])
    {
      while (*v22 == v26->__r_.__value_.__s.__data_[0])
      {
        ++v22;
        v26 = (std::string *)((char *)v26 + 1);
        if (!--v23)
          goto LABEL_62;
      }
      goto LABEL_111;
    }
  }
LABEL_62:
  if (*((_DWORD *)this + 56) == 1
    && *(_DWORD *)(FieldByName + 48) != 3
    && (*(unsigned int (**)(uint64_t *, AddrObjGoogle::protobuf::Message *, uint64_t))(*v4 + 40))(v4, a2, FieldByName))
  {
    std::operator+<char>();
    v27 = std::string::append(&v68, "\" is specified multiple times.");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_147;
    v15 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_146;
  }
  if (AddrObjGoogle::protobuf::FieldDescriptor::kTypeToCppTypeMap[*(unsigned int *)(FieldByName + 44)] == 10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ":");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeFieldMessage((uint64_t *)this, (uint64_t)a2, v4, FieldByName) & 1) == 0)goto LABEL_147;
    goto LABEL_90;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ":");
  v29 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if ((v29 & 1) == 0)
    goto LABEL_147;
  if (*(_DWORD *)(FieldByName + 48) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "[");
    v30 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v30)
    {
      while ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeFieldValue(this, (uint64_t)a2, v4, FieldByName) & 1) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "]");
        v31 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((v31 & 1) != 0)
          goto LABEL_90;
        std::string::basic_string[abi:ne180100]<0>(__p, ",");
        v32 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)__p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v33 = 0;
        if ((v32 & 1) == 0)
          goto LABEL_148;
      }
      goto LABEL_147;
    }
  }
  if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeFieldValue(this, (uint64_t)a2, v4, FieldByName))
  {
LABEL_147:
    v33 = 0;
    goto LABEL_148;
  }
LABEL_90:
  std::string::basic_string[abi:ne180100]<0>(__p, ";");
  if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v68, ",");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&v68);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (*(_BYTE *)(*(_QWORD *)(FieldByName + 96) + 46))
  {
    std::operator+<char>();
    v34 = std::string::append(&v68, "\"");
    v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportWarning((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
  }
  v36 = (uint64_t **)*((_QWORD *)this + 2);
  if (v36)
    AddrObjGoogle::protobuf::TextFormat::ParseInfoTree::RecordLocation(v36, FieldByName, v6);
  v33 = 1;
LABEL_148:
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v69.__r_.__value_.__l.__data_);
  return v33;
}

void sub_1887F8F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a14 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (*(char *)(v37 - 81) < 0)
    operator delete(*(void **)(v37 - 104));
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v7;

  v2 = *(unsigned __int8 *)(a1 + 71);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 71);
  else
    v3 = *(_QWORD *)(a1 + 56);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v7 = (const void **)(a1 + 48);
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*v7, a2, *(_QWORD *)(a1 + 56)))
      goto LABEL_16;
    return 0;
  }
  if (*(_BYTE *)(a1 + 71))
  {
    while (*(unsigned __int8 *)v7 == *a2)
    {
      v7 = (const void **)((char *)v7 + 1);
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  AddrObjGoogle::protobuf::io::Tokenizer::Next((AddrObjGoogle::protobuf::io::Tokenizer *)(a1 + 40));
  return 1;
}

BOOL AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier(uint64_t a1, std::string *this)
{
  AddrObjGoogle::protobuf::io::Tokenizer *v3;
  int v4;
  void *__p[2];
  char v7;

  v3 = (AddrObjGoogle::protobuf::io::Tokenizer *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 2)
  {
    std::string::operator=(this, (const std::string *)(a1 + 48));
    AddrObjGoogle::protobuf::io::Tokenizer::Next(v3);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Expected identifier.");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), (const std::string::value_type *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return v4 == 2;
}

void sub_1887F91E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume(uint64_t a1, unsigned __int8 *a2)
{
  const void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  std::string *v9;
  __int128 v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string v19;
  std::string v20;
  std::string v21;
  __int128 v22;
  std::string::size_type v23;

  v3 = (const void **)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 71);
  if ((v4 & 0x80u) == 0)
    v5 = *(unsigned __int8 *)(a1 + 71);
  else
    v5 = *(_QWORD *)(a1 + 56);
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 == v6)
  {
    if (v7 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v4 & 0x80) == 0)
    {
      if (*(_BYTE *)(a1 + 71))
      {
        v8 = (unsigned __int8 *)(a1 + 48);
        while (*v8 == *a2)
        {
          ++v8;
          ++a2;
          if (!--v4)
            goto LABEL_31;
        }
        goto LABEL_16;
      }
LABEL_31:
      AddrObjGoogle::protobuf::io::Tokenizer::Next((AddrObjGoogle::protobuf::io::Tokenizer *)(a1 + 40));
      return 1;
    }
    if (!memcmp(*v3, a2, *(_QWORD *)(a1 + 56)))
      goto LABEL_31;
  }
LABEL_16:
  std::operator+<char>();
  v9 = std::string::append(&v19, "\", found \"");
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = *(char *)(a1 + 71);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)v3;
  else
    v12 = *(const std::string::value_type **)(a1 + 48);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a1 + 71);
  else
    v13 = *(_QWORD *)(a1 + 56);
  v14 = std::string::append(&v20, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v21, "\".");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v23 = v16->__r_.__value_.__r.__words[2];
  v22 = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), (const std::string::value_type *)&v22);
  if (SHIBYTE(v23) < 0)
    operator delete((void *)v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1887F93B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v13;
  uint64_t result;

  v2 = *(unsigned __int8 *)(a1 + 71);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 71);
  else
    v3 = *(_QWORD *)(a1 + 56);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = (const void **)(a1 + 48);
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, a2, *(_QWORD *)(a1 + 56)) == 0;
  if (!*(_BYTE *)(a1 + 71))
    return 1;
  v7 = v2 - 1;
  do
  {
    v9 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v8 = v9;
    v11 = *a2++;
    v10 = v11;
    v13 = v7-- != 0;
    result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldValue(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this)
{
  AddrObjGoogle::protobuf::io::Tokenizer *v1;
  int v3;
  int v5;
  std::string *p_p;
  std::string *v7;
  int v8;
  std::string::size_type size;
  std::string *v11;
  int data_low;
  int v14;
  void *v16;
  char v17;
  std::string __p;

  v1 = (AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)((char *)this + 40);
  if (*((_DWORD *)this + 10) == 5)
  {
    do
      AddrObjGoogle::protobuf::io::Tokenizer::Next(v1);
    while (*(_DWORD *)v1 == 5);
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "-");
  v3 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((*(_DWORD *)v1 - 3) < 2)
  {
LABEL_7:
    AddrObjGoogle::protobuf::io::Tokenizer::Next(v1);
    return 1;
  }
  if (*(_DWORD *)v1 == 2)
  {
    if (!v3)
      goto LABEL_7;
    if (*((char *)this + 71) < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
    else
      __p = *(std::string *)((_BYTE *)this + 2);
    v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
    else
      v7 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    if (p_p != v7)
    {
      do
      {
        v8 = p_p->__r_.__value_.__s.__data_[0];
        if ((v8 - 65) <= 0x19)
          p_p->__r_.__value_.__s.__data_[0] = v8 + 32;
        p_p = (std::string *)((char *)p_p + 1);
      }
      while (p_p != v7);
      v5 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    if ((v5 & 0x80) != 0)
    {
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ == 3
        && *(_WORD *)__p.__r_.__value_.__l.__data_ == 28265
        && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2) == 102)
      {
LABEL_53:
        if ((v5 & 0x80) == 0)
          goto LABEL_7;
LABEL_54:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_7;
      }
      if (__p.__r_.__value_.__l.__size_ == 8)
      {
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x7974696E69666E69)
          goto LABEL_54;
        size = __p.__r_.__value_.__l.__size_;
      }
      if (size != 3)
      {
LABEL_48:
        std::operator+<char>();
        AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)&v16);
        if (v17 < 0)
          operator delete(v16);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 0;
      }
      v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v5 != 3)
      {
        if (v5 != 8 || __p.__r_.__value_.__r.__words[0] != 0x7974696E69666E69)
          goto LABEL_48;
        goto LABEL_53;
      }
      if (LOWORD(__p.__r_.__value_.__l.__data_) == 28265 && __p.__r_.__value_.__s.__data_[2] == 102)
        goto LABEL_7;
      v11 = &__p;
    }
    data_low = LOWORD(v11->__r_.__value_.__l.__data_);
    v14 = v11->__r_.__value_.__s.__data_[2];
    if (data_low != 24942 || v14 != 110)
      goto LABEL_48;
    goto LABEL_53;
  }
  return 0;
}

void sub_1887F971C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldMessage(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this)
{
  int v2;
  int v3;
  const char *v4;
  char v5;
  char v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *__p[2];
  char v14;
  void *v15[2];
  uint64_t v16;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "<");
  v2 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
  v3 = v2;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v3)
      goto LABEL_3;
  }
  else if (v2)
  {
LABEL_3:
    v4 = ">";
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "{");
  v5 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)__p);
  v6 = v5;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if ((v6 & 1) == 0)
    {
LABEL_20:
      v9 = 0;
      goto LABEL_22;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_20;
  }
  v4 = "}";
LABEL_10:
  MEMORY[0x18D7640AC](v15, v4);
  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, ">");
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)__p) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "}");
      v8 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)v11);
      if (v12 < 0)
        operator delete(v11[0]);
      v7 = v8 ^ 1;
    }
    if (v14 < 0)
      operator delete(__p[0]);
    if (!v7)
      break;
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipField(this) & 1) == 0)
      goto LABEL_20;
  }
  v9 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)v15);
LABEL_22:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return v9;
}

void sub_1887F98C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeFieldMessage(uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  char v9;
  char v10;
  const char *v11;
  char v12;
  char v13;
  uint64_t v14;
  AddrObjGoogle::protobuf::Message *v15;
  AddrObjGoogle::protobuf::Message *v16;
  char v17;
  void *v18;
  uint64_t v19;
  std::string v21;
  std::string v22;
  void *__p[2];
  char v24;
  std::string v25;

  v8 = a1[2];
  if (v8)
    a1[2] = (uint64_t)AddrObjGoogle::protobuf::TextFormat::ParseInfoTree::CreateNested(a1[2], a4);
  memset(&v25, 0, sizeof(v25));
  std::string::basic_string[abi:ne180100]<0>(__p, "<");
  v9 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)a1, (unsigned __int8 *)__p);
  v10 = v9;
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if ((v10 & 1) != 0)
      goto LABEL_5;
  }
  else if ((v9 & 1) != 0)
  {
LABEL_5:
    v11 = ">";
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "{");
  v12 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)a1, (unsigned __int8 *)__p);
  v13 = v12;
  if (v24 < 0)
  {
    operator delete(__p[0]);
    if ((v13 & 1) == 0)
      goto LABEL_26;
  }
  else if ((v12 & 1) == 0)
  {
    goto LABEL_26;
  }
  v11 = "}";
LABEL_12:
  MEMORY[0x18D7640AC](&v25, v11);
  v14 = *a3;
  if (*(_DWORD *)(a4 + 48) == 3)
  {
    v15 = (AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t, _QWORD))(v14 + 520))(a3, a2, a4, 0);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      v22 = v25;
    v17 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeMessage((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)a1, v15, (unsigned __int8 *)&v22);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = (void *)v22.__r_.__value_.__r.__words[0];
      goto LABEL_25;
    }
  }
  else
  {
    v16 = (AddrObjGoogle::protobuf::Message *)(*(uint64_t (**)(uint64_t *, uint64_t, unint64_t, _QWORD))(v14 + 264))(a3, a2, a4, 0);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      v21 = v25;
    v17 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeMessage((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)a1, v16, (unsigned __int8 *)&v21);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    {
      v18 = (void *)v21.__r_.__value_.__r.__words[0];
LABEL_25:
      operator delete(v18);
      if ((v17 & 1) == 0)
        goto LABEL_26;
LABEL_23:
      a1[2] = v8;
      v19 = 1;
      goto LABEL_27;
    }
  }
  if ((v17 & 1) != 0)
    goto LABEL_23;
LABEL_26:
  v19 = 0;
LABEL_27:
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  return v19;
}

void sub_1887F9B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeFieldValue(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  std::string::size_type data_low;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  AddrObjGoogle::protobuf::EnumDescriptor *v18;
  uint64_t ValueByName;
  BOOL v20;
  uint64_t v21;
  std::string *v22;
  std::string *v23;
  int v24;
  char *v25;
  uint64_t v26;
  char v27;
  std::string *v28;
  __int128 v29;
  int v30;
  const std::string::value_type *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  void *v37;
  void (**v38)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  char v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type size;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string __p[2];
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;

  switch(*(_DWORD *)(a4 + 44))
  {
    case 1:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeDouble(a1, (double *)__p);
      if ((_DWORD)result)
      {
        v16.n128_u64[0] = __p[0].__r_.__value_.__r.__words[0];
        v17 = 232;
        if (*(_DWORD *)(a4 + 48) == 3)
          v17 = 488;
        goto LABEL_16;
      }
      return result;
    case 2:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeDouble(a1, (double *)__p);
      if ((_DWORD)result)
      {
        v16.n128_u32[1] = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
        v16.n128_f32[0] = *(double *)&__p[0].__r_.__value_.__l.__data_;
        v17 = 224;
        if (*(_DWORD *)(a4 + 48) == 3)
          v17 = 480;
LABEL_16:
        (*(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(*a3 + v17))(a3, a2, a4, v16);
        return 1;
      }
      return result;
    case 3:
    case 0x10:
    case 0x12:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeSignedInteger(a1, (uint64_t *)__p, 0x7FFFFFFFFFFFFFFFLL);
      if ((_DWORD)result)
      {
        data_low = __p[0].__r_.__value_.__r.__words[0];
        v10 = *a3;
        v14 = *(_DWORD *)(a4 + 48) == 3;
        v12 = 200;
        v15 = 456;
        goto LABEL_10;
      }
      return result;
    case 4:
    case 6:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(a1, (unint64_t *)__p, 0xFFFFFFFFFFFFFFFFLL);
      if ((_DWORD)result)
      {
        data_low = __p[0].__r_.__value_.__r.__words[0];
        v10 = *a3;
        v14 = *(_DWORD *)(a4 + 48) == 3;
        v12 = 216;
        v15 = 472;
LABEL_10:
        if (v14)
          v12 = v15;
        goto LABEL_12;
      }
      return result;
    case 5:
    case 0xF:
    case 0x11:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeSignedInteger(a1, (uint64_t *)__p, 0x7FFFFFFFLL);
      if ((_DWORD)result)
      {
        data_low = LODWORD(__p[0].__r_.__value_.__l.__data_);
        v10 = *a3;
        v11 = *(_DWORD *)(a4 + 48) == 3;
        v12 = 192;
        v13 = 448;
        goto LABEL_24;
      }
      return result;
    case 7:
    case 0xD:
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(a1, (unint64_t *)__p, 0xFFFFFFFFuLL);
      if ((_DWORD)result)
      {
        data_low = LODWORD(__p[0].__r_.__value_.__l.__data_);
        v10 = *a3;
        v11 = *(_DWORD *)(a4 + 48) == 3;
        v12 = 208;
        v13 = 464;
        goto LABEL_24;
      }
      return result;
    case 8:
      if (*((_DWORD *)a1 + 10) != 3)
      {
        memset(__p, 0, 24);
        if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)a1, __p))
          goto LABEL_109;
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          if (__p[0].__r_.__value_.__l.__size_ == 4)
          {
            v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
LABEL_83:
            if (LODWORD(v23->__r_.__value_.__l.__data_) == 1702195828)
            {
LABEL_85:
              v38 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a3 + 240);
              if (*(_DWORD *)(a4 + 48) == 3)
                v38 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a3 + 496);
              v39 = 1;
LABEL_94:
              (*v38)(a3, a2, a4, v39);
              v40 = 1;
              goto LABEL_110;
            }
          }
        }
        else if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) == 4)
        {
          v23 = __p;
          goto LABEL_83;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "t"))
          goto LABEL_85;
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "false")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, "f"))
        {
          v38 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a3 + 240);
          if (*(_DWORD *)(a4 + 48) == 3)
            v38 = (void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a3 + 496);
          v39 = 0;
          goto LABEL_94;
        }
        std::operator+<char>();
        v41 = std::string::append(&v50, "\". Value: \"");
        v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v42;
        v41->__r_.__value_.__l.__size_ = 0;
        v41->__r_.__value_.__r.__words[2] = 0;
        v41->__r_.__value_.__r.__words[0] = 0;
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v43 = __p;
        else
          v43 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        else
          size = __p[0].__r_.__value_.__l.__size_;
        v45 = std::string::append(&v51, (const std::string::value_type *)v43, size);
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v52, "\".");
        v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *((unsigned int *)a1 + 18), *((unsigned int *)a1 + 19), (const std::string::value_type *)&v53);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v50.__r_.__value_.__l.__data_);
LABEL_109:
        v40 = 0;
LABEL_110:
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        return (v40 & 1) != 0;
      }
      __p[0].__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(a1, (unint64_t *)__p, 1uLL);
      if ((_DWORD)result)
      {
        data_low = __p[0].__r_.__value_.__r.__words[0] != 0;
        v10 = *a3;
        v11 = *(_DWORD *)(a4 + 48) == 3;
        v12 = 240;
        v13 = 496;
LABEL_24:
        if (v11)
          v12 = v13;
LABEL_12:
        (*(void (**)(_QWORD *, uint64_t, uint64_t, std::string::size_type))(v10 + v12))(a3, a2, a4, data_low);
        return 1;
      }
      return result;
    case 9:
    case 0xC:
      memset(__p, 0, 24);
      v20 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeString((uint64_t)a1, (uint64_t)__p);
      if (v20)
      {
        v21 = 248;
        if (*(_DWORD *)(a4 + 48) == 3)
          v21 = 504;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, std::string *))(*a3 + v21))(a3, a2, a4, __p);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (!v20)
          return 0;
      }
      else if (!v20)
      {
        return 0;
      }
      return 1;
    case 0xA:
    case 0xB:
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/text_format.cc", 646);
      v22 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(__p, "Reached an unintended state: CPPTYPE_MESSAGE");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v53, (AddrObjGoogle::protobuf::internal::LogMessage *)v22);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
      return 1;
    case 0xE:
      memset(__p, 0, 24);
      v18 = *(AddrObjGoogle::protobuf::EnumDescriptor **)(a4 + 80);
      if (*((_DWORD *)a1 + 10) == 2)
      {
        if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)a1, __p))
          goto LABEL_75;
        ValueByName = AddrObjGoogle::protobuf::EnumDescriptor::FindValueByName((uint64_t)v18, (uint64_t)__p);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, "-");
        if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)a1, (unsigned __int8 *)&v53) & 1) != 0)
        {
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
        }
        else
        {
          v24 = *((_DWORD *)a1 + 10);
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v53.__r_.__value_.__l.__data_);
          if (v24 != 3)
          {
            std::string::basic_string[abi:ne180100]<0>(&v53, "Expected integer or identifier.");
            AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *((unsigned int *)a1 + 18), *((unsigned int *)a1 + 19), (const std::string::value_type *)&v53);
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
            {
              v37 = (void *)v53.__r_.__value_.__r.__words[0];
              goto LABEL_74;
            }
LABEL_75:
            v27 = 1;
            goto LABEL_76;
          }
        }
        v52.__r_.__value_.__r.__words[0] = 0;
        if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeSignedInteger(a1, (uint64_t *)&v52, 0x7FFFFFFFLL) & 1) == 0)goto LABEL_75;
        AddrObjGoogle::protobuf::SimpleItoa((AddrObjGoogle::protobuf *)v52.__r_.__value_.__l.__data_, v25, &v53);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        __p[0] = v53;
        ValueByName = AddrObjGoogle::protobuf::EnumDescriptor::FindValueByNumber(v18, (int)v52.__r_.__value_.__l.__data_);
      }
      if (ValueByName)
      {
        v26 = 256;
        if (*(_DWORD *)(a4 + 48) == 3)
          v26 = 512;
        (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*a3 + v26))(a3, a2, a4, ValueByName);
        v27 = 0;
LABEL_76:
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p[0].__r_.__value_.__l.__data_);
          if ((v27 & 1) != 0)
            return 0;
        }
        else if ((v27 & 1) != 0)
        {
          return 0;
        }
        return 1;
      }
      std::operator+<char>();
      v28 = std::string::append(&v50, "\" for field \"");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = *(char *)(*(_QWORD *)a4 + 23);
      if (v30 >= 0)
        v31 = *(const std::string::value_type **)a4;
      else
        v31 = **(const std::string::value_type ***)a4;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(*(_QWORD *)a4 + 23);
      else
        v32 = *(_QWORD *)(*(_QWORD *)a4 + 8);
      v33 = std::string::append(&v51, v31, v32);
      v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      v35 = std::string::append(&v52, "\".");
      v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *((unsigned int *)a1 + 18), *((unsigned int *)a1 + 19), (const std::string::value_type *)&v53);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v51.__r_.__value_.__l.__data_);
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      {
        v37 = (void *)v50.__r_.__value_.__r.__words[0];
LABEL_74:
        operator delete(v37);
        goto LABEL_75;
      }
      goto LABEL_75;
    default:
      return 1;
  }
}

void sub_1887FA2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (*(char *)(v37 - 57) < 0)
    operator delete(*(void **)(v37 - 80));
  if (a37 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      std::string::__throw_out_of_range[abi:ne180100]();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipField(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this)
{
  int v2;
  int v3;
  int v4;
  std::string *p_p;
  std::string::size_type size;
  char v7;
  int v8;
  uint64_t v9;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string __p;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(&__p, "[");
  v2 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p);
  v3 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v3)
      goto LABEL_3;
  }
  else if (v2)
  {
LABEL_3:
    if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, &v16))
      goto LABEL_35;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, ".");
      v4 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!v4)
        break;
      memset(&__p, 0, sizeof(__p));
      if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, &__p))
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_35;
      }
      std::string::append(&v16, ".");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::append(&v16, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "]");
    v7 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)this, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((v7 & 1) == 0)
      goto LABEL_35;
    goto LABEL_22;
  }
  if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeIdentifier((uint64_t)this, &v16))
    goto LABEL_35;
LABEL_22:
  std::string::basic_string[abi:ne180100]<0>(&__p, ":");
  if (AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p))
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "{");
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)v13) & 1) != 0)
    {
      v8 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "<");
      v8 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)this, (unsigned __int8 *)v11) ^ 1;
      if (v12 < 0)
        operator delete(v11[0]);
    }
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    v8 = 0;
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_34;
LABEL_40:
    if (!AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldMessage(this))
      goto LABEL_35;
    goto LABEL_41;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8)
    goto LABEL_40;
LABEL_34:
  if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::SkipFieldValue(this) & 1) == 0)
  {
LABEL_35:
    v9 = 0;
    goto LABEL_36;
  }
LABEL_41:
  std::string::basic_string[abi:ne180100]<0>(&__p, ";");
  if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, ",");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)v13);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = 1;
LABEL_36:
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1887FA6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v23 - 33) < 0)
    operator delete(*(void **)(v23 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeMessage(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *a1, AddrObjGoogle::protobuf::Message *a2, unsigned __int8 *a3)
{
  int v6;
  int v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  while (1)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, ">");
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)a1, (unsigned __int8 *)v11) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "}");
      v7 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::LookingAt((uint64_t)a1, (unsigned __int8 *)__p);
      if (v10 < 0)
        operator delete(__p[0]);
      v6 = v7 ^ 1;
    }
    if (v12 < 0)
      operator delete(v11[0]);
    if (!v6)
      break;
    if ((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeField(a1, a2) & 1) == 0)
      return 0;
  }
  return AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::Consume((uint64_t)a1, a3);
}

void sub_1887FA830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeSignedInteger(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this, uint64_t *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  void *__p[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(__p, "-");
  v6 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(this, (unint64_t *)__p, a3 + v6);
  if ((result & 1) != 0)
  {
    v8 = (uint64_t)__p[0];
    if (v6)
      v8 = -(uint64_t)__p[0];
    *a2 = v8;
  }
  return result;
}

void sub_1887FA8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this, unint64_t *a2, unint64_t a3)
{
  AddrObjGoogle::protobuf::io::Tokenizer *v4;
  void *__p[2];
  char v7;

  v4 = (AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)((char *)this + 40);
  if (*((_DWORD *)this + 10) == 3)
  {
    if ((AddrObjGoogle::protobuf::io::Tokenizer::ParseInteger((uint64_t)this + 48, a3, a2) & 1) != 0)
    {
      AddrObjGoogle::protobuf::io::Tokenizer::Next(v4);
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Integer out of range.");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Expected integer.");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)__p);
  }
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1887FA9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeDouble(AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *this, double *a2)
{
  uint64_t v4;
  char **v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  std::string *p_p;
  std::string *v12;
  int v13;
  std::string::size_type size;
  std::string *v16;
  int data_low;
  int v19;
  uint64_t v21;
  void *v22[2];
  char v23;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "-");
  v6 = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::TryConsume((uint64_t)this, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *((_DWORD *)this + 10);
  switch(v7)
  {
    case 2:
      if (*((char *)this + 71) < 0)
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
      else
        __p = *(std::string *)((_BYTE *)this + 2);
      v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = (std::string *)((char *)&__p + HIBYTE(__p.__r_.__value_.__r.__words[2]));
      else
        v12 = (std::string *)(__p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      if (p_p != v12)
      {
        do
        {
          v13 = p_p->__r_.__value_.__s.__data_[0];
          if ((v13 - 65) <= 0x19)
            p_p->__r_.__value_.__s.__data_[0] = v13 + 32;
          p_p = (std::string *)((char *)p_p + 1);
        }
        while (p_p != v12);
        v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if ((v10 & 0x80) == 0)
      {
        if (v10 != 3)
        {
          if (v10 != 8 || __p.__r_.__value_.__r.__words[0] != 0x7974696E69666E69)
            goto LABEL_47;
          goto LABEL_52;
        }
        if (LOWORD(__p.__r_.__value_.__l.__data_) != 28265 || __p.__r_.__value_.__s.__data_[2] != 102)
        {
          v16 = &__p;
LABEL_43:
          data_low = LOWORD(v16->__r_.__value_.__l.__data_);
          v19 = v16->__r_.__value_.__s.__data_[2];
          if (data_low != 24942 || v19 != 110)
          {
LABEL_47:
            std::string::basic_string[abi:ne180100]<0>(v22, "Expected double.");
            AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)v22);
            if (v23 < 0)
              operator delete(v22[0]);
            goto LABEL_49;
          }
          v21 = 0x7FF8000000000000;
LABEL_54:
          *(_QWORD *)a2 = v21;
          AddrObjGoogle::protobuf::io::Tokenizer::Next((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)((char *)this + 40));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_56;
        }
LABEL_52:
        v21 = 0x7FF0000000000000;
        goto LABEL_54;
      }
      size = __p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ == 3
        && *(_WORD *)__p.__r_.__value_.__l.__data_ == 28265
        && *(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2) == 102)
      {
        goto LABEL_52;
      }
      if (__p.__r_.__value_.__l.__size_ == 8)
      {
        if (*(_QWORD *)__p.__r_.__value_.__l.__data_ == 0x7974696E69666E69)
          goto LABEL_52;
        size = __p.__r_.__value_.__l.__size_;
      }
      if (size != 3)
        goto LABEL_47;
      v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_43;
    case 3:
      __p.__r_.__value_.__r.__words[0] = 0;
      result = AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeUnsignedInteger(this, (unint64_t *)&__p, 0xFFFFFFFFFFFFFFFFLL);
      if (!(_DWORD)result)
        return result;
      *a2 = (double)__p.__r_.__value_.__r.__words[0];
      goto LABEL_56;
    case 4:
      AddrObjGoogle::protobuf::io::Tokenizer::ParseFloat((uint64_t)this + 48, v4, v5);
      *(_QWORD *)a2 = v8;
      AddrObjGoogle::protobuf::io::Tokenizer::Next((AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl *)((char *)this + 40));
LABEL_56:
      if (v6)
        *a2 = -*a2;
      return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "Expected double.");
  AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)this, *((unsigned int *)this + 18), *((unsigned int *)this + 19), (const std::string::value_type *)&__p);
LABEL_49:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1887FAC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ConsumeString(uint64_t a1, uint64_t a2)
{
  AddrObjGoogle::protobuf::io::Tokenizer *v3;
  int v4;
  uint64_t v6;
  void *__p[2];
  char v9;

  v3 = (AddrObjGoogle::protobuf::io::Tokenizer *)(a1 + 40);
  v4 = *(_DWORD *)(a1 + 40);
  if (v4 == 5)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    if (*(_DWORD *)v3 == 5)
    {
      v6 = a1 + 48;
      do
      {
        AddrObjGoogle::protobuf::io::Tokenizer::ParseStringAppend(v6, (std::string *)a2);
        AddrObjGoogle::protobuf::io::Tokenizer::Next(v3);
      }
      while (*(_DWORD *)v3 == 5);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Expected string.");
    AddrObjGoogle::protobuf::TextFormat::Parser::ParserImpl::ReportError((uint64_t *)a1, *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76), (const std::string::value_type *)__p);
    if (v9 < 0)
      operator delete(__p[0]);
  }
  return v4 == 5;
}

void sub_1887FADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::TextGenerator(uint64_t a1, uint64_t a2, int a3)
{
  std::string *v5;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 20) = 1;
  v5 = (std::string *)std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), "");
  *(_DWORD *)(a1 + 48) = a3;
  std::string::resize(v5, 2 * a3, 32);
  return a1;
}

void sub_1887FAE20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::~TextGenerator(AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *this)
{
  if (!*((_BYTE *)this + 21) && *((int *)this + 4) >= 1)
    (*(void (**)(void))(**(_QWORD **)this + 24))();
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Print(AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *this, const char *a2, int a3)
{
  uint64_t v6;
  int v7;

  if (a3 < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (a2[v6] == 10)
      {
        AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Write((uint64_t)this, &a2[v7], v6++ - v7 + 1);
        *((_BYTE *)this + 20) = 1;
        v7 = v6;
      }
      else
      {
        ++v6;
      }
    }
    while (v6 != a3);
  }
  return AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Write((uint64_t)this, &a2[v7], a3 - v7);
}

uint64_t AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Write(uint64_t this, const char *a2, int a3)
{
  _QWORD *v3;
  int v4;
  const char *v6;
  uint64_t v7;
  int v8;
  void *v9;
  uint64_t v10;
  void *__dst;

  if (a3)
  {
    v3 = (_QWORD *)this;
    if (!*(_BYTE *)(this + 21))
    {
      v4 = a3;
      if (!*(_BYTE *)(this + 20)
        || ((*(_BYTE *)(this + 20) = 0, *(char *)(this + 47) < 0)
          ? (v6 = *(const char **)(this + 24), v7 = *(_QWORD *)(this + 32))
          : (v6 = (const char *)(this + 24), LODWORD(v7) = *(unsigned __int8 *)(this + 47)),
            this = AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator::Write((AddrObjGoogle::protobuf::TextFormat::Printer::TextGenerator *)this, v6, v7), !*((_BYTE *)v3 + 21)))
      {
        v8 = *((_DWORD *)v3 + 4);
        v9 = (void *)v3[1];
        if (v8 >= v4)
        {
LABEL_11:
          this = (uint64_t)memcpy(v9, a2, v4);
          v3[1] += v4;
          *((_DWORD *)v3 + 4) -= v4;
        }
        else
        {
          while (1)
          {
            memcpy(v9, a2, v8);
            v10 = *((int *)v3 + 4);
            __dst = 0;
            this = (*(uint64_t (**)(_QWORD, void **, _QWORD *))(*(_QWORD *)*v3 + 16))(*v3, &__dst, v3 + 2);
            *((_BYTE *)v3 + 21) = this ^ 1;
            if ((this & 1) == 0)
              break;
            v4 -= v10;
            a2 += v10;
            v9 = __dst;
            v3[1] = __dst;
            v8 = *((_DWORD *)v3 + 4);
            if (v4 <= v8)
              goto LABEL_11;
          }
        }
      }
    }
  }
  return this;
}

uint64_t *std::__tree<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::__map_value_compare<AddrObjGoogle::protobuf::FieldDescriptor const*,std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>,std::less<AddrObjGoogle::protobuf::FieldDescriptor const*>,true>,std::allocator<std::__value_type<AddrObjGoogle::protobuf::FieldDescriptor const*,std::vector<AddrObjGoogle::protobuf::TextFormat::ParseLocation>>>>::__emplace_unique_key_args<AddrObjGoogle::protobuf::FieldDescriptor const*,std::piecewise_construct_t const&,std::tuple<AddrObjGoogle::protobuf::FieldDescriptor const* const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t addr_obj::AddressObjectException::AddressObjectException(uint64_t a1, const void **a2, uint64_t a3)
{
  size_t v6;
  std::string *p_p;
  const void *v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string __p;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v6 + 2);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = *a2;
    memmove(p_p, v8, v6);
  }
  strcpy((char *)p_p + v6, ": ");
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = (const std::string::value_type *)a3;
  else
    v10 = *(const std::string::value_type **)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::string::append(&__p, v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1887FB1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *addr_obj::AddressObjectException::what(char *this)
{
  if (this[23] < 0)
    return *(char **)this;
  return this;
}

std::string *addr_obj::AddressObjectException::append(std::string *a1, const std::string *a2)
{
  int v4;
  BOOL v5;
  const std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  void **v13;
  std::string::size_type v14;
  std::string v16;
  void *__p[2];
  int64_t v18;
  char v19;

  v4 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = v4 < 0;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v5)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v8 = (uint64_t)&v6[-1].__r_.__value_.__r.__words[2] + 7;
  while (size)
  {
    if (!memchr(", ;", *(char *)(v8 + size--), 3uLL))
    {
      v10 = size + 1;
      goto LABEL_12;
    }
  }
  v10 = 0;
LABEL_12:
  std::string::basic_string(&v16, a2, 0, v10, (std::allocator<char> *)&v19);
  v11 = std::string::insert(&v16, 0, "; ");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v18 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v18 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if (v18 >= 0)
    v14 = HIBYTE(v18);
  else
    v14 = (std::string::size_type)__p[1];
  std::string::append(a1, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1887FB324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *AddrObjGoogle::protobuf::protobuf_AssignDesc_google_2fprotobuf_2fdescriptor_2eproto(AddrObjGoogle::protobuf *this)
{
  AddrObjGoogle::protobuf::DescriptorPool *v1;
  uint64_t v2;
  uint64_t FileByName;
  uint64_t v4;
  std::string *v5;
  AddrObjGoogle::protobuf::FileDescriptorSet *v6;
  const AddrObjGoogle::protobuf::Descriptor *v7;
  AddrObjGoogle::protobuf::DescriptorPool *v8;
  AddrObjGoogle::protobuf::MessageFactory *v9;
  AddrObjGoogle::protobuf::MessageFactory *v10;
  AddrObjGoogle::protobuf::FileDescriptorProto *v11;
  const AddrObjGoogle::protobuf::Descriptor *v12;
  AddrObjGoogle::protobuf::DescriptorPool *v13;
  AddrObjGoogle::protobuf::MessageFactory *v14;
  AddrObjGoogle::protobuf::MessageFactory *v15;
  AddrObjGoogle::protobuf::DescriptorProto *v16;
  const AddrObjGoogle::protobuf::Descriptor *v17;
  AddrObjGoogle::protobuf::DescriptorPool *v18;
  AddrObjGoogle::protobuf::MessageFactory *v19;
  AddrObjGoogle::protobuf::MessageFactory *v20;
  AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *v21;
  const AddrObjGoogle::protobuf::Descriptor *v22;
  AddrObjGoogle::protobuf::DescriptorPool *v23;
  AddrObjGoogle::protobuf::MessageFactory *v24;
  AddrObjGoogle::protobuf::MessageFactory *v25;
  AddrObjGoogle::protobuf::FieldDescriptorProto *v26;
  const AddrObjGoogle::protobuf::Descriptor *v27;
  AddrObjGoogle::protobuf::DescriptorPool *v28;
  AddrObjGoogle::protobuf::MessageFactory *v29;
  AddrObjGoogle::protobuf::MessageFactory *v30;
  AddrObjGoogle::protobuf::EnumDescriptorProto *v31;
  const AddrObjGoogle::protobuf::Descriptor *v32;
  AddrObjGoogle::protobuf::DescriptorPool *v33;
  AddrObjGoogle::protobuf::MessageFactory *v34;
  AddrObjGoogle::protobuf::MessageFactory *v35;
  AddrObjGoogle::protobuf::EnumValueDescriptorProto *v36;
  const AddrObjGoogle::protobuf::Descriptor *v37;
  AddrObjGoogle::protobuf::DescriptorPool *v38;
  AddrObjGoogle::protobuf::MessageFactory *v39;
  AddrObjGoogle::protobuf::MessageFactory *v40;
  AddrObjGoogle::protobuf::ServiceDescriptorProto *v41;
  const AddrObjGoogle::protobuf::Descriptor *v42;
  AddrObjGoogle::protobuf::DescriptorPool *v43;
  AddrObjGoogle::protobuf::MessageFactory *v44;
  AddrObjGoogle::protobuf::MessageFactory *v45;
  AddrObjGoogle::protobuf::MethodDescriptorProto *v46;
  const AddrObjGoogle::protobuf::Descriptor *v47;
  AddrObjGoogle::protobuf::DescriptorPool *v48;
  AddrObjGoogle::protobuf::MessageFactory *v49;
  AddrObjGoogle::protobuf::MessageFactory *v50;
  AddrObjGoogle::protobuf::FileOptions *v51;
  const AddrObjGoogle::protobuf::Descriptor *v52;
  AddrObjGoogle::protobuf::DescriptorPool *v53;
  AddrObjGoogle::protobuf::MessageFactory *v54;
  AddrObjGoogle::protobuf::MessageFactory *v55;
  AddrObjGoogle::protobuf::MessageOptions *v56;
  const AddrObjGoogle::protobuf::Descriptor *v57;
  AddrObjGoogle::protobuf::DescriptorPool *v58;
  AddrObjGoogle::protobuf::MessageFactory *v59;
  AddrObjGoogle::protobuf::MessageFactory *v60;
  AddrObjGoogle::protobuf::FieldOptions *v61;
  const AddrObjGoogle::protobuf::Descriptor *v62;
  AddrObjGoogle::protobuf::DescriptorPool *v63;
  AddrObjGoogle::protobuf::MessageFactory *v64;
  AddrObjGoogle::protobuf::MessageFactory *v65;
  AddrObjGoogle::protobuf::EnumOptions *v66;
  const AddrObjGoogle::protobuf::Descriptor *v67;
  AddrObjGoogle::protobuf::DescriptorPool *v68;
  AddrObjGoogle::protobuf::MessageFactory *v69;
  AddrObjGoogle::protobuf::MessageFactory *v70;
  AddrObjGoogle::protobuf::EnumValueOptions *v71;
  const AddrObjGoogle::protobuf::Descriptor *v72;
  AddrObjGoogle::protobuf::DescriptorPool *v73;
  AddrObjGoogle::protobuf::MessageFactory *v74;
  AddrObjGoogle::protobuf::MessageFactory *v75;
  AddrObjGoogle::protobuf::ServiceOptions *v76;
  const AddrObjGoogle::protobuf::Descriptor *v77;
  AddrObjGoogle::protobuf::DescriptorPool *v78;
  AddrObjGoogle::protobuf::MessageFactory *v79;
  AddrObjGoogle::protobuf::MessageFactory *v80;
  AddrObjGoogle::protobuf::MethodOptions *v81;
  const AddrObjGoogle::protobuf::Descriptor *v82;
  AddrObjGoogle::protobuf::DescriptorPool *v83;
  AddrObjGoogle::protobuf::MessageFactory *v84;
  AddrObjGoogle::protobuf::MessageFactory *v85;
  AddrObjGoogle::protobuf::UninterpretedOption *v86;
  const AddrObjGoogle::protobuf::Descriptor *v87;
  AddrObjGoogle::protobuf::DescriptorPool *v88;
  AddrObjGoogle::protobuf::MessageFactory *v89;
  AddrObjGoogle::protobuf::MessageFactory *v90;
  AddrObjGoogle::protobuf::UninterpretedOption_NamePart *v91;
  const AddrObjGoogle::protobuf::Descriptor *v92;
  AddrObjGoogle::protobuf::DescriptorPool *v93;
  AddrObjGoogle::protobuf::MessageFactory *v94;
  AddrObjGoogle::protobuf::MessageFactory *v95;
  AddrObjGoogle::protobuf::SourceCodeInfo *v96;
  const AddrObjGoogle::protobuf::Descriptor *v97;
  AddrObjGoogle::protobuf::DescriptorPool *v98;
  AddrObjGoogle::protobuf::MessageFactory *v99;
  AddrObjGoogle::protobuf::MessageFactory *v100;
  AddrObjGoogle::protobuf::SourceCodeInfo_Location *v101;
  const AddrObjGoogle::protobuf::Descriptor *v102;
  AddrObjGoogle::protobuf::DescriptorPool *v103;
  AddrObjGoogle::protobuf::MessageFactory *v104;
  AddrObjGoogle::protobuf::MessageFactory *v105;
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection *result;
  char v107;
  std::string __p[2];

  v1 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto(this);
  v2 = AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v1);
  std::string::basic_string[abi:ne180100]<0>(__p, "google/protobuf/descriptor.proto");
  FileByName = AddrObjGoogle::protobuf::DescriptorPool::FindFileByName(v2, __p);
  v4 = FileByName;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (!v4)
    {
LABEL_5:
      AddrObjGoogle::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/GeoServices/libaddr_obj/cpp/AddrObjGoogle/protobuf/descriptor.pb.cc", 98);
      v5 = AddrObjGoogle::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: file != NULL: ");
      AddrObjGoogle::protobuf::internal::LogFinisher::operator=((uint64_t)&v107, (AddrObjGoogle::protobuf::internal::LogMessage *)v5);
      AddrObjGoogle::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
    }
  }
  else if (!FileByName)
  {
    goto LABEL_5;
  }
  qword_1EDF50650 = *(_QWORD *)(v4 + 80);
  v6 = (AddrObjGoogle::protobuf::FileDescriptorSet *)operator new();
  v7 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50650;
  v8 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::FileDescriptorSet::default_instance_(v6);
  v9 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v8);
  v10 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v9);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v6, v7, v8, &dword_189C5D788, 44, 8, -1, v9, v10, 48);
  qword_1EDF50658 = (uint64_t)v6;
  qword_1EDF50660 = *(_QWORD *)(v4 + 80) + 120;
  v11 = (AddrObjGoogle::protobuf::FileDescriptorProto *)operator new();
  v12 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50660;
  v13 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::FileDescriptorProto::default_instance_(v11);
  v14 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v13);
  v15 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v14);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v11, v12, v13, dword_189C5D78C, 204, 8, -1, v14, v15, 208);
  qword_1EDF50668 = (uint64_t)v11;
  qword_1EDF50670 = *(_QWORD *)(v4 + 80) + 240;
  v16 = (AddrObjGoogle::protobuf::DescriptorProto *)operator new();
  v17 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50670;
  v18 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::DescriptorProto::default_instance_(v16);
  v19 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v18);
  v20 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v19);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v16, v17, v18, dword_189C5D7B8, 156, 8, -1, v19, v20, 160);
  qword_1EDF50678 = (uint64_t)v16;
  qword_1EDF50680 = *(_QWORD *)(qword_1EDF50670 + 64);
  v21 = (AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange *)operator new();
  v22 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50680;
  v23 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::DescriptorProto_ExtensionRange::default_instance_(v21);
  v24 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v23);
  v25 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v24);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v21, v22, v23, (const int *)&unk_189C5D7D4, 28, 8, -1, v24, v25, 32);
  qword_1EDF50688 = (uint64_t)v21;
  qword_1EDF50690 = *(_QWORD *)(v4 + 80) + 360;
  v26 = (AddrObjGoogle::protobuf::FieldDescriptorProto *)operator new();
  v27 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50690;
  v28 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::FieldDescriptorProto::default_instance_(v26);
  v29 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v28);
  v30 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v29);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v26, v27, v28, dword_189C5D7DC, 72, 8, -1, v29, v30, 80);
  qword_1EDF50698 = (uint64_t)v26;
  qword_1EDF506A0 = *(_QWORD *)(qword_1EDF50690 + 80);
  qword_1EDF506A8 = qword_1EDF506A0 + 56;
  qword_1EDF506B0 = *(_QWORD *)(v4 + 80) + 480;
  v31 = (AddrObjGoogle::protobuf::EnumDescriptorProto *)operator new();
  v32 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF506B0;
  v33 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::EnumDescriptorProto::default_instance_(v31);
  v34 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v33);
  v35 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v34);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v31, v32, v33, dword_189C5D7FC, 60, 8, -1, v34, v35, 64);
  qword_1EDF506B8 = (uint64_t)v31;
  qword_1EDF506C0 = *(_QWORD *)(v4 + 80) + 600;
  v36 = (AddrObjGoogle::protobuf::EnumValueDescriptorProto *)operator new();
  v37 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF506C0;
  v38 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::EnumValueDescriptorProto::default_instance_(v36);
  v39 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v38);
  v40 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v39);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v36, v37, v38, dword_189C5D808, 40, 8, -1, v39, v40, 48);
  qword_1EDF506C8 = (uint64_t)v36;
  qword_1EDF506D0 = *(_QWORD *)(v4 + 80) + 720;
  v41 = (AddrObjGoogle::protobuf::ServiceDescriptorProto *)operator new();
  v42 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF506D0;
  v43 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::ServiceDescriptorProto::default_instance_(v41);
  v44 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v43);
  v45 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v44);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v41, v42, v43, dword_189C5D814, 60, 8, -1, v44, v45, 64);
  qword_1EDF506D8 = (uint64_t)v41;
  qword_1EDF506E0 = *(_QWORD *)(v4 + 80) + 840;
  v46 = (AddrObjGoogle::protobuf::MethodDescriptorProto *)operator new();
  v47 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF506E0;
  v48 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::MethodDescriptorProto::default_instance_(v46);
  v49 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v48);
  v50 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v49);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v46, v47, v48, dword_189C5D820, 52, 8, -1, v49, v50, 56);
  qword_1EDF506E8 = (uint64_t)v46;
  qword_1EDF506F0 = *(_QWORD *)(v4 + 80) + 960;
  v51 = (AddrObjGoogle::protobuf::FileOptions *)operator new();
  v52 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF506F0;
  v53 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::FileOptions::default_instance_(v51);
  v54 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v53);
  v55 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v54);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v51, v52, v53, dword_189C5D830, 104, 32, 8, v54, v55, 112);
  qword_1EDF506F8 = (uint64_t)v51;
  qword_1EDF50700 = *(_QWORD *)(qword_1EDF506F0 + 80);
  qword_1EDF50708 = *(_QWORD *)(v4 + 80) + 1080;
  v56 = (AddrObjGoogle::protobuf::MessageOptions *)operator new();
  v57 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50708;
  v58 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::MessageOptions::default_instance_(v56);
  v59 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v58);
  v60 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v59);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v56, v57, v58, dword_189C5D858, 72, 32, 8, v59, v60, 80);
  qword_1EDF50710 = (uint64_t)v56;
  qword_1EDF50718 = *(_QWORD *)(v4 + 80) + 1200;
  v61 = (AddrObjGoogle::protobuf::FieldOptions *)operator new();
  v62 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50718;
  v63 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::FieldOptions::default_instance_(v61);
  v64 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v63);
  v65 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v64);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v61, v62, v63, dword_189C5D864, 84, 32, 8, v64, v65, 88);
  qword_1EDF50720 = (uint64_t)v61;
  qword_1EDF50728 = *(_QWORD *)(qword_1EDF50718 + 80);
  qword_1EDF50730 = *(_QWORD *)(v4 + 80) + 1320;
  v66 = (AddrObjGoogle::protobuf::EnumOptions *)operator new();
  v67 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50730;
  v68 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::EnumOptions::default_instance_(v66);
  v69 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v68);
  v70 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v69);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v66, v67, v68, (const int *)&unk_189C5D880, 72, 32, 8, v69, v70, 80);
  qword_1EDF50738 = (uint64_t)v66;
  qword_1EDF50740 = *(_QWORD *)(v4 + 80) + 1440;
  v71 = (AddrObjGoogle::protobuf::EnumValueOptions *)operator new();
  v72 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50740;
  v73 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::EnumValueOptions::default_instance_(v71);
  v74 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v73);
  v75 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v74);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v71, v72, v73, &dword_189C5D888, 68, 32, 8, v74, v75, 72);
  qword_1EDF50748 = (uint64_t)v71;
  qword_1EDF50750 = *(_QWORD *)(v4 + 80) + 1560;
  v76 = (AddrObjGoogle::protobuf::ServiceOptions *)operator new();
  v77 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50750;
  v78 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::ServiceOptions::default_instance_(v76);
  v79 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v78);
  v80 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v79);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v76, v77, v78, &dword_189C5D88C, 68, 32, 8, v79, v80, 72);
  qword_1EDF50758 = (uint64_t)v76;
  qword_1EDF50760 = *(_QWORD *)(v4 + 80) + 1680;
  v81 = (AddrObjGoogle::protobuf::MethodOptions *)operator new();
  v82 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50760;
  v83 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::MethodOptions::default_instance_(v81);
  v84 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v83);
  v85 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v84);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v81, v82, v83, &dword_189C5D890, 68, 32, 8, v84, v85, 72);
  qword_1EDF50768 = (uint64_t)v81;
  qword_1EDF50770 = *(_QWORD *)(v4 + 80) + 1800;
  v86 = (AddrObjGoogle::protobuf::UninterpretedOption *)operator new();
  v87 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50770;
  v88 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::UninterpretedOption::default_instance_(v86);
  v89 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v88);
  v90 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v89);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v86, v87, v88, dword_189C5D894, 92, 8, -1, v89, v90, 96);
  qword_1EDF50778 = (uint64_t)v86;
  qword_1EDF50780 = *(_QWORD *)(qword_1EDF50770 + 64);
  v91 = (AddrObjGoogle::protobuf::UninterpretedOption_NamePart *)operator new();
  v92 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50780;
  v93 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::UninterpretedOption_NamePart::default_instance_(v91);
  v94 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v93);
  v95 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v94);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v91, v92, v93, (const int *)&unk_189C5D8B0, 32, 8, -1, v94, v95, 40);
  qword_1EDF50788 = (uint64_t)v91;
  qword_1EDF50790 = *(_QWORD *)(v4 + 80) + 1920;
  v96 = (AddrObjGoogle::protobuf::SourceCodeInfo *)operator new();
  v97 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF50790;
  v98 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::SourceCodeInfo::default_instance_(v96);
  v99 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v98);
  v100 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v99);
  AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v96, v97, v98, &dword_189C5D8B8, 44, 8, -1, v99, v100, 48);
  qword_1EDF50798 = (uint64_t)v96;
  qword_1EDF507A0 = *(_QWORD *)(qword_1EDF50790 + 64);
  v101 = (AddrObjGoogle::protobuf::SourceCodeInfo_Location *)operator new();
  v102 = (const AddrObjGoogle::protobuf::Descriptor *)qword_1EDF507A0;
  v103 = (AddrObjGoogle::protobuf::DescriptorPool *)AddrObjGoogle::protobuf::SourceCodeInfo_Location::default_instance_(v101);
  v104 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::DescriptorPool::generated_pool(v103);
  v105 = (AddrObjGoogle::protobuf::MessageFactory *)AddrObjGoogle::protobuf::MessageFactory::generated_factory(v104);
  result = AddrObjGoogle::protobuf::internal::GeneratedMessageReflection::GeneratedMessageReflection(v101, v102, v103, dword_189C5D8BC, 84, 8, -1, v104, v105, 88);
  qword_1EDF507A8 = (uint64_t)v101;
  return result;
}

