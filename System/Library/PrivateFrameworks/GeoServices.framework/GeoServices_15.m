void sub_1894FE200(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FE538(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FE680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FE7C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FEE44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1894FF1F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895009D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavStateCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[5], "readAll:", 1);
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = a1[6];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[10], "readAll:", 1);
  objc_msgSend(a1[11], "readAll:", 1);
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = a1[13];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v13);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
    }
    while (v9);
  }

  return objc_msgSend(a1[8], "readAll:", 1);
}

unint64_t GEOSharedNavStateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 116))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSharedNavStateReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 120));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 112) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 116) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSharedNavStateReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSharedNavStateReadAllFrom_initialTag;
  Specified = GEOSharedNavStateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOSharedNavStateCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 120));
  return Specified;
}

void sub_189500D48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavStateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189500DA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSharedNavStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  _BOOL8 v67;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 == 2 && PBReaderPlaceMark() && GEOMapItemStorageIsValid(a1))
            goto LABEL_105;
          goto LABEL_127;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavETAInfoIsValid(a1))
            goto LABEL_127;
          goto LABEL_105;
        case 3u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavRouteInfoIsValid(a1))
            goto LABEL_127;
          goto LABEL_105;
        case 4u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavSenderInfoIsValid(a1))
            goto LABEL_127;
          goto LABEL_105;
        case 5u:
          if (v16 == 2)
            goto LABEL_40;
          goto LABEL_127;
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v26 = v32++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v26 = v37++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 0xAu:
        case 0xDu:
        case 0x13u:
        case 0x14u:
          if (v16 != 1)
            goto LABEL_127;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_123;
          v20 = v19 + 8;
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_123;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v26 = v42++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v26 = v47++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 0xEu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavWaypointInfoIsValid(a1))
            goto LABEL_127;
          goto LABEL_105;
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v26 = v52++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 0x10u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOSharedNavLocationInfoIsValid(a1))
            goto LABEL_127;
LABEL_105:
          PBReaderRecallMark();
          continue;
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v57 = 0;
          while (1)
          {
            v58 = *v2;
            v59 = *(_QWORD *)&a1[v58];
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
              goto LABEL_122;
            v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
            *(_QWORD *)&a1[v58] = v60;
            if (v61 < 0)
            {
              v26 = v57++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_124;
          }
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_127;
          v62 = 0;
          break;
        default:
LABEL_40:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_127:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v63 = *v2;
        v64 = *(_QWORD *)&a1[v63];
        v65 = v64 + 1;
        if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
          break;
        v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
        *(_QWORD *)&a1[v63] = v65;
        if (v66 < 0)
        {
          v26 = v62++ > 8;
          if (!v26)
            continue;
        }
        goto LABEL_124;
      }
LABEL_122:
      v14 = *v4;
LABEL_123:
      a1[v14] = 1;
LABEL_124:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v67 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v67;
}

BOOL GEOSharedNavWaypointInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2)
          goto LABEL_34;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOSharedNavChargingStationInfoIsValid(a1))
          {
LABEL_34:
            PBReaderRecallMark();
            return 0;
          }
          goto LABEL_30;
        }
        if ((_DWORD)v17 == 1)
        {
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapItemStorageIsValid(a1))
            goto LABEL_34;
LABEL_30:
          PBReaderRecallMark();
          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_34;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189501A8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavStateIsDirty(uint64_t a1)
{
  int v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = *(_DWORD *)(a1 + 148);
  if ((v2 & 0x200000) != 0)
    return 1;
  if ((v2 & 0x4000) != 0)
  {
    if ((GEOMapItemStorageIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(_DWORD *)(a1 + 148);
  }
  if ((v2 & 0x8000) != 0)
    return 1;
  if ((v2 & 0x40000) != 0)
  {
    if (GEOSharedNavRouteInfoIsDirty(*(_QWORD *)(a1 + 80)))
      return 1;
    v2 = *(_DWORD *)(a1 + 148);
  }
  if ((v2 & 0x80000) == 0)
    goto LABEL_12;
  if (GEOSharedNavSenderInfoIsDirty(*(_QWORD *)(a1 + 88)))
    return 1;
  v2 = *(_DWORD *)(a1 + 148);
LABEL_12:
  if ((v2 & 0x130000) != 0)
    return 1;
  if ((v2 & 0x100000) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 104);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEOSharedNavWaypointInfoIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_27;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_27:

  return v3;
}

os_unfair_lock_s *GEOSharedNavStateIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOSharedNavStateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

unint64_t GEOSharedNavStateClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  void *v6;
  int HasSensitiveFields;
  void *v8;
  id *v9;
  unint64_t result;
  unint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  if (a3
    && objc_msgSend(a1, "hasDestinationInfo")
    && (objc_msgSend(a1, "destinationInfo"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v6, a2),
        v6,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "destinationInfo");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id *)objc_msgSend(v8, "copy");

    GEOMapItemStorageClearSensitiveFields(v9, a2, 0);
    objc_msgSend(a1, "setDestinationInfo:", v9);
  }
  else
  {
    objc_msgSend(a1, "destinationInfo");
    v9 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

  -[GEOSharedNavState _readWaypointInfos]((uint64_t)a1);
  result = objc_msgSend(a1[13], "count");
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend(a1[13], "objectAtIndexedSubscript:", i);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = v12;
      if (a3 && GEOSharedNavWaypointInfoHasSensitiveFields(v12, a2))
      {
        v14 = (void *)objc_msgSend(v13, "copy");
        objc_msgSend(v14, "mapItemStorage");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v15, "clearSensitiveFields:", a2);

        objc_msgSend(a1[13], "replaceObjectAtIndex:withObject:", i, v14);
      }
      else
      {
        objc_msgSend(v13, "clearSensitiveFields:", a2);
      }

      result = objc_msgSend(a1[13], "count");
    }
  }
  return result;
}

uint64_t GEOSharedNavStateHasSensitiveFields(void *a1, uint64_t a2)
{
  void *v4;
  char HasSensitiveFields;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  objc_msgSend(a1, "destinationInfo");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v4, a2);

  if ((HasSensitiveFields & 1) != 0)
    return 1;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  objc_msgSend(a1, "waypointInfos", 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    while (2)
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        if ((GEOSharedNavWaypointInfoHasSensitiveFields(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v11), a2) & 1) != 0)
        {
          v6 = 1;
          goto LABEL_15;
        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v9)
        continue;
      break;
    }
  }
  v6 = 0;
LABEL_15:

  return v6;
}

void *GEOSharedNavWaypointInfoHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "mapItemStorage");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOSharedNavWaypointInfoClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id *v8;

  if (a3
    && objc_msgSend(a1, "hasMapItemStorage")
    && (objc_msgSend(a1, "mapItemStorage"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOMapItemStorageHasSensitiveFields((uint64_t)v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "mapItemStorage");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id *)objc_msgSend(v7, "copy");

    GEOMapItemStorageClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setMapItemStorage:", v8);
  }
  else
  {
    objc_msgSend(a1, "mapItemStorage");
    v8 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void sub_189502B28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189503844(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189503CA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOMapItemStorage *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v54 = v17;
        v55 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v56 = (v19 == 0) | v18;
        v57 = v18;
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_73;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_73:
      v52 = 1;
      goto LABEL_74;
    }
    v33 = v25 >> 3;
    v34 = v57;
    if ((v56 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 3)
    {
      if (!v34)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        PBReaderReadString();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v41;
        goto LABEL_55;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v47 = 16 * *(_BYTE *)(a1 + 60);
      goto LABEL_70;
    }
    if ((_DWORD)v33 == 2)
      break;
    if ((_DWORD)v33 == 1)
    {
      if (!v34)
        goto LABEL_62;
      if ((*(_BYTE *)(a1 + 60) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v39 = objc_alloc_init(GEOMapItemStorage);
        if (!GEOMapItemStorageReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_89;
        PBReaderRecallMark();
        v40 = 32;
LABEL_54:
        v42 = *(void **)(a1 + v40);
        *(_QWORD *)(a1 + v40) = v39;
LABEL_55:

        --v7;
LABEL_71:
        v21 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_72;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_90;
      v47 = 32 * *(_BYTE *)(a1 + 60);
LABEL_70:
      v7 += v47 >> 7;
      goto LABEL_71;
    }
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_62:
      v46 = PBReaderSkipValueWithTag();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v52 = 0;
        goto LABEL_74;
      }
      goto LABEL_72;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_75;
    }
LABEL_72:
    if (!(v55 & 1 | (v7 != 0)))
      goto LABEL_73;
  }
  if (!v34)
    goto LABEL_62;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_90;
    v47 = *(_BYTE *)(a1 + 60) << 6;
    goto LABEL_70;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_90;
  v39 = objc_alloc_init(GEOSharedNavChargingStationInfo);
  if (GEOSharedNavChargingStationInfoReadAllFrom((uint64_t)v39, (void *)v3))
  {
    PBReaderRecallMark();
    v40 = 24;
    goto LABEL_54;
  }
LABEL_89:

LABEL_90:
  v52 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v54 & 1) == 0)
    goto LABEL_76;
LABEL_75:
  *(_BYTE *)(a1 + v53[135]) |= 1u;
LABEL_76:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[135]) |= 4u;
    *(_BYTE *)(a1 + v53[135]) |= 2u;
    *(_BYTE *)(a1 + v53[135]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      v48 = *v19++;
      v49 = 4;
      switch(v48)
      {
        case 0:
          goto LABEL_83;
        case 1:
          goto LABEL_82;
        case 2:
          v49 = 2;
          goto LABEL_82;
        case 3:
          v49 = 8;
LABEL_82:
          *(_BYTE *)(a1 + v53[135]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_83:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1895043CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189504510(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189504BA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSharedNavWaypointInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSharedNavWaypointInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSharedNavWaypointInfoReadAllFrom_initialTag;
  Specified = GEOSharedNavWaypointInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189504D5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSharedNavWaypointInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSharedNavWaypointInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189504DBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189504F60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOSharedNavWaypointInfoIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 60);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((v2 & 4) != 0)
  {
    if ((GEOMapItemStorageIsDirty(*(os_unfair_lock_s **)(a1 + 32)) & 1) != 0)
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 60);
  }
  if ((v2 & 2) == 0)
    return (v2 >> 3) & 1;
  return 1;
}

os_unfair_lock_s *GEOSharedNavWaypointInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOSharedNavWaypointInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1895052D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189505568(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsPhotoSizeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTraitsPhotoSizeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189505B50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTraitsTransitScheduleFilterReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTraitsTransitScheduleFilterReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189506374(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleModeFilterIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0 && v17++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOTraitsTransitScheduleTimeRangeIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

BOOL GEOTraitsTransitScheduleTimeRangeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v16 != 1)
          goto LABEL_30;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_30:
        v21 = 0;
        goto LABEL_29;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_29:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOTraitsTransitScheduleFilterIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_189506B68(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleModeFilterReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTraitsTransitScheduleModeFilterReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189507120(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTraitsTransitScheduleTimeRangeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTraitsTransitScheduleTimeRangeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895078B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189507DB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLCollectionStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  GEOCollectionPlace *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v8;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v9) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_60;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_60:
      v52 = 1;
      goto LABEL_61;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (!v35)
        goto LABEL_54;
      if ((*(_BYTE *)(a1 + 52) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_80;
        v10 += *(unsigned __int8 *)(a1 + 52) << 30 >> 31;
      }
      else
      {
        PBReaderReadString();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v40;

        --v10;
      }
      goto LABEL_58;
    }
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 52) & 1) != 0)
      goto LABEL_54;
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_62;
    }
LABEL_59:
    if (!(v55 & 1 | (v10 != 0)))
      goto LABEL_60;
  }
  if (!v35 || (*(_BYTE *)(a1 + 52) & 4) != 0)
  {
LABEL_54:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v52 = 0;
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_80;
  v42 = objc_alloc_init(GEOCollectionPlace);
  if (GEOCollectionPlaceReadAllFrom((uint64_t)v42, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEOURLCollectionStorage _addNoFlagsPlace:](a1, v42);

LABEL_58:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_59;
  }

LABEL_80:
  v52 = 0;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v54 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v53[165]) |= 1u;
LABEL_63:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[165]) |= 2u;
    *(_BYTE *)(a1 + v53[165]) |= 4u;
    goto LABEL_73;
  }
  if (v20)
  {
    while (1)
    {
      v49 = *v20++;
      v48 = v49;
      if (v49 == 1)
        break;
      if (v48 == 2)
      {
        v47 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v53[165]) |= v47;
      }
      else if (!v48)
      {
        goto LABEL_73;
      }
    }
    v47 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1895083F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189508D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOURLCollectionStorageCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOURLCollectionStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOURLCollectionStorageReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOURLCollectionStorageReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOURLCollectionStorageReadAllFrom_initialTag;
  Specified = GEOURLCollectionStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOURLCollectionStorageCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189508FC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLCollectionStorageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOURLCollectionStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189509020(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLCollectionStorageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOCollectionPlaceIsValid(a1))
          goto LABEL_29;
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189509434(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOURLCollectionStorageIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xE) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOCollectionPlaceIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOURLCollectionStorageIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOURLCollectionStorageIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189509A28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189509D10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18950A034(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOStyleAttributes *v40;
  uint64_t v41;
  id v42;
  void *v43;
  int v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  int v50;
  char v51;
  void *v52;
  int v54;
  int *v55;
  char v56;
  char v57;
  char v58;
  BOOL v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFCFFFEFFFDFFFFLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 2;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v56 = v17;
        v19 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v59 = v18;
        v57 = v19;
        v58 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_77;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_77:
      v54 = 1;
      goto LABEL_78;
    }
    v34 = v26 >> 3;
    v35 = v59;
    if ((v58 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_95;
          v40 = objc_alloc_init(GEOStyleAttributes);
          if (GEOStyleAttributesReadAllFrom((uint64_t)v40, (void *)v3))
          {
            PBReaderRecallMark();
            v41 = 40;
            goto LABEL_55;
          }
          goto LABEL_94;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_95;
        v49 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_74;
      case 2:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 68) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_95;
          v49 = *(_BYTE *)(a1 + 68) << 6;
LABEL_74:
          v7 += v49 >> 7;
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_95;
        v40 = objc_alloc_init(GEOMapRegion);
        if (GEOMapRegionReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          v41 = 24;
LABEL_55:
          v45 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v40;
LABEL_63:

          --v7;
LABEL_75:
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
          if (!(v57 & 1 | (v7 != 0)))
            goto LABEL_77;
          continue;
        }
LABEL_94:

LABEL_95:
        v54 = 0;
        v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
        v55 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        if ((v56 & 1) != 0)
LABEL_79:
          *(_BYTE *)(a1 + v55[173]) |= 1u;
        if (v59 || (v54 & 1) == 0)
        {
          *(_BYTE *)(a1 + v55[173]) |= 8u;
          *(_BYTE *)(a1 + v55[173]) |= 2u;
          *(_BYTE *)(a1 + v55[173]) |= 4u;
          *(_BYTE *)(a1 + v55[173]) |= 0x10u;
        }
        else if (v20)
        {
          while (1)
          {
            v50 = *v20++;
            v51 = 8;
            switch(v50)
            {
              case 0:
                goto LABEL_88;
              case 1:
                goto LABEL_87;
              case 2:
                v51 = 2;
                goto LABEL_87;
              case 3:
                v51 = 4;
                goto LABEL_87;
              case 4:
                v51 = 16;
LABEL_87:
                *(_BYTE *)(a1 + v55[173]) |= v51;
                break;
              default:
                continue;
            }
          }
        }
LABEL_88:
        if (v54)
          v3 = *(_BYTE *)(v3 + *v22) == 0;
        else
          v3 = 0;
        if (v59)
        {
          v52 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 3:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 68) & 4) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 32;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_95;
        v49 = 32 * *(_BYTE *)(a1 + 68);
        goto LABEL_74;
      case 4:
        if (!v35)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = 48;
LABEL_62:
          v45 = *(void **)(a1 + v47);
          *(_QWORD *)(a1 + v47) = v46;
          goto LABEL_63;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_95;
        v49 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_74;
      default:
        if ((v56 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 1) != 0)
        {
LABEL_64:
          v48 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if ((v48 & 1) == 0)
          {
            v54 = 0;
            goto LABEL_78;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v43 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v42;

          }
          v44 = PBUnknownFieldAdd();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          if (!v44)
          {
            v54 = 0;
            v55 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
            goto LABEL_79;
          }
        }
        goto LABEL_76;
    }
  }
}

void sub_18950A7F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18950A930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18950AA74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18950B184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOURLExtraStorageReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOURLExtraStorageReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOURLExtraStorageReadAllFrom_initialTag;
  Specified = GEOURLExtraStorageReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18950B33C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOURLExtraStorageReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOURLExtraStorageReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18950B39C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLExtraStorageIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOStyleAttributesIsValid(a1))
            goto LABEL_26;
          goto LABEL_33;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_33;
LABEL_26:
          PBReaderRecallMark();
          goto LABEL_31;
        case 3u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 4u:
          if (v15 == 2)
            goto LABEL_30;
          goto LABEL_33;
        default:
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            PBReaderRecallMark();
            return 0;
          }
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_32;
          break;
      }
    }
  }
LABEL_32:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_18950B7AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOURLExtraStorageIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_18950BAE8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18950BDD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  id v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _BOOL8 v49;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v18;

            continue;
          case 2u:
            v22 = 0;
            v23 = 0;
            v24 = 0;
            *(_BYTE *)(a1 + 44) |= 8u;
            while (1)
            {
              v25 = *v4;
              v26 = *(_QWORD *)&v3[v25];
              v27 = v26 + 1;
              if (v26 == -1 || v27 > *(_QWORD *)&v3[*v5])
                break;
              v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if ((v28 & 0x80) == 0)
                goto LABEL_54;
              v22 += 7;
              v15 = v23++ >= 9;
              if (v15)
              {
                LODWORD(v24) = 0;
                goto LABEL_56;
              }
            }
            v3[*v6] = 1;
LABEL_54:
            if (v3[*v6])
              LODWORD(v24) = 0;
LABEL_56:
            v48 = 40;
            goto LABEL_69;
          case 3u:
            v29 = 0;
            v30 = 0;
            v24 = 0;
            *(_BYTE *)(a1 + 44) |= 4u;
            while (2)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
                *(_QWORD *)&v3[v31] = v33;
                v24 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  v15 = v30++ >= 9;
                  if (v15)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v24) = 0;
LABEL_60:
            v48 = 36;
            goto LABEL_69;
          case 4u:
            v35 = 0;
            v36 = 0;
            v37 = 0;
            *(_BYTE *)(a1 + 44) |= 1u;
            while (2)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
                *(_QWORD *)&v3[v38] = v40;
                v37 |= (unint64_t)(v41 & 0x7F) << v35;
                if (v41 < 0)
                {
                  v35 += 7;
                  v15 = v36++ >= 9;
                  if (v15)
                  {
                    v37 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v37 = 0;
LABEL_64:
            *(_QWORD *)(a1 + 24) = v37;
            continue;
          case 5u:
            v42 = 0;
            v43 = 0;
            v24 = 0;
            *(_BYTE *)(a1 + 44) |= 2u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v20 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v21 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v20;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_72;
            continue;
        }
        while (1)
        {
          v44 = *v4;
          v45 = *(_QWORD *)&v3[v44];
          v46 = v45 + 1;
          if (v45 == -1 || v46 > *(_QWORD *)&v3[*v5])
            break;
          v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v45);
          *(_QWORD *)&v3[v44] = v46;
          v24 |= (unint64_t)(v47 & 0x7F) << v42;
          if ((v47 & 0x80) == 0)
            goto LABEL_66;
          v42 += 7;
          v15 = v43++ >= 9;
          if (v15)
          {
            LODWORD(v24) = 0;
            goto LABEL_68;
          }
        }
        v3[*v6] = 1;
LABEL_66:
        if (v3[*v6])
          LODWORD(v24) = 0;
LABEL_68:
        v48 = 32;
LABEL_69:
        *(_DWORD *)(a1 + v48) = v24;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v49 = v3[*v6] == 0;
  }
  else
  {
LABEL_72:
    v49 = 0;
  }
  objc_sync_exit(v3);

  return v49;
}

void sub_18950CB9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWifiAccessPointReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18950CBFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWifiAccessPointIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  _BOOL8 v38;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_58;
          goto LABEL_20;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_54;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_55;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_54;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_55;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_54;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_55;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_58;
          v33 = 0;
          break;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_58:
          v38 = 0;
          goto LABEL_57;
      }
      while (1)
      {
        v34 = *v2;
        v35 = *(_QWORD *)&a1[v34];
        v36 = v35 + 1;
        if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
          break;
        v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
        *(_QWORD *)&a1[v34] = v36;
        if (v37 < 0)
        {
          v22 = v33++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_55;
      }
LABEL_54:
      a1[*v4] = 1;
LABEL_55:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v38 = a1[*v4] == 0;
LABEL_57:
  PBReaderRecallMark();
  return v38;
}

uint64_t GEOZlibCompress(const Bytef *a1, uLong sourceLen, Bytef **a3, _QWORD *a4)
{
  uint64_t result;
  uLong v9;
  Bytef *v10;
  uLongf destLen;

  if (sourceLen <= 0x400000)
  {
    v9 = compressBound(sourceLen);
    v10 = (Bytef *)malloc_type_malloc(v9 + 4, 0x336E8924uLL);
    *a3 = v10;
    *(_DWORD *)v10 = sourceLen;
    destLen = v9;
    result = j__compress(v10 + 4, &destLen, a1, sourceLen);
    if ((_DWORD)result)
      result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "compress returned %d\n", result);
    *a4 = v9 + 4;
  }
  else
  {
    result = fprintf((FILE *)*MEMORY[0x1E0C80C10], "Refusing to compress more than %d bytes\n", 0x400000);
    *a3 = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t GEOZlibUncompress(const Bytef *a1, uLong a2, Bytef **a3, uLongf *a4)
{
  uint64_t v6;
  size_t v8;
  Bytef *v10;
  uLongf destLen;

  if (a2 > 4)
  {
    v8 = *(unsigned int *)a1;
    *a4 = v8;
    if ((_DWORD)v8)
    {
      v10 = (Bytef *)malloc_type_malloc(v8, 0x67729DC6uLL);
      *a3 = v10;
      destLen = *a4;
      v6 = uncompress(v10, &destLen, a1 + 4, a2);
      if ((_DWORD)v6)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "uncompress returned %d\n", v6);
    }
    else
    {
      v6 = 0;
      *a3 = 0;
    }
  }
  else
  {
    v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

void GEOGunzip()
{
  Bytef *v0;
  _QWORD *v1;
  _QWORD *v2;
  char **v3;
  char **v4;
  size_t v5;
  size_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  char **v18;
  z_stream strm;
  _BYTE __src[4096];
  uint64_t v21;

  v0 = (Bytef *)MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v21 = *MEMORY[0x1E0C80C00];
  memset(&strm.avail_in, 0, 104);
  strm.next_in = v0;
  strm.avail_in = v5;
  *v3 = 0;
  *v1 = 0;
  v7 = inflateInit2_(&strm, 31, "1.2.12", 112);
  if (v7)
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "inflateInit returned %d\n", v7);
  }
  else
  {
    v18 = v4;
    v8 = 2;
    do
    {
      v9 = v8;
      v8 *= 2;
    }
    while (v9 < v6);
    v10 = (char *)malloc_type_malloc(v9, 0x258F46BuLL);
    v11 = 0;
    while (1)
    {
      strm.next_out = __src;
      strm.avail_out = 4096;
      v12 = inflate(&strm, 0);
      if (v12 > 1)
        break;
      v13 = v12;
      if (strm.avail_out != 4096)
      {
        v14 = 4096 - strm.avail_out;
        v15 = v9;
        do
        {
          v16 = v15;
          v15 *= 2;
        }
        while (v16 < v14 + v11);
        if (v16 == v9)
        {
          v16 = v9;
          v17 = v10;
        }
        else
        {
          v17 = (char *)malloc_type_realloc(v10, v16, 0xE08AFCFDuLL);
          if (!v17)
          {
            free(v10);
            v10 = 0;
            break;
          }
        }
        memcpy(&v17[v11], __src, v14);
        v9 = v16;
        v10 = v17;
        v11 += v14;
      }
      if (v13)
      {
        inflateEnd(&strm);
        goto LABEL_18;
      }
    }
    inflateEnd(&strm);
    free(v10);
    v10 = 0;
    v11 = 0;
LABEL_18:
    *v18 = v10;
    *v2 = v11;
  }
}

BOOL GEOBZ2Compress(char *a1, unint64_t a2, char **a3, _QWORD *a4)
{
  _BOOL8 v6;
  unsigned int v7;
  unint64_t v9;
  char *v10;
  int v11;
  unsigned int destLen;

  if (a2 <= 0x400000)
  {
    v7 = a2;
    v9 = (unint64_t)(float)((float)a2 * 1.01);
    v10 = (char *)malloc_type_malloc(v9 + 604, 0x3E9104E2uLL);
    *a3 = v10;
    *(_DWORD *)v10 = v7;
    destLen = v9 + 600;
    v11 = BZ2_bzBuffToBuffCompress(v10 + 4, &destLen, a1, v7, 1, 0, 0);
    v6 = v11 == 0;
    if (v11)
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bzip2 compress returned %d\n", v11);
    *a4 = destLen + 4;
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "Refusing to compress with Bzip2 more than %d bytes\n", 0x400000);
    v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

uint64_t GEOBZ2Uncompress(char *a1, unint64_t a2, char **a3, uint64_t *a4)
{
  _BOOL8 v6;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  int v11;
  unsigned int destLen;

  if (a2 > 4)
  {
    v8 = *(unsigned int *)a1;
    if (v8 <= 0x400000)
    {
      v9 = a2;
      v10 = (char *)malloc_type_malloc(*(unsigned int *)a1, 0x1911B595uLL);
      *a3 = v10;
      *a4 = v8;
      destLen = v8;
      v11 = BZ2_bzBuffToBuffDecompress(v10, &destLen, a1 + 4, v9, 0, 0);
      v6 = v11 == 0;
      if (v11)
        fprintf((FILE *)*MEMORY[0x1E0C80C10], "Bzip2 uncompress returned %d\n", v11);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Uncompressed data from Bzip2 exceeds max size with total of %d bytes\n", v8);
      *a3 = 0;
      *a4 = 0;
      return 1;
    }
  }
  else
  {
    v6 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  return v6;
}

uint64_t GEODecompressFileHandleToFileHandle(void *a1, unint64_t a2, void *a3, compression_algorithm a4, id *a5)
{
  void *v8;
  id v9;
  _BOOL4 v10;
  uint64_t *v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  compression_status v21;
  char v22;
  id v23;
  id v24;
  int v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v31;
  id v32;
  void (**v33)(void);
  id v34;
  id v36;
  id v37;
  _QWORD v38[6];
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  const char *v42;
  compression_stream v43;

  v31 = a1;
  v32 = a3;
  v8 = malloc_type_malloc(0x8000uLL, 0x4B2734EBuLL);
  v39 = 0;
  v40 = &v39;
  v41 = 0x4810000000;
  v42 = "";
  memset(&v43, 0, sizeof(v43));
  if (compression_stream_init(&v43, COMPRESSION_STREAM_DECODE, a4) == COMPRESSION_STATUS_ERROR)
  {
    free(v8);
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Unable to initialize the compression stream"));
      v29 = objc_claimAutoreleasedReturnValue();
      v28 = 0;
      v34 = *a5;
      *a5 = (id)v29;

    }
    else
    {
      v28 = 0;
    }
    goto LABEL_32;
  }
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __GEODecompressFileHandleToFileHandle_block_invoke;
  v38[3] = &unk_1E1C0FF00;
  v38[4] = &v39;
  v38[5] = v8;
  v33 = (void (**)(void))MEMORY[0x18D765024](v38);
  v9 = 0;
  v10 = 0;
  v11 = v40;
  v40[4] = (uint64_t)v8;
  v11[5] = 0x8000;
  do
  {
    v12 = (void *)MEMORY[0x18D764E2C]();
    v13 = v40;
    if (!v40[7])
    {
      if (a2 >= 0x8000)
        v14 = 0x8000;
      else
        v14 = a2;
      v37 = 0;
      objc_msgSend(v31, "readDataUpToLength:error:", v14, &v37, v31);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v37;
      v17 = v37;

      if (a5)
        objc_storeStrong(a5, v16);
      if (!v15)
      {
        v33[2]();
        v9 = 0;
        v25 = 1;
LABEL_24:

        goto LABEL_25;
      }
      v10 = (unint64_t)objc_msgSend(v15, "length") < 0x8000;
      v18 = objc_msgSend(v15, "length");
      v19 = objc_msgSend(v15, "length");
      v40[7] = v19;
      v9 = objc_retainAutorelease(v15);
      v20 = objc_msgSend(v9, "bytes");
      a2 -= v18;
      v40[6] = v20;

      v13 = v40;
    }
    v13[4] = (uint64_t)v8;
    v13[5] = 0x8000;
    v21 = compression_stream_process((compression_stream *)(v13 + 4), v10);
    if (v21 != COMPRESSION_STATUS_ERROR)
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:freeWhenDone:", v8, 0x8000 - v40[5], 0);
      v17 = (id)objc_claimAutoreleasedReturnValue();
      v36 = 0;
      v22 = objc_msgSend(v32, "writeData:error:", v17, &v36);
      v23 = v36;
      v24 = v36;
      if ((v22 & 1) != 0)
      {
        if (v21 == COMPRESSION_STATUS_END)
          v25 = 3;
        else
          v25 = 0;
      }
      else
      {
        if (a5)
          objc_storeStrong(a5, v23);
        v33[2]();
        v25 = 1;
      }

      goto LABEL_24;
    }
    if (a5)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "GEOErrorWithCode:reason:", -10, CFSTR("Received error while decompressing"));
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = *a5;
      *a5 = (id)v26;

    }
    v33[2]();
    v25 = 1;
LABEL_25:
    objc_autoreleasePoolPop(v12);
  }
  while (!v25);
  if (v25 == 3)
  {
    v33[2]();
    v28 = 1;
  }
  else
  {
    v28 = 0;
  }

LABEL_32:
  _Block_object_dispose(&v39, 8);

  return v28;
}

void sub_18950E0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void geo::MapNodeTransit::~MapNodeTransit(void **this)
{
  *this = off_1E1BF6930;
  GEOVectorTileRelease(this[3]);

}

{
  *this = off_1E1BF6930;
  GEOVectorTileRelease(this[3]);

  JUMPOUT(0x18D76437CLL);
}

uint64_t geo::MapNodeTransit::toString(geo::MapNodeTransit *this)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v9);
  v2 = *((_QWORD *)this + 5);
  v3 = *(const char **)(v2 + 16);
  if (v3)
  {
    v4 = strlen(*(const char **)(v2 + 16));
  }
  else
  {
    v3 = "unnamed node";
    v4 = 12;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  v6 = (_QWORD *)std::ostream::operator<<();
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)")", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" id:", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v9[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v11);
}

void sub_18950E308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

GEOMapEdgeTransitConnectionFinder *geo::MapNodeTransit::findEdgesOut(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  GEOMapEdgeTransitConnectionFinder *v10;
  GEOMapEdgeTransitConnectionFinder *v11;
  GEOMapEdgeTransitConnectionFinder *v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = -[GEOMapEdgeConnectionFinder initWithMap:tile:junction:coordinate:]([GEOMapEdgeTransitConnectionFinder alloc], "initWithMap:tile:junction:coordinate:", v7, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(double *)(a1 + 8), *(double *)(a1 + 16));
    -[GEOMapRequest setCompletionHandler:](v10, "setCompletionHandler:", v9);
    -[GEOMapEdgeConnectionFinder findConnectionsOut:](v10, "findConnectionsOut:", v8);
    if (-[GEOMapRequest isFinished](v10, "isFinished"))
      v11 = 0;
    else
      v11 = v10;
    v12 = v11;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_18950E3D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

GEOMapEdgeTransitConnectionFinder *geo::MapNodeTransit::findEdgesIn(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  GEOMapEdgeTransitConnectionFinder *v10;
  GEOMapEdgeTransitConnectionFinder *v11;
  GEOMapEdgeTransitConnectionFinder *v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (*(_QWORD *)(a1 + 32))
  {
    v10 = -[GEOMapEdgeConnectionFinder initWithMap:tile:junction:coordinate:]([GEOMapEdgeTransitConnectionFinder alloc], "initWithMap:tile:junction:coordinate:", v7, *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(double *)(a1 + 8), *(double *)(a1 + 16));
    -[GEOMapRequest setCompletionHandler:](v10, "setCompletionHandler:", v9);
    -[GEOMapEdgeConnectionFinder findConnectionsIn:](v10, "findConnectionsIn:", v8);
    if (-[GEOMapRequest isFinished](v10, "isFinished"))
      v11 = 0;
    else
      v11 = v10;
    v12 = v11;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_18950E4B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t geo::MapNodeTransit::type(geo::MapNodeTransit *this)
{
  return 1;
}

void sub_18950F944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18950FA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18950FC78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18950FFD8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_189510240(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895104A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_189510788(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_189510934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_189510B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_189510CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_189510D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189510E34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GEOBatchPlaceResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  GEOPlaceResult *v27;
  void *v28;
  _BOOL8 v29;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_40;
          v27 = objc_alloc_init(GEOPlaceResult);
          if (!GEOPlaceResultReadAllFrom((uint64_t)v27, v5, a3))
          {

            goto LABEL_40;
          }
          PBReaderRecallMark();
          v28 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v27;

        }
        else if ((v12 >> 3) == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v23 = *v6;
            v24 = *(_QWORD *)&v5[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v5[*v7])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v24);
            *(_QWORD *)&v5[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v20 += 7;
            v17 = v21++ >= 9;
            if (v17)
            {
              LODWORD(v22) = 0;
              goto LABEL_36;
            }
          }
          v5[*v8] = 1;
LABEL_34:
          if (v5[*v8])
            LODWORD(v22) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v22;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_40;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v29 = v5[*v8] == 0;
  }
  else
  {
LABEL_40:
    v29 = 0;
  }
  objc_sync_exit(v5);

  return v29;
}

void sub_1895113B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOBatchPlaceResultClearSensitiveFields(id *a1, uint64_t a2, int a3)
{
  id v5;
  id v6;
  unsigned int v7;
  id v8;
  void *v9;
  id v10;

  if (a1
    && a3
    && (v5 = a1[1]) != 0
    && (v6 = v5, v7 = GEOPlaceResultHasSensitiveFields(v6), v6, v7))
  {
    v8 = a1[1];
    v10 = (id)objc_msgSend(v8, "copy");

    objc_msgSend(v10, "revgeoRequestTemplate");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);

    -[GEOBatchPlaceResult setPlaceResult:]((uint64_t)a1, v10);
  }
  else
  {
    -[GEOBatchPlaceResult placeResult](a1);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "clearSensitiveFields:", a2);
  }

}

void sub_18951187C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOGeoServiceTag *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  int *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  int v48;
  char v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  int v59;
  int v60;
  char v61;
  void *v62;
  int v64;
  char v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 92)), (uint16x4_t)0xFFFEFFFDFFFFFFFCLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 92) & 1)+ ((*(_BYTE *)(a1 + 92) & 0x20) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 3);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_99;
        v65 = (v15 == 0) | v14;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_99;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_99:
      if ((v16 & 1) != 0)
      {
        v58 = 1;
        goto LABEL_101;
      }
      if (v15)
      {
        while (1)
        {
          v60 = *v15++;
          v59 = v60;
          v61 = 16;
          switch(v60)
          {
            case 0:
              goto LABEL_113;
            case 1:
              continue;
            case 2:
              goto LABEL_112;
            case 3:
              v61 = 1;
              goto LABEL_112;
            case 4:
              v61 = 2;
              goto LABEL_112;
            case 5:
              v61 = 8;
              goto LABEL_112;
            case 6:
              v61 = 4;
              goto LABEL_112;
            default:
              if (v59 != 100)
                continue;
              v61 = 32;
LABEL_112:
              *(_BYTE *)(a1 + 92) |= v61;
              break;
          }
        }
      }
      goto LABEL_113;
    }
    v31 = v22 >> 3;
    v32 = (char)v16;
    if ((v65 & 1) == 0)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 92) & 0x10) != 0)
          goto LABEL_76;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_117;
        v64 = (int)v16;
        v16 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_118;
        PBReaderRecallMark();
        -[GEOBatchRevGeocodeRequest _addNoFlagsLocation:](a1, v16);
        goto LABEL_48;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 92) & 1) != 0)
          goto LABEL_76;
        if (v29 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_117;
          while (1)
          {
            v37 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
              break;
            v38 = 0;
            v39 = 0;
            v40 = 0;
            while (1)
            {
              v41 = *v17;
              v42 = *(_QWORD *)(v3 + v41);
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
                break;
              v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v42);
              *(_QWORD *)(v3 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                v27 = v39++ >= 9;
                if (!v27)
                  continue;
              }
              goto LABEL_63;
            }
            *(_BYTE *)(v3 + *v37) = 1;
LABEL_63:
            PBRepeatedInt32Add();
          }
          PBReaderRecallMark();
        }
        else
        {
          v51 = 0;
          v52 = 0;
          v53 = 0;
          while (1)
          {
            v54 = *v17;
            v55 = *(_QWORD *)(v3 + v54);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
              break;
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v27 = v52++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_98;
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_98:
          PBRepeatedInt32Add();
        }
        goto LABEL_85;
      case 4:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 92) & 2) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 40;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_117;
        v50 = *(_BYTE *)(a1 + 92) << 6;
        goto LABEL_84;
      case 5:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 92) & 8) == 0)
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 56;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_117;
        v50 = 16 * *(_BYTE *)(a1 + 92);
        goto LABEL_84;
      case 6:
        if (!v32)
          goto LABEL_76;
        if ((*(_BYTE *)(a1 + 92) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_117:
            v58 = 0;
            goto LABEL_119;
          }
          v50 = 32 * *(_BYTE *)(a1 + 92);
LABEL_84:
          v7 += v50 >> 7;
        }
        else
        {
          PBReaderReadString();
          v45 = objc_claimAutoreleasedReturnValue();
          v46 = 48;
LABEL_73:
          v47 = *(void **)(a1 + v46);
          *(_QWORD *)(a1 + v46) = v45;

          --v7;
        }
        goto LABEL_85;
      default:
        if ((_DWORD)v31 != 100)
        {
          v48 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if (!v48)
            goto LABEL_116;
          goto LABEL_86;
        }
        if (!v32 || (*(_BYTE *)(a1 + 92) & 0x20) != 0)
        {
LABEL_76:
          v49 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v49 & 1) == 0)
          {
LABEL_116:
            v58 = 0;
            goto LABEL_101;
          }
LABEL_86:
          if (!(v16 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_99;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_117;
        v64 = (int)v16;
        v16 = objc_alloc_init(GEOGeoServiceTag);
        if (GEOGeoServiceTagReadAllFrom((uint64_t)v16, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOBatchRevGeocodeRequest _addNoFlagsServiceTag:](a1, v16);
LABEL_48:

          LODWORD(v16) = v64;
LABEL_85:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_86;
        }
LABEL_118:

        v58 = 0;
        LOBYTE(v16) = v64;
LABEL_119:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_101:
        *(_BYTE *)(a1 + 92) |= 0x10u;
        *(_BYTE *)(a1 + 92) |= 1u;
        *(_BYTE *)(a1 + 92) |= 2u;
        *(_BYTE *)(a1 + 92) |= 8u;
        *(_BYTE *)(a1 + 92) |= 4u;
        *(_BYTE *)(a1 + 92) |= 0x20u;
        if ((v58 & 1) != 0)
        {
LABEL_113:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_114;
          return v3;
        }
        v3 = 0;
        if ((v16 & 1) == 0)
          return v3;
LABEL_114:
        v62 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
    }
  }
}

void sub_18951236C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189512C3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189512D80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189512EC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189513004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189514398(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeRequestReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOBatchRevGeocodeRequestReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 80) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 84) = objc_msgSend(v6, "length");
      Specified = GEOBatchRevGeocodeRequestReadSpecified(a1, (unint64_t)v6, (int *)&GEOBatchRevGeocodeRequestReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189514518(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189514B98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189515298(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189515B74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char v15;
  int *v16;
  GEOBatchPlaceResult *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  int v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  int v63;
  char v64;
  void *v65;
  int v67;
  char v68;
  char v69;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 72) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 72) >> 6) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        LODWORD(v17) = v10 | v14;
        v68 = (v7 != 0) | v15;
        v69 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_100;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_100:
      if ((v17 & 1) != 0)
      {
        v62 = 1;
        goto LABEL_108;
      }
      if (v16)
      {
        while (1)
        {
          v63 = *v16++;
          v64 = 32;
          switch(v63)
          {
            case 0:
              goto LABEL_109;
            case 2:
              goto LABEL_106;
            case 3:
              v64 = 16;
              goto LABEL_106;
            case 5:
              v64 = 64;
LABEL_106:
              *(_BYTE *)(a1 + 72) |= v64;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_109;
    }
    v31 = v23 >> 3;
    v32 = (char)v17;
    if ((v69 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_82;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 72) |= 2u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_85;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_87;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_85:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_87:
        v61 = 60;
        goto LABEL_96;
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 72) & 0x20) != 0)
          goto LABEL_82;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_114;
        v67 = (int)v17;
        v17 = objc_alloc_init(GEOCluster);
        if (!GEOClusterReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          goto LABEL_115;
        PBReaderRecallMark();
        -[GEOBatchRevGeocodeResponse _addNoFlagsCluster:](a1, v17);
        goto LABEL_69;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 72) & 0x10) != 0)
          goto LABEL_82;
        if ((PBReaderPlaceMark() & 1) == 0)
        {
LABEL_114:
          v62 = 0;
          goto LABEL_116;
        }
        v67 = (int)v17;
        v17 = objc_alloc_init(GEOBatchPlaceResult);
        if (GEOBatchPlaceResultReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOBatchRevGeocodeResponse _addNoFlagsBatchPlaceResult:](a1, v17);
LABEL_69:

          LODWORD(v17) = v67;
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_99:
          if ((v68 & 1) == 0)
            goto LABEL_100;
          continue;
        }
LABEL_115:

        v62 = 0;
        LOBYTE(v17) = v67;
LABEL_116:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_108:
        *(_BYTE *)(a1 + 72) |= 0x20u;
        *(_BYTE *)(a1 + 72) |= 0x10u;
        *(_BYTE *)(a1 + 72) |= 0x40u;
        if ((v62 & 1) != 0)
        {
LABEL_109:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if ((v17 & 1) != 0)
            goto LABEL_110;
        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
          {
LABEL_110:
            v65 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_82;
        v45 = 0;
        v46 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 72) |= 4u;
        while (2)
        {
          v47 = *v18;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v39 |= (unint64_t)(v50 & 0x7F) << v45;
            if (v50 < 0)
            {
              v45 += 7;
              v28 = v46++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_91:
        v61 = 64;
        goto LABEL_96;
      case 5:
        if (!v32 || (*(_BYTE *)(a1 + 72) & 0x40) != 0)
          goto LABEL_82;
        v67 = (int)v17;
        PBReaderReadString();
        v17 = (GEOBatchPlaceResult *)objc_claimAutoreleasedReturnValue();
        if (v17)
          -[GEOBatchRevGeocodeResponse _addNoFlagsVersionDomain:](a1, v17);
        goto LABEL_69;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_82;
        v51 = 0;
        v52 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 72) |= 8u;
        while (2)
        {
          v53 = *v18;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v39 |= (unint64_t)(v56 & 0x7F) << v51;
            if (v56 < 0)
            {
              v51 += 7;
              v28 = v52++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_95:
        v61 = 68;
LABEL_96:
        *(_DWORD *)(a1 + v61) = v39;
        goto LABEL_99;
      case 7:
        if ((v8 & 1) != 0)
        {
          *(_BYTE *)(a1 + 72) |= 1u;
          v57 = *v18;
          v58 = *(_QWORD *)(v3 + v57);
          if (v58 <= 0xFFFFFFFFFFFFFFF7 && v58 + 8 <= *(_QWORD *)(v3 + *v6))
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v58);
            *(_QWORD *)(v3 + v57) = v58 + 8;
          }
          else
          {
            *(_BYTE *)(v3 + *v19) = 1;
            v59 = 0;
          }
          *(_QWORD *)(a1 + 32) = v59;
        }
        else
        {
LABEL_82:
          v60 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v60 & 1) == 0)
          {
LABEL_107:
            v62 = 0;
            goto LABEL_108;
          }
        }
        goto LABEL_99;
      default:
        v44 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v44)
          goto LABEL_107;
        goto LABEL_99;
    }
  }
}

void sub_1895165F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895169F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189517D6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189517F80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOBatchRevGeocodeResponseReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOBatchRevGeocodeResponseReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 52) = objc_msgSend(v6, "length");
      Specified = GEOBatchRevGeocodeResponseReadSpecified(a1, (unint64_t)v6, (int *)&GEOBatchRevGeocodeResponseReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_189518100(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189518BD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void GEOClusterClearSensitiveFields(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  id v9;

  if (a1
    && a3
    && (-[GEOCluster _readContainer](a1), *(_QWORD *)(a1 + 40))
    && (-[GEOCluster container]((id *)a1),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOPlaceResultHasSensitiveFields(v5),
        v5,
        v6))
  {
    -[GEOCluster container]((id *)a1);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v7, "copy");

    objc_msgSend(v9, "revgeoRequestTemplate");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);

    -[GEOCluster setContainer:](a1, v9);
  }
  else
  {
    -[GEOCluster container]((id *)a1);
    v9 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "clearSensitiveFields:", a2);
  }

}

void sub_189519684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189519E84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClusterReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int *v15;
  _BOOL4 v16;
  int *v17;
  int *v18;
  char v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v32;
  _BOOL4 v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOPlaceResult *v38;
  void *v39;
  int *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  int v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  int v57;
  char v58;
  int v59;
  int v60;
  char v61;
  void *v62;
  _BOOL4 v64;
  char v65;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(_BYTE *)(a1 + 60) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v8])
    {
      case -3:
        v7 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = (v10 & 1 | v11) != 0;
        if (((v14 | v7) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_83;
        if (v15)
          v19 = v14;
        else
          v19 = 1;
        v65 = v19;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v8;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_83;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_28:
    v30 = v23 & 7;
    if (v29 || v30 == 4)
    {
LABEL_83:
      if (v16)
      {
        v58 = 1;
        goto LABEL_85;
      }
      if (!v15)
        goto LABEL_96;
      while (1)
      {
        v60 = *v15++;
        v59 = v60;
        if (v60 == 1)
          break;
        if (v59 == 2)
        {
          v61 = 1;
LABEL_95:
          *(_BYTE *)(a1 + 60) |= v61;
        }
        else if (!v59)
        {
          goto LABEL_96;
        }
      }
      v61 = 2;
      goto LABEL_95;
    }
    v32 = v23 >> 3;
    v33 = v16;
    if ((v65 & 1) == 0)
    {
      v34 = v15;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 != 2)
      break;
    if (v33 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (v30 == 2)
      {
        if (!PBReaderPlaceMark())
          goto LABEL_100;
        while (1)
        {
          v40 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v41 = 0;
          v42 = 0;
          v43 = 0;
          while (1)
          {
            v44 = *v17;
            v45 = *(_QWORD *)(v3 + v44);
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)(v3 + *v6))
              break;
            v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v45);
            *(_QWORD *)(v3 + v44) = v46;
            v43 |= (unint64_t)(v47 & 0x7F) << v41;
            if (v47 < 0)
            {
              v41 += 7;
              v28 = v42++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_60;
          }
          *(_BYTE *)(v3 + *v40) = 1;
LABEL_60:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        v50 = 0;
        v51 = 0;
        v52 = 0;
        while (1)
        {
          v53 = *v17;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
            break;
          v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v54);
          *(_QWORD *)(v3 + v53) = v55;
          v52 |= (unint64_t)(v56 & 0x7F) << v50;
          if (v56 < 0)
          {
            v50 += 7;
            v28 = v51++ >= 9;
            if (!v28)
              continue;
          }
          goto LABEL_76;
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_76:
        PBRepeatedInt32Add();
      }
      goto LABEL_77;
    }
LABEL_63:
    v49 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v49 & 1) == 0)
    {
LABEL_99:
      v58 = 0;
      goto LABEL_85;
    }
LABEL_78:
    if (v8)
      v57 = 1;
    else
      v57 = v16;
    if (v57 != 1 || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_83;
  }
  if ((_DWORD)v32 != 1)
  {
    v48 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if (!v48)
      goto LABEL_99;
    goto LABEL_78;
  }
  if (!v33)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_100:
      v58 = 0;
      goto LABEL_102;
    }
    v8 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
    goto LABEL_77;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_100;
  v64 = v16;
  v38 = objc_alloc_init(GEOPlaceResult);
  if (GEOPlaceResultReadAllFrom((uint64_t)v38, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    v39 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v38;

    --v8;
    v16 = v64;
LABEL_77:
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_78;
  }

  v58 = 0;
  v16 = v64;
LABEL_102:
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
  *(_BYTE *)(a1 + 60) |= 2u;
  *(_BYTE *)(a1 + 60) |= 1u;
  if ((v58 & 1) != 0)
  {
LABEL_96:
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if (v16)
      goto LABEL_97;
    return v3;
  }
  v3 = 0;
  if (!v16)
    return v3;
LABEL_97:
  v62 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_18951A730(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOClusterReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOClusterReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOClusterReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOClusterReadAllFrom_initialTag;
  Specified = GEOClusterReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18951A8D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18951AA8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18951ABDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOVoltaireTileKeyMake(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  unint64_t v6;
  __int128 v8;

  if (a6 <= 0x19 && ((1 << a6) & 0x200101C) != 0)
    v6 = 128;
  else
    v6 = (unint64_t)(a6 == 26) << 7;
  *(_QWORD *)((char *)&v8 + 1) = (a1 << 46) | ((unint64_t)(a3 & 0x3F) << 40);
  LOBYTE(v8) = 2;
  return v8 & 0xFFFFFFFFFFFFFF7FLL | v6;
}

GEOTileKeyList *_GEOTileKeysForCoordinate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), double a6, double a7, double a8)
{
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  NSObject *v26;
  GEOTileKeyList *v28;
  GEOTileKeyList *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  unsigned int v33;
  uint8_t buf[8];
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v13 = GEOMapRectMakeWithRadialDistance(a6, a7, a8);
  v17 = (double)(1 << a1) * 0.0000000037252903;
  v18 = llround(floor(v17 * v13));
  if (v18 >= 4294967294)
    v18 = 4294967294;
  v19 = v18 & ~(v18 >> 63);
  v20 = llround(floor(v17 * v14));
  if (v20 >= 4294967294)
    v20 = 4294967294;
  v21 = v20 & ~(v20 >> 63);
  v22 = llround(floor(v17 * (v13 + v15)));
  if (v22 >= 4294967294)
    v22 = 4294967294;
  v23 = v22 & ~(v22 >> 63);
  v24 = llround(floor(v17 * (v14 + v16)));
  if (v24 >= 4294967294)
    v24 = 4294967294;
  v33 = v24 & ~(v24 >> 63);
  if (v23 - v19 > 0x13880 || v33 - v21 > 0x13880)
  {
    GEOGetGEOMapFeatureAccessLog();
    v26 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v23 - v19;
      LOWORD(v35) = 1024;
      *(_DWORD *)((char *)&v35 + 2) = v33 - v21;
      _os_log_impl(&dword_1885A9000, v26, OS_LOG_TYPE_ERROR, "GEOMapRect is too large: [width: %u, height: %u]", buf, 0xEu);
    }

    return (GEOTileKeyList *)0;
  }
  else
  {
    v28 = objc_alloc_init(GEOTileKeyList);
    v29 = v28;
    if (v23 >= v19)
    {
      do
      {
        v30 = v21;
        if (v33 >= v21)
        {
          do
          {
            *(_QWORD *)buf = 0;
            v35 = 0;
            *(_QWORD *)buf = a5(v19, v30, a1, a3, a4, a2);
            v35 = v31;
            -[GEOTileKeyList addKey:](v29, "addKey:", buf);
            v30 = (v30 + 1);
          }
          while (v33 + 1 != (_DWORD)v30);
        }
        v32 = (_DWORD)v19 == v23;
        v19 = (v19 + 1);
      }
      while (!v32);
    }
    return v29;
  }
}

uint64_t _GEOQuadIDTileKeyMakeWrapper(gloria::MortonUtils *this, unsigned int a2, unsigned int a3)
{
  uint8_t v6[16];

  if (a3 >= 0x100)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: z <= UINT8_MAX", v6, 2u);
    }
    LOBYTE(a3) = -1;
  }
  return GEOGloriaQuadIDTileKeyMake(this, a2, a3);
}

void sub_18951CC34(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

long double GEOComposedRouteSectionPadAndSquareBounds(double *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  long double v9;
  long double v10;
  long double result;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[3];
  v5 = v4 * 0.5 + *a1;
  v6 = v2 * 0.5 + a1[1];
  v7 = v3 * 0.5 + a1[2];
  v8 = fmax(v4, v2);
  v9 = exp((v6 * 0.0078125 + -1048576.0) / 333772.107);
  v10 = atan(v9);
  result = v8 + GEOMapPointsPerMeterAtLatitude((v10 * -2.0 + 1.57079633) * 57.2957795) * 16.0;
  *a1 = v5 - result * 0.5;
  a1[1] = v6 - result * 0.5;
  a1[2] = v7 - (v3 + 16.0) * 0.5;
  a1[3] = result;
  a1[4] = result;
  a1[5] = v3 + 16.0;
  return result;
}

void sub_18951D9F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18951DC98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_18951DE9C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GEOMapBoxEqualToBox(double *a1, double *a2)
{
  uint64_t v2;

  v2 = 0;
  if (vabdd_f64(*a1, *a2) < 0.00000001 && vabdd_f64(a1[2], a2[2]) < 0.00000001)
    return vabdd_f64(a1[3], a2[3]) < 0.00000001
        && vabdd_f64(a1[4], a2[4]) < 0.00000001
        && vabdd_f64(a1[5], a2[5]) < 0.00000001;
  return v2;
}

void sub_18951E2F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18951E4D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18951E784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18951E950(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_18951ED24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_18951EDDC()
{
  void *v0;

  JUMPOUT(0x18951EDBCLL);
}

void sub_18951EE74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18951EF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18951F17C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float geo::_colorWithHexString<float,4,(geo::ColorSpace)2>(uint64_t a1, char *__s)
{
  float result;
  int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  char v9;
  unsigned __int8 v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  char v15;
  unsigned __int8 v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  char v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  char v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  char v42;
  unsigned __int8 v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  char v47;
  char v48;
  char v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  char v53;
  char v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  char v58;
  char v59;
  char v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  char v64;
  char v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  char v69;
  char v70;
  char v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  char v75;
  char v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  char v80;
  char v81;
  char v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  char v86;
  char v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  char v91;
  char v92;
  char v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  char v97;
  char v98;
  int v99;
  unsigned int v100;
  unsigned int v101;
  char v102;
  char v103;
  char v104;
  int v105;
  unsigned int v106;
  unsigned int v107;
  char v108;
  char v109;
  int v110;
  unsigned int v111;
  unsigned int v112;
  char v113;
  char v114;
  char v115;
  int v116;
  unsigned int v117;
  unsigned int v118;
  char v119;
  char v120;

  switch(strlen(__s))
  {
    case 3uLL:
      v5 = *__s;
      v6 = v5 - 48;
      v7 = v5 - 97;
      if ((v5 - 65) >= 6)
        v8 = 0;
      else
        v8 = v5 - 55;
      v9 = v5 - 87;
      if (v7 > 5)
        v9 = v8;
      if (v6 < 0xA)
        v9 = v6;
      v10 = 16 * v9;
      v11 = __s[1];
      v12 = v11 - 48;
      v13 = v11 - 97;
      if ((v11 - 65) >= 6)
        v14 = 0;
      else
        v14 = v11 - 55;
      v15 = v11 - 87;
      if (v13 > 5)
        v15 = v14;
      if (v12 < 0xA)
        v15 = v12;
      v16 = 16 * v15;
      v17 = __s[2];
      v18 = v17 - 48;
      v19 = v17 - 97;
      if ((v17 - 65) >= 6)
        v20 = 0;
      else
        v20 = v17 - 55;
      v21 = v17 - 87;
      if (v19 > 5)
        v21 = v20;
      if (v18 < 0xA)
        v21 = v18;
      v22 = 16 * v21;
      goto LABEL_97;
    case 4uLL:
      v23 = *__s;
      v24 = v23 - 48;
      v25 = v23 - 97;
      if ((v23 - 65) >= 6)
        v26 = 0;
      else
        v26 = v23 - 55;
      v27 = v23 - 87;
      if (v25 > 5)
        v27 = v26;
      if (v24 < 0xA)
        v27 = v24;
      v10 = 16 * v27;
      v28 = __s[1];
      v29 = v28 - 48;
      v30 = v28 - 97;
      if ((v28 - 65) >= 6)
        v31 = 0;
      else
        v31 = v28 - 55;
      v32 = v28 - 87;
      if (v30 > 5)
        v32 = v31;
      if (v29 < 0xA)
        v32 = v29;
      v16 = 16 * v32;
      v33 = __s[2];
      v34 = v33 - 48;
      v35 = v33 - 97;
      if ((v33 - 65) >= 6)
        v36 = 0;
      else
        v36 = v33 - 55;
      v37 = v33 - 87;
      if (v35 > 5)
        v37 = v36;
      if (v34 < 0xA)
        v37 = v34;
      v22 = 16 * v37;
      v38 = __s[3];
      v39 = v38 - 48;
      v40 = v38 - 97;
      if ((v38 - 65) >= 6)
        v41 = 0;
      else
        v41 = v38 - 55;
      v42 = v38 - 87;
      if (v40 > 5)
        v42 = v41;
      if (v39 < 0xA)
        v42 = v39;
      v43 = 16 * v42;
      goto LABEL_155;
    case 6uLL:
      v44 = *__s;
      v45 = v44 - 48;
      v46 = v44 - 97;
      if ((v44 - 65) >= 6)
        v47 = 0;
      else
        v47 = v44 - 55;
      v48 = v44 - 87;
      if (v46 > 5)
        v48 = v47;
      if (v45 < 0xA)
        v48 = v45;
      v49 = 16 * v48;
      v50 = __s[1];
      v51 = v50 - 48;
      v52 = v50 - 97;
      if ((v50 - 65) >= 6)
        v53 = 0;
      else
        v53 = v50 - 55;
      v54 = v50 - 87;
      if (v52 > 5)
        v54 = v53;
      if (v51 < 0xA)
        v54 = v51;
      v10 = v54 + v49;
      v55 = __s[2];
      v56 = v55 - 48;
      v57 = v55 - 97;
      if ((v55 - 65) >= 6)
        v58 = 0;
      else
        v58 = v55 - 55;
      v59 = v55 - 87;
      if (v57 > 5)
        v59 = v58;
      if (v56 < 0xA)
        v59 = v56;
      v60 = 16 * v59;
      v61 = __s[3];
      v62 = v61 - 48;
      v63 = v61 - 97;
      if ((v61 - 65) >= 6)
        v64 = 0;
      else
        v64 = v61 - 55;
      v65 = v61 - 87;
      if (v63 > 5)
        v65 = v64;
      if (v62 < 0xA)
        v65 = v62;
      v16 = v65 + v60;
      v66 = __s[4];
      v67 = v66 - 48;
      v68 = v66 - 97;
      if ((v66 - 65) >= 6)
        v69 = 0;
      else
        v69 = v66 - 55;
      v70 = v66 - 87;
      if (v68 > 5)
        v70 = v69;
      if (v67 < 0xA)
        v70 = v67;
      v71 = 16 * v70;
      v72 = __s[5];
      v73 = v72 - 48;
      v74 = v72 - 97;
      if ((v72 - 65) >= 6)
        v75 = 0;
      else
        v75 = v72 - 55;
      v76 = v72 - 87;
      if (v74 > 5)
        v76 = v75;
      if (v73 < 0xA)
        v76 = v73;
      v22 = v76 + v71;
LABEL_97:
      v43 = -1;
      goto LABEL_155;
    case 8uLL:
      v77 = *__s;
      v78 = v77 - 48;
      v79 = v77 - 97;
      if ((v77 - 65) >= 6)
        v80 = 0;
      else
        v80 = v77 - 55;
      v81 = v77 - 87;
      if (v79 > 5)
        v81 = v80;
      if (v78 < 0xA)
        v81 = v78;
      v82 = 16 * v81;
      v83 = __s[1];
      v84 = v83 - 48;
      v85 = v83 - 97;
      if ((v83 - 65) >= 6)
        v86 = 0;
      else
        v86 = v83 - 55;
      v87 = v83 - 87;
      if (v85 > 5)
        v87 = v86;
      if (v84 < 0xA)
        v87 = v84;
      v10 = v87 + v82;
      v88 = __s[2];
      v89 = v88 - 48;
      v90 = v88 - 97;
      if ((v88 - 65) >= 6)
        v91 = 0;
      else
        v91 = v88 - 55;
      v92 = v88 - 87;
      if (v90 > 5)
        v92 = v91;
      if (v89 < 0xA)
        v92 = v89;
      v93 = 16 * v92;
      v94 = __s[3];
      v95 = v94 - 48;
      v96 = v94 - 97;
      if ((v94 - 65) >= 6)
        v97 = 0;
      else
        v97 = v94 - 55;
      v98 = v94 - 87;
      if (v96 > 5)
        v98 = v97;
      if (v95 < 0xA)
        v98 = v95;
      v16 = v98 + v93;
      v99 = __s[4];
      v100 = v99 - 48;
      v101 = v99 - 97;
      if ((v99 - 65) >= 6)
        v102 = 0;
      else
        v102 = v99 - 55;
      v103 = v99 - 87;
      if (v101 > 5)
        v103 = v102;
      if (v100 < 0xA)
        v103 = v100;
      v104 = 16 * v103;
      v105 = __s[5];
      v106 = v105 - 48;
      v107 = v105 - 97;
      if ((v105 - 65) >= 6)
        v108 = 0;
      else
        v108 = v105 - 55;
      v109 = v105 - 87;
      if (v107 > 5)
        v109 = v108;
      if (v106 < 0xA)
        v109 = v106;
      v22 = v109 + v104;
      v110 = __s[6];
      v111 = v110 - 48;
      v112 = v110 - 97;
      if ((v110 - 65) >= 6)
        v113 = 0;
      else
        v113 = v110 - 55;
      v114 = v110 - 87;
      if (v112 > 5)
        v114 = v113;
      if (v111 < 0xA)
        v114 = v111;
      v115 = 16 * v114;
      v116 = __s[7];
      v117 = v116 - 48;
      v118 = v116 - 97;
      if ((v116 - 65) >= 6)
        v119 = 0;
      else
        v119 = v116 - 55;
      v120 = v116 - 87;
      if (v118 > 5)
        v120 = v119;
      if (v117 < 0xA)
        v120 = v117;
      v43 = v120 + v115;
LABEL_155:
      *(_BYTE *)a1 = 1;
      *(float *)(a1 + 4) = (float)v10 / 255.0;
      *(float *)(a1 + 8) = (float)v16 / 255.0;
      result = (float)v43 / 255.0;
      *(float *)(a1 + 12) = (float)v22 / 255.0;
      *(float *)(a1 + 16) = result;
      break;
    default:
      *(_BYTE *)a1 = 0;
      break;
  }
  return result;
}

BOOL GEOActionComponentMapEntryReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  void *v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_61;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v26 = 0;
              v27 = 0;
              v28 = 0;
              while (1)
              {
                v29 = *v4;
                v30 = *(_QWORD *)&v3[v29];
                v31 = v30 + 1;
                if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
                  break;
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v28 |= (unint64_t)(v32 & 0x7F) << v26;
                if (v32 < 0)
                {
                  v26 += 7;
                  v15 = v27++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_40;
              }
              v3[*v6] = 1;
LABEL_40:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v35 = 0;
            v36 = 0;
            v37 = 0;
            while (1)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              v40 = v39 + 1;
              if (v39 == -1 || v40 > *(_QWORD *)&v3[*v5])
                break;
              v41 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
              *(_QWORD *)&v3[v38] = v40;
              v37 |= (unint64_t)(v41 & 0x7F) << v35;
              if (v41 < 0)
              {
                v35 += 7;
                v15 = v36++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_58;
            }
            v3[*v6] = 1;
LABEL_58:
            PBRepeatedInt32Add();
          }
        }
        else if ((v10 >> 3) == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_46;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            LODWORD(v21) = 0;
LABEL_48:
          *(_DWORD *)(a1 + 40) = v21;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v33 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v34 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v33;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_61;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_61:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_189520860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributionAppReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  char v69;
  void *v70;
  int v72;
  int *v73;
  char v74;
  char v75;
  char v76;
  BOOL v77;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_BYTE)v7;
        v16 = v14 | v7;
        v74 = v15 | v8;
        v75 = v16 | v15 | v8;
        if (((v16 | v9) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v76 = (v17 == 0) | v16;
        v77 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (*(_QWORD *)(v3 + *v18) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v19))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
      break;
    v31 = v23 >> 3;
    v32 = v77;
    if ((v76 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 60) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v37;

          --v10;
          goto LABEL_92;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v10 += *(unsigned __int8 *)(a1 + 60) << 27 >> 31;
          goto LABEL_92;
        }
        v72 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_95;
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 60) & 0x20) != 0)
          goto LABEL_75;
        PBReaderReadString();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        if (v42)
          -[GEOAttributionApp _addNoFlagsHandledSchemes:](a1, v42);

LABEL_92:
        v19 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_93;
      case 3:
        if ((v9 & 1) == 0)
          goto LABEL_75;
        v43 = 0;
        v44 = 0;
        v45 = 0;
        *(_BYTE *)(a1 + 60) |= 4u;
        while (2)
        {
          v46 = *v18;
          v47 = *(_QWORD *)(v3 + v46);
          v48 = v47 + 1;
          if (v47 == -1 || v48 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v47);
            *(_QWORD *)(v3 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              v28 = v44++ >= 9;
              if (v28)
              {
                v45 = 0;
                goto LABEL_80;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v45 = 0;
LABEL_80:
        v65 = v45 != 0;
        v66 = 57;
        goto LABEL_85;
      case 4:
        if ((v9 & 1) == 0)
          goto LABEL_75;
        v50 = 0;
        v51 = 0;
        v52 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v53 = *v18;
          v54 = *(_QWORD *)(v3 + v53);
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v56 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v54);
            *(_QWORD *)(v3 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              v28 = v51++ >= 9;
              if (v28)
              {
                v52 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v52 = 0;
LABEL_84:
        v65 = v52 != 0;
        v66 = 56;
LABEL_85:
        *(_BYTE *)(a1 + v66) = v65;
        goto LABEL_93;
      case 5:
        if ((v9 & 1) == 0)
          goto LABEL_75;
        v57 = 0;
        v58 = 0;
        v59 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v60 = *v18;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              v28 = v58++ >= 9;
              if (v28)
              {
                LODWORD(v59) = 0;
                goto LABEL_89;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v59) = 0;
LABEL_89:
        *(_DWORD *)(a1 + 52) = v59;
        goto LABEL_93;
      default:
        if ((v74 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 8) != 0)
        {
LABEL_75:
          v64 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v64 & 1) == 0)
          {
            v72 = 0;
            goto LABEL_95;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v72 = 0;
            v73 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
            goto LABEL_96;
          }
        }
LABEL_93:
        if (!(v75 & 1 | (v10 != 0)))
          goto LABEL_94;
        break;
    }
  }
LABEL_94:
  v72 = 1;
LABEL_95:
  v73 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v74 & 1) != 0)
LABEL_96:
    *(_BYTE *)(a1 + v73[235]) |= 8u;
  if (!v77 && (v72 & 1) != 0)
  {
    if (!v17)
      goto LABEL_107;
    while (1)
    {
      v68 = *v17++;
      v67 = v68;
      if (v68 == 1)
        break;
      if (v67 == 2)
      {
        v69 = 32;
LABEL_106:
        *(_BYTE *)(a1 + v73[235]) |= v69;
      }
      else if (!v67)
      {
        goto LABEL_107;
      }
    }
    v69 = 16;
    goto LABEL_106;
  }
  *(_BYTE *)(a1 + v73[235]) |= 0x10u;
  *(_BYTE *)(a1 + v73[235]) |= 0x20u;
LABEL_107:
  if (v72)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if (v77)
  {
    v70 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189521340(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189521424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895220F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributionAppReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAttributionAppReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAttributionAppReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAttributionAppReadAllFrom_initialTag;
  Specified = GEOAttributionAppReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189522280(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributionAppReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAttributionAppReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895222E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOAttributionAppIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  BOOL v35;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v9 >> 3))
      {
        case 1u:
          v18 = 0;
          if (!v5 && v16 == 2)
          {
            v5 = 1;
            goto LABEL_23;
          }
          goto LABEL_59;
        case 2u:
          if (v16 != 2)
            goto LABEL_60;
          goto LABEL_23;
        case 3u:
          if ((v9 & 7) != 0)
            goto LABEL_60;
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v23 = *(char *)(*(_QWORD *)&a1[*v6] + v21);
            *(_QWORD *)&a1[v20] = v22;
            if (v23 < 0)
            {
              v24 = v19++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_50;
          }
        case 4u:
          if ((v9 & 7) != 0)
            goto LABEL_60;
          v25 = 0;
          while (1)
          {
            v26 = *v2;
            v27 = *(_QWORD *)&a1[v26];
            v28 = v27 + 1;
            if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v29 = *(char *)(*(_QWORD *)&a1[*v6] + v27);
            *(_QWORD *)&a1[v26] = v28;
            if (v29 < 0)
            {
              v24 = v25++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_50;
          }
        case 5u:
          if ((v9 & 7) != 0)
            goto LABEL_60;
          v30 = 0;
          break;
        default:
LABEL_23:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_60:
          v18 = 0;
          goto LABEL_59;
      }
      while (1)
      {
        v31 = *v2;
        v32 = *(_QWORD *)&a1[v31];
        v33 = v32 + 1;
        if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
          break;
        v34 = *(char *)(*(_QWORD *)&a1[*v6] + v32);
        *(_QWORD *)&a1[v31] = v33;
        if (v34 < 0)
        {
          v24 = v30++ > 8;
          if (!v24)
            continue;
        }
        goto LABEL_50;
      }
LABEL_49:
      a1[*v4] = 1;
LABEL_50:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v35 = 1;
  else
    v35 = v5 == 0;
  v18 = !v35;
LABEL_59:
  PBReaderRecallMark();
  return v18;
}

void sub_189522870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAttributionAppIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 60) & 0x70) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189522D2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895231A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOComponentActionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  id v41;
  void *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  _BOOL8 v50;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        v17 = v10 & 7;
        if (v16 || v17 == 4)
          break;
        v19 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if ((v33 & 0x80) == 0)
              goto LABEL_58;
            v27 += 7;
            v15 = v28++ >= 9;
            if (v15)
            {
              v29 = 0;
              goto LABEL_60;
            }
          }
          v3[*v6] = 1;
LABEL_58:
          if (v3[*v6])
            v29 = 0;
LABEL_60:
          *(_BYTE *)(a1 + 44) = v29 != 0;
        }
        else if ((_DWORD)v19 == 2)
        {
          if (v17 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_73;
            while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5] && !v3[*v6])
            {
              v34 = 0;
              v35 = 0;
              v36 = 0;
              while (1)
              {
                v37 = *v4;
                v38 = *(_QWORD *)&v3[v37];
                v39 = v38 + 1;
                if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
                  break;
                v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
                *(_QWORD *)&v3[v37] = v39;
                v36 |= (unint64_t)(v40 & 0x7F) << v34;
                if (v40 < 0)
                {
                  v34 += 7;
                  v15 = v35++ >= 9;
                  if (!v15)
                    continue;
                }
                goto LABEL_48;
              }
              v3[*v6] = 1;
LABEL_48:
              PBRepeatedInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v43 = 0;
            v44 = 0;
            v45 = 0;
            while (1)
            {
              v46 = *v4;
              v47 = *(_QWORD *)&v3[v46];
              v48 = v47 + 1;
              if (v47 == -1 || v48 > *(_QWORD *)&v3[*v5])
                break;
              v49 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v47);
              *(_QWORD *)&v3[v46] = v48;
              v45 |= (unint64_t)(v49 & 0x7F) << v43;
              if (v49 < 0)
              {
                v43 += 7;
                v15 = v44++ >= 9;
                if (!v15)
                  continue;
              }
              goto LABEL_70;
            }
            v3[*v6] = 1;
LABEL_70:
            PBRepeatedInt32Add();
          }
        }
        else if ((_DWORD)v19 == 1)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
              break;
            v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v25;
            v22 |= (unint64_t)(v26 & 0x7F) << v20;
            if ((v26 & 0x80) == 0)
              goto LABEL_54;
            v20 += 7;
            v15 = v21++ >= 9;
            if (v15)
            {
              LODWORD(v22) = 0;
              goto LABEL_56;
            }
          }
          v3[*v6] = 1;
LABEL_54:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_56:
          *(_DWORD *)(a1 + 40) = v22;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v42 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v41;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_73;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v50 = v3[*v6] == 0;
  }
  else
  {
LABEL_73:
    v50 = 0;
  }
  objc_sync_exit(v3);

  return v50;
}

void sub_189523C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895240E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedAttributionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  char v44;
  char v45;
  int v46;
  char v47;
  void *v48;
  int v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 76)), (uint16x4_t)0xFFFBFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 76) & 1)+ ((*(_BYTE *)(a1 + 76) & 2) != 0));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 3;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v51 = v15;
        v52 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v53 = (v17 == 0) | v16;
        v54 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_74;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_74:
      v50 = 1;
      goto LABEL_75;
    }
    v31 = v23 >> 3;
    v32 = v54;
    if ((v53 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 76) & 8) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_92;
        v45 = 16 * *(_BYTE *)(a1 + 76);
        goto LABEL_71;
      case 2:
        if (!v32)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 76) & 4) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_92;
        v45 = 32 * *(_BYTE *)(a1 + 76);
        goto LABEL_71;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 76) & 0x10) != 0)
          goto LABEL_63;
        PBReaderReadString();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        if (v42)
          -[GEOLocalizedAttribution _addNoFlagsLogoURLs:](a1, v42);
        goto LABEL_58;
      case 4:
        if (!v32 || (*(_BYTE *)(a1 + 76) & 0x20) != 0)
          goto LABEL_63;
        PBReaderReadString();
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        if (v42)
          -[GEOLocalizedAttribution _addNoFlagsSnippetLogoURLs:](a1, v42);
LABEL_58:

        goto LABEL_72;
      case 5:
        if (!v32)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 76) & 2) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
LABEL_62:
          v43 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          --v9;
LABEL_72:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_73:
          if (!(v52 & 1 | (v9 != 0)))
            goto LABEL_74;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v45 = *(_BYTE *)(a1 + 76) << 6;
LABEL_71:
          v9 += v45 >> 7;
          goto LABEL_72;
        }
LABEL_92:
        v50 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_75:
        if ((v51 & 1) != 0)
LABEL_76:
          *(_BYTE *)(a1 + 76) |= 1u;
        if (v54 || (v50 & 1) == 0)
        {
          *(_BYTE *)(a1 + 76) |= 8u;
          *(_BYTE *)(a1 + 76) |= 4u;
          *(_BYTE *)(a1 + 76) |= 0x10u;
          *(_BYTE *)(a1 + 76) |= 0x20u;
          *(_BYTE *)(a1 + 76) |= 2u;
        }
        else if (v17)
        {
          while (1)
          {
            v46 = *v17++;
            v47 = 8;
            switch(v46)
            {
              case 0:
                goto LABEL_86;
              case 1:
                goto LABEL_85;
              case 2:
                v47 = 4;
                goto LABEL_85;
              case 3:
                v47 = 16;
                goto LABEL_85;
              case 4:
                v47 = 32;
                goto LABEL_85;
              case 5:
                v47 = 2;
LABEL_85:
                *(_BYTE *)(a1 + 76) |= v47;
                break;
              default:
                continue;
            }
          }
        }
LABEL_86:
        if (v50)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v54)
        {
          v48 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v51 & 1) == 0 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        {
LABEL_63:
          v44 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v44 & 1) == 0)
          {
            v50 = 0;
            goto LABEL_75;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v50 = 0;
            goto LABEL_76;
          }
        }
        goto LABEL_73;
    }
  }
}

void sub_1895247DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895248C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189524A60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189524BFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189524FA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedAttributionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedAttributionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedAttributionReadAllFrom_initialTag;
  Specified = GEOLocalizedAttributionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1895251F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189525500(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895258F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189525CB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedPublisherAttributionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  void *v61;
  char v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  char v74;
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  void *v79;
  int v81;
  int *v82;
  char v83;
  char v84;
  char v85;
  BOOL v86;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 96)), (uint16x4_t)0xFFF6FFF8FFF9FFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 96) >> 9) & 1)+ ((*(_WORD *)(a1 + 96) >> 5) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 3;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v83 = v15;
        v84 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v85 = (v17 == 0) | v16;
        v86 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_135;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_135:
      v81 = 1;
      goto LABEL_136;
    }
    v31 = v23 >> 3;
    v32 = v86;
    if ((v85 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_100;
        if ((*(_WORD *)(a1 + 96) & 0x80) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_153;
        v76 = *(_WORD *)(a1 + 96) << 8;
        goto LABEL_133;
      case 2:
        if (!v32)
          goto LABEL_100;
        if ((*(_WORD *)(a1 + 96) & 0x40) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_153;
        v76 = *(_WORD *)(a1 + 96) << 9;
        goto LABEL_133;
      case 3:
        if (!v32)
          goto LABEL_100;
        if ((*(_WORD *)(a1 + 96) & 0x100) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_153;
        v76 = *(_WORD *)(a1 + 96) << 7;
        goto LABEL_133;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_100;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          v45 = *v18;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v28 = v43++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_105;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_105:
        v75 = 76;
        goto LABEL_122;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_100;
        v49 = 0;
        v50 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 96) |= 8u;
        while (2)
        {
          v51 = *v18;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v44 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_109:
        v75 = 88;
        goto LABEL_122;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_100;
        v55 = 0;
        v56 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 96) |= 4u;
        while (2)
        {
          v57 = *v18;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v44 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v28 = v56++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_113:
        v75 = 84;
        goto LABEL_122;
      case 7:
        if (!v32)
          goto LABEL_100;
        if ((*(_WORD *)(a1 + 96) & 0x400) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 56;
          goto LABEL_83;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_153;
        v76 = 32 * *(_WORD *)(a1 + 96);
        goto LABEL_133;
      case 8:
        if (!v32)
          goto LABEL_100;
        if ((*(_WORD *)(a1 + 96) & 0x200) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
LABEL_83:
          v61 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          v19 = (int *)MEMORY[0x1E0D82BC8];
          --v9;
LABEL_134:
          if (!(v84 & 1 | (v9 != 0)))
            goto LABEL_135;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v76 = *(_WORD *)(a1 + 96) << 6;
LABEL_133:
          v9 += v76 >> 15;
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_134;
        }
LABEL_153:
        v81 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_136:
        v82 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        if ((v83 & 1) != 0)
LABEL_137:
          *(_WORD *)(a1 + v82[249]) |= 0x20u;
        if (v86 || (v81 & 1) == 0)
        {
          *(_WORD *)(a1 + v82[249]) |= 0x80u;
          *(_WORD *)(a1 + v82[249]) |= 0x40u;
          *(_WORD *)(a1 + v82[249]) |= 0x100u;
          *(_WORD *)(a1 + v82[249]) |= 0x400u;
          *(_WORD *)(a1 + v82[249]) |= 0x200u;
        }
        else if (v17)
        {
          while (1)
          {
            v77 = *v17++;
            v78 = 128;
            switch(v77)
            {
              case 0:
                goto LABEL_147;
              case 1:
                goto LABEL_146;
              case 2:
                v78 = 64;
                goto LABEL_146;
              case 3:
                v78 = 256;
                goto LABEL_146;
              case 7:
                v78 = 1024;
                goto LABEL_146;
              case 8:
                v78 = 512;
LABEL_146:
                *(_WORD *)(a1 + v82[249]) |= v78;
                break;
              default:
                continue;
            }
          }
        }
LABEL_147:
        if (v81)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v86)
        {
          v79 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_100;
        v62 = 0;
        v63 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 96) |= 2u;
        while (2)
        {
          v64 = *v18;
          v65 = *(_QWORD *)(v3 + v64);
          v66 = v65 + 1;
          if (v65 == -1 || v66 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v67 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v65);
            *(_QWORD *)(v3 + v64) = v66;
            v44 |= (unint64_t)(v67 & 0x7F) << v62;
            if (v67 < 0)
            {
              v62 += 7;
              v28 = v63++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_117:
        v75 = 80;
        goto LABEL_122;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_100;
        v68 = 0;
        v69 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 96) |= 0x10u;
        while (2)
        {
          v70 = *v18;
          v71 = *(_QWORD *)(v3 + v70);
          v72 = v71 + 1;
          if (v71 == -1 || v72 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v73 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v71);
            *(_QWORD *)(v3 + v70) = v72;
            v44 |= (unint64_t)(v73 & 0x7F) << v68;
            if (v73 < 0)
            {
              v68 += 7;
              v28 = v69++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_121:
        v75 = 92;
LABEL_122:
        *(_DWORD *)(a1 + v75) = v44;
        goto LABEL_134;
      default:
        if ((v83 & 1) == 0 || (*(_WORD *)(a1 + 96) & 0x20) != 0)
        {
LABEL_100:
          v74 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v74 & 1) == 0)
          {
            v81 = 0;
            goto LABEL_136;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v81 = 0;
            v82 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
            goto LABEL_137;
          }
        }
        goto LABEL_134;
    }
  }
}

void sub_1895267F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189526938(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189526BD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189526D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952776C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedPublisherAttributionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedPublisherAttributionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedPublisherAttributionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedPublisherAttributionReadAllFrom_initialTag;
  Specified = GEOLocalizedPublisherAttributionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_1895278F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedPublisherAttributionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalizedPublisherAttributionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189527958(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedPublisherAttributionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  _BOOL8 v43;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_74;
          goto LABEL_52;
        case 2u:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_74;
        case 3u:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_74;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_70;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_71;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_70;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_71;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_70;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_71;
          }
        case 7u:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_74;
        case 8u:
          if (v15 == 2)
            goto LABEL_52;
          goto LABEL_74;
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_70;
            v37 = *(char *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v22 = v33++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_71;
          }
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_74;
          v38 = 0;
          break;
        default:
LABEL_52:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_74:
          v43 = 0;
          goto LABEL_73;
      }
      while (1)
      {
        v39 = *v2;
        v40 = *(_QWORD *)&a1[v39];
        v41 = v40 + 1;
        if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
          break;
        v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
        *(_QWORD *)&a1[v39] = v41;
        if (v42 < 0)
        {
          v22 = v38++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_71;
      }
LABEL_70:
      a1[*v4] = 1;
LABEL_71:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v43 = a1[*v4] == 0;
LABEL_73:
  PBReaderRecallMark();
  return v43;
}

void sub_189527FB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedPublisherAttributionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = (*(_WORD *)(a1 + 96) & 0xFC0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_18952849C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189528A40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189528CCC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPublisherAttributionSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOLocalizedPublisherAttribution *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v7;
        v18 = v16 | v11;
        v54 = v17;
        v55 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v56 = (v19 == 0) | v18;
        v57 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_68;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_68:
      v52 = 1;
      goto LABEL_69;
    }
    v33 = v25 >> 3;
    v34 = v57;
    if ((v56 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 == 5)
    {
      if (!v34)
        goto LABEL_59;
      if ((*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        PBReaderReadString();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = 40;
LABEL_52:
        v42 = *(void **)(a1 + v41);
        *(_QWORD *)(a1 + v41) = v40;

        --v9;
        goto LABEL_66;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_85;
      v47 = 16 * *(_BYTE *)(a1 + 60);
LABEL_65:
      v9 += v47 >> 7;
      goto LABEL_66;
    }
    if ((_DWORD)v33 == 4)
    {
      if (!v34)
        goto LABEL_59;
      if ((*(_BYTE *)(a1 + 60) & 2) == 0)
      {
        PBReaderReadString();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = 24;
        goto LABEL_52;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_85;
      v47 = *(_BYTE *)(a1 + 60) << 6;
      goto LABEL_65;
    }
    if ((_DWORD)v33 == 3)
      break;
    if ((v54 & 1) == 0 || (*(_BYTE *)(a1 + 60) & 1) != 0)
    {
LABEL_59:
      v46 = PBReaderSkipValueWithTag();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if ((v46 & 1) == 0)
      {
        v52 = 0;
        goto LABEL_69;
      }
      goto LABEL_67;
    }
    if (!*(_QWORD *)(a1 + 16))
    {
      v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
      v44 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v43;

    }
    v45 = PBUnknownFieldAdd();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if (!v45)
    {
      v52 = 0;
      v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
      goto LABEL_70;
    }
LABEL_67:
    if (!(v55 & 1 | (v9 != 0)))
      goto LABEL_68;
  }
  if (!v34 || (*(_BYTE *)(a1 + 60) & 4) != 0)
    goto LABEL_59;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_85;
  v39 = objc_alloc_init(GEOLocalizedPublisherAttribution);
  if (GEOLocalizedPublisherAttributionReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOPublisherAttributionSource _addNoFlagsLocalizedAttribution:](a1, v39);

LABEL_66:
    v21 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_67;
  }

LABEL_85:
  v52 = 0;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_69:
  v53 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  if ((v54 & 1) == 0)
    goto LABEL_71;
LABEL_70:
  *(_BYTE *)(a1 + v53[265]) |= 1u;
LABEL_71:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[265]) |= 4u;
    *(_BYTE *)(a1 + v53[265]) |= 2u;
    *(_BYTE *)(a1 + v53[265]) |= 8u;
  }
  else if (v19)
  {
    while (1)
    {
      v48 = *v19++;
      v49 = 4;
      switch(v48)
      {
        case 0:
          goto LABEL_78;
        case 3:
          goto LABEL_77;
        case 4:
          v49 = 2;
          goto LABEL_77;
        case 5:
          v49 = 8;
LABEL_77:
          *(_BYTE *)(a1 + v53[265]) |= v49;
          break;
        default:
          continue;
      }
    }
  }
LABEL_78:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18952958C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895296D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189529E98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPublisherAttributionSourceCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOPublisherAttributionSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPublisherAttributionSourceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPublisherAttributionSourceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPublisherAttributionSourceReadAllFrom_initialTag;
  Specified = GEOPublisherAttributionSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPublisherAttributionSourceCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18952A124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPublisherAttributionSourceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPublisherAttributionSourceReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18952A184(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherAttributionSourceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 5)
        break;
      if ((_DWORD)v17 == 4)
      {
        if (v15 != 2)
          goto LABEL_31;
LABEL_28:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_31;
        goto LABEL_29;
      }
      if ((_DWORD)v17 != 3)
        goto LABEL_28;
      if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedPublisherAttributionIsValid(a1))
      {
LABEL_31:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2)
      goto LABEL_31;
    goto LABEL_28;
  }
LABEL_30:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_18952A5E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPublisherAttributionSourceIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_18952A9D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952AD04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952B030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionManifestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOActionComponentMapEntry *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  char v48;
  int v49;
  int v50;
  BOOL v51;
  char v52;
  void *v53;
  int v55;
  int *v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 68)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFFFFFCFFFDFFFELL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v57 = v16 & ~(_BYTE)v11 | v9;
        v58 = v16 | v11 | v57;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v59 = (v17 == 0) | v16 | v11;
        v60 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_77;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_77:
      v55 = 1;
      goto LABEL_78;
    }
    v31 = v23 >> 3;
    v32 = v60;
    if ((v59 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((int)v31 <= 199)
      break;
    if ((_DWORD)v31 == 200)
    {
      if ((v8 & 1) != 0)
      {
        *(_BYTE *)(a1 + 68) |= 1u;
        v40 = *v18;
        v41 = *(_QWORD *)(v3 + v40);
        v6 = (int *)MEMORY[0x1E0D82BD8];
        if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]))
        {
          v42 = *(_QWORD *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v41 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v19) = 1;
          v42 = 0;
        }
        *(_QWORD *)(a1 + 48) = v42;
        goto LABEL_70;
      }
LABEL_69:
      v47 = PBReaderSkipValueWithTag();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      v6 = (int *)MEMORY[0x1E0D82BD8];
      if ((v47 & 1) != 0)
        goto LABEL_70;
LABEL_100:
      v55 = 0;
LABEL_78:
      v56 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      goto LABEL_79;
    }
    if ((_DWORD)v31 != 201)
      goto LABEL_61;
    if (!v32)
      goto LABEL_69;
    if ((*(_BYTE *)(a1 + 68) & 0x10) != 0)
    {
      v48 = PBReaderSkipValueWithTag();
      v6 = (int *)MEMORY[0x1E0D82BD8];
      if ((v48 & 1) == 0)
        goto LABEL_102;
      v7 += *(unsigned __int8 *)(a1 + 68) << 27 >> 31;
LABEL_74:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_70;
    }
    PBReaderReadString();
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v38;

    --v7;
LABEL_56:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BD8];
LABEL_70:
    if (!(v58 & 1 | (v7 != 0)))
      goto LABEL_77;
  }
  if ((_DWORD)v31 != 1)
  {
    if ((_DWORD)v31 == 2)
    {
      v6 = (int *)MEMORY[0x1E0D82BD8];
      if (!v32 || (*(_BYTE *)(a1 + 68) & 4) != 0)
      {
        v46 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if ((v46 & 1) == 0)
          goto LABEL_100;
        goto LABEL_70;
      }
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_102;
      v37 = objc_alloc_init(GEOActionComponentMapEntry);
      if (!GEOActionComponentMapEntryReadAllFrom((uint64_t)v37, (void *)v3))
        goto LABEL_101;
      PBReaderRecallMark();
      -[GEOSearchAttributionManifest _addNoFlagsActionComponentMapEntries:](a1, v37);

      goto LABEL_74;
    }
LABEL_61:
    if ((v57 & 1) != 0 && (*(_BYTE *)(a1 + 68) & 2) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v44 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v43;

      }
      v45 = PBUnknownFieldAdd();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      v6 = (int *)MEMORY[0x1E0D82BD8];
      if (!v45)
      {
        v55 = 0;
        v56 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        goto LABEL_80;
      }
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  if (!v32 || (*(_BYTE *)(a1 + 68) & 8) != 0)
    goto LABEL_69;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_102;
  v37 = objc_alloc_init(GEOSearchAttributionSource);
  if (GEOSearchAttributionSourceReadAllFrom((uint64_t)v37, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOSearchAttributionManifest _addNoFlagsSearchAttributionSources:](a1, v37);

    goto LABEL_56;
  }
LABEL_101:

LABEL_102:
  v55 = 0;
  v56 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_79:
  if ((v57 & 1) == 0)
    goto LABEL_81;
LABEL_80:
  *(_BYTE *)(a1 + v56[585]) |= 2u;
LABEL_81:
  if (v60 & 1 | ((v55 & 1) == 0))
  {
    *(_BYTE *)(a1 + v56[585]) |= 8u;
    *(_BYTE *)(a1 + v56[585]) |= 4u;
    *(_BYTE *)(a1 + v56[585]) |= 0x10u;
    goto LABEL_94;
  }
  if (v17)
  {
    while (2)
    {
      while (1)
      {
        v50 = *v17++;
        v49 = v50;
        v51 = v50 == 1;
        if (v50 > 1)
          break;
        if (v51)
        {
          v52 = 8;
LABEL_92:
          *(_BYTE *)(a1 + v56[585]) |= v52;
          continue;
        }
        if (!v49)
          goto LABEL_94;
      }
      if (v49 == 201)
      {
        v52 = 16;
      }
      else
      {
        if (v49 != 2)
          continue;
        v52 = 4;
      }
      goto LABEL_92;
    }
  }
LABEL_94:
  if (v55)
    v3 = *(_BYTE *)(v3 + *v19) == 0;
  else
    v3 = 0;
  if ((v60 & 1) != 0)
  {
    v53 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18952BEA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionManifestReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSearchAttributionManifestReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 56) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 60) = objc_msgSend(v6, "length");
      Specified = GEOSearchAttributionManifestReadSpecified(a1, (unint64_t)v6, (int *)&GEOSearchAttributionManifestReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_18952C0E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952C3DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952C834(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952CB70(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952CE3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOSearchAttributionSourceReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  char v18;
  int *v19;
  int *v20;
  char v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  int *v35;
  unint64_t v36;
  BOOL v37;
  int *v38;
  int v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  GEOLocalizedAttribution *v51;
  id v52;
  void *v53;
  int v54;
  int v55;
  int *v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  void *v72;
  int v73;
  int *v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  char v98;
  BOOL v99;
  uint64_t v100;
  char v101;
  __int16 v102;
  char v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  int v119;
  __int16 v120;
  void *v121;
  char v123;
  char v124;
  int v125;
  char v126;
  char v127;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 128));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 124);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 120));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int16 *)(a1 + 140) >> 3) & 1)
      + ((*(unsigned __int16 *)(a1 + 140) >> 5) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 140)), (uint16x4_t)0xFFF9FFFCFFF7FFF8), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 140) >> 11) & 1)+ ((*(_WORD *)(a1 + 140) >> 10) & 1)+ ((*(_WORD *)(a1 + 140) >> 6) & 1));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 5;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((((v16 | v11) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v125 = 1;
        v21 = v17;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_189;
        v123 = v17;
        v126 = v18 | v17;
        v127 = (v20 == 0) | v18;
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v124 = v18;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v22))
      goto LABEL_187;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v19;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_187:
      v125 = 1;
      goto LABEL_188;
    }
    v35 = v6;
    v36 = v26 >> 3;
    v37 = v18;
    if ((v127 & 1) == 0)
    {
      v38 = v20;
      do
      {
        v40 = *v38++;
        v39 = v40;
        v37 = v40 != 0;
        if (v40)
          v41 = v39 == (_DWORD)v36;
        else
          v41 = 1;
      }
      while (!v41);
    }
    switch((int)v36)
    {
      case 1:
        if (!v37)
          goto LABEL_139;
        v6 = v35;
        if ((*(_WORD *)(a1 + 140) & 0x200) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 96;
          goto LABEL_101;
        }
        v101 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((v101 & 1) == 0)
          goto LABEL_211;
        v102 = *(_WORD *)(a1 + 140) << 6;
        goto LABEL_164;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_139;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        v6 = v35;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        while (2)
        {
          v47 = *v19;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v31 = v45++ >= 9;
              if (v31)
              {
                LODWORD(v46) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v46) = 0;
LABEL_144:
        *(_DWORD *)(a1 + 132) = v46;
        goto LABEL_185;
      case 3:
        if (!v37 || (*(_WORD *)(a1 + 140) & 0x100) != 0)
          goto LABEL_137;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_211;
        v6 = v35;
        v51 = objc_alloc_init(GEOLocalizedAttribution);
        if (!GEOLocalizedAttributionReadAllFrom((uint64_t)v51, (void *)v3, v10 & 1))
          goto LABEL_210;
        PBReaderRecallMark();
        -[GEOSearchAttributionSource _addNoFlagsLocalizedAttribution:](a1, v51);
        goto LABEL_89;
      case 5:
        if (!v37 || (*(_WORD *)(a1 + 140) & 0x10) != 0)
          goto LABEL_139;
        v6 = v35;
        if (v33 != 2)
        {
          v105 = 0;
          v106 = 0;
          v107 = 0;
          v19 = (int *)MEMORY[0x1E0D82BF0];
          while (1)
          {
            v108 = *v19;
            v109 = *(_QWORD *)(v3 + v108);
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)(v3 + *v6))
              goto LABEL_180;
            v111 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v109);
            *(_QWORD *)(v3 + v108) = v110;
            v107 |= (unint64_t)(v111 & 0x7F) << v105;
            if (v111 < 0)
            {
              v105 += 7;
              v31 = v106++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_181;
          }
        }
        v55 = PBReaderPlaceMark();
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if (!v55)
          goto LABEL_211;
        while (1)
        {
          v56 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_165;
          v57 = 0;
          v58 = 0;
          v59 = 0;
          v60 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v61 = *v19;
            v62 = *(_QWORD *)(v3 + v61);
            v63 = v62 + 1;
            if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
              break;
            v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v60) + v62);
            *(_QWORD *)(v3 + v61) = v63;
            v59 |= (unint64_t)(v64 & 0x7F) << v57;
            if (v64 < 0)
            {
              v57 += 7;
              v31 = v58++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_75;
          }
          *(_BYTE *)(v3 + *v56) = 1;
LABEL_75:
          PBRepeatedInt32Add();
        }
      case 6:
        if (!v37 || (*(_WORD *)(a1 + 140) & 0x80) != 0)
          goto LABEL_137;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_211;
        v6 = v35;
        v51 = objc_alloc_init(GEOAttributionApp);
        if (!GEOAttributionAppReadAllFrom((uint64_t)v51, (void *)v3, v10 & 1))
          goto LABEL_210;
        PBReaderRecallMark();
        -[GEOSearchAttributionSource _addNoFlagsAttributionApps:](a1, v51);
        goto LABEL_89;
      case 7:
        if (!v37)
          goto LABEL_139;
        v6 = v35;
        if ((*(_WORD *)(a1 + 140) & 0x800) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 112;
          goto LABEL_101;
        }
        v103 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((v103 & 1) == 0)
          goto LABEL_211;
        v102 = 16 * *(_WORD *)(a1 + 140);
        goto LABEL_164;
      case 8:
        if (!v37 || (*(_WORD *)(a1 + 140) & 0x400) != 0)
        {
LABEL_137:
          v97 = PBReaderSkipValueWithTag();
          v18 = v124;
          v6 = v35;
          v19 = (int *)MEMORY[0x1E0D82BF0];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if ((v97 & 1) == 0)
            goto LABEL_209;
LABEL_185:
          if (!(v126 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_187;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_211;
        v6 = v35;
        v51 = objc_alloc_init(GEOComponentAction);
        if (GEOComponentActionReadAllFrom((uint64_t)v51, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOSearchAttributionSource _addNoFlagsSupportedComponentActions:](a1, v51);
LABEL_89:

LABEL_102:
          v18 = v124;
          v19 = (int *)MEMORY[0x1E0D82BF0];
LABEL_183:
          v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_184:
          v23 = (int *)MEMORY[0x1E0D82BB8];
          goto LABEL_185;
        }
LABEL_210:

LABEL_211:
        v125 = 0;
        v18 = v124;
LABEL_188:
        v21 = v123;
LABEL_189:
        if ((v21 & 1) != 0)
LABEL_190:
          *(_WORD *)(a1 + 140) |= 8u;
        if (v18 & 1 | ((v125 & 1) == 0))
        {
          *(_WORD *)(a1 + 140) |= 0x200u;
          *(_WORD *)(a1 + 140) |= 0x100u;
          *(_WORD *)(a1 + 140) |= 0x10u;
          *(_WORD *)(a1 + 140) |= 0x80u;
          *(_WORD *)(a1 + 140) |= 0x800u;
          *(_WORD *)(a1 + 140) |= 0x400u;
          *(_WORD *)(a1 + 140) |= 0x40u;
          *(_WORD *)(a1 + 140) |= 0x20u;
        }
        else if (v20)
        {
          while (1)
          {
            v119 = *v20++;
            v120 = 512;
            switch(v119)
            {
              case 0:
                goto LABEL_203;
              case 1:
                goto LABEL_202;
              case 3:
                v120 = 256;
                goto LABEL_202;
              case 5:
                v120 = 16;
                goto LABEL_202;
              case 6:
                v120 = 128;
                goto LABEL_202;
              case 7:
                v120 = 2048;
                goto LABEL_202;
              case 8:
                v120 = 1024;
                goto LABEL_202;
              case 10:
                v120 = 64;
                goto LABEL_202;
              case 11:
                v120 = 32;
LABEL_202:
                *(_WORD *)(a1 + 140) |= v120;
                break;
              default:
                continue;
            }
          }
        }
LABEL_203:
        if (v125)
        {
          v3 = *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]) == 0;
          if ((v18 & 1) == 0)
            return v3;
LABEL_207:
          v121 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v18 & 1) != 0)
            goto LABEL_207;
        }
        return v3;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_139;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        *(_WORD *)(a1 + 140) |= 2u;
        v6 = v35;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        while (2)
        {
          v68 = *v19;
          v69 = *(_QWORD *)(v3 + v68);
          v70 = v69 + 1;
          if (v69 == -1 || v70 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v71 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v69);
            *(_QWORD *)(v3 + v68) = v70;
            v67 |= (unint64_t)(v71 & 0x7F) << v65;
            if (v71 < 0)
            {
              v65 += 7;
              v31 = v66++ >= 9;
              if (v31)
              {
                v67 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v67 = 0;
LABEL_148:
        v99 = v67 != 0;
        v100 = 137;
        goto LABEL_157;
      case 10:
        if (!v37)
          goto LABEL_139;
        v6 = v35;
        if ((*(_WORD *)(a1 + 140) & 0x40) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = 72;
LABEL_101:
          v72 = *(void **)(a1 + v43);
          *(_QWORD *)(a1 + v43) = v42;

          --v7;
          goto LABEL_102;
        }
        v104 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if ((v104 & 1) == 0)
          goto LABEL_211;
        v102 = *(_WORD *)(a1 + 140) << 9;
LABEL_164:
        v7 += v102 >> 15;
LABEL_182:
        v18 = v124;
        goto LABEL_183;
      case 11:
        if (!v37 || (*(_WORD *)(a1 + 140) & 0x20) != 0)
          goto LABEL_139;
        v6 = v35;
        if (v33 != 2)
        {
          v112 = 0;
          v113 = 0;
          v114 = 0;
          v19 = (int *)MEMORY[0x1E0D82BF0];
          while (1)
          {
            v115 = *v19;
            v116 = *(_QWORD *)(v3 + v115);
            v117 = v116 + 1;
            if (v116 == -1 || v117 > *(_QWORD *)(v3 + *v6))
              break;
            v118 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v116);
            *(_QWORD *)(v3 + v115) = v117;
            v114 |= (unint64_t)(v118 & 0x7F) << v112;
            if (v118 < 0)
            {
              v112 += 7;
              v31 = v113++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_181;
          }
LABEL_180:
          *(_BYTE *)(v3 + *v22) = 1;
LABEL_181:
          PBRepeatedInt32Add();
          goto LABEL_182;
        }
        v73 = PBReaderPlaceMark();
        v19 = (int *)MEMORY[0x1E0D82BF0];
        if (!v73)
          goto LABEL_211;
        while (1)
        {
          v74 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v75 = 0;
          v76 = 0;
          v77 = 0;
          v78 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v79 = *v19;
            v80 = *(_QWORD *)(v3 + v79);
            v81 = v80 + 1;
            if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v6))
              break;
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v78) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v77 |= (unint64_t)(v82 & 0x7F) << v75;
            if (v82 < 0)
            {
              v75 += 7;
              v31 = v76++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_117;
          }
          *(_BYTE *)(v3 + *v74) = 1;
LABEL_117:
          PBRepeatedInt32Add();
        }
LABEL_165:
        PBReaderRecallMark();
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v18 = v124;
        goto LABEL_184;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_139;
        v83 = 0;
        v84 = 0;
        v85 = 0;
        *(_WORD *)(a1 + 140) |= 4u;
        v6 = v35;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        while (2)
        {
          v86 = *v19;
          v87 = *(_QWORD *)(v3 + v86);
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v87);
            *(_QWORD *)(v3 + v86) = v88;
            v85 |= (unint64_t)(v89 & 0x7F) << v83;
            if (v89 < 0)
            {
              v83 += 7;
              v31 = v84++ >= 9;
              if (v31)
              {
                v85 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v85 = 0;
LABEL_152:
        v99 = v85 != 0;
        v100 = 138;
        goto LABEL_157;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_139;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        *(_WORD *)(a1 + 140) |= 1u;
        v6 = v35;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        while (2)
        {
          v93 = *v19;
          v94 = *(_QWORD *)(v3 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v94);
            *(_QWORD *)(v3 + v93) = v95;
            v92 |= (unint64_t)(v96 & 0x7F) << v90;
            if (v96 < 0)
            {
              v90 += 7;
              v31 = v91++ >= 9;
              if (v31)
              {
                v92 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          v92 = 0;
LABEL_156:
        v99 = v92 != 0;
        v100 = 136;
LABEL_157:
        *(_BYTE *)(a1 + v100) = v99;
        goto LABEL_185;
      default:
        if ((v123 & 1) == 0 || (*(_WORD *)(a1 + 140) & 8) != 0)
        {
LABEL_139:
          v98 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v18 = v124;
          v6 = v35;
          v19 = (int *)MEMORY[0x1E0D82BF0];
          if ((v98 & 1) == 0)
          {
LABEL_209:
            v125 = 0;
            goto LABEL_188;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v52 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v53 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v52;

          }
          v54 = PBUnknownFieldAdd();
          v18 = v124;
          v6 = v35;
          v19 = (int *)MEMORY[0x1E0D82BF0];
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v54)
          {
            v125 = 0;
            goto LABEL_190;
          }
        }
        goto LABEL_185;
    }
  }
}

void sub_18952DD9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952DEF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952E06C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952E1C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952E2B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952E40C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952E4F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952EEBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSearchAttributionSourceCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[128];
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = a1[11];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v25;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v25 != v5)
          objc_enumerationMutation(v2);
        -[GEOLocalizedAttribution readAll:](*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    }
    while (v4);
  }

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v7 = a1[10];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v29, 16);
    }
    while (v9);
  }

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v12 = a1[13];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v17;
    while (1)
    {
      if (*(_QWORD *)v17 != v15)
        objc_enumerationMutation(v12);
      if (!--v14)
      {
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v16, v28, 16);
        if (!v14)
          break;
      }
    }
  }

}

unint64_t GEOSearchAttributionSourceReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 124))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOSearchAttributionSourceReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 128));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 120) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 124) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOSearchAttributionSourceReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOSearchAttributionSourceReadAllFrom_initialTag;
  Specified = GEOSearchAttributionSourceReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOSearchAttributionSourceCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 128));
  return Specified;
}

void sub_18952F328(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952F870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18952FE30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18953035C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189530420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895306C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

id pointsToCoordinates(void *a1, _QWORD *a2, double a3, double a4)
{
  id v7;
  void *v8;
  _DWORD *v9;
  _DWORD *v10;
  GEOLatLng *v11;
  unint64_t v12;
  double v13;
  unint64_t v14;
  double v15;

  v7 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (_DWORD *)*a2;
  v10 = (_DWORD *)a2[1];
  if ((_DWORD *)*a2 != v10)
  {
    do
    {
      v11 = objc_alloc_init(GEOLatLng);
      objc_msgSend(v7, "westLng");
      LODWORD(v12) = *v9;
      -[GEOLatLng setLng:](v11, "setLng:", v13 + (double)v12 * a4);
      objc_msgSend(v7, "southLat");
      LODWORD(v14) = v9[1];
      -[GEOLatLng setLat:](v11, "setLat:", v15 + (double)v14 * a3);
      objc_msgSend(v8, "addObject:", v11);

      v9 += 3;
    }
    while (v9 != v10);
  }

  return v8;
}

void sub_189530824(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189530998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{

  _Unwind_Resume(a1);
}

void sub_189530B1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189530B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189530D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189530E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189530FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189531084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_189531150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL GEOPDRapFilterReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v16;
  BOOL v17;
  id v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v8 = v3[*v6];
      if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
        break;
      if (v3[*v6])
      {
        v8 = 1;
        break;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        v12 = *v4;
        v13 = *(_QWORD *)&v3[v12];
        if (v13 == -1 || v13 >= *(_QWORD *)&v3[*v5])
          break;
        v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v13);
        *(_QWORD *)&v3[v12] = v13 + 1;
        v11 |= (unint64_t)(v14 & 0x7F) << v9;
        if ((v14 & 0x80) == 0)
          goto LABEL_13;
        v9 += 7;
        if (v10++ >= 9)
        {
          v16 = 0;
          v8 = v3[*v6];
          goto LABEL_16;
        }
      }
      v3[*v6] = 1;
LABEL_13:
      v8 = v3[*v6];
      if (v3[*v6])
        v16 = 0;
      else
        v16 = v11;
LABEL_16:
      if (v8)
        v17 = 1;
      else
        v17 = (v16 & 7) == 4;
      if (v17)
        break;
      if (!*(_QWORD *)(a1 + 8))
      {
        v18 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v19 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v18;

      }
      if ((PBUnknownFieldAdd() & 1) == 0)
        goto LABEL_23;
    }
    v20 = v8 == 0;
  }
  else
  {
LABEL_23:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_189532390(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895325A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_189532628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)GEOPathMatcher;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_18953295C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void sub_189532E88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189532FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_189533668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1895337F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189533F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_1895343D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189536198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,void *a24)
{

  _Unwind_Resume(a1);
}

_QWORD *maps::path_codec::RoadNetworkPath<GEOPathMatcherRoadKey>::~RoadNetworkPath(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::~__hash_table((uint64_t)(a1 + 11));
  v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[5];
  if (v3)
  {
    a1[6] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_189536624(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_189536B04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_189536F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_189538F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  maps::path_codec::Logger *v65;

  if (SLOBYTE(STACK[0x2C7]) < 0)
    operator delete((void *)STACK[0x2B0]);
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2C8]);
  maps::path_codec::RoadProperties::~RoadProperties((void **)&STACK[0x228]);
  STACK[0x2C8] = (unint64_t)&a64;
  std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2C8]);
  maps::path_codec::Logger::deregister_logger(v65);
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&a55);

  _Unwind_Resume(a1);
}

void sub_1895395F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1895397AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18953989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_18953994C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void ___ZL23GEOGetGEOPathMatcherLogv_block_invoke_2()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEOPathMatcher");
  v1 = (void *)_MergedGlobals_263;
  _MergedGlobals_263 = (uint64_t)v0;

}

void GEOPathCodecLogger::~GEOPathCodecLogger(GEOPathCodecLogger *this)
{
  JUMPOUT(0x18D76437CLL);
}

void GEOPathCodecLogger::log_trace(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  GEOGetPathCodecLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }

}

void maps::path_codec::AbstractLogger::log_trace(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v6;

  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 16))(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_189539BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_debug(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  GEOGetPathCodecLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v5, 0xCu);
  }

}

void maps::path_codec::AbstractLogger::log_debug(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v6;

  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 32))(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_189539CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_info(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  GEOGetPathCodecLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&v5, 0xCu);
  }

}

void maps::path_codec::AbstractLogger::log_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v6;

  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 48))(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_189539E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_warning(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  GEOGetPathCodecLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v5, 0xCu);
  }

}

void maps::path_codec::AbstractLogger::log_warning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v6;

  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_189539F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GEOPathCodecLogger::log_error(uint64_t a1, uint64_t *a2)
{
  NSObject *v3;
  uint64_t *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  GEOGetPathCodecLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a2 + 23) >= 0)
      v4 = a2;
    else
      v4 = (uint64_t *)*a2;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_1885A9000, v3, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v5, 0xCu);
  }

}

void maps::path_codec::AbstractLogger::log_error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v6;

  maps::path_codec::AbstractLogger::prepend_message_with_location_info((uint64_t)__p, a2, a3, a4);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_18953A04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id GEOGetPathCodecLog(void)
{
  if (qword_1ECDBC2D0 != -1)
    dispatch_once(&qword_1ECDBC2D0, &__block_literal_global_187_0);
  return (id)qword_1ECDBC2C8;
}

void ___ZL18GEOGetPathCodecLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "PathCodec");
  v1 = (void *)qword_1ECDBC2C8;
  qword_1ECDBC2C8 = (uint64_t)v0;

}

uint64_t maps::path_codec::AbstractLogger::prepend_message_with_location_info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = *(_QWORD *)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)":", 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" | ", 3);
  v12 = *(char *)(a4 + 23);
  if (v12 >= 0)
    v13 = a4;
  else
    v13 = *(_QWORD *)a4;
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a4 + 23);
  else
    v14 = *(_QWORD *)(a4 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
  std::stringbuf::str();
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v18);
}

void sub_18953A1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::decode_multi_segment_path(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  char *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  int v42;
  _DWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _DWORD *v62;
  unsigned int *v63;
  BOOL v64;
  BOOL v65;
  double v66;
  double v67;
  BOOL v68;
  int v69;
  _DWORD *v70;
  __int128 *v71;
  double v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  void *v76;
  __int128 v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  signed int v87;
  double v88;
  int v89;
  double v90;
  double v91;
  BOOL v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  char v97;
  void *v98;
  uint64_t v99;
  __int128 v100;
  size_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  void *v107;
  const void *v108;
  unint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void **v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  _DWORD *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  _DWORD *v128;
  _QWORD *v129;
  __int128 *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  int v139;
  int v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  uint64_t *v144;
  _QWORD *v145;
  char v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  int v162;
  __int128 *v163;
  __int128 *v164;
  const void **v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172[2];
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  void *v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  void *v183;
  void *v184;
  uint64_t v185;
  void *v186[2];
  char v187;
  void *v188;
  void *v189;
  uint64_t v190;
  void *v191;
  void *v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  unsigned __int8 v196;
  void *v197;
  _BYTE *v198;
  void *v199;
  void *v200;
  _BYTE *v201;
  void *v202;
  void *v203;
  void *v204;
  __int128 v205;
  __int128 v206;
  uint64_t v207[2];
  __int128 v208;
  void *__dst[3];
  __int128 v210;
  __int128 v211;
  int v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  __int128 __src;
  uint64_t v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  uint64_t v221;
  void *v222;
  char v223;
  _BYTE v224[160];
  void *v225;
  void *v226;
  void *__p;
  void *v228;
  void *v229;
  void *v230;
  __int128 v231;
  __int128 v232;
  int v233;
  void *v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;

  v3 = a3;
  v4 = (uint64_t *)a2;
  v157 = a2 + 8;
  if (*(_BYTE *)(a2 + 121))
  {
    v5 = 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3);
    if (v5 <= 1)
    {
      v169 = 0;
      v170 = 0;
      v171 = 0;
LABEL_305:
      maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(a1, v4, (uint64_t)&v169, (_DWORD **)v3);
      *(_QWORD *)&v218 = &v169;
      goto LABEL_342;
    }
    v154 = a1;
    v37 = *(_QWORD *)a2;
    std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(&v174, v5 - 1);
    v38 = v175;
    if (v175 == v174)
    {
      v115 = v175;
LABEL_294:
      v169 = v115;
      v170 = v38;
      v171 = v176;
      v144 = &v174;
LABEL_304:
      *v144 = 0;
      v144[1] = 0;
      v144[2] = 0;
      *(_QWORD *)&v218 = &v174;
      std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
      v4 = (uint64_t *)a2;
      a1 = v154;
      goto LABEL_305;
    }
    v158 = (void *)v37;
    v39 = 0;
    v159 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v160 = *MEMORY[0x1E0DE4F60];
    v155 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      v215 = v39;
      v225 = v158;
      v226 = v158;
      maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::KHeap((uint64_t)&__p, 100);
      v231 = 0u;
      v232 = 0u;
      v233 = 1065353216;
      v235 = 0;
      v236 = 0;
      v234 = 0;
      v237 = v157;
      maps::path_codec::CostFunction::get_default_cost_function((uint64_t)&v213);
      v212 = 200000;
      v40 = (_DWORD *)*v3;
      v41 = *v3 + 72 * v39;
      v42 = *(_DWORD *)(v41 + 8);
      *(_QWORD *)&v208 = *(_QWORD *)v41;
      DWORD2(v208) = v42;
      memset(__dst, 0, sizeof(__dst));
      std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(__dst, *(const void **)(v41 + 16), *(_QWORD *)(v41 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v41 + 24) - *(_QWORD *)(v41 + 16)) >> 3));
      v43 = &v40[18 * v39];
      v44 = *(_OWORD *)(v43 + 10);
      v45 = *(_OWORD *)(v43 + 14);
      v210 = v44;
      v211 = v45;
      v46 = v215;
      if (v215)
      {
        v47 = __dst[0];
        v48 = __dst[1];
        if (__dst[0] != __dst[1])
        {
          v49 = v174 + 24 * v215;
          v51 = *(_QWORD *)(v49 - 16);
          v50 = (_QWORD *)(v49 - 16);
          v52 = (_QWORD *)(v51 - 32);
          v53 = (_QWORD *)(v51 - 24);
          while (1)
          {
            v54 = *v47;
            if (*v47)
              v55 = v52;
            else
              v55 = v53;
            if (!*v47)
              v54 = v47[1];
            if (v54 != *v55)
              break;
            v47 += 7;
            if (v47 == __dst[1])
              goto LABEL_69;
          }
          if (v47 != __dst[1])
          {
            v56 = v47 + 7;
            if (v47 + 7 != __dst[1])
            {
              do
              {
                v57 = (_QWORD *)(*v50 - 24);
                if (*v56)
                {
                  v57 = (_QWORD *)(*v50 - 32);
                  v58 = *v56;
                }
                else
                {
                  v58 = v56[1];
                }
                if (v58 == *v57)
                {
                  v44 = *(_OWORD *)v56;
                  v59 = *((_OWORD *)v56 + 1);
                  v60 = *((_OWORD *)v56 + 2);
                  *((_DWORD *)v47 + 12) = *((_DWORD *)v56 + 12);
                  *((_OWORD *)v47 + 1) = v59;
                  *((_OWORD *)v47 + 2) = v60;
                  *(_OWORD *)v47 = v44;
                  v47 += 7;
                }
                v56 += 7;
              }
              while (v56 != v48);
              v48 = __dst[1];
            }
            if (v48 != v47)
              __dst[1] = v47;
          }
        }
      }
LABEL_69:
      v61 = v46 + 1;
      v62 = (_DWORD *)*v3;
      v63 = (unsigned int *)(*v3 + 72 * (v46 + 1));
      v64 = (_DWORD)v208 == -1 && DWORD1(v208) == -1;
      v156 = v39;
      if (v64 || (*v63 == -1 ? (v65 = v63[1] == -1) : (v65 = 0), v65))
      {
        v69 = 0x7FFFFFFF;
      }
      else
      {
        maps::path_codec::great_circle_distance_in_m((uint64_t)&v208, v63, *(double *)&v44);
        v67 = v66 * 100.0;
        v68 = v67 >= -2147483650.0 && v67 < 2147483650.0;
        v69 = llround(v67);
        if (!v68)
          v69 = 0x7FFFFFFF;
      }
      v172[0] = 0;
      v172[1] = 0;
      v173 = 0;
      v70 = &v62[18 * v61];
      v71 = (__int128 *)*((_QWORD *)v70 + 2);
      v165 = (const void **)(v70 + 4);
      v72 = *((double *)v71 + 5);
      v73 = (uint64_t)v158;
      v207[0] = (uint64_t)v158;
      v207[1] = (uint64_t)&v215;
      v167 = (uint64_t *)(v70 + 6);
      v164 = (__int128 *)*((_QWORD *)v70 + 3);
      if (v71 != v164)
        break;
LABEL_234:
      if (maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
        std::string::basic_string[abi:ne180100]<0>(&__src, "Final choice");
        v197 = 0;
        v198 = 0;
        v199 = 0;
        std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v197, v172[0], (uint64_t)v172[1], ((char *)v172[1] - (char *)v172[0]) >> 5);
        maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v200, v207, (uint64_t)&__src, (uint64_t *)&v197);
        if (SHIBYTE(v202) >= 0)
          v110 = &v200;
        else
          v110 = v200;
        if (SHIBYTE(v202) >= 0)
          v111 = HIBYTE(v202);
        else
          v111 = (uint64_t)v201;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v110, v111);
        if (SHIBYTE(v202) < 0)
          operator delete(v200);
        if (v197)
        {
          v198 = v197;
          operator delete(v197);
        }
        if (SHIBYTE(v217) < 0)
          operator delete((void *)__src);
        std::string::basic_string[abi:ne180100]<0>(&v200, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)&v200, 165, (uint64_t)&__src);
        if (SHIBYTE(v217) < 0)
          operator delete((void *)__src);
        if (SHIBYTE(v202) < 0)
          operator delete(v200);
        *(_QWORD *)&v218 = v160;
        *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
        *((_QWORD *)&v218 + 1) = v155;
        if (v223 < 0)
          operator delete(v222);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v224);
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
      if ((_QWORD)v213)
      {
        *((_QWORD *)&v213 + 1) = v213;
        operator delete((void *)v213);
      }
      if (v234)
      {
        v235 = v234;
        operator delete(v234);
      }
      std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v231);
      if (v229)
      {
        v230 = v229;
        operator delete(v229);
      }
      if (__p)
      {
        v228 = __p;
        operator delete(__p);
      }
      v112 = v174;
      v113 = v174 + 24 * v156;
      v114 = *(void **)v113;
      if (*(_QWORD *)v113)
      {
        *(_QWORD *)(v174 + 24 * v156 + 8) = v114;
        operator delete(v114);
        *(_QWORD *)v113 = 0;
        *(_QWORD *)(v113 + 8) = 0;
        *(_QWORD *)(v113 + 16) = 0;
      }
      *(_OWORD *)v113 = *(_OWORD *)v172;
      *(_QWORD *)(v112 + 24 * v156 + 16) = v173;
      v115 = v174;
      if (*(_QWORD *)(v174 + 24 * v156) == *(_QWORD *)(v174 + 24 * v156 + 8))
      {
        if (maps::path_codec::Logger::m_log_level <= 3u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Pathlet ", 8);
          v145 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v145, (uint64_t)" NOT FOUND. Aborting decoding", 29);
          std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_warning((uint64_t)&v225, 193, (uint64_t)&v213);
          if (SBYTE7(v214) < 0)
            operator delete((void *)v213);
          if (SHIBYTE(__p) < 0)
            operator delete(v225);
          *(_QWORD *)&v218 = v160;
          *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
          *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
          if (v223 < 0)
            operator delete(v222);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D764310](v224);
        }
        v144 = &v169;
        goto LABEL_304;
      }
      v39 = v156 + 1;
      v38 = v175;
      if (v156 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v175 - v174) >> 3))
        goto LABEL_294;
    }
    v74 = v72 + 5.0;
    v163 = (__int128 *)&v62[18 * v61 + 10];
    v162 = llround((double)v69 * 5.0);
    v75 = 10000000;
    while (1)
    {
      if (*((double *)v71 + 5) > v74)
        goto LABEL_234;
      v76 = *(void **)v63;
      LODWORD(v201) = v63[2];
      v200 = v76;
      v203 = 0;
      v204 = 0;
      v202 = 0;
      std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(&v202, *v165, *v167, 0x6DB6DB6DB6DB6DB7 * ((*v167 - (uint64_t)*v165) >> 3));
      v77 = v163[1];
      v205 = *v163;
      v206 = v77;
      v218 = *v71;
      v219 = v71[1];
      v220 = v71[2];
      LODWORD(v221) = *((_DWORD *)v71 + 12);
      v78 = v202;
      if (v204 == v202)
      {
        if (v204)
        {
          v203 = v204;
          operator delete(v204);
        }
        v78 = operator new(0x38uLL);
        v202 = v78;
        v204 = (char *)v78 + 56;
      }
      *v78 = v218;
      v78[1] = v219;
      v78[2] = v220;
      *((_DWORD *)v78 + 12) = v221;
      v203 = (char *)v78 + 56;
      maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run(&v225, (uint64_t)&v208, (uint64_t)&v200, (uint64_t)&v213, &v212, (uint64_t **)&__src);
      v79 = maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(v73, (uint64_t *)&__src);
      if ((_QWORD)__src == *((_QWORD *)&__src + 1) || (v80 = v79, (int)v79 > v162))
      {
        if (maps::path_codec::Logger::m_log_level <= 1u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
          std::string::basic_string[abi:ne180100]<0>(&v194, "**Skipping (empty or too long)");
          v191 = 0;
          v192 = 0;
          v193 = 0;
          std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v191, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 5);
          maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v197, v207, (uint64_t)&v194, (uint64_t *)&v191);
          if (SHIBYTE(v199) >= 0)
            v83 = &v197;
          else
            v83 = v197;
          if (SHIBYTE(v199) >= 0)
            v84 = HIBYTE(v199);
          else
            v84 = (uint64_t)v198;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v83, v84);
          if (SHIBYTE(v199) < 0)
            operator delete(v197);
          if (v191)
          {
            v192 = v191;
            operator delete(v191);
          }
          if ((char)v196 < 0)
            operator delete(v194);
          std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_debug((uint64_t)&v197, 137, (uint64_t)&v194);
          goto LABEL_122;
        }
      }
      else
      {
        if ((int)v79 <= (int)v75)
        {
          if (v215 + 2 < 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3))
          {
            v85 = v75;
            v86 = (unsigned int *)(*v3 + 72 * (v215 + 2));
            maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run(&v225, (uint64_t)&v200, (uint64_t)v86, (uint64_t)&v213, &v212, (uint64_t **)&v197);
            v87 = maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(v73, (uint64_t *)&v197);
            if (v200 == (void *)-1 || *v86 == -1 && v86[1] == -1)
            {
              v89 = 0x7FFFFFFF;
            }
            else
            {
              maps::path_codec::great_circle_distance_in_m((uint64_t)&v200, v86, v88);
              v91 = v90 * 100.0;
              v92 = v91 >= -2147483650.0 && v91 < 2147483650.0;
              v89 = llround(v91);
              if (!v92)
                v89 = 0x7FFFFFFF;
            }
            v75 = v85;
            if (v197 == v198 || v87 > (int)llround((double)v89 * 5.0))
            {
              if (maps::path_codec::Logger::m_log_level <= 1u)
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
                v73 = (uint64_t)v158;
                std::string::basic_string[abi:ne180100]<0>(v186, "**Skipping (NEXT pathlet empty or too long)");
                v183 = 0;
                v184 = 0;
                v185 = 0;
                std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v183, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 5);
                maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v194, v207, (uint64_t)v186, (uint64_t *)&v183);
                if ((v196 & 0x80u) == 0)
                  v93 = &v194;
                else
                  v93 = v194;
                if ((v196 & 0x80u) == 0)
                  v94 = v196;
                else
                  v94 = v195;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v93, v94);
                if ((char)v196 < 0)
                  operator delete(v194);
                if (v183)
                {
                  v184 = v183;
                  operator delete(v183);
                }
                if (v187 < 0)
                  operator delete(v186[0]);
                std::string::basic_string[abi:ne180100]<0>(&v194, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
                std::stringbuf::str();
                maps::path_codec::Logger::log_debug((uint64_t)&v194, 156, (uint64_t)v186);
                if (v187 < 0)
                  operator delete(v186[0]);
                if ((char)v196 < 0)
                  operator delete(v194);
                *(_QWORD *)&v218 = v160;
                *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
                *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
                if (v223 < 0)
                  operator delete(v222);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x18D764310](v224);
                if (maps::path_codec::Logger::m_log_level <= 1u)
                {
                  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
                  std::string::basic_string[abi:ne180100]<0>(v186, "****  Next (which failed the test)");
                  v180 = 0;
                  v181 = 0;
                  v182 = 0;
                  std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v180, v197, (uint64_t)v198, (v198 - (_BYTE *)v197) >> 5);
                  maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v194, v207, (uint64_t)v186, (uint64_t *)&v180);
                  if ((v196 & 0x80u) == 0)
                    v95 = &v194;
                  else
                    v95 = v194;
                  if ((v196 & 0x80u) == 0)
                    v96 = v196;
                  else
                    v96 = v195;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v95, v96);
                  if ((char)v196 < 0)
                    operator delete(v194);
                  if (v180)
                  {
                    v181 = v180;
                    operator delete(v180);
                  }
                  if (v187 < 0)
                    operator delete(v186[0]);
                  std::string::basic_string[abi:ne180100]<0>(&v194, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
                  std::stringbuf::str();
                  maps::path_codec::Logger::log_debug((uint64_t)&v194, 157, (uint64_t)v186);
                  if (v187 < 0)
                    operator delete(v186[0]);
                  if ((char)v196 < 0)
                    operator delete(v194);
                  *(_QWORD *)&v218 = v160;
                  *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
                  *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
                  if (v223 < 0)
                    operator delete(v222);
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x18D764310](v224);
                }
                v97 = 0;
                goto LABEL_190;
              }
              v97 = 0;
            }
            else
            {
              v97 = 1;
            }
            v73 = (uint64_t)v158;
LABEL_190:
            if (v197)
            {
              v198 = v197;
              operator delete(v197);
            }
            if ((v97 & 1) == 0)
              goto LABEL_129;
          }
          if (maps::path_codec::Logger::m_log_level <= 1u)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
            std::string::basic_string[abi:ne180100]<0>(&v194, "**Accepting tentatively");
            v177 = 0;
            v178 = 0;
            v179 = 0;
            std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v177, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 5);
            maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v197, v207, (uint64_t)&v194, (uint64_t *)&v177);
            if (SHIBYTE(v199) >= 0)
              v98 = &v197;
            else
              v98 = v197;
            if (SHIBYTE(v199) >= 0)
              v99 = HIBYTE(v199);
            else
              v99 = (uint64_t)v198;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v98, v99);
            if (SHIBYTE(v199) < 0)
              operator delete(v197);
            if (v177)
            {
              v178 = v177;
              operator delete(v177);
            }
            if ((char)v196 < 0)
              operator delete(v194);
            std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
            std::stringbuf::str();
            maps::path_codec::Logger::log_debug((uint64_t)&v197, 161, (uint64_t)&v194);
            if ((char)v196 < 0)
              operator delete(v194);
            if (SHIBYTE(v199) < 0)
              operator delete(v197);
            *(_QWORD *)&v218 = v160;
            *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
            *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
            if (v223 < 0)
              operator delete(v222);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x18D764310](v224);
          }
          v100 = __src;
          v101 = *((_QWORD *)&__src + 1) - __src;
          v102 = (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 5;
          v103 = v173;
          v104 = (char *)v172[0];
          if (v102 <= (int64_t)(v173 - (unint64_t)v172[0]) >> 5)
          {
            v109 = ((char *)v172[1] - (char *)v172[0]) >> 5;
            if (v109 >= v102)
            {
              if (*((_QWORD *)&__src + 1) != (_QWORD)__src)
                memmove(v172[0], (const void *)__src, *((_QWORD *)&__src + 1) - __src);
              v3 = a3;
            }
            else
            {
              if (v172[1] != v172[0])
              {
                memmove(v172[0], (const void *)__src, (char *)v172[1] - (char *)v172[0]);
                v104 = (char *)v172[1];
              }
              v3 = a3;
              v108 = (const void *)(v100 + 32 * v109);
              v101 = *((_QWORD *)&v100 + 1) - (_QWORD)v108;
              if (*((const void **)&v100 + 1) != v108)
              {
                v107 = v104;
LABEL_229:
                memmove(v107, v108, v101);
              }
            }
          }
          else
          {
            if (v172[0])
            {
              v172[1] = v172[0];
              operator delete(v172[0]);
              v103 = 0;
              v172[0] = 0;
              v172[1] = 0;
              v173 = 0;
            }
            if ((v101 & 0x8000000000000000) != 0)
              std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
            v105 = v103 >> 4;
            if (v103 >> 4 <= v102)
              v105 = v102;
            if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFE0)
              v106 = 0x7FFFFFFFFFFFFFFLL;
            else
              v106 = v105;
            std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](v172, v106);
            v3 = a3;
            v104 = (char *)v172[1];
            if (*((_QWORD *)&v100 + 1) != (_QWORD)v100)
            {
              v107 = v172[1];
              v108 = (const void *)v100;
              goto LABEL_229;
            }
          }
          v172[1] = &v104[v101];
          v75 = v80;
          v73 = (uint64_t)v158;
          goto LABEL_129;
        }
        if (maps::path_codec::Logger::m_log_level <= 1u)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
          std::string::basic_string[abi:ne180100]<0>(&v194, "**Skipping (seen better one)");
          v188 = 0;
          v189 = 0;
          v190 = 0;
          std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(&v188, (const void *)__src, *((uint64_t *)&__src + 1), (uint64_t)(*((_QWORD *)&__src + 1) - __src) >> 5);
          maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()((uint64_t)&v197, v207, (uint64_t)&v194, (uint64_t *)&v188);
          if (SHIBYTE(v199) >= 0)
            v81 = &v197;
          else
            v81 = v197;
          if (SHIBYTE(v199) >= 0)
            v82 = HIBYTE(v199);
          else
            v82 = (uint64_t)v198;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v81, v82);
          if (SHIBYTE(v199) < 0)
            operator delete(v197);
          if (v188)
          {
            v189 = v188;
            operator delete(v188);
          }
          if ((char)v196 < 0)
            operator delete(v194);
          std::string::basic_string[abi:ne180100]<0>(&v197, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDijkstraDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_debug((uint64_t)&v197, 142, (uint64_t)&v194);
LABEL_122:
          if ((char)v196 < 0)
            operator delete(v194);
          if (SHIBYTE(v199) < 0)
            operator delete(v197);
          *(_QWORD *)&v218 = v160;
          *(_QWORD *)((char *)&v218 + *(_QWORD *)(v160 - 24)) = v159;
          *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
          if (v223 < 0)
            operator delete(v222);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D764310](v224);
        }
      }
LABEL_129:
      if ((_QWORD)__src)
      {
        *((_QWORD *)&__src + 1) = __src;
        operator delete((void *)__src);
      }
      if (v202)
      {
        v203 = v202;
        operator delete(v202);
      }
      v71 = (__int128 *)((char *)v71 + 56);
      if (v71 == v164)
        goto LABEL_234;
    }
  }
  v153 = a1;
  v6 = *(void **)a2;
  std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(&v200, 0x8E38E38E38E38E39 * ((a3[1] - *a3) >> 3) - 1);
  v7 = v201;
  if (v201 != v200)
  {
    v8 = 0;
    v9 = 0;
    v10 = *MEMORY[0x1E0DE4F60];
    v168 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v11 = 72;
    v166 = MEMORY[0x1E0DE4FB8] + 16;
    while (1)
    {
      maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>((uint64_t)&v218, *a3 + v11 - 72);
      maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>((uint64_t)&v225, *a3 + v11);
      maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>((void **)&__src, (uint64_t)&v218, (uint64_t)&v225, v6, v157);
      v12 = (char *)v200 + v8;
      v13 = *(void **)((char *)v200 + v8);
      if (v13)
      {
        v12[1] = v13;
        operator delete(v13);
        *v12 = 0;
        v12[1] = 0;
        v12[2] = 0;
      }
      *(_OWORD *)v12 = __src;
      v12[2] = v217;
      if (__p)
      {
        v228 = __p;
        operator delete(__p);
      }
      if ((_QWORD)v219)
      {
        *((_QWORD *)&v219 + 1) = v219;
        operator delete((void *)v219);
      }
      v14 = v9 + 1;
      v15 = (char *)v200;
      v16 = *(_QWORD *)((char *)v200 + v8);
      v17 = *(_QWORD *)((char *)v200 + v8 + 8);
      if (v16 != v17)
        break;
      if (maps::path_codec::Logger::m_log_level <= 3u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Decoding pathlet between ", 25);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" and ", 5);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" failed using best scored segment(s).", 37);
        std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_warning((uint64_t)&v225, 399, (uint64_t)&__src);
        if (SHIBYTE(v217) < 0)
          operator delete((void *)__src);
        if (SHIBYTE(__p) < 0)
          operator delete(v225);
        *(_QWORD *)&v218 = v10;
        *(_QWORD *)((char *)&v218 + *(_QWORD *)(v10 - 24)) = v168;
        *((_QWORD *)&v218 + 1) = v166;
        if (v223 < 0)
          operator delete(v222);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v224);
      }
      maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>((void **)&v218, *a3 + v11 - 72, *a3 + v11, v6, v157);
      v20 = (char *)v200 + v8;
      v21 = *(void **)((char *)v200 + v8);
      if (v21)
      {
        v20[1] = v21;
        operator delete(v21);
        *v20 = 0;
        v20[1] = 0;
        v20[2] = 0;
      }
      *(_OWORD *)v20 = v218;
      v20[2] = v219;
      v15 = (char *)v200;
      v16 = *(_QWORD *)((char *)v200 + v8);
      v17 = *(_QWORD *)((char *)v200 + v8 + 8);
      if (v16 != v17)
        break;
      if (maps::path_codec::Logger::m_log_level <= 3u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Decoding pathlet between ", 25);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" and ", 5);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" failed using all scored segment(s).", 36);
        std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_warning((uint64_t)&v225, 404, (uint64_t)&__src);
        goto LABEL_34;
      }
LABEL_41:
      v34 = v200;
      v7 = v201;
      v8 += 24;
      v11 += 72;
      ++v9;
      if (v14 >= 0xAAAAAAAAAAAAAAABLL * ((v201 - (_BYTE *)v200) >> 3))
      {
        v3 = a3;
        goto LABEL_270;
      }
    }
    v22 = v17 - v16;
    if (v22 < 0x21)
    {
      if (!v9)
        goto LABEL_32;
      v24 = v9 - 1;
      v26 = &v15[v8 - 24];
      v25 = *(_QWORD *)v26;
      v27 = *((_QWORD *)v26 + 1) - *(_QWORD *)v26;
      if (v27 >= 0x21)
      {
        v28 = v27 + v25;
        v29 = *(_OWORD *)(v28 - 48);
        v208 = *(_OWORD *)(v28 - 64);
        *(_OWORD *)__dst = v29;
        maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>((uint64_t)&v208, (uint64_t)v6, *a3 + v11);
      }
    }
    else
    {
      v23 = *(_OWORD *)(v22 + v16 - 48);
      v213 = *(_OWORD *)(v22 + v16 - 64);
      v214 = v23;
      maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>((uint64_t)&v213, (uint64_t)v6, *a3 + v11);
      if (!v9)
        goto LABEL_32;
      v24 = v9 - 1;
    }
    v30 = (char *)v200 + 24 * v24;
    if (*(_QWORD *)v30 != *((_QWORD *)v30 + 1)
      && !maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>((uint64_t)v6, (_QWORD **)((char *)v200 + v8), (void **)v30))
    {
      v116 = &v197;
      v3 = a3;
      goto LABEL_271;
    }
LABEL_32:
    if (maps::path_codec::Logger::m_log_level <= 1u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Found DFS pathlet between ", 26);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" and ", 5);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", ", 2);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" segments", 9);
      std::string::basic_string[abi:ne180100]<0>(&v225, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_debug((uint64_t)&v225, 427, (uint64_t)&__src);
LABEL_34:
      if (SHIBYTE(v217) < 0)
        operator delete((void *)__src);
      if (SHIBYTE(__p) < 0)
        operator delete(v225);
      *(_QWORD *)&v218 = v10;
      *(_QWORD *)((char *)&v218 + *(_QWORD *)(v10 - 24)) = v168;
      *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (v223 < 0)
        operator delete(v222);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](v224);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  v34 = v201;
LABEL_270:
  v197 = v34;
  v198 = v7;
  v199 = v202;
  v116 = &v200;
LABEL_271:
  *v116 = 0;
  v116[1] = 0;
  v116[2] = 0;
  *(_QWORD *)&v218 = &v200;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
  v117 = 0x8E38E38E38E38E39 * ((v3[1] - *v3) >> 3);
  if (v117 < 2)
  {
LABEL_272:
    maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(v153, (uint64_t *)a2, (uint64_t)&v197, (_DWORD **)v3);
    goto LABEL_341;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v198 - (_BYTE *)v197) >> 3) != v117 - 1)
    goto LABEL_340;
  v118 = *(void **)a2;
  v225 = v118;
  v226 = v118;
  maps::path_codec::KHeap<unsigned int,2u,std::less<unsigned int>>::KHeap((uint64_t)&__p, 100);
  v232 = 0u;
  v231 = 0u;
  v233 = 1065353216;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v237 = v157;
  v120 = (_DWORD *)*v3;
  v119 = v3[1];
  v121 = 0x8E38E38E38E38E39 * ((v119 - *v3) >> 3);
  if (v121 < 2)
  {
    v123 = 0;
    v122 = 0;
LABEL_308:
    if ((maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>((uint64_t)v118, &v225, v3, v123, v121 - 1, v157, (uint64_t *)&v197) & 1) != 0)
    {
      v146 = 1;
      if (v122 && maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Ran ", 4);
        v147 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)" queries", 8);
        std::string::basic_string[abi:ne180100]<0>(&v213, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)&v213, 263, (uint64_t)&v208);
        if (SHIBYTE(__dst[0]) < 0)
          operator delete((void *)v208);
        if (SBYTE7(v214) < 0)
          operator delete((void *)v213);
        *(_QWORD *)&v218 = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v218 + *(_QWORD *)(v218 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (v223 < 0)
          operator delete(v222);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v224);
        v146 = 1;
      }
    }
    else
    {
      if (maps::path_codec::Logger::m_log_level <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Could not decode path between ", 30);
        v149 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v149, (uint64_t)" and ", 5);
        std::ostream::operator<<();
        std::string::basic_string[abi:ne180100]<0>(&v213, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_error((uint64_t)&v213, 257, (uint64_t)&v208);
LABEL_322:
        if (SHIBYTE(__dst[0]) < 0)
          operator delete((void *)v208);
        if (SBYTE7(v214) < 0)
          operator delete((void *)v213);
        *(_QWORD *)&v218 = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v218 + *(_QWORD *)(v218 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        *((_QWORD *)&v218 + 1) = MEMORY[0x1E0DE4FB8] + 16;
        if (v223 < 0)
          operator delete(v222);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v224);
      }
      v146 = 0;
    }
    goto LABEL_333;
  }
  v122 = 0;
  v123 = 0;
  v124 = 1;
  while (1)
  {
    v125 = v124 - 1;
    v126 = (uint64_t *)((char *)v197 + 24 * v124 - 24);
    v127 = *v126;
    if (*v126 != v126[1])
      break;
LABEL_291:
    ++v124;
    v121 = 0x8E38E38E38E38E39 * ((v119 - (uint64_t)v120) >> 3);
    if (v124 >= v121)
      goto LABEL_308;
  }
  if (v123 == v125)
  {
LABEL_290:
    v123 = v124;
    goto LABEL_291;
  }
  v128 = &v120[18 * v125];
  v131 = (uint64_t *)*((_QWORD *)v128 + 2);
  v129 = v128 + 4;
  v130 = (__int128 *)v131;
  v133 = v129 + 1;
  v132 = (uint64_t *)v129[1];
  v134 = v131;
  if (v131 != v132)
  {
    v134 = (uint64_t *)v130;
    while (1)
    {
      v135 = *v134;
      if (!*v134)
        v135 = v134[1];
      if (v135 == *(_QWORD *)(v127 + 8 * (*v134 == 0)))
        break;
      v134 += 7;
      if (v134 == v132)
        goto LABEL_318;
    }
  }
  if (v134 == v132)
  {
LABEL_318:
    if (maps::path_codec::Logger::m_log_level <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Start segment of pathlet ", 25);
      v148 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)" not found in the possible segments of point ", 45);
      std::ostream::operator<<();
      std::string::basic_string[abi:ne180100]<0>(&v213, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_error((uint64_t)&v213, 235, (uint64_t)&v208);
      goto LABEL_322;
    }
    goto LABEL_332;
  }
  v218 = *v130;
  v136 = v218;
  v219 = v130[1];
  v137 = v219;
  v220 = v130[2];
  v138 = v220;
  v221 = *((_QWORD *)v130 + 6);
  v139 = v221;
  v140 = *((_DWORD *)v134 + 12);
  v142 = *((_OWORD *)v134 + 1);
  v141 = *((_OWORD *)v134 + 2);
  *v130 = *(_OWORD *)v134;
  v130[1] = v142;
  v130[2] = v141;
  *((_DWORD *)v130 + 12) = v140;
  *((_OWORD *)v134 + 1) = v137;
  *((_OWORD *)v134 + 2) = v138;
  *((_DWORD *)v134 + 12) = v139;
  *(_OWORD *)v134 = v136;
  v143 = *v129 + 56;
  if (v143 != *v133)
    *v133 = v143;
  v3 = a3;
  if ((maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>((uint64_t)v118, &v225, a3, v123, v124 - 1, v157, (uint64_t *)&v197) & 1) != 0)
  {
    ++v122;
    v120 = (_DWORD *)*a3;
    v119 = a3[1];
    goto LABEL_290;
  }
  if (maps::path_codec::Logger::m_log_level <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v218);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)"Could not decode path between ", 30);
    v150 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)" and ", 5);
    std::ostream::operator<<();
    std::string::basic_string[abi:ne180100]<0>(&v213, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_error((uint64_t)&v213, 245, (uint64_t)&v208);
    goto LABEL_322;
  }
LABEL_332:
  v146 = 0;
LABEL_333:
  if (v234)
  {
    v235 = v234;
    operator delete(v234);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table((uint64_t)&v231);
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  if (__p)
  {
    v228 = __p;
    operator delete(__p);
  }
  if ((v146 & 1) != 0)
    goto LABEL_272;
LABEL_340:
  *(_QWORD *)(v153 + 112) = 0;
  *(_OWORD *)(v153 + 80) = 0u;
  *(_OWORD *)(v153 + 96) = 0u;
  *(_OWORD *)(v153 + 48) = 0u;
  *(_OWORD *)(v153 + 64) = 0u;
  *(_OWORD *)(v153 + 16) = 0u;
  *(_OWORD *)(v153 + 32) = 0u;
  *(_OWORD *)v153 = 0u;
  *(_DWORD *)(v153 + 120) = 1065353216;
  *(_BYTE *)(v153 + 128) = 0;
LABEL_341:
  *(_QWORD *)&v218 = &v197;
LABEL_342:
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v218);
}

void sub_18953BEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x237]) < 0)
    operator delete((void *)STACK[0x220]);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x2E0]);
  maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::~Dijkstra(&STACK[0x3F0]);
  STACK[0x2E0] = (unint64_t)&a63;
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2E0]);
  _Unwind_Resume(a1);
}

void std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 7);
        if (v6)
        {
          *((_QWORD *)v4 - 6) = v6;
          operator delete(v6);
        }
        v4 -= 72;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  BOOL v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  BOOL v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  int64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  int64_t v137;
  unint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  char v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v6 = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1);
  result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v9 = *(_OWORD *)(a1 + 16);
      v8 = *(_OWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v11 = *(_QWORD *)(a1 + 48);
      v13 = *(_OWORD *)(a3 + 16);
      v12 = *(_OWORD *)(a3 + 32);
      v14 = *(_OWORD *)a3;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a1 + 16) = v13;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)a1 = v14;
    }
    else
    {
      v30 = *(_OWORD *)(a1 + 16);
      v29 = *(_OWORD *)(a1 + 32);
      v31 = *(_OWORD *)a1;
      v32 = *(_QWORD *)(a1 + 48);
      v34 = *(_OWORD *)(a2 + 16);
      v33 = *(_OWORD *)(a2 + 32);
      v35 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 16) = v34;
      *(_OWORD *)(a1 + 32) = v33;
      *(_OWORD *)a1 = v35;
      *(_DWORD *)(a2 + 48) = v32;
      *(_OWORD *)a2 = v31;
      *(_OWORD *)(a2 + 16) = v30;
      *(_OWORD *)(a2 + 32) = v29;
      result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2);
      if (!(_DWORD)result)
        return result;
      v9 = *(_OWORD *)(a2 + 16);
      v8 = *(_OWORD *)(a2 + 32);
      v10 = *(_OWORD *)a2;
      v11 = *(_QWORD *)(a2 + 48);
      v37 = *(_OWORD *)(a3 + 16);
      v36 = *(_OWORD *)(a3 + 32);
      v38 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v37;
      *(_OWORD *)(a2 + 32) = v36;
      *(_OWORD *)a2 = v38;
    }
    *(_DWORD *)(a3 + 48) = v11;
    *(_OWORD *)a3 = v10;
    *(_OWORD *)(a3 + 16) = v9;
    *(_OWORD *)(a3 + 32) = v8;
  }
  else if ((_DWORD)result)
  {
    v16 = *(_OWORD *)(a2 + 16);
    v15 = *(_OWORD *)(a2 + 32);
    v17 = *(_OWORD *)a2;
    v18 = *(_QWORD *)(a2 + 48);
    v20 = *(_OWORD *)(a3 + 16);
    v19 = *(_OWORD *)(a3 + 32);
    v21 = *(_OWORD *)a3;
    *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
    *(_OWORD *)(a2 + 16) = v20;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)a2 = v21;
    *(_DWORD *)(a3 + 48) = v18;
    *(_OWORD *)a3 = v17;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v15;
    result = maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1);
    if ((_DWORD)result)
    {
      v23 = *(_OWORD *)(a1 + 16);
      v22 = *(_OWORD *)(a1 + 32);
      v24 = *(_OWORD *)a1;
      v25 = *(_QWORD *)(a1 + 48);
      v27 = *(_OWORD *)(a2 + 16);
      v26 = *(_OWORD *)(a2 + 32);
      v28 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 16) = v27;
      *(_OWORD *)(a1 + 32) = v26;
      *(_OWORD *)a1 = v28;
      *(_DWORD *)(a2 + 48) = v25;
      *(_OWORD *)a2 = v24;
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v22;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = (__int128 *)(a2 - 56);
      if (!maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2 - 56, a1))
        return 1;
      v8 = *(_OWORD *)(a1 + 16);
      v7 = *(_OWORD *)(a1 + 32);
      v9 = *(_OWORD *)a1;
      v10 = *(_QWORD *)(a1 + 48);
      v12 = v6[1];
      v11 = v6[2];
      v13 = *v6;
      *(_DWORD *)(a1 + 48) = *((_DWORD *)v6 + 12);
      *(_OWORD *)(a1 + 16) = v12;
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)a1 = v13;
      *((_DWORD *)v6 + 12) = v10;
      *v6 = v9;
      v6[1] = v8;
      result = 1;
      v6[2] = v7;
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a2 - 56);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a2 - 56);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56);
      return 1;
    default:
      v14 = a1 + 112;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a1 + 56, a1 + 112);
      v15 = a1 + 168;
      if (a1 + 168 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_OWORD *)(v15 + 32);
      v27 = *(_QWORD *)(v15 + 48);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 128);
        *(_OWORD *)(v20 + 168) = *(_OWORD *)(a1 + v19 + 112);
        *(_OWORD *)(v20 + 184) = v21;
        *(_OWORD *)(v20 + 200) = *(_OWORD *)(a1 + v19 + 144);
        *(_DWORD *)(v20 + 216) = *(_DWORD *)(a1 + v19 + 160);
        if (v19 == -112)
          break;
        v19 -= 56;
        if ((maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<((uint64_t)&v24, v20 + 56) & 1) == 0)
        {
          v22 = a1 + v19 + 168;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_OWORD *)(v22 + 32) = v26;
      *(_DWORD *)(v22 + 48) = v27;
      if (++v17 == 8)
        return v15 + 56 == a2;
    }
    v14 = v15;
    v16 += 56;
    v15 += 56;
    if (v15 == a2)
      return 1;
  }
}

uint64_t maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v5;
  int v6;

  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a2 + 40);
  if (v2 < v3)
    return 1;
  if (v3 >= v2)
  {
    v5 = *(_DWORD *)(a1 + 48);
    v6 = *(_DWORD *)(a2 + 48);
    if (v5 >= v6)
    {
      if (v6 < v5)
        return 0;
      if (*(_QWORD *)a1)
      {
        if (*(_QWORD *)a1 >= *(_QWORD *)a2)
          return 0;
      }
      else if (*(_QWORD *)(a1 + 8) >= *(_QWORD *)(a2 + 8))
      {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a2, a3);
  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a4, a3))
  {
    v10 = *(_OWORD *)(a3 + 16);
    v9 = *(_OWORD *)(a3 + 32);
    v11 = *(_OWORD *)a3;
    v12 = *(_QWORD *)(a3 + 48);
    v14 = *(_OWORD *)(a4 + 16);
    v13 = *(_OWORD *)(a4 + 32);
    v15 = *(_OWORD *)a4;
    *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 32) = v13;
    *(_OWORD *)a3 = v15;
    *(_DWORD *)(a4 + 48) = v12;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v10;
    *(_OWORD *)(a4 + 32) = v9;
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2))
    {
      v17 = *(_OWORD *)(a2 + 16);
      v16 = *(_OWORD *)(a2 + 32);
      v18 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a2 + 48);
      v21 = *(_OWORD *)(a3 + 16);
      v20 = *(_OWORD *)(a3 + 32);
      v22 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v21;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v22;
      *(_DWORD *)(a3 + 48) = v19;
      *(_OWORD *)a3 = v18;
      *(_OWORD *)(a3 + 16) = v17;
      *(_OWORD *)(a3 + 32) = v16;
      if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1))
      {
        v23 = *(_OWORD *)(a1 + 16);
        result = *(__n128 *)(a1 + 32);
        v24 = *(_OWORD *)a1;
        v25 = *(_QWORD *)(a1 + 48);
        v27 = *(_OWORD *)(a2 + 16);
        v26 = *(_OWORD *)(a2 + 32);
        v28 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 32) = v26;
        *(_OWORD *)a1 = v28;
        *(_DWORD *)(a2 + 48) = v25;
        *(_OWORD *)a2 = v24;
        *(_OWORD *)(a2 + 16) = v23;
        *(__n128 *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey> *>(a1, a2, a3, a4);
  if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a5, a4))
  {
    v12 = *(_OWORD *)(a4 + 16);
    v11 = *(_OWORD *)(a4 + 32);
    v13 = *(_OWORD *)a4;
    v14 = *(_QWORD *)(a4 + 48);
    v16 = *(_OWORD *)(a5 + 16);
    v15 = *(_OWORD *)(a5 + 32);
    v17 = *(_OWORD *)a5;
    *(_DWORD *)(a4 + 48) = *(_DWORD *)(a5 + 48);
    *(_OWORD *)(a4 + 16) = v16;
    *(_OWORD *)(a4 + 32) = v15;
    *(_OWORD *)a4 = v17;
    *(_DWORD *)(a5 + 48) = v14;
    *(_OWORD *)a5 = v13;
    *(_OWORD *)(a5 + 16) = v12;
    *(_OWORD *)(a5 + 32) = v11;
    if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a4, a3))
    {
      v19 = *(_OWORD *)(a3 + 16);
      v18 = *(_OWORD *)(a3 + 32);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a3 + 48);
      v23 = *(_OWORD *)(a4 + 16);
      v22 = *(_OWORD *)(a4 + 32);
      v24 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(a4 + 48);
      *(_OWORD *)(a3 + 16) = v23;
      *(_OWORD *)(a3 + 32) = v22;
      *(_OWORD *)a3 = v24;
      *(_DWORD *)(a4 + 48) = v21;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v19;
      *(_OWORD *)(a4 + 32) = v18;
      if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a3, a2))
      {
        v26 = *(_OWORD *)(a2 + 16);
        v25 = *(_OWORD *)(a2 + 32);
        v27 = *(_OWORD *)a2;
        v28 = *(_QWORD *)(a2 + 48);
        v30 = *(_OWORD *)(a3 + 16);
        v29 = *(_OWORD *)(a3 + 32);
        v31 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
        *(_OWORD *)(a2 + 16) = v30;
        *(_OWORD *)(a2 + 32) = v29;
        *(_OWORD *)a2 = v31;
        *(_DWORD *)(a3 + 48) = v28;
        *(_OWORD *)a3 = v27;
        *(_OWORD *)(a3 + 16) = v26;
        *(_OWORD *)(a3 + 32) = v25;
        if (maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>::operator<(a2, a1))
        {
          v32 = *(_OWORD *)(a1 + 16);
          result = *(__n128 *)(a1 + 32);
          v33 = *(_OWORD *)a1;
          v34 = *(_QWORD *)(a1 + 48);
          v36 = *(_OWORD *)(a2 + 16);
          v35 = *(_OWORD *)(a2 + 32);
          v37 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_OWORD *)(a1 + 16) = v36;
          *(_OWORD *)(a1 + 32) = v35;
          *(_OWORD *)a1 = v37;
          *(_DWORD *)(a2 + 48) = v34;
          *(_OWORD *)a2 = v33;
          *(_OWORD *)(a2 + 16) = v32;
          *(__n128 *)(a2 + 32) = result;
        }
      }
    }
  }
  return result;
}

double maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  double v7;
  BOOL v8;
  BOOL v9;
  unsigned int *v10;
  double v11;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char *v21;
  void *__p;
  char v24;
  void *v25[2];
  char v26;
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  unsigned int v30[4];
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  char *v34;
  void *v35;
  char v36;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v32);
  maps::path_codec::snap_point((uint64_t *)&v33, a3, (uint64_t)v30, v4, v5, v6);
  v8 = v31 == -1 || v30[3] == 0x7FFFFFFF;
  if (v8 || (v30[0] == -1 ? (v9 = v30[1] == -1) : (v9 = 0), v9))
  {
    v11 = 0.0;
    if (maps::path_codec::Logger::m_log_level <= 4u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Could not snap the location onto the road.", 42);
      std::string::basic_string[abi:ne180100]<0>(v25, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
      std::stringbuf::str();
      maps::path_codec::Logger::log_error((uint64_t)v25, 264, (uint64_t)&__p);
      if (v24 < 0)
        operator delete(__p);
      if (v26 < 0)
        operator delete(v25[0]);
      v27[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v27[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v28 < 0)
        operator delete((void *)v27[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](&v29);
    }
  }
  else
  {
    v10 = v33;
    v11 = 0.0;
    if (0xAAAAAAAAAAAAAAABLL * ((v34 - (char *)v33) >> 2) >= 2 && v33 + 3 != (unsigned int *)v34)
    {
      v13 = 1.79769313e308;
      v14 = 0.0;
      v15 = 0.0;
      do
      {
        maps::path_codec::great_circle_distance_in_m((uint64_t)v10, v10 + 3, v7);
        v17 = v16;
        maps::path_codec::great_circle_distance_in_m((uint64_t)v10, v30, v16);
        v19 = v18;
        maps::path_codec::great_circle_distance_in_m((uint64_t)v30, v10 + 3, v18);
        v7 = fmax(v19 + v20 - v17, 0.0);
        if (v7 < v13)
        {
          v13 = v7;
          v15 = v14 + v19;
        }
        v14 = v14 + v17;
        v21 = (char *)(v10 + 6);
        v10 += 3;
      }
      while (v21 != v34);
      v11 = 0.0;
      if (v14 != 0.0)
      {
        if (v15 / v14 <= 1.0)
          v11 = v15 / v14;
        else
          v11 = 1.0;
      }
    }
  }
  if (v36 < 0)
    operator delete(v35);
  if (v33)
  {
    v34 = (char *)v33;
    operator delete(v33);
  }
  return v11;
}

void sub_18953D670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  uint64_t v21;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::ostringstream::~ostringstream((uint64_t)&a21);
  maps::path_codec::RoadProperties::~RoadProperties((void **)(v21 - 144));
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_terminal_fractions(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void *__p;
  char v7;
  void *v8[2];
  char v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Computing origin/destination fractions.", 39);
    std::string::basic_string[abi:ne180100]<0>(v8, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)v8, 246, (uint64_t)&__p);
    if (v7 < 0)
      operator delete(__p);
    if (v9 < 0)
      operator delete(v8[0]);
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](&v12);
  }
  *(double *)a2 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a1, *(_QWORD *)(a2 + 16), *(_DWORD **)a3);
  *(double *)(a2 + 8) = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a1, *(_QWORD *)(a2 + 24) - 32, (_DWORD *)(*(_QWORD *)(a3 + 8) - 72));
}

void sub_18953D81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::build_path(uint64_t a1, uint64_t *a2, uint64_t a3, _DWORD **a4)
{
  double v7;
  double v8;
  uint64_t v9;
  double *v10;
  __int128 v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  double *v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  char **v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int64_t v47;
  char *v48;
  char *v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  _BYTE *v60;
  _BYTE *v61;
  __int128 v62;
  char *v63;
  uint64_t v64;
  void *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  double v70;
  double v71;
  uint64_t v72;
  double *v73;
  __int128 v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  double *v81;
  __int128 v82;
  char *v83;
  char *v84;
  double *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  void *v91;
  char v92;
  void *v93[2];
  __int128 v94;
  void *v95[4];
  void *v96[2];
  _OWORD v97[2];
  uint64_t v98;
  int v99;
  char v100;
  void *__p[2];
  char v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  char v106;
  _BYTE v107[160];

  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Start stitching pathlets", 24);
    std::string::basic_string[abi:ne180100]<0>(v93, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)v93, 183, (uint64_t)__p);
    if (v102 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v94) < 0)
      operator delete(v93[0]);
    v103 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v103 + *(_QWORD *)(v103 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v104 = MEMORY[0x1E0DE4FB8] + 16;
    if (v106 < 0)
      operator delete(v105);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](v107);
  }
  v98 = 0;
  memset(v97, 0, sizeof(v97));
  *(_OWORD *)v96 = 0u;
  v94 = 0u;
  memset(v95, 0, sizeof(v95));
  *(_OWORD *)v93 = 0u;
  v99 = 1065353216;
  v100 = 0;
  if (*((_BYTE *)*a4 + 48))
  {
    v7 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a2, **(_QWORD **)a3, *a4);
    v8 = v7;
    v9 = (uint64_t)(*a4 + 12);
    v10 = (double *)v96[1];
    if (v96[1] >= (void *)*(_QWORD *)&v97[0])
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96[1] - (char *)v96[0]) >> 4);
      v14 = v13 + 1;
      if (v13 + 1 > 0x555555555555555)
        std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4) > v14)
        v14 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
        v15 = 0x555555555555555;
      else
        v15 = v14;
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v15);
      v17 = (double *)&v16[48 * v13];
      v19 = &v16[48 * v18];
      *v17 = 0.0;
      v17[1] = v8;
      v20 = *(_OWORD *)v9;
      v17[4] = *(double *)(v9 + 16);
      *((_OWORD *)v17 + 1) = v20;
      *((_BYTE *)v17 + 40) = 0;
      v12 = v17 + 6;
      v22 = (char *)v96[0];
      v21 = (char *)v96[1];
      if (v96[1] != v96[0])
      {
        do
        {
          v23 = *((_OWORD *)v21 - 3);
          v24 = *((_OWORD *)v21 - 1);
          *((_OWORD *)v17 - 2) = *((_OWORD *)v21 - 2);
          *((_OWORD *)v17 - 1) = v24;
          *((_OWORD *)v17 - 3) = v23;
          v17 -= 6;
          v21 -= 48;
        }
        while (v21 != v22);
        v21 = (char *)v96[0];
      }
      v96[0] = v17;
      v96[1] = v12;
      *(_QWORD *)&v97[0] = v19;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v96[1] = 0;
      v10[1] = v7;
      v11 = *(_OWORD *)v9;
      v10[4] = *(double *)(v9 + 16);
      *((_OWORD *)v10 + 1) = v11;
      *((_BYTE *)v10 + 40) = 0;
      v12 = v10 + 6;
    }
    v96[1] = v12;
  }
  v89 = a1;
  v25 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3)
  {
LABEL_89:
    maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_terminal_fractions(a2, (uint64_t)v93, (uint64_t)a4);
    v88 = v94;
    *(_OWORD *)v89 = *(_OWORD *)v93;
    *(_OWORD *)(v89 + 16) = v88;
    *(void **)(v89 + 32) = v95[0];
    v94 = 0uLL;
    *(_OWORD *)(v89 + 40) = *(_OWORD *)&v95[1];
    *(void **)(v89 + 56) = v95[3];
    memset(v95, 0, sizeof(v95));
    *(_OWORD *)(v89 + 64) = *(_OWORD *)v96;
    *(_QWORD *)(v89 + 80) = *(_QWORD *)&v97[0];
    v96[0] = 0;
    v96[1] = 0;
    *(_QWORD *)&v97[0] = 0;
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::__hash_table(v89 + 88, (uint64_t *)v97 + 1);
    *(_BYTE *)(v89 + 128) = v100;
    goto LABEL_90;
  }
  v26 = 0;
  while (1)
  {
    v27 = &v25[3 * v26];
    v28 = (char *)*v27;
    v31 = (char *)v27[1];
    v30 = (char **)(v27 + 1);
    v29 = v31;
    if (v28 != v31)
      break;
    ++v26;
LABEL_88:
    v25 = *(uint64_t **)a3;
    if (v26 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3))
      goto LABEL_89;
  }
  if ((_QWORD)v94 == *((_QWORD *)&v94 + 1))
  {
    v33 = (char *)v94;
LABEL_34:
    if (v29 - v28 >= 1)
    {
      v35 = (v29 - v28) >> 5;
      v36 = (uint64_t)&v33[-v94];
      v37 = (_BYTE *)(v94 + ((unint64_t)&v33[-v94] & 0xFFFFFFFFFFFFFFE0));
      if (v35 <= ((char *)v95[0] - (char *)v33) >> 5)
      {
        v45 = (v33 - v37) >> 5;
        if (v45 >= v35)
        {
          v46 = &v28[32 * v35];
          v48 = v33;
        }
        else
        {
          v46 = &v28[32 * v45];
          v47 = v29 - v46;
          if (v29 != v46)
            memmove(v33, &v28[32 * v45], v29 - v46);
          v48 = &v33[v47];
          *((_QWORD *)&v94 + 1) = &v33[v47];
          if (v33 - v37 < 1)
            goto LABEL_69;
        }
        v49 = &v48[-32 * v35];
        v50 = v48;
        while (v49 < v33)
        {
          v51 = *(_OWORD *)v49;
          v52 = *((_OWORD *)v49 + 1);
          v49 += 32;
          *v50 = v51;
          v50[1] = v52;
          v50 += 2;
        }
        v53 = &v37[32 * v35];
        *((_QWORD *)&v94 + 1) = v50;
        if (v48 != v53)
          memmove(&v48[-32 * ((v48 - v53) >> 5)], v37, v48 - v53);
        if (v46 != v28)
          memmove(v37, v28, v46 - v28);
      }
      else
      {
        v38 = v36 >> 5;
        v39 = (v36 >> 5) + v35;
        if (v39 >> 59)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v40 = (uint64_t)v95[0] - v94;
        if ((uint64_t)((uint64_t)v95[0] - v94) >> 4 > v39)
          v39 = v40 >> 4;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFE0)
          v41 = 0x7FFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)v95, v41);
          v44 = v43;
        }
        else
        {
          v42 = 0;
          v44 = 0;
        }
        v54 = &v42[32 * v38];
        v55 = &v54[32 * v35];
        v56 = 32 * v35;
        v57 = v54;
        do
        {
          v58 = *(_OWORD *)v28;
          v59 = *((_OWORD *)v28 + 1);
          v28 += 32;
          *(_OWORD *)v57 = v58;
          *((_OWORD *)v57 + 1) = v59;
          v57 += 32;
          v56 -= 32;
        }
        while (v56);
        v60 = (_BYTE *)v94;
        if ((_BYTE *)v94 == v37)
        {
          v63 = v54;
        }
        else
        {
          v61 = v37;
          do
          {
            v62 = *((_OWORD *)v61 - 1);
            v63 = v54 - 32;
            *((_OWORD *)v54 - 2) = *((_OWORD *)v61 - 2);
            *((_OWORD *)v54 - 1) = v62;
            v61 -= 32;
            v54 -= 32;
          }
          while (v61 != v60);
        }
        v64 = *((_QWORD *)&v94 + 1) - (_QWORD)v37;
        if (*((_BYTE **)&v94 + 1) != v37)
          memmove(v55, v37, *((_QWORD *)&v94 + 1) - (_QWORD)v37);
        v65 = (void *)v94;
        *(_QWORD *)&v94 = v63;
        *((_QWORD *)&v94 + 1) = &v55[v64];
        v95[0] = &v42[32 * v44];
        if (v65)
          operator delete(v65);
      }
    }
LABEL_69:
    v66 = (uint64_t)(*((_QWORD *)&v94 + 1) - v94) >> 5;
    if (v66 <= (char *)v95[2] - (char *)v95[1])
    {
      if (v66 < (char *)v95[2] - (char *)v95[1])
        v95[2] = (char *)v95[1] + v66;
    }
    else
    {
      std::vector<maps::path_codec::RelativeSide>::__append((unint64_t *)&v95[1], v66 - ((char *)v95[2] - (char *)v95[1]), (_BYTE *)&(*a4)[18 * v26 + 11] + 1);
    }
    ++v26;
    v67 = (uint64_t)&(*a4)[18 * v26];
    v69 = *(unsigned __int8 *)(v67 + 48);
    v68 = v67 + 48;
    if (v69)
    {
      v70 = maps::path_codec::PathDecoder<GEOPathMatcherRoadKey>::compute_segment_fraction(*a2, *((_QWORD *)&v94 + 1) - 32, &(*a4)[18 * v26]);
      v71 = v70;
      v72 = ((uint64_t)(*((_QWORD *)&v94 + 1) - v94) >> 5) - 1;
      v73 = (double *)v96[1];
      if (v96[1] >= (void *)*(_QWORD *)&v97[0])
      {
        v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96[1] - (char *)v96[0]) >> 4);
        v77 = v76 + 1;
        if (v76 + 1 > 0x555555555555555)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4) > v77)
          v77 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v97[0] - (unint64_t)v96[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v78 = 0x555555555555555;
        else
          v78 = v77;
        v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(v78);
        v81 = (double *)&v79[48 * v76];
        *(_QWORD *)v81 = v72;
        v81[1] = v71;
        v82 = *(_OWORD *)v68;
        v81[4] = *(double *)(v68 + 16);
        *((_OWORD *)v81 + 1) = v82;
        *((_BYTE *)v81 + 40) = 0;
        v84 = (char *)v96[0];
        v83 = (char *)v96[1];
        v85 = v81;
        if (v96[1] != v96[0])
        {
          do
          {
            v86 = *((_OWORD *)v83 - 3);
            v87 = *((_OWORD *)v83 - 1);
            *((_OWORD *)v85 - 2) = *((_OWORD *)v83 - 2);
            *((_OWORD *)v85 - 1) = v87;
            *((_OWORD *)v85 - 3) = v86;
            v85 -= 6;
            v83 -= 48;
          }
          while (v83 != v84);
          v83 = (char *)v96[0];
        }
        v75 = v81 + 6;
        v96[0] = v85;
        v96[1] = v81 + 6;
        *(_QWORD *)&v97[0] = &v79[48 * v80];
        if (v83)
          operator delete(v83);
      }
      else
      {
        *(_QWORD *)v96[1] = v72;
        v73[1] = v70;
        v74 = *(_OWORD *)v68;
        v73[4] = *(double *)(v68 + 16);
        *((_OWORD *)v73 + 1) = v74;
        *((_BYTE *)v73 + 40) = 0;
        v75 = v73 + 6;
      }
      v96[1] = v75;
    }
    goto LABEL_88;
  }
  v33 = (char *)(*((_QWORD *)&v94 + 1) - 32);
  v32 = *(_QWORD *)(*((_QWORD *)&v94 + 1) - 32);
  v34 = v28;
  if (!v32)
  {
    v32 = *(_QWORD *)(*((_QWORD *)&v94 + 1) - 24);
    v34 = v28 + 8;
  }
  if (v32 == *(_QWORD *)v34)
  {
    *((_QWORD *)&v94 + 1) -= 32;
    --v95[2];
    v29 = *v30;
    goto LABEL_34;
  }
  if (maps::path_codec::Logger::m_log_level <= 4u)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Decoded path is disconnected.", 29);
    std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/src/path-codec/PathDecoder.cpp");
    std::stringbuf::str();
    maps::path_codec::Logger::log_error((uint64_t)__p, 206, (uint64_t)&v91);
    if (v92 < 0)
      operator delete(v91);
    if (v102 < 0)
      operator delete(__p[0]);
    v103 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v103 + *(_QWORD *)(v103 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v104 = MEMORY[0x1E0DE4FB8] + 16;
    if (v106 < 0)
      operator delete(v105);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](v107);
  }
  *(_QWORD *)(v89 + 112) = 0;
  *(_OWORD *)(v89 + 80) = 0u;
  *(_OWORD *)(v89 + 96) = 0u;
  *(_OWORD *)(v89 + 48) = 0u;
  *(_OWORD *)(v89 + 64) = 0u;
  *(_OWORD *)(v89 + 16) = 0u;
  *(_OWORD *)(v89 + 32) = 0u;
  *(_OWORD *)v89 = 0u;
  *(_DWORD *)(v89 + 120) = 1065353216;
  *(_BYTE *)(v89 + 128) = 0;
LABEL_90:
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<maps::path_codec::Coordinate>>>>::~__hash_table((uint64_t)v97 + 8);
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (v95[1])
  {
    v95[2] = v95[1];
    operator delete(v95[1]);
  }
  if ((_QWORD)v94)
  {
    *((_QWORD *)&v94 + 1) = v94;
    operator delete((void *)v94);
  }
}

void sub_18953E0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  if (a19 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  maps::path_codec::RoadNetworkPath<GEOPathMatcherRoadKey>::~RoadNetworkPath(&a20);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<GEOPathMatcherRoadKey>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_18953E250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<char>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;
  void *v13;
  void *v14;
  void *__p;
  char v16;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3 || (unint64_t)(((v3 - v2) >> 5) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    return 0;
  LODWORD(v6) = 0;
  v7 = 2;
  v8 = 1;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v12, a1, v2 + 32 * v8, 0);
    v9 = HIDWORD(v12);
    if (v16 < 0)
      operator delete(__p);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    v6 = (v9 + v6);
    v8 = v7;
    v2 = *a2;
  }
  while (((a2[1] - *a2) >> 5) - 1 > (unint64_t)v7++);
  return v6;
}

uint64_t maps::path_codec::dijkstra_decode_one<GEOPathMatcherRoadKey>(maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&,std::vector<maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey>> const&,std::vector<std::vector<GEOPathMatcherRoadKey>> const&,unsigned long)::{lambda(std::string const&,std::vector<GEOPathMatcherRoadKey>)#1}::operator()(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  maps::path_codec::estimate_pathlet_length<GEOPathMatcherRoadKey>(*a2, a4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Pathlet ", 8);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" search: ", 9);
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
  if (*a4 == a4[1])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"empty pathlet", 13);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"pathlet (segments:", 18);
    v13 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", distance_m:", 13);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)")", 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"start:", 6);
    v16 = operator<<(v15, (_QWORD *)*a4);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)", end:", 6);
    operator<<(v17, (_QWORD *)(a4[1] - 32));
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x18D764310](&v21);
}

void sub_18953E514(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8 - 4);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18953E584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x492492492492493)
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

_QWORD *std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<zilch::ControlPoint>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_18953E650(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  char *v26;
  void *v27;
  void *v28;
  char *i;
  void *v30;
  void **v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  __int128 **v43;
  char *v44;
  uint64_t v45;
  _DWORD *v46;
  int v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  __int128 *v55;
  __int128 *v56;
  __int128 *v57;
  int v58;
  int v59;
  BOOL v60;
  char *v61;
  void *v62;
  void *v63;
  char *v64;
  __int128 *v65;
  int v66;
  int v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  char *j;
  void *v73;
  void **v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  void **v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  char *v95;
  char *v96;
  __int128 v97;
  char *v98;
  __int128 v99;
  char *v100;
  void **v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  __int128 v109;
  char *v110;
  __int128 v111;
  char *v112;
  void *v113;
  char *v114;
  char *v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  BOOL v120;
  void *v121;
  void *v122;
  void *v123;
  signed int v125;
  unint64_t v126;
  void *v128[2];
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  void *v132[2];
  char v133;
  void *v134[2];
  char v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  char v140;
  void *v141[2];
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  void *v145[2];
  __int128 v146;
  __int128 v147;
  void *v148;
  char *v149;
  char *v150;
  void *v151[2];
  __int128 v152;
  void *__p[2];
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  void *v157;
  char v158;
  _BYTE v159[160];

  v9 = *(uint64_t **)(a2 + 16);
  v8 = *(uint64_t **)(a2 + 24);
  v10 = 0xC066800000000000;
  while (1)
  {
    if (v9 == v8)
    {
      v16 = 0;
      v17 = 0;
      v18 = 0xC066800000000000;
      goto LABEL_17;
    }
    (*(void (**)(void **__return_ptr, void *, uint64_t *, uint64_t))(*(_QWORD *)a4 + 32))(v151, a4, v9, 1);
    v11 = HIDWORD(v151[0]);
    if (SHIBYTE(v155) < 0)
      operator delete(__p[1]);
    if (v151[1])
    {
      *(void **)&v152 = v151[1];
      operator delete(v151[1]);
    }
    v12 = *(uint64_t **)(a3 + 16);
    v13 = *(uint64_t **)(a3 + 24);
    if (v12 != v13)
    {
      while (1)
      {
        v14 = v12;
        v15 = *(double *)v9;
        if (!*v9)
        {
          v15 = *((double *)v9 + 1);
          v14 = v12 + 1;
        }
        if (*(_QWORD *)&v15 == *v14)
          break;
        v12 += 7;
        if (v12 == v13)
          goto LABEL_15;
      }
    }
    if (v12 != v13
      && (int)llround(*((double *)v9 + 4) * (double)v11) <= (int)llround(*((double *)v12 + 4) * (double)v11))
    {
      break;
    }
LABEL_15:
    v9 += 7;
    v8 = *(uint64_t **)(a2 + 24);
  }
  v17 = *v12;
  v16 = v12[1];
  v18 = v12[2];
  v10 = v12[3];
LABEL_17:
  if (v17 | v16)
  {
    if (!maps::path_codec::Logger::m_log_level)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v151);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Decoded single-segment path.", 28);
      std::string::basic_string[abi:ne180100]<0>(&v136, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_trace((uint64_t)&v136, 155, (uint64_t)v145);
      if (SBYTE7(v146) < 0)
        operator delete(v145[0]);
      if (SHIBYTE(v138) < 0)
        operator delete(v136);
      v151[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)v151 + *((_QWORD *)v151[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v151[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (v158 < 0)
        operator delete(v157);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](v159);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v19 = operator new(0x20uLL);
    a1[1] = v19 + 4;
    a1[2] = v19 + 4;
    *v19 = v17;
    v19[1] = v16;
    v19[2] = v18;
    v19[3] = v10;
    *a1 = v19;
    return;
  }
  v125 = maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(*(_DWORD *)(a2 + 40), *(_DWORD *)(a3 + 40), a5);
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v151);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Max exploration distance: ", 26);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" m.", 3);
    std::string::basic_string[abi:ne180100]<0>(&v136, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)&v136, 161, (uint64_t)v145);
    if (SBYTE7(v146) < 0)
      operator delete(v145[0]);
    if (SHIBYTE(v138) < 0)
      operator delete(v136);
    v151[0] = *(void **)MEMORY[0x1E0DE4F60];
    *(void **)((char *)v151 + *((_QWORD *)v151[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v151[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v158 < 0)
      operator delete(v157);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](v159);
  }
  v148 = 0;
  v149 = 0;
  v150 = 0;
  v146 = 0u;
  v147 = 0u;
  *(_OWORD *)v145 = 0u;
  v21 = *(__int128 **)(a2 + 24);
  if (v21 == *(__int128 **)(a2 + 16))
    goto LABEL_175;
  do
  {
    v21 = (__int128 *)((char *)v21 - 56);
    (*(void (**)(void *, __int128 *, void **))(*(_QWORD *)a4 + 72))(a4, v21, &v148);
    if (*(_BYTE *)(a2 + 44))
    {
      v22 = v149;
    }
    else
    {
      (*(void (**)(void **__return_ptr, void *, __int128 *))(*(_QWORD *)a4 + 8))(v151, a4, v21);
      v26 = (char *)v148;
      v22 = v149;
      if (v148 == v149)
      {
        v22 = (char *)v148;
      }
      else
      {
        while (1)
        {
          v27 = *(void **)v26;
          if (*(_QWORD *)v26)
          {
            v28 = v151[0];
          }
          else
          {
            v27 = (void *)*((_QWORD *)v26 + 1);
            v28 = v151[1];
          }
          if (v27 == v28)
            break;
          v26 += 32;
          if (v26 == v149)
            goto LABEL_38;
        }
        if (v26 != v149)
        {
          for (i = v26 + 32; i != v22; i += 32)
          {
            v30 = *(void **)i;
            if (!*(_QWORD *)i)
              v30 = (void *)*((_QWORD *)i + 1);
            v31 = &v151[1];
            if (*(_QWORD *)i)
              v31 = v151;
            if (v30 != *v31)
            {
              v32 = *((_OWORD *)i + 1);
              *(_OWORD *)v26 = *(_OWORD *)i;
              *((_OWORD *)v26 + 1) = v32;
              v26 += 32;
            }
          }
          if (v22 != v26)
          {
            v22 = v26;
            v149 = v26;
          }
        }
      }
    }
LABEL_38:
    v23 = v21[1];
    v143 = *v21;
    v144 = v23;
    v141[1] = 0;
    v142 = 0;
    v141[0] = 0;
    std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(v141, v148, (uint64_t)v22, (v22 - (_BYTE *)v148) >> 5);
    *(_OWORD *)v151 = v143;
    v152 = v144;
    *(_OWORD *)__p = *(_OWORD *)v141;
    v24 = v142;
    v141[0] = 0;
    v141[1] = 0;
    v142 = 0;
    v154 = v24;
    v155 = -1;
    v156 = 0;
    LODWORD(v157) = 0;
    v25 = std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(v145, (uint64_t)v151);
    if (__p[0])
      operator delete(__p[0]);
    if (v141[0])
    {
      v141[1] = v141[0];
      operator delete(v141[0]);
    }
  }
  while (v21 != *(__int128 **)(a2 + 16));
  v33 = *((_QWORD *)&v147 + 1);
  if (!*((_QWORD *)&v147 + 1) || !*(_DWORD *)(a5 + 80))
  {
LABEL_175:
    v79 = a1;
    goto LABEL_176;
  }
  v126 = 0;
  v122 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v123 = (void *)*MEMORY[0x1E0DE4F60];
  v121 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
  while (1)
  {
    v34 = v33 + v147 - 1;
    v35 = *((_QWORD *)v145[1] + v34 / 0x33);
    v36 = v34 % 0x33;
    v37 = (_QWORD *)(v35 + 80 * (v34 % 0x33));
    v39 = v37 + 4;
    v38 = (char *)v37[4];
    v41 = v37 + 7;
    v40 = v37[7];
    v43 = (__int128 **)(v37 + 5);
    v42 = (char *)v37[5];
    if (v40 == (v42 - v38) >> 5)
    {
      std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(v145);
      goto LABEL_173;
    }
    if (v40 != -1)
    {
      v44 = &v38[32 * v40];
      *v41 = v40 + 1;
      (*(void (**)(void **__return_ptr, void *, char *, _QWORD, __n128))(*(_QWORD *)a4 + 32))(&v136, a4, v44, 0, v25);
      v45 = v35 + 80 * v36;
      v47 = *(_DWORD *)(v45 + 72);
      v46 = (_DWORD *)(v45 + 72);
      if (v47 + HIDWORD(v136) <= v125)
      {
        (*(void (**)(void *, char *, void **))(*(_QWORD *)a4 + 72))(a4, v44, &v148);
        if (*(_QWORD *)(v35 + 80 * v36 + 64))
          v60 = 1;
        else
          v60 = *(_BYTE *)(a2 + 44) == 0;
        if (v60)
        {
          (*(void (**)(void **__return_ptr, void *, char *))(*(_QWORD *)a4 + 8))(v151, a4, v44);
          v61 = (char *)v148;
          v64 = v149;
          if (v148 == v149)
          {
            v64 = (char *)v148;
          }
          else
          {
            while (1)
            {
              v62 = *(void **)v61;
              if (*(_QWORD *)v61)
              {
                v63 = v151[0];
              }
              else
              {
                v62 = (void *)*((_QWORD *)v61 + 1);
                v63 = v151[1];
              }
              if (v62 == v63)
                break;
              v61 += 32;
              if (v61 == v149)
                goto LABEL_165;
            }
            if (v61 != v149)
            {
              for (j = v61 + 32; j != v64; j += 32)
              {
                v73 = *(void **)j;
                if (!*(_QWORD *)j)
                  v73 = (void *)*((_QWORD *)j + 1);
                v74 = &v151[1];
                if (*(_QWORD *)j)
                  v74 = v151;
                if (v73 != *v74)
                {
                  v75 = *((_OWORD *)j + 1);
                  *(_OWORD *)v61 = *(_OWORD *)j;
                  *((_OWORD *)v61 + 1) = v75;
                  v61 += 32;
                }
              }
              if (v64 != v61)
              {
                v64 = v61;
                v149 = v61;
              }
            }
          }
        }
        else
        {
          v64 = v149;
        }
LABEL_165:
        v76 = *((_OWORD *)v44 + 1);
        v130 = *(_OWORD *)v44;
        v131 = v76;
        v128[1] = 0;
        v129 = 0;
        v128[0] = 0;
        std::vector<GEOPathMatcherRoadKey>::__init_with_size[abi:ne180100]<GEOPathMatcherRoadKey*,GEOPathMatcherRoadKey*>(v128, v148, (uint64_t)v64, (v64 - (_BYTE *)v148) >> 5);
        v77 = *v46 + HIDWORD(v136);
        *(_OWORD *)v151 = v130;
        v152 = v131;
        *(_OWORD *)__p = *(_OWORD *)v128;
        v78 = v129;
        v128[0] = 0;
        v128[1] = 0;
        v129 = 0;
        v154 = v78;
        v155 = -1;
        v156 = v37;
        LODWORD(v157) = v77;
        v25 = std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(v145, (uint64_t)v151);
        if (__p[0])
          operator delete(__p[0]);
        if (v128[0])
        {
          v128[1] = v128[0];
          operator delete(v128[0]);
        }
      }
      else if (!maps::path_codec::Logger::m_log_level)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v151);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Reached max exploration at ", 27);
        operator<<(v48, v44);
        std::string::basic_string[abi:ne180100]<0>(v134, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_trace((uint64_t)v134, 210, (uint64_t)v132);
        if (v133 < 0)
          operator delete(v132[0]);
        if (v135 < 0)
          operator delete(v134[0]);
        v151[0] = v123;
        *(void **)((char *)v151 + *((_QWORD *)v123 - 3)) = v122;
        v151[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
        if (v158 < 0)
          operator delete(v157);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v159);
      }
      if (v140 < 0)
        operator delete(v139);
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      goto LABEL_173;
    }
    if (!maps::path_codec::Logger::m_log_level)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v151);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Exploring ", 10);
      operator<<(v49, v37);
      std::string::basic_string[abi:ne180100]<0>(&v136, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_trace((uint64_t)&v136, 233, (uint64_t)v134);
      if (v135 < 0)
        operator delete(v134[0]);
      if (SHIBYTE(v138) < 0)
        operator delete(v136);
      v151[0] = v123;
      *(void **)((char *)v151 + *((_QWORD *)v123 - 3)) = v122;
      v151[1] = v121;
      if (v158 < 0)
        operator delete(v157);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](v159);
      v38 = (char *)*v39;
      v42 = (char *)v37[5];
    }
    *v41 = 0;
    v50 = *(_QWORD **)(a3 + 16);
    v51 = *(_QWORD **)(a3 + 24);
    v52 = v42;
    if (v50 != v51)
    {
      while (1)
      {
        if (v38 != v42)
        {
          v52 = v38;
          while (1)
          {
            v53 = *(_QWORD *)v52;
            if (*(_QWORD *)v52)
              v54 = v50;
            else
              v54 = v50 + 1;
            if (!*(_QWORD *)v52)
              v53 = *((_QWORD *)v52 + 1);
            if (v53 == *v54)
              break;
            v52 += 32;
            if (v52 == v42)
              goto LABEL_99;
          }
          if (v52 != v42)
            break;
        }
LABEL_99:
        v50 += 7;
        if (v50 == v51)
        {
          v52 = v42;
          break;
        }
      }
    }
    if (v42 != v52)
      break;
    ++v126;
    if ((unint64_t)(v42 - v38) >= 0x21)
    {
      LOWORD(v132[0]) = (*(uint64_t (**)(void *, _QWORD *, __n128))(*(_QWORD *)a4 + 56))(a4, v37, v25);
      v55 = (__int128 *)*v39;
      v56 = *v43;
      if ((__int128 *)*v39 == *v43)
        goto LABEL_140;
      v57 = *v43;
      while (1)
      {
        v58 = (*(uint64_t (**)(void *, __int128 *))(*(_QWORD *)a4 + 48))(a4, v55);
        v59 = v58 + 360 * ((unsigned __int16)(LOWORD(v132[0]) + 180) / 0x168u) - (LOWORD(v132[0]) + 180);
        if ((__int16)(v58 + 360 * ((unsigned __int16)(LOWORD(v132[0]) + 180) / 0x168u) - (LOWORD(v132[0]) + 180)) > 180)
          LOWORD(v59) = v59 - 360;
        if ((__int16)v59 < -179)
          LOWORD(v59) = v59 + 360;
        v59 = (__int16)v59;
        if ((v59 & 0x8000u) != 0)
          v59 = -(__int16)v59;
        if (v59 > *(__int16 *)(a5 + 84))
          break;
        v55 += 2;
        if (v55 == v56)
          goto LABEL_141;
      }
      if (v55 == v56)
        goto LABEL_141;
      v65 = v55 + 2;
      if (v55 + 2 == v56)
      {
LABEL_140:
        v57 = v55;
      }
      else
      {
        v57 = v55;
        do
        {
          v66 = (*(uint64_t (**)(void *, __int128 *))(*(_QWORD *)a4 + 48))(a4, v65);
          v67 = v66 + 360 * ((unsigned __int16)(LOWORD(v132[0]) + 180) / 0x168u) - (LOWORD(v132[0]) + 180);
          if ((__int16)(v66 + 360 * ((unsigned __int16)(LOWORD(v132[0]) + 180) / 0x168u) - (LOWORD(v132[0]) + 180)) > 180)
            LOWORD(v67) = v67 - 360;
          if ((__int16)v67 < -179)
            LOWORD(v67) = v67 + 360;
          v67 = (__int16)v67;
          if ((v67 & 0x8000u) != 0)
            v67 = -(__int16)v67;
          if (v67 <= *(__int16 *)(a5 + 84))
          {
            v68 = v65[1];
            *v57 = *v65;
            v57[1] = v68;
            v57 += 2;
          }
          v65 += 2;
        }
        while (v65 != v56);
      }
LABEL_141:
      v69 = *v39;
      if (*v43 != v57)
        *v43 = v57;
      if ((__int128 *)v69 == v57)
      {
        std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(v145);
        if (!maps::path_codec::Logger::m_log_level)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v151);
          v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)"Segment ", 8);
          v71 = operator<<(v70, v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" does not have any outgoing segments after pruning.", 51);
          std::string::basic_string[abi:ne180100]<0>(&v136, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
          std::stringbuf::str();
          maps::path_codec::Logger::log_trace((uint64_t)&v136, 263, (uint64_t)v134);
          if (v135 < 0)
            operator delete(v134[0]);
          if (SHIBYTE(v138) < 0)
            operator delete(v136);
          v151[0] = v123;
          *(void **)((char *)v151 + *((_QWORD *)v123 - 3)) = v122;
          v151[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
          if (v158 < 0)
            operator delete(v157);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x18D764310](v159);
        }
      }
      else
      {
        v151[0] = a4;
        v151[1] = v132;
        std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>(v69, v57, v151, 126 - 2 * __clz(((uint64_t)v57 - v69) >> 5), 1);
      }
    }
LABEL_173:
    v33 = *((_QWORD *)&v147 + 1);
    if (!*((_QWORD *)&v147 + 1) || v126 >= *(unsigned int *)(a5 + 80))
      goto LABEL_175;
  }
  *(_OWORD *)v151 = *(_OWORD *)v38;
  v80 = *(_OWORD *)v151;
  v152 = *((_OWORD *)v38 + 1);
  v81 = v152;
  v82 = *((_OWORD *)v52 + 1);
  *(_OWORD *)v38 = *(_OWORD *)v52;
  *((_OWORD *)v38 + 1) = v82;
  *(_OWORD *)v52 = v80;
  *((_OWORD *)v52 + 1) = v81;
  *v41 = 1;
  v83 = (char *)v148;
  v149 = (char *)v148;
  v84 = *((_QWORD *)v145[1] + (*((_QWORD *)&v147 + 1) + (_QWORD)v147 - 1) / 0x33uLL)
      + 80 * ((*((_QWORD *)&v147 + 1) + (_QWORD)v147 - 1) % 0x33uLL);
  do
  {
    v85 = v84;
    v86 = (_OWORD *)(*(_QWORD *)(v84 + 32) + 32 * *(_QWORD *)(v84 + 56) - 32);
    if (v83 >= v150)
    {
      v88 = (char *)v148;
      v89 = (v83 - (_BYTE *)v148) >> 5;
      v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 59)
        goto LABEL_226;
      v91 = v150 - (_BYTE *)v148;
      if ((v150 - (_BYTE *)v148) >> 4 > v90)
        v90 = v91 >> 4;
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFE0)
        v92 = 0x7FFFFFFFFFFFFFFLL;
      else
        v92 = v90;
      if (v92)
      {
        v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)&v150, v92);
        v88 = (char *)v148;
        v83 = v149;
      }
      else
      {
        v93 = 0;
      }
      v94 = v86[1];
      v95 = &v93[32 * v89];
      *(_OWORD *)v95 = *v86;
      *((_OWORD *)v95 + 1) = v94;
      if (v83 == v88)
      {
        v98 = &v93[32 * v89];
      }
      else
      {
        v96 = &v93[32 * v89];
        do
        {
          v97 = *((_OWORD *)v83 - 1);
          v98 = v96 - 32;
          *((_OWORD *)v96 - 2) = *((_OWORD *)v83 - 2);
          *((_OWORD *)v96 - 1) = v97;
          v83 -= 32;
          v96 -= 32;
        }
        while (v83 != v88);
      }
      v83 = v95 + 32;
      v148 = v98;
      v149 = v95 + 32;
      v150 = &v93[32 * v92];
      if (v88)
        operator delete(v88);
    }
    else
    {
      v87 = *(_OWORD *)(*(_QWORD *)(v84 + 32) + 32 * *(_QWORD *)(v84 + 56) - 16);
      *(_OWORD *)v83 = *v86;
      *((_OWORD *)v83 + 1) = v87;
      v83 += 32;
    }
    v149 = v83;
    v84 = *(_QWORD *)(v85 + 64);
  }
  while (v84);
  if (v83 >= v150)
  {
    v102 = (char *)v148;
    v103 = (v83 - (_BYTE *)v148) >> 5;
    v104 = v103 + 1;
    if ((unint64_t)(v103 + 1) >> 59)
LABEL_226:
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v105 = v150 - (_BYTE *)v148;
    if ((v150 - (_BYTE *)v148) >> 4 > v104)
      v104 = v105 >> 4;
    if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0)
      v106 = 0x7FFFFFFFFFFFFFFLL;
    else
      v106 = v104;
    if (v106)
    {
      v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)&v150, v106);
      v102 = (char *)v148;
      v83 = v149;
    }
    else
    {
      v107 = 0;
    }
    v108 = &v107[32 * v103];
    v109 = *(_OWORD *)(v85 + 16);
    v110 = &v107[32 * v106];
    *(_OWORD *)v108 = *(_OWORD *)v85;
    *((_OWORD *)v108 + 1) = v109;
    v100 = v108 + 32;
    v101 = a1;
    if (v83 == v102)
    {
      v112 = v108;
    }
    else
    {
      do
      {
        v111 = *((_OWORD *)v83 - 1);
        v112 = v108 - 32;
        *((_OWORD *)v108 - 2) = *((_OWORD *)v83 - 2);
        *((_OWORD *)v108 - 1) = v111;
        v83 -= 32;
        v108 -= 32;
      }
      while (v83 != v102);
    }
    v148 = v112;
    v149 = v100;
    v150 = v110;
    if (v102)
      operator delete(v102);
  }
  else
  {
    v99 = *(_OWORD *)(v85 + 16);
    *(_OWORD *)v83 = *(_OWORD *)v85;
    *((_OWORD *)v83 + 1) = v99;
    v100 = v83 + 32;
    v101 = a1;
  }
  v149 = v100;
  v113 = v148;
  v114 = v100 - 32;
  if (v148 != v100 && v114 > v148)
  {
    v116 = (char *)v148 + 32;
    do
    {
      *(_OWORD *)v151 = *((_OWORD *)v116 - 2);
      v117 = *(_OWORD *)v151;
      v152 = *((_OWORD *)v116 - 1);
      v118 = v152;
      v119 = *((_OWORD *)v114 + 1);
      *((_OWORD *)v116 - 2) = *(_OWORD *)v114;
      *((_OWORD *)v116 - 1) = v119;
      *(_OWORD *)v114 = v117;
      *((_OWORD *)v114 + 1) = v118;
      v114 -= 32;
      v120 = v116 >= v114;
      v116 += 32;
    }
    while (!v120);
  }
  *v101 = v113;
  v101[1] = v100;
  v101[2] = v150;
  v79 = &v148;
LABEL_176:
  *v79 = 0;
  v79[1] = 0;
  v79[2] = 0;
  std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100]((uint64_t)v145);
  if (v148)
  {
    v149 = (char *)v148;
    operator delete(v148);
  }
}

void sub_18953F5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a65;

  if (a35 < 0)
    operator delete(__p);
  if (a41 < 0)
    operator delete(a36);
  std::ostringstream::~ostringstream((uint64_t)&a65);
  std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100]((uint64_t)&a55);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  _Unwind_Resume(a1);
}

void sub_18953F758(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (__p)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  JUMPOUT(0x18953F738);
}

_QWORD *maps::path_codec::build_best_score_terminal<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t a2)
{
  double *v4;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(double **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = v4[5];
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (uint64_t *)(a1 + 16);
  result = std::vector<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>>::__init_with_size[abi:ne180100]<maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*,maps::path_codec::SnappedRoadSegment<GEOPathMatcherRoadKey>*>((_QWORD *)(a1 + 16), v4, v5, 0x6DB6DB6DB6DB6DB7 * ((v5 - (uint64_t)v4) >> 3));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v9 = *v7;
  v10 = *(_QWORD *)(a1 + 24);
  if (*v7 != v10)
  {
    while (*(double *)(v9 + 40) <= v6)
    {
      v9 += 56;
      if (v9 == v10)
        return result;
    }
  }
  if (v9 != v10)
    *(_QWORD *)(a1 + 24) = v9;
  return result;
}

void maps::path_codec::filter_snapped_support_point<GEOPathMatcherRoadKey>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  void *__p;
  char *v20;
  uint64_t v21;

  __p = 0;
  v20 = 0;
  v21 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 72))(a2, a1, &__p);
  v5 = *(_QWORD **)(a3 + 16);
  v4 = *(_QWORD **)(a3 + 24);
  v6 = (char *)__p;
  if (v5 != v4)
  {
    v7 = v20;
    if (__p == v20)
    {
LABEL_11:
      if (v5 != v4)
      {
        v10 = v5 + 7;
        if (v5 + 7 != v4)
        {
          v11 = v5;
          do
          {
            v12 = v5;
            v5 = v10;
            if (v6 != v7)
            {
              v13 = v12[8];
              v14 = 8 * (*v10 == 0);
              if (*v5)
                v13 = *v5;
              v15 = v6;
              while (v13 != *(_QWORD *)&v15[v14])
              {
                v15 += 32;
                if (v15 == v7)
                  goto LABEL_22;
              }
              v16 = *(_OWORD *)v5;
              v17 = *((_OWORD *)v5 + 1);
              v18 = *((_OWORD *)v5 + 2);
              *((_DWORD *)v11 + 12) = *((_DWORD *)v5 + 12);
              *((_OWORD *)v11 + 1) = v17;
              *((_OWORD *)v11 + 2) = v18;
              *(_OWORD *)v11 = v16;
              v11 += 7;
            }
LABEL_22:
            v10 = v5 + 7;
          }
          while (v5 + 7 != v4);
          v4 = *(_QWORD **)(a3 + 24);
          v5 = v11;
        }
        if (v4 != v5)
          *(_QWORD *)(a3 + 24) = v5;
      }
    }
    else
    {
      do
      {
        v8 = *v5;
        if (!*v5)
          v8 = v5[1];
        v9 = (char *)__p;
        while (v8 != *(_QWORD *)&v9[8 * (*v5 == 0)])
        {
          v9 += 32;
          if (v9 == v20)
            goto LABEL_11;
        }
        v5 += 7;
      }
      while (v5 != v4);
    }
  }
  if (v6)
  {
    v20 = v6;
    operator delete(v6);
  }
}

void sub_18953F9D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>(uint64_t a1, _QWORD **a2, void **a3)
{
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  __int128 v28;
  void *v30;
  char v31;
  void *v32[2];
  char v33;
  void *v34[2];
  __int128 v35;
  void *__p;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  _BYTE v43[152];

  v5 = (char *)a3[1];
  v6 = *a2;
  v7 = *((_QWORD *)v5 - 4);
  if (!v7)
  {
    v7 = *((_QWORD *)v5 - 3);
    ++v6;
  }
  if (v7 == *v6)
    return 1;
  v9 = v5 - (_BYTE *)*a3;
  if (v9 > 0x3F)
  {
    v10 = (unint64_t)*a3 + v9;
    v11 = *(_OWORD *)(v10 - 48);
    *(_OWORD *)v34 = *(_OWORD *)(v10 - 64);
    v35 = v11;
    __p = 0;
    v37 = 0;
    v38 = 0;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 64))(a1, v34, &__p);
    v12 = __p;
    if (__p != v37)
    {
      while (1)
      {
        v13 = *v12;
        if (!*v12)
          v13 = v12[1];
        if (v13 == (*a2)[*v12 == 0])
          break;
        v12 += 4;
        if (v12 == v37)
          goto LABEL_24;
      }
    }
    if (v12 == v37)
    {
LABEL_24:
      if (maps::path_codec::Logger::m_log_level <= 4u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Could not align pathlets.", 25);
        std::string::basic_string[abi:ne180100]<0>(v32, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_error((uint64_t)v32, 344, (uint64_t)&v30);
        if (v31 < 0)
          operator delete(v30);
        if (v33 < 0)
          operator delete(v32[0]);
        v39 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v40 = MEMORY[0x1E0DE4FB8] + 16;
        if (v42 < 0)
          operator delete(v41);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v43);
      }
      v8 = 0;
    }
    else
    {
      v14 = (unint64_t)a3[2];
      v15 = a3[1];
      v16 = (char *)(v15 - 2);
      a3[1] = v15 - 2;
      if ((unint64_t)(v15 - 2) >= v14)
      {
        v18 = (v16 - (_BYTE *)*a3) >> 5;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        v20 = v14 - (_QWORD)*a3;
        if (v20 >> 4 > v19)
          v19 = v20 >> 4;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0)
          v21 = 0x7FFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)(a3 + 2), v21);
        else
          v22 = 0;
        v23 = &v22[32 * v18];
        v24 = &v22[32 * v21];
        v25 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v23 = *(_OWORD *)v12;
        *((_OWORD *)v23 + 1) = v25;
        v15 = v23 + 32;
        v27 = (char *)*a3;
        v26 = (char *)a3[1];
        if (v26 != *a3)
        {
          do
          {
            v28 = *((_OWORD *)v26 - 1);
            *((_OWORD *)v23 - 2) = *((_OWORD *)v26 - 2);
            *((_OWORD *)v23 - 1) = v28;
            v23 -= 32;
            v26 -= 32;
          }
          while (v26 != v27);
          v26 = (char *)*a3;
        }
        *a3 = v23;
        a3[1] = v15;
        a3[2] = v24;
        if (v26)
          operator delete(v26);
      }
      else
      {
        v17 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v16 = *(_OWORD *)v12;
        *(v15 - 1) = v17;
      }
      a3[1] = v15;
      v8 = 1;
    }
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (maps::path_codec::Logger::m_log_level <= 1u)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v39, (uint64_t)"Previous pathlet is a single-segment pathlet, alignment not possible.", 69);
      std::string::basic_string[abi:ne180100]<0>(v34, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletDFSDecoder.h");
      std::stringbuf::str();
      maps::path_codec::Logger::log_debug((uint64_t)v34, 331, (uint64_t)&__p);
      if (SHIBYTE(v38) < 0)
        operator delete(__p);
      if (SBYTE7(v35) < 0)
        operator delete(v34[0]);
      v39 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v40 = MEMORY[0x1E0DE4FB8] + 16;
      if (v42 < 0)
        operator delete(v41);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x18D764310](v43);
    }
    return 0;
  }
  return v8;
}

void sub_18953FD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::ostringstream::~ostringstream((uint64_t)&a34);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(a1);
}

unsigned int maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(int a1, int a2, uint64_t a3)
{
  int v5;
  signed int v6;
  signed int v7;

  if (a1 == 0x7FFFFFFF || a2 == 0x7FFFFFFF)
    return llround((double)*(int *)(a3 + 56) * 1.2);
  v5 = a2 - a1;
  if (a2 - a1 < 0)
    v5 = a1 - a2;
  v6 = *(_DWORD *)(a3 + 72) + v5;
  v7 = llround(*(double *)(a3 + 64) * (double)v5);
  if (v6 <= v7)
    return v7;
  else
    return v6;
}

__n128 std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::emplace_back<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  __int128 v50;
  __n128 result;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  void *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t i;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 51 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x33)
    {
      v23 = (char *)a1[3];
      v24 = (char *)*a1;
      v25 = (uint64_t)&v23[-*a1];
      if (v6 >= v25 >> 3)
      {
        v28 = v25 >> 2;
        if (v23 == v24)
          v29 = 1;
        else
          v29 = v28;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v29);
        v32 = v31;
        v33 = operator new(0xFF0uLL);
        v34 = &v30[8 * v6];
        v35 = &v30[8 * v32];
        if (v6 == v32)
        {
          v36 = 8 * v6;
          if (v5 - v4 < 1)
          {
            v74 = v33;
            v75 = v36 >> 2;
            if (v5 == v4)
              v76 = 1;
            else
              v76 = v75;
            v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v76);
            v34 = &v77[8 * (v76 >> 2)];
            v35 = &v77[8 * v78];
            if (v30)
              operator delete(v30);
            v30 = v77;
            v33 = v74;
          }
          else
          {
            v37 = v36 >> 3;
            if (v37 >= -1)
              v38 = v37 + 1;
            else
              v38 = v37 + 2;
            v34 -= 8 * (v38 >> 1);
          }
        }
        *(_QWORD *)v34 = v33;
        v79 = v34 + 8;
        for (i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v34 == v30)
          {
            if (v79 >= v35)
            {
              if (v35 == v30)
                v85 = 1;
              else
                v85 = (v35 - v30) >> 2;
              v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v85);
              v88 = v86;
              v34 = &v86[(2 * v85 + 6) & 0xFFFFFFFFFFFFFFF8];
              v90 = v79 - v30;
              v89 = v79 == v30;
              v79 = v34;
              if (!v89)
              {
                v79 = &v34[v90 & 0xFFFFFFFFFFFFFFF8];
                v91 = 8 * (v90 >> 3);
                v92 = v34;
                v93 = (uint64_t *)v30;
                do
                {
                  v94 = *v93++;
                  *(_QWORD *)v92 = v94;
                  v92 += 8;
                  v91 -= 8;
                }
                while (v91);
              }
              v35 = &v86[8 * v87];
              if (v30)
                operator delete(v30);
              v30 = v88;
            }
            else
            {
              v81 = (v35 - v79) >> 3;
              if (v81 >= -1)
                v82 = v81 + 1;
              else
                v82 = v81 + 2;
              v83 = v82 >> 1;
              v34 = &v30[8 * (v82 >> 1)];
              v84 = v30;
              if (v79 != v30)
              {
                memmove(v34, v30, v79 - v30);
                v84 = v79;
              }
              v79 = &v84[8 * v83];
            }
          }
          v95 = *(_QWORD *)(i - 8);
          *((_QWORD *)v34 - 1) = v95;
          v34 -= 8;
        }
        v96 = (char *)*a1;
        *a1 = v30;
        a1[1] = v34;
        a1[2] = v79;
        a1[3] = v35;
        if (v96)
          operator delete(v96);
        goto LABEL_36;
      }
      v26 = operator new(0xFF0uLL);
      v27 = v26;
      if (v23 == v5)
      {
        if (v4 == v24)
        {
          if (v5 == v4)
            v52 = 1;
          else
            v52 = (v23 - v4) >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v52);
          v4 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v4;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v4[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v4;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v27;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v15 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v15)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v5 = v26;
      }
    }
    else
    {
      a1[4] = v8 - 51;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 <= *a1)
        {
          if (v5 == (char *)*a1)
            v39 = 1;
          else
            v39 = (uint64_t)&v5[-*a1] >> 2;
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v39);
          v42 = &v40[8 * (v39 >> 2)];
          v43 = (uint64_t *)a1[1];
          v5 = v42;
          v44 = a1[2] - (_QWORD)v43;
          if (v44)
          {
            v5 = &v42[v44 & 0xFFFFFFFFFFFFFFF8];
            v45 = 8 * (v44 >> 3);
            v46 = &v40[8 * (v39 >> 2)];
            do
            {
              v47 = *v43++;
              *(_QWORD *)v46 = v47;
              v46 += 8;
              v45 -= 8;
            }
            while (v45);
          }
          v48 = (char *)*a1;
          *a1 = v40;
          a1[1] = v42;
          a1[2] = v5;
          a1[3] = &v40[8 * v41];
          if (v48)
          {
            operator delete(v48);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          a1[1] = v22;
          a1[2] = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v11;
    }
    a1[2] += 8;
LABEL_36:
    v4 = (char *)a1[1];
    v9 = a1[5] + a1[4];
  }
  v49 = *(_QWORD *)&v4[8 * (v9 / 0x33)] + 80 * (v9 % 0x33);
  v50 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v49 = *(_OWORD *)a2;
  *(_OWORD *)(v49 + 16) = v50;
  *(_QWORD *)(v49 + 40) = 0;
  *(_QWORD *)(v49 + 48) = 0;
  *(_QWORD *)(v49 + 32) = 0;
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v49 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  result = *(__n128 *)(a2 + 56);
  *(_DWORD *)(v49 + 72) = *(_DWORD *)(a2 + 72);
  *(__n128 *)(v49 + 56) = result;
  ++a1[5];
  return result;
}

void sub_189540394(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5] - 1;
  v3 = v2 + a1[4];
  v4 = a1[1];
  v5 = *(_QWORD *)(v4 + 8 * (v3 / 0x33));
  v6 = *(void **)(v5 + 80 * (v3 % 0x33) + 32);
  if (v6)
  {
    *(_QWORD *)(v5 + 80 * (v3 % 0x33) + 40) = v6;
    operator delete(v6);
    v2 = a1[5] - 1;
    v4 = a1[1];
    v3 = a1[4] + v2;
  }
  v7 = a1[2];
  a1[5] = v2;
  if (v7 == v4)
    v8 = 0;
  else
    v8 = 51 * ((v7 - v4) >> 3) - 1;
  if (v8 - v3 >= 0x66)
  {
    operator delete(*(void **)(v7 - 8));
    a1[2] -= 8;
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>(uint64_t result, __int128 *a2, _QWORD *a3, uint64_t a4, char a5)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  __int128 *v27;
  __int128 *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  __int128 *v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  BOOL v57;
  BOOL v58;
  __int128 v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  int v65;
  unsigned int v66;
  int v67;
  __int128 *v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  int v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  int v81;
  int v82;
  unsigned int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  unsigned int v88;
  int v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  __int128 *v93;
  BOOL v94;
  char v95;
  uint64_t v96;
  __int128 *v97;
  __int128 *v98;
  int v99;
  int v100;
  unsigned int v101;
  int v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  __int128 v106;
  int v107;
  int v108;
  unsigned int v109;
  int v110;
  __int128 *v111;
  __int128 v112;
  int64_t v113;
  int64_t v114;
  uint64_t v115;
  __int128 *v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  __int128 *v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  __int128 v127;
  __int128 *v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  unsigned int v139;
  int v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 *v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  int v152;
  unsigned int v153;
  int v154;
  __int128 v155;
  __int128 *v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  unint64_t v160;
  __int128 *v161;
  int v162;
  int v163;
  unsigned int v164;
  int v165;
  __int128 v166;
  __int128 *v167;
  __int128 v168;
  int v169;
  int v170;
  unsigned int v171;
  int v172;
  __int128 v173;
  __int128 v174;
  __int128 *v176;
  __int128 *v177;
  int v178;
  int v179;
  unsigned int v180;
  int v181;
  __int128 v182;
  __int128 *v183;
  __int128 v184;
  int v185;
  int v186;
  unsigned int v187;
  int v188;
  __int128 v189;
  uint64_t v190;
  __int128 *v192;
  int64_t v194;
  __int128 *v196;
  unint64_t v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;

  v196 = (__int128 *)result;
  while (2)
  {
    v6 = a2;
    v7 = v196;
    v192 = a2 - 2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v8 = v7;
          v9 = (char *)v6 - (char *)v7;
          v196 = v8;
          v197 = v9 >> 5;
          if ((unint64_t)(v9 >> 5) <= 5)
            __asm { BR              X9 }
          if (v9 <= 767)
          {
            v93 = v8 + 2;
            v94 = v8 == v6 || v93 == v6;
            v95 = v94;
            if ((a5 & 1) != 0)
            {
              if ((v95 & 1) == 0)
              {
                v96 = 0;
                v97 = v8;
                do
                {
                  v98 = v97;
                  v97 = v93;
                  v99 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v93);
                  v100 = v99
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v99
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v100) = v100 - 360;
                  if ((__int16)v100 < -179)
                    LOWORD(v100) = v100 + 360;
                  if ((v100 & 0x8000u) != 0)
                    v100 = -(__int16)v100;
                  v101 = (unsigned __int16)v100;
                  result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v98);
                  v102 = result
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(result
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v102) = v102 - 360;
                  if ((__int16)v102 < -179)
                    LOWORD(v102) = v102 + 360;
                  if ((v102 & 0x8000u) != 0)
                    v102 = -(__int16)v102;
                  if (v101 < (unsigned __int16)v102)
                  {
                    v103 = v97[1];
                    v201 = *v97;
                    v202 = v103;
                    v104 = v96;
                    while (1)
                    {
                      v105 = (char *)v8 + v104;
                      v106 = *(__int128 *)((char *)v8 + v104 + 16);
                      *((_OWORD *)v105 + 2) = *(__int128 *)((char *)v8 + v104);
                      *((_OWORD *)v105 + 3) = v106;
                      if (!v104)
                        break;
                      v104 -= 32;
                      v107 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v201);
                      v108 = v107
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v107
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v108) = v108 - 360;
                      if ((__int16)v108 < -179)
                        LOWORD(v108) = v108 + 360;
                      if ((v108 & 0x8000u) != 0)
                        v108 = -(__int16)v108;
                      v109 = (unsigned __int16)v108;
                      result = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*a3 + 48))(*a3, (char *)v8 + v104);
                      v110 = result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(result
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v110) = v110 - 360;
                      if ((__int16)v110 < -179)
                        LOWORD(v110) = v110 + 360;
                      if ((v110 & 0x8000u) != 0)
                        v110 = -(__int16)v110;
                      if (v109 >= (unsigned __int16)v110)
                      {
                        v111 = (__int128 *)((char *)v8 + v104 + 32);
                        goto LABEL_239;
                      }
                    }
                    v111 = v8;
LABEL_239:
                    v112 = v202;
                    *v111 = v201;
                    v111[1] = v112;
                  }
                  v93 = v97 + 2;
                  v96 += 32;
                }
                while (v97 + 2 != a2);
              }
            }
            else if ((v95 & 1) == 0)
            {
              v176 = v8 - 2;
              do
              {
                v177 = v93;
                v178 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v93);
                v179 = v178
                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                     - (*(unsigned __int16 *)a3[1]
                      + 180);
                if ((__int16)(v178
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(_WORD *)a3[1]
                              + 180)) > 180)
                  LOWORD(v179) = v179 - 360;
                if ((__int16)v179 < -179)
                  LOWORD(v179) = v179 + 360;
                if ((v179 & 0x8000u) != 0)
                  v179 = -(__int16)v179;
                v180 = (unsigned __int16)v179;
                result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v196);
                v181 = result
                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                     - (*(unsigned __int16 *)a3[1]
                      + 180);
                if ((__int16)(result
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(_WORD *)a3[1]
                              + 180)) > 180)
                  LOWORD(v181) = v181 - 360;
                if ((__int16)v181 < -179)
                  LOWORD(v181) = v181 + 360;
                if ((v181 & 0x8000u) != 0)
                  v181 = -(__int16)v181;
                v196 = v177;
                if (v180 < (unsigned __int16)v181)
                {
                  v182 = v177[1];
                  v201 = *v177;
                  v202 = v182;
                  v183 = v176;
                  do
                  {
                    v184 = v183[3];
                    v183[4] = v183[2];
                    v183[5] = v184;
                    v185 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v201);
                    v186 = v185
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v185
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v186) = v186 - 360;
                    if ((__int16)v186 < -179)
                      LOWORD(v186) = v186 + 360;
                    if ((v186 & 0x8000u) != 0)
                      v186 = -(__int16)v186;
                    v187 = (unsigned __int16)v186;
                    result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v183);
                    v188 = result
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(result
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v188) = v188 - 360;
                    if ((__int16)v188 < -179)
                      LOWORD(v188) = v188 + 360;
                    if ((v188 & 0x8000u) != 0)
                      v188 = -(__int16)v188;
                    v183 -= 2;
                  }
                  while (v187 < (unsigned __int16)v188);
                  v189 = v202;
                  v183[4] = v201;
                  v183[5] = v189;
                }
                v93 = v177 + 2;
                v176 += 2;
              }
              while (v177 + 2 != a2);
            }
            return result;
          }
          if (!a4)
          {
            if (v8 != v6)
            {
              v113 = (v197 - 2) >> 1;
              v194 = v113;
              v190 = v9;
              do
              {
                v114 = v113;
                if (v194 >= v113)
                {
                  v115 = (2 * v113) | 1;
                  v116 = &v8[2 * v115];
                  if (2 * v113 + 2 < (uint64_t)v197)
                  {
                    v117 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v8[2 * v115]);
                    v118 = v117
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v117
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v118) = v118 - 360;
                    if ((__int16)v118 < -179)
                      LOWORD(v118) = v118 + 360;
                    if ((v118 & 0x8000u) != 0)
                      v118 = -(__int16)v118;
                    v119 = (unsigned __int16)v118;
                    v120 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v116 + 2);
                    v121 = v120
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v120
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v121) = v121 - 360;
                    if ((__int16)v121 < -179)
                      LOWORD(v121) = v121 + 360;
                    if ((v121 & 0x8000u) != 0)
                      v121 = -(__int16)v121;
                    if (v119 < (unsigned __int16)v121)
                    {
                      v116 += 2;
                      v115 = 2 * v114 + 2;
                    }
                  }
                  v122 = &v8[2 * v114];
                  v123 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v116);
                  v124 = v123
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(v123
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v124) = v124 - 360;
                  if ((__int16)v124 < -179)
                    LOWORD(v124) = v124 + 360;
                  if ((v124 & 0x8000u) != 0)
                    v124 = -(__int16)v124;
                  v125 = (unsigned __int16)v124;
                  result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v122);
                  v126 = result
                       + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                       - (*(unsigned __int16 *)a3[1]
                        + 180);
                  if ((__int16)(result
                               + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                               - (*(_WORD *)a3[1]
                                + 180)) > 180)
                    LOWORD(v126) = v126 - 360;
                  if ((__int16)v126 < -179)
                    LOWORD(v126) = v126 + 360;
                  if ((v126 & 0x8000u) != 0)
                    v126 = -(__int16)v126;
                  if (v125 >= (unsigned __int16)v126)
                  {
                    v127 = v122[1];
                    v201 = *v122;
                    v202 = v127;
                    do
                    {
                      v128 = v116;
                      v129 = v116[1];
                      *v122 = *v116;
                      v122[1] = v129;
                      if (v194 < v115)
                        break;
                      v130 = (2 * v115) | 1;
                      v116 = &v8[2 * v130];
                      v131 = 2 * v115 + 2;
                      if (v131 < (uint64_t)v197)
                      {
                        v132 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v8[2 * v130]);
                        v133 = v132
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v132
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v133) = v133 - 360;
                        if ((__int16)v133 < -179)
                          LOWORD(v133) = v133 + 360;
                        if ((v133 & 0x8000u) != 0)
                          v133 = -(__int16)v133;
                        v134 = (unsigned __int16)v133;
                        v135 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v116 + 2);
                        v136 = v135
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v135
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v136) = v136 - 360;
                        if ((__int16)v136 < -179)
                          LOWORD(v136) = v136 + 360;
                        if ((v136 & 0x8000u) != 0)
                          v136 = -(__int16)v136;
                        if (v134 < (unsigned __int16)v136)
                        {
                          v116 += 2;
                          v130 = v131;
                        }
                      }
                      v137 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v116);
                      v138 = v137
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(v137
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v138) = v138 - 360;
                      if ((__int16)v138 < -179)
                        LOWORD(v138) = v138 + 360;
                      if ((v138 & 0x8000u) != 0)
                        v138 = -(__int16)v138;
                      v139 = (unsigned __int16)v138;
                      result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v201);
                      v140 = result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(unsigned __int16 *)a3[1]
                            + 180);
                      if ((__int16)(result
                                   + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                   - (*(_WORD *)a3[1]
                                    + 180)) > 180)
                        LOWORD(v140) = v140 - 360;
                      if ((__int16)v140 < -179)
                        LOWORD(v140) = v140 + 360;
                      if ((v140 & 0x8000u) != 0)
                        v140 = -(__int16)v140;
                      v122 = v128;
                      v115 = v130;
                    }
                    while (v139 >= (unsigned __int16)v140);
                    v141 = v202;
                    *v128 = v201;
                    v128[1] = v141;
                    v9 = v190;
                  }
                }
                v113 = v114 - 1;
              }
              while (v114);
              v142 = (unint64_t)v9 >> 5;
              do
              {
                v143 = 0;
                v144 = v196;
                v145 = v196[1];
                v199 = *v196;
                v200 = v145;
                v146 = v142 - 2;
                if (v142 < 2)
                  v146 = v142 - 1;
                v147 = v146 >> 1;
                v198 = v146 >> 1;
                do
                {
                  v148 = &v144[2 * v143 + 2];
                  v149 = (2 * v143) | 1;
                  v150 = 2 * v143 + 2;
                  if (v150 < v142)
                  {
                    v151 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v148);
                    v152 = v151
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v151
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v152) = v152 - 360;
                    if ((__int16)v152 < -179)
                      LOWORD(v152) = v152 + 360;
                    if ((v152 & 0x8000u) != 0)
                      v152 = -(__int16)v152;
                    v153 = (unsigned __int16)v152;
                    result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v148 + 2);
                    v154 = result
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(result
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v154) = v154 - 360;
                    v147 = v198;
                    if ((__int16)v154 < -179)
                      LOWORD(v154) = v154 + 360;
                    if ((v154 & 0x8000u) != 0)
                      v154 = -(__int16)v154;
                    if (v153 < (unsigned __int16)v154)
                    {
                      v148 += 2;
                      v149 = v150;
                    }
                  }
                  v155 = v148[1];
                  *v144 = *v148;
                  v144[1] = v155;
                  v144 = v148;
                  v143 = v149;
                }
                while (v149 <= v147);
                v156 = a2 - 2;
                v94 = v148 == a2 - 2;
                a2 -= 2;
                if (v94)
                {
                  v174 = v200;
                  *v148 = v199;
                  v148[1] = v174;
                }
                else
                {
                  v157 = v156[1];
                  *v148 = *v156;
                  v148[1] = v157;
                  v158 = v200;
                  *v156 = v199;
                  v156[1] = v158;
                  v159 = (char *)v148 - (char *)v196 + 32;
                  if (v159 >= 33)
                  {
                    v160 = (((unint64_t)v159 >> 5) - 2) >> 1;
                    v161 = &v196[2 * v160];
                    v162 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v161);
                    v163 = v162
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(v162
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v163) = v163 - 360;
                    if ((__int16)v163 < -179)
                      LOWORD(v163) = v163 + 360;
                    if ((v163 & 0x8000u) != 0)
                      v163 = -(__int16)v163;
                    v164 = (unsigned __int16)v163;
                    result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v148);
                    v165 = result
                         + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                         - (*(unsigned __int16 *)a3[1]
                          + 180);
                    if ((__int16)(result
                                 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                 - (*(_WORD *)a3[1]
                                  + 180)) > 180)
                      LOWORD(v165) = v165 - 360;
                    if ((__int16)v165 < -179)
                      LOWORD(v165) = v165 + 360;
                    if ((v165 & 0x8000u) != 0)
                      v165 = -(__int16)v165;
                    if (v164 < (unsigned __int16)v165)
                    {
                      v166 = v148[1];
                      v201 = *v148;
                      v202 = v166;
                      do
                      {
                        v167 = v161;
                        v168 = v161[1];
                        *v148 = *v161;
                        v148[1] = v168;
                        if (!v160)
                          break;
                        v160 = (v160 - 1) >> 1;
                        v161 = &v196[2 * v160];
                        v169 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v161);
                        v170 = v169
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(v169
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v170) = v170 - 360;
                        if ((__int16)v170 < -179)
                          LOWORD(v170) = v170 + 360;
                        if ((v170 & 0x8000u) != 0)
                          v170 = -(__int16)v170;
                        v171 = (unsigned __int16)v170;
                        result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v201);
                        v172 = result
                             + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                             - (*(unsigned __int16 *)a3[1]
                              + 180);
                        if ((__int16)(result
                                     + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                                     - (*(_WORD *)a3[1]
                                      + 180)) > 180)
                          LOWORD(v172) = v172 - 360;
                        if ((__int16)v172 < -179)
                          LOWORD(v172) = v172 + 360;
                        if ((v172 & 0x8000u) != 0)
                          v172 = -(__int16)v172;
                        v148 = v167;
                      }
                      while (v171 < (unsigned __int16)v172);
                      v173 = v202;
                      *v167 = v201;
                      v167[1] = v173;
                    }
                  }
                }
              }
              while (v142-- > 2);
            }
            return result;
          }
          v10 = v197 >> 1;
          v11 = &v8[2 * (v197 >> 1)];
          if ((unint64_t)v9 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(&v8[2 * (v197 >> 1)], v8, v192, a3);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v8, &v8[2 * (v197 >> 1)], v192, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v8 + 2, v11 - 2, a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v8 + 4, &v8[2 * v10 + 2], a2 - 6, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v11 - 2, v11, &v8[2 * v10 + 2], a3);
            v12 = v8[1];
            v201 = *v8;
            v202 = v12;
            v13 = v11[1];
            *v8 = *v11;
            v8[1] = v13;
            v14 = v202;
            *v11 = v201;
            v11[1] = v14;
          }
          --a4;
          if ((a5 & 1) != 0)
            break;
          v15 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v8 - 2);
          v16 = v15 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v15 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v16) = v16 - 360;
          if ((__int16)v16 < -179)
            LOWORD(v16) = v16 + 360;
          if ((v16 & 0x8000u) != 0)
            v16 = -(__int16)v16;
          v17 = (unsigned __int16)v16;
          v18 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v8);
          v19 = v18 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v18 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v19) = v19 - 360;
          if ((__int16)v19 < -179)
            LOWORD(v19) = v19 + 360;
          if ((v19 & 0x8000u) != 0)
            v19 = -(__int16)v19;
          if (v17 < (unsigned __int16)v19)
            break;
          v59 = v8[1];
          v199 = *v8;
          v200 = v59;
          v60 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
          v61 = v60 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v60 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v61) = v61 - 360;
          if ((__int16)v61 < -179)
            LOWORD(v61) = v61 + 360;
          if ((v61 & 0x8000u) != 0)
            v61 = -(__int16)v61;
          v62 = (unsigned __int16)v61;
          result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v192);
          v63 = result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v63) = v63 - 360;
          if ((__int16)v63 < -179)
            LOWORD(v63) = v63 + 360;
          if ((v63 & 0x8000u) != 0)
            v63 = -(__int16)v63;
          if (v62 >= (unsigned __int16)v63)
          {
            v68 = v8 + 2;
            do
            {
              v7 = v68;
              if (v68 >= v6)
                break;
              v69 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v70 = v69
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v69 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v70) = v70 - 360;
              if ((__int16)v70 < -179)
                LOWORD(v70) = v70 + 360;
              if ((v70 & 0x8000u) != 0)
                v70 = -(__int16)v70;
              v71 = (unsigned __int16)v70;
              result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v7);
              v72 = result
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(_WORD *)a3[1]
                            + 180)) > 180)
                LOWORD(v72) = v72 - 360;
              if ((__int16)v72 < -179)
                LOWORD(v72) = v72 + 360;
              if ((v72 & 0x8000u) == 0)
                LOWORD(v73) = v72;
              else
                v73 = -(__int16)v72;
              v68 = v7 + 2;
            }
            while (v71 >= (unsigned __int16)v73);
          }
          else
          {
            v7 = v8;
            do
            {
              v7 += 2;
              v64 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v65 = v64
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v64 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v65) = v65 - 360;
              if ((__int16)v65 < -179)
                LOWORD(v65) = v65 + 360;
              if ((v65 & 0x8000u) != 0)
                v65 = -(__int16)v65;
              v66 = (unsigned __int16)v65;
              result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v7);
              v67 = result
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(_WORD *)a3[1]
                            + 180)) > 180)
                LOWORD(v67) = v67 - 360;
              if ((__int16)v67 < -179)
                LOWORD(v67) = v67 + 360;
              if ((v67 & 0x8000u) != 0)
                v67 = -(__int16)v67;
            }
            while (v66 >= (unsigned __int16)v67);
          }
          if (v7 < v6)
          {
            v6 = a2;
            do
            {
              v6 -= 2;
              v74 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v75 = v74
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v74 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v75) = v75 - 360;
              if ((__int16)v75 < -179)
                LOWORD(v75) = v75 + 360;
              if ((v75 & 0x8000u) != 0)
                v75 = -(__int16)v75;
              v76 = (unsigned __int16)v75;
              result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v6);
              v77 = result
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(_WORD *)a3[1]
                            + 180)) > 180)
                LOWORD(v77) = v77 - 360;
              if ((__int16)v77 < -179)
                LOWORD(v77) = v77 + 360;
              if ((v77 & 0x8000u) != 0)
                v77 = -(__int16)v77;
            }
            while (v76 < (unsigned __int16)v77);
          }
          while (v7 < v6)
          {
            v78 = v7[1];
            v201 = *v7;
            v202 = v78;
            v79 = v6[1];
            *v7 = *v6;
            v7[1] = v79;
            v80 = v202;
            *v6 = v201;
            v6[1] = v80;
            do
            {
              v7 += 2;
              v81 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v82 = v81
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v81 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v82) = v82 - 360;
              if ((__int16)v82 < -179)
                LOWORD(v82) = v82 + 360;
              if ((v82 & 0x8000u) != 0)
                v82 = -(__int16)v82;
              v83 = (unsigned __int16)v82;
              v84 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v7);
              v85 = v84
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v84 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v85) = v85 - 360;
              if ((__int16)v85 < -179)
                LOWORD(v85) = v85 + 360;
              if ((v85 & 0x8000u) != 0)
                v85 = -(__int16)v85;
            }
            while (v83 >= (unsigned __int16)v85);
            do
            {
              v6 -= 2;
              v86 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v87 = v86
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v86 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v87) = v87 - 360;
              if ((__int16)v87 < -179)
                LOWORD(v87) = v87 + 360;
              if ((v87 & 0x8000u) != 0)
                v87 = -(__int16)v87;
              v88 = (unsigned __int16)v87;
              result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v6);
              v89 = result
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(result
                           + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                           - (*(_WORD *)a3[1]
                            + 180)) > 180)
                LOWORD(v89) = v89 - 360;
              if ((__int16)v89 < -179)
                LOWORD(v89) = v89 + 360;
              if ((v89 & 0x8000u) != 0)
                v89 = -(__int16)v89;
            }
            while (v88 < (unsigned __int16)v89);
          }
          v90 = v7 - 2;
          if (v7 - 2 != v8)
          {
            v91 = *(v7 - 1);
            *v8 = *v90;
            v8[1] = v91;
          }
          a5 = 0;
          v92 = v200;
          *v90 = v199;
          *(v7 - 1) = v92;
          v6 = a2;
        }
        v20 = 0;
        v21 = v8[1];
        v199 = *v8;
        v200 = v21;
        do
        {
          v20 += 2;
          v22 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v8[v20]);
          v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v23) = v23 - 360;
          if ((__int16)v23 < -179)
            LOWORD(v23) = v23 + 360;
          if ((v23 & 0x8000u) != 0)
            v23 = -(__int16)v23;
          v24 = (unsigned __int16)v23;
          v25 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
          v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
          if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
            LOWORD(v26) = v26 - 360;
          if ((__int16)v26 < -179)
            LOWORD(v26) = v26 + 360;
          if ((v26 & 0x8000u) != 0)
            v26 = -(__int16)v26;
        }
        while (v24 < (unsigned __int16)v26);
        v27 = &v8[v20];
        v28 = a2;
        if (v20 == 2)
        {
          v28 = a2;
          do
          {
            if (v27 >= v28)
              break;
            v28 -= 2;
            v34 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v28);
            v35 = v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v34 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
              LOWORD(v35) = v35 - 360;
            if ((__int16)v35 < -179)
              LOWORD(v35) = v35 + 360;
            if ((v35 & 0x8000u) != 0)
              v35 = -(__int16)v35;
            v36 = (unsigned __int16)v35;
            v37 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
            v38 = v37 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v37 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
              LOWORD(v38) = v38 - 360;
            if ((__int16)v38 < -179)
              LOWORD(v38) = v38 + 360;
            if ((v38 & 0x8000u) != 0)
              v38 = -(__int16)v38;
          }
          while (v36 >= (unsigned __int16)v38);
        }
        else
        {
          do
          {
            v28 -= 2;
            v29 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v28);
            v30 = v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
              LOWORD(v30) = v30 - 360;
            if ((__int16)v30 < -179)
              LOWORD(v30) = v30 + 360;
            if ((v30 & 0x8000u) != 0)
              v30 = -(__int16)v30;
            v31 = (unsigned __int16)v30;
            v32 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
            v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
            if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
              LOWORD(v33) = v33 - 360;
            if ((__int16)v33 < -179)
              LOWORD(v33) = v33 + 360;
            if ((v33 & 0x8000u) != 0)
              v33 = -(__int16)v33;
          }
          while (v31 >= (unsigned __int16)v33);
        }
        if (v27 >= v28)
        {
          v54 = v27 - 2;
        }
        else
        {
          v39 = v27;
          v40 = v28;
          do
          {
            v41 = v39[1];
            v201 = *v39;
            v202 = v41;
            v42 = v40[1];
            *v39 = *v40;
            v39[1] = v42;
            v43 = v202;
            *v40 = v201;
            v40[1] = v43;
            do
            {
              v39 += 2;
              v44 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v39);
              v45 = v44
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v44 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v45) = v45 - 360;
              if ((__int16)v45 < -179)
                LOWORD(v45) = v45 + 360;
              if ((v45 & 0x8000u) != 0)
                v45 = -(__int16)v45;
              v46 = (unsigned __int16)v45;
              v47 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v48 = v47
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v47 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v48) = v48 - 360;
              if ((__int16)v48 < -179)
                LOWORD(v48) = v48 + 360;
              if ((v48 & 0x8000u) != 0)
                v48 = -(__int16)v48;
            }
            while (v46 < (unsigned __int16)v48);
            do
            {
              v40 -= 2;
              v49 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v40);
              v50 = v49
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v49 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v50) = v50 - 360;
              if ((__int16)v50 < -179)
                LOWORD(v50) = v50 + 360;
              if ((v50 & 0x8000u) != 0)
                v50 = -(__int16)v50;
              v51 = (unsigned __int16)v50;
              v52 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v199);
              v53 = v52
                  + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u)
                  - (*(unsigned __int16 *)a3[1]
                   + 180);
              if ((__int16)(v52 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
                LOWORD(v53) = v53 - 360;
              if ((__int16)v53 < -179)
                LOWORD(v53) = v53 + 360;
              if ((v53 & 0x8000u) != 0)
                v53 = -(__int16)v53;
            }
            while (v51 >= (unsigned __int16)v53);
          }
          while (v39 < v40);
          v54 = v39 - 2;
        }
        if (v54 != v8)
        {
          v55 = v54[1];
          *v8 = *v54;
          v8[1] = v55;
        }
        v56 = v200;
        *v54 = v199;
        v54[1] = v56;
        v57 = v27 >= v28;
        v6 = a2;
        if (v57)
          break;
LABEL_105:
        result = ((uint64_t (*)(__int128 *, __int128 *, _QWORD *, uint64_t, _QWORD))std::__introsort<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*,false>)(v8, v54, a3, a4, a5 & 1);
        a5 = 0;
        v7 = v54 + 2;
      }
      v58 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v8, v54, a3);
      v7 = v54 + 2;
      result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(v54 + 2, a2, a3);
      if ((_DWORD)result)
        break;
      if (!v58)
        goto LABEL_105;
    }
    a2 = v54;
    if (!v58)
      continue;
    return result;
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(__int128 *a1, __int128 *a2, __int128 *a3, _QWORD *a4)
{
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  int v36;
  unsigned int v37;
  int v38;
  __int128 v39;

  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 48))(*a4);
  v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
    LOWORD(v9) = v9 - 360;
  if ((__int16)v9 < -179)
    LOWORD(v9) = v9 + 360;
  if ((v9 & 0x8000u) != 0)
    v9 = -(__int16)v9;
  v10 = (unsigned __int16)v9;
  v11 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a1);
  v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
    LOWORD(v12) = v12 - 360;
  if ((__int16)v12 < -179)
    LOWORD(v12) = v12 + 360;
  if ((v12 & 0x8000u) == 0)
    LOWORD(v13) = v12;
  else
    v13 = -(__int16)v12;
  v14 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a3);
  v15 = v14 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(v14 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
    LOWORD(v15) = v15 - 360;
  if ((__int16)v15 < -179)
    LOWORD(v15) = v15 + 360;
  if ((v15 & 0x8000u) == 0)
    LOWORD(v16) = v15;
  else
    v16 = -(__int16)v15;
  result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a2);
  v18 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
  if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
    LOWORD(v18) = v18 - 360;
  if ((__int16)v18 < -179)
    LOWORD(v18) = v18 + 360;
  if ((v18 & 0x8000u) != 0)
    v18 = -(__int16)v18;
  if (v10 >= (unsigned __int16)v13)
  {
    if ((unsigned __int16)v16 < (unsigned __int16)v18)
    {
      v23 = *a2;
      v22 = a2[1];
      v24 = a3[1];
      *a2 = *a3;
      a2[1] = v24;
      *a3 = v23;
      a3[1] = v22;
      v25 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a2);
      v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
      if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
        LOWORD(v26) = v26 - 360;
      if ((__int16)v26 < -179)
        LOWORD(v26) = v26 + 360;
      if ((v26 & 0x8000u) != 0)
        v26 = -(__int16)v26;
      v27 = (unsigned __int16)v26;
      result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a1);
      v28 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
      if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
        LOWORD(v28) = v28 - 360;
      if ((__int16)v28 < -179)
        LOWORD(v28) = v28 + 360;
      if ((v28 & 0x8000u) != 0)
        v28 = -(__int16)v28;
      if (v27 < (unsigned __int16)v28)
      {
        v30 = *a1;
        v29 = a1[1];
        v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        *a2 = v30;
        a2[1] = v29;
      }
    }
  }
  else
  {
    if ((unsigned __int16)v16 < (unsigned __int16)v18)
    {
      v20 = *a1;
      v19 = a1[1];
      v21 = a3[1];
      *a1 = *a3;
      a1[1] = v21;
LABEL_59:
      *a3 = v20;
      a3[1] = v19;
      return result;
    }
    v33 = *a1;
    v32 = a1[1];
    v34 = a2[1];
    *a1 = *a2;
    a1[1] = v34;
    *a2 = v33;
    a2[1] = v32;
    v35 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a3);
    v36 = v35 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(v35 + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
      LOWORD(v36) = v36 - 360;
    if ((__int16)v36 < -179)
      LOWORD(v36) = v36 + 360;
    if ((v36 & 0x8000u) != 0)
      v36 = -(__int16)v36;
    v37 = (unsigned __int16)v36;
    result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a4 + 48))(*a4, a2);
    v38 = result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(unsigned __int16 *)a4[1] + 180);
    if ((__int16)(result + 360 * ((unsigned __int16)(*(_WORD *)a4[1] + 180) / 0x168u) - (*(_WORD *)a4[1] + 180)) > 180)
      LOWORD(v38) = v38 - 360;
    if ((__int16)v38 < -179)
      LOWORD(v38) = v38 + 360;
    if ((v38 & 0x8000u) != 0)
      v38 = -(__int16)v38;
    if (v37 < (unsigned __int16)v38)
    {
      v20 = *a2;
      v19 = a2[1];
      v39 = a3[1];
      *a2 = *a3;
      a2[1] = v39;
      goto LABEL_59;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(__int128 *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v5;
  _BOOL8 result;
  __int128 *v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  char *v26;
  __int128 v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  __int128 *v34;
  __int128 v35;
  int v36;
  __int128 v38;
  __int128 v39;

  v5 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = a2 - 2;
      v8 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, a2 - 2);
      v9 = v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v8 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
        LOWORD(v9) = v9 - 360;
      if ((__int16)v9 < -179)
        LOWORD(v9) = v9 + 360;
      if ((v9 & 0x8000u) != 0)
        v9 = -(__int16)v9;
      v10 = (unsigned __int16)v9;
      v11 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, a1);
      v12 = v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v11 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
        LOWORD(v12) = v12 - 360;
      if ((__int16)v12 < -179)
        LOWORD(v12) = v12 + 360;
      if ((v12 & 0x8000u) != 0)
        v12 = -(__int16)v12;
      if (v10 < (unsigned __int16)v12)
      {
        v14 = *a1;
        v13 = a1[1];
        v15 = v7[1];
        *a1 = *v7;
        a1[1] = v15;
        *v7 = v14;
        v7[1] = v13;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((uint64_t)a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v16 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a1 + 2, a1 + 4, a3);
      v17 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v18 = 0;
      v36 = 0;
      break;
  }
  while (1)
  {
    v19 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v17);
    v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
      LOWORD(v20) = v20 - 360;
    if ((__int16)v20 < -179)
      LOWORD(v20) = v20 + 360;
    if ((v20 & 0x8000u) != 0)
      v20 = -(__int16)v20;
    v21 = (unsigned __int16)v20;
    v22 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, v16);
    v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
      LOWORD(v23) = v23 - 360;
    if ((__int16)v23 < -179)
      LOWORD(v23) = v23 + 360;
    if ((v23 & 0x8000u) != 0)
      v23 = -(__int16)v23;
    if (v21 >= (unsigned __int16)v23)
      goto LABEL_50;
    v24 = v17[1];
    v38 = *v17;
    v39 = v24;
    v25 = v18;
    while (1)
    {
      v26 = (char *)a1 + v25;
      v27 = *(__int128 *)((char *)a1 + v25 + 80);
      *((_OWORD *)v26 + 6) = *(__int128 *)((char *)a1 + v25 + 64);
      *((_OWORD *)v26 + 7) = v27;
      if (v25 == -64)
        break;
      v28 = v26 + 32;
      v29 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a3 + 48))(*a3, &v38);
      v30 = v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v29 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
        LOWORD(v30) = v30 - 360;
      if ((__int16)v30 < -179)
        LOWORD(v30) = v30 + 360;
      if ((v30 & 0x8000u) != 0)
        v30 = -(__int16)v30;
      v31 = (unsigned __int16)v30;
      v32 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*a3 + 48))(*a3, v28);
      v33 = v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(unsigned __int16 *)a3[1] + 180);
      if ((__int16)(v32 + 360 * ((unsigned __int16)(*(_WORD *)a3[1] + 180) / 0x168u) - (*(_WORD *)a3[1] + 180)) > 180)
        LOWORD(v33) = v33 - 360;
      if ((__int16)v33 < -179)
        LOWORD(v33) = v33 + 360;
      if ((v33 & 0x8000u) != 0)
        v33 = -(__int16)v33;
      v25 -= 32;
      if (v31 >= (unsigned __int16)v33)
      {
        v34 = (__int128 *)((char *)a1 + v25 + 96);
        goto LABEL_48;
      }
    }
    v34 = a1;
LABEL_48:
    v35 = v39;
    *v34 = v38;
    v34[1] = v35;
    if (v36 == 7)
      return v17 + 2 == a2;
    ++v36;
LABEL_50:
    v16 = v17;
    v18 += 32;
    v17 += 2;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, _QWORD *a5)
{
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  __n128 result;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>((__int128 *)a1, a2, a3, a5);
  v10 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a5 + 48))(*a5, a4);
  v11 = v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(v10 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
    LOWORD(v11) = v11 - 360;
  if ((__int16)v11 < -179)
    LOWORD(v11) = v11 + 360;
  if ((v11 & 0x8000u) != 0)
    v11 = -(__int16)v11;
  v12 = (unsigned __int16)v11;
  v13 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a5 + 48))(*a5, a3);
  v15 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
  if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
    LOWORD(v15) = v15 - 360;
  if ((__int16)v15 < -179)
    LOWORD(v15) = v15 + 360;
  if ((v15 & 0x8000u) != 0)
    v15 = -(__int16)v15;
  if (v12 < (unsigned __int16)v15)
  {
    v17 = *a3;
    v16 = a3[1];
    v18 = a4[1];
    *a3 = *a4;
    a3[1] = v18;
    *a4 = v17;
    a4[1] = v16;
    v19 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a5 + 48))(*a5, a3);
    v20 = v19 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(v19 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
      LOWORD(v20) = v20 - 360;
    if ((__int16)v20 < -179)
      LOWORD(v20) = v20 + 360;
    if ((v20 & 0x8000u) != 0)
      v20 = -(__int16)v20;
    v21 = (unsigned __int16)v20;
    v22 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a5 + 48))(*a5, a2);
    v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
      LOWORD(v23) = v23 - 360;
    if ((__int16)v23 < -179)
      LOWORD(v23) = v23 + 360;
    if ((v23 & 0x8000u) != 0)
      v23 = -(__int16)v23;
    if (v21 < (unsigned __int16)v23)
    {
      v25 = *a2;
      v24 = a2[1];
      v26 = a3[1];
      *a2 = *a3;
      a2[1] = v26;
      *a3 = v25;
      a3[1] = v24;
      v27 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a5 + 48))(*a5, a2);
      v28 = v27 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(v27 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
        LOWORD(v28) = v28 - 360;
      if ((__int16)v28 < -179)
        LOWORD(v28) = v28 + 360;
      if ((v28 & 0x8000u) != 0)
        v28 = -(__int16)v28;
      v29 = (unsigned __int16)v28;
      v30 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a5 + 48))(*a5, a1);
      v31 = v30 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(unsigned __int16 *)a5[1] + 180);
      if ((__int16)(v30 + 360 * ((unsigned __int16)(*(_WORD *)a5[1] + 180) / 0x168u) - (*(_WORD *)a5[1] + 180)) > 180)
        LOWORD(v31) = v31 - 360;
      if ((__int16)v31 < -179)
        LOWORD(v31) = v31 + 360;
      if ((v31 & 0x8000u) != 0)
        v31 = -(__int16)v31;
      if (v29 < (unsigned __int16)v31)
      {
        v32 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v33 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v33;
        *a2 = v32;
        a2[1] = (__int128)result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, _QWORD *a6)
{
  __n128 v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  __n128 result;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  __int128 v43;
  __int128 v44;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<GEOPathMatcherRoadKey> maps::path_codec::dfs_decode_pathlet<GEOPathMatcherRoadKey>(maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::SnappedSupportPoint<GEOPathMatcherRoadKey> const&,maps::path_codec::AbstractRoadNetwork<GEOPathMatcherRoadKey> const&,maps::path_codec::Config const&)::{lambda(GEOPathMatcherRoadKey const&,GEOPathMatcherRoadKey const&)#1} &,GEOPathMatcherRoadKey*>(a1, a2, a3, a4, a6);
  v13 = (*(uint64_t (**)(_QWORD, __int128 *, __n128))(*(_QWORD *)*a6 + 48))(*a6, a5, v12);
  v14 = v13 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(v13 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
    LOWORD(v14) = v14 - 360;
  if ((__int16)v14 < -179)
    LOWORD(v14) = v14 + 360;
  if ((v14 & 0x8000u) != 0)
    v14 = -(__int16)v14;
  v15 = (unsigned __int16)v14;
  v16 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a4);
  v18 = v16 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
  if ((__int16)(v16 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
    LOWORD(v18) = v18 - 360;
  if ((__int16)v18 < -179)
    LOWORD(v18) = v18 + 360;
  if ((v18 & 0x8000u) != 0)
    v18 = -(__int16)v18;
  if (v15 < (unsigned __int16)v18)
  {
    v20 = *a4;
    v19 = a4[1];
    v21 = a5[1];
    *a4 = *a5;
    a4[1] = v21;
    *a5 = v20;
    a5[1] = v19;
    v22 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a4);
    v23 = v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(v22 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
      LOWORD(v23) = v23 - 360;
    if ((__int16)v23 < -179)
      LOWORD(v23) = v23 + 360;
    if ((v23 & 0x8000u) != 0)
      v23 = -(__int16)v23;
    v24 = (unsigned __int16)v23;
    v25 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a3);
    v26 = v25 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
    if ((__int16)(v25 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
      LOWORD(v26) = v26 - 360;
    if ((__int16)v26 < -179)
      LOWORD(v26) = v26 + 360;
    if ((v26 & 0x8000u) != 0)
      v26 = -(__int16)v26;
    if (v24 < (unsigned __int16)v26)
    {
      v28 = *a3;
      v27 = a3[1];
      v29 = a4[1];
      *a3 = *a4;
      a3[1] = v29;
      *a4 = v28;
      a4[1] = v27;
      v30 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a3);
      v31 = v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(v30 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
        LOWORD(v31) = v31 - 360;
      if ((__int16)v31 < -179)
        LOWORD(v31) = v31 + 360;
      if ((v31 & 0x8000u) != 0)
        v31 = -(__int16)v31;
      v32 = (unsigned __int16)v31;
      v33 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a2);
      v34 = v33 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
      if ((__int16)(v33 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
        LOWORD(v34) = v34 - 360;
      if ((__int16)v34 < -179)
        LOWORD(v34) = v34 + 360;
      if ((v34 & 0x8000u) != 0)
        v34 = -(__int16)v34;
      if (v32 < (unsigned __int16)v34)
      {
        v36 = *a2;
        v35 = a2[1];
        v37 = a3[1];
        *a2 = *a3;
        a2[1] = v37;
        *a3 = v36;
        a3[1] = v35;
        v38 = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)*a6 + 48))(*a6, a2);
        v39 = v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(v38 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
          LOWORD(v39) = v39 - 360;
        if ((__int16)v39 < -179)
          LOWORD(v39) = v39 + 360;
        if ((v39 & 0x8000u) != 0)
          v39 = -(__int16)v39;
        v40 = (unsigned __int16)v39;
        v41 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a6 + 48))(*a6, a1);
        v42 = v41 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(unsigned __int16 *)a6[1] + 180);
        if ((__int16)(v41 + 360 * ((unsigned __int16)(*(_WORD *)a6[1] + 180) / 0x168u) - (*(_WORD *)a6[1] + 180)) > 180)
          LOWORD(v42) = v42 - 360;
        if ((__int16)v42 < -179)
          LOWORD(v42) = v42 + 360;
        if ((v42 & 0x8000u) != 0)
          v42 = -(__int16)v42;
        if (v40 < (unsigned __int16)v42)
        {
          v43 = *(_OWORD *)a1;
          result = *(__n128 *)(a1 + 16);
          v44 = a2[1];
          *(_OWORD *)a1 = *a2;
          *(_OWORD *)(a1 + 16) = v44;
          *a2 = v43;
          a2[1] = (__int128)result;
        }
      }
    }
  }
  return result;
}

uint64_t std::deque<maps::path_codec::DFSSearchData<GEOPathMatcherRoadKey>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x33];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 80 * (v5 % 0x33);
    v9 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x33] + 80 * ((*(_QWORD *)(a1 + 40) + v5) % 0x33);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)(v8 + 32);
        if (v10)
        {
          *(_QWORD *)(v8 + 40) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 80;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 25;
    goto LABEL_16;
  }
  if (v13 == 2)
  {
    v14 = 51;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t maps::path_codec::p2p_decode_empty_pathlet<GEOPathMatcherRoadKey>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD *v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  __int128 v52;
  _OWORD *v53;
  _OWORD *v54;
  char *v55;
  __int128 v56;
  _QWORD *v57;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  void *v63;
  _BYTE *v64;
  void *v65[9];
  void *v66[2];
  char v67;
  void *__p[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  char v73;
  _BYTE v74[152];
  _QWORD *v75;
  _QWORD *v76;
  char v77;

  v7 = a5 - a4;
  if (a5 == a4)
    return 1;
  v11 = a4;
  if (v7 == 1)
    maps::path_codec::CostFunction::get_dfs_cost_function((uint64_t)v65);
  else
    maps::path_codec::CostFunction::get_default_cost_function((uint64_t)v65);
  v15 = *a3 + 72 * v11;
  v16 = *a3 + 72 * a5;
  LODWORD(v66[0]) = maps::path_codec::compute_search_radius<GEOPathMatcherRoadKey>(*(_DWORD *)(v15 + 40), *(_DWORD *)(v16 + 40), a6);
  if (!maps::path_codec::Logger::m_log_level)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"Max exploration radius: ", 24);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" m.", 3);
    std::string::basic_string[abi:ne180100]<0>(&v75, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
    std::stringbuf::str();
    maps::path_codec::Logger::log_trace((uint64_t)&v75, 46, (uint64_t)__p);
    if (v69 < 0)
      operator delete(__p[0]);
    if (v77 < 0)
      operator delete(v75);
    v70 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v70 + *(_QWORD *)(v70 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v71 = MEMORY[0x1E0DE4FB8] + 16;
    if (v73 < 0)
      operator delete(v72);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x18D764310](v74);
  }
  maps::path_codec::Dijkstra<GEOPathMatcherRoadKey>::run(a2, v15, v16, (uint64_t)v65, v66, (uint64_t **)&v63);
  v18 = v63;
  if (v63 != v64)
  {
    v70 = 0;
    std::vector<unsigned long>::vector(&v75, v7 + 1, &v70);
    v19 = v75;
    *v75 = 0;
    v20 = v63;
    v21 = (v64 - (_BYTE *)v63) >> 5;
    v22 = v76;
    *(v76 - 1) = v21 - 1;
    if (v7 < 2)
    {
LABEL_29:
      if (v19 == v22)
      {
        v8 = 0;
      }
      else
      {
        v59 = a1;
        v61 = v22 - v19 - 1;
        if (v22 - v19 != 1)
        {
          v33 = 0;
          v60 = v19;
          do
          {
            v34 = v11;
            v35 = v33 + v11;
            v36 = *a7;
            v37 = *a7 + 24 * (v33 + v11);
            v38 = *(_OWORD **)v37;
            *(_QWORD *)(v37 + 8) = *(_QWORD *)v37;
            v39 = (void **)(v37 + 8);
            v40 = v19[v33++];
            v41 = v19[v33] + 1;
            if (v40 != v41)
            {
              v42 = (char *)v63 + 32 * v41;
              v43 = (char *)v63 + 32 * v40;
              v44 = (_QWORD *)(v36 + 24 * v35 + 16);
              do
              {
                if ((unint64_t)v38 >= *v44)
                {
                  v46 = ((uint64_t)v38 - *(_QWORD *)v37) >> 5;
                  if ((unint64_t)(v46 + 1) >> 59)
                    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
                  v47 = *v44 - *(_QWORD *)v37;
                  v48 = v47 >> 4;
                  if (v47 >> 4 <= (unint64_t)(v46 + 1))
                    v48 = v46 + 1;
                  if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
                    v49 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v49 = v48;
                  if (v49)
                    v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<zilch::ControlPoint>>((uint64_t)v44, v49);
                  else
                    v50 = 0;
                  v51 = &v50[32 * v46];
                  v52 = *((_OWORD *)v43 + 1);
                  *(_OWORD *)v51 = *(_OWORD *)v43;
                  *((_OWORD *)v51 + 1) = v52;
                  v53 = *v39;
                  v54 = *(_OWORD **)v37;
                  v55 = v51;
                  if (*v39 != *(void **)v37)
                  {
                    do
                    {
                      v56 = *(v53 - 1);
                      *((_OWORD *)v55 - 2) = *(v53 - 2);
                      *((_OWORD *)v55 - 1) = v56;
                      v55 -= 32;
                      v53 -= 2;
                    }
                    while (v53 != v54);
                    v53 = *(_OWORD **)v37;
                  }
                  *(_QWORD *)v37 = v55;
                  v38 = v51 + 32;
                  *v39 = v51 + 32;
                  *v44 = &v50[32 * v49];
                  if (v53)
                    operator delete(v53);
                }
                else
                {
                  v45 = *((_OWORD *)v43 + 1);
                  *v38 = *(_OWORD *)v43;
                  v38[1] = v45;
                  v38 += 2;
                }
                *v39 = v38;
                v43 += 32;
              }
              while (v43 != v42);
            }
            v19 = v60;
            v11 = v34;
          }
          while (v33 != v61);
        }
        if (v11)
          v8 = maps::path_codec::align_pathlets<GEOPathMatcherRoadKey>(v59, (_QWORD **)(*a7 + 24 * v11), (void **)(*a7 + 24 * v11 - 24));
        else
          v8 = 1;
      }
      operator delete(v19);
    }
    else
    {
      v23 = 0;
      v24 = *a3;
      v25 = v75;
      v26 = 1;
      while (v23 < v21)
      {
        v27 = v24 + 72 * (v26 + v11);
        v28 = *(uint64_t **)(v27 + 16);
        v29 = *(uint64_t **)(v27 + 24);
        while (v28 == v29)
        {
LABEL_26:
          if (++v23 == v21)
            goto LABEL_56;
        }
        v30 = v28;
        while (1)
        {
          v31 = *v30;
          if (*v30)
          {
            v32 = v20[4 * v23];
          }
          else
          {
            v31 = v30[1];
            v32 = v20[4 * v23 + 1];
          }
          if (v31 == v32)
            break;
          v30 += 7;
          if (v30 == v29)
            goto LABEL_26;
        }
        v25[v26++] = v23;
        if (v26 == v7)
          goto LABEL_29;
      }
LABEL_56:
      if (maps::path_codec::Logger::m_log_level <= 1u)
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v70, (uint64_t)"No path segment could be matched with any of the segments of point ", 67);
        v57 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)".", 1);
        std::string::basic_string[abi:ne180100]<0>(__p, "/Library/Caches/com.apple.xbs/Sources/GeoServices/libpathcodec/path-codec/include/path-codec/PathletP2PDecoder.h");
        std::stringbuf::str();
        maps::path_codec::Logger::log_debug((uint64_t)__p, 104, (uint64_t)v66);
        if (v67 < 0)
          operator delete(v66[0]);
        if (v69 < 0)
          operator delete(__p[0]);
        v70 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v70 + *(_QWORD *)(v70 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v71 = MEMORY[0x1E0DE4FB8] + 16;
        if (v73 < 0)
          operator delete(v72);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x18D764310](v74);
      }
      if (v75)
      {
        v76 = v75;
        operator delete(v75);
      }
      v8 = 0;
    }
    v18 = v63;
    if (!v63)
      goto LABEL_72;
    goto LABEL_71;
  }
  v8 = 0;
  if (v63)
  {
LABEL_71:
    v64 = v18;
    operator delete(v18);
  }
LABEL_72:
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  return v8;
}

void sub_189543498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  uint64_t v38;
  void *v40;

  if (a31 < 0)
    operator delete(__p);
  if (a37 < 0)
    operator delete(a32);
  std::ostringstream::~ostringstream((uint64_t)&a38);
  v40 = *(void **)(v38 - 112);
  if (v40)
  {
    *(_QWORD *)(v38 - 104) = v40;
    operator delete(v40);
  }
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(a1);
}

BOOL _GEOConfigRangeCheckEnabled()
{
  if (qword_1ECDBC300 != -1)
    dispatch_once(&qword_1ECDBC300, &__block_literal_global_126);
  return (_MergedGlobals_266 & 1) == 0;
}

uint64_t _GEOConfigRemoveValue(int a1, uint64_t a2)
{
  return _setValue(a1, a2, 0, 0, 0);
}

uint64_t _GEOConfigRemoveValueSync(int a1, uint64_t a2)
{
  return _setValue(a1, a2, 0, 0, 1);
}

id _GEOConfigGetDecodedValueWithSource(int a1, uint64_t a2, _QWORD *a3, void *a4)
{
  return _getValue(a1, a2, 1, 0, a3, a4);
}

uint64_t _GEOConfigSetEncodedValue(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t _GEOConfigSetEncodedValueSync(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetStringForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceString(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetString(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncString(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

uint64_t GEOConfigGetBOOLForCountryCode(int a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

uint64_t GEOConfigGetValueWithSourceBOOL(int a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, 0, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "BOOLValue");

  return v4;
}

void GEOConfigSetBOOL(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);

}

void GEOConfigSetSyncBOOL(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);

}

uint64_t GEOConfigGetIntegerForCountryCode(int a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4;
}

uint64_t GEOConfigGetValueWithSourceInteger(int a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, 0, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "integerValue");

  return v4;
}

void GEOConfigSetInteger(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);

}

void GEOConfigSetSyncInteger(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);

}

uint64_t GEOConfigGetUIntegerForCountryCode(int a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntegerValue");

  return v4;
}

uint64_t GEOConfigGetValueWithSourceUInteger(int a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, 0, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedIntegerValue");

  return v4;
}

void GEOConfigSetUInteger(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);

}

void GEOConfigSetSyncUInteger(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);

}

uint64_t GEOConfigGetUint64ForCountryCode(int a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedLongLongValue");

  return v4;
}

uint64_t GEOConfigGetValueWithSourceUint64(int a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  uint64_t v4;

  _getValue(a1, a2, 1, 0, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "unsignedLongLongValue");

  return v4;
}

void GEOConfigSetUint64(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);

}

void GEOConfigSetSyncUint64(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);

}

double GEOConfigGetDoubleForCountryCode(int a1, uint64_t a2, void *a3)
{
  void *v3;
  double v4;
  double v5;

  _getValue(a1, a2, 1, a3, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  return v5;
}

double GEOConfigGetValueWithSourceDouble(int a1, uint64_t a2, _QWORD *a3)
{
  void *v3;
  double v4;
  double v5;

  _getValue(a1, a2, 1, 0, a3, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "doubleValue");
  v5 = v4;

  return v5;
}

void GEOConfigSetDouble(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 0);

}

void GEOConfigSetSyncDouble(int a1, uint64_t a2)
{
  id v4;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  _setValue(a1, a2, v4, 1, 1);

}

id GEOConfigGetArrayForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceArray(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetArray(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncArray(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetSet(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetSetForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceSet(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetSet(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncSet(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetDictionary(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetDictionaryForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceDictionary(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetDictionary(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncDictionary(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetDate(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetDateForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceDate(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetDate(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncDate(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

id GEOConfigGetBytes(int a1, uint64_t a2)
{
  return _getValue(a1, a2, 1, 0, 0, 0);
}

id GEOConfigGetBytesForCountryCode(int a1, uint64_t a2, void *a3)
{
  return _getValue(a1, a2, 1, a3, 0, 0);
}

id GEOConfigGetValueWithSourceBytes(int a1, uint64_t a2, _QWORD *a3)
{
  return _getValue(a1, a2, 1, 0, a3, 0);
}

uint64_t GEOConfigSetBytes(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 0);
}

uint64_t GEOConfigSetSyncBytes(int a1, uint64_t a2, void *a3)
{
  return _setValue(a1, a2, a3, 1, 1);
}

void _GEOConfigKeySetExpiry(int a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  const char *v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[16];

  v7 = a3;
  v8 = a4;
  v9 = v8;
  if (!a1 || !a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_WORD *)buf = 0;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Assertion failed: _GEOConfigKeyIsValid(key)";
LABEL_11:
    _os_log_fault_impl(&dword_1885A9000, v10, OS_LOG_TYPE_FAULT, v11, buf, 2u);
    goto LABEL_6;
  }
  if (!v7 && !objc_msgSend(v8, "length"))
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      goto LABEL_6;
    *(_WORD *)buf = 0;
    v10 = MEMORY[0x1E0C81028];
    v11 = "Assertion failed: date != ((void *)0) || osVersion.length > 0";
    goto LABEL_11;
  }
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = ___GEOConfigKeySetExpiry_block_invoke;
  v12[3] = &unk_1E1C10578;
  v13 = v7;
  v14 = v9;
  GEOConfigGetPropertiesForKey(a1, a2, v12);

LABEL_6:
}

void _GEOConfigKeyClearExpiry(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint8_t v4[16];
  uint64_t v5;
  uint64_t v6;

  if (a1 && a2)
  {
    GEOConfigGetPropertiesForKey(a1, a2, &__block_literal_global_91);
  }
  else
  {
    v5 = v2;
    v6 = v3;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", v4, 2u);
    }
  }
}

uint64_t _GEOConfigKeyGetExpiry(int a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  NSObject *v7;
  const char *v8;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;
  uint8_t buf[8];
  uint8_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  if (!a1 || !a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      return 0;
    *(_WORD *)buf = 0;
    v7 = MEMORY[0x1E0C81028];
    v8 = "Assertion failed: _GEOConfigKeyIsValid(key)";
LABEL_13:
    _os_log_fault_impl(&dword_1885A9000, v7, OS_LOG_TYPE_FAULT, v8, buf, 2u);
    return 0;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      return 0;
    *(_WORD *)buf = 0;
    v7 = MEMORY[0x1E0C81028];
    v8 = "Assertion failed: date != ((void *)0)";
    goto LABEL_13;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      return 0;
    *(_WORD *)buf = 0;
    v7 = MEMORY[0x1E0C81028];
    v8 = "Assertion failed: osVersion != ((void *)0)";
    goto LABEL_13;
  }
  *(_QWORD *)buf = 0;
  v17 = buf;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__64;
  v20 = __Block_byref_object_dispose__64;
  v21 = 0;
  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__64;
  v14 = __Block_byref_object_dispose__64;
  v15 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = ___GEOConfigKeyGetExpiry_block_invoke;
  v9[3] = &unk_1E1C105E0;
  v9[4] = buf;
  v9[5] = &v10;
  GEOConfigGetPropertiesForKey(a1, a2, v9);
  *a3 = objc_retainAutorelease(*((id *)v17 + 5));
  *a4 = objc_retainAutorelease((id)v11[5]);
  _Block_object_dispose(&v10, 8);

  _Block_object_dispose(buf, 8);
  return 0;
}

void sub_18954566C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

BOOL _GEOConfigKeyIsExpired(int a1, uint64_t a2)
{
  _BOOL8 v2;
  _QWORD v4[5];
  uint8_t buf[8];
  uint8_t *v6;
  uint64_t v7;
  char v8;

  if (a1 && a2)
  {
    *(_QWORD *)buf = 0;
    v6 = buf;
    v7 = 0x2020000000;
    v8 = 0;
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = ___GEOConfigKeyIsExpired_block_invoke;
    v4[3] = &unk_1E1C10608;
    v4[4] = buf;
    GEOConfigGetPropertiesForKey(a1, a2, v4);
    v2 = v6[24] != 0;
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _GEOConfigKeyIsValid(key)", buf, 2u);
    }
    return 0;
  }
  return v2;
}

void sub_189545818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void GEOConfigRemoveBlockListener(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  id v11;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = MEMORY[0x1E0C809B0];
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __GEOConfigRemoveBlockListener_block_invoke;
    v5[3] = &unk_1E1C106D0;
    v6 = v1;
    v4 = v5;
    if (qword_1ECDBC348 != -1)
      dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
    v7 = v3;
    v8 = 3221225472;
    v9 = ___withKeyListeners_block_invoke;
    v10 = &unk_1E1C01F48;
    v11 = v4;
    geo_isolate_sync();

  }
}

void GEOConfigRemoveDelegateListenerForKey(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  id v18;

  v5 = a3;
  v6 = MEMORY[0x1E0C809B0];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __GEOConfigRemoveDelegateListenerForKey_block_invoke;
  v10[3] = &unk_1E1C10720;
  v12 = a1;
  v13 = a2;
  v11 = v5;
  v7 = v10;
  v8 = qword_1ECDBC348;
  v9 = v5;
  if (v8 != -1)
    dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
  v14 = v6;
  v15 = 3221225472;
  v16 = ___withKeyListeners_block_invoke;
  v17 = &unk_1E1C01F48;
  v18 = v7;
  geo_isolate_sync();

}

void GEOConfigRemoveDelegateListenerForAllKeys(void *a1)
{
  GEOConfigRemoveDelegateListenerForKey(GEOConfigKey_Invalid, *(uint64_t *)algn_1EDF51968, a1);
}

uint64_t _getMetadataStruct(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint8_t v5[16];

  if (a1 && (v2 = a2) != 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (!*(_BYTE *)v3)
      (*(void (**)(void))(v3 + 8))();
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: key.identifier != 0 && key.metadata != ((void *)0)", v5, 2u);
    }
    return 0;
  }
  return v2;
}

void ___initKeyChangeListeners_block_invoke_4()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  id v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  void *v10;
  id v11;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = MEMORY[0x1E0C809B0];
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___reconnect_block_invoke;
  v5[3] = &unk_1E1C106D0;
  v6 = v0;
  v2 = v5;
  v3 = qword_1ECDBC348;
  v4 = v0;
  if (v3 != -1)
    dispatch_once(&qword_1ECDBC348, &__block_literal_global_113);
  v7 = v1;
  v8 = 3221225472;
  v9 = ___withKeyListeners_block_invoke;
  v10 = &unk_1E1C01F48;
  v11 = v2;
  geo_isolate_sync();

  objc_msgSend(v4, "makeObjectsPerformSelector:", sel_callListener);
}

void ___reconnect_block_invoke(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  _QWORD v28[4];
  id v29;
  id v30;
  _QWORD v31[4];
  id v32;
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v9, "count"))
  {
    v26 = v8;
    v27 = v7;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", objc_msgSend(v9, "count"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    objc_msgSend(v9, "allValues");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v35;
      do
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v35 != v14)
            objc_enumerationMutation(v11);
          v16 = *(_QWORD **)(*((_QWORD *)&v34 + 1) + 8 * v15);
          v17 = (void *)MEMORY[0x1E0CB37E8];
          if (v16)
          {
            v18 = v16[2];
            if (!v18)
            {
              -[_GEOConfigKeyHelper _lookupKeyProperties](*(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v15));
              v18 = v16[2];
            }
          }
          else
          {
            v18 = 0;
          }
          objc_msgSend(v17, "numberWithInteger:", v18);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          -[_GEOConfigKeyHelper keyString](v16);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "setObject:forKeyedSubscript:", v19, v20);

          ++v15;
        }
        while (v13 != v15);
        v21 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
        v13 = v21;
      }
      while (v21);
    }

    _GEOAddChangeListenerForKeys(v10);
    v8 = v26;
    v7 = v27;
  }
  objc_msgSend(MEMORY[0x1E0C99E20], "set");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = MEMORY[0x1E0C809B0];
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = ___reconnect_block_invoke_2;
  v31[3] = &unk_1E1C107D0;
  v24 = v22;
  v32 = v24;
  v33 = *(id *)(a1 + 32);
  objc_msgSend(v7, "enumerateKeysAndObjectsUsingBlock:", v31);
  v28[0] = v23;
  v28[1] = 3221225472;
  v28[2] = ___reconnect_block_invoke_3;
  v28[3] = &unk_1E1C107F8;
  v29 = v24;
  v30 = *(id *)(a1 + 32);
  v25 = v24;
  objc_msgSend(v8, "enumerateKeysAndObjectsUsingBlock:", v28);

}

void ___reconnect_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;

  v6 = a2;
  v5 = a3;
  if (-[_GEOConfigKeyHelper valueChanged](v6))
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);
    objc_msgSend(*(id *)(a1 + 40), "addObjectsFromArray:", v5);
  }

}

void ___reconnect_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = a2;
  v5 = a3;
  if ((objc_msgSend(*(id *)(a1 + 32), "containsObject:", v8) & 1) != 0
    || -[_GEOConfigKeyHelper valueChanged](v8))
  {
    objc_msgSend(v5, "compact");
    v6 = *(void **)(a1 + 40);
    objc_msgSend(v5, "allObjects");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObjectsFromArray:", v7);

  }
}

uint64_t CoreTelephonyLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = CoreTelephonyLibraryCore_frameworkLibrary;
  v6 = CoreTelephonyLibraryCore_frameworkLibrary;
  if (!CoreTelephonyLibraryCore_frameworkLibrary)
  {
    v7 = __const__block__paths_3;
    v8 = *(_OWORD *)&off_1E1C10828;
    v1 = _sl_dlopen();
    v4[3] = v1;
    CoreTelephonyLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895469EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t CoreTelephonyLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = CoreTelephonyLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getCoreTelephonyClientClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getCoreTelephonyClientClass_softClass;
  v7 = getCoreTelephonyClientClass_softClass;
  if (!getCoreTelephonyClientClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getCoreTelephonyClientClass_block_invoke;
    v3[3] = &unk_1E1C03348;
    v3[4] = &v4;
    __getCoreTelephonyClientClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_189546AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getCoreTelephonyClientClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  CoreTelephonyLibrary();
  result = objc_getClass("CoreTelephonyClient");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getCoreTelephonyClientClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)get_CTServerConnectionCreateOnTargetQueueSymbolLoc(v3);
  }
  return result;
}

void *get_CTServerConnectionCreateOnTargetQueueSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr;
  v6 = get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr;
  if (!get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr)
  {
    v1 = (void *)CoreTelephonyLibrary();
    v0 = dlsym(v1, "_CTServerConnectionCreateOnTargetQueue");
    v4[3] = (uint64_t)v0;
    get_CTServerConnectionCreateOnTargetQueueSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_189546BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t geo_CTServerConnectionCreateOnTargetQueue(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  uint64_t (*v9)(uint64_t, uint64_t, id, id);
  uint64_t v10;
  uint64_t v12;

  v7 = a3;
  v8 = a4;
  v9 = (uint64_t (*)(uint64_t, uint64_t, id, id))get_CTServerConnectionCreateOnTargetQueueSymbolLoc();
  if (v9)
  {
    v10 = v9(a1, a2, v7, v8);

    return v10;
  }
  else
  {
    dlerror();
    v12 = abort_report_np();
    return get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc(v12);
  }
}

void *get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr;
  v6 = get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr;
  if (!get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr)
  {
    v1 = (void *)CoreTelephonyLibrary();
    v0 = dlsym(v1, "_CTServerConnectionGetCellularDataIsEnabled");
    v4[3] = (uint64_t)v0;
    get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_189546D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id geo_CTServerConnectionGetCellularDataIsEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t (*CellularDataIsEnabledSymbolLoc)(uint64_t, uint64_t);
  void *v6;
  SEL v7;
  id v8;
  id v9;

  CellularDataIsEnabledSymbolLoc = (uint64_t (*)(uint64_t, uint64_t))get_CTServerConnectionGetCellularDataIsEnabledSymbolLoc();
  if (CellularDataIsEnabledSymbolLoc)
    return (id)CellularDataIsEnabledSymbolLoc(a1, a2);
  dlerror();
  v6 = (void *)abort_report_np();
  return +[GEOBusinessHours prioritizeBusinessHours:compareDate:](v6, v7, v8, v9);
}

void sub_189546FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18954854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose((const void *)(v31 - 144), 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1895487F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189548A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1895492D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18954933C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895493E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189549590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)GEOAltitudeManifest;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_189549668(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1895497A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1895498D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189549A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_189549BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_189549CD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189549D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_189549ECC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189549F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_18954A094(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int,_GEOAltitudeTriggerData>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(_QWORD *)(a1 + 40) = v3;
    operator delete(v3);
  }

  return a1;
}

void _GEOAltitudeTriggerData::~_GEOAltitudeTriggerData(_GEOAltitudeTriggerData *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }

}

uint64_t __Block_byref_object_copy__157(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v2;
  *(_QWORD *)(result + 56) = a2[7];
  a2[7] = 0;
  v5 = a2[8];
  v3 = a2 + 8;
  v4 = v5;
  *(_QWORD *)(result + 64) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 72) = v6;
  *(_DWORD *)(result + 80) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 56);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 64;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__158(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,zilch::HuffmanCode::KeyInfo>>>::~__hash_table(a1 + 48);
}

void sub_18954A314(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRootReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  GEOLPRRegion *v14;
  int *v15;
  uint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  GEOLPRRegion *v35;
  char v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  GEOLPRVehicleType *v44;
  void *v45;
  void *v46;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  void *v54;
  char v55;
  int v56;
  char v57;
  void *v58;
  unsigned int v60;
  char v61;
  char v62;
  char v63;
  void *v64;
  char v65;
  void *v66;
  char v67;
  char v68;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v8])
    {
      case -3:
        v7 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = (GEOLPRRegion *)(v10 | (v11 > 1));
        if (((v14 | v7) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = (uint64_t)v14;
        v67 = (v8 != 0) | v14;
        v68 = (v15 == 0) | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v8;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_103;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_103:
      if ((v16 & 1) != 0)
      {
        v55 = 1;
        goto LABEL_114;
      }
      if (v15)
      {
        while (1)
        {
          v56 = *v15++;
          v57 = 2;
          switch(v56)
          {
            case 0:
              goto LABEL_115;
            case 1:
              goto LABEL_109;
            case 3:
              v57 = 1;
              goto LABEL_109;
            case 4:
              v57 = 4;
LABEL_109:
              *(_BYTE *)(a1 + 52) |= v57;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_115;
    }
    v29 = v22 >> 3;
    v30 = v16;
    if ((v68 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 4)
    {
      if (v30 && (*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if (!PBReaderPlaceMark())
          goto LABEL_110;
        v60 = v16;
        if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_112;
        v61 = 0;
        v63 = 0;
        v16 = 0;
        v66 = 0;
        while (2)
        {
          if (!*(_BYTE *)(v3 + *v18))
          {
            v36 = 0;
            v37 = 0;
            v38 = 0;
            while (1)
            {
              v39 = *v17;
              v40 = *(_QWORD *)(v3 + v39);
              if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
                break;
              v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
              *(_QWORD *)(v3 + v39) = v40 + 1;
              v38 |= (unint64_t)(v41 & 0x7F) << v36;
              if ((v41 & 0x80) == 0)
                goto LABEL_58;
              v36 += 7;
              v42 = v37++ > 8;
              if (v42)
                goto LABEL_66;
            }
            *(_BYTE *)(v3 + *v18) = 1;
LABEL_58:
            if (*(_BYTE *)(v3 + *v18))
              v38 = 0;
            if ((v38 >> 3) != 2)
            {
              if ((v38 >> 3) == 1)
              {
                PBReaderReadString();
                v43 = objc_claimAutoreleasedReturnValue();

                v63 = 1;
                v66 = (void *)v43;
                goto LABEL_67;
              }
LABEL_66:
              if (!PBReaderSkipValueWithTag())
                goto LABEL_113;
              goto LABEL_67;
            }
            if (!PBReaderPlaceMark())
              goto LABEL_113;
            v44 = objc_alloc_init(GEOLPRVehicleType);

            if ((GEOLPRVehicleTypeReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1) & 1) == 0)
            {
LABEL_111:
              v16 = (uint64_t)v44;
              goto LABEL_113;
            }
            PBReaderRecallMark();
            v61 = 1;
            v16 = (uint64_t)v44;
LABEL_67:
            if (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6))
              continue;
          }
          break;
        }
        if ((v63 & 1) == 0 || (v61 & 1) == 0)
          goto LABEL_113;
        v45 = (void *)v16;
        v64 = (void *)v16;
        v46 = v66;
        -[GEOLPRRoot _setNoFlagsVehicleTypesValue:forKey:](a1, v45, v66);
        goto LABEL_98;
      }
      goto LABEL_101;
    }
    if ((_DWORD)v29 == 3)
      break;
    if ((_DWORD)v29 != 1)
    {
      if (!PBReaderSkipValueWithTag())
        goto LABEL_110;
      goto LABEL_102;
    }
    if (!v30 || (*(_BYTE *)(a1 + 52) & 2) != 0)
      goto LABEL_101;
    if ((PBReaderPlaceMark() & 1) == 0)
      goto LABEL_110;
    v35 = (GEOLPRRegion *)v16;
    v16 = objc_alloc_init(GEOLPRRegion);
    if (!GEOLPRRegionReadAllFrom(v16, (void *)v3, v9 & 1))
    {

      v55 = 0;
      LOBYTE(v16) = (_BYTE)v35;
      goto LABEL_114;
    }
    PBReaderRecallMark();
    -[GEOLPRRoot _addNoFlagsRegions:](a1, (void *)v16);

    v16 = (uint64_t)v35;
LABEL_102:
    if ((v67 & 1) == 0)
      goto LABEL_103;
  }
  if (!v30 || (*(_BYTE *)(a1 + 52) & 1) != 0)
  {
LABEL_101:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_110:
      v55 = 0;
      goto LABEL_114;
    }
    goto LABEL_102;
  }
  if (!PBReaderPlaceMark())
    goto LABEL_110;
  v60 = v16;
  if (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6))
  {
    v62 = 0;
    v65 = 0;
    v16 = 0;
    v66 = 0;
    while (2)
    {
      if (!*(_BYTE *)(v3 + *v18))
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (1)
        {
          v50 = *v17;
          v51 = *(_QWORD *)(v3 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(v3 + *v6))
            break;
          v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v51);
          *(_QWORD *)(v3 + v50) = v51 + 1;
          v49 |= (unint64_t)(v52 & 0x7F) << v47;
          if ((v52 & 0x80) == 0)
            goto LABEL_85;
          v47 += 7;
          v42 = v48++ > 8;
          if (v42)
            goto LABEL_93;
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_85:
        if (*(_BYTE *)(v3 + *v18))
          v49 = 0;
        if ((v49 >> 3) != 2)
        {
          if ((v49 >> 3) == 1)
          {
            PBReaderReadString();
            v53 = objc_claimAutoreleasedReturnValue();

            v65 = 1;
            v66 = (void *)v53;
            goto LABEL_94;
          }
LABEL_93:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_113;
          goto LABEL_94;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_113;
        v44 = objc_alloc_init(GEOLPRPowerType);

        if ((GEOLPRPowerTypeReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1) & 1) == 0)
          goto LABEL_111;
        PBReaderRecallMark();
        v62 = 1;
        v16 = (uint64_t)v44;
LABEL_94:
        if (*(_QWORD *)(v3 + *v17) < *(_QWORD *)(v3 + *v6))
          continue;
      }
      break;
    }
    if ((v65 & 1) == 0 || (v62 & 1) == 0)
      goto LABEL_113;
    v54 = (void *)v16;
    v64 = (void *)v16;
    v46 = v66;
    -[GEOLPRRoot _setNoFlagsPowerTypesValue:forKey:](a1, v54, v66);
LABEL_98:
    PBReaderRecallMark();

    v16 = v60;
    goto LABEL_102;
  }
LABEL_112:
  v66 = 0;
  v16 = 0;
LABEL_113:

  v55 = 0;
  LOBYTE(v16) = v60;
LABEL_114:
  *(_BYTE *)(a1 + 52) |= 2u;
  *(_BYTE *)(a1 + 52) |= 1u;
  *(_BYTE *)(a1 + 52) |= 4u;
  if ((v55 & 1) != 0)
  {
LABEL_115:
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v16 & 1) == 0)
      return v3;
    goto LABEL_116;
  }
  v3 = 0;
  if ((v16 & 1) != 0)
  {
LABEL_116:
    v58 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18954AE28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18954B1F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18954BEB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRRootCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  objc_msgSend(a1[2], "allValues");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  objc_msgSend(a1[4], "allValues", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEOLPRRootReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRRootReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRRootReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRRootReadAllFrom_initialTag;
  Specified = GEOLPRRootReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRRootCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18954C27C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRootReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRRootReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18954C2DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRRootIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  unint64_t v16;
  char v17;
  char v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  int v26;
  char v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int v33;
  int v34;
  _BOOL8 v35;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_83;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_83;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 4)
        break;
      if ((_DWORD)v16 == 3)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || *(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
          goto LABEL_84;
        v17 = 0;
        v18 = 0;
        do
        {
          if (a1[*v4])
            break;
          v27 = 0;
          v28 = 0;
          v29 = 0;
          while (1)
          {
            v30 = *v2;
            v31 = *(_QWORD *)&a1[v30];
            if (v31 == -1 || v31 >= *(_QWORD *)&a1[*v3])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v31);
            *(_QWORD *)&a1[v30] = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
              goto LABEL_65;
            v27 += 7;
            v12 = v28++ >= 9;
            if (v12)
            {
              v29 = 0;
              v33 = a1[*v4];
              goto LABEL_67;
            }
          }
          a1[*v4] = 1;
LABEL_65:
          v33 = a1[*v4];
          if (a1[*v4])
            v29 = 0;
LABEL_67:
          if (v33)
            break;
          v34 = v29 & 7;
          if ((v29 >> 3) == 2)
          {
            if (v34 != 2 || !GEOLPRPowerTypeIsValid(a1))
              goto LABEL_84;
            v18 = 1;
          }
          else if ((v29 >> 3) == 1)
          {
            if (v34 != 2)
              goto LABEL_84;
            v17 = 1;
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_84;
          }
          else if (!PBReaderSkipValueWithTag())
          {
            goto LABEL_84;
          }
        }
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
LABEL_78:
        if ((v17 & 1) == 0 || (v18 & 1) == 0)
          goto LABEL_84;
        goto LABEL_80;
      }
      if ((_DWORD)v16 == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOLPRRegionIsValid(a1))
          goto LABEL_84;
LABEL_80:
        PBReaderRecallMark();
        goto LABEL_82;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_84;
LABEL_82:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_83;
    }
    if (v14 != 2 || !PBReaderPlaceMark() || *(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
    {
LABEL_84:
      PBReaderRecallMark();
      return 0;
    }
    v17 = 0;
    v18 = 0;
    while (!a1[*v4])
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
          break;
        v24 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v23 + 1;
        v21 |= (unint64_t)(v24 & 0x7F) << v19;
        if ((v24 & 0x80) == 0)
          goto LABEL_38;
        v19 += 7;
        v12 = v20++ >= 9;
        if (v12)
        {
          v21 = 0;
          v25 = a1[*v4];
          goto LABEL_40;
        }
      }
      a1[*v4] = 1;
LABEL_38:
      v25 = a1[*v4];
      if (a1[*v4])
        v21 = 0;
LABEL_40:
      if (v25)
        break;
      v26 = v21 & 7;
      if ((v21 >> 3) == 2)
      {
        if (v26 != 2 || !GEOLPRVehicleTypeIsValid(a1))
          goto LABEL_84;
        v18 = 1;
      }
      else if ((v21 >> 3) == 1)
      {
        if (v26 != 2)
          goto LABEL_84;
        v17 = 1;
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_84;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_84;
      }
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_78;
    }
    goto LABEL_78;
  }
LABEL_83:
  v35 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v35;
}

void sub_18954CA24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRRootIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(_BYTE *)(a1 + 52);
  if ((v2 & 0xF) == 0)
  {
    if ((*(_BYTE *)(a1 + 52) & 1) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      objc_msgSend(*(id *)(a1 + 16), "allValues");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v17;
LABEL_6:
        v8 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          if ((GEOLPRPowerTypeIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v16 + 1) + 8 * v8)) & 1) != 0)
            goto LABEL_24;
          if (v6 == ++v8)
          {
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v6)
              goto LABEL_6;
            break;
          }
        }
      }

      v2 = *(_BYTE *)(a1 + 52);
    }
    if ((v2 & 4) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    objc_msgSend(*(id *)(a1 + 32), "allValues", 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_25:

      return v3;
    }
    v9 = *(_QWORD *)v13;
LABEL_17:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v9)
        objc_enumerationMutation(v4);
      if ((GEOLPRVehicleTypeIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v10)) & 1) != 0)
        break;
      if (v3 == ++v10)
      {
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
LABEL_24:
    v3 = 1;
    goto LABEL_25;
  }
  return 1;
}

os_unfair_lock_s *GEOLPRRootIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLPRRootIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18954D38C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double GEOMapRectAreaCoveredByMapRects(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  double *v27;
  unint64_t v28;
  double *v29;
  __int128 v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  BOOL v34;
  uint64_t v35;
  double *v36;
  double *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  __int128 v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  double v53;
  double v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  double v69;
  double v70;
  uint64_t v71;
  char v72;
  double v73;
  double v74;
  uint64_t v75;
  double v76;
  double v77;
  __int128 v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  _OWORD *v84;
  unint64_t v85;
  double *v86;
  __int128 v87;
  double v88;
  double *v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  unint64_t v96;
  unint64_t v97;
  double *v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[2];
  _QWORD v102[2];
  int64x2_t v103;
  int64x2_t v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[2];
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  double v112;

  v8 = 0;
  *(double *)&v99 = a3;
  *((double *)&v99 + 1) = a4;
  *(double *)&v100 = a3 + a5;
  *((double *)&v100 + 1) = a4 + a6;
  v9 = 1;
  do
  {
    v10 = *(double *)&v101[v8 - 2];
    v11 = *((double *)&v99 + v8);
    if ((v9 & 1) == 0)
      break;
    v9 = 0;
    v8 = 1;
  }
  while (v10 >= v11);
  v12 = 0.0;
  if (v10 < v11)
    return v12;
  if (a2)
  {
    if (a2 >> 59)
      std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
    v13 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(a2);
    v14 = 0;
    v16 = &v13[4 * v15];
    v17 = v13;
    do
    {
      v18 = (double *)(a1 + 32 * v14);
      v20 = *v18;
      v19 = v18[1];
      v21 = *v18 + v18[2];
      v22 = v19 + v18[3];
      if (v17 >= v16)
      {
        v23 = ((char *)v17 - (char *)v13) >> 5;
        v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 59)
          std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
        if (((char *)v16 - (char *)v13) >> 4 > v24)
          v24 = ((char *)v16 - (char *)v13) >> 4;
        if ((unint64_t)((char *)v16 - (char *)v13) >= 0x7FFFFFFFFFFFFFE0)
          v25 = 0x7FFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(v25);
        else
          v26 = 0;
        v27 = (double *)(v25 + 32 * v23);
        *v27 = v20;
        v27[1] = v19;
        v27[2] = v21;
        v27[3] = v22;
        if (v17 == v13)
        {
          v29 = (double *)(v25 + 32 * v23);
        }
        else
        {
          v28 = v25 + 32 * v23;
          do
          {
            v29 = (double *)(v28 - 32);
            v30 = *((_OWORD *)v17 - 1);
            *(_OWORD *)(v28 - 32) = *((_OWORD *)v17 - 2);
            *(_OWORD *)(v28 - 16) = v30;
            v17 -= 4;
            v28 -= 32;
          }
          while (v17 != v13);
        }
        v16 = (double *)(v25 + 32 * v26);
        v17 = v27 + 4;
        if (v13)
          operator delete(v13);
        v13 = v29;
      }
      else
      {
        *v17 = v20;
        v17[1] = v19;
        v17[2] = v21;
        v17[3] = v22;
        v17 += 4;
      }
      ++v14;
    }
    while (v14 != a2);
  }
  else
  {
    v13 = 0;
    v17 = 0;
  }
  v108 = 0u;
  memset(v107, 0, sizeof(v107));
  std::deque<gm::Box<double,2>>::__add_back_capacity(v107);
  v31 = *((_QWORD *)&v108 + 1);
  v32 = (_OWORD *)(*(_QWORD *)(*((_QWORD *)&v107[0] + 1)
                             + ((((_QWORD)v108 + *((_QWORD *)&v108 + 1)) >> 4) & 0xFFFFFFFFFFFFFF8))
                 + 32 * ((v108 + *((_QWORD *)&v108 + 1)) & 0x7F));
  v33 = v100;
  *v32 = v99;
  v32[1] = v33;
  v34 = __CFADD__(v31, 1);
  v35 = v31 + 1;
  *((_QWORD *)&v108 + 1) = v35;
  if (v34)
  {
    std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)v107);
    v36 = 0;
  }
  else
  {
    v36 = 0;
    v37 = 0;
    v38 = ((char *)v17 - (char *)v13) >> 5;
    if (v38 <= 1)
      v38 = 1;
    v97 = v38;
    v96 = 0;
    do
    {
      v98 = v36;
      v39 = *((_QWORD *)&v107[0] + 1);
      v40 = v108;
      v41 = (__int128 *)(*(_QWORD *)(*((_QWORD *)&v107[0] + 1) + (((unint64_t)v108 >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * (v108 & 0x7F));
      v42 = v41[1];
      v105 = *v41;
      v106 = v42;
      *(_QWORD *)&v108 = v108 + 1;
      *((_QWORD *)&v108 + 1) = v35 - 1;
      if ((unint64_t)v108 >= 0x100)
      {
        operator delete(**((void ***)&v107[0] + 1));
        *((_QWORD *)&v107[0] + 1) = v39 + 8;
        *(_QWORD *)&v108 = v40 - 127;
      }
      v103 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
      v104 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      if (v17 == v13)
      {
        v44 = 1.79769313e308;
        v45 = -1.79769313e308;
        v36 = v98;
      }
      else
      {
        v43 = 0;
        v44 = 1.79769313e308;
        v45 = -1.79769313e308;
        v36 = v98;
        do
        {
          v46 = 0;
          v47 = (char *)&v13[4 * v43];
          v48 = v47 + 16;
          v49 = 1;
          while (*((double *)&v105 + v46) >= *(double *)&v47[8 * v46]
               && *((double *)&v107[-1] + v46) <= *(double *)&v48[8 * v46])
          {
            v50 = v49;
            v49 = 0;
            v46 = 1;
            if ((v50 & 1) == 0)
              goto LABEL_100;
          }
          v51 = 0;
          v52 = 1;
          do
          {
            v53 = *(double *)&v104.i64[v51];
            v54 = *(double *)&v103.i64[v51];
            if ((v52 & 1) == 0)
              break;
            v52 = 0;
            v51 = 1;
          }
          while (v53 >= v54);
          if (v53 < v54)
          {
            v55 = 0;
            v56 = 1;
            do
            {
              if (*(double *)&v48[8 * v55] <= *((double *)&v105 + v55)
                || *(double *)&v47[8 * v55] >= *((double *)&v107[-1] + v55))
              {
                *(double *)&v63 = 1.79769313e308;
                *(double *)&v65 = -1.79769313e308;
                v66 = 0xFFEFFFFFFFFFFFFFLL;
                v64 = 0x7FEFFFFFFFFFFFFFLL;
                goto LABEL_61;
              }
              v57 = v56;
              v56 = 0;
              v55 = 1;
            }
            while ((v57 & 1) != 0);
            v58 = 0;
            v59 = 1;
            do
            {
              v60 = v59;
              v61 = *(double *)&v47[8 * v58];
              if (v61 < *((double *)&v105 + v58))
                v61 = *((double *)&v105 + v58);
              *((double *)&v109 + v58) = v61;
              v62 = *((double *)&v107[-1] + v58);
              if (v62 >= *(double *)&v48[8 * v58])
                v62 = *(double *)&v48[8 * v58];
              *((double *)&v111 + v58) = v62;
              v58 = 1;
              v59 = 0;
            }
            while ((v60 & 1) != 0);
            v64 = v109;
            v63 = v110;
            v66 = v111;
            *(double *)&v65 = v112;
LABEL_61:
            v67 = 0;
            v101[0] = v64;
            v101[1] = v63;
            v68 = 1;
            v102[0] = v66;
            v102[1] = v65;
            do
            {
              v69 = *(double *)&v102[v67];
              v70 = *(double *)&v101[v67];
              if ((v68 & 1) == 0)
                break;
              v68 = 0;
              v67 = 1;
            }
            while (v69 >= v70);
            if (v69 >= v70)
            {
              v103.i64[0] = v64;
              v103.i64[1] = v63;
              v45 = *(double *)&v65;
              v44 = *(double *)&v63;
              v104.i64[0] = v66;
              v104.i64[1] = v65;
            }
          }
          ++v43;
        }
        while (v43 != v97);
      }
      v71 = 0;
      v72 = 1;
      do
      {
        v73 = *(double *)&v104.i64[v71];
        v74 = *(double *)&v103.i64[v71];
        if ((v72 & 1) == 0)
          break;
        v72 = 0;
        v71 = 1;
      }
      while (v73 >= v74);
      if (v73 < v74)
      {
        if ((unint64_t)v37 >= v96)
        {
          v79 = ((char *)v37 - (char *)v36) >> 5;
          v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 59)
            std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v96 - (_QWORD)v36) >> 4 > v80)
            v80 = (uint64_t)(v96 - (_QWORD)v36) >> 4;
          if (v96 - (unint64_t)v36 >= 0x7FFFFFFFFFFFFFE0)
            v81 = 0x7FFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          if (v81)
            v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<geo::TransitEdgePiece>>(v81);
          else
            v82 = 0;
          v83 = v106;
          v84 = (_OWORD *)(v81 + 32 * v79);
          *v84 = v105;
          v84[1] = v83;
          if (v37 == v36)
          {
            v86 = (double *)(v81 + 32 * v79);
          }
          else
          {
            v85 = v81 + 32 * v79;
            do
            {
              v86 = (double *)(v85 - 32);
              v87 = *((_OWORD *)v37 - 1);
              *(_OWORD *)(v85 - 32) = *((_OWORD *)v37 - 2);
              *(_OWORD *)(v85 - 16) = v87;
              v37 -= 4;
              v85 -= 32;
            }
            while (v37 != v36);
          }
          v96 = v81 + 32 * v82;
          v37 = (double *)(v84 + 2);
          if (v36)
            operator delete(v36);
          v36 = v86;
        }
        else
        {
          v78 = v106;
          *(_OWORD *)v37 = v105;
          *((_OWORD *)v37 + 1) = v78;
          v37 += 4;
        }
      }
      else
      {
        v75 = *((uint64_t *)&v105 + 1);
        v76 = *(double *)v103.i64;
        if (v44 > *((double *)&v105 + 1))
        {
          v109 = v103.i64[0];
          v110 = *((uint64_t *)&v105 + 1);
          v111 = v104.i64[0];
          v112 = v44;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        v77 = *((double *)&v106 + 1);
        if (v45 < *((double *)&v106 + 1))
        {
          v109 = *(_QWORD *)&v76;
          *(double *)&v110 = v45;
          v111 = v104.i64[0];
          v112 = *((double *)&v106 + 1);
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        if (v76 > *(double *)&v105)
        {
          v109 = v105;
          v110 = v75;
          v111 = *(_QWORD *)&v76;
          v112 = v77;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
        if (*(double *)v104.i64 < *(double *)&v106)
        {
          v109 = v104.i64[0];
          v110 = v75;
          v111 = v106;
          v112 = v77;
          std::deque<gm::Box<double,2>>::push_back(v107, (uint64_t)&v109);
        }
      }
LABEL_100:
      v35 = *((_QWORD *)&v108 + 1);
    }
    while (*((_QWORD *)&v108 + 1));
    std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)v107);
    if (v36 != v37)
    {
      v88 = 0.0;
      v89 = v36;
      do
      {
        v90 = v89[2];
        v91 = v89[3];
        v92 = *v89;
        v93 = v89[1];
        v89 += 4;
        v88 = v88 + (v90 - v92) * (v91 - v93);
      }
      while (v89 != v37);
      goto LABEL_106;
    }
  }
  v88 = 0.0;
LABEL_106:
  v94 = (*(double *)&v100 - *(double *)&v99) * (*((double *)&v100 + 1) - *((double *)&v99 + 1));
  if (v36)
    operator delete(v36);
  v12 = v94 - v88;
  if (v13)
    operator delete(v13);
  return v12;
}

void sub_18954DE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;

  std::deque<gm::Box<double,2>>::~deque[abi:ne180100]((uint64_t)&a29);
  if (v29)
    operator delete(v29);
  _Unwind_Resume(a1);
}

double GEOMapRectFractionCoveredByMapRects(uint64_t a1, unint64_t a2, double a3, double a4, double a5, double a6)
{
  double v6;
  unint64_t v7;
  double v13;
  double *i;
  uint8_t v18[16];

  v6 = 0.0;
  if (a2)
  {
    v7 = a2;
    if (a5 * a6 == 0.0)
    {
      v13 = fabs(a6);
      if ((fabs(a5) >= 0.00000011920929 || v13 >= 0.00000011920929)
        && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)v18 = 0;
        _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _EQLF_(mapRect.size.width, 0, FLT_EPSILON) && _EQLF_(mapRect.size.height, 0, FLT_EPSILON)", v18, 2u);
      }
      for (i = (double *)(a1 + 16); !GEOMapRectContainsRect(*(i - 2), *(i - 1), *i, i[1], a3, a4, a5, a6); i += 4)
      {
        if (!--v7)
          return v6;
      }
      return 1.0;
    }
    else
    {
      return GEOMapRectAreaCoveredByMapRects(a1, a2, a3, a4, a5, a6) / (a5 * a6);
    }
  }
  return v6;
}

void std::deque<gm::Box<double,2>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t i;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v38 = 1;
      else
        v38 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v38);
      v40 = &v39[8 * (v38 >> 2)];
      v42 = &v39[8 * v41];
      v43 = (uint64_t *)a1[1];
      v6 = v40;
      v44 = a1[2] - (_QWORD)v43;
      if (v44)
      {
        v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        v45 = 8 * (v44 >> 3);
        v46 = &v39[8 * (v38 >> 2)];
        do
        {
          v47 = *v43++;
          *(_QWORD *)v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0x1000uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v49 = 1;
      else
        v49 = (v19 - v22) >> 2;
      v50 = 2 * v49;
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v49);
      v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      v53 = (uint64_t *)a1[1];
      v54 = v22;
      v55 = a1[2] - (_QWORD)v53;
      if (v55)
      {
        v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        v56 = 8 * (v55 >> 3);
        v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v58 = *v53++;
          *(_QWORD *)v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v82 = 1;
      else
        v82 = (uint64_t)&v6[-*a1] >> 2;
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v82);
      v40 = &v39[8 * (v82 >> 2)];
      v42 = &v39[8 * v83];
      v84 = (uint64_t *)a1[1];
      v6 = v40;
      v85 = a1[2] - (_QWORD)v84;
      if (v85)
      {
        v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        v86 = 8 * (v85 >> 3);
        v87 = &v39[8 * (v82 >> 2)];
        do
        {
          v88 = *v84++;
          *(_QWORD *)v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v28);
  v31 = v30;
  v32 = operator new(0x1000uLL);
  v33 = &v29[8 * v23];
  v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      v60 = v35 >> 2;
      if (v20 == v22)
        v61 = 1;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v61);
      v33 = &v62[8 * (v61 >> 2)];
      v34 = &v62[8 * v63];
      if (v29)
        operator delete(v29);
      v29 = v62;
    }
    else
    {
      v36 = v35 >> 3;
      if (v36 >= -1)
        v37 = v36 + 1;
      else
        v37 = v36 + 2;
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(_QWORD *)v33 = v32;
  v64 = v33 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29)
          v70 = 1;
        else
          v70 = (v34 - v29) >> 2;
        v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<google::protobuf::Message>>>(v70);
        v73 = v71;
        v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        v75 = v64 - v29;
        v74 = v64 == v29;
        v64 = v33;
        if (!v74)
        {
          v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          v76 = 8 * (v75 >> 3);
          v77 = v33;
          v78 = (uint64_t *)v29;
          do
          {
            v79 = *v78++;
            *(_QWORD *)v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        v34 = &v71[8 * v72];
        if (v29)
          operator delete(v29);
        v29 = v73;
      }
      else
      {
        v66 = (v34 - v64) >> 3;
        if (v66 >= -1)
          v67 = v66 + 1;
        else
          v67 = v66 + 2;
        v68 = v67 >> 1;
        v33 = &v29[8 * (v67 >> 1)];
        v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          v69 = v64;
        }
        v64 = &v69[8 * v68];
      }
    }
    v80 = *(_QWORD *)(i - 8);
    *((_QWORD *)v33 - 1) = v80;
    v33 -= 8;
  }
  v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
    operator delete(v81);
}

void sub_18954E3BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  if (v1)
    operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::deque<gm::Box<double,2>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<gm::Box<double,2>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

uint64_t std::deque<gm::Box<double,2>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 128;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t MapsFeaturesConfig_GetUserDefaultStringKeysForWatchSync()
{
  return MEMORY[0x1E0C9AA60];
}

void *MapsFeaturesConfig_GetConfigStoreStringKeysForWatchSync()
{
  return &unk_1E1E856A8;
}

void *_getConfigStoreStringKeysForStateCapture_0()
{
  return &unk_1E1E856C0;
}

void sub_18954E914(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  BOOL v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  unint64_t v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  void *v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  BOOL v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  int v54;
  int v55;
  char v56;
  void *v57;
  BOOL v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  if (v12)
    v16 = 1;
  else
    v16 = v14 == 0;
  v59 = v16;
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_86;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v15;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v25 = v20++ >= 9;
      if (v25)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v26 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_86:
      if (v13)
      {
        v53 = 1;
        goto LABEL_97;
      }
      if (!v14)
      {
LABEL_98:
        v3 = *(_BYTE *)(v3 + *v17) == 0;
        if (!v13)
          return v3;
LABEL_99:
        v57 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      }
      while (1)
      {
        v55 = *v14++;
        v54 = v55;
        if (v55 == 1)
          break;
        if (v54 == 3)
        {
          v56 = 4;
LABEL_95:
          *(_BYTE *)(a1 + 48) |= v56;
        }
        else if (!v54)
        {
          goto LABEL_98;
        }
      }
      v56 = 8;
      goto LABEL_95;
    }
    v28 = v21 >> 3;
    v29 = v13;
    if (!v59)
    {
      v30 = v14;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if (!v29)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 48) & 8) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 24;
          goto LABEL_57;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_96;
        v51 = 16 * *(_BYTE *)(a1 + 48);
        goto LABEL_81;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_66;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          v39 = *v15;
          v40 = *(_QWORD *)(v3 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v17) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v40);
            *(_QWORD *)(v3 + v39) = v40 + 1;
            v38 |= (unint64_t)(v41 & 0x7F) << v36;
            if (v41 < 0)
            {
              v36 += 7;
              v25 = v37++ >= 9;
              if (v25)
              {
                v38 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v17))
          v38 = 0;
LABEL_71:
        v49 = v38 != 0;
        v50 = 44;
        goto LABEL_76;
      case 3:
        if (!v29)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 48) & 4) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 16;
LABEL_57:
          v42 = *(void **)(a1 + v35);
          *(_QWORD *)(a1 + v35) = v34;

          --v9;
          goto LABEL_82;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v51 = 32 * *(_BYTE *)(a1 + 48);
LABEL_81:
          v9 += v51 >> 7;
LABEL_82:
          if (v9)
            v52 = 1;
          else
            v52 = v13;
          if ((v52 & 1) == 0)
            goto LABEL_86;
          continue;
        }
LABEL_96:
        v53 = 0;
LABEL_97:
        *(_BYTE *)(a1 + 48) |= 8u;
        *(_BYTE *)(a1 + 48) |= 4u;
        if ((v53 & 1) != 0)
          goto LABEL_98;
        v3 = 0;
        if (v13)
          goto LABEL_99;
        return v3;
      case 4:
        if ((v8 & 1) != 0)
        {
          v43 = 0;
          v44 = 0;
          v45 = 0;
          *(_BYTE *)(a1 + 48) |= 2u;
          while (1)
          {
            v46 = *v15;
            v47 = *(_QWORD *)(v3 + v46);
            if (v47 == -1 || v47 >= *(_QWORD *)(v3 + *v6))
              break;
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v47);
            *(_QWORD *)(v3 + v46) = v47 + 1;
            v45 |= (unint64_t)(v48 & 0x7F) << v43;
            if ((v48 & 0x80) == 0)
              goto LABEL_73;
            v43 += 7;
            v25 = v44++ >= 9;
            if (v25)
            {
              v45 = 0;
              goto LABEL_75;
            }
          }
          *(_BYTE *)(v3 + *v17) = 1;
LABEL_73:
          if (*(_BYTE *)(v3 + *v17))
            v45 = 0;
LABEL_75:
          v49 = v45 != 0;
          v50 = 45;
LABEL_76:
          *(_BYTE *)(a1 + v50) = v49;
        }
        else
        {
LABEL_66:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_96;
        }
        goto LABEL_82;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_96;
        goto LABEL_82;
    }
  }
}

void sub_18954F024(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18954F5B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPPhotoAttributionPreferencesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPPhotoAttributionPreferencesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPPhotoAttributionPreferencesReadAllFrom_initialTag;
  Specified = GEORPPhotoAttributionPreferencesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_18954F740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPhotoAttributionPreferencesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18954F7A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2)
            goto LABEL_44;
          goto LABEL_30;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_44;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_40;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_41;
          }
        case 3u:
          if (v14 == 2)
            goto LABEL_30;
          goto LABEL_44;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_44;
          v22 = 0;
          break;
        default:
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_44:
          v27 = 0;
          goto LABEL_43;
      }
      while (1)
      {
        v23 = *v2;
        v24 = *(_QWORD *)&a1[v23];
        if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
          break;
        v25 = v24 + 1;
        v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
        *(_QWORD *)&a1[v23] = v25;
        if (v26 < 0)
        {
          v21 = v22++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_41;
      }
LABEL_40:
      a1[*v4] = 1;
LABEL_41:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
LABEL_43:
  PBReaderRecallMark();
  return v27;
}

void sub_18954FBE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 48) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_18954FF30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  GEORPPhotoAttributionPreferences *v19;
  void *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 3)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v19 = objc_alloc_init(GEORPPhotoAttributionPreferences);
          if (!GEORPPhotoAttributionPreferencesReadAllFrom((uint64_t)v19, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          v20 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v19;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_18955067C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPhotoAttributionPreferencesUpdateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895506DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 3)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPPhotoAttributionPreferencesIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

void sub_189550CA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  BOOL v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  int *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  GEORPPhotoAttributionPreferences *v44;
  void *v45;
  int v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int v54;
  char v55;
  int v56;
  int v57;
  void *v58;
  BOOL v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(_BYTE *)(a1 + 60) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v8])
    {
      case -3:
        v7 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = (v10 & 1 | v11) != 0;
        if (((v10 & 1 | v11) != 0) | v7 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_83;
        if (v15)
          v19 = (v10 & 1 | v11) != 0;
        else
          v19 = 1;
        v60 = v19;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v8;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  do
  {
    if (*(_BYTE *)(v3 + *v17))
      break;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v16;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_26:
    v28 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v23 = 0;
LABEL_28:
    v29 = v23 & 7;
    if (v28 || v29 == 4)
      break;
    v31 = v23 >> 3;
    v32 = v14;
    if (!v60)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 2)
    {
      if (!v32)
        goto LABEL_63;
      if ((*(_BYTE *)(a1 + v18[693]) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_98:
          v55 = 0;
LABEL_100:
          v17 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_85;
        }
        v8 += *(unsigned __int8 *)(a1 + v18[693]) << 30 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_98;
        v44 = objc_alloc_init(GEORPPhotoAttributionPreferences);
        if (!GEORPPhotoAttributionPreferencesReadAllFrom((uint64_t)v44, (void *)v3, v9 & 1))
        {

          v55 = 0;
          v18 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
          goto LABEL_100;
        }
        PBReaderRecallMark();
        v45 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v44;

        --v8;
        v18 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      }
    }
    else
    {
      if ((_DWORD)v31 != 1)
      {
        v46 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v46)
          goto LABEL_97;
        goto LABEL_78;
      }
      if (!v32 || (*(_BYTE *)(a1 + v18[693]) & 1) != 0)
      {
LABEL_63:
        v47 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if ((v47 & 1) == 0)
        {
LABEL_97:
          v55 = 0;
          goto LABEL_85;
        }
        goto LABEL_78;
      }
      if (v29 == 2)
      {
        if (!PBReaderPlaceMark())
          goto LABEL_98;
        while (1)
        {
          v37 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v38 = 0;
          v39 = 0;
          v40 = 0;
          while (1)
          {
            v41 = *v16;
            v42 = *(_QWORD *)(v3 + v41);
            if (v42 == -1 || v42 >= *(_QWORD *)(v3 + *v6))
              break;
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v42);
            *(_QWORD *)(v3 + v41) = v42 + 1;
            v40 |= (unint64_t)(v43 & 0x7F) << v38;
            if (v43 < 0)
            {
              v38 += 7;
              v27 = v39++ >= 9;
              if (!v27)
                continue;
            }
            goto LABEL_55;
          }
          *(_BYTE *)(v3 + *v37) = 1;
LABEL_55:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        while (1)
        {
          v51 = *v16;
          v52 = *(_QWORD *)(v3 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(v3 + *v6))
            break;
          v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 1;
          v50 |= (unint64_t)(v53 & 0x7F) << v48;
          if (v53 < 0)
          {
            v48 += 7;
            v27 = v49++ >= 9;
            if (!v27)
              continue;
          }
          goto LABEL_76;
        }
        *(_BYTE *)(v3 + *v17) = 1;
LABEL_76:
        PBRepeatedInt32Add();
      }
    }
    v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
    if (v8)
      v54 = 1;
    else
      v54 = v14;
  }
  while (v54 == 1 && *(_QWORD *)(v3 + *v16) < *(_QWORD *)(v3 + *v6));
LABEL_83:
  if (!v14)
  {
    if (v15)
    {
      do
      {
        while (1)
        {
          v57 = *v15++;
          v56 = v57;
          if (v57 != 1 && v56 != 2)
            break;
          *(_BYTE *)(a1 + v18[693]) |= v56;
        }
      }
      while (v56);
    }
    goto LABEL_94;
  }
  v55 = 1;
LABEL_85:
  *(_BYTE *)(a1 + v18[693]) |= 1u;
  *(_BYTE *)(a1 + v18[693]) |= 2u;
  if ((v55 & 1) == 0)
  {
    v3 = 0;
    if (!v14)
      return v3;
    goto LABEL_95;
  }
LABEL_94:
  v3 = *(_BYTE *)(v3 + *v17) == 0;
  if (!v14)
    return v3;
LABEL_95:
  v58 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_189551670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189551C80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom_initialTag;
  Specified = GEORPPhotoAttributionPreferencesUpdateResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189551E20(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPPhotoAttributionPreferencesUpdateResultReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPPhotoAttributionPreferencesUpdateResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189551E80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPPhotoAttributionPreferencesUpdateResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v26;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_45;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_45;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_47;
LABEL_34:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v21 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v22 = *v2;
              v23 = *(_QWORD *)&a1[v22];
              if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
                break;
              v24 = v23 + 1;
              v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
              *(_QWORD *)&a1[v22] = v24;
              if (v25 < 0)
              {
                v12 = v21++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_34;
            }
            a1[*v4] = 1;
          }
LABEL_30:
          PBReaderRecallMark();
          goto LABEL_44;
        }
        if ((v8 & 7) != 0)
          goto LABEL_47;
        while (1)
        {
          v16 = *v2;
          v17 = *(_QWORD *)&a1[v16];
          if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
            break;
          v18 = v17 + 1;
          v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
          *(_QWORD *)&a1[v16] = v18;
          if (v19 < 0)
          {
            v20 = v14++;
            if (v20 <= 8)
              continue;
          }
          goto LABEL_44;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_47;
      }
LABEL_44:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_45;
    }
    if (v14 != 2 || !PBReaderPlaceMark() || !GEORPPhotoAttributionPreferencesIsValid(a1))
    {
LABEL_47:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_30;
  }
LABEL_45:
  v26 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v26;
}

void sub_1895522D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEORPPhotoAttributionPreferencesUpdateResultIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 60) & 5) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
    return GEORPPhotoAttributionPreferencesIsDirty(*(_QWORD *)(a1 + 40));
  return 0;
}

os_unfair_lock_s *GEORPPhotoAttributionPreferencesUpdateResultIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEORPPhotoAttributionPreferencesUpdateResultIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1895525E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v19 += 7;
            v14 = v20++ >= 9;
            if (v14)
            {
              v21 = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            v21 = 0;
LABEL_34:
          *(_BYTE *)(a1 + 16) = v21 != 0;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_189552D78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPThirdPartyPhotoSharingPreferenceReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189552DD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_37;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            break;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_34;
        }
        a1[*v4] = 1;
      }
      else if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_37:
          v22 = 0;
          goto LABEL_36;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_37;
      }
LABEL_34:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_36:
  PBReaderRecallMark();
  return v22;
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  GEORPThirdPartyPhotoSharingPreference *v17;
  void *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v17 = objc_alloc_init(GEORPThirdPartyPhotoSharingPreference);
          if (!GEORPThirdPartyPhotoSharingPreferenceReadAllFrom((uint64_t)v17, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_1895537A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPThirdPartyPhotoSharingPreferenceUpdateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189553808(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPThirdPartyPhotoSharingPreferenceIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

void sub_189553DD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  BOOL v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  int v26;
  unint64_t v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  GEORPThirdPartyPhotoSharingPreference *v40;
  void *v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  int v50;
  int v51;
  void *v52;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1) + (*(_BYTE *)(a1 + 60) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(v3 + *v6))
  {
    if (v13)
      v16 = (v9 & 1 | v10) != 0;
    else
      v16 = 1;
    v54 = v16;
    v17 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(v3 + *v15))
        goto LABEL_83;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      while (1)
      {
        v21 = *v14;
        v22 = *(_QWORD *)(v3 + v21);
        if (v22 == -1 || v22 >= *(_QWORD *)(v3 + *v6))
          break;
        v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
        *(_QWORD *)(v3 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0)
          goto LABEL_27;
        v18 += 7;
        v24 = v19++ >= 9;
        if (v24)
        {
          v20 = 0;
          v25 = *(unsigned __int8 *)(v3 + *v15);
          goto LABEL_29;
        }
      }
      *(_BYTE *)(v3 + *v15) = 1;
LABEL_27:
      v25 = *(unsigned __int8 *)(v3 + *v15);
      if (*(_BYTE *)(v3 + *v15))
        v20 = 0;
LABEL_29:
      v26 = v20 & 7;
      if (v25 || v26 == 4)
        goto LABEL_83;
      v28 = v20 >> 3;
      v29 = v12;
      if (!v54)
      {
        v30 = v13;
        do
        {
          v32 = *v30++;
          v31 = v32;
          v29 = v32 != 0;
          if (v32)
            v33 = v31 == (_DWORD)v28;
          else
            v33 = 1;
        }
        while (!v33);
      }
      if ((_DWORD)v28 != 2)
        break;
      if (!v29)
        goto LABEL_64;
      if ((*(_BYTE *)(a1 + 60) & 2) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_97:
          v49 = 0;
          goto LABEL_85;
        }
        v8 += *(unsigned __int8 *)(a1 + 60) << 30 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_97;
        v40 = objc_alloc_init(GEORPThirdPartyPhotoSharingPreference);
        if (!GEORPThirdPartyPhotoSharingPreferenceReadAllFrom((uint64_t)v40, (void *)v3))
        {

          v49 = 0;
          v15 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_85;
        }
        PBReaderRecallMark();
        v41 = *(void **)(a1 + 40);
        *(_QWORD *)(a1 + 40) = v40;

        --v8;
        v15 = (int *)MEMORY[0x1E0D82BC8];
      }
LABEL_65:
      if (v8)
        v42 = 1;
      else
        v42 = v12;
      if (v42 != 1 || *(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
        goto LABEL_83;
    }
    if ((_DWORD)v28 != 1)
    {
      if (!PBReaderSkipValueWithTag())
        goto LABEL_97;
      goto LABEL_65;
    }
    if (v29 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (v26 == 2)
      {
        if (!PBReaderPlaceMark())
          goto LABEL_97;
        while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
        {
          v34 = 0;
          v35 = 0;
          v36 = 0;
          while (1)
          {
            v37 = *v14;
            v38 = *(_QWORD *)(v3 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(v3 + *v6))
              break;
            v39 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v38);
            *(_QWORD *)(v3 + v37) = v38 + 1;
            v36 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              v24 = v35++ >= 9;
              if (!v24)
                continue;
            }
            goto LABEL_56;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_56:
          PBRepeatedInt32Add();
        }
        PBReaderRecallMark();
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        while (1)
        {
          v46 = *v14;
          v47 = *(_QWORD *)(v3 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(v3 + *v6))
            break;
          v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v47);
          *(_QWORD *)(v3 + v46) = v47 + 1;
          v45 |= (unint64_t)(v48 & 0x7F) << v43;
          if (v48 < 0)
          {
            v43 += 7;
            v24 = v44++ >= 9;
            if (!v24)
              continue;
          }
          goto LABEL_82;
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_82:
        PBRepeatedInt32Add();
      }
      goto LABEL_65;
    }
LABEL_64:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_97;
    goto LABEL_65;
  }
LABEL_83:
  if (!v12)
  {
    if (v13)
    {
      do
      {
        while (1)
        {
          v51 = *v13++;
          v50 = v51;
          if (v51 != 1 && v50 != 2)
            break;
          *(_BYTE *)(a1 + 60) |= v50;
        }
      }
      while (v50);
    }
    goto LABEL_94;
  }
  v49 = 1;
LABEL_85:
  *(_BYTE *)(a1 + 60) |= 1u;
  *(_BYTE *)(a1 + 60) |= 2u;
  if ((v49 & 1) != 0)
  {
LABEL_94:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if (v12)
      goto LABEL_95;
    return v3;
  }
  v3 = 0;
  if (!v12)
    return v3;
LABEL_95:
  v52 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_18955472C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189554D34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom_initialTag;
  Specified = GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189554ED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPThirdPartyPhotoSharingPreferenceUpdateResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189554F34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v26;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_45;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_45;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_47;
LABEL_34:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v21 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v22 = *v2;
              v23 = *(_QWORD *)&a1[v22];
              if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
                break;
              v24 = v23 + 1;
              v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
              *(_QWORD *)&a1[v22] = v24;
              if (v25 < 0)
              {
                v12 = v21++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_34;
            }
            a1[*v4] = 1;
          }
LABEL_30:
          PBReaderRecallMark();
          goto LABEL_44;
        }
        if ((v8 & 7) != 0)
          goto LABEL_47;
        while (1)
        {
          v16 = *v2;
          v17 = *(_QWORD *)&a1[v16];
          if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
            break;
          v18 = v17 + 1;
          v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
          *(_QWORD *)&a1[v16] = v18;
          if (v19 < 0)
          {
            v20 = v14++;
            if (v20 <= 8)
              continue;
          }
          goto LABEL_44;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_47;
      }
LABEL_44:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_45;
    }
    if (v14 != 2 || !PBReaderPlaceMark() || !GEORPThirdPartyPhotoSharingPreferenceIsValid(a1))
    {
LABEL_47:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_30;
  }
LABEL_45:
  v26 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v26;
}

void sub_18955539C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPThirdPartyPhotoSharingPreferenceUpdateResultIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = (*(_BYTE *)(a1 + 60) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return v2;
}

void sub_18955565C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOStringForDistanceMeasurement(void *a1, void *a2, uint64_t a3)
{
  return _GEOStringForDistanceMeasurement(a1, a2, a3, 0);
}

id _GEOStringForDistanceMeasurement(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v37;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  v10 = a3 & 8;
  if ((a3 & 0x10) != 0)
    objc_msgSend(v8, "spokenLocale");
  else
    objc_msgSend(v8, "locale");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "locale");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKey:", *MEMORY[0x1E0C997F0]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  +[GEODistanceStringRoundingInfo roundingInfoForDistanceMeasurement:measurementSystem:locale:formatOptions:](GEODistanceStringRoundingInfo, "roundingInfoForDistanceMeasurement:measurementSystem:locale:formatOptions:", v7, v13, v11, a3);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "roundedDistanceMeasurement");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (a4)
    *a4 = objc_retainAutorelease(v15);
  if ((a3 & 8) == 0)
    goto LABEL_8;
  v37 = v9;
  v17 = v7;
  v18 = (void *)objc_opt_new();
  objc_msgSend(v18, "setLocale:", v11);
  objc_msgSend(v14, "roundedDistanceMeasurement");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "unit");
  v20 = v11;
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "measurementByConvertingToUnit:", v21);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = v20;
  v10 = a3 & 8;

  objc_msgSend(v18, "stringFromDistanceMeasurement:roundedDistanceMeasurement:", v22, v16);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  v7 = v17;
  v9 = v37;
  if (!v23)
  {
LABEL_8:
    v24 = a3 & 1;
    v25 = objc_alloc_init(MEMORY[0x1E0CB3760]);
    objc_msgSend(v25, "setLocale:", v11);
    objc_msgSend(v25, "setUnitOptions:", 1);
    objc_msgSend(v25, "setUnitStyle:", v24 ^ 3);
    v26 = objc_msgSend(v14, "minFractionDigits");
    objc_msgSend(v25, "numberFormatter");
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "setMinimumFractionDigits:", v26);

    v28 = objc_msgSend(v14, "maxFractionDigits");
    objc_msgSend(v25, "numberFormatter");
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v29, "setMaximumFractionDigits:", v28);

    objc_msgSend(v25, "numberFormatter");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v30, "setMinimumIntegerDigits:", (v10 >> 3) ^ 1);

    v31 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(v14, "roundingIncrement");
    objc_msgSend(v31, "numberWithDouble:");
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "numberFormatter");
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "setRoundingIncrement:", v32);

    objc_msgSend(v25, "numberFormatter");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "setRoundingMode:", 4);

    objc_msgSend(v25, "stringFromMeasurement:", v16);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v35, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), CFSTR(" "));
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v23;
}

id GEOStringForDistance(uint64_t a1, double a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v4 = objc_alloc(MEMORY[0x1E0CB3758]);
  objc_msgSend(MEMORY[0x1E0CB3AD8], "meters");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithDoubleValue:unit:", v5, a2);

  +[GEOComposedString localizationProvider](GEOComposedString, "localizationProvider");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _GEOStringForDistanceMeasurement(v6, v7, a1, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id GEORoundedMeasurementForDistance(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v7;

  objc_msgSend(MEMORY[0x1E0CB3758], "_geo_distanceMeasurementForMeters:");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  +[GEOComposedString localizationProvider](GEOComposedString, "localizationProvider");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v4 = _GEOStringForDistanceMeasurement(v2, v3, a1, &v7);
  v5 = v7;

  return v5;
}

id GEORoundedDistanceMeasurement(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v6;

  v1 = a1;
  +[GEOComposedString localizationProvider](GEOComposedString, "localizationProvider");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  v3 = _GEOStringForDistanceMeasurement(v1, v2, 0, &v6);
  v4 = v6;

  return v4;
}

void sub_189556A70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189556C4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6460;

  return a1;
}

void sub_189556E00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZN12_GLOBAL__N_19isolationEv_block_invoke()
{
  uint64_t v0;
  void *v1;

  v0 = geo_dispatch_queue_create();
  v1 = (void *)qword_1ECDBC3B0;
  qword_1ECDBC3B0 = v0;

}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0)
    v3 = (a3 >> 5) + 1;
  else
    v3 = a3 >> 5;
  v4 = a3 / v3;
  *(_QWORD *)(result + 16) = a3 / v3;
  *(_QWORD *)(result + 24) = v3;
  v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40)
    v5 = 0;
  *(_QWORD *)(result + 40) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    v4 = a3 / v3;
    *(_QWORD *)(result + 16) = a3 / v3;
    *(_QWORD *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      *(_QWORD *)(result + 32) = v3 + v4 * v3 - a3;
      *(_QWORD *)(result + 40) = 0;
      LODWORD(v4) = 64;
      goto LABEL_16;
    }
    *(_QWORD *)(result + 40) = (-1 << v4) & 0x100000000;
  }
  *(_QWORD *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 >= 0x3F)
  {
LABEL_16:
    *(_QWORD *)(result + 48) = 0;
    v8 = -(int)v4;
    v7 = -1;
    *(_DWORD *)(result + 56) = 0xFFFFFFFF >> v8;
    goto LABEL_17;
  }
  *(_QWORD *)(result + 48) = 0x80000000uLL >> v4 << (v4 + 1);
  v6 = 0xFFFFFFFF >> -(char)v4;
  if (!v4)
    v6 = 0;
  *(_DWORD *)(result + 56) = v6;
  if (v4 >= 0x1F)
    v7 = -1;
  else
    v7 = 0xFFFFFFFF >> ~(_BYTE)v4;
LABEL_17:
  *(_DWORD *)(result + 60) = v7;
  return result;
}

void std::vector<`anonymous namespace'::RequesterTileKeys>::__base_destruct_at_end[abi:ne180100](uint64_t a1, id *a2)
{
  id *v4;
  id *v5;

  v4 = *(id **)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 3;

      objc_destroyWeak(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::allocator_traits<std::allocator<`anonymous namespace'::RequesterTileKeys>>::construct[abi:ne180100]<`anonymous namespace'::RequesterTileKeys,GEOSimpleTileRequester * {__strong}&,GEOTileKeyList * {__strong}&,GEOTileKeyMap<NSNumber *> * {__strong}&,void>(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;

  v7 = a3;
  v8 = a4;
  v10 = v7;
  v9 = v8;
  objc_initWeak((id *)a1, a2);
  *(_QWORD *)(a1 + 8) = -[GEOPrioritizedTileKeys initWithKeys:priorities:]([GEOPrioritizedTileKeys alloc], "initWithKeys:priorities:", v10, v9);
  *(_QWORD *)(a1 + 16) = 0;

}

void sub_189557030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  id *v11;

  objc_destroyWeak(v11);

  _Unwind_Resume(a1);
}

void geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>::~_retain_ptr(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E1BF6460;

  JUMPOUT(0x18D76437CLL);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,GEOTileKeyList * {__strong}>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {

    *(_QWORD *)(a2 + 16) = &off_1E1BF6460;
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<geo::_retain_ptr<GEOSimpleTileRequester * {__strong},geo::_retain_objc_arc,geo::_release_objc_arc,geo::_hash_objc,geo::_equal_objc>,unsigned long>,void *>>>::operator()[abi:ne180100](char a1, uint64_t a2)
{
  if (a1)
  {
    *(_QWORD *)(a2 + 16) = &off_1E1BF6460;

  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void sub_1895574AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEOMapFeatureAccessLog()
{
  if (qword_1ECDBC3C8 != -1)
    dispatch_once(&qword_1ECDBC3C8, &__block_literal_global_133);
  return (id)_MergedGlobals_272;
}

void sub_18955AE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18955B3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOVLFCrowdsourcingDataCollectionEnabled()
{
  return GEOConfigGetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled, (uint64_t)off_1EDF4CC08);
}

void ___initializeListeners_block_invoke()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;

  v0 = geo_isolater_create();
  v1 = (void *)_MergedGlobals_273;
  _MergedGlobals_273 = v0;

  objc_msgSend(MEMORY[0x1E0CB3748], "weakToStrongObjectsMapTable");
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = (void *)qword_1ECDBC3D8;
  qword_1ECDBC3D8 = v2;

}

void GEOVLFCrowdsourcingDataCollectionEnabledAddDelegateListener(void *a1, void *a2)
{
  id v3;
  id v4;
  _GEOVLFCrowdsourcingDataCollectionEnabledListener *v5;
  _GEOVLFCrowdsourcingDataCollectionEnabledListener *v6;
  id v7;
  _GEOVLFCrowdsourcingDataCollectionEnabledListener *v8;
  id v9;

  v3 = a2;
  if (v3)
  {
    v7 = v3;
    v4 = a1;
    v5 = -[_GEOVLFCrowdsourcingDataCollectionEnabledListener initWithListener:queue:]([_GEOVLFCrowdsourcingDataCollectionEnabledListener alloc], "initWithListener:queue:", v7, v4);

    if (qword_1ECDBC3E0 != -1)
      dispatch_once(&qword_1ECDBC3E0, &__block_literal_global_134);
    v8 = v5;
    v9 = v7;
    v6 = v5;
    geo_isolate_sync();

    v3 = v7;
  }

}

void GEOVLFCrowdsourcingDataCollectionEnabledRemoveDelegateListener(void *a1)
{
  id v1;
  id v2;
  id v3;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    if (qword_1ECDBC3E0 != -1)
      dispatch_once(&qword_1ECDBC3E0, &__block_literal_global_134);
    v3 = v2;
    geo_isolate_sync();

    v1 = v2;
  }

}

void sub_18955C044(_Unwind_Exception *a1)
{
  maps::path_codec::geo3::RoutingPathLeg *v1;

  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(v1);
  _Unwind_Resume(a1);
}

void sub_18955C88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  maps::path_codec::geo3::RoutingPathLeg *v17;

  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(v17);
  _Unwind_Resume(a1);
}

void sub_18955CC94(_Unwind_Exception *a1)
{
  void *v1;
  maps::path_codec::geo3::RoutingPathLeg *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg(v2);
  _Unwind_Resume(a1);
}

void sub_18955CD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&a9);
  _Unwind_Resume(a1);
}

void sub_18955CDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&a9);
  _Unwind_Resume(a1);
}

void sub_18955CE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  maps::path_codec::geo3::RoutingPathLeg::~RoutingPathLeg((maps::path_codec::geo3::RoutingPathLeg *)&a9);
  _Unwind_Resume(a1);
}

void sub_18955D128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18955D4C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL25GEOGetGEOComposedRouteLogv_block_invoke_1()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEOComposedRoute");
  v1 = (void *)_MergedGlobals_274;
  _MergedGlobals_274 = (uint64_t)v0;

}

__n64 GEOLiveTileKeyMake(int a1, int a2, char a3, char a4, char a5, int a6)
{
  __n64 result;
  unsigned __int8 v7;
  int8x16_t v8;

  v8.i8[14] = 0;
  v8.i16[6] = 0;
  v8.i32[2] = ((a5 & 0xF) << 12) | ((a4 & 0xF) << 8) | ((unsigned __int16)(a6 & 0x3FFF) >> 6);
  v8.i64[0] = (a1 << 6) | ((unint64_t)(a2 & 0x3FFFFFF) << 32) | a3 & 0x3F | ((unint64_t)(a6 & 0x3FFF) << 58);
  result.n64_u64[0] = vextq_s8(v8, v8, 0xFuLL).u64[0];
  if (a6 == 85)
    v7 = -110;
  else
    v7 = 18;
  result.n64_u8[0] = v7;
  return result;
}

uint64_t geomapregion::Polygon::operator==(double *a1, uint64_t a2, double *a3, double *a4)
{
  if (a2 - (_QWORD)a1 == (char *)a4 - (char *)a3)
  {
    if (a3 == a4)
      return 1;
    while (vabdd_f64(*a3, *a1) < 0.00000001 && vabdd_f64(a3[1], a1[1]) < 0.00000001)
    {
      a3 += 2;
      a1 += 2;
      if (a3 == a4)
        return 1;
    }
  }
  return 0;
}

double geomapregion::Polygon::Line::segment_intersection(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;
  double v15;
  double v16;
  _BOOL4 v17;
  double v18;
  double v19;
  double v21;
  double v22;
  _BOOL4 v24;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v7 = *a2;
  v6 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v10 = *a1 - v5;
  v11 = *a2 - v9;
  v12 = v10 * (v6 - v8) - (v2 - v4) * v11;
  if (fabs(v12) >= 1.0e-10)
  {
    v15 = v3 * v4 - v2 * v5;
    v16 = v7 * v8 - v6 * v9;
    result = (v15 * v11 - v10 * v16) / v12;
    v13 = (v16 * -(v2 - v4) + v15 * (v6 - v8)) / v12;
  }
  else
  {
    v13 = INFINITY;
    result = INFINITY;
  }
  if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || vabdd_f64(result, v3) < 0.00000001 && vabdd_f64(v13, v2) < 0.00000001
    || vabdd_f64(result, v5) < 0.00000001 && vabdd_f64(v13, v4) < 0.00000001
    || vabdd_f64(result, v7) < 0.00000001 && vabdd_f64(v13, v6) < 0.00000001
    || vabdd_f64(result, v9) < 0.00000001 && vabdd_f64(v13, v8) < 0.00000001)
  {
    return INFINITY;
  }
  if (v3 == v5)
  {
    if (vabdd_f64(v3, result) < 0.00000001)
      goto LABEL_15;
LABEL_22:
    v17 = 0;
    goto LABEL_25;
  }
  v18 = fmin(v3, v5) + -0.00000001;
  v19 = fmax(v3, v5) + 0.00000001;
  if (v18 >= result || v19 <= result)
    goto LABEL_22;
LABEL_15:
  if (v2 == v4)
  {
    v17 = vabdd_f64(v2, v13) < 0.00000001;
  }
  else
  {
    v17 = fmin(v2, v4) + -0.00000001 < v13;
    if (fmax(v2, v4) + 0.00000001 <= v13)
      v17 = 0;
  }
LABEL_25:
  if (v7 == v9)
  {
    if (vabdd_f64(v7, result) >= 0.00000001)
      return INFINITY;
  }
  else
  {
    v21 = fmin(v7, v9) + -0.00000001;
    v22 = fmax(v7, v9) + 0.00000001;
    if (v21 >= result || v22 <= result)
      return INFINITY;
  }
  if (v6 == v8)
  {
    v24 = vabdd_f64(v6, v13) < 0.00000001;
  }
  else
  {
    v24 = fmin(v6, v8) + -0.00000001 < v13;
    if (fmax(v6, v8) + 0.00000001 <= v13)
      v24 = 0;
  }
  if (!v17 || !v24)
    return INFINITY;
  return result;
}

uint64_t geomapregion::Polygon::contains(geomapregion::Polygon *this, Point *a2, double *a3, double *a4)
{
  int64_t v8;
  uint64_t result;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  _OWORD v21[2];

  v8 = (char *)a2 - (char *)this;
  if ((unint64_t)((char *)a2 - (char *)this) <= 0x2F)
    return geomapregion::Polygon::operator==((double *)this, (uint64_t)a2, a3, a4);
  if (a3 == a4)
  {
LABEL_7:
    result = 1;
    if ((unint64_t)((char *)a4 - (char *)a3) >= 0x30 && this != (geomapregion::Polygon *)a2)
    {
      v11 = (v8 >> 4) - 1;
      if (v8 >> 4 != 1)
      {
        v12 = 0;
        if (a3 == a4)
          v13 = 0;
        else
          v13 = (((char *)a4 - (char *)a3) >> 4) - 1;
        v14 = a3 + 2;
        do
        {
          v15 = v12 + 1;
          v16 = v13;
          v17 = v14;
          while (v16)
          {
            v18 = *((_OWORD *)this + v15);
            v21[0] = *((_OWORD *)this + v12);
            v21[1] = v18;
            v19 = *(_OWORD *)v17;
            v20[0] = *((_OWORD *)v17 - 1);
            v20[1] = v19;
            v17 += 2;
            --v16;
            if ((COERCE_UNSIGNED_INT64(geomapregion::Polygon::Line::segment_intersection((double *)v21, (double *)v20)) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
              return 0;
          }
          result = 1;
          ++v12;
        }
        while (v15 != v11);
      }
    }
  }
  else
  {
    v10 = a3;
    while ((geomapregion::Polygon::contains((const Point *)this, a2, *v10, v10[1]) & 1) != 0)
    {
      v10 += 2;
      if (v10 == a4)
        goto LABEL_7;
    }
    return 0;
  }
  return result;
}

uint64_t geomapregion::Polygon::intersects(geomapregion::Polygon *this, Point *a2, double *a3, double *a4)
{
  uint64_t result;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  __int128 v17;
  __int128 v18;
  _OWORD v19[2];
  _OWORD v20[2];

  if ((geomapregion::Polygon::operator==((double *)this, (uint64_t)a2, a3, a4) & 1) != 0
    || (geomapregion::Polygon::contains(this, a2, a3, a4) & 1) != 0
    || (geomapregion::Polygon::contains((geomapregion::Polygon *)a3, (Point *)a4, (double *)this, (double *)&a2->v) & 1) != 0)
  {
    return 1;
  }
  result = 0;
  if (a2 != (Point *)this)
  {
    v9 = ((char *)a2 - (char *)this) >> 4;
    v10 = v9 - 1;
    if (v9 != 1)
    {
      v11 = 0;
      if (a4 == a3)
        v12 = 0;
      else
        v12 = (((char *)a4 - (char *)a3) >> 4) - 1;
      v13 = a3 + 2;
      do
      {
        v14 = v11 + 1;
        v15 = v12;
        v16 = v13;
        while (v15)
        {
          v17 = *((_OWORD *)this + v14);
          v20[0] = *((_OWORD *)this + v11);
          v20[1] = v17;
          v18 = *(_OWORD *)v16;
          v19[0] = *((_OWORD *)v16 - 1);
          v19[1] = v18;
          v16 += 2;
          --v15;
          if ((COERCE_UNSIGNED_INT64(geomapregion::Polygon::Line::segment_intersection((double *)v20, (double *)v19)) & 0x7FFFFFFFFFFFFFFFLL) < 0x7FF0000000000000)
            return 1;
        }
        result = 0;
        ++v11;
      }
      while (v14 != v10);
    }
  }
  return result;
}

void **geomapregion::Polygon::Polygon(void **a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  double v7;
  double v8;
  long double v9;
  uint64_t v10;
  uint64_t v11;
  long double v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  long double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  long double *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  long double *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  long double *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = fabs(v4);
  if (fabs(*a2) != INFINITY && v5 != INFINITY)
  {
    v8 = a2[2];
    v7 = a2[3];
    v9 = GEOCoordinate2DForMapPoint(*a2, a2[1]);
    v11 = v10;
    v12 = GEOCoordinate2DForMapPoint(v3 + v8, v4 + v7);
    v14 = v13;
    std::vector<geomapregion::Polygon::Point>::reserve(a1, 5uLL);
    v16 = (char *)a1[1];
    v15 = (char *)a1[2];
    if (v16 >= v15)
    {
      v18 = (v16 - (_BYTE *)*a1) >> 4;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60)
        goto LABEL_72;
      v20 = v15 - (_BYTE *)*a1;
      if (v20 >> 3 > v19)
        v19 = v20 >> 3;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
        v21 = 0xFFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v21);
      v23 = &v22[16 * v18];
      v15 = &v22[16 * v24];
      *(_QWORD *)v23 = v11;
      *((long double *)v23 + 1) = v9;
      v17 = v23 + 16;
      v26 = (char *)*a1;
      v25 = (char *)a1[1];
      if (v25 != *a1)
      {
        do
        {
          *((_OWORD *)v23 - 1) = *((_OWORD *)v25 - 1);
          v23 -= 16;
          v25 -= 16;
        }
        while (v25 != v26);
        v25 = (char *)*a1;
      }
      *a1 = v23;
      a1[1] = v17;
      a1[2] = v15;
      if (v25)
      {
        operator delete(v25);
        v15 = (char *)a1[2];
      }
    }
    else
    {
      *(_QWORD *)v16 = v11;
      *((long double *)v16 + 1) = v9;
      v17 = v16 + 16;
    }
    a1[1] = v17;
    if (v17 >= v15)
    {
      v28 = (v17 - (_BYTE *)*a1) >> 4;
      if ((unint64_t)(v28 + 1) >> 60)
        goto LABEL_72;
      v29 = v15 - (_BYTE *)*a1;
      v30 = v29 >> 3;
      if (v29 >> 3 <= (unint64_t)(v28 + 1))
        v30 = v28 + 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v30;
      v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v31);
      v33 = &v32[16 * v28];
      v15 = &v32[16 * v34];
      *(_QWORD *)v33 = v11;
      *((long double *)v33 + 1) = v12;
      v27 = v33 + 16;
      v36 = (char *)*a1;
      v35 = (char *)a1[1];
      if (v35 != *a1)
      {
        do
        {
          *((_OWORD *)v33 - 1) = *((_OWORD *)v35 - 1);
          v33 -= 16;
          v35 -= 16;
        }
        while (v35 != v36);
        v35 = (char *)*a1;
      }
      *a1 = v33;
      a1[1] = v27;
      a1[2] = v15;
      if (v35)
      {
        operator delete(v35);
        v15 = (char *)a1[2];
      }
    }
    else
    {
      *(_QWORD *)v17 = v11;
      *((long double *)v17 + 1) = v12;
      v27 = v17 + 16;
    }
    a1[1] = v27;
    if (v27 >= v15)
    {
      v38 = (v27 - (_BYTE *)*a1) >> 4;
      if ((unint64_t)(v38 + 1) >> 60)
        goto LABEL_72;
      v39 = v15 - (_BYTE *)*a1;
      v40 = v39 >> 3;
      if (v39 >> 3 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v41);
      v43 = &v42[16 * v38];
      v15 = &v42[16 * v44];
      *(_QWORD *)v43 = v14;
      *((long double *)v43 + 1) = v12;
      v37 = (long double *)(v43 + 16);
      v46 = (char *)*a1;
      v45 = (char *)a1[1];
      if (v45 != *a1)
      {
        do
        {
          *((_OWORD *)v43 - 1) = *((_OWORD *)v45 - 1);
          v43 -= 16;
          v45 -= 16;
        }
        while (v45 != v46);
        v45 = (char *)*a1;
      }
      *a1 = v43;
      a1[1] = v37;
      a1[2] = v15;
      if (v45)
      {
        operator delete(v45);
        v15 = (char *)a1[2];
      }
    }
    else
    {
      *(_QWORD *)v27 = v14;
      *((long double *)v27 + 1) = v12;
      v37 = (long double *)(v27 + 16);
    }
    a1[1] = v37;
    if (v37 >= (long double *)v15)
    {
      v48 = ((char *)v37 - (_BYTE *)*a1) >> 4;
      if ((unint64_t)(v48 + 1) >> 60)
        goto LABEL_72;
      v49 = v15 - (_BYTE *)*a1;
      v50 = v49 >> 3;
      if (v49 >> 3 <= (unint64_t)(v48 + 1))
        v50 = v48 + 1;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
        v51 = 0xFFFFFFFFFFFFFFFLL;
      else
        v51 = v50;
      v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v51);
      v53 = (long double *)&v52[16 * v48];
      v15 = &v52[16 * v54];
      *(_QWORD *)v53 = v14;
      v53[1] = v9;
      v47 = v53 + 2;
      v56 = (char *)*a1;
      v55 = (char *)a1[1];
      if (v55 != *a1)
      {
        do
        {
          *((_OWORD *)v53 - 1) = *((_OWORD *)v55 - 1);
          v53 -= 2;
          v55 -= 16;
        }
        while (v55 != v56);
        v55 = (char *)*a1;
      }
      *a1 = v53;
      a1[1] = v47;
      a1[2] = v15;
      if (v55)
      {
        operator delete(v55);
        v15 = (char *)a1[2];
      }
    }
    else
    {
      *(_QWORD *)v37 = v14;
      v37[1] = v9;
      v47 = v37 + 2;
    }
    a1[1] = v47;
    if (v47 < (long double *)v15)
    {
      *(_QWORD *)v47 = v11;
      v47[1] = v9;
      v57 = (char *)(v47 + 2);
LABEL_70:
      a1[1] = v57;
      return a1;
    }
    v58 = ((char *)v47 - (_BYTE *)*a1) >> 4;
    if (!((unint64_t)(v58 + 1) >> 60))
    {
      v59 = v15 - (_BYTE *)*a1;
      v60 = v59 >> 3;
      if (v59 >> 3 <= (unint64_t)(v58 + 1))
        v60 = v58 + 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF0)
        v61 = 0xFFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<google::protobuf::Descriptor const*,int>>>(v61);
      v63 = (long double *)&v62[16 * v58];
      v65 = &v62[16 * v64];
      *(_QWORD *)v63 = v11;
      v63[1] = v9;
      v57 = (char *)(v63 + 2);
      v67 = (char *)*a1;
      v66 = (char *)a1[1];
      if (v66 != *a1)
      {
        do
        {
          *((_OWORD *)v63 - 1) = *((_OWORD *)v66 - 1);
          v63 -= 2;
          v66 -= 16;
        }
        while (v66 != v67);
        v66 = (char *)*a1;
      }
      *a1 = v63;
      a1[1] = v57;
      a1[2] = v65;
      if (v66)
        operator delete(v66);
      goto LABEL_70;
    }
LABEL_72:
    std::vector<zilch::GeoCoordinates>::__throw_length_error[abi:ne180100]();
  }
  return a1;
}

void sub_18955E624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_18955E6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18955E788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_18955EAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;

  if (__p)
    operator delete(__p);
  if (a25)
    operator delete(a25);

  _Unwind_Resume(a1);
}

void sub_18955ECE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void sub_18955EF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void sub_18955F26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

id GEOTilePackageBaseAndLocalization(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v7;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v4, "length"))
  {
    v7 = objc_msgSend(v3, "length") + 8;
    objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithCapacity:", objc_msgSend(v3, "length") + objc_msgSend(v4, "length") + 8);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "appendBytes:length:", &header, 4);
    objc_msgSend(v5, "appendBytes:length:", &v7, 4);
    objc_msgSend(v5, "appendData:", v3);
    objc_msgSend(v5, "appendData:", v4);
  }
  else
  {
    v5 = v3;
  }

  return v5;
}

uint64_t GEOTransitIncidentEntityAffectsSequence(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "muid");
  objc_msgSend(v4, "line");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5 == objc_msgSend(v6, "muid"))
  {

  }
  else
  {
    v7 = objc_msgSend(v3, "muid");
    objc_msgSend(v4, "line");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "system");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "muid");

    if (v7 != v10)
    {
      v15 = 0;
      goto LABEL_12;
    }
  }
  objc_msgSend(v3, "nextStopIDs");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v11, "count"))
  {
    objc_msgSend(v4, "nextStopIDs");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v12, "count"))
    {
      objc_msgSend(v3, "nextStopIDs");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "nextStopIDs");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v13, "intersectsSet:", v14);

    }
    else
    {
      v15 = 1;
    }

  }
  else
  {
    v15 = 1;
  }

LABEL_12:
  return v15;
}

BOOL GEOLPRBoundingBoxE7ReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int *v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 24) |= 4u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v19 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v20;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v31 = &OBJC_IVAR___GEOLPRBoundingBoxE7__southLatE7;
            goto LABEL_42;
          case 2u:
            *(_BYTE *)(a1 + 24) |= 8u;
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            if (v23 <= 0xFFFFFFFFFFFFFFFBLL && (v24 = v23 + 4, v23 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v31 = &OBJC_IVAR___GEOLPRBoundingBoxE7__westLngE7;
            goto LABEL_42;
          case 3u:
            *(_BYTE *)(a1 + 24) |= 2u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFFBLL && (v27 = v26 + 4, v26 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v27;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v31 = &OBJC_IVAR___GEOLPRBoundingBoxE7__northLatE7;
            goto LABEL_42;
          case 4u:
            *(_BYTE *)(a1 + 24) |= 1u;
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            if (v29 <= 0xFFFFFFFFFFFFFFFBLL && (v30 = v29 + 4, v29 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v29);
              *(_QWORD *)&v3[v28] = v30;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v31 = &OBJC_IVAR___GEOLPRBoundingBoxE7__eastLngE7;
LABEL_42:
            *(_DWORD *)(a1 + *v31) = v21;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_45;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_45:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_1895618A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRBoundingBoxE7ReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRBoundingBoxE7ReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189561908(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRBoundingBoxE7IsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          if (v16 != 5)
            goto LABEL_29;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_26;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_29:
            v21 = 0;
            goto LABEL_28;
          }
LABEL_26:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_27;
          break;
      }
    }
  }
LABEL_27:
  v21 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v21;
}

void sub_1895621AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRLicensePlateValidationRuleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  GEOLPRValidationRange *v50;
  char v51;
  uint64_t v52;
  char v53;
  char v54;
  int v55;
  char v56;
  void *v57;
  GEOLPRValidationRange *v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 76)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFAFFFCFFFBLL) & 0xFF01FF01FF01FF01))+ ((*(_BYTE *)(a1 + 76) & 8) != 0));
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 3);
  if (v9 & 1 | (v10 > 3) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_96;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_96:
      if ((v12 & 1) != 0)
      {
        v54 = 1;
        goto LABEL_106;
      }
      if (v13)
      {
        while (1)
        {
          v55 = *v13++;
          v56 = 16;
          switch(v55)
          {
            case 0:
              goto LABEL_107;
            case 1:
              goto LABEL_104;
            case 4:
              v56 = 32;
              goto LABEL_104;
            case 5:
              v56 = 64;
              goto LABEL_104;
            case 6:
              v56 = 4;
              goto LABEL_104;
            case 7:
              v56 = 8;
LABEL_104:
              *(_BYTE *)(a1 + 76) |= v56;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_107;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    switch((int)v27)
    {
      case 1:
        if (!v28)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 76) & 0x10) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 32;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_113;
        v53 = 8 * *(_BYTE *)(a1 + 76);
        goto LABEL_93;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 76) |= 2u;
        while (2)
        {
          v39 = *v14;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v40);
            *(_QWORD *)(v3 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v24 = v37++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_83:
        v52 = 72;
        goto LABEL_88;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_78;
        v43 = 0;
        v44 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 76) |= 1u;
        while (2)
        {
          v45 = *v14;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v38 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v24 = v44++ >= 9;
              if (v24)
              {
                LODWORD(v38) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_87:
        v52 = 68;
LABEL_88:
        *(_DWORD *)(a1 + v52) = v38;
        goto LABEL_95;
      case 4:
        if (!v28)
          goto LABEL_78;
        if ((*(_BYTE *)(a1 + 76) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_113;
          v53 = 4 * *(_BYTE *)(a1 + 76);
LABEL_93:
          v7 += v53 >> 7;
        }
        else
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 40;
LABEL_62:
          v49 = *(void **)(a1 + v34);
          *(_QWORD *)(a1 + v34) = v33;

          --v7;
        }
        goto LABEL_94;
      case 5:
        if (!v28 || (*(_BYTE *)(a1 + 76) & 0x40) != 0)
          goto LABEL_78;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_113;
        v59 = objc_alloc_init(GEOLPRValidationRange);
        if (GEOLPRValidationRangeReadAllFrom((uint64_t)v59, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOLPRLicensePlateValidationRule _addNoFlagsValidationRanges:](a1, v59);
LABEL_76:
          v50 = v59;
LABEL_77:

LABEL_94:
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
          if (!(v12 & 1 | (v7 != 0)))
            goto LABEL_96;
          continue;
        }

LABEL_113:
        v54 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_106:
        *(_BYTE *)(a1 + 76) |= 0x10u;
        *(_BYTE *)(a1 + 76) |= 0x20u;
        *(_BYTE *)(a1 + 76) |= 0x40u;
        *(_BYTE *)(a1 + 76) |= 4u;
        *(_BYTE *)(a1 + 76) |= 8u;
        if ((v54 & 1) != 0)
        {
LABEL_107:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_108;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_108:
            v57 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 6:
        if (!v28 || (*(_BYTE *)(a1 + 76) & 4) != 0)
          goto LABEL_78;
        PBReaderReadString();
        v50 = (GEOLPRValidationRange *)objc_claimAutoreleasedReturnValue();
        if (!v50)
          goto LABEL_77;
        v59 = v50;
        -[GEOLPRLicensePlateValidationRule _addNoFlagsImpliedPowerTypeKey:](a1, v50);
        goto LABEL_76;
      case 7:
        if (!v28 || (*(_BYTE *)(a1 + 76) & 8) != 0)
        {
LABEL_78:
          v51 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v51 & 1) == 0)
          {
LABEL_105:
            v54 = 0;
            goto LABEL_106;
          }
          goto LABEL_95;
        }
        PBReaderReadString();
        v50 = (GEOLPRValidationRange *)objc_claimAutoreleasedReturnValue();
        if (!v50)
          goto LABEL_77;
        v59 = v50;
        -[GEOLPRLicensePlateValidationRule _addNoFlagsImpliedVehicleTypeKey:](a1, v50);
        goto LABEL_76;
      default:
        v35 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v35)
          goto LABEL_105;
        goto LABEL_95;
    }
  }
}

void sub_189562A90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189562BD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189562F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956323C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189563ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRLicensePlateValidationRuleCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLPRLicensePlateValidationRuleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRLicensePlateValidationRuleReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRLicensePlateValidationRuleReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRLicensePlateValidationRuleReadAllFrom_initialTag;
  Specified = GEOLPRLicensePlateValidationRuleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRLicensePlateValidationRuleCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189564158(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRLicensePlateValidationRuleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRLicensePlateValidationRuleReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895641B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRLicensePlateValidationRuleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_51;
          goto LABEL_47;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_51;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_37;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_48;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_51;
          v23 = 0;
          break;
        case 4u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRValidationRangeIsValid(a1))
            goto LABEL_51;
          PBReaderRecallMark();
          continue;
        case 6u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        case 7u:
          if (v15 == 2)
            goto LABEL_47;
          goto LABEL_51;
        default:
LABEL_47:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_51:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_48;
      }
LABEL_37:
      a1[*v4] = 1;
LABEL_48:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

BOOL GEOLPRValidationRangeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 4)
      {
        if (v15 != 2)
          goto LABEL_44;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_44;
          v24 = 0;
          while (1)
          {
            v25 = *v2;
            v26 = *(_QWORD *)&a1[v25];
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
              goto LABEL_39;
            v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
            *(_QWORD *)&a1[v25] = v27;
            if (v28 < 0)
            {
              v23 = v24++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_41;
          }
        }
        if ((_DWORD)v17 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_44;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              break;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_41;
          }
LABEL_39:
          a1[*v4] = 1;
          continue;
        }
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_44:
        v29 = 0;
        goto LABEL_43;
      }
LABEL_41:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v29 = a1[*v4] == 0;
LABEL_43:
  PBReaderRecallMark();
  return v29;
}

void sub_189564AB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRLicensePlateValidationRuleIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = *(unsigned __int8 *)(a1 + 76) > 3u;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189565140(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189565848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRPowerTypeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOLPRPowerType *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39;
  char v40;
  int v41;
  char v42;
  void *v43;
  int v45;
  char v46;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 2);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v46 = (v15 == 0) | v14;
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_64;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_64:
      if ((v16 & 1) != 0)
      {
        v40 = 1;
        goto LABEL_76;
      }
      if (v15)
      {
        while (1)
        {
          v41 = *v15++;
          v42 = 1;
          switch(v41)
          {
            case 0:
              goto LABEL_77;
            case 1:
              goto LABEL_71;
            case 2:
              v42 = 8;
              goto LABEL_71;
            case 3:
              v42 = 2;
              goto LABEL_71;
            case 4:
              v42 = 4;
LABEL_71:
              *(_BYTE *)(a1 + 60) |= v42;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_77;
    }
    v30 = v22 >> 3;
    v31 = (char)v16;
    if ((v46 & 1) == 0)
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_58;
        if ((*(_BYTE *)(a1 + 60) & 1) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v36;

          --v7;
          goto LABEL_62;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v7 -= *(_BYTE *)(a1 + 60) & 1;
        goto LABEL_62;
      case 2:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 8) != 0)
          goto LABEL_58;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_73;
        v45 = (int)v16;
        v16 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_74;
        PBReaderRecallMark();
        -[GEOLPRPowerType _addNoFlagsTitle:](a1, v16);
        goto LABEL_57;
      case 3:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 2) != 0)
          goto LABEL_58;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_73;
        v45 = (int)v16;
        v16 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_74;
        PBReaderRecallMark();
        -[GEOLPRPowerType _addNoFlagsSubtitle:](a1, v16);
        goto LABEL_57;
      case 4:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 4) != 0)
        {
LABEL_58:
          v39 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v39 & 1) == 0)
          {
LABEL_72:
            v40 = 0;
            goto LABEL_76;
          }
          goto LABEL_63;
        }
        if ((PBReaderPlaceMark() & 1) != 0)
        {
          v45 = (int)v16;
          v16 = objc_alloc_init(GEOLPRPowerType);
          if (!GEOLPRPowerTypeReadAllFrom())
          {
LABEL_74:

            v40 = 0;
            LOBYTE(v16) = v45;
            goto LABEL_75;
          }
          PBReaderRecallMark();
          -[GEOLPRPowerType _addNoFlagsSubtypes:](a1, v16);
LABEL_57:

          LODWORD(v16) = v45;
LABEL_62:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_63:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_64;
          continue;
        }
LABEL_73:
        v40 = 0;
LABEL_75:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
        *(_BYTE *)(a1 + 60) |= 1u;
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 4u;
        if ((v40 & 1) != 0)
        {
LABEL_77:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_78;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_78:
            v43 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_72;
        goto LABEL_63;
    }
  }
}

void sub_189565EF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956622C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189566564(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189567168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRPowerTypeCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v2 = a1[5];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v26;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v26 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v25 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
    }
    while (v4);
  }

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v7 = a1[3];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v22;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v22 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
    }
    while (v9);
  }

  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v12 = a1[4];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v18;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v18 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v16++), "readAll:", 1, (_QWORD)v17);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v17, v29, 16);
    }
    while (v14);
  }

}

unint64_t GEOLPRPowerTypeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRPowerTypeReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRPowerTypeReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRPowerTypeReadAllFrom_initialTag;
  Specified = GEOLPRPowerTypeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRPowerTypeCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189567524(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRPowerTypeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRPowerTypeReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189567584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRPowerTypeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_32;
          goto LABEL_24;
        case 2u:
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
            goto LABEL_32;
          goto LABEL_29;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRPowerTypeIsValid(a1))
            goto LABEL_32;
LABEL_29:
          PBReaderRecallMark();
          goto LABEL_30;
        default:
LABEL_24:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_32:
            PBReaderRecallMark();
            return 0;
          }
LABEL_30:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_31;
          break;
      }
    }
  }
LABEL_31:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189567B04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRPowerTypeIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(_BYTE *)(a1 + 60);
  if ((v2 & 0x1F) == 0)
  {
    if ((*(_BYTE *)(a1 + 60) & 2) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v4 = *(id *)(a1 + 24);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v17;
LABEL_6:
        v8 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v7)
            objc_enumerationMutation(v4);
          if (GEOLocalizedStringIsDirty(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v8)))
            goto LABEL_24;
          if (v6 == ++v8)
          {
            v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v6)
              goto LABEL_6;
            break;
          }
        }
      }

      v2 = *(_BYTE *)(a1 + 60);
    }
    if ((v2 & 4) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = *(id *)(a1 + 32);
    v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_25:

      return v3;
    }
    v9 = *(_QWORD *)v13;
LABEL_17:
    v10 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v9)
        objc_enumerationMutation(v4);
      if ((GEOLPRPowerTypeIsDirty(*(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v10)) & 1) != 0)
        break;
      if (v3 == ++v10)
      {
        v3 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_17;
        goto LABEL_25;
      }
    }
LABEL_24:
    v3 = 1;
    goto LABEL_25;
  }
  return 1;
}

os_unfair_lock_s *GEOLPRPowerTypeIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLPRPowerTypeIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189568288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRPowerTypeMapReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  GEOLPRPowerType *v39;
  void *v40;
  char v41;
  char v42;
  int v43;
  int v44;
  void *v45;
  BOOL v47;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v47 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_60;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_60:
      if (v15)
      {
        v42 = 1;
        goto LABEL_70;
      }
      if (v16)
      {
        do
        {
          while (1)
          {
            v44 = *v16++;
            v43 = v44;
            if (v44 != 1 && v43 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v43;
          }
        }
        while (v43);
      }
      goto LABEL_71;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v47)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (v32)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_69;
          v9 -= *(_BYTE *)(a1 + 44) & 1;
        }
        else
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v37;

          --v9;
        }
        goto LABEL_56;
      }
LABEL_50:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_69;
      goto LABEL_56;
    }
    if (!PBReaderSkipValueWithTag())
      goto LABEL_69;
LABEL_56:
    if (v9)
      v41 = 1;
    else
      v41 = v15;
    if ((v41 & 1) == 0)
      goto LABEL_60;
  }
  if (!v32)
    goto LABEL_50;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_69:
      v42 = 0;
      goto LABEL_70;
    }
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_56;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_69;
  v39 = objc_alloc_init(GEOLPRPowerType);
  if (GEOLPRPowerTypeReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    v40 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v39;

    --v9;
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_56;
  }

  v42 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v42 & 1) != 0)
  {
LABEL_71:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (!v15)
      return v3;
    goto LABEL_72;
  }
  v3 = 0;
  if (v15)
  {
LABEL_72:
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189568E28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189568F0C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRPowerTypeMapReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRPowerTypeMapReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRPowerTypeMapReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRPowerTypeMapReadAllFrom_initialTag;
  Specified = GEOLPRPowerTypeMapReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1895690B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189569214(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOLPRPowerTypeMapIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 44) & 5) != 0)
    return (os_unfair_lock_s *)1;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    return GEOLPRPowerTypeIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  return 0;
}

void sub_1895693D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895696A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRegionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int *v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  GEOLocalizedString *v36;
  int v37;
  uint64_t v38;
  void *v39;
  char v40;
  char v41;
  char v42;
  int v43;
  char v44;
  void *v45;
  BOOL v47;
  char v48;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 2);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14;
        v48 = (v15 == 0) | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v47 = v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_71;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_71:
      if (v16)
      {
        v42 = 1;
        goto LABEL_83;
      }
      if (v15)
      {
        while (1)
        {
          v43 = *v15++;
          v44 = 1;
          switch(v43)
          {
            case 0:
              goto LABEL_84;
            case 1:
              goto LABEL_78;
            case 2:
              v44 = 8;
              goto LABEL_78;
            case 3:
              v44 = 2;
              goto LABEL_78;
            case 4:
              v44 = 4;
LABEL_78:
              *(_BYTE *)(a1 + 60) |= v44;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_84;
    }
    v30 = v22 >> 3;
    v31 = v16;
    if ((v48 & 1) == 0)
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 1) != 0)
          goto LABEL_62;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_80;
        v36 = objc_alloc_init(GEOLocalizedString);
        if (!GEOLocalizedStringReadAllFrom((uint64_t)v36, (void *)v3, v9 & 1))
          goto LABEL_81;
        PBReaderRecallMark();
        -[GEOLPRRegion _addNoFlagsDisplayName:](a1, v36);
        goto LABEL_49;
      case 2:
        if (!v31 || (*(_BYTE *)(a1 + 60) & 8) != 0)
          goto LABEL_62;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_80;
        v36 = objc_alloc_init(GEOLPRRegion);
        if (!GEOLPRRegionReadAllFrom())
          goto LABEL_81;
        PBReaderRecallMark();
        -[GEOLPRRegion _addNoFlagsSubRegions:](a1, v36);
LABEL_49:

        goto LABEL_61;
      case 3:
        if (!v31)
          goto LABEL_62;
        if ((*(_BYTE *)(a1 + 60) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_80;
          v41 = *(_BYTE *)(a1 + 60) << 6;
          goto LABEL_68;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_80;
        v36 = objc_alloc_init(GEOLPRRegionInfo);
        if (!GEOLPRRegionInfoReadAllFrom((uint64_t)v36, (void *)v3, v9 & 1))
          goto LABEL_81;
        PBReaderRecallMark();
        v38 = 24;
        goto LABEL_60;
      case 4:
        if (!v31)
        {
LABEL_62:
          v40 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v40 & 1) == 0)
          {
LABEL_79:
            v42 = 0;
            goto LABEL_83;
          }
LABEL_70:
          if (!v16 && v7 == 0)
            goto LABEL_71;
          continue;
        }
        if ((*(_BYTE *)(a1 + 60) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_80:
            v42 = 0;
            goto LABEL_82;
          }
          v41 = 32 * *(_BYTE *)(a1 + 60);
LABEL_68:
          v7 += v41 >> 7;
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_80;
        v36 = objc_alloc_init(GEOLPRBoundingBoxE7);
        if (GEOLPRBoundingBoxE7ReadAllFrom((uint64_t)v36, (void *)v3))
        {
          PBReaderRecallMark();
          v38 = 32;
LABEL_60:
          v39 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v36;

          --v7;
LABEL_61:
          v16 = v47;
LABEL_69:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_70;
        }
LABEL_81:

        v42 = 0;
        v16 = v47;
LABEL_82:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_83:
        *(_BYTE *)(a1 + 60) |= 1u;
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 4u;
        if ((v42 & 1) != 0)
        {
LABEL_84:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if (v16)
            goto LABEL_85;
        }
        else
        {
          v3 = 0;
          if (v16)
          {
LABEL_85:
            v45 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v37 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v37)
          goto LABEL_79;
        goto LABEL_70;
    }
  }
}

void sub_189569F8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956A2C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956A404(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956AD3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRRegionCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = a1[2];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = a1[5];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v13);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
    }
    while (v9);
  }

  objc_msgSend(a1[3], "readAll:", 1);
  return objc_msgSend(a1[4], "readAll:", 1);
}

unint64_t GEOLPRRegionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRRegionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRRegionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRRegionReadAllFrom_initialTag;
  Specified = GEOLPRRegionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRRegionCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_18956B08C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRegionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRRegionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18956B0EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRRegionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOLocalizedStringIsValid(a1))
            goto LABEL_36;
          goto LABEL_39;
        case 2u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRRegionIsValid(a1))
            goto LABEL_39;
          goto LABEL_36;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRRegionInfoIsValid(a1))
            goto LABEL_39;
          goto LABEL_36;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRBoundingBoxE7IsValid(a1))
            goto LABEL_39;
LABEL_36:
          PBReaderRecallMark();
          goto LABEL_37;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_39:
            PBReaderRecallMark();
            return 0;
          }
LABEL_37:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_38;
          break;
      }
    }
  }
LABEL_38:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOLPRRegionInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!a1[*v4])
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        while (1)
        {
          v9 = *v2;
          v10 = *(_QWORD *)&a1[v9];
          v11 = v10 + 1;
          if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
            break;
          v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
          *(_QWORD *)&a1[v9] = v11;
          v8 |= (unint64_t)(v12 & 0x7F) << v6;
          if ((v12 & 0x80) == 0)
            goto LABEL_12;
          v6 += 7;
          v13 = v7++ >= 9;
          if (v13)
          {
            v8 = 0;
            v14 = a1[*v4];
            goto LABEL_14;
          }
        }
        a1[*v4] = 1;
LABEL_12:
        v14 = a1[*v4];
        if (a1[*v4])
          v8 = 0;
LABEL_14:
        v15 = v8 & 7;
        if (v14)
          v16 = 1;
        else
          v16 = v15 == 4;
        if (!v16)
        {
          switch((v8 >> 3))
          {
            case 2u:
              if (v15 == 2)
              {
                if (!PBReaderPlaceMark())
                  goto LABEL_51;
                while (1)
                {
LABEL_38:
                  if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                    goto LABEL_36;
                  v22 = a1[*v4];
                  if (a1[*v4])
                    goto LABEL_36;
                  while (1)
                  {
                    v23 = *v2;
                    v24 = *(_QWORD *)&a1[v23];
                    v25 = v24 + 1;
                    if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                      break;
                    v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
                    *(_QWORD *)&a1[v23] = v25;
                    if (v26 < 0)
                    {
                      v13 = v22++ >= 9;
                      if (!v13)
                        continue;
                    }
                    goto LABEL_38;
                  }
                  a1[*v4] = 1;
                }
              }
              if ((v8 & 7) != 0)
                goto LABEL_51;
              do
              {
                v17 = *v2;
                v18 = *(_QWORD *)&a1[v17];
                v19 = v18 + 1;
                if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
                {
                  a1[*v4] = 1;
                  break;
                }
                v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
                *(_QWORD *)&a1[v17] = v19;
                if ((v20 & 0x80000000) == 0)
                  break;
                v21 = v15++;
              }
              while (v21 <= 8);
LABEL_48:
              if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
                break;
              continue;
            case 3u:
              if (v15 == 2)
                goto LABEL_31;
              goto LABEL_51;
            case 4u:
              if (v15 == 2)
                goto LABEL_31;
              goto LABEL_51;
            case 5u:
              if (v15 == 2)
                goto LABEL_31;
              goto LABEL_51;
            case 6u:
              if (v15 != 2 || !PBReaderPlaceMark() || !GEOLPRLicensePlateValidationRuleIsValid(a1))
                goto LABEL_51;
LABEL_36:
              PBReaderRecallMark();
              goto LABEL_48;
            default:
LABEL_31:
              if ((PBReaderSkipValueWithTag() & 1) != 0)
                goto LABEL_48;
LABEL_51:
              PBReaderRecallMark();
              return 0;
          }
        }
      }
      break;
    }
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_18956B940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRRegionIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(_BYTE *)(a1 + 60);
  if ((v2 & 0x19) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 2) != 0)
  {
    if ((GEOLPRRegionInfoIsDirty(*(os_unfair_lock_s **)(a1 + 24)) & 1) != 0)
      return 1;
    v2 = *(_BYTE *)(a1 + 60);
  }
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) != 0)
    {
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v5 = *(id *)(a1 + 16);
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD *)v17;
LABEL_11:
        v9 = 0;
        while (1)
        {
          if (*(_QWORD *)v17 != v8)
            objc_enumerationMutation(v5);
          if (GEOLocalizedStringIsDirty(*(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * v9)))
            goto LABEL_29;
          if (v7 == ++v9)
          {
            v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
            if (v7)
              goto LABEL_11;
            break;
          }
        }
      }

      v2 = *(_BYTE *)(a1 + 60);
    }
    if ((v2 & 8) == 0)
      return 0;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v5 = *(id *)(a1 + 40);
    v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    if (!v3)
    {
LABEL_30:

      return v3;
    }
    v10 = *(_QWORD *)v13;
LABEL_22:
    v11 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v10)
        objc_enumerationMutation(v5);
      if ((GEOLPRRegionIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v12 + 1) + 8 * v11)) & 1) != 0)
        break;
      if (v3 == ++v11)
      {
        v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
        if (v3)
          goto LABEL_22;
        goto LABEL_30;
      }
    }
LABEL_29:
    v3 = 1;
    goto LABEL_30;
  }
  return 1;
}

os_unfair_lock_s *GEOLPRRegionIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLPRRegionIsDirty(v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18956C024(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956C5CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRegionInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  GEOLPRLicensePlateValidationRule *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  int *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  void *v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  int v57;
  char v58;
  void *v59;
  int v61;
  char v62;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 76);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 72));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 84)), (uint16x4_t)0xFFFEFFFFFFFCFFFDLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 84) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 3);
        if (((v14 | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_88;
        v62 = (v15 == 0) | v14;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v18))
      goto LABEL_88;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    v29 = v22 & 7;
    if (v28 || v29 == 4)
    {
LABEL_88:
      if ((v16 & 1) != 0)
      {
        v56 = 1;
        goto LABEL_90;
      }
      if (v15)
      {
        while (1)
        {
          v57 = *v15++;
          v58 = 1;
          switch(v57)
          {
            case 0:
              goto LABEL_100;
            case 2:
              goto LABEL_99;
            case 3:
              v58 = 8;
              goto LABEL_99;
            case 4:
              v58 = 16;
              goto LABEL_99;
            case 5:
              v58 = 2;
              goto LABEL_99;
            case 6:
              v58 = 4;
LABEL_99:
              *(_BYTE *)(a1 + 84) |= v58;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_100;
    }
    v31 = v22 >> 3;
    v32 = (char)v16;
    if ((v62 & 1) == 0)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 2:
        if (!v32 || (*(_BYTE *)(a1 + 84) & 1) != 0)
          goto LABEL_71;
        if (v29 == 2)
        {
          if (!PBReaderPlaceMark())
            goto LABEL_104;
          while (1)
          {
            v37 = (int *)MEMORY[0x1E0D82BC8];
            if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            {
              PBReaderRecallMark();
              goto LABEL_85;
            }
            v38 = 0;
            v39 = 0;
            v40 = 0;
            while (1)
            {
              v41 = *v17;
              v42 = *(_QWORD *)(v3 + v41);
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
                break;
              v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v42);
              *(_QWORD *)(v3 + v41) = v43;
              v40 |= (unint64_t)(v44 & 0x7F) << v38;
              if (v44 < 0)
              {
                v38 += 7;
                v27 = v39++ >= 9;
                if (!v27)
                  continue;
              }
              goto LABEL_51;
            }
            *(_BYTE *)(v3 + *v37) = 1;
LABEL_51:
            PBRepeatedInt32Add();
          }
        }
        v49 = 0;
        v50 = 0;
        v51 = 0;
        while (1)
        {
          v52 = *v17;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
            break;
          v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v53);
          *(_QWORD *)(v3 + v52) = v54;
          v51 |= (unint64_t)(v55 & 0x7F) << v49;
          if (v55 < 0)
          {
            v49 += 7;
            v27 = v50++ >= 9;
            if (!v27)
              continue;
          }
          goto LABEL_84;
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_84:
        PBRepeatedInt32Add();
        goto LABEL_85;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 84) & 8) != 0)
          goto LABEL_71;
        v61 = (int)v16;
        PBReaderReadString();
        v16 = (GEOLPRLicensePlateValidationRule *)objc_claimAutoreleasedReturnValue();
        if (v16)
          -[GEOLPRRegionInfo _addNoFlagsValidPowerTypeKeys:](a1, v16);
        goto LABEL_70;
      case 4:
        if (!v32 || (*(_BYTE *)(a1 + 84) & 0x10) != 0)
          goto LABEL_71;
        v61 = (int)v16;
        PBReaderReadString();
        v16 = (GEOLPRLicensePlateValidationRule *)objc_claimAutoreleasedReturnValue();
        if (v16)
          -[GEOLPRRegionInfo _addNoFlagsValidVehicleTypeKeys:](a1, v16);
        goto LABEL_70;
      case 5:
        if (!v32)
          goto LABEL_71;
        if ((*(_BYTE *)(a1 + 84) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_104:
            v56 = 0;
            goto LABEL_106;
          }
          v7 += *(unsigned __int8 *)(a1 + 84) << 30 >> 31;
        }
        else
        {
          PBReaderReadString();
          v46 = objc_claimAutoreleasedReturnValue();
          v47 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v46;

          --v7;
        }
        goto LABEL_85;
      case 6:
        if (!v32 || (*(_BYTE *)(a1 + 84) & 4) != 0)
        {
LABEL_71:
          v48 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v48 & 1) == 0)
          {
LABEL_103:
            v56 = 0;
            goto LABEL_90;
          }
LABEL_86:
          if (!(v16 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_88;
          continue;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_104;
        v61 = (int)v16;
        v16 = objc_alloc_init(GEOLPRLicensePlateValidationRule);
        if (GEOLPRLicensePlateValidationRuleReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOLPRRegionInfo _addNoFlagsLicensePlateValidationRules:](a1, v16);
LABEL_70:

          LODWORD(v16) = v61;
LABEL_85:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_86;
        }

        v56 = 0;
        LOBYTE(v16) = v61;
LABEL_106:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_90:
        *(_BYTE *)(a1 + 84) |= 1u;
        *(_BYTE *)(a1 + 84) |= 8u;
        *(_BYTE *)(a1 + 84) |= 0x10u;
        *(_BYTE *)(a1 + 84) |= 2u;
        *(_BYTE *)(a1 + 84) |= 4u;
        if ((v56 & 1) != 0)
        {
LABEL_100:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_101;
          return v3;
        }
        v3 = 0;
        if ((v16 & 1) == 0)
          return v3;
LABEL_101:
        v59 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        v45 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v45)
          goto LABEL_103;
        goto LABEL_86;
    }
  }
}

void sub_18956D0D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956D408(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956D73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956D87C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956E584(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRRegionInfoCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLPRRegionInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 76))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRRegionInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 80));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 72) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 76) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRRegionInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRRegionInfoReadAllFrom_initialTag;
  Specified = GEOLPRRegionInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRRegionInfoCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 80));
  return Specified;
}

void sub_18956E810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRRegionInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRRegionInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18956E870(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18956EC04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRRegionInfoIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 80));
  if ((*(_BYTE *)(a1 + 84) & 0x3F) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 84) & 4) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 48);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOLPRLicensePlateValidationRuleIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOLPRRegionInfoIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLPRRegionInfoIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 20);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18956F33C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRValidationRangeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  _BOOL8 v37;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 4)
        {
          PBReaderReadString();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v26;

        }
        else
        {
          if ((_DWORD)v18 == 2)
          {
            v28 = 0;
            v29 = 0;
            v30 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            while (1)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
                break;
              v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v33;
              v30 |= (unint64_t)(v34 & 0x7F) << v28;
              if ((v34 & 0x80) == 0)
                goto LABEL_44;
              v28 += 7;
              v15 = v29++ >= 9;
              if (v15)
              {
                LODWORD(v30) = 0;
                goto LABEL_46;
              }
            }
            v3[*v6] = 1;
LABEL_44:
            if (v3[*v6])
              LODWORD(v30) = 0;
LABEL_46:
            v35 = -(v30 & 1) ^ ((int)v30 >> 1);
            v36 = 16;
          }
          else
          {
            if ((_DWORD)v18 != 1)
            {
              if (!PBReaderSkipValueWithTag())
                goto LABEL_50;
              continue;
            }
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              v24 = v23 + 1;
              if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
                break;
              v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v24;
              v21 |= (unint64_t)(v25 & 0x7F) << v19;
              if ((v25 & 0x80) == 0)
                goto LABEL_40;
              v19 += 7;
              v15 = v20++ >= 9;
              if (v15)
              {
                LODWORD(v21) = 0;
                goto LABEL_42;
              }
            }
            v3[*v6] = 1;
LABEL_40:
            if (v3[*v6])
              LODWORD(v21) = 0;
LABEL_42:
            v35 = -(v21 & 1) ^ ((int)v21 >> 1);
            v36 = 20;
          }
          *(_DWORD *)(a1 + v36) = v35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v37 = v3[*v6] == 0;
  }
  else
  {
LABEL_50:
    v37 = 0;
  }
  objc_sync_exit(v3);

  return v37;
}

void sub_18956FF3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRValidationRangeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRValidationRangeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18956FF9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189570544(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRVehicleTypeReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  GEOLocalizedString *v38;
  int v39;
  char v40;
  char v41;
  int v42;
  char v43;
  void *v44;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 1);
        if (v10 & 1 | (v11 > 1) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = (int *)MEMORY[0x1E0D82BB8];
        v19 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_61;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_61:
      if ((v14 & 1) != 0)
      {
        v41 = 1;
        goto LABEL_72;
      }
      if (v15)
      {
        while (1)
        {
          v42 = *v15++;
          v43 = 1;
          switch(v42)
          {
            case 0:
              goto LABEL_73;
            case 1:
              goto LABEL_67;
            case 2:
              v43 = 4;
              goto LABEL_67;
            case 3:
              v43 = 2;
LABEL_67:
              *(_BYTE *)(a1 + v19[760]) |= v43;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_73;
    }
    v30 = v22 >> 3;
    v31 = v14;
    if (!((v15 == 0) | v14 & 1))
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 != 3)
      break;
    if (v31 && (*(_BYTE *)(a1 + v19[760]) & 2) == 0)
    {
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_69;
      v38 = objc_alloc_init(GEOLocalizedString);
      if (!GEOLocalizedStringReadAllFrom((uint64_t)v38, (void *)v3, v9 & 1))
        goto LABEL_70;
      PBReaderRecallMark();
      -[GEOLPRVehicleType _addNoFlagsSubtitle:](a1, v38);
      goto LABEL_52;
    }
LABEL_55:
    v40 = PBReaderSkipValueWithTag();
    v17 = (int *)MEMORY[0x1E0D82BC8];
    if ((v40 & 1) == 0)
    {
LABEL_68:
      v41 = 0;
      goto LABEL_72;
    }
LABEL_60:
    if (!(v14 & 1 | (v7 != 0)))
      goto LABEL_61;
  }
  if ((_DWORD)v30 != 2)
  {
    if ((_DWORD)v30 != 1)
    {
      v39 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if (!v39)
        goto LABEL_68;
      goto LABEL_60;
    }
    if (v31)
    {
      if ((*(_BYTE *)(a1 + v19[760]) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_69:
          v41 = 0;
          goto LABEL_71;
        }
        v7 -= *(_BYTE *)(a1 + v19[760]) & 1;
      }
      else
      {
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v36;

        --v7;
      }
      goto LABEL_59;
    }
    goto LABEL_55;
  }
  if (!v31 || (*(_BYTE *)(a1 + v19[760]) & 4) != 0)
    goto LABEL_55;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_69;
  v38 = objc_alloc_init(GEOLocalizedString);
  if (GEOLocalizedStringReadAllFrom((uint64_t)v38, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    -[GEOLPRVehicleType _addNoFlagsTitle:](a1, v38);
LABEL_52:

    v19 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_59:
    v17 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_60;
  }
LABEL_70:

  v41 = 0;
  v19 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_71:
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + v19[760]) |= 1u;
  *(_BYTE *)(a1 + v19[760]) |= 4u;
  *(_BYTE *)(a1 + v19[760]) |= 2u;
  if ((v41 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if ((v14 & 1) == 0)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_74:
    v44 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189570B50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189570E80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189571860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLPRVehicleTypeCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 24);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOLPRVehicleTypeReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRVehicleTypeReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRVehicleTypeReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRVehicleTypeReadAllFrom_initialTag;
  Specified = GEOLPRVehicleTypeReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLPRVehicleTypeCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189571B84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRVehicleTypeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLPRVehicleTypeReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189571BE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLPRVehicleTypeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3 || (_DWORD)v17 == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
          goto LABEL_30;
        PBReaderRecallMark();
      }
      else if ((_DWORD)v17 == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_30:
        PBReaderRecallMark();
        return 0;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_189572088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOLPRVehicleTypeIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xF) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 2) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOLocalizedStringIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOLPRVehicleTypeIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOLPRVehicleTypeIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18957265C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRVehicleTypeMapReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  void *v38;
  GEOLPRVehicleType *v39;
  void *v40;
  char v41;
  char v42;
  int v43;
  int v44;
  void *v45;
  BOOL v47;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v47 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_60;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_60:
      if (v15)
      {
        v42 = 1;
        goto LABEL_70;
      }
      if (v16)
      {
        do
        {
          while (1)
          {
            v44 = *v16++;
            v43 = v44;
            if (v44 != 1 && v43 != 2)
              break;
            *(_BYTE *)(a1 + 44) |= v43;
          }
        }
        while (v43);
      }
      goto LABEL_71;
    }
    v31 = v23 >> 3;
    v32 = v15;
    if (!v47)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 2)
      break;
    if ((_DWORD)v31 == 1)
    {
      if (v32)
      {
        if ((*(_BYTE *)(a1 + 44) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_69;
          v9 -= *(_BYTE *)(a1 + 44) & 1;
        }
        else
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v37;

          --v9;
        }
        goto LABEL_56;
      }
LABEL_50:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_69;
      goto LABEL_56;
    }
    if (!PBReaderSkipValueWithTag())
      goto LABEL_69;
LABEL_56:
    if (v9)
      v41 = 1;
    else
      v41 = v15;
    if ((v41 & 1) == 0)
      goto LABEL_60;
  }
  if (!v32)
    goto LABEL_50;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_69:
      v42 = 0;
      goto LABEL_70;
    }
    v9 += *(unsigned __int8 *)(a1 + 44) << 30 >> 31;
    goto LABEL_56;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_69;
  v39 = objc_alloc_init(GEOLPRVehicleType);
  if (GEOLPRVehicleTypeReadAllFrom((uint64_t)v39, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    v40 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v39;

    --v9;
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_56;
  }

  v42 = 0;
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
  *(_BYTE *)(a1 + 44) |= 1u;
  *(_BYTE *)(a1 + 44) |= 2u;
  if ((v42 & 1) != 0)
  {
LABEL_71:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (!v15)
      return v3;
    goto LABEL_72;
  }
  v3 = 0;
  if (v15)
  {
LABEL_72:
    v45 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189573128(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18957320C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRVehicleTypeMapReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRVehicleTypeMapReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLPRVehicleTypeMapReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLPRVehicleTypeMapReadAllFrom_initialTag;
  Specified = GEOLPRVehicleTypeMapReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1895733B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189573514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOLPRVehicleTypeMapIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 44) & 5) != 0)
    return (os_unfair_lock_s *)1;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    return GEOLPRVehicleTypeIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  return 0;
}

void sub_1895736D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRWorldReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  GEOLPRVehicleTypeMap *v35;
  char v36;
  int v37;
  char v38;
  void *v39;
  char v41;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 | (v11 > 1);
        if (v10 & 1 | (v11 > 1) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v41 = (v7 != 0) | v14;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_59;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v19 += 7;
      if (v20++ >= 9)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_25:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_59:
      if ((v14 & 1) != 0)
      {
        v36 = 1;
        goto LABEL_67;
      }
      if (v15)
      {
        while (1)
        {
          v37 = *v15++;
          v38 = 2;
          switch(v37)
          {
            case 0:
              goto LABEL_68;
            case 1:
              goto LABEL_65;
            case 3:
              v38 = 1;
              goto LABEL_65;
            case 4:
              v38 = 4;
LABEL_65:
              *(_BYTE *)(a1 + 52) |= v38;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_68;
    }
    v29 = v21 >> 3;
    v30 = v14;
    if (!((v15 == 0) | v14 & 1))
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 4)
    {
      if (v30 && (*(_BYTE *)(a1 + 52) & 4) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_66;
        v35 = objc_alloc_init(GEOLPRVehicleTypeMap);
        if (!GEOLPRVehicleTypeMapReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
          goto LABEL_73;
        PBReaderRecallMark();
        -[GEOLPRWorld _addNoFlagsVehicleTypes:](a1, v35);
        goto LABEL_54;
      }
      goto LABEL_57;
    }
    if ((_DWORD)v29 == 3)
      break;
    if ((_DWORD)v29 != 1)
    {
      if (!PBReaderSkipValueWithTag())
        goto LABEL_66;
      goto LABEL_58;
    }
    if (v30 && (*(_BYTE *)(a1 + 52) & 2) == 0)
    {
      if ((PBReaderPlaceMark() & 1) == 0)
        goto LABEL_66;
      v35 = objc_alloc_init(GEOLPRRegion);
      if (!GEOLPRRegionReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
        goto LABEL_73;
      PBReaderRecallMark();
      -[GEOLPRWorld _addNoFlagsRegions:](a1, v35);
      goto LABEL_54;
    }
LABEL_57:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_66:
      v36 = 0;
      goto LABEL_67;
    }
LABEL_58:
    if ((v41 & 1) == 0)
      goto LABEL_59;
  }
  if (!v30 || (*(_BYTE *)(a1 + 52) & 1) != 0)
    goto LABEL_57;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_66;
  v35 = objc_alloc_init(GEOLPRPowerTypeMap);
  if (GEOLPRPowerTypeMapReadAllFrom((uint64_t)v35, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    -[GEOLPRWorld _addNoFlagsPowerTypes:](a1, v35);
LABEL_54:

    v17 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_73:

  v36 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_67:
  *(_BYTE *)(a1 + 52) |= 2u;
  *(_BYTE *)(a1 + 52) |= 1u;
  *(_BYTE *)(a1 + 52) |= 4u;
  if ((v36 & 1) != 0)
  {
LABEL_68:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if ((v14 & 1) == 0)
      return v3;
    goto LABEL_69;
  }
  v3 = 0;
  if ((v14 & 1) != 0)
  {
LABEL_69:
    v39 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189574660(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLPRWorldReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLPRWorldReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 40) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 44) = objc_msgSend(v6, "length");
      Specified = GEOLPRWorldReadSpecified(a1, (unint64_t)v6, (int *)&GEOLPRWorldReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895747E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189574CD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189575270(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetGEOFormattedStringLog()
{
  if (qword_1ECDBC420 != -1)
    dispatch_once(&qword_1ECDBC420, &__block_literal_global_207_0);
  return (id)qword_1ECDBC418;
}

id GEOGetGEOComposedRouteTrafficLog()
{
  if (qword_1ECDBC430 != -1)
    dispatch_once(&qword_1ECDBC430, &__block_literal_global_184_0);
  return (id)_MergedGlobals_276;
}

void sub_189578940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189578B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189578C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOPDCameraFrameReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 56) |= 2u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__latitude;
            goto LABEL_52;
          case 2u:
            *(_BYTE *)(a1 + 56) |= 4u;
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v22 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__longitude;
            goto LABEL_52;
          case 3u:
            *(_BYTE *)(a1 + 56) |= 1u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__altitude;
            goto LABEL_52;
          case 4u:
            *(_BYTE *)(a1 + 56) |= 0x20u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__yaw;
            goto LABEL_52;
          case 5u:
            *(_BYTE *)(a1 + 56) |= 8u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__pitch;
            goto LABEL_52;
          case 6u:
            *(_BYTE *)(a1 + 56) |= 0x10u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDCameraFrame__roll;
LABEL_52:
            *(_QWORD *)(a1 + *v31) = v20;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_55;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_55:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_18957C81C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDCameraFrameReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDCameraFrameReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18957C87C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDCameraFrameIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
          if (v16 != 1)
            goto LABEL_28;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_25;
        default:
          if (!PBReaderSkipValueWithTag())
          {
LABEL_28:
            v21 = 0;
            goto LABEL_27;
          }
LABEL_25:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_26;
          break;
      }
    }
  }
LABEL_26:
  v21 = a1[*v4] == 0;
LABEL_27:
  PBReaderRecallMark();
  return v21;
}

void sub_18957D54C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDCameraMetadataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int *v13;
  GEOPDOrientedPosition *v14;
  int *v15;
  int *v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  void *v56;
  int *v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  char v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  int v76;
  char v77;
  void *v78;
  int v80;
  char v81;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 80) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 5) & 1)
      + ((*(unsigned __int8 *)(a1 + 80) >> 3) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 1);
  if (((v12 | v8) & 1) != 0)
    v13 = 0;
  else
    v13 = a3;
  LODWORD(v14) = v12;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_123:
    if ((v14 & 1) != 0)
    {
      v75 = 1;
      goto LABEL_125;
    }
    if (v13)
    {
      while (1)
      {
        v76 = *v13++;
        v77 = 16;
        switch(v76)
        {
          case 0:
            goto LABEL_133;
          case 4:
            goto LABEL_132;
          case 5:
            v77 = 32;
            goto LABEL_132;
          case 6:
            v77 = 8;
LABEL_132:
            *(_BYTE *)(a1 + 80) |= v77;
            break;
          default:
            continue;
        }
      }
    }
    goto LABEL_133;
  }
  v81 = (v13 == 0) | v12;
  v17 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v16))
      goto LABEL_123;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *v15;
      v22 = *(_QWORD *)(v3 + v21);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
      *(_QWORD *)(v3 + v21) = v23;
      v20 |= (unint64_t)(v24 & 0x7F) << v18;
      if ((v24 & 0x80) == 0)
        goto LABEL_24;
      v18 += 7;
      v25 = v19++ >= 9;
      if (v25)
      {
        v20 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_24:
    v26 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v20 = 0;
LABEL_26:
    v27 = v20 & 7;
    if (v26 || v27 == 4)
      goto LABEL_123;
    v29 = v20 >> 3;
    v30 = (char)v14;
    if ((v81 & 1) == 0)
    {
      v31 = v13;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_90;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 80) |= 1u;
        while (1)
        {
          v38 = *v15;
          v39 = *(_QWORD *)(v3 + v38);
          v40 = v39 + 1;
          if (v39 == -1 || v40 > *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v39);
          *(_QWORD *)(v3 + v38) = v40;
          v37 |= (unint64_t)(v41 & 0x7F) << v35;
          if ((v41 & 0x80) == 0)
            goto LABEL_93;
          v35 += 7;
          v25 = v36++ >= 9;
          if (v25)
          {
            LODWORD(v37) = 0;
            goto LABEL_95;
          }
        }
        *(_BYTE *)(v3 + *v16) = 1;
LABEL_93:
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v37) = 0;
LABEL_95:
        v66 = 68;
        goto LABEL_104;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_90;
        v43 = 0;
        v44 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 80) |= 4u;
        while (2)
        {
          v45 = *v15;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v37 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v25 = v44++ >= 9;
              if (v25)
              {
                LODWORD(v37) = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v37) = 0;
LABEL_99:
        v66 = 76;
        goto LABEL_104;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_90;
        v49 = 0;
        v50 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 80) |= 2u;
        while (2)
        {
          v51 = *v15;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v37 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v25 = v50++ >= 9;
              if (v25)
              {
                LODWORD(v37) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v37) = 0;
LABEL_103:
        v66 = 72;
LABEL_104:
        *(_DWORD *)(a1 + v66) = v37;
        goto LABEL_121;
      case 4:
        if (!v30)
          goto LABEL_90;
        if ((*(_BYTE *)(a1 + 80) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          v67 = 8 * *(_BYTE *)(a1 + 80);
          goto LABEL_109;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v80 = (int)v14;
        v14 = objc_alloc_init(GEOPDLensProjection);
        if (!GEOPDLensProjectionReadAllFrom((uint64_t)v14, (void *)v3))
          goto LABEL_138;
        PBReaderRecallMark();
        v55 = 40;
        goto LABEL_74;
      case 5:
        if (!v30)
          goto LABEL_90;
        if ((*(_BYTE *)(a1 + 80) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_137:
            v75 = 0;
            goto LABEL_139;
          }
          v67 = 4 * *(_BYTE *)(a1 + 80);
LABEL_109:
          v7 += v67 >> 7;
          goto LABEL_120;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_137;
        v80 = (int)v14;
        v14 = objc_alloc_init(GEOPDOrientedPosition);
        if (GEOPDOrientedPositionReadAllFrom((uint64_t)v14, (void *)v3))
        {
          PBReaderRecallMark();
          v55 = 48;
LABEL_74:
          v56 = *(void **)(a1 + v55);
          *(_QWORD *)(a1 + v55) = v14;

          --v7;
          LODWORD(v14) = v80;
LABEL_120:
          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_121:
          if (!(v14 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_123;
          continue;
        }
LABEL_138:

        v75 = 0;
        LOBYTE(v14) = v80;
LABEL_139:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_125:
        *(_BYTE *)(a1 + 80) |= 0x10u;
        *(_BYTE *)(a1 + 80) |= 0x20u;
        *(_BYTE *)(a1 + 80) |= 8u;
        if ((v75 & 1) != 0)
        {
LABEL_133:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if ((v14 & 1) != 0)
            goto LABEL_134;
          return v3;
        }
        v3 = 0;
        if ((v14 & 1) == 0)
          return v3;
LABEL_134:
        v78 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      case 6:
        if (v30 && (*(_BYTE *)(a1 + 80) & 8) == 0)
        {
          if (v27 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_137;
            while (1)
            {
              v57 = (int *)MEMORY[0x1E0D82BC8];
              if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
                break;
              v58 = 0;
              v59 = 0;
              v60 = 0;
              while (1)
              {
                v61 = *v15;
                v62 = *(_QWORD *)(v3 + v61);
                v63 = v62 + 1;
                if (v62 == -1 || v63 > *(_QWORD *)(v3 + *v6))
                  break;
                v64 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v62);
                *(_QWORD *)(v3 + v61) = v63;
                v60 |= (unint64_t)(v64 & 0x7F) << v58;
                if (v64 < 0)
                {
                  v58 += 7;
                  v25 = v59++ >= 9;
                  if (!v25)
                    continue;
                }
                goto LABEL_89;
              }
              *(_BYTE *)(v3 + *v57) = 1;
LABEL_89:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            while (1)
            {
              v71 = *v15;
              v72 = *(_QWORD *)(v3 + v71);
              v73 = v72 + 1;
              if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
                break;
              v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v72);
              *(_QWORD *)(v3 + v71) = v73;
              v70 |= (unint64_t)(v74 & 0x7F) << v68;
              if (v74 < 0)
              {
                v68 += 7;
                v25 = v69++ >= 9;
                if (!v25)
                  continue;
              }
              goto LABEL_119;
            }
            *(_BYTE *)(v3 + *v16) = 1;
LABEL_119:
            PBRepeatedUInt32Add();
          }
          goto LABEL_120;
        }
LABEL_90:
        v65 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if ((v65 & 1) == 0)
        {
LABEL_136:
          v75 = 0;
          goto LABEL_125;
        }
        goto LABEL_121;
      default:
        v42 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_136;
        goto LABEL_121;
    }
  }
}

void sub_18957DE9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18957DF84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18957E35C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDCameraMetadataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDCameraMetadataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDCameraMetadataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDCameraMetadataReadAllFrom_initialTag;
  Specified = GEOPDCameraMetadataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 48), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18957ED54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18957EF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDCameraMetadataIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 80) & 0x78) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_18957F1F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDGeographicCoordinateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDGeographicCoordinateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18957F7D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18957FF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundDataBuildReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  BOOL v16;
  int v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  _BOOL4 v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char v95;
  uint64_t v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  char v111;
  int v112;
  int v113;
  __int16 v114;
  void *v115;
  int v117;
  BOOL v118;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (HIBYTE(*(unsigned __int16 *)(a1 + 108)) & 1) + ((*(unsigned __int16 *)(a1 + 108) >> 9) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_192:
    if (v12)
    {
      v111 = 1;
      goto LABEL_194;
    }
    if (!v13)
      goto LABEL_205;
    while (1)
    {
      v113 = *v13++;
      v112 = v113;
      if (v113 == 8)
        break;
      if (v112 == 10)
      {
        v114 = 512;
LABEL_204:
        *(_WORD *)(a1 + 108) |= v114;
      }
      else if (!v112)
      {
        goto LABEL_205;
      }
    }
    v114 = 256;
    goto LABEL_204;
  }
  if (v13)
    v16 = (v9 & 1 | v10) != 0;
  else
    v16 = 1;
  if (v8)
    v17 = 1;
  else
    v17 = v12;
  v117 = v17;
  v118 = v16;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_192;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v14;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_30;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_32;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_30:
    v27 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v21 = 0;
LABEL_32:
    v28 = v21 & 7;
    if (v27 || v28 == 4)
      goto LABEL_192;
    v30 = v21 >> 3;
    v31 = v12;
    if (!v118)
    {
      v32 = v13;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 0x20u;
        while (1)
        {
          v39 = *v14;
          v40 = *(_QWORD *)(v3 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(v3 + *v6))
            break;
          v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v40);
          *(_QWORD *)(v3 + v39) = v41;
          v38 |= (unint64_t)(v42 & 0x7F) << v36;
          if ((v42 & 0x80) == 0)
            goto LABEL_139;
          v36 += 7;
          v26 = v37++ >= 9;
          if (v26)
          {
            LODWORD(v38) = 0;
            goto LABEL_141;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_139:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_141:
        v96 = 96;
        goto LABEL_166;
      case 3:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v43 = 0;
        v44 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 2u;
        while (2)
        {
          v45 = *v14;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v38 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v26 = v44++ >= 9;
              if (v26)
              {
                LODWORD(v38) = 0;
                goto LABEL_145;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_145:
        v96 = 80;
        goto LABEL_166;
      case 5:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v49 = 0;
        v50 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 4u;
        while (2)
        {
          v51 = *v14;
          v52 = *(_QWORD *)(v3 + v51);
          v53 = v52 + 1;
          if (v52 == -1 || v53 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v52);
            *(_QWORD *)(v3 + v51) = v53;
            v38 |= (unint64_t)(v54 & 0x7F) << v49;
            if (v54 < 0)
            {
              v49 += 7;
              v26 = v50++ >= 9;
              if (v26)
              {
                LODWORD(v38) = 0;
                goto LABEL_149;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_149:
        v96 = 84;
        goto LABEL_166;
      case 6:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v55 = 0;
        v56 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 0x80u;
        while (2)
        {
          v57 = *v14;
          v58 = *(_QWORD *)(v3 + v57);
          v59 = v58 + 1;
          if (v58 == -1 || v59 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v58);
            *(_QWORD *)(v3 + v57) = v59;
            v38 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v26 = v56++ >= 9;
              if (v26)
              {
                LODWORD(v38) = 0;
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_153:
        v96 = 104;
        goto LABEL_166;
      case 7:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        *(_WORD *)(a1 + 108) |= 0x10u;
        v61 = *v14;
        v62 = *(_QWORD *)(v3 + v61);
        if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v63 = *(_DWORD *)(*(_QWORD *)(v3 + *v18) + v62);
          *(_QWORD *)(v3 + v61) = v62 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v15) = 1;
          v63 = 0;
        }
        *(_DWORD *)(a1 + 92) = v63;
        goto LABEL_167;
      case 8:
        if (!v31 || (*(_WORD *)(a1 + 108) & 0x100) != 0)
          goto LABEL_136;
        if (v28 != 2)
        {
          v97 = 0;
          v98 = 0;
          v99 = 0;
          while (1)
          {
            v100 = *v14;
            v101 = *(_QWORD *)(v3 + v100);
            v102 = v101 + 1;
            if (v101 == -1 || v102 > *(_QWORD *)(v3 + *v6))
              break;
            v103 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v101);
            *(_QWORD *)(v3 + v100) = v102;
            v99 |= (unint64_t)(v103 & 0x7F) << v97;
            if (v103 < 0)
            {
              v97 += 7;
              v26 = v98++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_189;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_189:
          PBRepeatedInt32Add();
          goto LABEL_167;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_208;
        while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
        {
          v64 = 0;
          v65 = 0;
          v66 = 0;
          while (1)
          {
            v67 = *v14;
            v68 = *(_QWORD *)(v3 + v67);
            v69 = v68 + 1;
            if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
              break;
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v26 = v65++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_96;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_96:
          PBRepeatedInt32Add();
        }
        goto LABEL_170;
      case 9:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v71 = 0;
        v72 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 1u;
        while (2)
        {
          v73 = *v14;
          v74 = *(_QWORD *)(v3 + v73);
          v75 = v74 + 1;
          if (v74 == -1 || v75 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v74);
            *(_QWORD *)(v3 + v73) = v75;
            v38 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v26 = v72++ >= 9;
              if (v26)
              {
                LODWORD(v38) = 0;
                goto LABEL_157;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_157:
        v96 = 76;
        goto LABEL_166;
      case 10:
        if (!v31 || (*(_WORD *)(a1 + 108) & 0x200) != 0)
          goto LABEL_136;
        if (v28 != 2)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          while (1)
          {
            v107 = *v14;
            v108 = *(_QWORD *)(v3 + v107);
            v109 = v108 + 1;
            if (v108 == -1 || v109 > *(_QWORD *)(v3 + *v6))
              break;
            v110 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v108);
            *(_QWORD *)(v3 + v107) = v109;
            v106 |= (unint64_t)(v110 & 0x7F) << v104;
            if (v110 < 0)
            {
              v104 += 7;
              v26 = v105++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_191;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_191:
          PBRepeatedUInt32Add();
          goto LABEL_167;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_208;
        while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
        {
          v77 = 0;
          v78 = 0;
          v79 = 0;
          while (1)
          {
            v80 = *v14;
            v81 = *(_QWORD *)(v3 + v80);
            v82 = v81 + 1;
            if (v81 == -1 || v82 > *(_QWORD *)(v3 + *v6))
              break;
            v83 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v81);
            *(_QWORD *)(v3 + v80) = v82;
            v79 |= (unint64_t)(v83 & 0x7F) << v77;
            if (v83 < 0)
            {
              v77 += 7;
              v26 = v78++ >= 9;
              if (!v26)
                continue;
            }
            goto LABEL_119;
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_119:
          PBRepeatedUInt32Add();
        }
LABEL_170:
        PBReaderRecallMark();
        if ((v117 & 1) == 0)
          goto LABEL_192;
        goto LABEL_168;
      case 11:
        if ((v7 & 1) == 0)
          goto LABEL_136;
        v84 = 0;
        v85 = 0;
        v38 = 0;
        *(_WORD *)(a1 + 108) |= 0x40u;
        while (2)
        {
          v86 = *v14;
          v87 = *(_QWORD *)(v3 + v86);
          v88 = v87 + 1;
          if (v87 == -1 || v88 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v89 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v87);
            *(_QWORD *)(v3 + v86) = v88;
            v38 |= (unint64_t)(v89 & 0x7F) << v84;
            if (v89 < 0)
            {
              v84 += 7;
              v26 = v85++ >= 9;
              if (v26)
              {
                LODWORD(v38) = 0;
                goto LABEL_161;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v38) = 0;
LABEL_161:
        v96 = 100;
        goto LABEL_166;
      case 12:
        if ((v7 & 1) != 0)
        {
          v90 = 0;
          v91 = 0;
          v38 = 0;
          *(_WORD *)(a1 + 108) |= 8u;
          while (1)
          {
            v92 = *v14;
            v93 = *(_QWORD *)(v3 + v92);
            v94 = v93 + 1;
            if (v93 == -1 || v94 > *(_QWORD *)(v3 + *v6))
              break;
            v95 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v93);
            *(_QWORD *)(v3 + v92) = v94;
            v38 |= (unint64_t)(v95 & 0x7F) << v90;
            if ((v95 & 0x80) == 0)
              goto LABEL_163;
            v90 += 7;
            v26 = v91++ >= 9;
            if (v26)
            {
              LODWORD(v38) = 0;
              goto LABEL_165;
            }
          }
          *(_BYTE *)(v3 + *v15) = 1;
LABEL_163:
          if (*(_BYTE *)(v3 + *v15))
            LODWORD(v38) = 0;
LABEL_165:
          v96 = 88;
LABEL_166:
          *(_DWORD *)(a1 + v96) = v38;
LABEL_167:
          if (!v117)
            goto LABEL_192;
LABEL_168:
          if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_192;
          continue;
        }
LABEL_136:
        if ((PBReaderSkipValueWithTag() & 1) != 0)
          goto LABEL_167;
LABEL_208:
        v111 = 0;
LABEL_194:
        *(_WORD *)(a1 + 108) |= 0x100u;
        *(_WORD *)(a1 + 108) |= 0x200u;
        if ((v111 & 1) != 0)
        {
LABEL_205:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if (v12)
            goto LABEL_206;
          return v3;
        }
        v3 = 0;
        if (!v12)
          return v3;
LABEL_206:
        v115 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = 0;

        return v3;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_208;
        goto LABEL_167;
    }
  }
}

void sub_189580C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDGroundDataBuildReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDGroundDataBuildReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDGroundDataBuildReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDGroundDataBuildReadAllFrom_initialTag;
  Specified = GEOPDGroundDataBuildReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

void sub_189581A7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189581D6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDGroundDataBuildIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v2 = (*(_WORD *)(a1 + 108) & 0x700) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return v2;
}

void sub_18958206C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDLensProjectionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_WORD *)(a1 + 84) |= 0x200u;
            break;
          case 2u:
            *(_WORD *)(a1 + 84) |= 8u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 32;
            goto LABEL_78;
          case 3u:
            *(_WORD *)(a1 + 84) |= 4u;
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v29);
              *(_QWORD *)&v3[v28] = v29 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 24;
            goto LABEL_78;
          case 4u:
            *(_WORD *)(a1 + 84) |= 0x10u;
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v31 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 40;
            goto LABEL_78;
          case 5u:
            *(_WORD *)(a1 + 84) |= 0x20u;
            v32 = *v4;
            v33 = *(_QWORD *)&v3[v32];
            if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v33);
              *(_QWORD *)&v3[v32] = v33 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 48;
            goto LABEL_78;
          case 6u:
            *(_WORD *)(a1 + 84) |= 0x40u;
            v34 = *v4;
            v35 = *(_QWORD *)&v3[v34];
            if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v35);
              *(_QWORD *)&v3[v34] = v35 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 56;
            goto LABEL_78;
          case 7u:
            *(_WORD *)(a1 + 84) |= 1u;
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            if (v37 <= 0xFFFFFFFFFFFFFFF7 && v37 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v37);
              *(_QWORD *)&v3[v36] = v37 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 8;
            goto LABEL_78;
          case 8u:
            *(_WORD *)(a1 + 84) |= 2u;
            v38 = *v4;
            v39 = *(_QWORD *)&v3[v38];
            if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v39);
              *(_QWORD *)&v3[v38] = v39 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 16;
            goto LABEL_78;
          case 9u:
            *(_WORD *)(a1 + 84) |= 0x80u;
            v40 = *v4;
            v41 = *(_QWORD *)&v3[v40];
            if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v41);
              *(_QWORD *)&v3[v40] = v41 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 64;
            goto LABEL_78;
          case 0xAu:
            *(_WORD *)(a1 + 84) |= 0x100u;
            v42 = *v4;
            v43 = *(_QWORD *)&v3[v42];
            if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v27 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v43);
              *(_QWORD *)&v3[v42] = v43 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v27 = 0;
            }
            v44 = 72;
LABEL_78:
            *(_QWORD *)(a1 + v44) = v27;
            continue;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_81;
            continue;
        }
        while (1)
        {
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            break;
          v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
          *(_QWORD *)&v3[v21] = v23;
          v20 |= (unint64_t)(v24 & 0x7F) << v18;
          if ((v24 & 0x80) == 0)
            goto LABEL_57;
          v18 += 7;
          v15 = v19++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_59;
          }
        }
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_59:
        *(_DWORD *)(a1 + 80) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v45 = v3[*v6] == 0;
  }
  else
  {
LABEL_81:
    v45 = 0;
  }
  objc_sync_exit(v3);

  return v45;
}

void sub_189582E08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895839A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDLocationInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int v36;
  char v37;
  char v38;
  char v39;
  int v40;
  char v41;
  void *v42;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 | (v10 > 1);
  if (v7 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_63;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_63:
      if ((v12 & 1) != 0)
      {
        v39 = 1;
        goto LABEL_72;
      }
      if (v13)
      {
        while (1)
        {
          v40 = *v13++;
          v41 = 2;
          switch(v40)
          {
            case 0:
              goto LABEL_73;
            case 1:
              goto LABEL_69;
            case 2:
              v41 = 4;
              goto LABEL_69;
            case 3:
              v41 = 1;
LABEL_69:
              *(_BYTE *)(a1 + 52) |= v41;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_73;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    if ((_DWORD)v27 == 3)
    {
      if (!v28)
        goto LABEL_52;
      if ((*(_BYTE *)(a1 + 52) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v9 -= *(_BYTE *)(a1 + 52) & 1;
        goto LABEL_61;
      }
      PBReaderReadString();
      v33 = objc_claimAutoreleasedReturnValue();
      v34 = 16;
LABEL_49:
      v35 = *(void **)(a1 + v34);
      *(_QWORD *)(a1 + v34) = v33;

      --v9;
      goto LABEL_61;
    }
    if ((_DWORD)v27 != 2)
    {
      if ((_DWORD)v27 != 1)
      {
        v36 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v36)
          goto LABEL_70;
        goto LABEL_62;
      }
      if (v28)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 24;
          goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_71;
        v38 = *(_BYTE *)(a1 + 52) << 6;
LABEL_60:
        v9 += v38 >> 7;
LABEL_61:
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_62:
        if (!(v12 & 1 | (v9 != 0)))
          goto LABEL_63;
        continue;
      }
LABEL_52:
      v37 = PBReaderSkipValueWithTag();
      v15 = (int *)MEMORY[0x1E0D82BC8];
      if ((v37 & 1) == 0)
      {
LABEL_70:
        v39 = 0;
        goto LABEL_72;
      }
      goto LABEL_62;
    }
    break;
  }
  if (!v28)
    goto LABEL_52;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v33 = objc_claimAutoreleasedReturnValue();
    v34 = 32;
    goto LABEL_49;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v38 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_60;
  }
LABEL_71:
  v39 = 0;
  v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_72:
  *(_BYTE *)(a1 + 52) |= 2u;
  *(_BYTE *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 52) |= 1u;
  if ((v39 & 1) != 0)
  {
LABEL_73:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if ((v12 & 1) == 0)
      return v3;
    goto LABEL_74;
  }
  v3 = 0;
  if ((v12 & 1) != 0)
  {
LABEL_74:
    v42 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189583F38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189584074(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189584368(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDLocationInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDLocationInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDLocationInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDLocationInfoReadAllFrom_initialTag;
  Specified = GEOPDLocationInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1895844F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDLocationInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDLocationInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189584550(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDLocationInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_32;
LABEL_26:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_32;
        goto LABEL_29;
      }
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2)
          goto LABEL_32;
        goto LABEL_26;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_32:
        v18 = 0;
        goto LABEL_31;
      }
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2)
      goto LABEL_32;
    goto LABEL_26;
  }
LABEL_30:
  v18 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v18;
}

void sub_1895848BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDLocationInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189584B88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189584F18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDMuninViewStateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v30;
  unint64_t v32;
  _BOOL4 v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  GEOPDCameraFrame *v38;
  uint64_t v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  BOOL v49;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v49 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_64;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v18;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v6))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_64:
      if (v15)
      {
        v44 = 1;
        goto LABEL_76;
      }
      if (v16)
      {
        do
        {
          while (1)
          {
            v46 = *v16++;
            v45 = v46;
            if (v46 != 1 && v45 != 2)
              break;
            *(_BYTE *)(a1 + v21[836]) |= v45;
          }
        }
        while (v45);
      }
      goto LABEL_77;
    }
    v32 = v24 >> 3;
    v33 = v15;
    if (!v49)
    {
      v34 = v16;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 2)
      break;
    if ((_DWORD)v32 != 1)
    {
      v41 = PBReaderSkipValueWithTag();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
        goto LABEL_72;
      goto LABEL_60;
    }
    if (v33)
    {
      if ((*(_BYTE *)(a1 + v21[836]) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_73;
        v7 -= *(_BYTE *)(a1 + v21[836]) & 1;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_73;
        v38 = objc_alloc_init(GEOPDCameraFrame);
        if (!GEOPDCameraFrameReadAllFrom((uint64_t)v38, (void *)v3))
          goto LABEL_74;
        PBReaderRecallMark();
        v39 = 16;
LABEL_50:
        v40 = *(void **)(a1 + v39);
        *(_QWORD *)(a1 + v39) = v38;

        --v7;
        v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      }
LABEL_59:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_60;
    }
LABEL_53:
    v42 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
LABEL_72:
      v44 = 0;
      goto LABEL_76;
    }
LABEL_60:
    if (v7)
      v43 = 1;
    else
      v43 = v15;
    if ((v43 & 1) == 0)
      goto LABEL_64;
  }
  if (!v33)
    goto LABEL_53;
  if ((*(_BYTE *)(a1 + v21[836]) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_73:
      v44 = 0;
      goto LABEL_75;
    }
    v7 += *(unsigned __int8 *)(a1 + v21[836]) << 30 >> 31;
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_73;
  v38 = objc_alloc_init(GEOPDLocationInfo);
  if (GEOPDLocationInfoReadAllFrom((uint64_t)v38, (void *)v3, v9 & 1))
  {
    PBReaderRecallMark();
    v39 = 24;
    goto LABEL_50;
  }
LABEL_74:

  v44 = 0;
  v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_75:
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
  *(_BYTE *)(a1 + v21[836]) |= 1u;
  *(_BYTE *)(a1 + v21[836]) |= 2u;
  if ((v44 & 1) != 0)
  {
LABEL_77:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (!v15)
      return v3;
    goto LABEL_78;
  }
  v3 = 0;
  if (v15)
  {
LABEL_78:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1895854D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189585948(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDMuninViewStateReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDMuninViewStateReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDMuninViewStateReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDMuninViewStateReadAllFrom_initialTag;
  Specified = GEOPDMuninViewStateReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189585AFC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDMuninViewStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDMuninViewStateReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189585B5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDMuninViewStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDCameraFrameIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDLocationInfoIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189585EC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOPDMuninViewStateIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  if ((*(_BYTE *)(a1 + 44) & 5) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 44) & 2) != 0)
    return GEOPDLocationInfoIsDirty(*(_QWORD *)(a1 + 24));
  return 0;
}

os_unfair_lock_s *GEOPDMuninViewStateIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDMuninViewStateIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 10);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1895861A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedBoundingBoxReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOPDOrientedPosition *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_44;
            v18 = objc_alloc_init(GEOPDOrientedPosition);
            if (GEOPDOrientedPositionReadAllFrom((uint64_t)v18, v3))
            {
              PBReaderRecallMark();
              v19 = *(void **)(a1 + 24);
              *(_QWORD *)(a1 + 24) = v18;

              break;
            }

            goto LABEL_44;
          case 2u:
            *(_BYTE *)(a1 + 40) |= 4u;
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 32;
            goto LABEL_40;
          case 3u:
            *(_BYTE *)(a1 + 40) |= 2u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 16;
            goto LABEL_40;
          case 4u:
            *(_BYTE *)(a1 + 40) |= 1u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v22 = 0;
            }
            v27 = 8;
LABEL_40:
            *(_QWORD *)(a1 + v27) = v22;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_44;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v28 = v3[*v6] == 0;
  }
  else
  {
LABEL_44:
    v28 = 0;
  }
  objc_sync_exit(v3);

  return v28;
}

void sub_189586C1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedBoundingBoxReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDOrientedBoundingBoxReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189586C7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedBoundingBoxIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDOrientedPositionIsValid(a1))
            goto LABEL_33;
          PBReaderRecallMark();
          goto LABEL_30;
        case 2u:
        case 3u:
        case 4u:
          if (v16 != 1)
            goto LABEL_33;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_30;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            PBReaderRecallMark();
            return 0;
          }
LABEL_30:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_31;
          break;
      }
    }
  }
LABEL_31:
  v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

BOOL GEOPDOrientedPositionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int *v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 56) |= 4u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v19 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__x;
            goto LABEL_52;
          case 2u:
            *(_BYTE *)(a1 + 56) |= 0x10u;
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v22 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__y;
            goto LABEL_52;
          case 3u:
            *(_BYTE *)(a1 + 56) |= 0x20u;
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v24 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__z;
            goto LABEL_52;
          case 4u:
            *(_BYTE *)(a1 + 56) |= 8u;
            v25 = *v4;
            v26 = *(_QWORD *)&v3[v25];
            if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v26);
              *(_QWORD *)&v3[v25] = v26 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__yaw;
            goto LABEL_52;
          case 5u:
            *(_BYTE *)(a1 + 56) |= 1u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__pitch;
            goto LABEL_52;
          case 6u:
            *(_BYTE *)(a1 + 56) |= 2u;
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v30 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v20 = 0;
            }
            v31 = &OBJC_IVAR___GEOPDOrientedPosition__roll;
LABEL_52:
            *(_QWORD *)(a1 + *v31) = v20;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_55;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_55:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_189588030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedPositionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDOrientedPositionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189588090(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedTilePositionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  _BOOL8 v57;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 8u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__x;
                goto LABEL_70;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                LODWORD(v20) = 0;
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__x;
                goto LABEL_73;
              }
            }
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__x;
            goto LABEL_71;
          case 2u:
            v27 = 0;
            v28 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 0x20u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__y;
                goto LABEL_70;
              }
              v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
              *(_QWORD *)&v3[v29] = v31;
              v20 |= (unint64_t)(v32 & 0x7F) << v27;
              if (v32 < 0)
              {
                v27 += 7;
                v25 = v28++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__y;
                  goto LABEL_73;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__y;
            goto LABEL_71;
          case 3u:
            v33 = 0;
            v34 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 1u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__altitude;
                goto LABEL_70;
              }
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v20 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                v25 = v34++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__altitude;
                  goto LABEL_73;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__altitude;
            goto LABEL_71;
          case 4u:
            v39 = 0;
            v40 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 0x10u;
            while (2)
            {
              v41 = *v4;
              v42 = *(_QWORD *)&v3[v41];
              v43 = v42 + 1;
              if (v42 == -1 || v43 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__yaw;
                goto LABEL_70;
              }
              v44 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v42);
              *(_QWORD *)&v3[v41] = v43;
              v20 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                v25 = v40++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__yaw;
                  goto LABEL_73;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__yaw;
            goto LABEL_71;
          case 5u:
            v45 = 0;
            v46 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            while (2)
            {
              v47 = *v4;
              v48 = *(_QWORD *)&v3[v47];
              v49 = v48 + 1;
              if (v48 == -1 || v49 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__pitch;
                goto LABEL_70;
              }
              v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v48);
              *(_QWORD *)&v3[v47] = v49;
              v20 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                v25 = v46++ > 8;
                if (v25)
                {
                  LODWORD(v20) = 0;
                  v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__pitch;
                  goto LABEL_73;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__pitch;
            goto LABEL_71;
          case 6u:
            v51 = 0;
            v52 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 32) |= 4u;
            break;
          default:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_83;
            continue;
        }
        while (1)
        {
          v53 = *v4;
          v54 = *(_QWORD *)&v3[v53];
          v55 = v54 + 1;
          if (v54 == -1 || v55 > *(_QWORD *)&v3[*v5])
            break;
          v56 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v54);
          *(_QWORD *)&v3[v53] = v55;
          v20 |= (unint64_t)(v56 & 0x7F) << v51;
          if ((v56 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__roll;
            goto LABEL_71;
          }
          v51 += 7;
          v25 = v52++ > 8;
          if (v25)
          {
            LODWORD(v20) = 0;
            v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__roll;
            goto LABEL_73;
          }
        }
        v26 = &OBJC_IVAR___GEOPDOrientedTilePosition__roll;
LABEL_70:
        v3[*v6] = 1;
LABEL_71:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_73:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v57 = v3[*v6] == 0;
  }
  else
  {
LABEL_83:
    v57 = 0;
  }
  objc_sync_exit(v3);

  return v57;
}

void sub_189589658(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDOrientedTilePositionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDOrientedTilePositionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895896B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189589FAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18958A560(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPhotoPositionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        -[GEOPDCameraMetadata readAll:](*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * v6++), 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(*(id *)(a1 + 88), "readAll:", 1, (_QWORD)v8);
  objc_msgSend(*(id *)(a1 + 80), "readAll:", 1);
  -[GEOPDGroundDataBuild readAll:](*(_QWORD *)(a1 + 40), 1);
  objc_msgSend(*(id *)(a1 + 104), "readAll:", 1);
  return objc_msgSend(*(id *)(a1 + 72), "readAll:", 1);
}

unint64_t GEOPDPhotoPositionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDPhotoPositionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18958B350(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18958B6C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDPhotoPositionIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = *(_WORD *)(a1 + 132);
  if ((v2 & 0x1340) != 0)
    return 1;
  if ((v2 & 0x20) != 0)
  {
    if (GEOPDGroundDataBuildIsDirty(*(_QWORD *)(a1 + 40)))
      return 1;
    v2 = *(_WORD *)(a1 + 132);
  }
  if ((v2 & 0xC90) != 0)
    return 1;
  if ((v2 & 0x40) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 48);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if (GEOPDCameraMetadataIsDirty(*(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i)))
        {
          v3 = 1;
          goto LABEL_20;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_20:

  return v3;
}

os_unfair_lock_s *GEOPDPhotoPositionIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDPhotoPositionIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18958BE88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDRigMetricsReadAllFrom(uint64_t a1, void *a2)
{
  char *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v2[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v2[*MEMORY[0x1E0D82BD8]])
    {
      v6 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v2[*v5])
          break;
        v7 = 0;
        v8 = 0;
        v9 = 0;
        while (1)
        {
          v10 = *v3;
          v11 = *(_QWORD *)&v2[v10];
          v12 = v11 + 1;
          if (v11 == -1 || v12 > *(_QWORD *)&v2[*v4])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v11);
          *(_QWORD *)&v2[v10] = v12;
          v9 |= (unint64_t)(v13 & 0x7F) << v7;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v7 += 7;
          v14 = v8++ >= 9;
          if (v14)
          {
            v9 = 0;
            v15 = v2[*v5];
            goto LABEL_15;
          }
        }
        v2[*v5] = 1;
LABEL_13:
        v15 = v2[*v5];
        if (v2[*v5])
          v9 = 0;
LABEL_15:
        v16 = v9 & 7;
        if (v15 || v16 == 4)
          break;
        if ((v9 >> 3) == 1)
        {
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_47;
            while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4] && !v2[*v5])
            {
              v18 = 0;
              v19 = 0;
              v20 = 0;
              while (1)
              {
                v21 = *v3;
                v22 = *(_QWORD *)&v2[v21];
                v23 = v22 + 1;
                if (v22 == -1 || v23 > *(_QWORD *)&v2[*v4])
                  break;
                v24 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v22);
                *(_QWORD *)&v2[v21] = v23;
                v20 |= (unint64_t)(v24 & 0x7F) << v18;
                if (v24 < 0)
                {
                  v18 += 7;
                  v14 = v19++ >= 9;
                  if (!v14)
                    continue;
                }
                goto LABEL_32;
              }
              v2[*v5] = 1;
LABEL_32:
              PBRepeatedUInt32Add();
            }
            PBReaderRecallMark();
          }
          else
          {
            v25 = 0;
            v26 = 0;
            v27 = 0;
            while (1)
            {
              v28 = *v3;
              v29 = *(_QWORD *)&v2[v28];
              v30 = v29 + 1;
              if (v29 == -1 || v30 > *(_QWORD *)&v2[*v4])
                break;
              v31 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v29);
              *(_QWORD *)&v2[v28] = v30;
              v27 |= (unint64_t)(v31 & 0x7F) << v25;
              if (v31 < 0)
              {
                v25 += 7;
                v14 = v26++ >= 9;
                if (!v14)
                  continue;
              }
              goto LABEL_44;
            }
            v2[*v5] = 1;
LABEL_44:
            PBRepeatedUInt32Add();
          }
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_47;
        }
      }
      while (*(_QWORD *)&v2[*v3] < *(_QWORD *)&v2[*v4]);
    }
    v32 = v2[*v5] == 0;
  }
  else
  {
LABEL_47:
    v32 = 0;
  }
  objc_sync_exit(v2);

  return v32;
}

void sub_18958CE18(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL geo_isDayLightForLocation(double *a1, double a2, double a3)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v5 = *a1;
  v4 = a1[1];
  v6 = (*MEMORY[0x1E0C9ADF8] + a2) / 86400.0;
  v20 = 0;
  v19 = 0u;
  v18 = 0u;
  v17 = 0u;
  v16 = 0u;
  v15 = 0u;
  v14 = 0u;
  v13 = 0u;
  v12 = 0u;
  v11 = 0u;
  v10 = 0u;
  v9 = v6 + 2440587.5;
  geo_getSunPosition((const GEODayCache *)&v9, v5, -v4);
  return v7 - a3 >= 0.0;
}

void geo_enumerateSolarEvents(int a1, int a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v12;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  unsigned int v23;
  double v24;
  _BOOL4 v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  double v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (**v34)(_QWORD, _QWORD, _QWORD, double);
  double v35;
  char v36;
  double v37;
  char v38;
  double v39;
  double v40[2];
  _OWORD v41[3];
  _BYTE v42[260];
  _BYTE v43[24];
  _BYTE *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD v53[3];
  _BYTE v54[260];
  _QWORD v55[3];
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v40[0] = a5;
  v40[1] = a6;
  v39 = a7;
  v38 = a2;
  v12 = a3;
  v34 = (void (**)(_QWORD, _QWORD, _QWORD, double))v12;
  v14 = a4 <= 0.0 || v12 == 0 || a1 == 0;
  if (v14 || a6 < -180.0 || a6 > 180.0 || a5 < -90.0 || a5 > 90.0)
    goto LABEL_47;
  v15 = *MEMORY[0x1E0C9ADF8];
  v16 = (*MEMORY[0x1E0C9ADF8] + a4) / 86400.0 + 2440587.5;
  v17 = 0.000694444444;
  if (a2)
    v18 = -0.000694444444;
  else
    v18 = 0.000694444444;
  v19 = v18 + v16;
  v37 = v18 + v16;
  GEORiseTransitSet::GEORiseTransitSet((uint64_t)v53, v40, &v37, &v39, &GEOSolarFunctionsAccuracySeconds, &v38);
  v20 = 0;
  v21 = 0;
  if (a2)
    v22 = 1.79769313e308;
  else
    v22 = 2.22507386e-308;
  do
  {
    v23 = allEvents[v20];
    if ((v23 & a1) != 0)
    {
      GEORiseTransitSet::eventOfType((GEORiseTransitSet *)v53, v23);
      v25 = v24 < v22;
      if (!a2)
        v25 = v24 > v22;
      if (v25)
      {
        v21 = v20;
        v22 = v24;
      }
    }
    ++v20;
  }
  while (v20 != 10);
  v36 = 0;
  v26 = -v15;
  if (!a2)
    v17 = -0.000694444444;
  v27 = v21;
  do
  {
    do
    {
      v28 = allEvents[v27];
      if ((v28 & a1) != 0)
      {
        GEORiseTransitSet::eventOfType((GEORiseTransitSet *)v53, allEvents[v27]);
        v19 = v29;
        ((void (**)(_QWORD, uint64_t, char *, double))v34)[2](v34, v28, &v36, v26 + (v29 + -2440587.5) * 86400.0);
      }
      if (a2)
      {
        v27 = (v27 + 1) % 0xA;
      }
      else if (v27)
      {
        --v27;
      }
      else
      {
        v27 = 9;
      }
    }
    while (!v36 && v27 != v21);
    v35 = v17 + v19;
    GEORiseTransitSet::GEORiseTransitSet((uint64_t)v41, v40, &v35, &v39, &GEOSolarFunctionsAccuracySeconds, &v38);
    v53[0] = v41[0];
    v53[1] = v41[1];
    v53[2] = v41[2];
    memcpy(v54, v42, sizeof(v54));
    std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](v55, (uint64_t)v43);
    v57 = v45;
    v58 = v46;
    v59 = v47;
    v62 = v50;
    v63 = v51;
    v64 = v52;
    v60 = v48;
    v61 = v49;
    v30 = v44;
    if (v44 == v43)
    {
      v30 = v43;
      v31 = 4;
    }
    else
    {
      if (!v44)
        goto LABEL_41;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_41:
    v27 = v21;
  }
  while (!v36);
  v32 = v55;
  if (v56 == v55)
  {
    v33 = 4;
LABEL_46:
    (*(void (**)(void))(*v32 + 8 * v33))();
  }
  else if (v56)
  {
    v33 = 5;
    v32 = v56;
    goto LABEL_46;
  }
LABEL_47:

}

void sub_18958DF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_18958E048(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18958E0E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18958E1E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id GEOURLAuthenticationGenerateURL(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithURL:resolvingAgainstBaseURL:", a1, 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    GEOURLAuthenticationGenerateURLFromComponents(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void __escapeChars_block_invoke()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;

  objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = (id)objc_msgSend(v0, "mutableCopy");

  objc_msgSend(v3, "removeCharactersInString:", CFSTR("%;/?¿:@&=$+,[]#!'()*<>"));
  v1 = objc_msgSend(v3, "copy");
  v2 = (void *)_MergedGlobals_277;
  _MergedGlobals_277 = v1;

}

id GEOGetGEORouteTrafficBuilderLog()
{
  if (qword_1ECDBC450 != -1)
    dispatch_once(&qword_1ECDBC450, &__block_literal_global_140);
  return (id)_MergedGlobals_278;
}

BOOL GEOTrafficIncidentReadAllFrom(uint64_t a1, void *a2)
{
  unsigned __int8 *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;
  _BOOL8 v16;

  v2 = a2;
  objc_sync_enter(v2);
  if (v2)
  {
    v3 = (int *)MEMORY[0x1E0D82BF0];
    v4 = (int *)MEMORY[0x1E0D82BD8];
    v5 = (int *)MEMORY[0x1E0D82BC8];
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v7 = v2[*v5];
      if (*(_QWORD *)&v2[*v3] >= *(_QWORD *)&v2[*v4])
        break;
      if (v2[*v5])
      {
        v7 = 1;
        break;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)&v2[v11];
        if (v12 == -1 || v12 >= *(_QWORD *)&v2[*v4])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&v2[*v6] + v12);
        *(_QWORD *)&v2[v11] = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_13;
        v8 += 7;
        if (v9++ >= 9)
        {
          LOBYTE(v10) = 0;
          v7 = v2[*v5];
          goto LABEL_15;
        }
      }
      v2[*v5] = 1;
LABEL_13:
      v7 = v2[*v5];
      if (v2[*v5])
        LOBYTE(v10) = 0;
LABEL_15:
      if (v7)
        v15 = 1;
      else
        v15 = (v10 & 7) == 4;
      if (v15)
        break;
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_20;
    }
    v16 = v7 == 0;
  }
  else
  {
LABEL_20:
    v16 = 0;
  }
  objc_sync_exit(v2);

  return v16;
}

void sub_18958FB6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTrafficIncidentReadFrom(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;
  _BOOL8 AllFrom;

  v2 = a2;
  v3 = objc_sync_enter(v2);
  AllFrom = GEOTrafficIncidentReadAllFrom(v3, v2);
  objc_sync_exit(v2);

  return AllFrom;
}

void sub_18958FBC4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTrafficIncidentIsValid(unsigned __int8 *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v14;
  _BOOL8 v15;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v6 = a1[*v4];
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      break;
    if (a1[*v4])
    {
      v6 = 1;
      break;
    }
    v7 = 0;
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = *v2;
      v11 = *(_QWORD *)&a1[v10];
      if (v11 == -1 || v11 >= *(_QWORD *)&a1[*v3])
        break;
      v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v11);
      *(_QWORD *)&a1[v10] = v11 + 1;
      v9 |= (unint64_t)(v12 & 0x7F) << v7;
      if ((v12 & 0x80) == 0)
        goto LABEL_12;
      v7 += 7;
      if (v8++ >= 9)
      {
        LOBYTE(v9) = 0;
        v6 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v6 = a1[*v4];
    if (a1[*v4])
      LOBYTE(v9) = 0;
LABEL_14:
    if (v6)
      v14 = 1;
    else
      v14 = (v9 & 7) == 4;
    if (v14)
      break;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
      v15 = 0;
      goto LABEL_22;
    }
  }
  v15 = v6 == 0;
LABEL_22:
  PBReaderRecallMark();
  return v15;
}

void sub_18958FE5C(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_18958FEC0(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

id GEOGetDeviceConnectionLog()
{
  if (qword_1ECDBC470 != -1)
    dispatch_once(&qword_1ECDBC470, &__block_literal_global_251);
  return (id)qword_1ECDBC468;
}

id _processUUID()
{
  if (qword_1ECDBC480 != -1)
    dispatch_once(&qword_1ECDBC480, &__block_literal_global_254);
  return (id)qword_1ECDBC478;
}

void ___processUUID_block_invoke()
{
  uint64_t v0;
  void *v1;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "UUIDString");
  v0 = objc_claimAutoreleasedReturnValue();
  v1 = (void *)qword_1ECDBC478;
  qword_1ECDBC478 = v0;

}

void sub_1895959A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189595C14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189595E88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895960FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchTokenReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int *v13;
  GEOPDSearchTokenSpan *v14;
  int *v15;
  int *v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  void *v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  char v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 64)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFFFFFEFFFDLL) & 0xFF01FF01FF01FF01));
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 2);
  if (((v12 | v8) & 1) != 0)
    v13 = 0;
  else
    v13 = a3;
  LODWORD(v14) = v12;
  v52 = (v13 == 0) | v12;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  v17 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_81;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *v15;
      v22 = *(_QWORD *)(v3 + v21);
      if (v22 == -1 || v22 >= *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
      *(_QWORD *)(v3 + v21) = v22 + 1;
      v20 |= (unint64_t)(v23 & 0x7F) << v18;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v18 += 7;
      v24 = v19++ >= 9;
      if (v24)
      {
        v20 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v20 = 0;
LABEL_26:
    if (v25 || (v20 & 7) == 4)
    {
LABEL_81:
      if ((v14 & 1) != 0)
      {
        v46 = 1;
        goto LABEL_93;
      }
      if (v13)
      {
        while (1)
        {
          v47 = *v13++;
          v48 = 4;
          switch(v47)
          {
            case 0:
              goto LABEL_94;
            case 1:
              goto LABEL_88;
            case 2:
              v48 = 8;
              goto LABEL_88;
            case 4:
              v48 = 2;
              goto LABEL_88;
            case 5:
              v48 = 16;
LABEL_88:
              *(_BYTE *)(a1 + 64) |= v48;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_94;
    }
    v27 = v20 >> 3;
    v28 = (char)v14;
    if ((v52 & 1) == 0)
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    switch((int)v27)
    {
      case 1:
        if (!v28)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 64) & 4) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 24;
          goto LABEL_46;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v45 = 32 * *(_BYTE *)(a1 + 64);
        goto LABEL_78;
      case 2:
        if (!v28)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 64) & 8) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 32;
LABEL_46:
          v36 = *(void **)(a1 + v34);
          *(_QWORD *)(a1 + v34) = v33;

          --v7;
          goto LABEL_79;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_90;
        v45 = 16 * *(_BYTE *)(a1 + 64);
        goto LABEL_78;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_66;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v40 = *v15;
          v41 = *(_QWORD *)(v3 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v16) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v41);
            *(_QWORD *)(v3 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v24 = v38++ >= 9;
              if (v24)
              {
                LODWORD(v39) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v16))
          LODWORD(v39) = 0;
LABEL_71:
        *(_DWORD *)(a1 + 60) = v39;
        goto LABEL_80;
      case 4:
        if (!v28 || (*(_BYTE *)(a1 + 64) & 2) != 0)
          goto LABEL_66;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v51 = (int)v14;
        v14 = objc_alloc_init(GEOPDSearchTokenForm);
        if (!GEOPDSearchTokenFormReadAllFrom((uint64_t)v14, (void *)v3))
          goto LABEL_91;
        PBReaderRecallMark();
        -[GEOPDSearchToken _addNoFlagsAlternateForm:](a1, v14);

        goto LABEL_65;
      case 5:
        if (!v28)
        {
LABEL_66:
          v44 = PBReaderSkipValueWithTag();
          v16 = (int *)MEMORY[0x1E0D82BC8];
          if ((v44 & 1) == 0)
          {
LABEL_89:
            v46 = 0;
            goto LABEL_93;
          }
          goto LABEL_80;
        }
        if ((*(_BYTE *)(a1 + 64) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_90:
            v46 = 0;
            goto LABEL_92;
          }
          v45 = 8 * *(_BYTE *)(a1 + 64);
LABEL_78:
          v7 += v45 >> 7;
          goto LABEL_79;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_90;
        v51 = (int)v14;
        v14 = objc_alloc_init(GEOPDSearchTokenSpan);
        if (GEOPDSearchTokenSpanReadAllFrom((uint64_t)v14, (void *)v3))
        {
          PBReaderRecallMark();
          v43 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v14;

          --v7;
LABEL_65:
          LODWORD(v14) = v51;
LABEL_79:
          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_80:
          if (!(v14 & 1 | (v7 != 0)))
            goto LABEL_81;
          continue;
        }
LABEL_91:

        v46 = 0;
        LOBYTE(v14) = v51;
LABEL_92:
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_93:
        *(_BYTE *)(a1 + 64) |= 4u;
        *(_BYTE *)(a1 + 64) |= 8u;
        *(_BYTE *)(a1 + 64) |= 2u;
        *(_BYTE *)(a1 + 64) |= 0x10u;
        if ((v46 & 1) != 0)
        {
LABEL_94:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if ((v14 & 1) != 0)
            goto LABEL_95;
        }
        else
        {
          v3 = 0;
          if ((v14 & 1) != 0)
          {
LABEL_95:
            v49 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v35 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v35)
          goto LABEL_89;
        goto LABEL_80;
    }
  }
}

void sub_189596EA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895973E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895974CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDSearchTokenCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v6;
    while (1)
    {
      if (*(_QWORD *)v6 != v4)
        objc_enumerationMutation(v1);
      if (!--v3)
      {
        v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v5, v9, 16);
        if (!v3)
          break;
      }
    }
  }

}

unint64_t GEOPDSearchTokenReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchTokenReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchTokenReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchTokenReadAllFrom_initialTag;
  Specified = GEOPDSearchTokenReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDSearchTokenCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189597734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895979B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189597C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenFormReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  _BOOL8 v25;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v23 = objc_claimAutoreleasedReturnValue();
          v24 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v23;

        }
        else if ((v10 >> 3) == 2)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_32;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v19;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v25 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v25 = 0;
  }
  objc_sync_exit(v3);

  return v25;
}

void sub_18959826C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895985A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchTokenSetReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOPDSearchToken *v37;
  uint64_t v38;
  void *v39;
  int v40;
  char v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  BOOL v49;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v7;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (v14)
          v17 = 1;
        v49 = v17;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v7;
        v13 = v10;
LABEL_8:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_59;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v18;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v24 = 0;
LABEL_27:
    if (v29 || (v24 & 7) == 4)
    {
LABEL_59:
      if (v15)
      {
        v43 = 1;
        goto LABEL_74;
      }
      if (!v16)
        goto LABEL_75;
      while (1)
      {
        v46 = *v16++;
        v45 = v46;
        if (v46 == 1)
          break;
        if (v45 == 2)
        {
          v44 = 1;
LABEL_65:
          *(_BYTE *)(a1 + v21[898]) |= v44;
        }
        else if (!v45)
        {
          goto LABEL_75;
        }
      }
      v44 = 2;
      goto LABEL_65;
    }
    v31 = v24 >> 3;
    v32 = v15;
    if (!v49)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 != 2)
      break;
    if (v32)
    {
      if ((*(_BYTE *)(a1 + v21[898]) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_71:
          v43 = 0;
          goto LABEL_73;
        }
        v9 -= *(_BYTE *)(a1 + v21[898]) & 1;
      }
      else
      {
        PBReaderReadString();
        v38 = objc_claimAutoreleasedReturnValue();
        v39 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v38;

        --v9;
      }
      goto LABEL_54;
    }
LABEL_50:
    v41 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v41 & 1) == 0)
    {
LABEL_70:
      v43 = 0;
      goto LABEL_74;
    }
LABEL_55:
    if (v9)
      v42 = 1;
    else
      v42 = v15;
    if ((v42 & 1) == 0)
      goto LABEL_59;
  }
  if ((_DWORD)v31 != 1)
  {
    v40 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if (!v40)
      goto LABEL_70;
    goto LABEL_55;
  }
  if (!v32 || (*(_BYTE *)(a1 + v21[898]) & 2) != 0)
    goto LABEL_50;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_71;
  v37 = objc_alloc_init(GEOPDSearchToken);
  if (GEOPDSearchTokenReadAllFrom((uint64_t)v37, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    -[GEOPDSearchTokenSet _addNoFlagsToken:](a1, v37);

    v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_54:
    v19 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_55;
  }

  v43 = 0;
  v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_73:
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_74:
  *(_BYTE *)(a1 + v21[898]) |= 2u;
  *(_BYTE *)(a1 + v21[898]) |= 1u;
  if ((v43 & 1) != 0)
  {
LABEL_75:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (v15)
      goto LABEL_76;
  }
  else
  {
    v3 = 0;
    if (v15)
    {
LABEL_76:
      v47 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_189598E5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189598F3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDSearchTokenSetCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        -[GEOPDSearchToken readAll:](*(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * v5++), 1);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOPDSearchTokenSetReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchTokenSetReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchTokenSetReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchTokenSetReadAllFrom_initialTag;
  Specified = GEOPDSearchTokenSetReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDSearchTokenSetCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189599A14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenSetIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  int v23;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  BOOL v30;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  int v37;
  int v38;
  uint64_t v40;
  char v41;
  char v42;
  int v43;
  uint64_t v44;
  char v45;
  char v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  int v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  int v59;
  int v60;
  uint64_t v62;
  char v63;
  char v64;
  int v65;
  uint64_t v66;
  char v67;
  char v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  _BOOL4 v80;
  int v81;
  BOOL v82;
  int v83;
  _BOOL8 v84;
  _QWORD v86[2];

  v86[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
LABEL_161:
    v84 = a1[*v4] == 0;
    PBReaderRecallMark();
    return v84;
  }
  v5 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (a1[*v4])
      goto LABEL_161;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
        break;
      v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v10 + 1;
      v8 |= (unint64_t)(v11 & 0x7F) << v6;
      if ((v11 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v12 = v7++ >= 9;
      if (v12)
      {
        v8 = 0;
        v13 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v13 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v14 = v8 & 7;
    if (v13 || v14 == 4)
      goto LABEL_161;
    if ((v8 >> 3) != 2)
      break;
    if (v14 != 2)
      goto LABEL_164;
LABEL_156:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_164;
LABEL_160:
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
      goto LABEL_161;
  }
  if ((v8 >> 3) != 1)
    goto LABEL_156;
  if (v14 != 2 || !PBReaderPlaceMark())
    goto LABEL_164;
  objc_msgSend(a1, "position", 0, 0);
  objc_msgSend(a1, "length");
LABEL_23:
  while (2)
  {
    if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3] || a1[*v4])
      goto LABEL_158;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    while (1)
    {
      v19 = *v2;
      v20 = *(_QWORD *)&a1[v19];
      if (v20 == -1 || v20 >= *(_QWORD *)&a1[*v3])
        break;
      v21 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v20);
      *(_QWORD *)&a1[v19] = v20 + 1;
      v18 |= (unint64_t)(v21 & 0x7F) << v16;
      if ((v21 & 0x80) == 0)
        goto LABEL_33;
      v16 += 7;
      v12 = v17++ >= 9;
      if (v12)
      {
        v18 = 0;
        v22 = a1[*v4];
        goto LABEL_35;
      }
    }
    a1[*v4] = 1;
LABEL_33:
    v22 = a1[*v4];
    if (a1[*v4])
      v18 = 0;
LABEL_35:
    v23 = v18 & 7;
    if (v22 || v23 == 4)
    {
LABEL_158:
      v83 = a1[*v4];
      PBReaderRecallMark();
      if (v83)
        goto LABEL_164;
      PBReaderRecallMark();
      goto LABEL_160;
    }
    switch((v18 >> 3))
    {
      case 1u:
        if (v23 != 2)
          goto LABEL_163;
        goto LABEL_43;
      case 2u:
        if (v23 == 2)
          goto LABEL_43;
        goto LABEL_163;
      case 3u:
        if ((v18 & 7) != 0)
          goto LABEL_163;
        v25 = 0;
        while (1)
        {
          v26 = *v2;
          v27 = *(_QWORD *)&a1[v26];
          if (v27 == -1 || v27 >= *(_QWORD *)&a1[*v3])
            break;
          v28 = v27 + 1;
          v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
          *(_QWORD *)&a1[v26] = v28;
          if (v29 < 0)
          {
            v30 = v25++ > 8;
            if (!v30)
              continue;
          }
          goto LABEL_23;
        }
        a1[*v4] = 1;
        continue;
      case 4u:
        if (v23 != 2 || !PBReaderPlaceMark())
          goto LABEL_163;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        v86[0] = 0;
        if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
          goto LABEL_148;
        while (2)
        {
          if (a1[*v4])
            goto LABEL_147;
          v31 = 0;
          v32 = 0;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            if (v35 == -1 || v35 >= *(_QWORD *)&a1[*v3])
              break;
            v36 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v35);
            *(_QWORD *)&a1[v34] = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if ((v36 & 0x80) == 0)
              goto LABEL_65;
            v31 += 7;
            v12 = v32++ >= 9;
            if (v12)
            {
              v33 = 0;
              v37 = a1[*v4];
              goto LABEL_67;
            }
          }
          a1[*v4] = 1;
LABEL_65:
          v37 = a1[*v4];
          if (a1[*v4])
            v33 = 0;
LABEL_67:
          v38 = v33 & 7;
          if (v37 || v38 == 4)
            goto LABEL_147;
          if ((v33 >> 3) == 1)
          {
            v44 = 0;
            v45 = 1;
            while (1)
            {
              v46 = v45;
              v47 = *((_DWORD *)v86 + v44);
              if (!v47)
                break;
              if (v47 != 1)
              {
                v45 = 0;
                v44 = 1;
                if ((v46 & 1) != 0)
                  continue;
              }
              goto LABEL_162;
            }
            *((_DWORD *)v86 + v44) = 1;
            if (v38 != 2)
            {
LABEL_162:
              PBReaderRecallMark();
              goto LABEL_163;
            }
          }
          else if ((v33 >> 3) == 2)
          {
            v40 = 0;
            v41 = 1;
            while (1)
            {
              v42 = v41;
              v43 = *((_DWORD *)v86 + v40);
              if (!v43)
                break;
              if (v43 != 2)
              {
                v41 = 0;
                v40 = 1;
                if ((v42 & 1) != 0)
                  continue;
              }
              goto LABEL_162;
            }
            *((_DWORD *)v86 + v40) = 2;
            if (!v38)
            {
              v48 = 0;
              while (1)
              {
                v49 = *v2;
                v50 = *(_QWORD *)&a1[v49];
                if (v50 == -1 || v50 >= *(_QWORD *)&a1[*v3])
                  break;
                v51 = v50 + 1;
                v52 = *(char *)(*(_QWORD *)&a1[*v5] + v50);
                *(_QWORD *)&a1[v49] = v51;
                if (v52 < 0)
                {
                  v30 = v48++ > 8;
                  if (!v30)
                    continue;
                }
                goto LABEL_94;
              }
              a1[*v4] = 1;
              goto LABEL_94;
            }
            goto LABEL_162;
          }
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_162;
LABEL_94:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_147;
          continue;
        }
      case 5u:
        if (v23 != 2 || !PBReaderPlaceMark())
          goto LABEL_163;
        objc_msgSend(a1, "position");
        objc_msgSend(a1, "length");
        v86[0] = 0;
        if (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          while (1)
          {
            if (a1[*v4])
              goto LABEL_147;
            v53 = 0;
            v54 = 0;
            v55 = 0;
            while (1)
            {
              v56 = *v2;
              v57 = *(_QWORD *)&a1[v56];
              if (v57 == -1 || v57 >= *(_QWORD *)&a1[*v3])
                break;
              v58 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v57);
              *(_QWORD *)&a1[v56] = v57 + 1;
              v55 |= (unint64_t)(v58 & 0x7F) << v53;
              if ((v58 & 0x80) == 0)
                goto LABEL_109;
              v53 += 7;
              v12 = v54++ >= 9;
              if (v12)
              {
                v55 = 0;
                v59 = a1[*v4];
                goto LABEL_111;
              }
            }
            a1[*v4] = 1;
LABEL_109:
            v59 = a1[*v4];
            if (a1[*v4])
              v55 = 0;
LABEL_111:
            v60 = v55 & 7;
            if (v59 || v60 == 4)
            {
LABEL_147:
              v80 = HIDWORD(v86[0]) != 0;
              goto LABEL_149;
            }
            if ((v55 >> 3) == 1)
            {
              v66 = 0;
              v67 = 1;
              while (1)
              {
                v68 = v67;
                v69 = *((_DWORD *)v86 + v66);
                if (!v69)
                  break;
                if (v69 != 1)
                {
                  v67 = 0;
                  v66 = 1;
                  if ((v68 & 1) != 0)
                    continue;
                }
                goto LABEL_162;
              }
              *((_DWORD *)v86 + v66) = 1;
              if (v60)
                goto LABEL_162;
              v75 = 0;
              while (1)
              {
                v76 = *v2;
                v77 = *(_QWORD *)&a1[v76];
                if (v77 == -1 || v77 >= *(_QWORD *)&a1[*v3])
                  break;
                v78 = v77 + 1;
                v79 = *(char *)(*(_QWORD *)&a1[*v5] + v77);
                *(_QWORD *)&a1[v76] = v78;
                if (v79 < 0)
                {
                  v30 = v75++ > 8;
                  if (!v30)
                    continue;
                }
                goto LABEL_146;
              }
            }
            else
            {
              if ((v55 >> 3) != 2)
              {
                if ((PBReaderSkipValueWithTag() & 1) == 0)
                  goto LABEL_162;
                goto LABEL_146;
              }
              v62 = 0;
              v63 = 1;
              while (1)
              {
                v64 = v63;
                v65 = *((_DWORD *)v86 + v62);
                if (!v65)
                  break;
                if (v65 != 2)
                {
                  v63 = 0;
                  v62 = 1;
                  if ((v64 & 1) != 0)
                    continue;
                }
                goto LABEL_162;
              }
              *((_DWORD *)v86 + v62) = 2;
              if (v60)
                goto LABEL_162;
              v70 = 0;
              while (1)
              {
                v71 = *v2;
                v72 = *(_QWORD *)&a1[v71];
                if (v72 == -1 || v72 >= *(_QWORD *)&a1[*v3])
                  break;
                v73 = v72 + 1;
                v74 = *(char *)(*(_QWORD *)&a1[*v5] + v72);
                *(_QWORD *)&a1[v71] = v73;
                if (v74 < 0)
                {
                  v30 = v70++ > 8;
                  if (!v30)
                    continue;
                }
                goto LABEL_146;
              }
            }
            a1[*v4] = 1;
LABEL_146:
            if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
              goto LABEL_147;
          }
        }
LABEL_148:
        v80 = 0;
LABEL_149:
        v81 = a1[*v4];
        PBReaderRecallMark();
        if (v81)
          v82 = 1;
        else
          v82 = !v80;
        if (!v82)
        {
          PBReaderRecallMark();
          continue;
        }
LABEL_163:
        PBReaderRecallMark();
LABEL_164:
        PBReaderRecallMark();
        return 0;
      default:
LABEL_43:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_163;
        continue;
    }
  }
}

void sub_18959A4AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenSetIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_18959A754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenSpanReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _BOOL8 v30;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v25 = 0;
          v26 = 0;
          v19 = 0;
          while (1)
          {
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 == -1 || v28 >= *(_QWORD *)&v3[*v5])
              break;
            v29 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
            *(_QWORD *)&v3[v27] = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0)
            {
              v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__beginIndex;
              goto LABEL_40;
            }
            v25 += 7;
            v23 = v26++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__beginIndex;
              goto LABEL_42;
            }
          }
          v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__beginIndex;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 2)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
            {
              v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__endIndex;
              goto LABEL_39;
            }
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              break;
            v17 += 7;
            v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__endIndex;
              goto LABEL_42;
            }
          }
          v24 = &OBJC_IVAR___GEOPDSearchTokenSpan__endIndex;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v19) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v24) = v19;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v30 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v30 = 0;
  }
  objc_sync_exit(v3);

  return v30;
}

void sub_18959AD08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOGetDirectionsServiceLog()
{
  if (qword_1ECDBC4A0 != -1)
    dispatch_once(&qword_1ECDBC4A0, &__block_literal_global_92);
  return (id)_MergedGlobals_281;
}

unint64_t GEOMapItemHandleReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int *v15;
  GEOMapItemInitialRequestData *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  int v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  int v47;
  char v48;
  void *v49;
  int v51;
  char v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        if ((((v10 | v14) | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v10 | v14;
        v52 = (v15 == 0) | v10 | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_78;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v27 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_78:
      if ((v16 & 1) != 0)
      {
        v46 = 1;
        goto LABEL_89;
      }
      if (v15)
      {
        while (1)
        {
          v47 = *v15++;
          v48 = 4;
          switch(v47)
          {
            case 0:
              goto LABEL_90;
            case 2:
              goto LABEL_84;
            case 3:
              v48 = 8;
              goto LABEL_84;
            case 5:
              v48 = 2;
LABEL_84:
              *(_BYTE *)(a1 + 56) |= v48;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_90;
    }
    v29 = v22 >> 3;
    v30 = (char)v16;
    if ((v52 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_63;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (1)
        {
          v38 = *v17;
          v39 = *(_QWORD *)(v3 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(v3 + *v6))
            break;
          v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if ((v40 & 0x80) == 0)
            goto LABEL_66;
          v35 += 7;
          v26 = v36++ >= 9;
          if (v26)
          {
            LODWORD(v37) = 0;
            goto LABEL_68;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_66:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v37) = 0;
LABEL_68:
        *(_DWORD *)(a1 + 52) = v37;
        goto LABEL_77;
      case 2:
        if (!v30)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 56) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_86;
          v45 = 32 * *(_BYTE *)(a1 + 56);
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v51 = (int)v16;
        v16 = objc_alloc_init(GEOPDPlaceRefinementParameters);
        if (!GEOPDPlaceRefinementParametersReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_87;
        PBReaderRecallMark();
        v41 = 24;
        goto LABEL_62;
      case 3:
        if (!v30)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 56) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_86;
          v45 = 16 * *(_BYTE *)(a1 + 56);
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v51 = (int)v16;
        v16 = objc_alloc_init(GEOMapItemInitialRequestData);
        if (!GEOMapItemInitialRequestDataReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_87;
        PBReaderRecallMark();
        v41 = 32;
        goto LABEL_62;
      case 5:
        if (!v30)
        {
LABEL_63:
          v44 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v44 & 1) == 0)
          {
LABEL_85:
            v46 = 0;
            goto LABEL_89;
          }
LABEL_77:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_78;
          continue;
        }
        if ((*(_BYTE *)(a1 + 56) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_86:
            v46 = 0;
            goto LABEL_88;
          }
          v45 = *(_BYTE *)(a1 + 56) << 6;
LABEL_75:
          v7 += v45 >> 7;
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v51 = (int)v16;
        v16 = objc_alloc_init(GEOMapItemClientAttributes);
        if (GEOMapItemClientAttributesReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v41 = 16;
LABEL_62:
          v43 = *(void **)(a1 + v41);
          *(_QWORD *)(a1 + v41) = v16;

          --v7;
          LODWORD(v16) = v51;
LABEL_76:
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_77;
        }
LABEL_87:

        v46 = 0;
        LOBYTE(v16) = v51;
LABEL_88:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
        *(_BYTE *)(a1 + 56) |= 4u;
        *(_BYTE *)(a1 + 56) |= 8u;
        *(_BYTE *)(a1 + 56) |= 2u;
        if ((v46 & 1) != 0)
        {
LABEL_90:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_91;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_91:
            v49 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v42 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v42)
          goto LABEL_85;
        goto LABEL_77;
    }
  }
}

void sub_18959E7EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18959E904(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOMapItemHandleCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  -[GEOPDPlaceRefinementParameters readAll:](*(_QWORD *)(a1 + 24), 1);
  objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  return objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
}

unint64_t GEOMapItemHandleReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapItemHandleReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOMapItemHandleReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOMapItemHandleReadAllFrom_initialTag;
  Specified = GEOMapItemHandleReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOMapItemHandleCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18959F080(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapItemHandleReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemHandleReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18959F0E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemHandleIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v16 = 0;
          do
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_41;
            }
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if ((v20 & 0x80000000) == 0)
              break;
          }
          while (v16++ <= 8);
          goto LABEL_41;
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceRefinementParametersIsValid(a1))
            goto LABEL_46;
          goto LABEL_40;
        case 3u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapItemInitialRequestDataIsValid(a1))
            goto LABEL_46;
          goto LABEL_40;
        case 5u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapItemClientAttributesIsValid(a1))
            goto LABEL_46;
LABEL_40:
          PBReaderRecallMark();
          goto LABEL_41;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_46:
            PBReaderRecallMark();
            return 0;
          }
LABEL_41:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_44;
          break;
      }
    }
  }
LABEL_44:
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

BOOL GEOMapItemInitialRequestDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDPlaceRequestParametersIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            break;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

uint64_t _GEOMapItemHandleIsDirty(uint64_t a1)
{
  char v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(_BYTE *)(a1 + 56);
  if ((v2 & 0x10) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if (GEOPDPlaceRefinementParametersIsDirty(*(_QWORD *)(a1 + 24)))
      return 1;
    v2 = *(_BYTE *)(a1 + 56);
  }
  if ((v2 & 8) != 0)
    return 1;
  if ((v2 & 2) != 0)
    return (uint64_t)GEOMapItemClientAttributesIsDirty(*(os_unfair_lock_s **)(a1 + 16));
  else
    return 0;
}

os_unfair_lock_s *GEOMapItemHandleIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOMapItemHandleIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOMapItemHandleClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  unsigned int v6;
  void *v7;
  id v8;

  if (a3
    && objc_msgSend(a1, "hasPlaceRequestData")
    && (objc_msgSend(a1, "placeRequestData"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        v6 = GEOMapItemInitialRequestDataHasSensitiveFields(v5, a2),
        v5,
        v6))
  {
    objc_msgSend(a1, "placeRequestData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id)objc_msgSend(v7, "copy");

    GEOMapItemInitialRequestDataClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setPlaceRequestData:", v8);
  }
  else
  {
    objc_msgSend(a1, "placeRequestData");
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEOMapItemHandleHasSensitiveFields(void *result, uint64_t a2)
{
  void *v3;
  void *v4;

  if (result)
  {
    objc_msgSend(result, "placeRequestData");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = GEOMapItemInitialRequestDataHasSensitiveFields(v3, a2);

    return v4;
  }
  return result;
}

void *GEOMapItemInitialRequestDataHasSensitiveFields(void *result, uint64_t a2)
{
  id *v3;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "placeRequestParameters");
    v3 = (id *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDPlaceRequestParametersHasSensitiveFields(v3, a2);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void GEOMapItemInitialRequestDataClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  id *v5;
  int HasSensitiveFields;
  void *v7;
  uint64_t v8;
  id v9;

  if (a3
    && objc_msgSend(a1, "hasPlaceRequestParameters")
    && (objc_msgSend(a1, "placeRequestParameters"),
        v5 = (id *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOPDPlaceRequestParametersHasSensitiveFields(v5, a2),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "placeRequestParameters");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (id)objc_msgSend(v7, "copy");

    GEOPDPlaceRequestParametersClearSensitiveFields((uint64_t)v9, a2, 0);
    objc_msgSend(a1, "setPlaceRequestParameters:", v9);
  }
  else
  {
    objc_msgSend(a1, "placeRequestParameters");
    v8 = objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v9 = (id)v8;
      GEOPDPlaceRequestParametersClearSensitiveFields(v8, a2, 1);
    }
    else
    {
      v9 = 0;
    }
  }

}

void sub_18959FC08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapItemInitialRequestDataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapItemInitialRequestDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895A0F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A12B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A1358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1895A13F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A14A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1895A1724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1895A18F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1895A19E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895A1B44(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1895A1D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void sub_1895A2004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895A2134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1895A21AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A22E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A2420(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A2678(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895A2810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1895A2A10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895A2B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)GEORouteHypothesisCache;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1895A2C80(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895A2D98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1895A2E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1895A2F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t GEODeviceClass()
{
  void *v0;
  void *v1;
  uint64_t v2;

  v0 = (void *)MGCopyAnswer();
  v1 = v0;
  if (v0)
    v2 = objc_msgSend(v0, "intValue");
  else
    v2 = 0xFFFFFFFFLL;

  return v2;
}

uint64_t GEOVisualLocalizationCrowdsourcingIsSupported()
{
  uint64_t result;

  result = GEOConfigGetBOOL(MapsFeaturesConfig_VisualLocalizationCrowdsourcingEnabled, (uint64_t)off_1EDF4B128);
  if ((_DWORD)result)
  {
    if (qword_1ECDBC5A8 != -1)
      dispatch_once(&qword_1ECDBC5A8, &__block_literal_global_145);
    return _MergedGlobals_283;
  }
  return result;
}

uint64_t GEOVisualLocalizationCrowdsourcingIsAllowed()
{
  uint64_t result;

  result = GEOConfigGetBOOL(GeoServicesConfig_SupportsVisualLocalizationCrowdsourcing, (uint64_t)off_1EDF4E228);
  if ((_DWORD)result)
  {
    if (qword_1ECDBC5A8 != -1)
      dispatch_once(&qword_1ECDBC5A8, &__block_literal_global_145);
    return _MergedGlobals_283;
  }
  return result;
}

uint64_t GEOVisualLocalizationCrowdsourcingIsEnabled()
{
  return GEOConfigGetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled, (uint64_t)off_1EDF4CC08);
}

void GEOVisualLocalizationCrowdsourcingSetEnabled()
{
  GEOConfigSetBOOL(GeoServicesConfig_VLFCrowdsourcingDataCollectionEnabled, (uint64_t)off_1EDF4CC08);
}

id GEOVisualLocalizationCrowdsourcingLearnMoreURL()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)MEMORY[0x1E0C99E98];
  _getValue(GeoServicesConfig_VisualLocalizationCrowdsourcingLearnMoreURL, (uint64_t)off_1EDF4E238, 1, 0, 0, 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLWithString:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

uint64_t ___deviceSupportsMapsVisualLocalizations_block_invoke()
{
  uint64_t result;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  Class (*v8)(uint64_t);
  void *v9;
  uint64_t *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = MGGetBoolAnswer();
  if ((_DWORD)result)
  {
    if (MGGetSInt32Answer() != 1)
      goto LABEL_10;
    result = MGGetBoolAnswer();
    if (!(_DWORD)result)
      goto LABEL_11;
    if (!qword_1ECDBC5B0)
    {
      v7 = xmmword_1E1C12038;
      v8 = 0;
      qword_1ECDBC5B0 = _sl_dlopen();
    }
    if (!qword_1ECDBC5B0)
    {
LABEL_10:
      result = 0;
      goto LABEL_11;
    }
    v3 = 0;
    v4 = &v3;
    v5 = 0x2050000000;
    v1 = (void *)qword_1ECDBC5B8;
    v6 = qword_1ECDBC5B8;
    if (!qword_1ECDBC5B8)
    {
      *(_QWORD *)&v7 = MEMORY[0x1E0C809B0];
      *((_QWORD *)&v7 + 1) = 3221225472;
      v8 = __getARGeoTrackingConfigurationClass_block_invoke;
      v9 = &unk_1E1C03348;
      v10 = &v3;
      __getARGeoTrackingConfigurationClass_block_invoke((uint64_t)&v7);
      v1 = (void *)v4[3];
    }
    v2 = objc_retainAutorelease(v1);
    _Block_object_dispose(&v3, 8);
    result = objc_msgSend(v2, "isSupportedWithOptions:", 4, v3);
  }
LABEL_11:
  _MergedGlobals_283 = result;
  return result;
}

void sub_1895A41D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

Class __getARGeoTrackingConfigurationClass_block_invoke(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ECDBC5B0)
  {
    qword_1ECDBC5B0 = _sl_dlopen();
    if (!qword_1ECDBC5B0)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("ARGeoTrackingConfiguration");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ECDBC5B8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

BOOL GEOWiFiAPReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v18 = objc_claimAutoreleasedReturnValue();
            v19 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v18;

            continue;
          case 2u:
            v20 = 0;
            v21 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 28) |= 4u;
            while (1)
            {
              v23 = *v4;
              v24 = *(_QWORD *)&v3[v23];
              v25 = v24 + 1;
              if (v24 == -1 || v25 > *(_QWORD *)&v3[*v5])
                break;
              v26 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
              *(_QWORD *)&v3[v23] = v25;
              v22 |= (unint64_t)(v26 & 0x7F) << v20;
              if ((v26 & 0x80) == 0)
                goto LABEL_45;
              v20 += 7;
              v15 = v21++ >= 9;
              if (v15)
              {
                LODWORD(v22) = 0;
                goto LABEL_47;
              }
            }
            v3[*v6] = 1;
LABEL_45:
            if (v3[*v6])
              LODWORD(v22) = 0;
LABEL_47:
            v39 = 24;
            goto LABEL_56;
          case 3u:
            v27 = 0;
            v28 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (2)
            {
              v29 = *v4;
              v30 = *(_QWORD *)&v3[v29];
              v31 = v30 + 1;
              if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
                *(_QWORD *)&v3[v29] = v31;
                v22 |= (unint64_t)(v32 & 0x7F) << v27;
                if (v32 < 0)
                {
                  v27 += 7;
                  v15 = v28++ >= 9;
                  if (v15)
                  {
                    LODWORD(v22) = 0;
                    goto LABEL_51;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v22) = 0;
LABEL_51:
            v39 = 16;
            goto LABEL_56;
          case 4u:
            v33 = 0;
            v34 = 0;
            v22 = 0;
            *(_BYTE *)(a1 + 28) |= 2u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_59;
            continue;
        }
        while (1)
        {
          v35 = *v4;
          v36 = *(_QWORD *)&v3[v35];
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
            break;
          v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
          *(_QWORD *)&v3[v35] = v37;
          v22 |= (unint64_t)(v38 & 0x7F) << v33;
          if ((v38 & 0x80) == 0)
            goto LABEL_53;
          v33 += 7;
          v15 = v34++ >= 9;
          if (v15)
          {
            LODWORD(v22) = 0;
            goto LABEL_55;
          }
        }
        v3[*v6] = 1;
LABEL_53:
        if (v3[*v6])
          LODWORD(v22) = 0;
LABEL_55:
        v39 = 20;
LABEL_56:
        *(_DWORD *)(a1 + v39) = v22;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_59:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_1895A4D38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiAPReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a2;
  objc_sync_enter(v3);
  v4 = GEOWiFiAPReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return v4;
}

void sub_1895A4D98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiAPIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_50;
          goto LABEL_20;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_47;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_47;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v28 = 0;
          break;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_50:
          v33 = 0;
          goto LABEL_49;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_47;
      }
LABEL_46:
      a1[*v4] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

void sub_1895A5710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiBeaconInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char v13;
  int *v14;
  int *v15;
  int *v16;
  int *v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v26;
  unint64_t v28;
  BOOL v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void *v37;
  char v38;
  __int16 v39;
  char v40;
  int v41;
  __int16 v42;
  void *v43;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 100);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 96));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = *(unsigned __int16 *)(a1 + 108);
  v11 = ((v10 >> 2) & 1)
      + ((v10 >> 3) & 1)
      + ((v10 >> 1) & 1)
      + (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(v10), (uint16x4_t)0xFFFAFFFBFFFCFFF7), (int8x8_t)0x1000100010001))+ (v10 & 1)+ ((v10 >> 7) & 1)+ ((v10 >> 8) & 1));
  while (1)
  {
    v12 = a3[v7];
    if (v12 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v12 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v12)
  {
    ++v11;
    goto LABEL_9;
  }
  v13 = v9 | (v11 > 7);
  if (v9 & 1 | (v11 > 7) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  v16 = (int *)MEMORY[0x1E0D82BC8];
  v17 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v16))
      goto LABEL_96;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *v15;
      v22 = *(_QWORD *)(v3 + v21);
      v23 = v22 + 1;
      if (v22 == -1 || v23 > *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v17) + v22);
      *(_QWORD *)(v3 + v21) = v23;
      v20 |= (unint64_t)(v24 & 0x7F) << v18;
      if ((v24 & 0x80) == 0)
        goto LABEL_24;
      v18 += 7;
      if (v19++ >= 9)
      {
        v20 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v16);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v16) = 1;
LABEL_24:
    v26 = *(unsigned __int8 *)(v3 + *v16);
    if (*(_BYTE *)(v3 + *v16))
      v20 = 0;
LABEL_26:
    if (v26 || (v20 & 7) == 4)
    {
LABEL_96:
      if ((v13 & 1) != 0)
      {
        v40 = 1;
        goto LABEL_112;
      }
      if (v14)
      {
        while (1)
        {
          v41 = *v14++;
          v42 = 1;
          switch(v41)
          {
            case 0:
              goto LABEL_113;
            case 1:
              goto LABEL_109;
            case 2:
              v42 = 512;
              goto LABEL_109;
            case 3:
              v42 = 16;
              goto LABEL_109;
            case 4:
              v42 = 32;
              goto LABEL_109;
            case 5:
              v42 = 64;
              goto LABEL_109;
            case 6:
              v42 = 128;
              goto LABEL_109;
            case 7:
              v42 = 256;
              goto LABEL_109;
            case 8:
              v42 = 8;
              goto LABEL_109;
            case 9:
              v42 = 4;
              goto LABEL_109;
            case 10:
              v42 = 2;
LABEL_109:
              *(_WORD *)(a1 + 108) |= v42;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_113;
    }
    v28 = v20 >> 3;
    v29 = v13;
    if (!((v14 == 0) | v13 & 1))
    {
      v30 = v14;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 1) == 0)
        {
          PBReaderReadData();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 16;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v7 -= *(_WORD *)(a1 + 108) & 1;
        goto LABEL_94;
      case 2:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x200) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 88;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 6;
        goto LABEL_93;
      case 3:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x10) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 48;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 11;
        goto LABEL_93;
      case 4:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x20) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 56;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 10;
        goto LABEL_93;
      case 5:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x40) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 64;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 9;
        goto LABEL_93;
      case 6:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x80) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 72;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 8;
        goto LABEL_93;
      case 7:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 0x100) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 80;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 7;
        goto LABEL_93;
      case 8:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 8) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 40;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 12;
        goto LABEL_93;
      case 9:
        if (!v29)
          goto LABEL_71;
        if ((*(_WORD *)(a1 + 108) & 4) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 32;
          goto LABEL_70;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_111;
        v39 = *(_WORD *)(a1 + 108) << 13;
        goto LABEL_93;
      case 10:
        if (!v29)
        {
LABEL_71:
          v38 = PBReaderSkipValueWithTag();
          v16 = (int *)MEMORY[0x1E0D82BC8];
          if ((v38 & 1) == 0)
          {
LABEL_110:
            v40 = 0;
            goto LABEL_112;
          }
          goto LABEL_95;
        }
        if ((*(_WORD *)(a1 + 108) & 2) == 0)
        {
          PBReaderReadString();
          v34 = objc_claimAutoreleasedReturnValue();
          v35 = 24;
LABEL_70:
          v37 = *(void **)(a1 + v35);
          *(_QWORD *)(a1 + v35) = v34;

          v16 = (int *)MEMORY[0x1E0D82BC8];
          --v7;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v39 = *(_WORD *)(a1 + 108) << 14;
LABEL_93:
          v7 += v39 >> 15;
LABEL_94:
          v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
          if (!(v13 & 1 | (v7 != 0)))
            goto LABEL_96;
          continue;
        }
LABEL_111:
        v40 = 0;
        v16 = (int *)MEMORY[0x1E0D82BC8];
LABEL_112:
        *(_WORD *)(a1 + 108) |= 1u;
        *(_WORD *)(a1 + 108) |= 0x200u;
        *(_WORD *)(a1 + 108) |= 0x10u;
        *(_WORD *)(a1 + 108) |= 0x20u;
        *(_WORD *)(a1 + 108) |= 0x40u;
        *(_WORD *)(a1 + 108) |= 0x80u;
        *(_WORD *)(a1 + 108) |= 0x100u;
        *(_WORD *)(a1 + 108) |= 8u;
        *(_WORD *)(a1 + 108) |= 4u;
        *(_WORD *)(a1 + 108) |= 2u;
        if ((v40 & 1) != 0)
        {
LABEL_113:
          v3 = *(_BYTE *)(v3 + *v16) == 0;
          if ((v13 & 1) != 0)
            goto LABEL_114;
        }
        else
        {
          v3 = 0;
          if ((v13 & 1) != 0)
          {
LABEL_114:
            v43 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v36 = PBReaderSkipValueWithTag();
        v16 = (int *)MEMORY[0x1E0D82BC8];
        if (!v36)
          goto LABEL_110;
        goto LABEL_95;
    }
  }
}

void sub_1895A5FE4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A6124(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A6268(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A63AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A64F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A6634(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A6778(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A68BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A69FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A71A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiBeaconInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 100))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWiFiBeaconInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 96) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 100) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWiFiBeaconInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWiFiBeaconInfoReadAllFrom_initialTag;
  Specified = GEOWiFiBeaconInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return Specified;
}

void sub_1895A7330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiBeaconInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiBeaconInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895A7390(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiBeaconInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_43;
          goto LABEL_40;
        case 2u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 3u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 4u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 5u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 6u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 7u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 8u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 9u:
          if (v15 == 2)
            goto LABEL_40;
          goto LABEL_43;
        case 0xAu:
          if (v15 != 2)
            goto LABEL_43;
LABEL_40:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_43:
            v17 = 0;
            goto LABEL_44;
          }
LABEL_41:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_42;
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_43;
          goto LABEL_41;
      }
    }
  }
LABEL_42:
  v17 = a1[*v4] == 0;
LABEL_44:
  PBReaderRecallMark();
  return v17;
}

void sub_1895A7860(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiBeaconInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 104));
  v2 = (*(_WORD *)(a1 + 108) & 0x7FF) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 104));
  return v2;
}

void sub_1895A7CA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895A83C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiConnectionQualityReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  __int128 v13;
  int32x2_t v14;
  int32x2_t v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x2_t v19;
  int32x2_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  int *v30;
  int *v31;
  int *v32;
  int *v33;
  char v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  BOOL v41;
  int v42;
  int v43;
  unint64_t v45;
  BOOL v46;
  int *v47;
  int v48;
  int v49;
  BOOL v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  char v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char v102;
  char v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char v108;
  char v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  char v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  char v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  char v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char v144;
  char v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char v150;
  char v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  char v156;
  char v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char v162;
  uint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  char v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  char v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  char v189;
  char v190;
  unsigned int v191;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  char v195;
  char v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  char v201;
  char v202;
  unsigned int v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char v207;
  char v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  char v213;
  char v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  char v219;
  char v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  char v225;
  char v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  GEOLocation *v232;
  uint64_t v233;
  char v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  char v239;
  char v240;
  unsigned int v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  char v245;
  int *v246;
  char v247;
  unsigned int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char v253;
  char v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  char v259;
  char v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  char v265;
  int *v266;
  char v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  char v273;
  char v274;
  unsigned int v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char v279;
  uint64_t v280;
  unint64_t v281;
  char v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  char v288;
  char v289;
  unsigned int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  char v295;
  char v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  char v302;
  char v303;
  unsigned int v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  char v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  char v315;
  char v316;
  unsigned int v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  char v321;
  void *v322;
  char v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  char v328;
  char v329;
  unsigned int v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char v334;
  char v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  char v340;
  char v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  char v346;
  char v347;
  unsigned int v348;
  uint64_t v349;
  uint64_t v350;
  unint64_t v351;
  char v352;
  int *v353;
  char v354;
  unsigned int v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  char v360;
  char v361;
  unsigned int v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  char v366;
  uint64_t v367;
  unint64_t v368;
  uint64_t v369;
  char v370;
  char v371;
  uint64_t v372;
  BOOL v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  uint64_t v377;
  char v378;
  char v379;
  char v380;
  char v381;
  char v382;
  uint64_t v383;
  char v384;
  unsigned int v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  char v390;
  char v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  char v397;
  char v398;
  unsigned int v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  char v404;
  char v405;
  int v406;
  int v407;
  char v408;
  unint64_t v409;
  char v410;
  void *v411;
  char v413;
  char v414;
  char v415;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 352));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 348);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 344));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (int32x2_t)*(unsigned __int8 *)(a1 + 480);
  *((int32x2_t *)&v13 + 1) = v11;
  *(_QWORD *)&v13 = *(_QWORD *)(a1 + 472);
  v12 = (int32x2_t)(v13 >> 61);
  *((int32x2_t *)&v13 + 1) = v11;
  v14 = (int32x2_t)(v13 >> 52);
  *((int32x2_t *)&v13 + 1) = v11;
  v15 = (int32x2_t)(v13 >> 54);
  *((int32x2_t *)&v13 + 1) = v11;
  v16 = (int32x2_t)(v13 >> 62);
  *((int32x2_t *)&v13 + 1) = v11;
  v17 = (int32x2_t)(v13 >> 56);
  *((int32x2_t *)&v13 + 1) = v11;
  v18 = (int32x2_t)(v13 >> 59);
  *((int32x2_t *)&v13 + 1) = v11;
  v19 = (int32x2_t)(v13 >> 57);
  *((int32x2_t *)&v13 + 1) = v11;
  v20 = (int32x2_t)(v13 >> 63);
  *((int32x2_t *)&v13 + 1) = v11;
  *(int32x2_t *)v21.i8 = vzip1_s32(v17, v16);
  v21.u64[1] = (unint64_t)vzip1_s32(v19, v18);
  *(int32x2_t *)v22.i8 = vzip1_s32(v12, (int32x2_t)(*(_QWORD *)&v11 >> 2));
  v22.u64[1] = (unint64_t)vzip1_s32(v15, v14);
  v23.i64[0] = 0x100000001;
  v23.i64[1] = 0x100000001;
  *(int32x2_t *)v24.i8 = vzip1_s32(v11, (int32x2_t)(*(_QWORD *)&v11 >> 1));
  v24.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v13 >> 60), v20);
  v25 = vaddvq_s32(vaddq_s32(vaddq_s32((int32x4_t)vandq_s8(v22, v23), (int32x4_t)vandq_s8(v21, v23)), (int32x4_t)vandq_s8(v24, v23)))+ ((v13 & 0x400000000000000) != 0)+ (((unint64_t)v13 >> 53) & 1)+ (((unint64_t)v13 >> 55) & 1);
  while (2)
  {
    v26 = 1;
    v27 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v26 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v28 = v25 > 0xB;
        v29 = v10 | v28;
        if ((((v10 | v28) | v8) & 1) != 0)
          v30 = 0;
        else
          v30 = a3;
        v31 = (int *)MEMORY[0x1E0D82BF0];
        v32 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_770;
        v415 = (v30 == 0) | v29;
        v33 = (int *)MEMORY[0x1E0D82BB8];
        v414 = v10 | v28;
        break;
      default:
        ++v25;
LABEL_6:
        v26 = v9;
        v27 = v10;
LABEL_8:
        ++v7;
        v9 = v26;
        v10 = v27;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v32))
      goto LABEL_770;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    while (1)
    {
      v37 = *v31;
      v38 = *(_QWORD *)(v3 + v37);
      v39 = v38 + 1;
      if (v38 == -1 || v39 > *(_QWORD *)(v3 + *v6))
        break;
      v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v38);
      *(_QWORD *)(v3 + v37) = v39;
      v36 |= (unint64_t)(v40 & 0x7F) << v34;
      if ((v40 & 0x80) == 0)
        goto LABEL_23;
      v34 += 7;
      v41 = v35++ >= 9;
      if (v41)
      {
        v36 = 0;
        v42 = *(unsigned __int8 *)(v3 + *v32);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v32) = 1;
LABEL_23:
    v42 = *(unsigned __int8 *)(v3 + *v32);
    if (*(_BYTE *)(v3 + *v32))
      v36 = 0;
LABEL_25:
    v43 = v36 & 7;
    if (v42 || v43 == 4)
    {
LABEL_770:
      if ((v29 & 1) != 0)
      {
        v405 = *(_BYTE *)(a1 + 480) | 7;
        *(_QWORD *)(a1 + 472) |= 0xFFF0000000000000;
        *(_BYTE *)(a1 + 480) = v405;
      }
      else if (v30)
      {
        while (1)
        {
          v407 = *v30++;
          v406 = v407;
          switch(v407)
          {
            case '-':
              v408 = 0;
              v409 = 0x2000000000000000;
              goto LABEL_792;
            case '.':
            case '/':
            case '1':
            case '2':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
            case ':':
            case ';':
            case 'B':
            case 'C':
            case 'D':
            case 'E':
            case 'F':
            case 'K':
              continue;
            case '0':
              v408 = 0;
              v409 = 0x40000000000000;
              goto LABEL_792;
            case '3':
              v408 = 0;
              v409 = 0x10000000000000;
              goto LABEL_792;
            case '<':
              v408 = 0;
              v409 = 0x100000000000000;
              goto LABEL_792;
            case '=':
              v408 = 0;
              v409 = 0x4000000000000000;
              goto LABEL_792;
            case '>':
              v408 = 0;
              v409 = 0x200000000000000;
              goto LABEL_792;
            case '?':
              v408 = 0;
              v409 = 0x800000000000000;
              goto LABEL_792;
            case '@':
              v409 = 0;
              v408 = 1;
              goto LABEL_792;
            case 'A':
              v409 = 0;
              v408 = 2;
              goto LABEL_792;
            case 'G':
              v408 = 0;
              v409 = 0x1000000000000000;
              goto LABEL_792;
            case 'H':
              v408 = 0;
              v409 = 0x8000000000000000;
              goto LABEL_792;
            case 'I':
              v408 = 0;
              v409 = 0x400000000000000;
              goto LABEL_792;
            case 'J':
              v408 = 0;
              v409 = 0x20000000000000;
              goto LABEL_792;
            case 'L':
              v408 = 0;
              v409 = 0x80000000000000;
              goto LABEL_792;
            default:
              if (v406 == 2)
              {
                v409 = 0;
                v408 = 4;
LABEL_792:
                v410 = *(_BYTE *)(a1 + 480) | v408;
                *(_QWORD *)(a1 + 472) |= v409;
                *(_BYTE *)(a1 + 480) = v410;
              }
              else if (!v406)
              {
                goto LABEL_793;
              }
              break;
          }
        }
      }
LABEL_793:
      v3 = *(_BYTE *)(v3 + *v32) == 0;
      if ((v29 & 1) == 0)
        return v3;
LABEL_794:
      v411 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

      return v3;
    }
    v45 = v36 >> 3;
    v46 = v29;
    if ((v415 & 1) == 0)
    {
      v47 = v30;
      do
      {
        v49 = *v47++;
        v48 = v49;
        v46 = v49 != 0;
        if (v49)
          v50 = v48 == (_DWORD)v45;
        else
          v50 = 1;
      }
      while (!v50);
    }
    switch((int)v45)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v51 = 0;
        v52 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x80000uLL;
        while (2)
        {
          v54 = *v31;
          v55 = *(_QWORD *)(v3 + v54);
          v56 = v55 + 1;
          if (v55 == -1 || v56 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v57 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v55);
            *(_QWORD *)(v3 + v54) = v56;
            v53 |= (unint64_t)(v57 & 0x7F) << v51;
            if (v57 < 0)
            {
              v51 += 7;
              v41 = v52++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_537;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_537:
        v372 = 328;
        goto LABEL_642;
      case 2:
        if (!v46)
          goto LABEL_531;
        if ((*(_BYTE *)(a1 + 480) & 4) == 0)
        {
          PBReaderReadString();
          v58 = objc_claimAutoreleasedReturnValue();
          v59 = 336;
          goto LABEL_427;
        }
        v376 = PBReaderSkipValueWithTag();
        v29 = v414;
        v32 = (int *)MEMORY[0x1E0D82BC8];
        if ((v376 & 1) == 0)
          goto LABEL_798;
        v377 = (char)(32 * *(_BYTE *)(a1 + 480));
        goto LABEL_725;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v61 = 0;
        v62 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x400uLL;
        while (2)
        {
          v63 = *v31;
          v64 = *(_QWORD *)(v3 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v64);
            *(_QWORD *)(v3 + v63) = v65;
            v53 |= (unint64_t)(v66 & 0x7F) << v61;
            if (v66 < 0)
            {
              v61 += 7;
              v41 = v62++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_541;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_541:
        v372 = 232;
        goto LABEL_642;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v67 = 0;
        v68 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x40uLL;
        while (2)
        {
          v69 = *v31;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v53 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v41 = v68++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_545;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_545:
        v372 = 152;
        goto LABEL_642;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v73 = 0;
        v74 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x80uLL;
        while (2)
        {
          v75 = *v31;
          v76 = *(_QWORD *)(v3 + v75);
          v77 = v76 + 1;
          if (v76 == -1 || v77 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v78 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v76);
            *(_QWORD *)(v3 + v75) = v77;
            v53 |= (unint64_t)(v78 & 0x7F) << v73;
            if (v78 < 0)
            {
              v73 += 7;
              v41 = v74++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_549;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_549:
        v372 = 200;
        goto LABEL_642;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v79 = 0;
        v80 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x100uLL;
        while (2)
        {
          v81 = *v31;
          v82 = *(_QWORD *)(v3 + v81);
          v83 = v82 + 1;
          if (v82 == -1 || v83 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v82);
            *(_QWORD *)(v3 + v81) = v83;
            v53 |= (unint64_t)(v84 & 0x7F) << v79;
            if (v84 < 0)
            {
              v79 += 7;
              v41 = v80++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_553;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_553:
        v372 = 208;
        goto LABEL_642;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v85 = 0;
        v86 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x200uLL;
        while (2)
        {
          v87 = *v31;
          v88 = *(_QWORD *)(v3 + v87);
          v89 = v88 + 1;
          if (v88 == -1 || v89 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v88);
            *(_QWORD *)(v3 + v87) = v89;
            v53 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v41 = v86++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_557;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_557:
        v372 = 216;
        goto LABEL_642;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v91 = 0;
        v92 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x20000uLL;
        while (2)
        {
          v93 = *v31;
          v94 = *(_QWORD *)(v3 + v93);
          v95 = v94 + 1;
          if (v94 == -1 || v95 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v94);
            *(_QWORD *)(v3 + v93) = v95;
            v53 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              v41 = v92++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_561;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_561:
        v372 = 312;
        goto LABEL_642;
      case 13:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v97 = 0;
        v98 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x20uLL;
        while (2)
        {
          v99 = *v31;
          v100 = *(_QWORD *)(v3 + v99);
          v101 = v100 + 1;
          if (v100 == -1 || v101 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v102 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v100);
            *(_QWORD *)(v3 + v99) = v101;
            v53 |= (unint64_t)(v102 & 0x7F) << v97;
            if (v102 < 0)
            {
              v97 += 7;
              v41 = v98++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_565;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_565:
        v372 = 144;
        goto LABEL_642;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v103 = 0;
        v104 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x800uLL;
        while (2)
        {
          v105 = *v31;
          v106 = *(_QWORD *)(v3 + v105);
          v107 = v106 + 1;
          if (v106 == -1 || v107 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v108 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v106);
            *(_QWORD *)(v3 + v105) = v107;
            v53 |= (unint64_t)(v108 & 0x7F) << v103;
            if (v108 < 0)
            {
              v103 += 7;
              v41 = v104++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_569;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_569:
        v372 = 240;
        goto LABEL_642;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v109 = 0;
        v110 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x1000uLL;
        while (2)
        {
          v111 = *v31;
          v112 = *(_QWORD *)(v3 + v111);
          v113 = v112 + 1;
          if (v112 == -1 || v113 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v114 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v112);
            *(_QWORD *)(v3 + v111) = v113;
            v53 |= (unint64_t)(v114 & 0x7F) << v109;
            if (v114 < 0)
            {
              v109 += 7;
              v41 = v110++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_573;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_573:
        v372 = 248;
        goto LABEL_642;
      case 16:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v115 = 0;
        v116 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 2uLL;
        while (2)
        {
          v117 = *v31;
          v118 = *(_QWORD *)(v3 + v117);
          v119 = v118 + 1;
          if (v118 == -1 || v119 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v120 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v118);
            *(_QWORD *)(v3 + v117) = v119;
            v53 |= (unint64_t)(v120 & 0x7F) << v115;
            if (v120 < 0)
            {
              v115 += 7;
              v41 = v116++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_577;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_577:
        v372 = 104;
        goto LABEL_642;
      case 17:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v121 = 0;
        v122 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 8uLL;
        while (2)
        {
          v123 = *v31;
          v124 = *(_QWORD *)(v3 + v123);
          v125 = v124 + 1;
          if (v124 == -1 || v125 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v126 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v124);
            *(_QWORD *)(v3 + v123) = v125;
            v53 |= (unint64_t)(v126 & 0x7F) << v121;
            if (v126 < 0)
            {
              v121 += 7;
              v41 = v122++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_581;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_581:
        v372 = 120;
        goto LABEL_642;
      case 18:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v127 = 0;
        v128 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 1uLL;
        while (2)
        {
          v129 = *v31;
          v130 = *(_QWORD *)(v3 + v129);
          v131 = v130 + 1;
          if (v130 == -1 || v131 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v132 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v130);
            *(_QWORD *)(v3 + v129) = v131;
            v53 |= (unint64_t)(v132 & 0x7F) << v127;
            if (v132 < 0)
            {
              v127 += 7;
              v41 = v128++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_585;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_585:
        v372 = 96;
        goto LABEL_642;
      case 19:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v133 = 0;
        v134 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 4uLL;
        while (2)
        {
          v135 = *v31;
          v136 = *(_QWORD *)(v3 + v135);
          v137 = v136 + 1;
          if (v136 == -1 || v137 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v138 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v136);
            *(_QWORD *)(v3 + v135) = v137;
            v53 |= (unint64_t)(v138 & 0x7F) << v133;
            if (v138 < 0)
            {
              v133 += 7;
              v41 = v134++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_589;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_589:
        v372 = 112;
        goto LABEL_642;
      case 20:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v139 = 0;
        v140 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x2000uLL;
        while (2)
        {
          v141 = *v31;
          v142 = *(_QWORD *)(v3 + v141);
          v143 = v142 + 1;
          if (v142 == -1 || v143 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v144 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v142);
            *(_QWORD *)(v3 + v141) = v143;
            v53 |= (unint64_t)(v144 & 0x7F) << v139;
            if (v144 < 0)
            {
              v139 += 7;
              v41 = v140++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_593;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_593:
        v372 = 264;
        goto LABEL_642;
      case 21:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v145 = 0;
        v146 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x10uLL;
        while (2)
        {
          v147 = *v31;
          v148 = *(_QWORD *)(v3 + v147);
          v149 = v148 + 1;
          if (v148 == -1 || v149 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v150 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v148);
            *(_QWORD *)(v3 + v147) = v149;
            v53 |= (unint64_t)(v150 & 0x7F) << v145;
            if (v150 < 0)
            {
              v145 += 7;
              v41 = v146++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_597;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_597:
        v372 = 128;
        goto LABEL_642;
      case 22:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v151 = 0;
        v152 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x4000uLL;
        while (2)
        {
          v153 = *v31;
          v154 = *(_QWORD *)(v3 + v153);
          v155 = v154 + 1;
          if (v154 == -1 || v155 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v156 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v154);
            *(_QWORD *)(v3 + v153) = v155;
            v53 |= (unint64_t)(v156 & 0x7F) << v151;
            if (v156 < 0)
            {
              v151 += 7;
              v41 = v152++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_601;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_601:
        v372 = 272;
        goto LABEL_642;
      case 23:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v157 = 0;
        v158 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x10000uLL;
        while (2)
        {
          v159 = *v31;
          v160 = *(_QWORD *)(v3 + v159);
          v161 = v160 + 1;
          if (v160 == -1 || v161 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v162 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v160);
            *(_QWORD *)(v3 + v159) = v161;
            v53 |= (unint64_t)(v162 & 0x7F) << v157;
            if (v162 < 0)
            {
              v157 += 7;
              v41 = v158++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_605;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_605:
        v372 = 296;
        goto LABEL_642;
      case 24:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x2000000000uLL;
        v163 = *v31;
        v164 = *(_QWORD *)(v3 + v163);
        if (v164 <= 0xFFFFFFFFFFFFFFFBLL && v164 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v164);
          *(_QWORD *)(v3 + v163) = v164 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 424;
        goto LABEL_754;
      case 25:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x800000000uLL;
        v166 = *v31;
        v167 = *(_QWORD *)(v3 + v166);
        if (v167 <= 0xFFFFFFFFFFFFFFFBLL && v167 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v167);
          *(_QWORD *)(v3 + v166) = v167 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 416;
        goto LABEL_754;
      case 26:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x8000000000uLL;
        v168 = *v31;
        v169 = *(_QWORD *)(v3 + v168);
        if (v169 <= 0xFFFFFFFFFFFFFFFBLL && v169 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v169);
          *(_QWORD *)(v3 + v168) = v169 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 432;
        goto LABEL_754;
      case 27:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x1000000000uLL;
        v170 = *v31;
        v171 = *(_QWORD *)(v3 + v170);
        if (v171 <= 0xFFFFFFFFFFFFFFFBLL && v171 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v171);
          *(_QWORD *)(v3 + v170) = v171 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 420;
        goto LABEL_754;
      case 28:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x400000000uLL;
        v172 = *v31;
        v173 = *(_QWORD *)(v3 + v172);
        if (v173 <= 0xFFFFFFFFFFFFFFFBLL && v173 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v173);
          *(_QWORD *)(v3 + v172) = v173 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 412;
        goto LABEL_754;
      case 29:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x4000000000uLL;
        v174 = *v31;
        v175 = *(_QWORD *)(v3 + v174);
        if (v175 <= 0xFFFFFFFFFFFFFFFBLL && v175 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v175);
          *(_QWORD *)(v3 + v174) = v175 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 428;
        goto LABEL_754;
      case 33:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v176 = 0;
        v177 = 0;
        v178 = 0;
        *(_QWORD *)(a1 + 472) |= 0x800000000000uLL;
        while (2)
        {
          v179 = *v31;
          v180 = *(_QWORD *)(v3 + v179);
          v181 = v180 + 1;
          if (v180 == -1 || v181 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v182 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v180);
            *(_QWORD *)(v3 + v179) = v181;
            v178 |= (unint64_t)(v182 & 0x7F) << v176;
            if (v182 < 0)
            {
              v176 += 7;
              v41 = v177++ >= 9;
              if (v41)
              {
                v178 = 0;
                goto LABEL_609;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v178 = 0;
LABEL_609:
        v373 = v178 != 0;
        v374 = 464;
        goto LABEL_679;
      case 36:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v183 = 0;
        v184 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x800000uLL;
        while (2)
        {
          v186 = *v31;
          v187 = *(_QWORD *)(v3 + v186);
          v188 = v187 + 1;
          if (v187 == -1 || v188 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v189 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v187);
            *(_QWORD *)(v3 + v186) = v188;
            v185 |= (unint64_t)(v189 & 0x7F) << v183;
            if (v189 < 0)
            {
              v183 += 7;
              v41 = v184++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_613;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_613:
        v375 = 368;
        goto LABEL_712;
      case 37:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v190 = 0;
        v191 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x8000000uLL;
        while (2)
        {
          v192 = *v31;
          v193 = *(_QWORD *)(v3 + v192);
          v194 = v193 + 1;
          if (v193 == -1 || v194 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v195 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v193);
            *(_QWORD *)(v3 + v192) = v194;
            v185 |= (unint64_t)(v195 & 0x7F) << v190;
            if (v195 < 0)
            {
              v190 += 7;
              v41 = v191++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_617;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_617:
        v375 = 384;
        goto LABEL_712;
      case 38:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v196 = 0;
        v197 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x4000000uLL;
        while (2)
        {
          v198 = *v31;
          v199 = *(_QWORD *)(v3 + v198);
          v200 = v199 + 1;
          if (v199 == -1 || v200 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v201 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v199);
            *(_QWORD *)(v3 + v198) = v200;
            v185 |= (unint64_t)(v201 & 0x7F) << v196;
            if (v201 < 0)
            {
              v196 += 7;
              v41 = v197++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_621;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_621:
        v375 = 380;
        goto LABEL_712;
      case 39:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v202 = 0;
        v203 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x10000000000uLL;
        while (2)
        {
          v204 = *v31;
          v205 = *(_QWORD *)(v3 + v204);
          v206 = v205 + 1;
          if (v205 == -1 || v206 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v207 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v205);
            *(_QWORD *)(v3 + v204) = v206;
            v185 |= (unint64_t)(v207 & 0x7F) << v202;
            if (v207 < 0)
            {
              v202 += 7;
              v41 = v203++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_625;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_625:
        v375 = 436;
        goto LABEL_712;
      case 40:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v208 = 0;
        v209 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x20000000000uLL;
        while (2)
        {
          v210 = *v31;
          v211 = *(_QWORD *)(v3 + v210);
          v212 = v211 + 1;
          if (v211 == -1 || v212 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v213 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v211);
            *(_QWORD *)(v3 + v210) = v212;
            v185 |= (unint64_t)(v213 & 0x7F) << v208;
            if (v213 < 0)
            {
              v208 += 7;
              v41 = v209++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_629;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_629:
        v375 = 440;
        goto LABEL_712;
      case 41:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v214 = 0;
        v215 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x2000000uLL;
        while (2)
        {
          v216 = *v31;
          v217 = *(_QWORD *)(v3 + v216);
          v218 = v217 + 1;
          if (v217 == -1 || v218 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v219 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v217);
            *(_QWORD *)(v3 + v216) = v218;
            v185 |= (unint64_t)(v219 & 0x7F) << v214;
            if (v219 < 0)
            {
              v214 += 7;
              v41 = v215++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_633;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_633:
        v375 = 376;
        goto LABEL_712;
      case 42:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v220 = 0;
        v221 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x200000000uLL;
        while (2)
        {
          v222 = *v31;
          v223 = *(_QWORD *)(v3 + v222);
          v224 = v223 + 1;
          if (v223 == -1 || v224 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v225 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v223);
            *(_QWORD *)(v3 + v222) = v224;
            v185 |= (unint64_t)(v225 & 0x7F) << v220;
            if (v225 < 0)
            {
              v220 += 7;
              v41 = v221++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_637;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_637:
        v375 = 408;
        goto LABEL_712;
      case 43:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v226 = 0;
        v227 = 0;
        v53 = 0;
        *(_QWORD *)(a1 + 472) |= 0x40000uLL;
        while (2)
        {
          v228 = *v31;
          v229 = *(_QWORD *)(v3 + v228);
          v230 = v229 + 1;
          if (v229 == -1 || v230 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v231 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v229);
            *(_QWORD *)(v3 + v228) = v230;
            v53 |= (unint64_t)(v231 & 0x7F) << v226;
            if (v231 < 0)
            {
              v226 += 7;
              v41 = v227++ >= 9;
              if (v41)
              {
                v53 = 0;
                goto LABEL_641;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v53 = 0;
LABEL_641:
        v372 = 320;
LABEL_642:
        *(_QWORD *)(a1 + v372) = v53;
        goto LABEL_765;
      case 45:
        if (!v46)
          goto LABEL_531;
        if ((*(_QWORD *)(a1 + 472) & 0x2000000000000000) != 0)
        {
          v378 = PBReaderSkipValueWithTag();
          v29 = v414;
          v32 = (int *)MEMORY[0x1E0D82BC8];
          if ((v378 & 1) == 0)
            goto LABEL_798;
          v377 = (4 * *(_QWORD *)(a1 + 472)) >> 56;
          goto LABEL_725;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOLocation);
        if (!GEOLocationReadAllFrom((uint64_t)v232, (void *)v3, v9 & 1))
          goto LABEL_796;
        PBReaderRecallMark();
        v233 = 192;
        goto LABEL_521;
      case 46:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v234 = 0;
        v235 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x400000000000uLL;
        while (2)
        {
          v236 = *v31;
          v237 = *(_QWORD *)(v3 + v236);
          v238 = v237 + 1;
          if (v237 == -1 || v238 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v239 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v237);
            *(_QWORD *)(v3 + v236) = v238;
            v185 |= (unint64_t)(v239 & 0x7F) << v234;
            if (v239 < 0)
            {
              v234 += 7;
              v41 = v235++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_646;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_646:
        v375 = 460;
        goto LABEL_712;
      case 47:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v240 = 0;
        v241 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x100000000uLL;
        while (2)
        {
          v242 = *v31;
          v243 = *(_QWORD *)(v3 + v242);
          v244 = v243 + 1;
          if (v243 == -1 || v244 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v245 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v243);
            *(_QWORD *)(v3 + v242) = v244;
            v185 |= (unint64_t)(v245 & 0x7F) << v240;
            if (v245 < 0)
            {
              v240 += 7;
              v41 = v241++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_650;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_650:
        v375 = 404;
        goto LABEL_712;
      case 48:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x40000000000000) != 0)
          goto LABEL_531;
        if (v43 != 2)
        {
          v384 = 0;
          v385 = 0;
          v386 = 0;
          while (1)
          {
            v387 = *v31;
            v388 = *(_QWORD *)(v3 + v387);
            v389 = v388 + 1;
            if (v388 == -1 || v389 > *(_QWORD *)(v3 + *v6))
              goto LABEL_762;
            v390 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v388);
            *(_QWORD *)(v3 + v387) = v389;
            v386 |= (unint64_t)(v390 & 0x7F) << v384;
            if (v390 < 0)
            {
              v384 += 7;
              v41 = v385++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_763;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_797;
        while (1)
        {
          v246 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v31) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_533;
          v247 = 0;
          v248 = 0;
          v249 = 0;
          while (1)
          {
            v250 = *v31;
            v251 = *(_QWORD *)(v3 + v250);
            v252 = v251 + 1;
            if (v251 == -1 || v252 > *(_QWORD *)(v3 + *v6))
              break;
            v253 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v251);
            *(_QWORD *)(v3 + v250) = v252;
            v249 |= (unint64_t)(v253 & 0x7F) << v247;
            if (v253 < 0)
            {
              v247 += 7;
              v41 = v248++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_317;
          }
          *(_BYTE *)(v3 + *v246) = 1;
LABEL_317:
          PBRepeatedInt32Add();
        }
      case 49:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v254 = 0;
        v255 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x1000000uLL;
        while (2)
        {
          v256 = *v31;
          v257 = *(_QWORD *)(v3 + v256);
          v258 = v257 + 1;
          if (v257 == -1 || v258 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v259 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v257);
            *(_QWORD *)(v3 + v256) = v258;
            v185 |= (unint64_t)(v259 & 0x7F) << v254;
            if (v259 < 0)
            {
              v254 += 7;
              v41 = v255++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_654;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_654:
        v375 = 372;
        goto LABEL_712;
      case 50:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v260 = 0;
        v261 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x200000uLL;
        while (2)
        {
          v262 = *v31;
          v263 = *(_QWORD *)(v3 + v262);
          v264 = v263 + 1;
          if (v263 == -1 || v264 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v265 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v263);
            *(_QWORD *)(v3 + v262) = v264;
            v185 |= (unint64_t)(v265 & 0x7F) << v260;
            if (v265 < 0)
            {
              v260 += 7;
              v41 = v261++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_658;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_658:
        v375 = 360;
        goto LABEL_712;
      case 51:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x10000000000000) != 0)
          goto LABEL_531;
        if (v43 != 2)
        {
          v391 = 0;
          v392 = 0;
          v393 = 0;
          while (1)
          {
            v394 = *v31;
            v395 = *(_QWORD *)(v3 + v394);
            v396 = v395 + 1;
            if (v395 == -1 || v396 > *(_QWORD *)(v3 + *v6))
              goto LABEL_762;
            v397 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v395);
            *(_QWORD *)(v3 + v394) = v396;
            v393 |= (unint64_t)(v397 & 0x7F) << v391;
            if (v397 < 0)
            {
              v391 += 7;
              v41 = v392++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_763;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_797;
        while (1)
        {
          v266 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v31) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_533;
          v267 = 0;
          v268 = 0;
          v269 = 0;
          while (1)
          {
            v270 = *v31;
            v271 = *(_QWORD *)(v3 + v270);
            v272 = v271 + 1;
            if (v271 == -1 || v272 > *(_QWORD *)(v3 + *v6))
              break;
            v273 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v271);
            *(_QWORD *)(v3 + v270) = v272;
            v269 |= (unint64_t)(v273 & 0x7F) << v267;
            if (v273 < 0)
            {
              v267 += 7;
              v41 = v268++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_348;
          }
          *(_BYTE *)(v3 + *v266) = 1;
LABEL_348:
          PBRepeatedInt32Add();
        }
      case 52:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v274 = 0;
        v275 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x80000000uLL;
        while (2)
        {
          v276 = *v31;
          v277 = *(_QWORD *)(v3 + v276);
          v278 = v277 + 1;
          if (v277 == -1 || v278 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v279 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v277);
            *(_QWORD *)(v3 + v276) = v278;
            v185 |= (unint64_t)(v279 & 0x7F) << v274;
            if (v279 < 0)
            {
              v274 += 7;
              v41 = v275++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_662;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_662:
        v375 = 400;
        goto LABEL_712;
      case 53:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        *(_QWORD *)(a1 + 472) |= 0x100000000000uLL;
        v280 = *v31;
        v281 = *(_QWORD *)(v3 + v280);
        if (v281 <= 0xFFFFFFFFFFFFFFFBLL && v281 + 4 <= *(_QWORD *)(v3 + *v6))
        {
          v165 = *(_DWORD *)(*(_QWORD *)(v3 + *v33) + v281);
          *(_QWORD *)(v3 + v280) = v281 + 4;
        }
        else
        {
          *(_BYTE *)(v3 + *v32) = 1;
          v165 = 0;
        }
        v383 = 452;
LABEL_754:
        *(_DWORD *)(a1 + v383) = v165;
        goto LABEL_765;
      case 54:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v282 = 0;
        v283 = 0;
        v284 = 0;
        *(_QWORD *)(a1 + 472) |= 0x8000000000000uLL;
        while (2)
        {
          v285 = *v31;
          v286 = *(_QWORD *)(v3 + v285);
          v287 = v286 + 1;
          if (v286 == -1 || v287 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v288 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v286);
            *(_QWORD *)(v3 + v285) = v287;
            v284 |= (unint64_t)(v288 & 0x7F) << v282;
            if (v288 < 0)
            {
              v282 += 7;
              v41 = v283++ >= 9;
              if (v41)
              {
                v284 = 0;
                goto LABEL_666;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v284 = 0;
LABEL_666:
        v373 = v284 != 0;
        v374 = 468;
        goto LABEL_679;
      case 55:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v289 = 0;
        v290 = 0;
        v291 = 0;
        *(_QWORD *)(a1 + 472) |= 0x4000000000000uLL;
        while (2)
        {
          v292 = *v31;
          v293 = *(_QWORD *)(v3 + v292);
          v294 = v293 + 1;
          if (v293 == -1 || v294 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v295 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v293);
            *(_QWORD *)(v3 + v292) = v294;
            v291 |= (unint64_t)(v295 & 0x7F) << v289;
            if (v295 < 0)
            {
              v289 += 7;
              v41 = v290++ >= 9;
              if (v41)
              {
                v291 = 0;
                goto LABEL_670;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v291 = 0;
LABEL_670:
        v373 = v291 != 0;
        v374 = 467;
        goto LABEL_679;
      case 56:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v296 = 0;
        v297 = 0;
        v298 = 0;
        *(_QWORD *)(a1 + 472) |= 0x2000000000000uLL;
        while (2)
        {
          v299 = *v31;
          v300 = *(_QWORD *)(v3 + v299);
          v301 = v300 + 1;
          if (v300 == -1 || v301 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v302 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v300);
            *(_QWORD *)(v3 + v299) = v301;
            v298 |= (unint64_t)(v302 & 0x7F) << v296;
            if (v302 < 0)
            {
              v296 += 7;
              v41 = v297++ >= 9;
              if (v41)
              {
                v298 = 0;
                goto LABEL_674;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v298 = 0;
LABEL_674:
        v373 = v298 != 0;
        v374 = 466;
        goto LABEL_679;
      case 57:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v303 = 0;
        v304 = 0;
        v305 = 0;
        *(_QWORD *)(a1 + 472) |= 0x1000000000000uLL;
        while (2)
        {
          v306 = *v31;
          v307 = *(_QWORD *)(v3 + v306);
          v308 = v307 + 1;
          if (v307 == -1 || v308 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v309 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v307);
            *(_QWORD *)(v3 + v306) = v308;
            v305 |= (unint64_t)(v309 & 0x7F) << v303;
            if (v309 < 0)
            {
              v303 += 7;
              v41 = v304++ >= 9;
              if (v41)
              {
                v305 = 0;
                goto LABEL_678;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          v305 = 0;
LABEL_678:
        v373 = v305 != 0;
        v374 = 465;
LABEL_679:
        *(_BYTE *)(a1 + v374) = v373;
        goto LABEL_765;
      case 58:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v310 = 0;
        v311 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x400000uLL;
        while (2)
        {
          v312 = *v31;
          v313 = *(_QWORD *)(v3 + v312);
          v314 = v313 + 1;
          if (v313 == -1 || v314 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v315 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v313);
            *(_QWORD *)(v3 + v312) = v314;
            v185 |= (unint64_t)(v315 & 0x7F) << v310;
            if (v315 < 0)
            {
              v310 += 7;
              v41 = v311++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_683;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_683:
        v375 = 364;
        goto LABEL_712;
      case 59:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v316 = 0;
        v317 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x20000000uLL;
        while (2)
        {
          v318 = *v31;
          v319 = *(_QWORD *)(v3 + v318);
          v320 = v319 + 1;
          if (v319 == -1 || v320 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v321 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v319);
            *(_QWORD *)(v3 + v318) = v320;
            v185 |= (unint64_t)(v321 & 0x7F) << v316;
            if (v321 < 0)
            {
              v316 += 7;
              v41 = v317++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_687;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_687:
        v375 = 392;
        goto LABEL_712;
      case 60:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x100000000000000) != 0)
          goto LABEL_529;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiAP);
        if (!GEOWiFiAPReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        -[GEOWiFiConnectionQuality _addNoFlagsEssMembers:](a1, v232);
        goto LABEL_492;
      case 61:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x4000000000000000) != 0)
          goto LABEL_529;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiAP);
        if (!GEOWiFiAPReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        -[GEOWiFiConnectionQuality _addNoFlagsNearbyBSS:](a1, v232);
        goto LABEL_492;
      case 62:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x200000000000000) != 0)
          goto LABEL_529;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiQualityFeedback);
        if (!GEOWiFiQualityFeedbackReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        -[GEOWiFiConnectionQuality _addNoFlagsFeedback:](a1, v232);
        goto LABEL_492;
      case 63:
        if (!v46)
          goto LABEL_531;
        if ((*(_QWORD *)(a1 + 472) & 0x800000000000000) == 0)
        {
          PBReaderReadString();
          v58 = objc_claimAutoreleasedReturnValue();
          v59 = 176;
LABEL_427:
          v322 = *(void **)(a1 + v59);
          *(_QWORD *)(a1 + v59) = v58;
          goto LABEL_522;
        }
        v379 = PBReaderSkipValueWithTag();
        v29 = v414;
        v32 = (int *)MEMORY[0x1E0D82BC8];
        if ((v379 & 1) == 0)
          goto LABEL_798;
        v377 = (16 * *(_QWORD *)(a1 + 472)) >> 56;
        goto LABEL_725;
      case 64:
        if (!v46 || (*(_BYTE *)(a1 + 480) & 1) != 0)
          goto LABEL_529;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiConnectionRoamState);
        if (!GEOWiFiConnectionRoamStateReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        -[GEOWiFiConnectionQuality _addNoFlagsRoamStates:](a1, v232);
        goto LABEL_492;
      case 65:
        if (!v46 || (*(_BYTE *)(a1 + 480) & 2) != 0)
          goto LABEL_529;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiConnectionSpeedTest);
        if (!GEOWiFiConnectionSpeedTestReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        -[GEOWiFiConnectionQuality _addNoFlagsSpeedTest:](a1, v232);
        goto LABEL_492;
      case 66:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v323 = 0;
        v324 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x40000000000uLL;
        while (2)
        {
          v325 = *v31;
          v326 = *(_QWORD *)(v3 + v325);
          v327 = v326 + 1;
          if (v326 == -1 || v327 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v328 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v326);
            *(_QWORD *)(v3 + v325) = v327;
            v185 |= (unint64_t)(v328 & 0x7F) << v323;
            if (v328 < 0)
            {
              v323 += 7;
              v41 = v324++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_691;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_691:
        v375 = 444;
        goto LABEL_712;
      case 67:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v329 = 0;
        v330 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x80000000000uLL;
        while (2)
        {
          v331 = *v31;
          v332 = *(_QWORD *)(v3 + v331);
          v333 = v332 + 1;
          if (v332 == -1 || v333 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v334 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v332);
            *(_QWORD *)(v3 + v331) = v333;
            v185 |= (unint64_t)(v334 & 0x7F) << v329;
            if (v334 < 0)
            {
              v329 += 7;
              v41 = v330++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_695;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_695:
        v375 = 448;
        goto LABEL_712;
      case 68:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v335 = 0;
        v336 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x100000uLL;
        while (2)
        {
          v337 = *v31;
          v338 = *(_QWORD *)(v3 + v337);
          v339 = v338 + 1;
          if (v338 == -1 || v339 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v340 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v338);
            *(_QWORD *)(v3 + v337) = v339;
            v185 |= (unint64_t)(v340 & 0x7F) << v335;
            if (v340 < 0)
            {
              v335 += 7;
              v41 = v336++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_699;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_699:
        v375 = 356;
        goto LABEL_712;
      case 69:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v341 = 0;
        v342 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x10000000uLL;
        while (2)
        {
          v343 = *v31;
          v344 = *(_QWORD *)(v3 + v343);
          v345 = v344 + 1;
          if (v344 == -1 || v345 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v346 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v344);
            *(_QWORD *)(v3 + v343) = v345;
            v185 |= (unint64_t)(v346 & 0x7F) << v341;
            if (v346 < 0)
            {
              v341 += 7;
              v41 = v342++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_703;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_703:
        v375 = 388;
        goto LABEL_712;
      case 70:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v347 = 0;
        v348 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x200000000000uLL;
        while (2)
        {
          v349 = *v31;
          v350 = *(_QWORD *)(v3 + v349);
          v351 = v350 + 1;
          if (v350 == -1 || v351 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v352 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v350);
            *(_QWORD *)(v3 + v349) = v351;
            v185 |= (unint64_t)(v352 & 0x7F) << v347;
            if (v352 < 0)
            {
              v347 += 7;
              v41 = v348++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_707;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_707:
        v375 = 456;
        goto LABEL_712;
      case 71:
        if (!v46)
          goto LABEL_531;
        if ((*(_QWORD *)(a1 + 472) & 0x1000000000000000) != 0)
        {
          v380 = PBReaderSkipValueWithTag();
          v29 = v414;
          v32 = (int *)MEMORY[0x1E0D82BC8];
          if ((v380 & 1) == 0)
            goto LABEL_798;
          v377 = (8 * *(_QWORD *)(a1 + 472)) >> 56;
          goto LABEL_725;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiHarvestLabel);
        if (!GEOWiFiHarvestLabelReadAllFrom((uint64_t)v232, (void *)v3, v9 & 1))
          goto LABEL_796;
        PBReaderRecallMark();
        v233 = 184;
        goto LABEL_521;
      case 72:
        if (!v46)
          goto LABEL_531;
        if ((*(_QWORD *)(a1 + 472) & 0x8000000000000000) != 0)
        {
          v381 = PBReaderSkipValueWithTag();
          v29 = v414;
          v32 = (int *)MEMORY[0x1E0D82BC8];
          if ((v381 & 1) == 0)
            goto LABEL_798;
          v377 = *(char *)(a1 + 479);
          goto LABEL_725;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiPasspointInfo);
        if (!GEOWiFiPasspointInfoReadAllFrom((uint64_t)v232, (void *)v3))
          goto LABEL_796;
        PBReaderRecallMark();
        v233 = 256;
        goto LABEL_521;
      case 73:
        if (v46 && (*(_QWORD *)(a1 + 472) & 0x400000000000000) == 0)
        {
          PBReaderReadString();
          v232 = (GEOLocation *)objc_claimAutoreleasedReturnValue();
          if (v232)
            -[GEOWiFiConnectionQuality _addNoFlagsHotspotHelperProvider:](a1, v232);
LABEL_492:

          goto LABEL_764;
        }
LABEL_529:
        v370 = PBReaderSkipValueWithTag();
        v29 = v414;
        v32 = (int *)MEMORY[0x1E0D82BC8];
        if ((v370 & 1) == 0)
          goto LABEL_798;
        goto LABEL_765;
      case 74:
        if (!v46 || (*(_QWORD *)(a1 + 472) & 0x20000000000000) != 0)
          goto LABEL_531;
        if (v43 != 2)
        {
          v398 = 0;
          v399 = 0;
          v400 = 0;
          while (1)
          {
            v401 = *v31;
            v402 = *(_QWORD *)(v3 + v401);
            v403 = v402 + 1;
            if (v402 == -1 || v403 > *(_QWORD *)(v3 + *v6))
              break;
            v404 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v402);
            *(_QWORD *)(v3 + v401) = v403;
            v400 |= (unint64_t)(v404 & 0x7F) << v398;
            if (v404 < 0)
            {
              v398 += 7;
              v41 = v399++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_763;
          }
LABEL_762:
          *(_BYTE *)(v3 + *v32) = 1;
LABEL_763:
          PBRepeatedInt32Add();
          goto LABEL_764;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_797;
        while (1)
        {
          v353 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v31) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v354 = 0;
          v355 = 0;
          v356 = 0;
          while (1)
          {
            v357 = *v31;
            v358 = *(_QWORD *)(v3 + v357);
            v359 = v358 + 1;
            if (v358 == -1 || v359 > *(_QWORD *)(v3 + *v6))
              break;
            v360 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v358);
            *(_QWORD *)(v3 + v357) = v359;
            v356 |= (unint64_t)(v360 & 0x7F) << v354;
            if (v360 < 0)
            {
              v354 += 7;
              v41 = v355++ >= 9;
              if (!v41)
                continue;
            }
            goto LABEL_507;
          }
          *(_BYTE *)(v3 + *v353) = 1;
LABEL_507:
          PBRepeatedInt32Add();
        }
LABEL_533:
        PBReaderRecallMark();
        v32 = (int *)MEMORY[0x1E0D82BC8];
        v29 = v414;
        goto LABEL_765;
      case 75:
        if ((v8 & 1) == 0)
          goto LABEL_531;
        v361 = 0;
        v362 = 0;
        v185 = 0;
        *(_QWORD *)(a1 + 472) |= 0x40000000uLL;
        while (2)
        {
          v363 = *v31;
          v364 = *(_QWORD *)(v3 + v363);
          v365 = v364 + 1;
          if (v364 == -1 || v365 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v32) = 1;
          }
          else
          {
            v366 = *(_BYTE *)(*(_QWORD *)(v3 + *v33) + v364);
            *(_QWORD *)(v3 + v363) = v365;
            v185 |= (unint64_t)(v366 & 0x7F) << v361;
            if (v366 < 0)
            {
              v361 += 7;
              v41 = v362++ >= 9;
              if (v41)
              {
                LODWORD(v185) = 0;
                goto LABEL_711;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v32))
          LODWORD(v185) = 0;
LABEL_711:
        v375 = 396;
LABEL_712:
        *(_DWORD *)(a1 + v375) = v185;
        goto LABEL_765;
      case 76:
        if (!v46)
          goto LABEL_531;
        if ((*(_QWORD *)(a1 + 472) & 0x80000000000000) != 0)
        {
          v382 = PBReaderSkipValueWithTag();
          v29 = v414;
          v32 = (int *)MEMORY[0x1E0D82BC8];
          if ((v382 & 1) == 0)
            goto LABEL_798;
          v377 = *(char *)(a1 + 478);
LABEL_725:
          v7 += v377 >> 7;
          goto LABEL_765;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_797;
        v232 = objc_alloc_init(GEOWiFiBeaconInfo);
        if (GEOWiFiBeaconInfoReadAllFrom((uint64_t)v232, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v233 = 88;
LABEL_521:
          v322 = *(void **)(a1 + v233);
          *(_QWORD *)(a1 + v233) = v232;
LABEL_522:

          --v7;
LABEL_764:
          v29 = v414;
          v32 = (int *)MEMORY[0x1E0D82BC8];
LABEL_765:
          if (!(v29 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v31) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_770;
          continue;
        }
LABEL_796:

LABEL_797:
        v29 = v414;
LABEL_798:
        v3 = 0;
        v413 = *(_BYTE *)(a1 + 480) | 7;
        *(_QWORD *)(a1 + 472) |= 0xFFF0000000000000;
        *(_BYTE *)(a1 + 480) = v413;
        if ((v29 & 1) != 0)
          goto LABEL_794;
        return v3;
      case 77:
        if ((v8 & 1) != 0)
        {
          *(_QWORD *)(a1 + 472) |= 0x8000uLL;
          v367 = *v31;
          v368 = *(_QWORD *)(v3 + v367);
          if (v368 <= 0xFFFFFFFFFFFFFFF7 && v368 + 8 <= *(_QWORD *)(v3 + *v6))
          {
            v369 = *(_QWORD *)(*(_QWORD *)(v3 + *v33) + v368);
            *(_QWORD *)(v3 + v367) = v368 + 8;
          }
          else
          {
            *(_BYTE *)(v3 + *v32) = 1;
            v369 = 0;
          }
          *(_QWORD *)(a1 + 280) = v369;
        }
        else
        {
LABEL_531:
          v371 = PBReaderSkipValueWithTag();
          v32 = (int *)MEMORY[0x1E0D82BC8];
          v29 = v414;
          if ((v371 & 1) == 0)
            goto LABEL_798;
        }
        goto LABEL_765;
      default:
        v60 = PBReaderSkipValueWithTag();
        v32 = (int *)MEMORY[0x1E0D82BC8];
        v29 = v414;
        if (!v60)
          goto LABEL_798;
        goto LABEL_765;
    }
  }
}

void sub_1895AC974(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895ACE90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AD6B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AE5CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AE90C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AEC4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AEF8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AF0E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AF424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AFE64(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895AFFB4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895B0104(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895B0444(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895B0A10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895B4F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOWiFiConnectionQualityCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _BYTE v48[128];
  _BYTE v49[128];
  _BYTE v50[128];
  _BYTE v51[128];
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1[24], "readAll:", 1);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v2 = a1[17];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v45;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v45 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v44 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v44, v52, 16);
    }
    while (v4);
  }

  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v7 = a1[28];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v41;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v41 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * v11++), "readAll:", 1);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v40, v51, 16);
    }
    while (v9);
  }

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v12 = a1[20];
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v50, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v37;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v37 != v15)
          objc_enumerationMutation(v12);
        objc_msgSend(*(id *)(*((_QWORD *)&v36 + 1) + 8 * v16++), "readAll:", 1);
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v50, 16);
    }
    while (v14);
  }

  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v17 = a1[36];
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v49, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v33;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v33 != v20)
          objc_enumerationMutation(v17);
        objc_msgSend(*(id *)(*((_QWORD *)&v32 + 1) + 8 * v21++), "readAll:", 1);
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v49, 16);
    }
    while (v19);
  }

  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v22 = a1[38];
  v23 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v48, 16);
  if (v23)
  {
    v24 = v23;
    v25 = *(_QWORD *)v29;
    do
    {
      v26 = 0;
      do
      {
        if (*(_QWORD *)v29 != v25)
          objc_enumerationMutation(v22);
        objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * v26++), "readAll:", 1, (_QWORD)v28);
      }
      while (v24 != v26);
      v24 = objc_msgSend(v22, "countByEnumeratingWithState:objects:count:", &v28, v48, 16);
    }
    while (v24);
  }

  objc_msgSend(a1[23], "readAll:", 1);
  objc_msgSend(a1[32], "readAll:", 1);
  return objc_msgSend(a1[11], "readAll:", 1);
}

unint64_t GEOWiFiConnectionQualityReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 348))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWiFiConnectionQualityReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 352));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 344) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 348) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWiFiConnectionQualityReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWiFiConnectionQualityReadAllFrom_initialTag;
  Specified = GEOWiFiConnectionQualityReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOWiFiConnectionQualityCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 352));
  return Specified;
}

void sub_1895B543C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiConnectionQualityReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiConnectionQualityReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895B549C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiConnectionQualityIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  int v146;
  unsigned int v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  int v176;
  unsigned int v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  int v185;
  unsigned int v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  int v191;
  unsigned int v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  int v201;
  unsigned int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  int v211;
  unsigned int v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  int v221;
  unsigned int v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  int v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  int v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  int v256;
  unint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  int v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  int v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  int v272;
  _BOOL8 v273;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v26 = v21++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 2u:
          if (v16 == 2)
            goto LABEL_415;
          goto LABEL_475;
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v26 = v27++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            v35 = v34 + 1;
            if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v26 = v32++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            v40 = v39 + 1;
            if (v39 == -1 || v40 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v26 = v37++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xAu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v26 = v42++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            v50 = v49 + 1;
            if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v26 = v47++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v26 = v52++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xDu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v57 = 0;
          while (1)
          {
            v58 = *v2;
            v59 = *(_QWORD *)&a1[v58];
            v60 = v59 + 1;
            if (v59 == -1 || v60 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v61 = *(char *)(*(_QWORD *)&a1[*v5] + v59);
            *(_QWORD *)&a1[v58] = v60;
            if (v61 < 0)
            {
              v26 = v57++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v62 = 0;
          while (1)
          {
            v63 = *v2;
            v64 = *(_QWORD *)&a1[v63];
            v65 = v64 + 1;
            if (v64 == -1 || v65 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
            *(_QWORD *)&a1[v63] = v65;
            if (v66 < 0)
            {
              v26 = v62++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v67 = 0;
          while (1)
          {
            v68 = *v2;
            v69 = *(_QWORD *)&a1[v68];
            v70 = v69 + 1;
            if (v69 == -1 || v70 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
            *(_QWORD *)&a1[v68] = v70;
            if (v71 < 0)
            {
              v26 = v67++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v72 = 0;
          while (1)
          {
            v73 = *v2;
            v74 = *(_QWORD *)&a1[v73];
            v75 = v74 + 1;
            if (v74 == -1 || v75 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v76 = *(char *)(*(_QWORD *)&a1[*v5] + v74);
            *(_QWORD *)&a1[v73] = v75;
            if (v76 < 0)
            {
              v26 = v72++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x11u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v77 = 0;
          while (1)
          {
            v78 = *v2;
            v79 = *(_QWORD *)&a1[v78];
            v80 = v79 + 1;
            if (v79 == -1 || v80 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v81 = *(char *)(*(_QWORD *)&a1[*v5] + v79);
            *(_QWORD *)&a1[v78] = v80;
            if (v81 < 0)
            {
              v26 = v77++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x12u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v82 = 0;
          while (1)
          {
            v83 = *v2;
            v84 = *(_QWORD *)&a1[v83];
            v85 = v84 + 1;
            if (v84 == -1 || v85 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v86 = *(char *)(*(_QWORD *)&a1[*v5] + v84);
            *(_QWORD *)&a1[v83] = v85;
            if (v86 < 0)
            {
              v26 = v82++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x13u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v87 = 0;
          while (1)
          {
            v88 = *v2;
            v89 = *(_QWORD *)&a1[v88];
            v90 = v89 + 1;
            if (v89 == -1 || v90 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v91 = *(char *)(*(_QWORD *)&a1[*v5] + v89);
            *(_QWORD *)&a1[v88] = v90;
            if (v91 < 0)
            {
              v26 = v87++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x14u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v92 = 0;
          while (1)
          {
            v93 = *v2;
            v94 = *(_QWORD *)&a1[v93];
            v95 = v94 + 1;
            if (v94 == -1 || v95 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v96 = *(char *)(*(_QWORD *)&a1[*v5] + v94);
            *(_QWORD *)&a1[v93] = v95;
            if (v96 < 0)
            {
              v26 = v92++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x15u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v97 = 0;
          while (1)
          {
            v98 = *v2;
            v99 = *(_QWORD *)&a1[v98];
            v100 = v99 + 1;
            if (v99 == -1 || v100 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v101 = *(char *)(*(_QWORD *)&a1[*v5] + v99);
            *(_QWORD *)&a1[v98] = v100;
            if (v101 < 0)
            {
              v26 = v97++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x16u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v102 = 0;
          while (1)
          {
            v103 = *v2;
            v104 = *(_QWORD *)&a1[v103];
            v105 = v104 + 1;
            if (v104 == -1 || v105 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v106 = *(char *)(*(_QWORD *)&a1[*v5] + v104);
            *(_QWORD *)&a1[v103] = v105;
            if (v106 < 0)
            {
              v26 = v102++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x17u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v107 = 0;
          while (1)
          {
            v108 = *v2;
            v109 = *(_QWORD *)&a1[v108];
            v110 = v109 + 1;
            if (v109 == -1 || v110 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v111 = *(char *)(*(_QWORD *)&a1[*v5] + v109);
            *(_QWORD *)&a1[v108] = v110;
            if (v111 < 0)
            {
              v26 = v107++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x35u:
          if (v16 != 5)
            goto LABEL_475;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_433;
          v20 = v19 + 4;
          goto LABEL_22;
        case 0x21u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v112 = 0;
          while (1)
          {
            v113 = *v2;
            v114 = *(_QWORD *)&a1[v113];
            v115 = v114 + 1;
            if (v114 == -1 || v115 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v116 = *(char *)(*(_QWORD *)&a1[*v5] + v114);
            *(_QWORD *)&a1[v113] = v115;
            if (v116 < 0)
            {
              v26 = v112++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x24u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v117 = 0;
          while (1)
          {
            v118 = *v2;
            v119 = *(_QWORD *)&a1[v118];
            v120 = v119 + 1;
            if (v119 == -1 || v120 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v121 = *(char *)(*(_QWORD *)&a1[*v5] + v119);
            *(_QWORD *)&a1[v118] = v120;
            if (v121 < 0)
            {
              v26 = v117++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x25u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v122 = 0;
          while (1)
          {
            v123 = *v2;
            v124 = *(_QWORD *)&a1[v123];
            v125 = v124 + 1;
            if (v124 == -1 || v125 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v126 = *(char *)(*(_QWORD *)&a1[*v5] + v124);
            *(_QWORD *)&a1[v123] = v125;
            if (v126 < 0)
            {
              v26 = v122++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x26u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v127 = 0;
          while (1)
          {
            v128 = *v2;
            v129 = *(_QWORD *)&a1[v128];
            v130 = v129 + 1;
            if (v129 == -1 || v130 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v131 = *(char *)(*(_QWORD *)&a1[*v5] + v129);
            *(_QWORD *)&a1[v128] = v130;
            if (v131 < 0)
            {
              v26 = v127++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x27u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v132 = 0;
          while (1)
          {
            v133 = *v2;
            v134 = *(_QWORD *)&a1[v133];
            v135 = v134 + 1;
            if (v134 == -1 || v135 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v136 = *(char *)(*(_QWORD *)&a1[*v5] + v134);
            *(_QWORD *)&a1[v133] = v135;
            if (v136 < 0)
            {
              v26 = v132++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x28u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v137 = 0;
          while (1)
          {
            v138 = *v2;
            v139 = *(_QWORD *)&a1[v138];
            v140 = v139 + 1;
            if (v139 == -1 || v140 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v141 = *(char *)(*(_QWORD *)&a1[*v5] + v139);
            *(_QWORD *)&a1[v138] = v140;
            if (v141 < 0)
            {
              v26 = v137++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x29u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v142 = 0;
          while (1)
          {
            v143 = *v2;
            v144 = *(_QWORD *)&a1[v143];
            v145 = v144 + 1;
            if (v144 == -1 || v145 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v146 = *(char *)(*(_QWORD *)&a1[*v5] + v144);
            *(_QWORD *)&a1[v143] = v145;
            if (v146 < 0)
            {
              v26 = v142++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x2Au:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v147 = 0;
          while (1)
          {
            v148 = *v2;
            v149 = *(_QWORD *)&a1[v148];
            v150 = v149 + 1;
            if (v149 == -1 || v150 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v151 = *(char *)(*(_QWORD *)&a1[*v5] + v149);
            *(_QWORD *)&a1[v148] = v150;
            if (v151 < 0)
            {
              v26 = v147++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x2Bu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v152 = 0;
          while (1)
          {
            v153 = *v2;
            v154 = *(_QWORD *)&a1[v153];
            v155 = v154 + 1;
            if (v154 == -1 || v155 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v156 = *(char *)(*(_QWORD *)&a1[*v5] + v154);
            *(_QWORD *)&a1[v153] = v155;
            if (v156 < 0)
            {
              v26 = v152++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x2Du:
          if (v16 != 2 || !PBReaderPlaceMark() || (GEOLocationIsValid(a1) & 1) == 0)
            goto LABEL_475;
          goto LABEL_437;
        case 0x2Eu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v157 = 0;
          while (1)
          {
            v158 = *v2;
            v159 = *(_QWORD *)&a1[v158];
            v160 = v159 + 1;
            if (v159 == -1 || v160 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v161 = *(char *)(*(_QWORD *)&a1[*v5] + v159);
            *(_QWORD *)&a1[v158] = v160;
            if (v161 < 0)
            {
              v26 = v157++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x2Fu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v162 = 0;
          while (1)
          {
            v163 = *v2;
            v164 = *(_QWORD *)&a1[v163];
            v165 = v164 + 1;
            if (v164 == -1 || v165 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v166 = *(char *)(*(_QWORD *)&a1[*v5] + v164);
            *(_QWORD *)&a1[v163] = v165;
            if (v166 < 0)
            {
              v26 = v162++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x30u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_475;
            while (1)
            {
              v167 = *v2;
              v168 = *(_QWORD *)&a1[v167];
              v169 = v168 + 1;
              if (v168 == -1 || v169 > *(_QWORD *)&a1[*v3])
                goto LABEL_432;
              v170 = *(char *)(*(_QWORD *)&a1[*v5] + v168);
              *(_QWORD *)&a1[v167] = v169;
              if (v170 < 0)
              {
                v171 = v16++;
                if (v171 <= 8)
                  continue;
              }
              goto LABEL_438;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_475;
LABEL_444:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v258 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v259 = *v2;
              v260 = *(_QWORD *)&a1[v259];
              v261 = v260 + 1;
              if (v260 == -1 || v261 > *(_QWORD *)&a1[*v3])
                break;
              v262 = *(char *)(*(_QWORD *)&a1[*v5] + v260);
              *(_QWORD *)&a1[v259] = v261;
              if (v262 < 0)
              {
                v13 = v258++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_444;
            }
            a1[*v4] = 1;
          }
          goto LABEL_437;
        case 0x31u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v172 = 0;
          while (1)
          {
            v173 = *v2;
            v174 = *(_QWORD *)&a1[v173];
            v175 = v174 + 1;
            if (v174 == -1 || v175 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v176 = *(char *)(*(_QWORD *)&a1[*v5] + v174);
            *(_QWORD *)&a1[v173] = v175;
            if (v176 < 0)
            {
              v26 = v172++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x32u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v177 = 0;
          while (1)
          {
            v178 = *v2;
            v179 = *(_QWORD *)&a1[v178];
            v180 = v179 + 1;
            if (v179 == -1 || v180 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v181 = *(char *)(*(_QWORD *)&a1[*v5] + v179);
            *(_QWORD *)&a1[v178] = v180;
            if (v181 < 0)
            {
              v26 = v177++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x33u:
          if (v16 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_475;
            while (1)
            {
              v182 = *v2;
              v183 = *(_QWORD *)&a1[v182];
              v184 = v183 + 1;
              if (v183 == -1 || v184 > *(_QWORD *)&a1[*v3])
                goto LABEL_432;
              v185 = *(char *)(*(_QWORD *)&a1[*v5] + v183);
              *(_QWORD *)&a1[v182] = v184;
              if (v185 < 0)
              {
                v186 = v16++;
                if (v186 <= 8)
                  continue;
              }
              goto LABEL_438;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_475;
LABEL_454:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v263 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v264 = *v2;
              v265 = *(_QWORD *)&a1[v264];
              v266 = v265 + 1;
              if (v265 == -1 || v266 > *(_QWORD *)&a1[*v3])
                break;
              v267 = *(char *)(*(_QWORD *)&a1[*v5] + v265);
              *(_QWORD *)&a1[v264] = v266;
              if (v267 < 0)
              {
                v13 = v263++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_454;
            }
            a1[*v4] = 1;
          }
          goto LABEL_437;
        case 0x34u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v187 = 0;
          while (1)
          {
            v188 = *v2;
            v189 = *(_QWORD *)&a1[v188];
            v190 = v189 + 1;
            if (v189 == -1 || v190 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v191 = *(char *)(*(_QWORD *)&a1[*v5] + v189);
            *(_QWORD *)&a1[v188] = v190;
            if (v191 < 0)
            {
              v26 = v187++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x36u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v192 = 0;
          while (1)
          {
            v193 = *v2;
            v194 = *(_QWORD *)&a1[v193];
            v195 = v194 + 1;
            if (v194 == -1 || v195 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v196 = *(char *)(*(_QWORD *)&a1[*v5] + v194);
            *(_QWORD *)&a1[v193] = v195;
            if (v196 < 0)
            {
              v26 = v192++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x37u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v197 = 0;
          while (1)
          {
            v198 = *v2;
            v199 = *(_QWORD *)&a1[v198];
            v200 = v199 + 1;
            if (v199 == -1 || v200 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v201 = *(char *)(*(_QWORD *)&a1[*v5] + v199);
            *(_QWORD *)&a1[v198] = v200;
            if (v201 < 0)
            {
              v26 = v197++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x38u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v202 = 0;
          while (1)
          {
            v203 = *v2;
            v204 = *(_QWORD *)&a1[v203];
            v205 = v204 + 1;
            if (v204 == -1 || v205 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v206 = *(char *)(*(_QWORD *)&a1[*v5] + v204);
            *(_QWORD *)&a1[v203] = v205;
            if (v206 < 0)
            {
              v26 = v202++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x39u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v207 = 0;
          while (1)
          {
            v208 = *v2;
            v209 = *(_QWORD *)&a1[v208];
            v210 = v209 + 1;
            if (v209 == -1 || v210 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v211 = *(char *)(*(_QWORD *)&a1[*v5] + v209);
            *(_QWORD *)&a1[v208] = v210;
            if (v211 < 0)
            {
              v26 = v207++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x3Au:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v212 = 0;
          while (1)
          {
            v213 = *v2;
            v214 = *(_QWORD *)&a1[v213];
            v215 = v214 + 1;
            if (v214 == -1 || v215 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v216 = *(char *)(*(_QWORD *)&a1[*v5] + v214);
            *(_QWORD *)&a1[v213] = v215;
            if (v216 < 0)
            {
              v26 = v212++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x3Bu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v217 = 0;
          while (1)
          {
            v218 = *v2;
            v219 = *(_QWORD *)&a1[v218];
            v220 = v219 + 1;
            if (v219 == -1 || v220 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v221 = *(char *)(*(_QWORD *)&a1[*v5] + v219);
            *(_QWORD *)&a1[v218] = v220;
            if (v221 < 0)
            {
              v26 = v217++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x3Cu:
        case 0x3Du:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiAPIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x3Eu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiQualityFeedbackIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x3Fu:
          if (v16 == 2)
            goto LABEL_415;
          goto LABEL_475;
        case 0x40u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiConnectionRoamStateIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x41u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiConnectionSpeedTestIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x42u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v222 = 0;
          while (1)
          {
            v223 = *v2;
            v224 = *(_QWORD *)&a1[v223];
            v225 = v224 + 1;
            if (v224 == -1 || v225 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v226 = *(char *)(*(_QWORD *)&a1[*v5] + v224);
            *(_QWORD *)&a1[v223] = v225;
            if (v226 < 0)
            {
              v26 = v222++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x43u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v227 = 0;
          while (1)
          {
            v228 = *v2;
            v229 = *(_QWORD *)&a1[v228];
            v230 = v229 + 1;
            if (v229 == -1 || v230 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v231 = *(char *)(*(_QWORD *)&a1[*v5] + v229);
            *(_QWORD *)&a1[v228] = v230;
            if (v231 < 0)
            {
              v26 = v227++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x44u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v232 = 0;
          while (1)
          {
            v233 = *v2;
            v234 = *(_QWORD *)&a1[v233];
            v235 = v234 + 1;
            if (v234 == -1 || v235 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v236 = *(char *)(*(_QWORD *)&a1[*v5] + v234);
            *(_QWORD *)&a1[v233] = v235;
            if (v236 < 0)
            {
              v26 = v232++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x45u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v237 = 0;
          while (1)
          {
            v238 = *v2;
            v239 = *(_QWORD *)&a1[v238];
            v240 = v239 + 1;
            if (v239 == -1 || v240 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v241 = *(char *)(*(_QWORD *)&a1[*v5] + v239);
            *(_QWORD *)&a1[v238] = v240;
            if (v241 < 0)
            {
              v26 = v237++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x46u:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v242 = 0;
          while (1)
          {
            v243 = *v2;
            v244 = *(_QWORD *)&a1[v243];
            v245 = v244 + 1;
            if (v244 == -1 || v245 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v246 = *(char *)(*(_QWORD *)&a1[*v5] + v244);
            *(_QWORD *)&a1[v243] = v245;
            if (v246 < 0)
            {
              v26 = v242++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x47u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiHarvestLabelIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x48u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOWiFiPasspointInfoIsValid(a1))
            goto LABEL_475;
          goto LABEL_437;
        case 0x49u:
          if (v16 == 2)
            goto LABEL_415;
          goto LABEL_475;
        case 0x4Au:
          if (v16 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_475:
              PBReaderRecallMark();
              return 0;
            }
LABEL_464:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v268 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v269 = *v2;
                v270 = *(_QWORD *)&a1[v269];
                v271 = v270 + 1;
                if (v270 == -1 || v271 > *(_QWORD *)&a1[*v3])
                  break;
                v272 = *(char *)(*(_QWORD *)&a1[*v5] + v270);
                *(_QWORD *)&a1[v269] = v271;
                if (v272 < 0)
                {
                  v13 = v268++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_464;
              }
              a1[*v4] = 1;
            }
LABEL_437:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_475;
            while (1)
            {
              v247 = *v2;
              v248 = *(_QWORD *)&a1[v247];
              v249 = v248 + 1;
              if (v248 == -1 || v249 > *(_QWORD *)&a1[*v3])
                break;
              v250 = *(char *)(*(_QWORD *)&a1[*v5] + v248);
              *(_QWORD *)&a1[v247] = v249;
              if (v250 < 0)
              {
                v251 = v16++;
                if (v251 <= 8)
                  continue;
              }
              goto LABEL_438;
            }
LABEL_432:
            v14 = *v4;
LABEL_433:
            a1[v14] = 1;
          }
LABEL_438:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_473;
          break;
        case 0x4Bu:
          if ((v8 & 7) != 0)
            goto LABEL_475;
          v252 = 0;
          while (1)
          {
            v253 = *v2;
            v254 = *(_QWORD *)&a1[v253];
            v255 = v254 + 1;
            if (v254 == -1 || v255 > *(_QWORD *)&a1[*v3])
              goto LABEL_432;
            v256 = *(char *)(*(_QWORD *)&a1[*v5] + v254);
            *(_QWORD *)&a1[v253] = v255;
            if (v256 < 0)
            {
              v26 = v252++ > 8;
              if (!v26)
                continue;
            }
            goto LABEL_438;
          }
        case 0x4Cu:
          if (v16 == 2 && PBReaderPlaceMark() && GEOWiFiBeaconInfoIsValid(a1))
            goto LABEL_437;
          goto LABEL_475;
        case 0x4Du:
          if (v16 != 1)
            goto LABEL_475;
          v18 = *v2;
          v257 = *(_QWORD *)&a1[v18];
          if (v257 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_433;
          v20 = v257 + 8;
LABEL_22:
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_433;
          *(_QWORD *)&a1[v18] = v20;
          goto LABEL_438;
        default:
LABEL_415:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_475;
          goto LABEL_438;
      }
    }
  }
LABEL_473:
  v273 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v273;
}

BOOL GEOWiFiQualityFeedbackIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEOWiFiConnectionRoamStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_39;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0)
          {
            v21 = v16++ > 8;
            if (!v21)
              continue;
          }
          goto LABEL_38;
        }
LABEL_36:
        a1[*v4] = 1;
        goto LABEL_38;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        v27 = 0;
        goto LABEL_40;
      }
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if ((v8 & 7) != 0)
      goto LABEL_41;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_36;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0)
      {
        v21 = v22++ > 8;
        if (!v21)
          continue;
      }
      goto LABEL_38;
    }
  }
LABEL_39:
  v27 = a1[*v4] == 0;
LABEL_40:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOWiFiConnectionSpeedTestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v16 != 5)
          goto LABEL_30;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_30:
        v21 = 0;
        goto LABEL_29;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_29:
  PBReaderRecallMark();
  return v21;
}

BOOL GEOWiFiHarvestLabelIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_45;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_39;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_42;
          }
        case 2u:
          if (v15 == 2)
            goto LABEL_41;
          goto LABEL_45;
        case 3u:
          if (v15 == 2)
            goto LABEL_41;
          goto LABEL_45;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_45;
          v23 = 0;
          break;
        case 5u:
          if (v15 == 2)
            goto LABEL_41;
          goto LABEL_45;
        default:
LABEL_41:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_45:
          v28 = 0;
          goto LABEL_44;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_42;
      }
LABEL_39:
      a1[*v4] = 1;
LABEL_42:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
LABEL_44:
  PBReaderRecallMark();
  return v28;
}

BOOL GEOWiFiPasspointInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_43;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_46;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_43;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_46;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v28 = 0;
          break;
        case 4u:
          if (v15 == 2)
            goto LABEL_45;
          goto LABEL_49;
        default:
LABEL_45:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          v33 = 0;
          goto LABEL_48;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_46;
      }
LABEL_43:
      a1[*v4] = 1;
LABEL_46:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
LABEL_48:
  PBReaderRecallMark();
  return v33;
}

void sub_1895B82D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOWiFiConnectionQualityIsDirty(uint64_t a1)
{
  char v2;
  uint64_t v3;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 352));
  v2 = *(_BYTE *)(a1 + 480);
  if ((v2 & 0xC) != 0)
    return 1;
  v3 = *(_QWORD *)(a1 + 472);
  if ((v3 & 0x2000000000000000) != 0)
  {
    if (GEOLocationIsDirty(*(os_unfair_lock_s **)(a1 + 192)))
      return 1;
    v3 = *(_QWORD *)(a1 + 472);
    v2 = *(_BYTE *)(a1 + 480);
  }
  if (v3 & 0x4B50000000000000 | v2 & 3)
    return 1;
  if ((v3 & 0x1000000000000000) == 0)
    goto LABEL_9;
  if (GEOWiFiHarvestLabelIsDirty(*(_QWORD *)(a1 + 184)))
    return 1;
  v3 = *(_QWORD *)(a1 + 472);
LABEL_9:
  if ((v3 & 0x8420000000000000) != 0)
    return 1;
  return (v3 & 0x80000000000000) != 0 && GEOWiFiBeaconInfoIsDirty(*(_QWORD *)(a1 + 88));
}

os_unfair_lock_s *GEOWiFiConnectionQualityIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOWiFiConnectionQualityIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 88);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void GEOWiFiConnectionQualityClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  _DWORD *v8;

  if (a3
    && objc_msgSend(a1, "hasLocation")
    && (objc_msgSend(a1, "location"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "location");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (_DWORD *)objc_msgSend(v7, "copy");

    GEOLocationClearSensitiveFields(v8);
    objc_msgSend(a1, "setLocation:", v8);
  }
  else
  {
    objc_msgSend(a1, "location");
    v8 = (_DWORD *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEOWiFiConnectionQualityHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "location");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOLocationHasSensitiveFields((uint64_t)v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_1895BA174(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiConnectionRoamStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v27 = 0;
          v28 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&v3[*v5])
              break;
            v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v31;
            v20 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
            {
              v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMaxRSSI;
              goto LABEL_40;
            }
            v27 += 7;
            v25 = v28++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMaxRSSI;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMaxRSSI;
LABEL_39:
          v3[*v6] = 1;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_48;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 16) |= 2u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
            {
              v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMinRSSI;
              goto LABEL_39;
            }
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              break;
            v18 += 7;
            v25 = v19++ > 8;
            if (v25)
            {
              LODWORD(v20) = 0;
              v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMinRSSI;
              goto LABEL_42;
            }
          }
          v26 = &OBJC_IVAR___GEOWiFiConnectionRoamState__lateRoamMinRSSI;
        }
LABEL_40:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_42:
        *(_DWORD *)(a1 + *v26) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_48:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_1895BCEBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiConnectionRoamStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiConnectionRoamStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895BCF1C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiConnectionSpeedTestReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  _BOOL8 v24;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 16) |= 1u;
          v21 = *v4;
          v22 = *(_QWORD *)&v3[v21];
          if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOWiFiConnectionSpeedTest__avgDL;
        }
        else
        {
          if ((v10 >> 3) != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_36;
            continue;
          }
          *(_BYTE *)(a1 + 16) |= 2u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v23 = &OBJC_IVAR___GEOWiFiConnectionSpeedTest__avgUL;
        }
        *(_DWORD *)(a1 + *v23) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v24 = v3[*v6] == 0;
  }
  else
  {
LABEL_36:
    v24 = 0;
  }
  objc_sync_exit(v3);

  return v24;
}

void sub_1895BD838(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiConnectionSpeedTestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiConnectionSpeedTestReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895BD898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895BDFD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiHarvestLabelReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int v25;
  unint64_t v27;
  BOOL v28;
  int *v29;
  int v30;
  int v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  void *v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  int v54;
  char v55;
  void *v56;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 60) >> 4) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (1)
  {
    v11 = a3[v9];
    if (v11 >= 0xFFFFFFFE)
    {
      v7 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v9;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v7 | (v10 > 1);
  if (v7 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_86;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      v22 = v21 + 1;
      if (v21 == -1 || v22 > *(_QWORD *)(v3 + *v6))
        break;
      v23 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v22;
      v19 |= (unint64_t)(v23 & 0x7F) << v17;
      if ((v23 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      v24 = v18++ >= 9;
      if (v24)
      {
        v19 = 0;
        v25 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v25 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v25 || (v19 & 7) == 4)
    {
LABEL_86:
      if ((v12 & 1) != 0)
      {
        v53 = 1;
        goto LABEL_94;
      }
      if (v13)
      {
        while (1)
        {
          v54 = *v13++;
          v55 = 16;
          switch(v54)
          {
            case 0:
              goto LABEL_95;
            case 2:
              goto LABEL_92;
            case 3:
              v55 = 4;
              goto LABEL_92;
            case 5:
              v55 = 8;
LABEL_92:
              *(_BYTE *)(a1 + 60) |= v55;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_95;
    }
    v27 = v19 >> 3;
    v28 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v29 = v13;
      do
      {
        v31 = *v29++;
        v30 = v31;
        v28 = v31 != 0;
        if (v31)
          v32 = v30 == (_DWORD)v27;
        else
          v32 = 1;
      }
      while (!v32);
    }
    switch((int)v27)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_66;
        v33 = 0;
        v34 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (1)
        {
          v36 = *v14;
          v37 = *(_QWORD *)(v3 + v36);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(v3 + *v6))
            break;
          v39 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v37);
          *(_QWORD *)(v3 + v36) = v38;
          v35 |= (unint64_t)(v39 & 0x7F) << v33;
          if ((v39 & 0x80) == 0)
            goto LABEL_69;
          v33 += 7;
          v24 = v34++ >= 9;
          if (v24)
          {
            LODWORD(v35) = 0;
            goto LABEL_71;
          }
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_69:
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v35) = 0;
LABEL_71:
        v51 = 56;
        goto LABEL_76;
      case 2:
        if (!v28)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 60) & 0x10) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 32;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_100;
        v52 = 8 * *(_BYTE *)(a1 + 60);
        goto LABEL_83;
      case 3:
        if (!v28)
          goto LABEL_66;
        if ((*(_BYTE *)(a1 + 60) & 4) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 16;
          goto LABEL_65;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_100;
        v52 = 32 * *(_BYTE *)(a1 + 60);
        goto LABEL_83;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_66;
        v43 = 0;
        v44 = 0;
        v35 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (2)
        {
          v45 = *v14;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v15) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v35 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v24 = v44++ >= 9;
              if (v24)
              {
                LODWORD(v35) = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v15))
          LODWORD(v35) = 0;
LABEL_75:
        v51 = 52;
LABEL_76:
        *(_DWORD *)(a1 + v51) = v35;
        goto LABEL_85;
      case 5:
        if (!v28)
        {
LABEL_66:
          v50 = PBReaderSkipValueWithTag();
          v15 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
LABEL_93:
            v53 = 0;
            goto LABEL_94;
          }
          goto LABEL_85;
        }
        if ((*(_BYTE *)(a1 + 60) & 8) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 24;
LABEL_65:
          v49 = *(void **)(a1 + v42);
          *(_QWORD *)(a1 + v42) = v41;

          --v9;
LABEL_84:
          v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_85:
          if (!(v12 & 1 | (v9 != 0)))
            goto LABEL_86;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v52 = 16 * *(_BYTE *)(a1 + 60);
LABEL_83:
          v9 += v52 >> 7;
          goto LABEL_84;
        }
LABEL_100:
        v53 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_94:
        *(_BYTE *)(a1 + 60) |= 0x10u;
        *(_BYTE *)(a1 + 60) |= 4u;
        *(_BYTE *)(a1 + 60) |= 8u;
        if ((v53 & 1) != 0)
        {
LABEL_95:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_96;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_96:
            v56 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v40 = PBReaderSkipValueWithTag();
        v15 = (int *)MEMORY[0x1E0D82BC8];
        if (!v40)
          goto LABEL_93;
        goto LABEL_85;
    }
  }
}

void sub_1895BE6D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895BEB34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895BF31C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiHarvestLabelReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOWiFiHarvestLabelReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOWiFiHarvestLabelReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOWiFiHarvestLabelReadAllFrom_initialTag;
  Specified = GEOWiFiHarvestLabelReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1895BF4A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOWiFiHarvestLabelReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiHarvestLabelReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895BF508(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895BF6E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiHarvestLabelIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 60) & 0x3C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_1895BFA5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiPasspointInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 1u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                LODWORD(v20) = 0;
                goto LABEL_47;
              }
            }
            v3[*v6] = 1;
LABEL_45:
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_47:
            v39 = 16;
            goto LABEL_56;
          case 2u:
            v25 = 0;
            v26 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 2u;
            while (2)
            {
              v27 = *v4;
              v28 = *(_QWORD *)&v3[v27];
              v29 = v28 + 1;
              if (v28 == -1 || v29 > *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v28);
                *(_QWORD *)&v3[v27] = v29;
                v20 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v15 = v26++ >= 9;
                  if (v15)
                  {
                    LODWORD(v20) = 0;
                    goto LABEL_51;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v20) = 0;
LABEL_51:
            v39 = 20;
            goto LABEL_56;
          case 3u:
            v31 = 0;
            v32 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 28) |= 4u;
            break;
          case 4u:
            PBReaderReadString();
            v37 = objc_claimAutoreleasedReturnValue();
            v38 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v37;

            continue;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_59;
            continue;
        }
        while (1)
        {
          v33 = *v4;
          v34 = *(_QWORD *)&v3[v33];
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)&v3[*v5])
            break;
          v36 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
          *(_QWORD *)&v3[v33] = v35;
          v20 |= (unint64_t)(v36 & 0x7F) << v31;
          if ((v36 & 0x80) == 0)
            goto LABEL_53;
          v31 += 7;
          v15 = v32++ >= 9;
          if (v15)
          {
            LODWORD(v20) = 0;
            goto LABEL_55;
          }
        }
        v3[*v6] = 1;
LABEL_53:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_55:
        v39 = 24;
LABEL_56:
        *(_DWORD *)(a1 + v39) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_59:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_1895C0E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiPasspointInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiPasspointInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895C0EDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiQualityFeedbackReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  _BOOL8 v40;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__maxValue;
              goto LABEL_49;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__maxValue;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__maxValue;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v18 == 2)
        {
          v34 = 0;
          v35 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v36 = *v4;
            v37 = *(_QWORD *)&v3[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__value;
              goto LABEL_48;
            }
            v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
            *(_QWORD *)&v3[v36] = v38;
            v21 |= (unint64_t)(v39 & 0x7F) << v34;
            if ((v39 & 0x80) == 0)
              break;
            v34 += 7;
            v26 = v35++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__value;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__value;
        }
        else
        {
          if ((_DWORD)v18 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__type;
              goto LABEL_48;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__type;
              goto LABEL_51;
            }
          }
          v27 = &OBJC_IVAR___GEOWiFiQualityFeedback__type;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v21) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v27) = v21;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v40 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v40 = 0;
  }
  objc_sync_exit(v3);

  return v40;
}

void sub_1895C1D4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOWiFiQualityFeedbackReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOWiFiQualityFeedbackReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895C1DAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895C52F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL GEOTransitDepartureIsImminentDepartureTimeInterval(double a1)
{
  return -GEOConfigGetDouble(GeoServicesConfig_DepartureCutoffGracePeriodNetworkDefault, (uint64_t)off_1EDF4D5C8) < a1
      && a1 < 60.0;
}

void sub_1895C7928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double GEOTransitDepartureNearFuturePeriod()
{
  return 5400.0;
}

BOOL GEOTransitDepartureIsNearFutureDepartureTimeInterval(double a1)
{
  return a1 < 5400.0 && a1 > 0.0;
}

BOOL GEOTransitDepartureIsImminentDepartureDate(void *a1)
{
  double v1;
  double v2;

  objc_msgSend(a1, "timeIntervalSinceNow");
  v2 = v1;
  return v1 > -GEOConfigGetDouble(GeoServicesConfig_DepartureCutoffGracePeriodNetworkDefault, (uint64_t)off_1EDF4D5C8)
      && v2 < 60.0;
}

BOOL GEOTransitDepartureIsOntime(double a1, double a2)
{
  return a1 - GEOConfigGetDouble(GeoServicesConfig_DepartureCutoffGracePeriodNetworkDefault, (uint64_t)off_1EDF4D5C8) <= a2
      && a1 + 60.0 >= a2;
}

id GEOTransitVehiclePositionDescription(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  double v13;
  double v14;
  void *v15;
  double v16;
  void *v17;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_opt_class();
  objc_msgSend(v2, "headsign");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "direction");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "coordinate");
  v7 = v6;
  objc_msgSend(v2, "coordinate");
  v9 = v8;
  objc_msgSend(v2, "heading");
  v11 = v10;
  objc_msgSend(v2, "timestamp");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "timeIntervalSinceNow");
  v14 = -v13;
  objc_msgSend(v2, "timestamp");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "timeIntervalSince1970");
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%@<%p> (\"%@\" / \"%@\" | (%lf, %lf) | %#.1lfº | %#.1lfs ago, UTC:%lu)"), v3, v2, v4, v5, v7, v9, v11, *(_QWORD *)&v14, (unint64_t)v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  return v17;
}

void sub_1895CC2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t NanoPreferencesSyncLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = NanoPreferencesSyncLibraryCore_frameworkLibrary;
  v6 = NanoPreferencesSyncLibraryCore_frameworkLibrary;
  if (!NanoPreferencesSyncLibraryCore_frameworkLibrary)
  {
    v7 = __const__block__paths_4;
    v8 = *(_OWORD *)&off_1E1C125C8;
    v1 = _sl_dlopen();
    v4[3] = v1;
    NanoPreferencesSyncLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CCCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t NanoPreferencesSyncLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = NanoPreferencesSyncLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getNPSManagerClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getNPSManagerClass_softClass;
  v7 = getNPSManagerClass_softClass;
  if (!getNPSManagerClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getNPSManagerClass_block_invoke;
    v3[3] = &unk_1E1C03348;
    v3[4] = &v4;
    __getNPSManagerClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1895CCDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getNPSManagerClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  NanoPreferencesSyncLibrary();
  result = objc_getClass("NPSManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getNPSManagerClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)IDSLibraryCore(v3);
  }
  return result;
}

uint64_t IDSLibraryCore()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = IDSLibraryCore_frameworkLibrary;
  v6 = IDSLibraryCore_frameworkLibrary;
  if (!IDSLibraryCore_frameworkLibrary)
  {
    v7 = __const__block__paths_12;
    v8 = *(_OWORD *)&off_1E1C125E8;
    v1 = _sl_dlopen();
    v4[3] = v1;
    IDSLibraryCore_frameworkLibrary = v1;
    v0 = v1;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CCEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

uint64_t IDSLibrary()
{
  uint64_t v0;
  void *v2;

  v0 = IDSLibraryCore();
  if (!v0)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

id getIDSServiceClass()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getIDSServiceClass_softClass;
  v7 = getIDSServiceClass_softClass;
  if (!getIDSServiceClass_softClass)
  {
    v3[0] = MEMORY[0x1E0C809B0];
    v3[1] = 3221225472;
    v3[2] = __getIDSServiceClass_block_invoke;
    v3[3] = &unk_1E1C03348;
    v3[4] = &v4;
    __getIDSServiceClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1895CD008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class __getIDSServiceClass_block_invoke(uint64_t a1)
{
  Class result;
  uint64_t v3;

  IDSLibrary();
  result = objc_getClass("IDSService");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getIDSServiceClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = abort_report_np();
    return (Class)getIDSDefaultPairedDeviceSymbolLoc(v3);
  }
  return result;
}

void *getIDSDefaultPairedDeviceSymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getIDSDefaultPairedDeviceSymbolLoc_ptr;
  v6 = getIDSDefaultPairedDeviceSymbolLoc_ptr;
  if (!getIDSDefaultPairedDeviceSymbolLoc_ptr)
  {
    v1 = (void *)IDSLibrary();
    v0 = dlsym(v1, "IDSDefaultPairedDevice");
    v4[3] = (uint64_t)v0;
    getIDSDefaultPairedDeviceSymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CD104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getIDSDefaultPairedDevice()
{
  id *IDSDefaultPairedDeviceSymbolLoc;
  uint64_t v2;

  IDSDefaultPairedDeviceSymbolLoc = (id *)getIDSDefaultPairedDeviceSymbolLoc();
  if (IDSDefaultPairedDeviceSymbolLoc)
    return *IDSDefaultPairedDeviceSymbolLoc;
  dlerror();
  v2 = abort_report_np();
  return (id)getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc(v2);
}

void *getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc_ptr;
  v6 = getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc_ptr;
  if (!getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc_ptr)
  {
    v1 = (void *)IDSLibrary();
    v0 = dlsym(v1, "IDSSendMessageOptionExpectsPeerResponseKey");
    v4[3] = (uint64_t)v0;
    getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CD1CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getIDSSendMessageOptionExpectsPeerResponseKey()
{
  id *IDSSendMessageOptionExpectsPeerResponseKeySymbolLoc;
  uint64_t v2;

  IDSSendMessageOptionExpectsPeerResponseKeySymbolLoc = (id *)getIDSSendMessageOptionExpectsPeerResponseKeySymbolLoc();
  if (IDSSendMessageOptionExpectsPeerResponseKeySymbolLoc)
    return *IDSSendMessageOptionExpectsPeerResponseKeySymbolLoc;
  dlerror();
  v2 = abort_report_np();
  return (id)getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc(v2);
}

void *getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc_ptr;
  v6 = getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc_ptr;
  if (!getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc_ptr)
  {
    v1 = (void *)IDSLibrary();
    v0 = dlsym(v1, "IDSSendMessageOptionPeerResponseIdentifierKey");
    v4[3] = (uint64_t)v0;
    getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CD294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getIDSSendMessageOptionPeerResponseIdentifierKey()
{
  id *IDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc;

  IDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc = (id *)getIDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc();
  if (IDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc)
    return *IDSSendMessageOptionPeerResponseIdentifierKeySymbolLoc;
  dlerror();
  abort_report_np();
  return getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc();
}

void *getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc_ptr;
  v6 = getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc_ptr;
  if (!getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc_ptr)
  {
    v1 = (void *)IDSLibrary();
    v0 = dlsym(v1, "IDSSendMessageOptionEnforceRemoteTimeoutsKey");
    v4[3] = (uint64_t)v0;
    getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CD35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

id getIDSSendMessageOptionEnforceRemoteTimeoutsKey()
{
  id *IDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc;
  uint64_t v2;

  IDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc = (id *)getIDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc();
  if (IDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc)
    return *IDSSendMessageOptionEnforceRemoteTimeoutsKeySymbolLoc;
  dlerror();
  v2 = abort_report_np();
  return (id)getIDSSendMessageOptionBypassDuetKeySymbolLoc(v2);
}

void *getIDSSendMessageOptionBypassDuetKeySymbolLoc()
{
  void *v0;
  void *v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2020000000;
  v0 = (void *)getIDSSendMessageOptionBypassDuetKeySymbolLoc_ptr;
  v6 = getIDSSendMessageOptionBypassDuetKeySymbolLoc_ptr;
  if (!getIDSSendMessageOptionBypassDuetKeySymbolLoc_ptr)
  {
    v1 = (void *)IDSLibrary();
    v0 = dlsym(v1, "IDSSendMessageOptionBypassDuetKey");
    v4[3] = (uint64_t)v0;
    getIDSSendMessageOptionBypassDuetKeySymbolLoc_ptr = (uint64_t)v0;
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1895CD424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Block_object_dispose(&a9, 8);
  _Unwind_Resume(a1);
}

void getIDSSendMessageOptionBypassDuetKey()
{
  id *IDSSendMessageOptionBypassDuetKeySymbolLoc;
  id v1;
  uint64_t v2;
  void *v3;

  IDSSendMessageOptionBypassDuetKeySymbolLoc = (id *)getIDSSendMessageOptionBypassDuetKeySymbolLoc();
  if (IDSSendMessageOptionBypassDuetKeySymbolLoc)
  {
    v1 = *IDSSendMessageOptionBypassDuetKeySymbolLoc;
  }
  else
  {
    dlerror();
    v2 = abort_report_np();
    -[GEOPDSearchSpellSuggestion setSuggestion:](v2, v3);
  }
}

BOOL GEOPDSearchSpellSuggestionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  GEOPDSearchTokenSet *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  _BOOL8 v35;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v17 = v11++ >= 9;
          if (v17)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_49;
            v20 = objc_alloc_init(GEOPDSearchTokenSet);
            if (GEOPDSearchTokenSetReadAllFrom((uint64_t)v20, v5, a3))
            {
              PBReaderRecallMark();
              v21 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v20;

              continue;
            }

            goto LABEL_49;
          case 2u:
            *(_BYTE *)(a1 + 32) |= 1u;
            v22 = *v6;
            v23 = *(_QWORD *)&v5[v22];
            if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)&v5[*v7])
            {
              v24 = *(_QWORD *)(*(_QWORD *)&v5[*v9] + v23);
              *(_QWORD *)&v5[v22] = v23 + 8;
            }
            else
            {
              v5[*v8] = 1;
              v24 = 0;
            }
            *(_QWORD *)(a1 + 8) = v24;
            continue;
          case 3u:
            v25 = 0;
            v26 = 0;
            v27 = 0;
            *(_BYTE *)(a1 + 32) |= 2u;
            break;
          case 4u:
            *(_BYTE *)(a1 + 32) |= 4u;
            v32 = *v6;
            v33 = *(_QWORD *)&v5[v32];
            if (v33 <= 0xFFFFFFFFFFFFFFFBLL && v33 + 4 <= *(_QWORD *)&v5[*v7])
            {
              v34 = *(_DWORD *)(*(_QWORD *)&v5[*v9] + v33);
              *(_QWORD *)&v5[v32] = v33 + 4;
            }
            else
            {
              v5[*v8] = 1;
              v34 = 0;
            }
            *(_DWORD *)(a1 + 28) = v34;
            continue;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_49;
            continue;
        }
        while (1)
        {
          v28 = *v6;
          v29 = *(_QWORD *)&v5[v28];
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)&v5[*v7])
            break;
          v31 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v29);
          *(_QWORD *)&v5[v28] = v30;
          v27 |= (unint64_t)(v31 & 0x7F) << v25;
          if ((v31 & 0x80) == 0)
            goto LABEL_39;
          v25 += 7;
          v17 = v26++ >= 9;
          if (v17)
          {
            LODWORD(v27) = 0;
            goto LABEL_41;
          }
        }
        v5[*v8] = 1;
LABEL_39:
        if (v5[*v8])
          LODWORD(v27) = 0;
LABEL_41:
        *(_DWORD *)(a1 + 24) = v27;
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v35 = v5[*v8] == 0;
  }
  else
  {
LABEL_49:
    v35 = 0;
  }
  objc_sync_exit(v5);

  return v35;
}

void sub_1895CDC78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchSpellSuggestionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  unint64_t v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOPDSearchTokenSetIsValid(a1))
            goto LABEL_46;
          PBReaderRecallMark();
          continue;
        case 2u:
          if (v16 != 1)
            goto LABEL_46;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_42;
          v20 = v19 + 8;
          goto LABEL_39;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v21 = 0;
          break;
        case 4u:
          if (v16 != 5)
            goto LABEL_46;
          v18 = *v2;
          v27 = *(_QWORD *)&a1[v18];
          if (v27 > 0xFFFFFFFFFFFFFFFBLL)
            goto LABEL_42;
          v20 = v27 + 4;
LABEL_39:
          if (v20 > *(_QWORD *)&a1[*v3])
            goto LABEL_42;
          *(_QWORD *)&a1[v18] = v20;
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_46:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v22 = *v2;
        v23 = *(_QWORD *)&a1[v22];
        v24 = v23 + 1;
        if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
          break;
        v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
        *(_QWORD *)&a1[v22] = v24;
        if (v25 < 0 && v21++ <= 8)
          continue;
        goto LABEL_43;
      }
      v14 = *v4;
LABEL_42:
      a1[v14] = 1;
LABEL_43:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

void sub_1895CE4C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchSpellerRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  void *v37;
  int v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  char v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  __int16 v77;
  char v78;
  int v79;
  __int16 v80;
  void *v81;
  GEOPDSearchLocationContext *v83;
  char v84;
  char v85;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 84)), (uint16x4_t)0xFFFBFFFAFFF8FFF9), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 84) >> 9) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 3;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v85 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v84 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_141;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_141:
      if ((v15 & 1) != 0)
      {
        v78 = 1;
        goto LABEL_153;
      }
      if (v16)
      {
        while (1)
        {
          v79 = *v16++;
          v80 = 256;
          switch(v79)
          {
            case 0:
              goto LABEL_154;
            case 1:
              goto LABEL_149;
            case 2:
              v80 = 128;
              goto LABEL_149;
            case 3:
              v80 = 64;
              goto LABEL_149;
            case 6:
              v80 = 32;
              goto LABEL_149;
            case 10:
              v80 = 512;
LABEL_149:
              *(_WORD *)(a1 + 84) |= v80;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_154;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if ((v85 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
        {
          PBReaderReadString();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = *(void **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v36;
          goto LABEL_103;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_152;
        v77 = *(_WORD *)(a1 + 84) << 7;
        goto LABEL_138;
      case 2:
        if (!v31)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 84) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_152;
          v77 = *(_WORD *)(a1 + 84) << 8;
          goto LABEL_138;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_152;
        v83 = objc_alloc_init(GEOPDSearchLocationContext);
        if (!GEOPDSearchLocationContextReadAllFrom((uint64_t)v83, (void *)v3, v9 & 1))
          goto LABEL_151;
        PBReaderRecallMark();
        v39 = 32;
        goto LABEL_102;
      case 3:
        if (!v31)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 84) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_152;
          v77 = *(_WORD *)(a1 + 84) << 9;
          goto LABEL_138;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_152;
        v83 = objc_alloc_init(GEOPDSearchLanguageContext);
        if (!GEOPDSearchLanguageContextReadAllFrom((uint64_t)v83, (void *)v3, v9 & 1))
          goto LABEL_151;
        PBReaderRecallMark();
        v39 = 24;
        goto LABEL_102;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_104;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_WORD *)(a1 + 84) |= 8u;
        while (2)
        {
          v43 = *v17;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v27 = v41++ >= 9;
              if (v27)
              {
                v42 = 0;
                goto LABEL_109;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v42 = 0;
LABEL_109:
        v74 = v42 != 0;
        v75 = 80;
        goto LABEL_122;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_104;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_WORD *)(a1 + 84) |= 2u;
        while (2)
        {
          v50 = *v17;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v27 = v48++ >= 9;
              if (v27)
              {
                LODWORD(v49) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v49) = 0;
LABEL_113:
        v76 = 72;
        goto LABEL_127;
      case 6:
        if (!v31)
          goto LABEL_104;
        if ((*(_WORD *)(a1 + 84) & 0x20) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_152;
          v77 = *(_WORD *)(a1 + 84) << 10;
          goto LABEL_138;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_152;
        v83 = objc_alloc_init(GEOPDSearchKeyValuePairList);
        if (!GEOPDSearchKeyValuePairListReadAllFrom((uint64_t)v83, (void *)v3, v9 & 1))
          goto LABEL_151;
        PBReaderRecallMark();
        v39 = 16;
        goto LABEL_102;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_104;
        v54 = 0;
        v55 = 0;
        v49 = 0;
        *(_WORD *)(a1 + 84) |= 4u;
        while (2)
        {
          v56 = *v17;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v49 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v27 = v55++ >= 9;
              if (v27)
              {
                LODWORD(v49) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v49) = 0;
LABEL_117:
        v76 = 76;
        goto LABEL_127;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_104;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        *(_WORD *)(a1 + 84) |= 0x10u;
        while (2)
        {
          v63 = *v17;
          v64 = *(_QWORD *)(v3 + v63);
          v65 = v64 + 1;
          if (v64 == -1 || v65 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v66 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v64);
            *(_QWORD *)(v3 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              v27 = v61++ >= 9;
              if (v27)
              {
                v62 = 0;
                goto LABEL_121;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v62 = 0;
LABEL_121:
        v74 = v62 != 0;
        v75 = 81;
LABEL_122:
        *(_BYTE *)(a1 + v75) = v74;
        goto LABEL_140;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_104;
        v67 = 0;
        v68 = 0;
        v49 = 0;
        *(_WORD *)(a1 + 84) |= 1u;
        while (2)
        {
          v69 = *v17;
          v70 = *(_QWORD *)(v3 + v69);
          v71 = v70 + 1;
          if (v70 == -1 || v71 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v72 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v70);
            *(_QWORD *)(v3 + v69) = v71;
            v49 |= (unint64_t)(v72 & 0x7F) << v67;
            if (v72 < 0)
            {
              v67 += 7;
              v27 = v68++ >= 9;
              if (v27)
              {
                LODWORD(v49) = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v49) = 0;
LABEL_126:
        v76 = 68;
LABEL_127:
        *(_DWORD *)(a1 + v76) = v49;
        goto LABEL_140;
      case 10:
        if (!v31)
        {
LABEL_104:
          v73 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v84;
          if ((v73 & 1) == 0)
          {
LABEL_150:
            v78 = 0;
            goto LABEL_153;
          }
LABEL_140:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_141;
          continue;
        }
        if ((*(_WORD *)(a1 + 84) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_152;
          v77 = *(_WORD *)(a1 + 84) << 6;
LABEL_138:
          v7 += v77 >> 15;
LABEL_139:
          v15 = v84;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_140;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_152;
        v83 = objc_alloc_init(GEOPDSearchKeyValuePairList);
        if (GEOPDSearchKeyValuePairListReadAllFrom((uint64_t)v83, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          v39 = 48;
LABEL_102:
          v37 = *(void **)(a1 + v39);
          *(_QWORD *)(a1 + v39) = v83;
LABEL_103:

          --v7;
          goto LABEL_139;
        }
LABEL_151:

LABEL_152:
        v78 = 0;
        v15 = v84;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_153:
        *(_WORD *)(a1 + 84) |= 0x100u;
        *(_WORD *)(a1 + 84) |= 0x80u;
        *(_WORD *)(a1 + 84) |= 0x40u;
        *(_WORD *)(a1 + 84) |= 0x20u;
        *(_WORD *)(a1 + 84) |= 0x200u;
        if ((v78 & 1) != 0)
        {
LABEL_154:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_155;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_155:
            v81 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v84;
        if (!v38)
          goto LABEL_150;
        goto LABEL_140;
    }
  }
}

void sub_1895CF004(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895CF148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895CF37C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895CF8C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D0410(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchSpellerRequestReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchSpellerRequestReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 56) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 60) = objc_msgSend(v6, "length");
      Specified = GEOPDSearchSpellerRequestReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDSearchSpellerRequestReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895D0588(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D0C5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D10F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D1830(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchSpellerResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int *v15;
  GEOPDSearchTokenCandidates *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  int v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  char v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  int v96;
  __int16 v97;
  void *v98;
  int v100;
  char v101;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int16 *)(a1 + 96) >> 10) & 1)
      + ((*(unsigned __int16 *)(a1 + 96) >> 11) & 1)
      + ((*(unsigned __int16 *)(a1 + 96) >> 9) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        if ((((v10 | v14) | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        LODWORD(v16) = v10 | v14;
        v101 = (v15 == 0) | v10 | v14;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_158;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_158:
      if ((v16 & 1) != 0)
      {
        v95 = 1;
        goto LABEL_166;
      }
      if (v15)
      {
        while (1)
        {
          v96 = *v15++;
          v97 = 1024;
          switch(v96)
          {
            case 0:
              goto LABEL_167;
            case 1:
              goto LABEL_164;
            case 5:
              v97 = 2048;
              goto LABEL_164;
            case 7:
              v97 = 512;
LABEL_164:
              *(_WORD *)(a1 + 96) |= v97;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_167;
    }
    v30 = v22 >> 3;
    v31 = (char)v16;
    if ((v101 & 1) == 0)
    {
      v32 = v15;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x400) != 0)
          goto LABEL_117;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_172;
        v100 = (int)v16;
        v16 = objc_alloc_init(GEOPDSearchSpellSuggestion);
        if (!GEOPDSearchSpellSuggestionReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
          goto LABEL_173;
        PBReaderRecallMark();
        -[GEOPDSearchSpellerResponse _addNoFlagsSpellSuggestion:](a1, v16);
        goto LABEL_69;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 96) |= 0x40u;
        while (2)
        {
          v40 = *v17;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v41);
            *(_QWORD *)(v3 + v40) = v42;
            v39 |= (unint64_t)(v43 & 0x7F) << v37;
            if (v43 < 0)
            {
              v37 += 7;
              v27 = v38++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_122;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_122:
        v91 = 88;
        goto LABEL_148;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_WORD *)(a1 + 96) |= 1u;
        while (2)
        {
          v47 = *v17;
          v48 = *(_QWORD *)(v3 + v47);
          v49 = v48 + 1;
          if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if (v50 < 0)
            {
              v44 += 7;
              v27 = v45++ >= 9;
              if (v27)
              {
                v46 = 0;
                goto LABEL_126;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v46 = 0;
LABEL_126:
        *(_QWORD *)(a1 + 24) = v46;
        goto LABEL_157;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        *(_WORD *)(a1 + 96) |= 2u;
        v51 = *v17;
        v52 = *(_QWORD *)(v3 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v53 = 0;
        }
        v94 = 32;
        goto LABEL_156;
      case 5:
        if (!v31 || (*(_WORD *)(a1 + 96) & 0x800) != 0)
          goto LABEL_117;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_172;
        v100 = (int)v16;
        v16 = objc_alloc_init(GEOPDSearchTokenCandidates);
        if (GEOPDSearchTokenCandidatesReadAllFrom((uint64_t)v16, (void *)v3, v9 & 1))
        {
          PBReaderRecallMark();
          -[GEOPDSearchSpellerResponse _addNoFlagsTokenCandidates:](a1, v16);
LABEL_69:

          LODWORD(v16) = v100;
LABEL_151:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_157:
          if (!(v16 & 1 | (v7 != 0)))
            goto LABEL_158;
          continue;
        }
LABEL_173:

        v95 = 0;
        LOBYTE(v16) = v100;
LABEL_174:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_166:
        *(_WORD *)(a1 + 96) |= 0x400u;
        *(_WORD *)(a1 + 96) |= 0x800u;
        *(_WORD *)(a1 + 96) |= 0x200u;
        if ((v95 & 1) != 0)
        {
LABEL_167:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v16 & 1) != 0)
            goto LABEL_168;
        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
          {
LABEL_168:
            v98 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        *(_WORD *)(a1 + 96) |= 4u;
        v54 = *v17;
        v55 = *(_QWORD *)(v3 + v54);
        if (v55 <= 0xFFFFFFFFFFFFFFF7 && v55 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v55);
          *(_QWORD *)(v3 + v54) = v55 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v18) = 1;
          v53 = 0;
        }
        v94 = 40;
LABEL_156:
        *(_QWORD *)(a1 + v94) = v53;
        goto LABEL_157;
      case 7:
        if (!v31)
          goto LABEL_117;
        if ((*(_WORD *)(a1 + 96) & 0x200) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_172:
            v95 = 0;
            goto LABEL_174;
          }
          v7 += *(unsigned __int16 *)(a1 + 96) << 22 >> 31;
        }
        else
        {
          PBReaderReadString();
          v56 = objc_claimAutoreleasedReturnValue();
          v57 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v56;

          --v7;
        }
        goto LABEL_151;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v58 = 0;
        v59 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 96) |= 0x20u;
        while (2)
        {
          v60 = *v17;
          v61 = *(_QWORD *)(v3 + v60);
          v62 = v61 + 1;
          if (v61 == -1 || v62 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v63 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v61);
            *(_QWORD *)(v3 + v60) = v62;
            v39 |= (unint64_t)(v63 & 0x7F) << v58;
            if (v63 < 0)
            {
              v58 += 7;
              v27 = v59++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_130;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_130:
        v91 = 84;
        goto LABEL_148;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v64 = 0;
        v65 = 0;
        v66 = 0;
        *(_WORD *)(a1 + 96) |= 0x80u;
        while (2)
        {
          v67 = *v17;
          v68 = *(_QWORD *)(v3 + v67);
          v69 = v68 + 1;
          if (v68 == -1 || v69 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v68);
            *(_QWORD *)(v3 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              v27 = v65++ >= 9;
              if (v27)
              {
                v66 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v66 = 0;
LABEL_134:
        v92 = v66 != 0;
        v93 = 92;
        goto LABEL_139;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        *(_WORD *)(a1 + 96) |= 0x100u;
        while (2)
        {
          v74 = *v17;
          v75 = *(_QWORD *)(v3 + v74);
          v76 = v75 + 1;
          if (v75 == -1 || v76 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v77 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v75);
            *(_QWORD *)(v3 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              v27 = v72++ >= 9;
              if (v27)
              {
                v73 = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v73 = 0;
LABEL_138:
        v92 = v73 != 0;
        v93 = 93;
LABEL_139:
        *(_BYTE *)(a1 + v93) = v92;
        goto LABEL_157;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_117;
        v78 = 0;
        v79 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 96) |= 8u;
        while (2)
        {
          v80 = *v17;
          v81 = *(_QWORD *)(v3 + v80);
          v82 = v81 + 1;
          if (v81 == -1 || v82 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v83 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v81);
            *(_QWORD *)(v3 + v80) = v82;
            v39 |= (unint64_t)(v83 & 0x7F) << v78;
            if (v83 < 0)
            {
              v78 += 7;
              v27 = v79++ >= 9;
              if (v27)
              {
                LODWORD(v39) = 0;
                goto LABEL_143;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v39) = 0;
LABEL_143:
        v91 = 76;
        goto LABEL_148;
      case 12:
        if ((v8 & 1) != 0)
        {
          v84 = 0;
          v85 = 0;
          v39 = 0;
          *(_WORD *)(a1 + 96) |= 0x10u;
          while (1)
          {
            v86 = *v17;
            v87 = *(_QWORD *)(v3 + v86);
            v88 = v87 + 1;
            if (v87 == -1 || v88 > *(_QWORD *)(v3 + *v6))
              break;
            v89 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v87);
            *(_QWORD *)(v3 + v86) = v88;
            v39 |= (unint64_t)(v89 & 0x7F) << v84;
            if ((v89 & 0x80) == 0)
              goto LABEL_145;
            v84 += 7;
            v27 = v85++ >= 9;
            if (v27)
            {
              LODWORD(v39) = 0;
              goto LABEL_147;
            }
          }
          *(_BYTE *)(v3 + *v18) = 1;
LABEL_145:
          if (*(_BYTE *)(v3 + *v18))
            LODWORD(v39) = 0;
LABEL_147:
          v91 = 80;
LABEL_148:
          *(_DWORD *)(a1 + v91) = v39;
        }
        else
        {
LABEL_117:
          v90 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v90 & 1) == 0)
          {
LABEL_165:
            v95 = 0;
            goto LABEL_166;
          }
        }
        goto LABEL_157;
      default:
        v36 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v36)
          goto LABEL_165;
        goto LABEL_157;
    }
  }
}

void sub_1895D292C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D2CD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D4108(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchSpellerResponseReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchSpellerResponseReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 64) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 68) = objc_msgSend(v6, "length");
      Specified = GEOPDSearchSpellerResponseReadSpecified(a1, (unint64_t)v6, (int *)&GEOPDSearchSpellerResponseReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895D4288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenCandidatesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  char v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  _BOOL8 v43;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDSearchTokenSetIsValid(a1))
            goto LABEL_78;
          goto LABEL_74;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_41;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_75;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_78;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              break;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_75;
          }
LABEL_41:
          a1[*v4] = 1;
          continue;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark())
            goto LABEL_78;
          objc_msgSend(a1, "position", 0, 0);
          objc_msgSend(a1, "length");
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_78;
          continue;
      }
      while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
      {
        v28 = 0;
        v29 = 0;
        v30 = 0;
        while (1)
        {
          v31 = *v2;
          v32 = *(_QWORD *)&a1[v31];
          v33 = v32 + 1;
          if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
            break;
          v34 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v32);
          *(_QWORD *)&a1[v31] = v33;
          v30 |= (unint64_t)(v34 & 0x7F) << v28;
          if ((v34 & 0x80) == 0)
            goto LABEL_55;
          v28 += 7;
          v13 = v29++ >= 9;
          if (v13)
          {
            v30 = 0;
            v35 = *v4;
            v36 = a1[v35];
            goto LABEL_57;
          }
        }
        a1[*v4] = 1;
LABEL_55:
        v35 = *v4;
        v36 = a1[v35];
        if (a1[v35])
          v30 = 0;
LABEL_57:
        v37 = v30 & 7;
        if (v36 || v37 == 4)
          break;
        if ((v30 >> 3) == 2)
        {
          if (v37 == 1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            if (v40 <= 0xFFFFFFFFFFFFFFF7 && (v41 = v40 + 8, v41 <= *(_QWORD *)&a1[*v3]))
              *(_QWORD *)&a1[v39] = v41;
            else
              a1[v35] = 1;
            continue;
          }
LABEL_77:
          PBReaderRecallMark();
LABEL_78:
          PBReaderRecallMark();
          return 0;
        }
        if ((v30 >> 3) == 1)
        {
          if (v37 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_77;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_77;
        }
      }
      v42 = a1[*v4];
      PBReaderRecallMark();
      if (v42)
        goto LABEL_78;
LABEL_74:
      PBReaderRecallMark();
LABEL_75:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v43 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v43;
}

void sub_1895D4F34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D5660(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchTokenCandidateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          *(_BYTE *)(a1 + 24) |= 1u;
          v20 = *v4;
          v21 = *(_QWORD *)&v3[v20];
          if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v22 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v22 = 0;
          }
          *(_QWORD *)(a1 + 16) = v22;
        }
        else if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_31;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_31:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1895D624C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchTokenCandidatesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  _BOOL4 v16;
  int *v17;
  int *v18;
  BOOL v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOPDSearchTokenSet *v37;
  void *v38;
  int v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  char v58;
  int v59;
  int v60;
  void *v61;
  _BOOL4 v63;
  BOOL v64;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 48) >> 3) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        if ((v14 != 0) | v8 & 1)
          v15 = 0;
        else
          v15 = a3;
        v16 = v14 != 0;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (v14)
          v19 = 1;
        else
          v19 = v15 == 0;
        v64 = v19;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_87;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_26;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_26:
    v29 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_28:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_87:
      if (v16)
      {
        v58 = 1;
        goto LABEL_100;
      }
      if (!v15)
        goto LABEL_101;
      while (1)
      {
        while (1)
        {
          v60 = *v15++;
          v59 = v60;
          if (v60 != 1)
            break;
          LOBYTE(v59) = 8;
LABEL_95:
          *(_BYTE *)(a1 + 48) |= v59;
        }
        if (v59 == 4)
          goto LABEL_95;
        if (!v59)
          goto LABEL_101;
      }
    }
    v31 = v23 >> 3;
    v32 = v16;
    if (!v64)
    {
      v33 = v15;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_69;
        if ((*(_BYTE *)(a1 + 48) & 8) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_97;
          v63 = v16;
          v37 = objc_alloc_init(GEOPDSearchTokenSet);
          if (GEOPDSearchTokenSetReadAllFrom((uint64_t)v37, (void *)v3, v9 & 1))
          {
            PBReaderRecallMark();
            v38 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v37;

            --v7;
            goto LABEL_68;
          }
          goto LABEL_98;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_97;
        v7 += *(unsigned __int8 *)(a1 + 48) << 28 >> 31;
        goto LABEL_82;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          v43 = *v17;
          v44 = *(_QWORD *)(v3 + v43);
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v44);
            *(_QWORD *)(v3 + v43) = v45;
            v42 |= (unint64_t)(v46 & 0x7F) << v40;
            if (v46 < 0)
            {
              v40 += 7;
              v28 = v41++ >= 9;
              if (v28)
              {
                v42 = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v42 = 0;
LABEL_74:
        v55 = v42 != 0;
        v56 = 44;
        goto LABEL_79;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_69;
        v47 = 0;
        v48 = 0;
        v49 = 0;
        *(_BYTE *)(a1 + 48) |= 2u;
        while (2)
        {
          v50 = *v17;
          v51 = *(_QWORD *)(v3 + v50);
          v52 = v51 + 1;
          if (v51 == -1 || v52 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v18) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v51);
            *(_QWORD *)(v3 + v50) = v52;
            v49 |= (unint64_t)(v53 & 0x7F) << v47;
            if (v53 < 0)
            {
              v47 += 7;
              v28 = v48++ >= 9;
              if (v28)
              {
                v49 = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v18))
          v49 = 0;
LABEL_78:
        v55 = v49 != 0;
        v56 = 45;
LABEL_79:
        *(_BYTE *)(a1 + v56) = v55;
        goto LABEL_83;
      case 4:
        if (!v32 || (*(_BYTE *)(a1 + 48) & 4) != 0)
        {
LABEL_69:
          v54 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          if ((v54 & 1) == 0)
          {
LABEL_96:
            v58 = 0;
            goto LABEL_100;
          }
          goto LABEL_83;
        }
        if ((PBReaderPlaceMark() & 1) != 0)
        {
          v63 = v16;
          v37 = objc_alloc_init(GEOPDSearchTokenCandidate);
          if (!GEOPDSearchTokenCandidateReadAllFrom((uint64_t)v37, (void *)v3))
          {
LABEL_98:

            v58 = 0;
            v16 = v63;
            goto LABEL_99;
          }
          PBReaderRecallMark();
          -[GEOPDSearchTokenCandidates _addNoFlagsCandidates:](a1, v37);

LABEL_68:
          v16 = v63;
LABEL_82:
          v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_83:
          if (v7)
            v57 = 1;
          else
            v57 = v16;
          if ((v57 & 1) == 0)
            goto LABEL_87;
          continue;
        }
LABEL_97:
        v58 = 0;
LABEL_99:
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_100:
        *(_BYTE *)(a1 + 48) |= 8u;
        *(_BYTE *)(a1 + 48) |= 4u;
        if ((v58 & 1) != 0)
        {
LABEL_101:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if (v16)
            goto LABEL_102;
        }
        else
        {
          v3 = 0;
          if (v16)
          {
LABEL_102:
            v61 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v39 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        if (!v39)
          goto LABEL_96;
        goto LABEL_83;
    }
  }
}

void sub_1895D6CBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D70F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D71D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDSearchTokenCandidatesCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  -[GEOPDSearchTokenSet readAll:](*(_QWORD *)(a1 + 24), 1);
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v2 = *(id *)(a1 + 16);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v7;
    while (1)
    {
      if (*(_QWORD *)v7 != v5)
        objc_enumerationMutation(v2);
      if (!--v4)
      {
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
        if (!v4)
          break;
      }
    }
  }

}

unint64_t GEOPDSearchTokenCandidatesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchTokenCandidatesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchTokenCandidatesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchTokenCandidatesReadAllFrom_initialTag;
  Specified = GEOPDSearchTokenCandidatesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDSearchTokenCandidatesCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1895D78D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D7B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D7DE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D815C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLanguageContextReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v26;
  BOOL v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char v36;
  char v37;
  int v38;
  char v39;
  void *v40;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFEFFFFFFFDFFFCLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 3);
  if (v9 & 1 | (v10 > 3) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(v3 + *v6))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v21 + 1;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v24 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v24 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v24 || (v19 & 7) == 4)
      break;
    v26 = v19 >> 3;
    v27 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v28 = v13;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v27 = v30 != 0;
        if (v30)
          v31 = v29 == (_DWORD)v26;
        else
          v31 = 1;
      }
      while (!v31);
    }
    switch((int)v26)
    {
      case 1:
        if (!v27 || (*(_BYTE *)(a1 + 68) & 8) != 0)
          goto LABEL_59;
        PBReaderReadString();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if (v32)
          -[GEOPDSearchLanguageContext _addNoFlagsDisplayLanguage:](a1, v32);
        goto LABEL_48;
      case 2:
        if (!v27 || (*(_BYTE *)(a1 + 68) & 0x10) != 0)
          goto LABEL_59;
        PBReaderReadString();
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        if (v32)
          -[GEOPDSearchLanguageContext _addNoFlagsSpokenLanguage:](a1, v32);
LABEL_48:

        v15 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_60;
      case 3:
        if (!v27)
          goto LABEL_59;
        if ((*(_BYTE *)(a1 + 68) & 1) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 16;
          goto LABEL_58;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_78;
        v8 -= *(_BYTE *)(a1 + 68) & 1;
        goto LABEL_60;
      case 4:
        if (!v27)
          goto LABEL_59;
        if ((*(_BYTE *)(a1 + 68) & 2) == 0)
        {
          PBReaderReadString();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = 24;
          goto LABEL_58;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_78;
        v36 = *(_BYTE *)(a1 + 68) << 6;
        goto LABEL_68;
      case 5:
        if (v27)
        {
          if ((*(_BYTE *)(a1 + 68) & 4) != 0)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
            {
LABEL_78:
              v37 = 0;
LABEL_79:
              *(_BYTE *)(a1 + 68) |= 8u;
              *(_BYTE *)(a1 + 68) |= 0x10u;
              *(_BYTE *)(a1 + 68) |= 1u;
              *(_BYTE *)(a1 + 68) |= 2u;
              *(_BYTE *)(a1 + 68) |= 4u;
              if ((v37 & 1) != 0)
                goto LABEL_80;
              v3 = 0;
              if ((v12 & 1) == 0)
                return v3;
LABEL_81:
              v40 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;

              return v3;
            }
            v36 = 32 * *(_BYTE *)(a1 + 68);
LABEL_68:
            v8 += v36 >> 7;
          }
          else
          {
            PBReaderReadString();
            v33 = objc_claimAutoreleasedReturnValue();
            v34 = 32;
LABEL_58:
            v35 = *(void **)(a1 + v34);
            *(_QWORD *)(a1 + v34) = v33;

            --v8;
          }
        }
        else
        {
LABEL_59:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_78;
        }
LABEL_60:
        if (!(v12 & 1 | (v8 != 0)))
          goto LABEL_69;
        break;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_78;
        goto LABEL_60;
    }
  }
LABEL_69:
  if ((v12 & 1) != 0)
  {
    v37 = 1;
    goto LABEL_79;
  }
  if (v13)
  {
    while (1)
    {
      v38 = *v13++;
      v39 = 8;
      switch(v38)
      {
        case 0:
          goto LABEL_80;
        case 1:
          goto LABEL_77;
        case 2:
          v39 = 16;
          goto LABEL_77;
        case 3:
          v39 = 1;
          goto LABEL_77;
        case 4:
          v39 = 2;
          goto LABEL_77;
        case 5:
          v39 = 4;
LABEL_77:
          *(_BYTE *)(a1 + 68) |= v39;
          break;
        default:
          continue;
      }
    }
  }
LABEL_80:
  v3 = *(_BYTE *)(v3 + *v15) == 0;
  if ((v12 & 1) != 0)
    goto LABEL_81;
  return v3;
}

void sub_1895D8818(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D8E00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895D8ED4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLanguageContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchLanguageContextReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchLanguageContextReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchLanguageContextReadAllFrom_initialTag;
  Specified = GEOPDSearchLanguageContextReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_1895D9418(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchLanguageContextIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2)
            goto LABEL_33;
          goto LABEL_30;
        case 2u:
          if (v14 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 3u:
          if (v14 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 4u:
          if (v14 == 2)
            goto LABEL_30;
          goto LABEL_33;
        case 5u:
          if (v14 != 2)
            goto LABEL_33;
LABEL_30:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            v16 = 0;
            goto LABEL_34;
          }
LABEL_31:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_32;
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_33;
          goto LABEL_31;
      }
    }
  }
LABEL_32:
  v16 = a1[*v4] == 0;
LABEL_34:
  PBReaderRecallMark();
  return v16;
}

void sub_1895D9928(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchLanguageContextIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0x3F) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_1895D9CBC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DA24C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLocationContextReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int *v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  _BOOL4 v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  GEOLatLng *v37;
  uint64_t v38;
  void *v39;
  int v40;
  char v41;
  char v42;
  char v43;
  int v44;
  int v45;
  void *v46;
  BOOL v48;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v10 & 1 | v11;
        v15 = v14 != 0;
        if ((v14 != 0) | v8 & 1)
          v16 = 0;
        else
          v16 = a3;
        v17 = v16 == 0;
        if (v14)
          v17 = 1;
        v48 = v17;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_64;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v18;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      if (v23++ >= 9)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v24 = 0;
LABEL_27:
    if (v29 || (v24 & 7) == 4)
    {
LABEL_64:
      if (v15)
      {
        v43 = 1;
        goto LABEL_77;
      }
      if (!v16)
        goto LABEL_78;
      while (1)
      {
        v45 = *v16++;
        v44 = v45;
        if (v45 == 1)
          goto LABEL_72;
        if (v44 == 3)
        {
          LOBYTE(v44) = 2;
LABEL_72:
          *(_BYTE *)(a1 + v21[1006]) |= v44;
        }
        else if (!v44)
        {
          goto LABEL_78;
        }
      }
    }
    v31 = v24 >> 3;
    v32 = v15;
    if (!v48)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    if ((_DWORD)v31 == 3)
      break;
    if ((_DWORD)v31 != 1)
    {
      v40 = PBReaderSkipValueWithTag();
      v19 = (int *)MEMORY[0x1E0D82BC8];
      if (!v40)
        goto LABEL_73;
      goto LABEL_60;
    }
    if (v32)
    {
      if ((*(_BYTE *)(a1 + v21[1006]) & 1) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_74;
        v7 -= *(_BYTE *)(a1 + v21[1006]) & 1;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_74;
        v37 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v37, (void *)v3))
          goto LABEL_75;
        PBReaderRecallMark();
        v38 = 16;
LABEL_50:
        v39 = *(void **)(a1 + v38);
        *(_QWORD *)(a1 + v38) = v37;

        --v7;
        v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
      }
LABEL_59:
      v19 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_60;
    }
LABEL_53:
    v41 = PBReaderSkipValueWithTag();
    v19 = (int *)MEMORY[0x1E0D82BC8];
    if ((v41 & 1) == 0)
    {
LABEL_73:
      v43 = 0;
      goto LABEL_77;
    }
LABEL_60:
    if (v7)
      v42 = 1;
    else
      v42 = v15;
    if ((v42 & 1) == 0)
      goto LABEL_64;
  }
  if (!v32)
    goto LABEL_53;
  if ((*(_BYTE *)(a1 + v21[1006]) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_74:
      v43 = 0;
      goto LABEL_76;
    }
    v7 += *(unsigned __int8 *)(a1 + v21[1006]) << 30 >> 31;
    goto LABEL_59;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_74;
  v37 = objc_alloc_init(GEOPDSearchViewportInfo);
  if (GEOPDSearchViewportInfoReadAllFrom((uint64_t)v37, (void *)v3))
  {
    PBReaderRecallMark();
    v38 = 24;
    goto LABEL_50;
  }
LABEL_75:

  v43 = 0;
  v21 = &OBJC_IVAR___GEOPDRelatedEntitySection__reader;
LABEL_76:
  v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_77:
  *(_BYTE *)(a1 + v21[1006]) |= 1u;
  *(_BYTE *)(a1 + v21[1006]) |= 2u;
  if ((v43 & 1) != 0)
  {
LABEL_78:
    v3 = *(_BYTE *)(v3 + *v19) == 0;
    if (v15)
      goto LABEL_79;
  }
  else
  {
    v3 = 0;
    if (v15)
    {
LABEL_79:
      v46 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_1895DA7F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DAB10(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDSearchLocationContextReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDSearchLocationContextReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDSearchLocationContextReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDSearchLocationContextReadAllFrom_initialTag;
  Specified = GEOPDSearchLocationContextReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1895DB01C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchLocationContextIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  BOOL v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  int v22;
  int v23;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  _BOOL8 v38;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
    goto LABEL_74;
  v5 = (int *)MEMORY[0x1E0D82BB8];
  do
  {
    if (a1[*v4])
      break;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *v2;
      v10 = *(_QWORD *)&a1[v9];
      if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
        break;
      v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
      *(_QWORD *)&a1[v9] = v10 + 1;
      v8 |= (unint64_t)(v11 & 0x7F) << v6;
      if ((v11 & 0x80) == 0)
        goto LABEL_12;
      v6 += 7;
      v12 = v7++ >= 9;
      if (v12)
      {
        v8 = 0;
        v13 = a1[*v4];
        goto LABEL_14;
      }
    }
    a1[*v4] = 1;
LABEL_12:
    v13 = a1[*v4];
    if (a1[*v4])
      v8 = 0;
LABEL_14:
    v14 = v8 & 7;
    if (v13)
      v15 = 1;
    else
      v15 = v14 == 4;
    if (v15)
      break;
    if ((v8 >> 3) != 3)
    {
      if ((v8 >> 3) == 1)
      {
        if (v14 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1))
          goto LABEL_72;
      }
      else if ((PBReaderSkipValueWithTag() & 1) != 0)
      {
        continue;
      }
LABEL_76:
      PBReaderRecallMark();
      return 0;
    }
    if (v14 != 2 || !PBReaderPlaceMark())
      goto LABEL_76;
    objc_msgSend(a1, "position", 0, 0);
    objc_msgSend(a1, "length");
LABEL_27:
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3] && !a1[*v4])
    {
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *v2;
        v20 = *(_QWORD *)&a1[v19];
        if (v20 == -1 || v20 >= *(_QWORD *)&a1[*v3])
          break;
        v21 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v20);
        *(_QWORD *)&a1[v19] = v20 + 1;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_37;
        v16 += 7;
        v12 = v17++ >= 9;
        if (v12)
        {
          v18 = 0;
          v22 = a1[*v4];
          goto LABEL_39;
        }
      }
      a1[*v4] = 1;
LABEL_37:
      v22 = a1[*v4];
      if (a1[*v4])
        v18 = 0;
LABEL_39:
      v23 = v18 & 7;
      if (v22 || v23 == 4)
        break;
      v25 = v18 >> 3;
      if ((v18 >> 3) == 3)
      {
        if ((v18 & 7) != 0)
          goto LABEL_75;
        v26 = 0;
        while (1)
        {
          v27 = *v2;
          v28 = *(_QWORD *)&a1[v27];
          if (v28 == -1 || v28 >= *(_QWORD *)&a1[*v3])
            goto LABEL_66;
          v29 = v28 + 1;
          v30 = *(char *)(*(_QWORD *)&a1[*v5] + v28);
          *(_QWORD *)&a1[v27] = v29;
          if (v30 < 0)
          {
            v31 = v26++ > 8;
            if (!v31)
              continue;
          }
          goto LABEL_27;
        }
      }
      if ((_DWORD)v25 == 2)
      {
        if ((v18 & 7) != 0)
          goto LABEL_75;
        v32 = 0;
        while (1)
        {
          v33 = *v2;
          v34 = *(_QWORD *)&a1[v33];
          if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
            break;
          v35 = v34 + 1;
          v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
          *(_QWORD *)&a1[v33] = v35;
          if (v36 < 0)
          {
            v31 = v32++ > 8;
            if (!v31)
              continue;
          }
          goto LABEL_27;
        }
LABEL_66:
        a1[*v4] = 1;
      }
      else if ((_DWORD)v25 == 1)
      {
        if (v23 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
        {
LABEL_75:
          PBReaderRecallMark();
          goto LABEL_76;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_75;
      }
    }
    v37 = a1[*v4];
    PBReaderRecallMark();
    if (v37)
      goto LABEL_76;
LABEL_72:
    PBReaderRecallMark();
  }
  while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
LABEL_74:
  v38 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v38;
}

void sub_1895DB5A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchLocationContextIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 44) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1895DB7E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDSearchViewportInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  GEOMapRegion *v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_51;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          goto LABEL_51;
        v17 = v10 >> 3;
        if ((v10 >> 3) == 3)
          break;
        if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&v3[*v5])
              break;
            v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
              goto LABEL_46;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v22) = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            LODWORD(v22) = 0;
LABEL_48:
          v31 = 20;
LABEL_49:
          *(_DWORD *)(a1 + v31) = v22;
          goto LABEL_50;
        }
        if ((_DWORD)v17 == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_53;
          v18 = objc_alloc_init(GEOMapRegion);
          if (!GEOMapRegionReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_53;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_53;
        }
LABEL_50:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_51;
      }
      v20 = 0;
      v21 = 0;
      v22 = 0;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        v23 = *v4;
        v24 = *(_QWORD *)&v3[v23];
        if (v24 == -1 || v24 >= *(_QWORD *)&v3[*v5])
          break;
        v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
        *(_QWORD *)&v3[v23] = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_42;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_44;
        }
      }
      v3[*v6] = 1;
LABEL_42:
      if (v3[*v6])
        LODWORD(v22) = 0;
LABEL_44:
      v31 = 16;
      goto LABEL_49;
    }
LABEL_51:
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_53:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_1895DC07C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DD5C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t _PDRSourceForGEOMapServiceTraits_Source(uint64_t result)
{
  if ((result - 1) >= 0x17)
    return 0;
  else
    return result;
}

uint64_t _MapItemRAPFlowTypeForPDRAPFlowType(uint64_t result)
{
  if ((result - 1) >= 7)
    return 0;
  else
    return result;
}

uint64_t _PDRAPFlowTypeForMapItemRAPFlowType(uint64_t result)
{
  if ((result - 1) >= 7)
    return 0;
  else
    return result;
}

unint64_t GEOMapLayerDataServiceDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v26;
  BOOL v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  GEOMapLayerDataServiceLayerIndex *v32;
  uint64_t v33;
  void *v34;
  char v35;
  char v36;
  int v37;
  char v38;
  void *v39;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 1);
  if (v9 & 1 | (v10 > 1) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_68;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(v3 + *v6))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v21 + 1;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v24 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v24 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v24 || (v19 & 7) == 4)
    {
LABEL_68:
      if ((v12 & 1) != 0)
      {
        v36 = 1;
        goto LABEL_76;
      }
      if (v13)
      {
        while (1)
        {
          v37 = *v13++;
          v38 = 2;
          switch(v37)
          {
            case 0:
              goto LABEL_77;
            case 1:
              goto LABEL_74;
            case 2:
              v38 = 4;
              goto LABEL_74;
            case 3:
              v38 = 1;
LABEL_74:
              *(_BYTE *)(a1 + 52) |= v38;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_77;
    }
    v26 = v19 >> 3;
    v27 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v28 = v13;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v27 = v30 != 0;
        if (v30)
          v31 = v29 == (_DWORD)v26;
        else
          v31 = 1;
      }
      while (!v31);
    }
    if ((_DWORD)v26 == 3)
    {
      if (v27)
      {
        if ((*(_BYTE *)(a1 + 52) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_75;
          v7 -= *(_BYTE *)(a1 + 52) & 1;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_75;
          v32 = objc_alloc_init(GEOMapLayerDataServiceLayerIndex);
          if (!GEOMapLayerDataServiceLayerIndexReadAllFrom((uint64_t)v32, (void *)v3))
            goto LABEL_82;
          PBReaderRecallMark();
          v33 = 16;
LABEL_55:
          v34 = *(void **)(a1 + v33);
          *(_QWORD *)(a1 + v33) = v32;

          --v7;
          v15 = (int *)MEMORY[0x1E0D82BC8];
        }
        goto LABEL_67;
      }
LABEL_58:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_75;
      goto LABEL_67;
    }
    if ((_DWORD)v26 != 2)
    {
      if ((_DWORD)v26 != 1)
      {
        if (!PBReaderSkipValueWithTag())
          goto LABEL_75;
        goto LABEL_67;
      }
      if (v27)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_75;
          v32 = objc_alloc_init(GEOMapLayerDataServiceLayer);
          if (!GEOMapLayerDataServiceLayerReadAllFrom((uint64_t)v32, (void *)v3))
            goto LABEL_82;
          PBReaderRecallMark();
          v33 = 24;
          goto LABEL_55;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_75;
        v35 = *(_BYTE *)(a1 + 52) << 6;
LABEL_66:
        v7 += v35 >> 7;
LABEL_67:
        if (!(v12 & 1 | (v7 != 0)))
          goto LABEL_68;
        continue;
      }
      goto LABEL_58;
    }
    break;
  }
  if (!v27)
    goto LABEL_58;
  if ((*(_BYTE *)(a1 + 52) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_75:
      v36 = 0;
      goto LABEL_76;
    }
    v35 = 32 * *(_BYTE *)(a1 + 52);
    goto LABEL_66;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_75;
  v32 = objc_alloc_init(GEOMapLayerDataServiceVersion);
  if (GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v32, (void *)v3))
  {
    PBReaderRecallMark();
    v33 = 32;
    goto LABEL_55;
  }
LABEL_82:

  v36 = 0;
  v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_76:
  *(_BYTE *)(a1 + 52) |= 2u;
  *(_BYTE *)(a1 + 52) |= 4u;
  *(_BYTE *)(a1 + 52) |= 1u;
  if ((v36 & 1) != 0)
  {
LABEL_77:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if ((v12 & 1) == 0)
      return v3;
    goto LABEL_78;
  }
  v3 = 0;
  if ((v12 & 1) != 0)
  {
LABEL_78:
    v39 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1895DE44C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DE51C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServiceDataReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapLayerDataServiceDataReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 40) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 44) = objc_msgSend(v6, "length");
      Specified = GEOMapLayerDataServiceDataReadSpecified(a1, (unint64_t)v6, (int *)&GEOMapLayerDataServiceDataReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895DE694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DE820(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DE990(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapLayerDataServiceLayerReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  _BOOL8 v23;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 12) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_30;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_32;
            }
          }
          v3[*v6] = 1;
LABEL_30:
          if (v3[*v6])
            LODWORD(v19) = 0;
LABEL_32:
          *(_DWORD *)(a1 + 8) = v19;
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_35;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v23 = v3[*v6] == 0;
  }
  else
  {
LABEL_35:
    v23 = 0;
  }
  objc_sync_exit(v3);

  return v23;
}

void sub_1895DEE8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapLayerDataServiceLayerIndexReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_24;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_24:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_1895DF2F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServicePatchReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v26;
  BOOL v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  GEOMapLayerDataServiceLayer *v32;
  uint64_t v33;
  void *v34;
  char v35;
  char v36;
  int v37;
  char v38;
  void *v39;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 2);
  if (v9 & 1 | (v10 > 2) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_73;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(v3 + *v6))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v21 + 1;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v24 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v24 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v24 || (v19 & 7) == 4)
    {
LABEL_73:
      if ((v12 & 1) != 0)
      {
        v36 = 1;
        goto LABEL_82;
      }
      if (v13)
      {
        while (1)
        {
          v37 = *v13++;
          v38 = 2;
          switch(v37)
          {
            case 0:
              goto LABEL_83;
            case 1:
              goto LABEL_80;
            case 2:
              v38 = 4;
              goto LABEL_80;
            case 3:
              v38 = 8;
              goto LABEL_80;
            case 4:
              v38 = 1;
LABEL_80:
              *(_BYTE *)(a1 + 60) |= v38;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_83;
    }
    v26 = v19 >> 3;
    v27 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v28 = v13;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v27 = v30 != 0;
        if (v30)
          v31 = v29 == (_DWORD)v26;
        else
          v31 = 1;
      }
      while (!v31);
    }
    switch((int)v26)
    {
      case 1:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_81;
          v32 = objc_alloc_init(GEOMapLayerDataServiceLayer);
          if (GEOMapLayerDataServiceLayerReadAllFrom((uint64_t)v32, (void *)v3))
          {
            PBReaderRecallMark();
            v33 = 24;
            goto LABEL_60;
          }
          goto LABEL_88;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v35 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_69;
      case 2:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
          v35 = 32 * *(_BYTE *)(a1 + 60);
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceVersion);
        if (!GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v32, (void *)v3))
          goto LABEL_88;
        PBReaderRecallMark();
        v33 = 32;
        goto LABEL_60;
      case 3:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
          v35 = 16 * *(_BYTE *)(a1 + 60);
LABEL_69:
          v7 += v35 >> 7;
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceVersion);
        if (!GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v32, (void *)v3))
          goto LABEL_88;
        PBReaderRecallMark();
        v33 = 40;
        goto LABEL_60;
      case 4:
        if (!v27)
        {
LABEL_61:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
LABEL_72:
          if (!(v12 & 1 | (v7 != 0)))
            goto LABEL_73;
          continue;
        }
        if ((*(_BYTE *)(a1 + 60) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_81:
            v36 = 0;
            goto LABEL_82;
          }
          v7 -= *(_BYTE *)(a1 + 60) & 1;
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceLayerIndex);
        if (GEOMapLayerDataServiceLayerIndexReadAllFrom((uint64_t)v32, (void *)v3))
        {
          PBReaderRecallMark();
          v33 = 16;
LABEL_60:
          v34 = *(void **)(a1 + v33);
          *(_QWORD *)(a1 + v33) = v32;

          --v7;
          v15 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_72;
        }
LABEL_88:

        v36 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 4u;
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 1u;
        if ((v36 & 1) != 0)
        {
LABEL_83:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_84;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_84:
            v39 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_81;
        goto LABEL_72;
    }
  }
}

void sub_1895DFE5C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895DFF30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServicePatchReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapLayerDataServicePatchReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 52) = objc_msgSend(v6, "length");
      Specified = GEOMapLayerDataServicePatchReadSpecified(a1, (unint64_t)v6, (int *)&GEOMapLayerDataServicePatchReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895E00A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E0250(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E03DC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapLayerDataServiceVersionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  _BOOL8 v36;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        v17 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v26 = 0;
          v27 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 4u;
          while (1)
          {
            v28 = *v4;
            v29 = *(_QWORD *)&v3[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&v3[*v5])
              break;
            v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0)
            {
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__patchVersion;
              goto LABEL_49;
            }
            v26 += 7;
            v24 = v27++ > 8;
            if (v24)
            {
              LODWORD(v20) = 0;
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__patchVersion;
              goto LABEL_51;
            }
          }
          v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__patchVersion;
LABEL_48:
          v3[*v6] = 1;
        }
        else if ((_DWORD)v17 == 2)
        {
          v31 = 0;
          v32 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 2u;
          while (1)
          {
            v33 = *v4;
            v34 = *(_QWORD *)&v3[v33];
            if (v34 == -1 || v34 >= *(_QWORD *)&v3[*v5])
            {
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__formatVersion;
              goto LABEL_48;
            }
            v35 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v34);
            *(_QWORD *)&v3[v33] = v34 + 1;
            v20 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0)
              break;
            v31 += 7;
            v24 = v32++ > 8;
            if (v24)
            {
              LODWORD(v20) = 0;
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__formatVersion;
              goto LABEL_51;
            }
          }
          v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__formatVersion;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_58;
            continue;
          }
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            if (v22 == -1 || v22 >= *(_QWORD *)&v3[*v5])
            {
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__dataVersion;
              goto LABEL_48;
            }
            v23 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0)
              break;
            v18 += 7;
            v24 = v19++ > 8;
            if (v24)
            {
              LODWORD(v20) = 0;
              v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__dataVersion;
              goto LABEL_51;
            }
          }
          v25 = &OBJC_IVAR___GEOMapLayerDataServiceVersion__dataVersion;
        }
LABEL_49:
        if (v3[*v6])
          LODWORD(v20) = 0;
LABEL_51:
        *(_DWORD *)(a1 + *v25) = v20;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v36 = v3[*v6] == 0;
  }
  else
  {
LABEL_58:
    v36 = 0;
  }
  objc_sync_exit(v3);

  return v36;
}

void sub_1895E0B58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServiceVersionUpdateReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int *v13;
  int *v14;
  int *v15;
  int *v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  int v24;
  unint64_t v26;
  BOOL v27;
  int *v28;
  int v29;
  int v30;
  BOOL v31;
  GEOMapLayerDataServiceLayer *v32;
  uint64_t v33;
  void *v34;
  char v35;
  char v36;
  int v37;
  char v38;
  void *v39;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 | (v10 > 2);
  if (v9 & 1 | (v10 > 2) | v8 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  v16 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v15))
      goto LABEL_73;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    while (1)
    {
      v20 = *v14;
      v21 = *(_QWORD *)(v3 + v20);
      if (v21 == -1 || v21 >= *(_QWORD *)(v3 + *v6))
        break;
      v22 = *(_BYTE *)(*(_QWORD *)(v3 + *v16) + v21);
      *(_QWORD *)(v3 + v20) = v21 + 1;
      v19 |= (unint64_t)(v22 & 0x7F) << v17;
      if ((v22 & 0x80) == 0)
        goto LABEL_24;
      v17 += 7;
      if (v18++ >= 9)
      {
        v19 = 0;
        v24 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_24:
    v24 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v19 = 0;
LABEL_26:
    if (v24 || (v19 & 7) == 4)
    {
LABEL_73:
      if ((v12 & 1) != 0)
      {
        v36 = 1;
        goto LABEL_82;
      }
      if (v13)
      {
        while (1)
        {
          v37 = *v13++;
          v38 = 2;
          switch(v37)
          {
            case 0:
              goto LABEL_83;
            case 1:
              goto LABEL_80;
            case 2:
              v38 = 4;
              goto LABEL_80;
            case 3:
              v38 = 8;
              goto LABEL_80;
            case 4:
              v38 = 1;
LABEL_80:
              *(_BYTE *)(a1 + 60) |= v38;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_83;
    }
    v26 = v19 >> 3;
    v27 = v12;
    if (!((v13 == 0) | v12 & 1))
    {
      v28 = v13;
      do
      {
        v30 = *v28++;
        v29 = v30;
        v27 = v30 != 0;
        if (v30)
          v31 = v29 == (_DWORD)v26;
        else
          v31 = 1;
      }
      while (!v31);
    }
    switch((int)v26)
    {
      case 1:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 2) == 0)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_81;
          v32 = objc_alloc_init(GEOMapLayerDataServiceLayer);
          if (GEOMapLayerDataServiceLayerReadAllFrom((uint64_t)v32, (void *)v3))
          {
            PBReaderRecallMark();
            v33 = 24;
            goto LABEL_60;
          }
          goto LABEL_88;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_81;
        v35 = *(_BYTE *)(a1 + 60) << 6;
        goto LABEL_69;
      case 2:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
          v35 = 32 * *(_BYTE *)(a1 + 60);
          goto LABEL_69;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceVersion);
        if (!GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v32, (void *)v3))
          goto LABEL_88;
        PBReaderRecallMark();
        v33 = 32;
        goto LABEL_60;
      case 3:
        if (!v27)
          goto LABEL_61;
        if ((*(_BYTE *)(a1 + 60) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
          v35 = 16 * *(_BYTE *)(a1 + 60);
LABEL_69:
          v7 += v35 >> 7;
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceVersion);
        if (!GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v32, (void *)v3))
          goto LABEL_88;
        PBReaderRecallMark();
        v33 = 40;
        goto LABEL_60;
      case 4:
        if (!v27)
        {
LABEL_61:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_81;
LABEL_72:
          if (!(v12 & 1 | (v7 != 0)))
            goto LABEL_73;
          continue;
        }
        if ((*(_BYTE *)(a1 + 60) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_81:
            v36 = 0;
            goto LABEL_82;
          }
          v7 -= *(_BYTE *)(a1 + 60) & 1;
          goto LABEL_72;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_81;
        v32 = objc_alloc_init(GEOMapLayerDataServiceLayerIndex);
        if (GEOMapLayerDataServiceLayerIndexReadAllFrom((uint64_t)v32, (void *)v3))
        {
          PBReaderRecallMark();
          v33 = 16;
LABEL_60:
          v34 = *(void **)(a1 + v33);
          *(_QWORD *)(a1 + v33) = v32;

          --v7;
          v15 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_72;
        }
LABEL_88:

        v36 = 0;
        v15 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
        *(_BYTE *)(a1 + 60) |= 2u;
        *(_BYTE *)(a1 + 60) |= 4u;
        *(_BYTE *)(a1 + 60) |= 8u;
        *(_BYTE *)(a1 + 60) |= 1u;
        if ((v36 & 1) != 0)
        {
LABEL_83:
          v3 = *(_BYTE *)(v3 + *v15) == 0;
          if ((v12 & 1) != 0)
            goto LABEL_84;
        }
        else
        {
          v3 = 0;
          if ((v12 & 1) != 0)
          {
LABEL_84:
            v39 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_81;
        goto LABEL_72;
    }
  }
}

void sub_1895E185C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E1930(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServiceVersionUpdateReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapLayerDataServiceVersionUpdateReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 48) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 52) = objc_msgSend(v6, "length");
      Specified = GEOMapLayerDataServiceVersionUpdateReadSpecified(a1, (unint64_t)v6, (int *)&GEOMapLayerDataServiceVersionUpdateReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895E1AA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E1C50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E1DDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServiceVersionedLayerReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  int *v35;
  GEOMapLayerDataServiceLayer *v36;
  uint64_t v37;
  void *v38;
  char v39;
  char v40;
  int v41;
  int v42;
  void *v43;
  BOOL v45;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 44) >> 1) & 1) + (*(_BYTE *)(a1 + 44) & 1);
  while (1)
  {
    v11 = a3[v7];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v8 = 1;
LABEL_9:
    ++v7;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v8 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = v14 == 0;
  if (v12)
    v15 = 1;
  v45 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
  v19 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_64;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_26;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_26:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_28:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_64:
      if (v13)
      {
        v40 = 1;
        goto LABEL_73;
      }
      if (v14)
      {
        do
        {
          while (1)
          {
            v42 = *v14++;
            v41 = v42;
            if (v42 != 1 && v41 != 2)
              break;
            *(_BYTE *)(a1 + v18[725]) |= v41;
          }
        }
        while (v41);
      }
      goto LABEL_74;
    }
    v29 = v22 >> 3;
    v30 = v13;
    if (!v45)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        if (!PBReaderSkipValueWithTag())
          goto LABEL_72;
        goto LABEL_55;
      }
      if (v30)
      {
        if ((*(_BYTE *)(a1 + v18[725]) & 1) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_72;
          v7 -= *(_BYTE *)(a1 + v18[725]) & 1;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_72;
          v35 = v17;
          v36 = objc_alloc_init(GEOMapLayerDataServiceLayer);
          if (!GEOMapLayerDataServiceLayerReadAllFrom((uint64_t)v36, (void *)v3))
            goto LABEL_79;
          PBReaderRecallMark();
          v37 = 16;
LABEL_51:
          v38 = *(void **)(a1 + v37);
          *(_QWORD *)(a1 + v37) = v36;

          --v7;
          v17 = v35;
          v18 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
        }
LABEL_55:
        if (v7)
          v39 = 1;
        else
          v39 = v13;
        if ((v39 & 1) == 0)
          goto LABEL_64;
        continue;
      }
LABEL_54:
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_72;
      goto LABEL_55;
    }
    break;
  }
  if (!v30)
    goto LABEL_54;
  if ((*(_BYTE *)(a1 + v18[725]) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_72:
      v40 = 0;
      goto LABEL_73;
    }
    v7 += *(unsigned __int8 *)(a1 + v18[725]) << 30 >> 31;
    goto LABEL_55;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_72;
  v35 = v17;
  v36 = objc_alloc_init(GEOMapLayerDataServiceVersion);
  if (GEOMapLayerDataServiceVersionReadAllFrom((uint64_t)v36, (void *)v3))
  {
    PBReaderRecallMark();
    v37 = 24;
    goto LABEL_51;
  }
LABEL_79:

  v40 = 0;
  v17 = v35;
  v18 = &OBJC_IVAR___GEOMapServiceTraits__userActionMetadata;
LABEL_73:
  *(_BYTE *)(a1 + v18[725]) |= 1u;
  *(_BYTE *)(a1 + v18[725]) |= 2u;
  if ((v40 & 1) != 0)
  {
LABEL_74:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (!v13)
      return v3;
    goto LABEL_75;
  }
  v3 = 0;
  if (v13)
  {
LABEL_75:
    v43 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_1895E2720(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E27EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOMapLayerDataServiceVersionedLayerReadAllFrom(uint64_t a1, void *a2)
{
  unint64_t Specified;
  id v6;
  uint8_t v7[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOMapLayerDataServiceVersionedLayerReadAllFrom can only be called once per object"));
  }
  else
  {
    if (!((unint64_t)objc_msgSend(a2, "position") >> 32)
      && !((unint64_t)objc_msgSend(a2, "length") >> 32))
    {
      os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
      v6 = a2;
      objc_sync_enter(v6);
      objc_storeStrong((id *)(a1 + 8), a2);
      *(_DWORD *)(a1 + 32) = objc_msgSend(v6, "position");
      *(_DWORD *)(a1 + 36) = objc_msgSend(v6, "length");
      Specified = GEOMapLayerDataServiceVersionedLayerReadSpecified(a1, (unint64_t)v6, (int *)&GEOMapLayerDataServiceVersionedLayerReadAllFrom_initialTag);
      objc_sync_exit(v6);

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
      return Specified;
    }
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v7, 2u);
    }
  }
  return 0;
}

void sub_1895E2964(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E2AD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895E2C28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIdentifierReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  GEOLatLng *v23;
  void *v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_42;
          v23 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v23, v3))
          {

            goto LABEL_42;
          }
          PBReaderRecallMark();
          v24 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v23;

        }
        else if ((v10 >> 3) == 1)
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v20 = *v4;
            v21 = *(_QWORD *)&v3[v20];
            if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
              break;
            v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
            *(_QWORD *)&v3[v20] = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_36;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              v19 = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            v19 = 0;
LABEL_38:
          *(_QWORD *)(a1 + 24) = v19;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_42;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_42:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_1895E34C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPlaceIdentifierIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_38:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_38;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            break;
          v19 = v18 + 1;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_38;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

void sub_1895E3C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1895E3F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1895E4C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1895E4F18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E5008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E50EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1895E52B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895E542C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E54D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1895E5590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895E5734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1895E5810(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E58EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E5D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,id a38)
{
  void *v38;

  _Block_object_dispose(&a33, 8);

  _Unwind_Resume(a1);
}

void sub_1895E5E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1895E5FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1895E62D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void sub_1895E65C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895E66F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E6768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E6834(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E6944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E6A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1895E6B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1895E6C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1895E6FB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1895E7374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v7 = v4;

  _Unwind_Resume(a1);
}

void sub_1895E7458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E7674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1895E7974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1895E7A8C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E7B74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1895E7D10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895E8058(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1895E822C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1895E83EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1895E8608(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1895E8678()
{
  JUMPOUT(0x1895E8668);
}

void sub_1895E8824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1895E88C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E8A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E8A98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1895E8C10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id GEOGetOfflineDataConfigurationLog()
{
  if (qword_1ECDBC620 != -1)
    dispatch_once(&qword_1ECDBC620, &__block_literal_global_152);
  return (id)_MergedGlobals_289;
}

void sub_1895E9374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1895E94B8(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895E9538(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895E9C10(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895E9CA8(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895E9E70(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895E9FDC(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EA06C(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EA490(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

id _versionDictionaryFromProtobuf(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  unsigned __int8 *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = a2;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v5 = (unsigned __int8 *)(a1 + 16);
    do
    {
      v6 = *((_DWORD *)v5 - 4);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v5 += 24;
      v9 = (v8 << 31 >> 31) & v6;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v7);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v9);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "setObject:forKeyedSubscript:", v10, v11);

      --v2;
    }
    while (v2);
  }
  return v4;
}

void sub_1895EB000(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EB13C(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EB334(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EBB48(_Unwind_Exception *a1)
{
  _geo_isolate_unlock();
  _Unwind_Resume(a1);
}

void sub_1895EBD08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

double GEOS2TileKeyMake(int a1, int a2, char a3, char a4, char a5, char a6, unsigned int a7)
{
  char v7;
  int8x16_t v8;
  int8x16_t v10;

  if (a7 <= 0x19 && ((1 << a7) & 0x200101C) != 0)
  {
    v7 = -112;
  }
  else if (a7 == 26)
  {
    v7 = -112;
  }
  else
  {
    v7 = 16;
  }
  v10.i8[14] = 0;
  v10.i16[6] = 0;
  v10.i32[2] = ((a5 & 0xF) << 11) | ((a6 & 0xF) << 15) | ((unsigned __int16)(a7 & 0x3FFF) >> 3);
  v10.i64[0] = (a1 << 6) | ((unint64_t)(a2 & 0x3FFFFFF) << 32) | a3 & 0x3F | ((unint64_t)(a4 & 7) << 58) | ((unint64_t)(a7 & 0x3FFF) << 61);
  v8 = vextq_s8(v10, v10, 0xFuLL);
  v8.i8[0] = v7;
  return *(double *)v8.i64;
}

void sub_1895EE5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1895F04CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _GEOConfigStorageCFPrefsReadWrite()
{
  void *v0;
  id v1;
  uint8_t v3[16];

  _initStorage(0);
  v0 = (void *)qword_1ECDBC650;
  if (qword_1ECDBC650)
  {
    v1 = (id)qword_1ECDBC650;
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)v3 = 0;
    _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Assertion failed: _cfprefs_readwrite_storage != ((void *)0)", v3, 2u);
  }
  return v0;
}

id GEOGetGloriaUtilLog(void)
{
  if (qword_1ECDBC688 != -1)
    dispatch_once(&qword_1ECDBC688, &__block_literal_global_156);
  return (id)_MergedGlobals_293;
}

id _polygonToString(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;

  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "appendString:", CFSTR("{\n"));
  v3 = (_QWORD *)*a1;
  v4 = (_QWORD *)a1[1];
  if ((_QWORD *)*a1 != v4)
  {
    do
    {
      objc_msgSend(v2, "appendFormat:", CFSTR("  %f, %f\n"), v3[1], *v3);
      v3 += 2;
    }
    while (v3 != v4);
  }
  objc_msgSend(v2, "appendString:", CFSTR("}"));
  return v2;
}

void sub_1895F26F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void GEOGloriaPopulateQuadKeysWithinRadiusFromCenterOfTile(unint64_t a1, uint64_t **a2, double a3)
{
  int v5;
  int v6;
  long double v7;
  long double v8;
  _QWORD **v9;
  _QWORD *v10;
  _QWORD **v11;
  BOOL v12;
  int8x16_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD *v18[2];

  if (a3 >= 0.0)
  {
    v5 = 63 - __clz(a1);
    v6 = (v5 + ((v5 & 0x80) >> 7)) << 24 >> 25;
    v15 = v6;
    v14 = a1 - gloria::LEADING_BITS_VALUE_LUT[v6];
    gloria::TileId::ToXYZ((gloria::TileId *)&v14, &v13);
    v7 = gloria::TileCoordinate::YToLat((gloria::TileCoordinate *)&v13);
    v8 = cos(v7 * 0.0174532925);
    gloria::TileId::Neighbors((gloria::TileId *)&v14, vcvtpd_u64_f64(a3 / (40075016.7 / (double)(1 << v6) * v8)), (uint64_t)&v17);
    v9 = v17;
    if (v17 != v18)
    {
      do
      {
        v16 = gloria::LEADING_BITS_VALUE_LUT[*((unsigned __int8 *)v9 + 40)] | (unint64_t)v9[4];
        std::__tree<AddrObjGoogle::protobuf::Descriptor const*>::__emplace_unique_key_args<AddrObjGoogle::protobuf::Descriptor const*,AddrObjGoogle::protobuf::Descriptor const*>(a2, &v16, (uint64_t *)&v16);
        v10 = v9[1];
        if (v10)
        {
          do
          {
            v11 = (_QWORD **)v10;
            v10 = (_QWORD *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (_QWORD **)v9[2];
            v12 = *v11 == v9;
            v9 = v11;
          }
          while (!v12);
        }
        v9 = v11;
      }
      while (v11 != v18);
    }
    std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v17, v18[0]);
  }
}

void sub_1895F284C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

id GEOGetQuadKeysWithinRadiusFromCoordinate(int a1, int a2, uint64_t a3, const unsigned __int8 *a4, double a5, double a6)
{
  void *v6;
  uint64_t *v7;
  void *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  v13 = (uint64_t *)&v14;
  GEOGloriaPopulateQuadKeysWithinRadiusFromCoordinate(a1, &v13, a5, a6, (double)a2, a3, a4);
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v15);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v13;
  if (v13 != (uint64_t *)&v14)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v7[4]);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v8);

      v9 = (uint64_t *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (uint64_t *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != (uint64_t *)&v14);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v13, v14);
  return v6;
}

void sub_1895F2944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

id GEOGetQuadKeysWithinRadiusFromCenterOfTile(unint64_t a1, int a2)
{
  void *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v9 = (uint64_t *)&v10;
  GEOGloriaPopulateQuadKeysWithinRadiusFromCenterOfTile(a1, &v9, (double)a2);
  objc_msgSend(MEMORY[0x1E0C99E20], "setWithCapacity:", v11);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v9;
  if (v9 != (uint64_t *)&v10)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", v3[4]);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v2, "addObject:", v4);

      v5 = (uint64_t *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (uint64_t *)&v10);
  }
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&v9, v10);
  return v2;
}

void sub_1895F2A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<unsigned int,unsigned long>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned long>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned long>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void ___ZL19GEOGetGloriaUtilLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GloriaUtil");
  v1 = (void *)_MergedGlobals_293;
  _MergedGlobals_293 = (uint64_t)v0;

}

id GEOGetDirectionsServiceLog_0()
{
  if (qword_1ECDBC6A8 != -1)
    dispatch_once(&qword_1ECDBC6A8, &__block_literal_global_278);
  return (id)qword_1ECDBC6A0;
}

const __CFString *GEODirectionsServiceRequestTypeAsString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF)
    return CFSTR("Unknown");
  else
    return off_1E1C12AD0[a1 - 1];
}

uint64_t GEOCacheControlMaxAgeFromResponse(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  uint64_t i;
  void *v9;
  const __CFString *v10;
  void *v11;
  void *v12;
  int v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "valueForHTTPHeaderField:", CFSTR("Cache-Control"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "componentsSeparatedByString:", CFSTR(","));
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v3 = (id)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v21;
      v7 = CFSTR("=");
      while (2)
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v21 != v6)
            objc_enumerationMutation(v3);
          objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * i), "stringByTrimmingCharactersInSet:", v2);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = v7;
          objc_msgSend(v9, "componentsSeparatedByString:", v7);
          v11 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v11, "count") == 2)
          {
            objc_msgSend(v11, "firstObject");
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(v12, "isEqualToString:", CFSTR("max-age"));

            if (v13)
            {
              v15 = (void *)MEMORY[0x1E0CB3900];
              objc_msgSend(v11, "lastObject");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v15, "scannerWithString:", v16);
              v17 = (void *)objc_claimAutoreleasedReturnValue();

              v19 = 0;
              v14 = 0x7FFFFFFFFFFFFFFFLL;
              if (objc_msgSend(v17, "scanUnsignedLongLong:", &v19)
                && objc_msgSend(v17, "isAtEnd"))
              {
                v14 = v19;
              }

              goto LABEL_17;
            }
          }

          v7 = v10;
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
        v14 = 0x7FFFFFFFFFFFFFFFLL;
        if (v5)
          continue;
        break;
      }
    }
    else
    {
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_17:

  }
  else
  {
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  }

  return v14;
}

void sub_1895F7B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1895F8B30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventRefineSearchSessionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  int *v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  void *v48;
  GEOSuggestionItem *v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  int v54;
  int v55;
  char v56;
  void *v57;
  BOOL v59;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1) + ((*(unsigned __int8 *)(a1 + 52) >> 3) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v7 & 1)
    v14 = 0;
  else
    v14 = a3;
  v15 = (int *)MEMORY[0x1E0D82BF0];
  if (v12)
    v16 = 1;
  else
    v16 = v14 == 0;
  v59 = v16;
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  while (2)
  {
    if (*(_QWORD *)(v3 + *v15) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_85;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v15;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_29:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_85:
      if (v13)
      {
        v53 = 1;
        goto LABEL_96;
      }
      if (!v14)
        goto LABEL_97;
      while (1)
      {
        v55 = *v14++;
        v54 = v55;
        if (v55 == 3)
          break;
        if (v54 == 4)
        {
          v56 = 8;
LABEL_94:
          *(_BYTE *)(a1 + v19[143]) |= v56;
        }
        else if (!v54)
        {
          goto LABEL_97;
        }
      }
      v56 = 4;
      goto LABEL_94;
    }
    v29 = v22 >> 3;
    v30 = v13;
    if (!v59)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    switch((int)v29)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_67;
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + v19[143]) |= 2u;
        while (1)
        {
          v38 = *v15;
          v39 = *(_QWORD *)(v3 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(v3 + *v6))
            break;
          v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if ((v40 & 0x80) == 0)
            goto LABEL_70;
          v35 += 7;
          v26 = v36++ >= 9;
          if (v26)
          {
            LODWORD(v37) = 0;
            goto LABEL_72;
          }
        }
        *(_BYTE *)(v3 + *v17) = 1;
LABEL_70:
        if (*(_BYTE *)(v3 + *v17))
          LODWORD(v37) = 0;
LABEL_72:
        v51 = 48;
        goto LABEL_77;
      case 2:
        if ((v7 & 1) == 0)
          goto LABEL_67;
        v42 = 0;
        v43 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + v19[143]) |= 1u;
        while (2)
        {
          v44 = *v15;
          v45 = *(_QWORD *)(v3 + v44);
          if (v45 == -1 || v45 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v17) = 1;
          }
          else
          {
            v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v45);
            *(_QWORD *)(v3 + v44) = v45 + 1;
            v37 |= (unint64_t)(v46 & 0x7F) << v42;
            if (v46 < 0)
            {
              v42 += 7;
              v26 = v43++ >= 9;
              if (v26)
              {
                LODWORD(v37) = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v17))
          LODWORD(v37) = 0;
LABEL_76:
        v51 = 44;
LABEL_77:
        *(_DWORD *)(a1 + v51) = v37;
        goto LABEL_81;
      case 3:
        if (!v30)
          goto LABEL_67;
        if ((*(_BYTE *)(a1 + v19[143]) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_102:
            v53 = 0;
            goto LABEL_104;
          }
          v8 += *(unsigned __int8 *)(a1 + v19[143]) << 29 >> 31;
        }
        else
        {
          PBReaderReadString();
          v47 = objc_claimAutoreleasedReturnValue();
          v48 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v47;

          --v8;
        }
        goto LABEL_80;
      case 4:
        if (!v30 || (*(_BYTE *)(a1 + v19[143]) & 8) != 0)
        {
LABEL_67:
          v50 = PBReaderSkipValueWithTag();
          v17 = (int *)MEMORY[0x1E0D82BC8];
          if ((v50 & 1) == 0)
          {
LABEL_95:
            v53 = 0;
            goto LABEL_96;
          }
          goto LABEL_81;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_102;
        v49 = objc_alloc_init(GEOSuggestionItem);
        if (GEOSuggestionItemReadAllFrom((uint64_t)v49, (void *)v3))
        {
          PBReaderRecallMark();
          -[GEOLogMsgEventRefineSearchSession _addNoFlagsSuggestionItem:](a1, v49);

          v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
LABEL_80:
          v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_81:
          if (v8)
            v52 = 1;
          else
            v52 = v13;
          if ((v52 & 1) == 0)
            goto LABEL_85;
          continue;
        }

        v53 = 0;
        v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
LABEL_104:
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_96:
        *(_BYTE *)(a1 + v19[143]) |= 4u;
        *(_BYTE *)(a1 + v19[143]) |= 8u;
        if ((v53 & 1) != 0)
        {
LABEL_97:
          v3 = *(_BYTE *)(v3 + *v17) == 0;
          if (v13)
            goto LABEL_98;
        }
        else
        {
          v3 = 0;
          if (v13)
          {
LABEL_98:
            v57 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v41 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v41)
          goto LABEL_95;
        goto LABEL_81;
    }
  }
}

void sub_1895F9208(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895F9CB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgEventRefineSearchSessionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLogMsgEventRefineSearchSessionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgEventRefineSearchSessionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgEventRefineSearchSessionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgEventRefineSearchSessionReadAllFrom_initialTag;
  Specified = GEOLogMsgEventRefineSearchSessionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgEventRefineSearchSessionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_1895F9F38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventRefineSearchSessionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgEventRefineSearchSessionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895F9F98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventRefineSearchSessionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_35;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_43;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v22 = 0;
          break;
        case 3u:
          if (v14 == 2)
            goto LABEL_37;
          goto LABEL_46;
        case 4u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOSuggestionItemIsValid(a1))
            goto LABEL_46;
          PBReaderRecallMark();
          continue;
        default:
LABEL_37:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_46:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v23 = *v2;
        v24 = *(_QWORD *)&a1[v23];
        if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
          break;
        v25 = v24 + 1;
        v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
        *(_QWORD *)&a1[v23] = v25;
        if (v26 < 0)
        {
          v21 = v22++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_43;
      }
LABEL_35:
      a1[*v4] = 1;
LABEL_43:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

BOOL GEOSuggestionItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v14 != 2)
            goto LABEL_50;
          goto LABEL_20;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_47;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_46;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_47;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_50;
          v27 = 0;
          break;
        default:
LABEL_20:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_50:
          v32 = 0;
          goto LABEL_49;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
          break;
        v30 = v29 + 1;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v21 = v27++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_47;
      }
LABEL_46:
      a1[*v4] = 1;
LABEL_47:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v32;
}

void sub_1895FA784(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventRefineSearchSessionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 52) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1895FABD8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionItemReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            PBReaderReadString();
            v17 = objc_claimAutoreleasedReturnValue();
            v18 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v17;

            continue;
          case 2u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            *(_BYTE *)(a1 + 24) |= 4u;
            while (1)
            {
              v22 = *v4;
              v23 = *(_QWORD *)&v3[v22];
              if (v23 == -1 || v23 >= *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
              *(_QWORD *)&v3[v22] = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if ((v24 & 0x80) == 0)
                goto LABEL_45;
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                v21 = 0;
                goto LABEL_47;
              }
            }
            v3[*v6] = 1;
LABEL_45:
            if (v3[*v6])
              v21 = 0;
LABEL_47:
            v37 = v21 != 0;
            v38 = 21;
            goto LABEL_52;
          case 3u:
            v25 = 0;
            v26 = 0;
            v27 = 0;
            *(_BYTE *)(a1 + 24) |= 2u;
            while (2)
            {
              v28 = *v4;
              v29 = *(_QWORD *)&v3[v28];
              if (v29 == -1 || v29 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v30 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v29);
                *(_QWORD *)&v3[v28] = v29 + 1;
                v27 |= (unint64_t)(v30 & 0x7F) << v25;
                if (v30 < 0)
                {
                  v25 += 7;
                  v14 = v26++ >= 9;
                  if (v14)
                  {
                    v27 = 0;
                    goto LABEL_51;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v27 = 0;
LABEL_51:
            v37 = v27 != 0;
            v38 = 20;
LABEL_52:
            *(_BYTE *)(a1 + v38) = v37;
            continue;
          case 4u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            *(_BYTE *)(a1 + 24) |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_59;
            continue;
        }
        while (1)
        {
          v34 = *v4;
          v35 = *(_QWORD *)&v3[v34];
          if (v35 == -1 || v35 >= *(_QWORD *)&v3[*v5])
            break;
          v36 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v35);
          *(_QWORD *)&v3[v34] = v35 + 1;
          v33 |= (unint64_t)(v36 & 0x7F) << v31;
          if ((v36 & 0x80) == 0)
            goto LABEL_54;
          v31 += 7;
          v14 = v32++ >= 9;
          if (v14)
          {
            LODWORD(v33) = 0;
            goto LABEL_56;
          }
        }
        v3[*v6] = 1;
LABEL_54:
        if (v3[*v6])
          LODWORD(v33) = 0;
LABEL_56:
        *(_DWORD *)(a1 + 16) = v33;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_59:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_1895FB8E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSuggestionItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSuggestionItemReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1895FB940(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895FC070(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueIdentifierReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  int v16;
  int *v17;
  int *v18;
  int v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  int *v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  char v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  id v77;
  void *v78;
  int v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  int *v85;
  char v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  char v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  char v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  int v102;
  uint64_t v103;
  char v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  char v109;
  char v110;
  unsigned int v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  __int16 v116;
  int v117;
  int v118;
  void *v119;
  char v121;
  char v122;
  int v123;
  char v124;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 144));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 140);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 136));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int16 *)(a1 + 152) >> 11) & 1)
      + ((*(unsigned __int16 *)(a1 + 152) >> 10) & 1)
      + ((*(unsigned __int16 *)(a1 + 152) >> 9) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v15 = v14 & ~(_DWORD)v10 | v7;
        v16 = v14 | v10;
        if ((((v14 | v10) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = 1;
        v20 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_208;
        v121 = v14 & ~(_BYTE)v10 | v7;
        v123 = (v9 != 0) | v16 | v15;
        v124 = (v17 == 0) | v16;
        v21 = (int *)MEMORY[0x1E0D82BB8];
        v122 = v14 | v10;
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v20))
      goto LABEL_206;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v18;
      v26 = *(_QWORD *)(v3 + v25);
      if (v26 == -1 || v26 >= *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v26 + 1;
      v24 |= (unint64_t)(v27 & 0x7F) << v22;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v22 += 7;
      v28 = v23++ >= 9;
      if (v28)
      {
        v24 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_26:
    v30 = v24 & 7;
    if (v29 || v30 == 4)
    {
LABEL_206:
      v19 = 1;
      goto LABEL_207;
    }
    v32 = v24 >> 3;
    v33 = v16;
    if ((v124 & 1) == 0)
    {
      v34 = v17;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    switch((int)v32)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 0x80u;
        while (1)
        {
          v41 = *v18;
          v42 = *(_QWORD *)(v3 + v41);
          if (v42 == -1 || v42 >= *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v42);
          *(_QWORD *)(v3 + v41) = v42 + 1;
          v40 |= (unint64_t)(v43 & 0x7F) << v38;
          if ((v43 & 0x80) == 0)
            goto LABEL_149;
          v38 += 7;
          v28 = v39++ >= 9;
          if (v28)
          {
            v40 = 0;
            goto LABEL_151;
          }
        }
        *(_BYTE *)(v3 + *v20) = 1;
LABEL_149:
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_151:
        v103 = 128;
        goto LABEL_184;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v44 = 0;
        v45 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 1u;
        while (2)
        {
          v46 = *v18;
          v47 = *(_QWORD *)(v3 + v46);
          if (v47 == -1 || v47 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v47);
            *(_QWORD *)(v3 + v46) = v47 + 1;
            v40 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              v28 = v45++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_155;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_155:
        v103 = 72;
        goto LABEL_184;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v49 = 0;
        v50 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 0x10u;
        while (2)
        {
          v51 = *v18;
          v52 = *(_QWORD *)(v3 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v52);
            *(_QWORD *)(v3 + v51) = v52 + 1;
            v40 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_159;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_159:
        v103 = 104;
        goto LABEL_184;
      case 4:
        if (!v33 || (*(_WORD *)(a1 + 152) & 0x800) != 0)
          goto LABEL_146;
        if (v30 != 2)
        {
          v104 = 0;
          v105 = 0;
          v106 = 0;
          while (1)
          {
            v107 = *v18;
            v108 = *(_QWORD *)(v3 + v107);
            if (v108 == -1 || v108 >= *(_QWORD *)(v3 + *v6))
              goto LABEL_204;
            v109 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v108);
            *(_QWORD *)(v3 + v107) = v108 + 1;
            v106 |= (unint64_t)(v109 & 0x7F) << v104;
            if (v109 < 0)
            {
              v104 += 7;
              v28 = v105++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_205;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_226;
        while (1)
        {
          v54 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_188;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          while (1)
          {
            v58 = *v18;
            v59 = *(_QWORD *)(v3 + v58);
            if (v59 == -1 || v59 >= *(_QWORD *)(v3 + *v6))
              break;
            v60 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v59);
            *(_QWORD *)(v3 + v58) = v59 + 1;
            v57 |= (unint64_t)(v60 & 0x7F) << v55;
            if (v60 < 0)
            {
              v55 += 7;
              v28 = v56++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_76;
          }
          *(_BYTE *)(v3 + *v54) = 1;
LABEL_76:
          PBRepeatedUInt64Add();
        }
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v61 = 0;
        v62 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 0x20u;
        while (2)
        {
          v63 = *v18;
          v64 = *(_QWORD *)(v3 + v63);
          if (v64 == -1 || v64 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v64);
            *(_QWORD *)(v3 + v63) = v64 + 1;
            v40 |= (unint64_t)(v65 & 0x7F) << v61;
            if (v65 < 0)
            {
              v61 += 7;
              v28 = v62++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_163;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_163:
        v103 = 112;
        goto LABEL_184;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v66 = 0;
        v67 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 4u;
        while (2)
        {
          v68 = *v18;
          v69 = *(_QWORD *)(v3 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v69);
            *(_QWORD *)(v3 + v68) = v69 + 1;
            v40 |= (unint64_t)(v70 & 0x7F) << v66;
            if (v70 < 0)
            {
              v66 += 7;
              v28 = v67++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_167;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_167:
        v103 = 88;
        goto LABEL_184;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v71 = 0;
        v72 = 0;
        v73 = 0;
        *(_WORD *)(a1 + 152) |= 0x100u;
        while (2)
        {
          v74 = *v18;
          v75 = *(_QWORD *)(v3 + v74);
          if (v75 == -1 || v75 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v76 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v75);
            *(_QWORD *)(v3 + v74) = v75 + 1;
            v73 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              v28 = v72++ >= 9;
              if (v28)
              {
                LODWORD(v73) = 0;
                goto LABEL_171;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          LODWORD(v73) = 0;
LABEL_171:
        *(_DWORD *)(a1 + 148) = v73;
        goto LABEL_185;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v80 = 0;
        v81 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 2u;
        while (2)
        {
          v82 = *v18;
          v83 = *(_QWORD *)(v3 + v82);
          if (v83 == -1 || v83 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v84 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v83);
            *(_QWORD *)(v3 + v82) = v83 + 1;
            v40 |= (unint64_t)(v84 & 0x7F) << v80;
            if (v84 < 0)
            {
              v80 += 7;
              v28 = v81++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_175;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_175:
        v103 = 80;
        goto LABEL_184;
      case 10:
        if (!v33 || (*(_WORD *)(a1 + 152) & 0x400) != 0)
          goto LABEL_146;
        if (v30 != 2)
        {
          v110 = 0;
          v111 = 0;
          v112 = 0;
          while (1)
          {
            v113 = *v18;
            v114 = *(_QWORD *)(v3 + v113);
            if (v114 == -1 || v114 >= *(_QWORD *)(v3 + *v6))
              break;
            v115 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v114);
            *(_QWORD *)(v3 + v113) = v114 + 1;
            v112 |= (unint64_t)(v115 & 0x7F) << v110;
            if (v115 < 0)
            {
              v110 += 7;
              v28 = v111++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_205;
          }
LABEL_204:
          *(_BYTE *)(v3 + *v20) = 1;
LABEL_205:
          PBRepeatedUInt64Add();
          LOBYTE(v16) = v122;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_185;
        }
        if (!PBReaderPlaceMark())
        {
LABEL_226:
          v19 = 0;
          LOBYTE(v16) = v122;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_207;
        }
        while (1)
        {
          v85 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v86 = 0;
          v87 = 0;
          v88 = 0;
          while (1)
          {
            v89 = *v18;
            v90 = *(_QWORD *)(v3 + v89);
            if (v90 == -1 || v90 >= *(_QWORD *)(v3 + *v6))
              break;
            v91 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v90);
            *(_QWORD *)(v3 + v89) = v90 + 1;
            v88 |= (unint64_t)(v91 & 0x7F) << v86;
            if (v91 < 0)
            {
              v86 += 7;
              v28 = v87++ >= 9;
              if (!v28)
                continue;
            }
            goto LABEL_129;
          }
          *(_BYTE *)(v3 + *v85) = 1;
LABEL_129:
          PBRepeatedUInt64Add();
        }
LABEL_188:
        PBReaderRecallMark();
        v20 = (int *)MEMORY[0x1E0D82BC8];
        LOBYTE(v16) = v122;
        v19 = 1;
        if ((v123 & 1) == 0)
          goto LABEL_207;
        goto LABEL_186;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v92 = 0;
        v93 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 8u;
        while (2)
        {
          v94 = *v18;
          v95 = *(_QWORD *)(v3 + v94);
          if (v95 == -1 || v95 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v95);
            *(_QWORD *)(v3 + v94) = v95 + 1;
            v40 |= (unint64_t)(v96 & 0x7F) << v92;
            if (v96 < 0)
            {
              v92 += 7;
              v28 = v93++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_179;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_179:
        v103 = 96;
        goto LABEL_184;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_146;
        v97 = 0;
        v98 = 0;
        v40 = 0;
        *(_WORD *)(a1 + 152) |= 0x40u;
        while (2)
        {
          v99 = *v18;
          v100 = *(_QWORD *)(v3 + v99);
          if (v100 == -1 || v100 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v20) = 1;
          }
          else
          {
            v101 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v100);
            *(_QWORD *)(v3 + v99) = v100 + 1;
            v40 |= (unint64_t)(v101 & 0x7F) << v97;
            if (v101 < 0)
            {
              v97 += 7;
              v28 = v98++ >= 9;
              if (v28)
              {
                v40 = 0;
                goto LABEL_183;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v20))
          v40 = 0;
LABEL_183:
        v103 = 120;
LABEL_184:
        *(_QWORD *)(a1 + v103) = v40;
        goto LABEL_185;
      default:
        if ((v121 & 1) != 0 && (*(_WORD *)(a1 + 152) & 0x200) == 0)
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v77 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v78 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v77;

          }
          v79 = PBUnknownFieldAdd();
          LOBYTE(v16) = v122;
          v20 = (int *)MEMORY[0x1E0D82BC8];
          if (!v79)
          {
            v19 = 0;
            goto LABEL_209;
          }
LABEL_185:
          if ((v123 & 1) == 0)
            goto LABEL_206;
LABEL_186:
          if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_206;
          continue;
        }
LABEL_146:
        v102 = PBReaderSkipValueWithTag();
        v20 = (int *)MEMORY[0x1E0D82BC8];
        LOBYTE(v16) = v122;
        if ((v102 & v123 & 1) != 0)
          goto LABEL_186;
        v19 = v102;
LABEL_207:
        LOBYTE(v15) = v121;
LABEL_208:
        if ((v15 & 1) != 0)
LABEL_209:
          *(_WORD *)(a1 + 152) |= 0x200u;
        if (v16 & 1 | ((v19 & 1) == 0))
        {
          *(_WORD *)(a1 + 152) |= 0x800u;
          *(_WORD *)(a1 + 152) |= 0x400u;
          goto LABEL_220;
        }
        if (v17)
        {
          while (1)
          {
            v118 = *v17++;
            v117 = v118;
            if (v118 == 4)
              break;
            if (v117 == 10)
            {
              v116 = 1024;
LABEL_216:
              *(_WORD *)(a1 + 152) |= v116;
            }
            else if (!v117)
            {
              goto LABEL_220;
            }
          }
          v116 = 2048;
          goto LABEL_216;
        }
LABEL_220:
        if (v19)
        {
          v3 = *(_BYTE *)(v3 + *v20) == 0;
          if ((v16 & 1) == 0)
            return v3;
LABEL_224:
          v119 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v16 & 1) != 0)
            goto LABEL_224;
        }
        return v3;
    }
  }
}

void sub_1895FD018(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1895FD6BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPDVenueIdentifierReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 140))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDVenueIdentifierReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 144));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 136) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 140) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDVenueIdentifierReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDVenueIdentifierReadAllFrom_initialTag;
  Specified = GEOPDVenueIdentifierReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  return Specified;
}

void sub_1895FDFF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueIdentifierIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  _BOOL8 v82;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v12 = v7++ >= 9;
        if (v12)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 4u:
          if (v14 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_133;
            while (1)
            {
              v32 = *v2;
              v33 = *(_QWORD *)&a1[v32];
              if (v33 == -1 || v33 >= *(_QWORD *)&a1[*v3])
                goto LABEL_107;
              v34 = v33 + 1;
              v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
              *(_QWORD *)&a1[v32] = v34;
              if (v35 < 0)
              {
                v36 = v14++;
                if (v36 <= 8)
                  continue;
              }
              goto LABEL_108;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_133;
LABEL_111:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v72 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v73 = *v2;
              v74 = *(_QWORD *)&a1[v73];
              if (v74 == -1 || v74 >= *(_QWORD *)&a1[*v3])
                break;
              v75 = v74 + 1;
              v76 = *(char *)(*(_QWORD *)&a1[*v5] + v74);
              *(_QWORD *)&a1[v73] = v75;
              if (v76 < 0)
              {
                v12 = v72++ >= 9;
                if (!v12)
                  continue;
              }
              goto LABEL_111;
            }
            a1[*v4] = 1;
          }
          goto LABEL_130;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            if (v39 == -1 || v39 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v40 = v39 + 1;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v21 = v37++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            if (v44 == -1 || v44 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v45 = v44 + 1;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v21 = v42++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            if (v49 == -1 || v49 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v50 = v49 + 1;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v21 = v47++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 9u:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v52 = 0;
          while (1)
          {
            v53 = *v2;
            v54 = *(_QWORD *)&a1[v53];
            if (v54 == -1 || v54 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v55 = v54 + 1;
            v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
            *(_QWORD *)&a1[v53] = v55;
            if (v56 < 0)
            {
              v21 = v52++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 0xAu:
          if (v14 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_133:
              PBReaderRecallMark();
              return 0;
            }
LABEL_121:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v77 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v78 = *v2;
                v79 = *(_QWORD *)&a1[v78];
                if (v79 == -1 || v79 >= *(_QWORD *)&a1[*v3])
                  break;
                v80 = v79 + 1;
                v81 = *(char *)(*(_QWORD *)&a1[*v5] + v79);
                *(_QWORD *)&a1[v78] = v80;
                if (v81 < 0)
                {
                  v12 = v77++ >= 9;
                  if (!v12)
                    continue;
                }
                goto LABEL_121;
              }
              a1[*v4] = 1;
            }
LABEL_130:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_133;
            while (1)
            {
              v57 = *v2;
              v58 = *(_QWORD *)&a1[v57];
              if (v58 == -1 || v58 >= *(_QWORD *)&a1[*v3])
                break;
              v59 = v58 + 1;
              v60 = *(char *)(*(_QWORD *)&a1[*v5] + v58);
              *(_QWORD *)&a1[v57] = v59;
              if (v60 < 0)
              {
                v61 = v14++;
                if (v61 <= 8)
                  continue;
              }
              goto LABEL_108;
            }
LABEL_107:
            a1[*v4] = 1;
          }
LABEL_108:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_131;
          break;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v62 = 0;
          while (1)
          {
            v63 = *v2;
            v64 = *(_QWORD *)&a1[v63];
            if (v64 == -1 || v64 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v65 = v64 + 1;
            v66 = *(char *)(*(_QWORD *)&a1[*v5] + v64);
            *(_QWORD *)&a1[v63] = v65;
            if (v66 < 0)
            {
              v21 = v62++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_133;
          v67 = 0;
          while (1)
          {
            v68 = *v2;
            v69 = *(_QWORD *)&a1[v68];
            if (v69 == -1 || v69 >= *(_QWORD *)&a1[*v3])
              goto LABEL_107;
            v70 = v69 + 1;
            v71 = *(char *)(*(_QWORD *)&a1[*v5] + v69);
            *(_QWORD *)&a1[v68] = v70;
            if (v71 < 0)
            {
              v21 = v67++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_108;
          }
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_133;
          goto LABEL_108;
      }
    }
  }
LABEL_131:
  v82 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v82;
}

void sub_1895FE9B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDVenueIdentifierIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 144));
  v2 = (*(_WORD *)(a1 + 152) & 0x1C00) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 144));
  return v2;
}

void sub_1895FECF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOActionURLViewPlaceURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, 0, CFSTR("view"), 0);
}

id _GEOActionURLs(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v33;
  void *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void *v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v33 = a4;
  v12 = a5;
  if (objc_msgSend(v9, "isEqualToString:", CFSTR("com.apple.maps.action")))
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@://"), v9);
    v13 = objc_claimAutoreleasedReturnValue();

    v9 = (id)v13;
  }
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = v10;
  objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("id"), v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "addObject:", v15);

  if (objc_msgSend(v11, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("component"), v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v16);

  }
  v17 = v11;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v18 = v12;
  v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
  if (v19)
  {
    v20 = v19;
    v21 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v20; ++i)
      {
        if (*(_QWORD *)v36 != v21)
          objc_enumerationMutation(v18);
        objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("cid"), *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i));
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "addObject:", v23);

      }
      v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
    }
    while (v20);
  }

  if (objc_msgSend(v33, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("action"), v33);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v24);

  }
  objc_msgSend(MEMORY[0x1E0C99DC8], "preferredLanguages");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v25, "count"))
  {
    objc_msgSend(v25, "componentsJoinedByString:", CFSTR(","));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("language"), v26);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "addObject:", v27);

  }
  objc_msgSend(MEMORY[0x1E0CB3998], "componentsWithString:", v9);
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v28, "setQueryItems:", v14);
  objc_msgSend(v28, "URL");
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v29, "absoluteString");
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = v30;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v39, 1);
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  return v31;
}

id GEOActionURLViewPhotosURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, CFSTR("photo"), CFSTR("view"), 0);
}

id GEOActionURLViewSpecificPhotoURLs(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = a3;
  v5 = (void *)MEMORY[0x1E0C99D20];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  objc_msgSend(v5, "arrayWithObjects:count:", v12, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  _GEOActionURLs(v8, v7, CFSTR("photo"), CFSTR("view"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id GEOActionURLAddPhotoURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, CFSTR("photo"), CFSTR("create"), 0);
}

id GEOActionURLViewReviewsURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, CFSTR("review"), CFSTR("view"), 0);
}

id GEOActionURLViewSpecificReviewURLs(void *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  v12[0] = a3;
  v5 = (void *)MEMORY[0x1E0C99D20];
  v6 = a3;
  v7 = a2;
  v8 = a1;
  objc_msgSend(v5, "arrayWithObjects:count:", v12, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  _GEOActionURLs(v8, v7, CFSTR("review"), CFSTR("view"), v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  return v10;
}

id GEOActionURLAddReviewURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, CFSTR("review"), CFSTR("create"), 0);
}

id GEOActionURLCheckinURLs(void *a1, void *a2)
{
  return _GEOActionURLs(a1, a2, 0, CFSTR("checkin"), 0);
}

void sub_189600F9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18960100C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189601100(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18960122C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1896014CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_18960163C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1896016C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189601970(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189601C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189601D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id GEOGetGEORoadMatcherLog(void)
{
  if (qword_1ECDBC6E8 != -1)
    dispatch_once(&qword_1ECDBC6E8, &__block_literal_global_159);
  return (id)_MergedGlobals_296;
}

void ___ZL23GEOGetGEORoadMatcherLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEORoadMatcher");
  v1 = (void *)_MergedGlobals_296;
  _MergedGlobals_296 = (uint64_t)v0;

}

void sub_189602A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id externalFileBaseURL(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD block[4];
  id v9;

  v1 = a1;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __externalFileBaseURL_block_invoke;
  block[3] = &unk_1E1BFF6F8;
  v9 = v1;
  v2 = qword_1ECDBC6F8;
  v3 = v1;
  v4 = v3;
  if (v2 == -1)
  {
    v5 = v3;
  }
  else
  {
    dispatch_once(&qword_1ECDBC6F8, block);
    v5 = v9;
  }
  v6 = (id)_MergedGlobals_297;

  return v6;
}

void sub_189602F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getMetrics(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(a1, "dataTask");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "urlTaskMetrics");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "transactionMetrics");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "lastObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id eventId(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0CB3940];
  v2 = a1;
  v3 = objc_msgSend(v2, "requestTypeCode");
  objc_msgSend(v2, "dataTask");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringWithFormat:", CFSTR("%d:%p:%p"), v3, v2, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_1896037D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void FindValuesBetween(void *a1, _QWORD *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  _QWORD v14[4];
  id v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v9 = a1;
  v10 = a5;
  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = __Block_byref_object_copy__77;
  v24 = __Block_byref_object_dispose__77;
  v25 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __FindValuesBetween_block_invoke;
  v14[3] = &unk_1E1C01A60;
  v11 = v9;
  v15 = v11;
  v17 = &v20;
  v18 = a3;
  v19 = a4;
  v12 = v10;
  v16 = v12;
  objc_msgSend(v11, "statementForKey:statementBlock:", CFSTR("FindValuesBetween"), v14);
  if (a2)
  {
    v13 = (void *)v21[5];
    if (v13)
      *a2 = objc_retainAutorelease(v13);
  }

  _Block_object_dispose(&v20, 8);
}

void sub_18960398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189603AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189603CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189603E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189603F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18960426C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1896043EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t GetTotalSize(void *a1, _QWORD *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v3 = a1;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = __Block_byref_object_copy__77;
  v20 = __Block_byref_object_dispose__77;
  v21 = 0;
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __GetTotalSize_block_invoke;
  v8[3] = &unk_1E1C019C0;
  v10 = &v12;
  v4 = v3;
  v9 = v4;
  v11 = &v16;
  objc_msgSend(v4, "statementForKey:statementBlock:", CFSTR("GetTotalSize"), v8);
  if (a2)
  {
    v5 = (void *)v17[5];
    if (v5)
      *a2 = objc_retainAutorelease(v5);
  }
  v6 = v13[3];

  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);

  return v6;
}

void sub_189604938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_189604A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189604D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t DeleteOlderThan(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;

  v5 = a1;
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__77;
  v18 = __Block_byref_object_dispose__77;
  v19 = 0;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __DeleteOlderThan_block_invoke;
  v10[3] = &unk_1E1BFF770;
  v6 = v5;
  v12 = &v14;
  v13 = a3;
  v11 = v6;
  v7 = objc_msgSend(v6, "executeStatement:statementBlock:", CFSTR("DeleteOlderThan"), v10);
  if (a2)
  {
    v8 = (void *)v15[5];
    if (v8)
      *a2 = objc_retainAutorelease(v8);
  }

  _Block_object_dispose(&v14, 8);
  return v7;
}

void sub_189604F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189605020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1896051AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189605318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18960546C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_189605B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void _logs_ExternalResources_Delete_sqlite(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  char v11;
  id v12;
  NSObject *v13;
  _BOOL4 v14;
  id v15;
  uint8_t buf[4];
  void *v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", sqlite3_value_text(*a3), 4);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    sqlite3_user_data(a1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v6 = (void *)MEMORY[0x1E0CB3620];
    v7 = v4;
    objc_msgSend(v6, "defaultManager");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    externalFileBaseURL(v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "URLByAppendingPathComponent:", v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v15 = 0;
      v11 = objc_msgSend(v8, "removeItemAtURL:error:", v10, &v15);
      v12 = v15;
      if ((v11 & 1) == 0)
      {
        objc_msgSend(v5, "log");
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412546;
          v17 = v10;
          v18 = 2112;
          v19 = v12;
          _os_log_error_impl(&dword_1885A9000, v13, OS_LOG_TYPE_ERROR, "Could not remove external resource at \"%@\": %@", buf, 0x16u);
        }

      }
    }
    else
    {
      v12 = 0;
    }
    v14 = v10 != 0;

  }
  else
  {
    v14 = 1;
  }
  sqlite3_result_int(a1, v14);
}

void __externalFileBaseURL_block_invoke(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  BOOL v7;
  id v8;
  void *v9;
  NSObject *v10;
  id v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "databaseFileURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "URLByDeletingPathExtension");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "URLByAppendingPathExtension:", CFSTR("ext"));
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)_MergedGlobals_297;
  _MergedGlobals_297 = v4;

  objc_msgSend((id)_MergedGlobals_297, "path");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0;
  v7 = +[GEOFilePaths createDirectoryCopyingAttributesFromParent:error:](GEOFilePaths, "createDirectoryCopyingAttributesFromParent:error:", v6, &v11);
  v8 = v11;

  if (!v7)
  {
    v9 = (void *)_MergedGlobals_297;
    _MergedGlobals_297 = 0;

    objc_msgSend(*(id *)(a1 + 32), "log");
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412546;
      v13 = _MergedGlobals_297;
      v14 = 2112;
      v15 = v8;
      _os_log_fault_impl(&dword_1885A9000, v10, OS_LOG_TYPE_FAULT, "Could not create external resources folder at \"%@\": %@", buf, 0x16u);
    }

  }
}

id _GEOConfigStorageXPC()
{
  if (qword_1ECDBC718 != -1)
    dispatch_once(&qword_1ECDBC718, &__block_literal_global_160);
  return (id)qword_1ECDBC710;
}

uint64_t GEOURLRequestsAuthForURLType(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  _GEOURLInfoFromActiveTileGroup(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "useAuthProxy");

  return v2;
}

id GEOURLDefaultsKey(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  v3 = 0u;
  v4 = 0u;
  v2 = 0u;
  _recordForType(a1, (uint64_t)&v2);
  return GEODefaultsKeyStringForConfigKey(SDWORD2(v2), v3);
}

id GEODefaultsKeyStringForConfigKey(int a1, uint64_t a2)
{
  id v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy__78;
  v9 = __Block_byref_object_dispose__78;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __GEODefaultsKeyStringForConfigKey_block_invoke;
  v4[3] = &unk_1E1C10608;
  v4[4] = &v5;
  GEOConfigGetPropertiesForKey(a1, a2, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1896077D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t GEOURLConfigKey(uint64_t a1)
{
  _OWORD v2[3];

  memset(v2, 0, sizeof(v2));
  _recordForType(a1, (uint64_t)v2);
  return *((_QWORD *)&v2[0] + 1);
}

id GEOGetURLIgnoringManifest(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 3221225472;
  v2[2] = __GEOGetURLIgnoringManifest_block_invoke;
  v2[3] = &__block_descriptor_40_e25___NSURL_16__0__NSString_8l;
  v2[4] = a1;
  _GEOGetURLWithSource(a1, 0, 0, v2);
  return (id)objc_claimAutoreleasedReturnValue();
}

id GEOGetUserDefaultsLog()
{
  if (qword_1ECDBC738 != -1)
    dispatch_once(&qword_1ECDBC738, &__block_literal_global_209);
  return (id)qword_1ECDBC730;
}

id GEOGetURL(uint64_t a1)
{
  return GEOGetURLWithSource(a1, 0);
}

id GEOGetURLWithTokenSubstitutions(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __GEOGetURLWithTokenSubstitutions_block_invoke;
  v7[3] = &unk_1E1C13028;
  v8 = v3;
  v9 = a1;
  v4 = v3;
  _GEOGetURLWithSource(a1, 0, 1, v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id GEOURLStringWithSource(uint64_t a1, _QWORD *a2)
{
  return _GEOGetURLWithSource(a1, a2, 1, 0);
}

id GEOURLStringIgnoringManifest(uint64_t a1)
{
  return _GEOGetURLWithSource(a1, 0, 0, 0);
}

id GEOURLWorldDefaultURLString(uint64_t a1)
{
  return _GEOURLWorldDefaultURLStringWithSource(a1, 0, 1);
}

id GEOURLDefaultResourceManifestURLTemplate()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  +[GEONetworkDefaults sharedNetworkDefaults](GEONetworkDefaults, "sharedNetworkDefaults", _recordForType(1, (uint64_t)&v12).n128_f64[0]);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "valueForKey:", CFSTR("CountryProviders"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "countryCode");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  GEODefaultsKeyStringForConfigKey(SDWORD2(v12), v13);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKey:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v6, "length"))
  {
    v7 = v6;
  }
  else
  {
    +[GEONetworkDefaults sharedNetworkDefaults](GEONetworkDefaults, "sharedNetworkDefaults");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "valueForKey:", v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v9, "length"))
    {
      _GEOURLWorldDefaultURLStringWithSource(1, 0, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
    v7 = v9;
  }
  v10 = v7;
  v9 = v7;
LABEL_6:

  return v10;
}

id GEOGetURLsFromResourceManifest(void *a1)
{
  return _GEOGetURLInfoFromResourceManifest(a1, &__block_literal_global_161);
}

id _GEOGetURLInfoFromResourceManifest(void *a1, void *a2)
{
  void *v2;
  id v4;
  void (**v5)(id, void *);
  GEOResources *v6;
  void *v7;
  void *v8;
  unint64_t i;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  GEOResources *v16;
  id v17;

  v4 = a1;
  v5 = a2;
  v6 = -[GEOResources initWithData:]([GEOResources alloc], "initWithData:", v4);
  if (v6)
  {
    v16 = v6;
    v17 = v4;
    -[GEOResources preferedURLSetFor:](v6, "preferedURLSetFor:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", 66);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    for (i = 0; i != 66; ++i)
    {
      if (i - 23 < 0x2B || i <= 0x15 && ((1 << i) & 0x3DDE27) != 0)
      {
        v10 = 0;
        switch(i)
        {
          case 2uLL:
            if (!objc_msgSend(v7, "hasDirectionsURL"))
              goto LABEL_114;
            objc_msgSend(v7, "directionsURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 5uLL:
            if (!objc_msgSend(v7, "hasEtaURL"))
              goto LABEL_114;
            objc_msgSend(v7, "etaURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 9uLL:
            if (!objc_msgSend(v7, "hasSearchAttributionManifestURL"))
              goto LABEL_114;
            objc_msgSend(v7, "searchAttributionManifestURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0xAuLL:
            if (!objc_msgSend(v7, "hasProblemSubmissionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "problemSubmissionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0xBuLL:
            if (!objc_msgSend(v7, "hasProblemStatusURL"))
              goto LABEL_114;
            objc_msgSend(v7, "problemStatusURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0xCuLL:
            if (!objc_msgSend(v7, "hasProblemCategoriesURL"))
              goto LABEL_114;
            objc_msgSend(v7, "problemCategoriesURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0xFuLL:
            if (!objc_msgSend(v7, "hasPolyLocationShiftURL"))
              goto LABEL_114;
            objc_msgSend(v7, "polyLocationShiftURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x10uLL:
            if (!objc_msgSend(v7, "hasBatchReverseGeocoderURL"))
              goto LABEL_114;
            objc_msgSend(v7, "batchReverseGeocoderURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x12uLL:
            if (!objc_msgSend(v7, "hasSimpleETAURL"))
              goto LABEL_114;
            objc_msgSend(v7, "simpleETAURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x13uLL:
            if (!objc_msgSend(v7, "hasAddressCorrectionInitURL"))
              goto LABEL_114;
            objc_msgSend(v7, "addressCorrectionInitURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x14uLL:
            if (!objc_msgSend(v7, "hasAddressCorrectionUpdateURL"))
              goto LABEL_114;
            objc_msgSend(v7, "addressCorrectionUpdateURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x15uLL:
            if (!objc_msgSend(v7, "hasReverseGeocoderVersionsURL"))
              goto LABEL_114;
            objc_msgSend(v7, "reverseGeocoderVersionsURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x17uLL:
            if (!objc_msgSend(v7, "hasAnnouncementsURL"))
              goto LABEL_114;
            objc_msgSend(v7, "announcementsURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x18uLL:
            if (!objc_msgSend(v7, "hasDispatcherURL"))
              goto LABEL_114;
            objc_msgSend(v7, "dispatcherURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x19uLL:
            if (!objc_msgSend(v7, "hasProblemOptInURL"))
              goto LABEL_114;
            objc_msgSend(v7, "problemOptInURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1AuLL:
            if (!objc_msgSend(v7, "hasAbExperimentURL"))
              goto LABEL_114;
            objc_msgSend(v7, "abExperimentURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1BuLL:
            if (!objc_msgSend(v7, "hasBusinessPortalBaseURL"))
              goto LABEL_114;
            objc_msgSend(v7, "businessPortalBaseURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1CuLL:
            if (!objc_msgSend(v7, "hasLogMessageUsageURL"))
              goto LABEL_114;
            objc_msgSend(v7, "logMessageUsageURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1DuLL:
            if (!objc_msgSend(v7, "hasSpatialLookupURL"))
              goto LABEL_114;
            objc_msgSend(v7, "spatialLookupURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1EuLL:
            if (!objc_msgSend(v7, "hasRealtimeTrafficProbeURL"))
              goto LABEL_114;
            objc_msgSend(v7, "realtimeTrafficProbeURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x1FuLL:
            if (!objc_msgSend(v7, "hasBatchTrafficProbeURL"))
              goto LABEL_114;
            objc_msgSend(v7, "batchTrafficProbeURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x20uLL:
            if (!objc_msgSend(v7, "hasLogMessageUsageV3URL"))
              goto LABEL_114;
            objc_msgSend(v7, "logMessageUsageV3URL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x21uLL:
            if (!objc_msgSend(v7, "hasProactiveRoutingURL"))
              goto LABEL_114;
            objc_msgSend(v7, "proactiveRoutingURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x22uLL:
            if (!objc_msgSend(v7, "hasBackgroundDispatcherURL"))
              goto LABEL_114;
            objc_msgSend(v7, "backgroundDispatcherURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x23uLL:
            if (!objc_msgSend(v7, "hasBluePOIDispatcherURL"))
              goto LABEL_114;
            objc_msgSend(v7, "bluePOIDispatcherURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x24uLL:
            if (!objc_msgSend(v7, "hasBackgroundRevGeoURL"))
              goto LABEL_114;
            objc_msgSend(v7, "backgroundRevGeoURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x25uLL:
            if (!objc_msgSend(v7, "hasJunctionImageServiceURL"))
              goto LABEL_114;
            objc_msgSend(v7, "junctionImageServiceURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x26uLL:
            if (!objc_msgSend(v7, "hasWifiConnectionQualityProbeURL"))
              goto LABEL_114;
            objc_msgSend(v7, "wifiConnectionQualityProbeURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x27uLL:
            if (!objc_msgSend(v7, "hasAuthProxyURL"))
              goto LABEL_114;
            objc_msgSend(v7, "authProxyURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x28uLL:
            if (!objc_msgSend(v7, "hasMuninBaseURL"))
              goto LABEL_114;
            objc_msgSend(v7, "muninBaseURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x29uLL:
            if (!objc_msgSend(v7, "hasWifiQualityURL"))
              goto LABEL_114;
            objc_msgSend(v7, "wifiQualityURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2AuLL:
            if (!objc_msgSend(v7, "hasFeedbackSubmissionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "feedbackSubmissionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2BuLL:
            if (!objc_msgSend(v7, "hasFeedbackLookupURL"))
              goto LABEL_114;
            objc_msgSend(v7, "feedbackLookupURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2CuLL:
            if (!objc_msgSend(v7, "hasAnalyticsCohortSessionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "analyticsCohortSessionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2DuLL:
            if (!objc_msgSend(v7, "hasAnalyticsLongSessionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "analyticsLongSessionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2EuLL:
            if (!objc_msgSend(v7, "hasAnalyticsShortSessionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "analyticsShortSessionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x2FuLL:
            if (!objc_msgSend(v7, "hasAnalyticsSessionlessURL"))
              goto LABEL_114;
            objc_msgSend(v7, "analyticsSessionlessURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x30uLL:
            if (!objc_msgSend(v7, "hasWebModuleBaseURL"))
              goto LABEL_114;
            objc_msgSend(v7, "webModuleBaseURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x31uLL:
            if (!objc_msgSend(v7, "hasWifiQualityTileURL"))
              goto LABEL_114;
            objc_msgSend(v7, "wifiQualityTileURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x32uLL:
            if (!objc_msgSend(v7, "hasTokenAuthenticationURL"))
              goto LABEL_114;
            objc_msgSend(v7, "tokenAuthenticationURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x33uLL:
            if (!objc_msgSend(v7, "hasAuthenticatedClientFeatureFlagURL"))
              goto LABEL_114;
            objc_msgSend(v7, "authenticatedClientFeatureFlagURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x34uLL:
            if (!objc_msgSend(v7, "hasAddressCorrectionTaggedLocationURL"))
              goto LABEL_114;
            objc_msgSend(v7, "addressCorrectionTaggedLocationURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x35uLL:
            if (!objc_msgSend(v7, "hasEnrichmentSubmissionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "enrichmentSubmissionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x36uLL:
            if (!objc_msgSend(v7, "hasUgcLogDiscardURL"))
              goto LABEL_114;
            objc_msgSend(v7, "ugcLogDiscardURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x37uLL:
            if (!objc_msgSend(v7, "hasBatchReverseGeocoderPlaceRequestURL"))
              goto LABEL_114;
            objc_msgSend(v7, "batchReverseGeocoderPlaceRequestURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x38uLL:
            if (!objc_msgSend(v7, "hasPressureProbeDataURL"))
              goto LABEL_114;
            objc_msgSend(v7, "pressureProbeDataURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x39uLL:
            if (!objc_msgSend(v7, "hasPoiBusynessActivityCollectionURL"))
              goto LABEL_114;
            objc_msgSend(v7, "poiBusynessActivityCollectionURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3AuLL:
            if (!objc_msgSend(v7, "hasRapWebBundleURL"))
              goto LABEL_114;
            objc_msgSend(v7, "rapWebBundleURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3BuLL:
            if (!objc_msgSend(v7, "hasNetworkSelectionHarvestURL"))
              goto LABEL_114;
            objc_msgSend(v7, "networkSelectionHarvestURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3CuLL:
            if (!objc_msgSend(v7, "hasOfflineDataBatchListURL"))
              goto LABEL_114;
            objc_msgSend(v7, "offlineDataBatchListURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3DuLL:
            if (!objc_msgSend(v7, "hasOfflineDataSizeURL"))
              goto LABEL_114;
            objc_msgSend(v7, "offlineDataSizeURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3EuLL:
            if (!objc_msgSend(v7, "hasOfflineDataDownloadBaseURL"))
              goto LABEL_114;
            objc_msgSend(v7, "offlineDataDownloadBaseURL");
            v11 = objc_claimAutoreleasedReturnValue();
            goto LABEL_113;
          case 0x3FuLL:
            if (objc_msgSend(v7, "hasBcxDispatcherURL"))
            {
              objc_msgSend(v7, "bcxDispatcherURL");
              v11 = objc_claimAutoreleasedReturnValue();
LABEL_113:
              v10 = (void *)v11;
            }
            else
            {
LABEL_114:
              v10 = 0;
            }
LABEL_115:
            v5[2](v5, v10);
            v12 = (void *)objc_claimAutoreleasedReturnValue();
            v13 = v12;
            if (!v12)
            {
              objc_msgSend(MEMORY[0x1E0C99E38], "null");
              v2 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = v2;
            }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", i);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v8, "setObject:forKeyedSubscript:", v13, v14);

            if (!v12)
            break;
          default:
            goto LABEL_115;
        }
      }
    }

    v6 = v16;
    v4 = v17;
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id GEOGetProxyAuthFromResourceManifest(void *a1)
{
  return _GEOGetURLInfoFromResourceManifest(a1, &__block_literal_global_85_0);
}

void GEOWaitForURLsFromManifestAndThen(void *a1)
{
  GEOWaitForURLsFromManifestAndThenOnQueue(MEMORY[0x1E0C80D38], a1);
}

void sub_18960926C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPFeedbackLayoutConfigParametersReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  GEOMapRegion *v43;
  uint64_t v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  int v49;
  char v50;
  void *v51;
  char v53;
  char v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 1;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v54 = (v16 == 0) | v15;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        v20 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        v53 = v10 | v14;
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_78;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v17;
      v25 = *(_QWORD *)(v3 + v24);
      if (v25 == -1 || v25 >= *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v25);
      *(_QWORD *)(v3 + v24) = v25 + 1;
      v23 |= (unint64_t)(v26 & 0x7F) << v21;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v27 = v22++ >= 9;
      if (v27)
      {
        v23 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v23 = 0;
LABEL_25:
    if (v28 || (v23 & 7) == 4)
    {
LABEL_78:
      if ((v15 & 1) != 0)
      {
        v48 = 1;
        goto LABEL_89;
      }
      if (v16)
      {
        while (1)
        {
          v49 = *v16++;
          v50 = 4;
          switch(v49)
          {
            case 0:
              goto LABEL_90;
            case 2:
              goto LABEL_84;
            case 3:
              v50 = 2;
              goto LABEL_84;
            case 4:
              v50 = 8;
LABEL_84:
              *(_BYTE *)(a1 + v20[207]) |= v50;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_90;
    }
    v30 = v23 >> 3;
    v31 = v15;
    if ((v54 & 1) == 0)
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    switch((int)v30)
    {
      case 1:
        if ((v8 & 1) == 0)
          goto LABEL_63;
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + v20[207]) |= 1u;
        while (1)
        {
          v39 = *v17;
          v40 = *(_QWORD *)(v3 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(v3 + *v6))
            break;
          v41 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v40);
          *(_QWORD *)(v3 + v39) = v40 + 1;
          v38 |= (unint64_t)(v41 & 0x7F) << v36;
          if ((v41 & 0x80) == 0)
            goto LABEL_66;
          v36 += 7;
          v27 = v37++ >= 9;
          if (v27)
          {
            LODWORD(v38) = 0;
            goto LABEL_68;
          }
        }
        *(_BYTE *)(v3 + *v18) = 1;
LABEL_66:
        if (*(_BYTE *)(v3 + *v18))
          LODWORD(v38) = 0;
LABEL_68:
        *(_DWORD *)(a1 + 52) = v38;
        goto LABEL_77;
      case 2:
        if (!v31)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + v20[207]) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_86;
          v47 = 32 * *(_BYTE *)(a1 + v20[207]);
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v43 = objc_alloc_init(GEOMapRegion);
        if (!GEOMapRegionReadAllFrom((uint64_t)v43, (void *)v3))
          goto LABEL_87;
        PBReaderRecallMark();
        v44 = 24;
        goto LABEL_62;
      case 3:
        if (!v31)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + v20[207]) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_86;
          v47 = *(_BYTE *)(a1 + v20[207]) << 6;
          goto LABEL_75;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v43 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v43, (void *)v3))
          goto LABEL_87;
        PBReaderRecallMark();
        v44 = 16;
        goto LABEL_62;
      case 4:
        if (!v31)
        {
LABEL_63:
          v46 = PBReaderSkipValueWithTag();
          v18 = (int *)MEMORY[0x1E0D82BC8];
          v15 = v53;
          if ((v46 & 1) == 0)
          {
LABEL_85:
            v48 = 0;
            goto LABEL_89;
          }
LABEL_77:
          if (!(v15 & 1 | (v7 != 0)))
            goto LABEL_78;
          continue;
        }
        if ((*(_BYTE *)(a1 + v20[207]) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_86:
            v48 = 0;
            goto LABEL_88;
          }
          v47 = 16 * *(_BYTE *)(a1 + v20[207]);
LABEL_75:
          v7 += v47 >> 7;
          goto LABEL_76;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v43 = objc_alloc_init(GEOPDMapsIdentifier);
        if (GEOPDMapsIdentifierReadAllFrom((uint64_t)v43, (void *)v3))
        {
          PBReaderRecallMark();
          v44 = 32;
LABEL_62:
          v45 = *(void **)(a1 + v44);
          *(_QWORD *)(a1 + v44) = v43;

          --v7;
          v20 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
LABEL_76:
          v15 = v53;
          v18 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_77;
        }
LABEL_87:

        v48 = 0;
        v20 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
LABEL_88:
        v15 = v53;
        v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
        *(_BYTE *)(a1 + v20[207]) |= 4u;
        *(_BYTE *)(a1 + v20[207]) |= 2u;
        *(_BYTE *)(a1 + v20[207]) |= 8u;
        if ((v48 & 1) != 0)
        {
LABEL_90:
          v3 = *(_BYTE *)(v3 + *v18) == 0;
          if ((v15 & 1) != 0)
            goto LABEL_91;
        }
        else
        {
          v3 = 0;
          if ((v15 & 1) != 0)
          {
LABEL_91:
            v51 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v42 = PBReaderSkipValueWithTag();
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v15 = v53;
        if (!v42)
          goto LABEL_85;
        goto LABEL_77;
    }
  }
}

void sub_1896099C0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189609B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18960A25C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPFeedbackLayoutConfigParametersReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPFeedbackLayoutConfigParametersReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPFeedbackLayoutConfigParametersReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPFeedbackLayoutConfigParametersReadAllFrom_initialTag;
  Specified = GEORPFeedbackLayoutConfigParametersReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 16), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18960A420(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPFeedbackLayoutConfigParametersReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPFeedbackLayoutConfigParametersReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18960A480(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutConfigParametersIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_46;
          v16 = 0;
          do
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
            {
              a1[*v4] = 1;
              goto LABEL_41;
            }
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if ((v20 & 0x80000000) == 0)
              break;
          }
          while (v16++ <= 8);
          goto LABEL_41;
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOMapRegionIsValid(a1))
            goto LABEL_46;
          goto LABEL_40;
        case 3u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_46;
          goto LABEL_40;
        case 4u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEOPDMapsIdentifierIsValid(a1))
            goto LABEL_46;
LABEL_40:
          PBReaderRecallMark();
          goto LABEL_41;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_46:
            PBReaderRecallMark();
            return 0;
          }
LABEL_41:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_44;
          break;
      }
    }
  }
LABEL_44:
  v22 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v22;
}

void sub_18960A8E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutConfigParametersIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 56) & 0x1E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18960ACA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutConfigResultReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  int v17;
  GEORPFeedbackLayoutFormConfig *v19;
  _BOOL8 v20;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v19 = objc_alloc_init(GEORPFeedbackLayoutFormConfig);
          if (!GEORPFeedbackLayoutFormConfigReadAllFrom(v19, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addForm:", v19, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v20 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v20 = 0;
  }
  objc_sync_exit(v5);

  return v20;
}

void sub_18960B684(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutConfigResultReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPFeedbackLayoutConfigResultReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18960B6E4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutConfigResultIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || !PBReaderPlaceMark() || !GEORPFeedbackLayoutFormConfigIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v16 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v16;
}

BOOL GEORPFeedbackLayoutFormConfigIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 3u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPLayoutFieldIsValid(a1))
            goto LABEL_61;
          PBReaderRecallMark();
          continue;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_57;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_58;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_61;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_61:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
          break;
        v35 = v34 + 1;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_58;
      }
LABEL_57:
      a1[*v4] = 1;
LABEL_58:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v37;
}

BOOL GEORPFeedbackLayoutFieldNameReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  GEORPIncidentField *v58;
  void *v59;
  uint64_t v60;
  _BOOL8 v61;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v17 = 0;
            v18 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 0x80u;
            while (1)
            {
              v20 = *v4;
              v21 = *(_QWORD *)&v3[v20];
              if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
                break;
              v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 1;
              v19 |= (unint64_t)(v22 & 0x7F) << v17;
              if ((v22 & 0x80) == 0)
                goto LABEL_82;
              v17 += 7;
              v14 = v18++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_84;
              }
            }
            v3[*v6] = 1;
LABEL_82:
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_84:
            v60 = 44;
            goto LABEL_113;
          case 2u:
            v23 = 0;
            v24 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 0x20u;
            while (2)
            {
              v25 = *v4;
              v26 = *(_QWORD *)&v3[v25];
              if (v26 == -1 || v26 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v26);
                *(_QWORD *)&v3[v25] = v26 + 1;
                v19 |= (unint64_t)(v27 & 0x7F) << v23;
                if (v27 < 0)
                {
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_88;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_88:
            v60 = 36;
            goto LABEL_113;
          case 3u:
            v28 = 0;
            v29 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 1u;
            while (2)
            {
              v30 = *v4;
              v31 = *(_QWORD *)&v3[v30];
              if (v31 == -1 || v31 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v32 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
                *(_QWORD *)&v3[v30] = v31 + 1;
                v19 |= (unint64_t)(v32 & 0x7F) << v28;
                if (v32 < 0)
                {
                  v28 += 7;
                  v14 = v29++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_92;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_92:
            v60 = 16;
            goto LABEL_113;
          case 4u:
            v33 = 0;
            v34 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 0x10u;
            while (2)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              if (v36 == -1 || v36 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v37 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
                *(_QWORD *)&v3[v35] = v36 + 1;
                v19 |= (unint64_t)(v37 & 0x7F) << v33;
                if (v37 < 0)
                {
                  v33 += 7;
                  v14 = v34++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_96;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_96:
            v60 = 32;
            goto LABEL_113;
          case 5u:
            v38 = 0;
            v39 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 4u;
            while (2)
            {
              v40 = *v4;
              v41 = *(_QWORD *)&v3[v40];
              if (v41 == -1 || v41 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v42 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v41);
                *(_QWORD *)&v3[v40] = v41 + 1;
                v19 |= (unint64_t)(v42 & 0x7F) << v38;
                if (v42 < 0)
                {
                  v38 += 7;
                  v14 = v39++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_100;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_100:
            v60 = 24;
            goto LABEL_113;
          case 6u:
            v43 = 0;
            v44 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 8u;
            while (2)
            {
              v45 = *v4;
              v46 = *(_QWORD *)&v3[v45];
              if (v46 == -1 || v46 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v47 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v46);
                *(_QWORD *)&v3[v45] = v46 + 1;
                v19 |= (unint64_t)(v47 & 0x7F) << v43;
                if (v47 < 0)
                {
                  v43 += 7;
                  v14 = v44++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_104;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_104:
            v60 = 28;
            goto LABEL_113;
          case 7u:
            v48 = 0;
            v49 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 0x40u;
            while (2)
            {
              v50 = *v4;
              v51 = *(_QWORD *)&v3[v50];
              if (v51 == -1 || v51 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v52 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v51);
                *(_QWORD *)&v3[v50] = v51 + 1;
                v19 |= (unint64_t)(v52 & 0x7F) << v48;
                if (v52 < 0)
                {
                  v48 += 7;
                  v14 = v49++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_108;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_108:
            v60 = 40;
            goto LABEL_113;
          case 8u:
            v53 = 0;
            v54 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 48) |= 2u;
            while (2)
            {
              v55 = *v4;
              v56 = *(_QWORD *)&v3[v55];
              if (v56 == -1 || v56 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v57 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v56);
                *(_QWORD *)&v3[v55] = v56 + 1;
                v19 |= (unint64_t)(v57 & 0x7F) << v53;
                if (v57 < 0)
                {
                  v53 += 7;
                  v14 = v54++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_112;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_112:
            v60 = 20;
LABEL_113:
            *(_DWORD *)(a1 + v60) = v19;
            goto LABEL_114;
          case 9u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_117;
            v58 = objc_alloc_init(GEORPIncidentField);
            if (!GEORPIncidentFieldReadAllFrom((uint64_t)v58, v3))
            {

              goto LABEL_117;
            }
            PBReaderRecallMark();
            v59 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v58;

LABEL_114:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_115;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_117;
            goto LABEL_114;
        }
      }
    }
LABEL_115:
    v61 = v3[*v6] == 0;
  }
  else
  {
LABEL_117:
    v61 = 0;
  }
  objc_sync_exit(v3);

  return v61;
}

void sub_18960EAA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutFieldNameReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPFeedbackLayoutFieldNameReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18960EB00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutFieldNameIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int v56;
  _BOOL8 v57;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v30 = v29 + 1;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v32 = 0;
          while (1)
          {
            v33 = *v2;
            v34 = *(_QWORD *)&a1[v33];
            if (v34 == -1 || v34 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v35 = v34 + 1;
            v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
            *(_QWORD *)&a1[v33] = v35;
            if (v36 < 0)
            {
              v21 = v32++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v37 = 0;
          while (1)
          {
            v38 = *v2;
            v39 = *(_QWORD *)&a1[v38];
            if (v39 == -1 || v39 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v40 = v39 + 1;
            v41 = *(char *)(*(_QWORD *)&a1[*v5] + v39);
            *(_QWORD *)&a1[v38] = v40;
            if (v41 < 0)
            {
              v21 = v37++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v42 = 0;
          while (1)
          {
            v43 = *v2;
            v44 = *(_QWORD *)&a1[v43];
            if (v44 == -1 || v44 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v45 = v44 + 1;
            v46 = *(char *)(*(_QWORD *)&a1[*v5] + v44);
            *(_QWORD *)&a1[v43] = v45;
            if (v46 < 0)
            {
              v21 = v42++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v47 = 0;
          while (1)
          {
            v48 = *v2;
            v49 = *(_QWORD *)&a1[v48];
            if (v49 == -1 || v49 >= *(_QWORD *)&a1[*v3])
              goto LABEL_85;
            v50 = v49 + 1;
            v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
            *(_QWORD *)&a1[v48] = v50;
            if (v51 < 0)
            {
              v21 = v47++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_86;
          }
        case 8u:
          if ((v8 & 7) != 0)
            goto LABEL_94;
          v52 = 0;
          break;
        case 9u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPIncidentFieldIsValid(a1))
            goto LABEL_94;
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_94:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v53 = *v2;
        v54 = *(_QWORD *)&a1[v53];
        if (v54 == -1 || v54 >= *(_QWORD *)&a1[*v3])
          break;
        v55 = v54 + 1;
        v56 = *(char *)(*(_QWORD *)&a1[*v5] + v54);
        *(_QWORD *)&a1[v53] = v55;
        if (v56 < 0)
        {
          v21 = v52++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_86;
      }
LABEL_85:
      a1[*v4] = 1;
LABEL_86:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v57 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v57;
}

BOOL GEORPIncidentFieldIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_42;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_42;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_44;
        v23 = 0;
        while (1)
        {
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 == -1 || v25 >= *(_QWORD *)&a1[*v3])
            goto LABEL_39;
          v26 = v25 + 1;
          v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
          *(_QWORD *)&a1[v24] = v26;
          if (v27 < 0)
          {
            v22 = v23++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_41;
        }
      }
      if ((_DWORD)v16 == 1 && v14 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_44:
        v28 = 0;
        goto LABEL_43;
      }
LABEL_41:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_42;
    }
    if ((v8 & 7) != 0)
      goto LABEL_44;
    v17 = 0;
    while (1)
    {
      v18 = *v2;
      v19 = *(_QWORD *)&a1[v18];
      if (v19 == -1 || v19 >= *(_QWORD *)&a1[*v3])
        break;
      v20 = v19 + 1;
      v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
      *(_QWORD *)&a1[v18] = v20;
      if (v21 < 0)
      {
        v22 = v17++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_41;
    }
LABEL_39:
    a1[*v4] = 1;
    goto LABEL_41;
  }
LABEL_42:
  v28 = a1[*v4] == 0;
LABEL_43:
  PBReaderRecallMark();
  return v28;
}

BOOL GEORPFeedbackLayoutFormConfigReadAllFrom(_BYTE *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  GEORPLayoutField *v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  _BOOL8 v43;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      while (!v5[*v8])
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          if (v14 == -1 || v14 >= *(_QWORD *)&v5[*v7])
            break;
          v15 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v14 + 1;
          v12 |= (unint64_t)(v15 & 0x7F) << v10;
          if ((v15 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          v16 = v11++ >= 9;
          if (v16)
          {
            v12 = 0;
            v17 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v17 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v17 || (v12 & 7) == 4)
          break;
        switch((v12 >> 3))
        {
          case 1u:
            v19 = 0;
            v20 = 0;
            v21 = 0;
            a1[32] |= 4u;
            while (1)
            {
              v22 = *v6;
              v23 = *(_QWORD *)&v5[v22];
              if (v23 == -1 || v23 >= *(_QWORD *)&v5[*v7])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v23);
              *(_QWORD *)&v5[v22] = v23 + 1;
              v21 |= (unint64_t)(v24 & 0x7F) << v19;
              if ((v24 & 0x80) == 0)
                goto LABEL_54;
              v19 += 7;
              v16 = v20++ >= 9;
              if (v16)
              {
                LODWORD(v21) = 0;
                goto LABEL_56;
              }
            }
            v5[*v8] = 1;
LABEL_54:
            if (v5[*v8])
              LODWORD(v21) = 0;
LABEL_56:
            v42 = 24;
            goto LABEL_69;
          case 2u:
            v25 = 0;
            v26 = 0;
            v21 = 0;
            a1[32] |= 1u;
            while (2)
            {
              v27 = *v6;
              v28 = *(_QWORD *)&v5[v27];
              if (v28 == -1 || v28 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v29 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v28);
                *(_QWORD *)&v5[v27] = v28 + 1;
                v21 |= (unint64_t)(v29 & 0x7F) << v25;
                if (v29 < 0)
                {
                  v25 += 7;
                  v16 = v26++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_60;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v21) = 0;
LABEL_60:
            v42 = 16;
            goto LABEL_69;
          case 3u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_73;
            v30 = objc_alloc_init(GEORPLayoutField);
            if (!GEORPLayoutFieldReadAllFrom((uint64_t)v30, v5, a3))
            {

              goto LABEL_73;
            }
            PBReaderRecallMark();
            objc_msgSend(a1, "addLayoutField:", v30, 0, 0);

LABEL_70:
            if (*(_QWORD *)&v5[*v6] >= *(_QWORD *)&v5[*v7])
              goto LABEL_71;
            break;
          case 4u:
            v31 = 0;
            v32 = 0;
            v33 = 0;
            a1[32] |= 8u;
            while (2)
            {
              v34 = *v6;
              v35 = *(_QWORD *)&v5[v34];
              if (v35 == -1 || v35 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v36 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v35);
                *(_QWORD *)&v5[v34] = v35 + 1;
                v33 |= (unint64_t)(v36 & 0x7F) << v31;
                if (v36 < 0)
                {
                  v31 += 7;
                  v16 = v32++ >= 9;
                  if (v16)
                  {
                    v33 = 0;
                    goto LABEL_64;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              v33 = 0;
LABEL_64:
            a1[28] = v33 != 0;
            goto LABEL_70;
          case 6u:
            v37 = 0;
            v38 = 0;
            v21 = 0;
            a1[32] |= 2u;
            while (2)
            {
              v39 = *v6;
              v40 = *(_QWORD *)&v5[v39];
              if (v40 == -1 || v40 >= *(_QWORD *)&v5[*v7])
              {
                v5[*v8] = 1;
              }
              else
              {
                v41 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v40);
                *(_QWORD *)&v5[v39] = v40 + 1;
                v21 |= (unint64_t)(v41 & 0x7F) << v37;
                if (v41 < 0)
                {
                  v37 += 7;
                  v16 = v38++ >= 9;
                  if (v16)
                  {
                    LODWORD(v21) = 0;
                    goto LABEL_68;
                  }
                  continue;
                }
              }
              break;
            }
            if (v5[*v8])
              LODWORD(v21) = 0;
LABEL_68:
            v42 = 20;
LABEL_69:
            *(_DWORD *)&a1[v42] = v21;
            goto LABEL_70;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_73;
            goto LABEL_70;
        }
      }
    }
LABEL_71:
    v43 = v5[*v8] == 0;
  }
  else
  {
LABEL_73:
    v43 = 0;
  }
  objc_sync_exit(v5);

  return v43;
}

void sub_189610CF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPFeedbackLayoutFormConfigReadFrom(_BYTE *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPFeedbackLayoutFormConfigReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189610D50(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPLayoutFieldIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            if (v18 == -1 || v18 >= *(_QWORD *)&a1[*v3])
              goto LABEL_50;
            v19 = v18 + 1;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_51;
          }
        case 2u:
          if (v14 != 2 || !PBReaderPlaceMark() || !GEORPFeedbackLayoutFieldNameIsValid(a1))
            goto LABEL_54;
          PBReaderRecallMark();
          continue;
        case 3u:
          if (v14 == 2)
            goto LABEL_32;
          goto LABEL_54;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&a1[*v3])
              goto LABEL_50;
            v25 = v24 + 1;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_51;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_54;
          v27 = 0;
          break;
        default:
LABEL_32:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_54:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        if (v29 == -1 || v29 >= *(_QWORD *)&a1[*v3])
          break;
        v30 = v29 + 1;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v21 = v27++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_51;
      }
LABEL_50:
      a1[*v4] = 1;
LABEL_51:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v32;
}

BOOL GEORPIncidentFieldReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _BOOL8 v32;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        v17 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 24) |= 2u;
          while (1)
          {
            v23 = *v4;
            v24 = *(_QWORD *)&v3[v23];
            if (v24 == -1 || v24 >= *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v24);
            *(_QWORD *)&v3[v23] = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if ((v25 & 0x80) == 0)
              goto LABEL_40;
            v20 += 7;
            v14 = v21++ >= 9;
            if (v14)
            {
              v22 = 0;
              goto LABEL_42;
            }
          }
          v3[*v6] = 1;
LABEL_40:
          if (v3[*v6])
            v22 = 0;
LABEL_42:
          *(_BYTE *)(a1 + 20) = v22 != 0;
        }
        else if ((_DWORD)v17 == 2)
        {
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 24) |= 1u;
          while (1)
          {
            v29 = *v4;
            v30 = *(_QWORD *)&v3[v29];
            if (v30 == -1 || v30 >= *(_QWORD *)&v3[*v5])
              break;
            v31 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v30);
            *(_QWORD *)&v3[v29] = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if ((v31 & 0x80) == 0)
              goto LABEL_44;
            v26 += 7;
            v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v28) = 0;
              goto LABEL_46;
            }
          }
          v3[*v6] = 1;
LABEL_44:
          if (v3[*v6])
            LODWORD(v28) = 0;
LABEL_46:
          *(_DWORD *)(a1 + 16) = v28;
        }
        else if ((_DWORD)v17 == 1)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_49;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v32 = v3[*v6] == 0;
  }
  else
  {
LABEL_49:
    v32 = 0;
  }
  objc_sync_exit(v3);

  return v32;
}

void sub_1896125A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPIncidentFieldReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPIncidentFieldReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189612608(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189612DF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPLayoutFieldReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  unint64_t v28;
  _BOOL4 v29;
  int *v30;
  int v31;
  int v32;
  BOOL v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  GEORPFeedbackLayoutFieldName *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  char v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  char v57;
  char v58;
  int v59;
  int v60;
  char v61;
  void *v62;
  BOOL v64;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 56) >> 4) & 1) + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v7 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v64 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_99;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_27;
      v19 += 7;
      v25 = v20++ >= 9;
      if (v25)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v26 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_29:
    if (v26 || (v21 & 7) == 4)
    {
LABEL_99:
      if (v13)
      {
        v58 = 1;
        goto LABEL_110;
      }
      if (!v14)
        goto LABEL_111;
      while (1)
      {
        v60 = *v14++;
        v59 = v60;
        if (v60 == 2)
          break;
        if (v59 == 3)
        {
          v61 = 8;
LABEL_108:
          *(_BYTE *)(a1 + 56) |= v61;
        }
        else if (!v59)
        {
          goto LABEL_111;
        }
      }
      v61 = 16;
      goto LABEL_108;
    }
    v28 = v21 >> 3;
    v29 = v13;
    if (!v64)
    {
      v30 = v14;
      do
      {
        v32 = *v30++;
        v31 = v32;
        v29 = v32 != 0;
        if (v32)
          v33 = v31 == (_DWORD)v28;
        else
          v33 = 1;
      }
      while (!v33);
    }
    switch((int)v28)
    {
      case 1:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 56) |= 2u;
        while (1)
        {
          v37 = *v16;
          v38 = *(_QWORD *)(v3 + v37);
          if (v38 == -1 || v38 >= *(_QWORD *)(v3 + *v6))
            break;
          v39 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v38);
          *(_QWORD *)(v3 + v37) = v38 + 1;
          v36 |= (unint64_t)(v39 & 0x7F) << v34;
          if ((v39 & 0x80) == 0)
            goto LABEL_78;
          v34 += 7;
          v25 = v35++ >= 9;
          if (v25)
          {
            LODWORD(v36) = 0;
            goto LABEL_80;
          }
        }
        *(_BYTE *)(v3 + *v17) = 1;
LABEL_78:
        if (*(_BYTE *)(v3 + *v17))
          LODWORD(v36) = 0;
LABEL_80:
        v55 = 48;
        goto LABEL_89;
      case 2:
        if (!v29)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 56) & 0x10) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_109;
          v56 = 8 * *(_BYTE *)(a1 + 56);
LABEL_94:
          v8 += v56 >> 7;
          goto LABEL_95;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_109;
        v40 = objc_alloc_init(GEORPFeedbackLayoutFieldName);
        if (GEORPFeedbackLayoutFieldNameReadAllFrom((uint64_t)v40, (void *)v3))
        {
          PBReaderRecallMark();
          v41 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v40;

          --v8;
          v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_95:
          if (v8)
            v57 = 1;
          else
            v57 = v13;
          if ((v57 & 1) == 0)
            goto LABEL_99;
          continue;
        }

        v58 = 0;
        v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_110:
        *(_BYTE *)(a1 + 56) |= 0x10u;
        *(_BYTE *)(a1 + 56) |= 8u;
        if ((v58 & 1) != 0)
        {
LABEL_111:
          v3 = *(_BYTE *)(v3 + *v17) == 0;
          if (v13)
            goto LABEL_112;
        }
        else
        {
          v3 = 0;
          if (v13)
          {
LABEL_112:
            v62 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      case 3:
        if (!v29)
          goto LABEL_75;
        if ((*(_BYTE *)(a1 + 56) & 8) == 0)
        {
          PBReaderReadString();
          v42 = objc_claimAutoreleasedReturnValue();
          v43 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v42;

          --v8;
          goto LABEL_95;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_109:
          v58 = 0;
          goto LABEL_110;
        }
        v56 = 16 * *(_BYTE *)(a1 + 56);
        goto LABEL_94;
      case 4:
        if ((v7 & 1) == 0)
          goto LABEL_75;
        v44 = 0;
        v45 = 0;
        v46 = 0;
        *(_BYTE *)(a1 + 56) |= 4u;
        while (2)
        {
          v47 = *v16;
          v48 = *(_QWORD *)(v3 + v47);
          if (v48 == -1 || v48 >= *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v17) = 1;
          }
          else
          {
            v49 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v48);
            *(_QWORD *)(v3 + v47) = v48 + 1;
            v46 |= (unint64_t)(v49 & 0x7F) << v44;
            if (v49 < 0)
            {
              v44 += 7;
              v25 = v45++ >= 9;
              if (v25)
              {
                v46 = 0;
                goto LABEL_84;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v17))
          v46 = 0;
LABEL_84:
        *(_BYTE *)(a1 + 52) = v46 != 0;
        goto LABEL_95;
      case 5:
        if ((v7 & 1) != 0)
        {
          v50 = 0;
          v51 = 0;
          v36 = 0;
          *(_BYTE *)(a1 + 56) |= 1u;
          while (1)
          {
            v52 = *v16;
            v53 = *(_QWORD *)(v3 + v52);
            if (v53 == -1 || v53 >= *(_QWORD *)(v3 + *v6))
              break;
            v54 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v53);
            *(_QWORD *)(v3 + v52) = v53 + 1;
            v36 |= (unint64_t)(v54 & 0x7F) << v50;
            if ((v54 & 0x80) == 0)
              goto LABEL_86;
            v50 += 7;
            v25 = v51++ >= 9;
            if (v25)
            {
              LODWORD(v36) = 0;
              goto LABEL_88;
            }
          }
          *(_BYTE *)(v3 + *v17) = 1;
LABEL_86:
          if (*(_BYTE *)(v3 + *v17))
            LODWORD(v36) = 0;
LABEL_88:
          v55 = 44;
LABEL_89:
          *(_DWORD *)(a1 + v55) = v36;
        }
        else
        {
LABEL_75:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_109;
        }
        goto LABEL_95;
      default:
        if (!PBReaderSkipValueWithTag())
          goto LABEL_109;
        goto LABEL_95;
    }
  }
}

void sub_1896135A8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189613D84(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPLayoutFieldReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPLayoutFieldReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPLayoutFieldReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPLayoutFieldReadAllFrom_initialTag;
  Specified = GEORPLayoutFieldReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_189613F28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPLayoutFieldReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORPLayoutFieldReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189613F88(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189614168(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEORPLayoutFieldIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 56) & 0x38) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_1896144F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOSetQueryForExperimentTypeInDictionary(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  __CFString *v12;
  id v13;

  v13 = a1;
  v7 = a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%d"), a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2 == 1)
  {
    objc_msgSend(v13, "objectForKeyedSubscript:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v10 = v9;
    }
    else
    {
      if (v9)
      {
        v11 = objc_msgSend(v9, "mutableCopy");
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
        v11 = objc_claimAutoreleasedReturnValue();
      }
      v10 = (id)v11;
      objc_msgSend(v13, "setObject:forKeyedSubscript:", v11, v8);
    }
    if (a3 >= 0x3F)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("(unknown: %i)"), a3);
      v12 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v12 = off_1E1C13670[(int)a3];
    }
    objc_msgSend(v10, "setObject:forKeyedSubscript:", v7, v12);

  }
  else
  {
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v7, v8);
  }

}

void _GEOSetQueryForExperimentType(int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  void *v10;
  id v11;

  v9 = a5;
  _getValue(a1, a2, 1, 0, 0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = (id)objc_msgSend(v10, "mutableCopy");

  _GEOSetQueryForExperimentTypeInDictionary(v11, a3, a4, v9);
  _setValue(a1, a2, v11, 1, 0);

}

void sub_189616284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_189616384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1896165D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_189616878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id GEOGetGEORouteBuilder_PersistentDataLog()
{
  if (qword_1ECDBC788 != -1)
    dispatch_once(&qword_1ECDBC788, &__block_literal_global_165);
  return (id)_MergedGlobals_303;
}

BOOL GEOAbAssignInfoReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  id v34;
  void *v35;
  uint64_t v36;
  _BOOL8 v37;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_51;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_51;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
          break;
        if ((_DWORD)v18 == 2)
        {
          v28 = 0;
          v29 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 40) |= 2u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v23 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
              goto LABEL_46;
            v28 += 7;
            v15 = v29++ >= 9;
            if (v15)
            {
              v23 = 0;
              goto LABEL_48;
            }
          }
          v3[*v6] = 1;
LABEL_46:
          if (v3[*v6])
            v23 = 0;
LABEL_48:
          v36 = 32;
LABEL_49:
          *(_QWORD *)(a1 + v36) = v23;
          goto LABEL_50;
        }
        if ((_DWORD)v18 == 1)
        {
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v19;

        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v34 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v35 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v34;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_52;
        }
LABEL_50:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_51;
      }
      v21 = 0;
      v22 = 0;
      v23 = 0;
      *(_BYTE *)(a1 + 40) |= 1u;
      while (1)
      {
        v24 = *v4;
        v25 = *(_QWORD *)&v3[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&v3[*v5])
          break;
        v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v25);
        *(_QWORD *)&v3[v24] = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0)
          goto LABEL_42;
        v21 += 7;
        v15 = v22++ >= 9;
        if (v15)
        {
          v23 = 0;
          goto LABEL_44;
        }
      }
      v3[*v6] = 1;
LABEL_42:
      if (v3[*v6])
        v23 = 0;
LABEL_44:
      v36 = 24;
      goto LABEL_49;
    }
LABEL_51:
    v37 = v3[*v6] == 0;
  }
  else
  {
LABEL_52:
    v37 = 0;
  }
  objc_sync_exit(v3);

  return v37;
}

void sub_18961886C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAbAssignInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAbAssignInfoReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896188CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAbAssignInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  _BOOL8 v29;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_42;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_42;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_44;
        v24 = 0;
        while (1)
        {
          v25 = *v2;
          v26 = *(_QWORD *)&a1[v25];
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)&a1[*v3])
            goto LABEL_39;
          v28 = *(char *)(*(_QWORD *)&a1[*v5] + v26);
          *(_QWORD *)&a1[v25] = v27;
          if (v28 < 0)
          {
            v23 = v24++ > 8;
            if (!v23)
              continue;
          }
          goto LABEL_41;
        }
      }
      if ((_DWORD)v17 == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_44:
        v29 = 0;
        goto LABEL_43;
      }
LABEL_41:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_42;
    }
    if ((v8 & 7) != 0)
      goto LABEL_44;
    v18 = 0;
    while (1)
    {
      v19 = *v2;
      v20 = *(_QWORD *)&a1[v19];
      v21 = v20 + 1;
      if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
        break;
      v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
      *(_QWORD *)&a1[v19] = v21;
      if (v22 < 0)
      {
        v23 = v18++ > 8;
        if (!v23)
          continue;
      }
      goto LABEL_41;
    }
LABEL_39:
    a1[*v4] = 1;
    goto LABEL_41;
  }
LABEL_42:
  v29 = a1[*v4] == 0;
LABEL_43:
  PBReaderRecallMark();
  return v29;
}

void sub_189619A90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAddressReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOAddressReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189619AF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAddressIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v24;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 16)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_38;
        }
        a1[*v4] = 1;
      }
      else if ((_DWORD)v17 == 15)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOStructuredAddressIsValid(a1))
          goto LABEL_41;
        PBReaderRecallMark();
      }
      else if ((_DWORD)v17 == 11 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
LABEL_38:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v24 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v24;
}

BOOL GEOStructuredAddressIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  _BOOL8 v27;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_84;
          goto LABEL_68;
        case 2u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 3u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 4u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 5u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 6u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 7u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 8u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 9u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xAu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xBu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xCu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xDu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xEu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0xFu:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0x10u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0x11u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0x12u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        case 0x13u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOSubPremiseIsValid(a1))
            goto LABEL_66;
          goto LABEL_84;
        case 0x14u:
          if (v15 == 2)
            goto LABEL_68;
          goto LABEL_84;
        default:
          if ((v8 >> 3) == 100)
          {
            if (v15 == 2)
            {
              if (!PBReaderPlaceMark())
              {
LABEL_84:
                PBReaderRecallMark();
                return 0;
              }
LABEL_72:
              while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
              {
                v22 = a1[*v4];
                if (a1[*v4])
                  break;
                while (1)
                {
                  v23 = *v2;
                  v24 = *(_QWORD *)&a1[v23];
                  v25 = v24 + 1;
                  if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
                    break;
                  v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
                  *(_QWORD *)&a1[v23] = v25;
                  if (v26 < 0)
                  {
                    v13 = v22++ >= 9;
                    if (!v13)
                      continue;
                  }
                  goto LABEL_72;
                }
                a1[*v4] = 1;
              }
LABEL_66:
              PBReaderRecallMark();
            }
            else
            {
              if ((v8 & 7) != 0)
                goto LABEL_84;
              while (1)
              {
                v17 = *v2;
                v18 = *(_QWORD *)&a1[v17];
                v19 = v18 + 1;
                if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
                  break;
                v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
                *(_QWORD *)&a1[v17] = v19;
                if (v20 < 0)
                {
                  v21 = v15++;
                  if (v21 <= 8)
                    continue;
                }
                goto LABEL_69;
              }
              a1[*v4] = 1;
            }
          }
          else
          {
LABEL_68:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_84;
          }
LABEL_69:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_82;
          break;
      }
    }
  }
LABEL_82:
  v27 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v27;
}

void sub_18961A3EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAddressIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 56) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18961A818(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961ABB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributeKeyValueReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  int v49;
  int *v50;
  unsigned __int8 v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v51 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_59:
      v49 = 1;
      goto LABEL_60;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 2)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = 24;
        goto LABEL_44;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v42 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v49 = 0;
LABEL_60:
      v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v51) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v31)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 32;
LABEL_44:
    v38 = *(void **)(a1 + v37);
    *(_QWORD *)(a1 + v37) = v36;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v43 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v43 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v51 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v50[261]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v49 & 1) == 0))
  {
    *(_BYTE *)(a1 + v50[261]) |= 2u;
    *(_BYTE *)(a1 + v50[261]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v46 = *v16++;
      v45 = v46;
      if (v46 == 1)
        break;
      if (v45 == 2)
      {
        v44 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v50[261]) |= v44;
      }
      else if (!v45)
      {
        goto LABEL_73;
      }
    }
    v44 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v49)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_18961B4E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961B5B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOAttributeKeyValueReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOAttributeKeyValueReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOAttributeKeyValueReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOAttributeKeyValueReadAllFrom_initialTag;
  Specified = GEOAttributeKeyValueReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18961B978(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961BAF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOAttributeKeyValueIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18961BCDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961C0BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCarInfoReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  int *v18;
  int *v19;
  int v20;
  int *v21;
  char v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  int v33;
  unint64_t v35;
  BOOL v36;
  int *v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  int *v66;
  char v67;
  unsigned int v68;
  uint64_t v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  void *v75;
  GEOScreenDimension *v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  char v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char v88;
  int *v89;
  char v90;
  unsigned int v91;
  uint64_t v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char v97;
  char v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char v104;
  char v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  char v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  int v124;
  char v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char v131;
  char v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  int v139;
  int v140;
  void *v141;
  char v143;
  char v144;
  char v145;
  char v146;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 132);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 128));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11.i64[0] = 0x100000001;
  v11.i64[1] = 0x100000001;
  v12 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32((uint32x4_t)vdupq_n_s32(*(_DWORD *)(a1 + 160)), (uint32x4_t)xmmword_189CDFF40), v11))+ ((*(_DWORD *)(a1 + 160) >> 15) & 1)+ ((*(_DWORD *)(a1 + 160) >> 11) & 1)+ ((*(_DWORD *)(a1 + 160) >> 9) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v15 = v12 > 3;
        v16 = v15 & ~(_BYTE)v10 | v9;
        v17 = v15 | v10;
        if ((((v15 | v10) | v8) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = 1;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = v16;
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_233;
        v143 = v16;
        v145 = v17 | v16;
        v146 = (v18 == 0) | v17;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v144 = v17;
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
LABEL_9:
        ++v7;
        v9 = v13;
        v10 = v14;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_BYTE *)(v3 + *v21))
      goto LABEL_231;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v19;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_24;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_24:
    v32 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v26 = 0;
LABEL_26:
    v33 = v26 & 7;
    if (v32 || v33 == 4)
    {
LABEL_231:
      v20 = 1;
      goto LABEL_232;
    }
    v35 = v26 >> 3;
    v36 = v17;
    if ((v146 & 1) == 0)
    {
      v37 = v18;
      do
      {
        v39 = *v37++;
        v38 = v39;
        v36 = v39 != 0;
        if (v39)
          v40 = v38 == (_DWORD)v35;
        else
          v40 = 1;
      }
      while (!v40);
    }
    switch((int)v35)
    {
      case 2:
        if (!v36)
          goto LABEL_165;
        if ((*(_BYTE *)(a1 + 161) & 0x20) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 104;
          goto LABEL_96;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_253;
        v124 = (int)(*(_DWORD *)(a1 + 160) << 18) >> 31;
        goto LABEL_209;
      case 3:
        if (!v36)
          goto LABEL_165;
        if ((*(_BYTE *)(a1 + 161) & 0x40) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 112;
          goto LABEL_96;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_253;
        v124 = (int)(*(_DWORD *)(a1 + 160) << 17) >> 31;
        goto LABEL_209;
      case 4:
        if ((v8 & 1) == 0)
        {
          v119 = PBReaderSkipValueWithTag();
          v17 = v144;
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if ((v119 & 1) == 0)
            goto LABEL_251;
          goto LABEL_229;
        }
        if (!PBReaderPlaceMark() || (GEOScreenResolutionReadAllFrom(a1 + 72, v3) & 1) == 0)
          goto LABEL_253;
        PBReaderRecallMark();
        *(_DWORD *)(a1 + 160) |= 1u;
        goto LABEL_227;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 160) |= 8u;
        while (2)
        {
          v49 = *v19;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v31 = v47++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_170:
        v121 = 148;
        goto LABEL_187;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        *(_DWORD *)(a1 + 160) |= 0x20u;
        while (2)
        {
          v56 = *v19;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              v31 = v54++ >= 9;
              if (v31)
              {
                v55 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v55 = 0;
LABEL_174:
        v122 = v55 != 0;
        v123 = 156;
        goto LABEL_200;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v60 = 0;
        v61 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 160) |= 0x10u;
        while (2)
        {
          v62 = *v19;
          v63 = *(_QWORD *)(v3 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v63);
            *(_QWORD *)(v3 + v62) = v64;
            v48 |= (unint64_t)(v65 & 0x7F) << v60;
            if (v65 < 0)
            {
              v60 += 7;
              v31 = v61++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_178:
        v121 = 152;
        goto LABEL_187;
      case 8:
        if (!v36 || (*(_BYTE *)(a1 + 161) & 4) != 0)
          goto LABEL_165;
        if (v33 != 2)
        {
          v125 = 0;
          v126 = 0;
          v127 = 0;
          while (1)
          {
            v128 = *v19;
            v129 = *(_QWORD *)(v3 + v128);
            v130 = v129 + 1;
            if (v129 == -1 || v130 > *(_QWORD *)(v3 + *v6))
              goto LABEL_225;
            v131 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v129);
            *(_QWORD *)(v3 + v128) = v130;
            v127 |= (unint64_t)(v131 & 0x7F) << v125;
            if (v131 < 0)
            {
              v125 += 7;
              v31 = v126++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_226;
          }
        }
        if (!PBReaderPlaceMark())
          goto LABEL_253;
        while (1)
        {
          v66 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            goto LABEL_210;
          v67 = 0;
          v68 = 0;
          v69 = 0;
          v70 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v71 = *v19;
            v72 = *(_QWORD *)(v3 + v71);
            v73 = v72 + 1;
            if (v72 == -1 || v73 > *(_QWORD *)(v3 + *v6))
              break;
            v74 = *(_BYTE *)(*(_QWORD *)(v3 + *v70) + v72);
            *(_QWORD *)(v3 + v71) = v73;
            v69 |= (unint64_t)(v74 & 0x7F) << v67;
            if (v74 < 0)
            {
              v67 += 7;
              v31 = v68++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_92;
          }
          *(_BYTE *)(v3 + *v66) = 1;
LABEL_92:
          PBRepeatedInt32Add();
        }
      case 9:
        if (!v36)
          goto LABEL_165;
        if ((*(_BYTE *)(a1 + 161) & 0x10) == 0)
        {
          PBReaderReadString();
          v41 = objc_claimAutoreleasedReturnValue();
          v42 = 96;
LABEL_96:
          v75 = *(void **)(a1 + v42);
          *(_QWORD *)(a1 + v42) = v41;
          goto LABEL_102;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_253;
        v124 = (int)(*(_DWORD *)(a1 + 160) << 19) >> 31;
        goto LABEL_209;
      case 10:
        if (!v36)
          goto LABEL_165;
        if ((*(_BYTE *)(a1 + 161) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_253;
          v124 = (int)(*(_DWORD *)(a1 + 160) << 16) >> 31;
LABEL_209:
          v7 += v124;
          goto LABEL_227;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_253;
        v76 = objc_alloc_init(GEOScreenDimension);
        if (GEOScreenDimensionReadAllFrom((uint64_t)v76, (void *)v3))
        {
          PBReaderRecallMark();
          v75 = *(void **)(a1 + 120);
          *(_QWORD *)(a1 + 120) = v76;
LABEL_102:

          --v7;
LABEL_227:
          v17 = v144;
          v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_228:
          v23 = (int *)MEMORY[0x1E0D82BB8];
LABEL_229:
          if (!(v145 & 1 | (v7 != 0)) || *(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6))
            goto LABEL_231;
          continue;
        }

LABEL_253:
        v20 = 0;
        v17 = v144;
        v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_232:
        v22 = v143;
LABEL_233:
        if ((v22 & 1) != 0)
LABEL_234:
          *(_DWORD *)(a1 + 160) |= 0x200u;
        if (v17 & 1 | ((v20 & 1) == 0))
        {
          *(_DWORD *)(a1 + 160) |= 0x2000u;
          *(_DWORD *)(a1 + 160) |= 0x4000u;
          *(_DWORD *)(a1 + 160) |= 0x400u;
          *(_DWORD *)(a1 + 160) |= 0x1000u;
          *(_DWORD *)(a1 + 160) |= 0x8000u;
          *(_DWORD *)(a1 + 160) |= 0x800u;
        }
        else if (v18)
        {
          while (1)
          {
            v139 = *v18++;
            v140 = 0x2000;
            switch(v139)
            {
              case 0:
                goto LABEL_245;
              case 2:
                goto LABEL_244;
              case 3:
                v140 = 0x4000;
                goto LABEL_244;
              case 8:
                v140 = 1024;
                goto LABEL_244;
              case 9:
                v140 = 4096;
                goto LABEL_244;
              case 10:
                v140 = 0x8000;
                goto LABEL_244;
              case 13:
                v140 = 2048;
LABEL_244:
                *(_DWORD *)(a1 + 160) |= v140;
                break;
              default:
                continue;
            }
          }
        }
LABEL_245:
        if (v20)
        {
          v3 = *(_BYTE *)(v3 + *v21) == 0;
          if ((v17 & 1) == 0)
            return v3;
LABEL_249:
          v141 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
            goto LABEL_249;
        }
        return v3;
      case 11:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v77 = 0;
        v78 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 160) |= 4u;
        while (2)
        {
          v79 = *v19;
          v80 = *(_QWORD *)(v3 + v79);
          v81 = v80 + 1;
          if (v80 == -1 || v81 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v80);
            *(_QWORD *)(v3 + v79) = v81;
            v48 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v31 = v78++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_182:
        v121 = 144;
        goto LABEL_187;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v83 = 0;
        v84 = 0;
        v48 = 0;
        *(_DWORD *)(a1 + 160) |= 2u;
        while (2)
        {
          v85 = *v19;
          v86 = *(_QWORD *)(v3 + v85);
          v87 = v86 + 1;
          if (v86 == -1 || v87 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v88 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v86);
            *(_QWORD *)(v3 + v85) = v87;
            v48 |= (unint64_t)(v88 & 0x7F) << v83;
            if (v88 < 0)
            {
              v83 += 7;
              v31 = v84++ >= 9;
              if (v31)
              {
                LODWORD(v48) = 0;
                goto LABEL_186;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          LODWORD(v48) = 0;
LABEL_186:
        v121 = 140;
LABEL_187:
        *(_DWORD *)(a1 + v121) = v48;
        goto LABEL_229;
      case 13:
        if (!v36 || (*(_BYTE *)(a1 + 161) & 8) != 0)
          goto LABEL_165;
        if (v33 != 2)
        {
          v132 = 0;
          v133 = 0;
          v134 = 0;
          while (1)
          {
            v135 = *v19;
            v136 = *(_QWORD *)(v3 + v135);
            v137 = v136 + 1;
            if (v136 == -1 || v137 > *(_QWORD *)(v3 + *v6))
              break;
            v138 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v136);
            *(_QWORD *)(v3 + v135) = v137;
            v134 |= (unint64_t)(v138 & 0x7F) << v132;
            if (v138 < 0)
            {
              v132 += 7;
              v31 = v133++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_226;
          }
LABEL_225:
          *(_BYTE *)(v3 + *v21) = 1;
LABEL_226:
          PBRepeatedInt32Add();
          goto LABEL_227;
        }
        if (!PBReaderPlaceMark())
          goto LABEL_253;
        while (1)
        {
          v89 = (int *)MEMORY[0x1E0D82BC8];
          if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + (int)*MEMORY[0x1E0D82BC8]))
            break;
          v90 = 0;
          v91 = 0;
          v92 = 0;
          v93 = (int *)MEMORY[0x1E0D82BB8];
          while (1)
          {
            v94 = *v19;
            v95 = *(_QWORD *)(v3 + v94);
            v96 = v95 + 1;
            if (v95 == -1 || v96 > *(_QWORD *)(v3 + *v6))
              break;
            v97 = *(_BYTE *)(*(_QWORD *)(v3 + *v93) + v95);
            *(_QWORD *)(v3 + v94) = v96;
            v92 |= (unint64_t)(v97 & 0x7F) << v90;
            if (v97 < 0)
            {
              v90 += 7;
              v31 = v91++ >= 9;
              if (!v31)
                continue;
            }
            goto LABEL_133;
          }
          *(_BYTE *)(v3 + *v89) = 1;
LABEL_133:
          PBRepeatedInt32Add();
        }
LABEL_210:
        PBReaderRecallMark();
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v17 = v144;
        goto LABEL_228;
      case 14:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v98 = 0;
        v99 = 0;
        v100 = 0;
        *(_DWORD *)(a1 + 160) |= 0x80u;
        while (2)
        {
          v101 = *v19;
          v102 = *(_QWORD *)(v3 + v101);
          v103 = v102 + 1;
          if (v102 == -1 || v103 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v104 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v102);
            *(_QWORD *)(v3 + v101) = v103;
            v100 |= (unint64_t)(v104 & 0x7F) << v98;
            if (v104 < 0)
            {
              v98 += 7;
              v31 = v99++ >= 9;
              if (v31)
              {
                v100 = 0;
                goto LABEL_191;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v100 = 0;
LABEL_191:
        v122 = v100 != 0;
        v123 = 158;
        goto LABEL_200;
      case 15:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v105 = 0;
        v106 = 0;
        v107 = 0;
        *(_DWORD *)(a1 + 160) |= 0x40u;
        while (2)
        {
          v108 = *v19;
          v109 = *(_QWORD *)(v3 + v108);
          v110 = v109 + 1;
          if (v109 == -1 || v110 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v111 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v109);
            *(_QWORD *)(v3 + v108) = v110;
            v107 |= (unint64_t)(v111 & 0x7F) << v105;
            if (v111 < 0)
            {
              v105 += 7;
              v31 = v106++ >= 9;
              if (v31)
              {
                v107 = 0;
                goto LABEL_195;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v107 = 0;
LABEL_195:
        v122 = v107 != 0;
        v123 = 157;
        goto LABEL_200;
      case 16:
        if ((v8 & 1) == 0)
          goto LABEL_165;
        v112 = 0;
        v113 = 0;
        v114 = 0;
        *(_DWORD *)(a1 + 160) |= 0x100u;
        while (2)
        {
          v115 = *v19;
          v116 = *(_QWORD *)(v3 + v115);
          v117 = v116 + 1;
          if (v116 == -1 || v117 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v21) = 1;
          }
          else
          {
            v118 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v116);
            *(_QWORD *)(v3 + v115) = v117;
            v114 |= (unint64_t)(v118 & 0x7F) << v112;
            if (v118 < 0)
            {
              v112 += 7;
              v31 = v113++ >= 9;
              if (v31)
              {
                v114 = 0;
                goto LABEL_199;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v21))
          v114 = 0;
LABEL_199:
        v122 = v114 != 0;
        v123 = 159;
LABEL_200:
        *(_BYTE *)(a1 + v123) = v122;
        goto LABEL_229;
      default:
        if ((v143 & 1) == 0 || (*(_BYTE *)(a1 + 161) & 2) != 0)
        {
LABEL_165:
          v120 = PBReaderSkipValueWithTag();
          v23 = (int *)MEMORY[0x1E0D82BB8];
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v17 = v144;
          if ((v120 & 1) == 0)
          {
LABEL_251:
            v20 = 0;
            goto LABEL_232;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v44 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v43;

          }
          v45 = PBUnknownFieldAdd();
          v17 = v144;
          v21 = (int *)MEMORY[0x1E0D82BC8];
          v23 = (int *)MEMORY[0x1E0D82BB8];
          if (!v45)
          {
            v20 = 0;
            goto LABEL_234;
          }
        }
        goto LABEL_229;
    }
  }
}

void sub_18961D1EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961D7A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961DBEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961DD34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961DF74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18961F780(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCarInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 132))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOCarInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 132) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOCarInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOCarInfoReadAllFrom_initialTag;
  Specified = GEOCarInfoReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 120), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_18961F920(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOCarInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCarInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18961F980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCarInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  _BOOL8 v78;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 2u:
          if (v15 != 2)
            goto LABEL_137;
          goto LABEL_59;
        case 3u:
          if (v15 == 2)
            goto LABEL_59;
          goto LABEL_137;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOScreenResolutionIsValid(a1))
            goto LABEL_137;
          goto LABEL_64;
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 7u:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v22 = v28++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 8u:
          if (v15 != 2)
          {
            if ((v8 & 7) != 0)
              goto LABEL_137;
            while (1)
            {
              v33 = *v2;
              v34 = *(_QWORD *)&a1[v33];
              v35 = v34 + 1;
              if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
                goto LABEL_112;
              v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
              *(_QWORD *)&a1[v33] = v35;
              if (v36 < 0)
              {
                v37 = v15++;
                if (v37 <= 8)
                  continue;
              }
              goto LABEL_113;
            }
          }
          if (!PBReaderPlaceMark())
            goto LABEL_137;
LABEL_116:
          while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
          {
            v68 = a1[*v4];
            if (a1[*v4])
              break;
            while (1)
            {
              v69 = *v2;
              v70 = *(_QWORD *)&a1[v69];
              v71 = v70 + 1;
              if (v70 == -1 || v71 > *(_QWORD *)&a1[*v3])
                break;
              v72 = *(char *)(*(_QWORD *)&a1[*v5] + v70);
              *(_QWORD *)&a1[v69] = v71;
              if (v72 < 0)
              {
                v13 = v68++ >= 9;
                if (!v13)
                  continue;
              }
              goto LABEL_116;
            }
            a1[*v4] = 1;
          }
          goto LABEL_64;
        case 9u:
          if (v15 == 2)
            goto LABEL_59;
          goto LABEL_137;
        case 0xAu:
          if (v15 == 2 && PBReaderPlaceMark() && GEOScreenDimensionIsValid(a1))
            goto LABEL_64;
          goto LABEL_137;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v42 = *(char *)(*(_QWORD *)&a1[*v5] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v22 = v38++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 0xCu:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v43 = 0;
          while (1)
          {
            v44 = *v2;
            v45 = *(_QWORD *)&a1[v44];
            v46 = v45 + 1;
            if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v47 = *(char *)(*(_QWORD *)&a1[*v5] + v45);
            *(_QWORD *)&a1[v44] = v46;
            if (v47 < 0)
            {
              v22 = v43++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 0xDu:
          if (v15 == 2)
          {
            if (!PBReaderPlaceMark())
            {
LABEL_137:
              PBReaderRecallMark();
              return 0;
            }
LABEL_126:
            while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
            {
              v73 = a1[*v4];
              if (a1[*v4])
                break;
              while (1)
              {
                v74 = *v2;
                v75 = *(_QWORD *)&a1[v74];
                v76 = v75 + 1;
                if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
                  break;
                v77 = *(char *)(*(_QWORD *)&a1[*v5] + v75);
                *(_QWORD *)&a1[v74] = v76;
                if (v77 < 0)
                {
                  v13 = v73++ >= 9;
                  if (!v13)
                    continue;
                }
                goto LABEL_126;
              }
              a1[*v4] = 1;
            }
LABEL_64:
            PBReaderRecallMark();
          }
          else
          {
            if ((v8 & 7) != 0)
              goto LABEL_137;
            while (1)
            {
              v48 = *v2;
              v49 = *(_QWORD *)&a1[v48];
              v50 = v49 + 1;
              if (v49 == -1 || v50 > *(_QWORD *)&a1[*v3])
                break;
              v51 = *(char *)(*(_QWORD *)&a1[*v5] + v49);
              *(_QWORD *)&a1[v48] = v50;
              if (v51 < 0)
              {
                v52 = v15++;
                if (v52 <= 8)
                  continue;
              }
              goto LABEL_113;
            }
LABEL_112:
            a1[*v4] = 1;
          }
LABEL_113:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_135;
          break;
        case 0xEu:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v53 = 0;
          while (1)
          {
            v54 = *v2;
            v55 = *(_QWORD *)&a1[v54];
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v57 = *(char *)(*(_QWORD *)&a1[*v5] + v55);
            *(_QWORD *)&a1[v54] = v56;
            if (v57 < 0)
            {
              v22 = v53++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 0xFu:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v58 = 0;
          while (1)
          {
            v59 = *v2;
            v60 = *(_QWORD *)&a1[v59];
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v62 = *(char *)(*(_QWORD *)&a1[*v5] + v60);
            *(_QWORD *)&a1[v59] = v61;
            if (v62 < 0)
            {
              v22 = v58++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        case 0x10u:
          if ((v8 & 7) != 0)
            goto LABEL_137;
          v63 = 0;
          while (1)
          {
            v64 = *v2;
            v65 = *(_QWORD *)&a1[v64];
            v66 = v65 + 1;
            if (v65 == -1 || v66 > *(_QWORD *)&a1[*v3])
              goto LABEL_112;
            v67 = *(char *)(*(_QWORD *)&a1[*v5] + v65);
            *(_QWORD *)&a1[v64] = v66;
            if (v67 < 0)
            {
              v22 = v63++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_113;
          }
        default:
LABEL_59:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_137;
          goto LABEL_113;
      }
    }
  }
LABEL_135:
  v78 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v78;
}

uint64_t GEOScreenResolutionIsValid(void *a1)
{
  uint64_t AllFrom;
  _QWORD v4[5];

  v4[3] = objc_msgSend(a1, "position");
  v4[4] = objc_msgSend(a1, "length");
  memset(v4, 0, 24);
  AllFrom = GEOScreenResolutionReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

BOOL GEOScreenDimensionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v8 >> 3) == 2 || (v8 >> 3) == 1)
      {
        if (v16 != 1)
          goto LABEL_30;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && (v20 = v19 + 8, v20 <= *(_QWORD *)&a1[*v3]))
          *(_QWORD *)&a1[v18] = v20;
        else
          a1[v14] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_30:
        v21 = 0;
        goto LABEL_29;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v21 = a1[*v4] == 0;
LABEL_29:
  PBReaderRecallMark();
  return v21;
}

void sub_1896205EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOScreenResolutionWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 16);
  if ((v2 & 2) != 0)
  {
    result = PBDataWriterWriteDoubleField();
    v2 = *(_BYTE *)(v1 + 16);
  }
  if ((v2 & 1) != 0)
    return PBDataWriterWriteDoubleField();
  return result;
}

BOOL GEOCarInfoIsDirty(os_unfair_lock_s *a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 34);
  v2 = (a1[40]._os_unfair_lock_opaque & 0x1FC00) != 0;
  os_unfair_lock_unlock(a1 + 34);
  return v2;
}

void sub_189620D30(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOScreenResolutionEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

void sub_1896215C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationMetadataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  _BOOL8 v27;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 20) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_32;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_34;
            }
          }
          v3[*v6] = 1;
LABEL_32:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_34:
          *(_DWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v26 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v25;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_37;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v27 = v3[*v6] == 0;
  }
  else
  {
LABEL_37:
    v27 = 0;
  }
  objc_sync_exit(v3);

  return v27;
}

void sub_189621EA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationMetadataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOCoarseLocationMetadataReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189621F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOCoarseLocationMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _BOOL8 v22;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_33;
        v16 = 0;
        while (1)
        {
          v17 = *v2;
          v18 = *(_QWORD *)&a1[v17];
          v19 = v18 + 1;
          if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
            break;
          v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
          *(_QWORD *)&a1[v17] = v19;
          if (v20 < 0 && v16++ <= 8)
            continue;
          goto LABEL_30;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_33:
        v22 = 0;
        goto LABEL_32;
      }
LABEL_30:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v22 = a1[*v4] == 0;
LABEL_32:
  PBReaderRecallMark();
  return v22;
}

id GEOECEFCoordinateDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOECEFCoordinateDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOECEFCoordinate<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOECEFCoordinateDictionaryRepresentation(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v6;
  void *v7;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_BYTE *)(a1 + 24);
  if ((v3 & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      goto LABEL_3;
LABEL_7:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 8));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v7, CFSTR("y"));

    if ((*(_BYTE *)(a1 + 24) & 4) == 0)
      return v2;
    goto LABEL_4;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v6, CFSTR("x"));

  v3 = *(_BYTE *)(a1 + 24);
  if ((v3 & 2) != 0)
    goto LABEL_7;
LABEL_3:
  if ((v3 & 4) != 0)
  {
LABEL_4:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 16));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("z"));

  }
  return v2;
}

void _GEOECEFCoordinateFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;

  v9 = a1;
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("x"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 24) |= 1u;
    objc_msgSend(v3, "doubleValue");
    *(_QWORD *)a2 = v4;
  }

  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("y"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 24) |= 2u;
    objc_msgSend(v5, "doubleValue");
    *(_QWORD *)(a2 + 8) = v6;
  }

  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("z"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 24) |= 4u;
    objc_msgSend(v7, "doubleValue");
    *(_QWORD *)(a2 + 16) = v8;
  }

}

uint64_t GEOECEFCoordinateReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOECEFCoordinateReadAllFrom(a1, a2);
}

uint64_t GEOECEFCoordinateReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 24) |= 4u;
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v25 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v25 = 0;
        }
        *(_QWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v19 == 2)
      {
        *(_BYTE *)(a1 + 24) |= 2u;
        v26 = *v3;
        v27 = *(_QWORD *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v28 = 0;
        }
        *(_QWORD *)(a1 + 8) = v28;
      }
      else if ((_DWORD)v19 == 1)
      {
        *(_BYTE *)(a1 + 24) |= 1u;
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_QWORD *)a1 = v22;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEOECEFCoordinateWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 24);
  if ((v2 & 1) != 0)
  {
    result = PBDataWriterWriteDoubleField();
    v2 = *(_BYTE *)(v1 + 24);
    if ((v2 & 2) == 0)
    {
LABEL_3:
      if ((v2 & 4) == 0)
        return result;
      return PBDataWriterWriteDoubleField();
    }
  }
  else if ((*(_BYTE *)(result + 24) & 2) == 0)
  {
    goto LABEL_3;
  }
  result = PBDataWriterWriteDoubleField();
  if ((*(_BYTE *)(v1 + 24) & 4) != 0)
    return PBDataWriterWriteDoubleField();
  return result;
}

BOOL GEOECEFCoordinateEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t GEOECEFCoordinateHash()
{
  return PBHashBytes();
}

uint64_t GEOECEFCoordinateIsValid(void *a1)
{
  uint64_t AllFrom;
  _OWORD v4[2];
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend(a1, "position");
  v6 = objc_msgSend(a1, "length");
  memset(v4, 0, sizeof(v4));
  AllFrom = GEOECEFCoordinateReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

BOOL GEOGeoServiceTagReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_1896237AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOGeoServiceTagReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOGeoServiceTagReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18962380C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOGeoServiceTagIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v24;
  BOOL v25;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 2)
      {
        v24 = 0;
        if (v5 || v16 != 2)
          goto LABEL_44;
        v5 = 2;
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_45:
          v24 = 0;
          goto LABEL_44;
        }
      }
      else if ((v9 >> 3) == 1)
      {
        if ((v9 & 7) != 0)
          goto LABEL_45;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v6] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_35;
        }
        a1[*v4] = 1;
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_45;
      }
LABEL_35:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v25 = 1;
  else
    v25 = v5 == 0;
  v24 = !v25;
LABEL_44:
  PBReaderRecallMark();
  return v24;
}

BOOL GEOInterpolationParametersReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  id v28;
  void *v29;
  _BOOL8 v30;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 28) |= 2u;
          while (1)
          {
            v24 = *v4;
            v25 = *(_QWORD *)&v3[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&v3[*v5])
              break;
            v27 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v25);
            *(_QWORD *)&v3[v24] = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if ((v27 & 0x80) == 0)
              goto LABEL_36;
            v21 += 7;
            v15 = v22++ >= 9;
            if (v15)
            {
              LODWORD(v23) = 0;
              goto LABEL_38;
            }
          }
          v3[*v6] = 1;
LABEL_36:
          if (v3[*v6])
            LODWORD(v23) = 0;
LABEL_38:
          *(_DWORD *)(a1 + 24) = v23;
        }
        else if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 28) |= 1u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          *(_QWORD *)(a1 + 16) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v28 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v29 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v28;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_43;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v30 = v3[*v6] == 0;
  }
  else
  {
LABEL_43:
    v30 = 0;
  }
  objc_sync_exit(v3);

  return v30;
}

void sub_18962458C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOInterpolationParametersReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOInterpolationParametersReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896245EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOInterpolationParametersIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  _BOOL8 v27;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_37;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        goto LABEL_37;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v16 != 1)
          goto LABEL_39;
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        if (v19 > 0xFFFFFFFFFFFFFFF7)
          goto LABEL_35;
        v20 = v19 + 8;
        if (v20 > *(_QWORD *)&a1[*v3])
          goto LABEL_35;
        *(_QWORD *)&a1[v18] = v20;
      }
      else if (!PBReaderSkipValueWithTag())
      {
LABEL_39:
        v27 = 0;
        goto LABEL_38;
      }
LABEL_36:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_37;
    }
    if ((v8 & 7) != 0)
      goto LABEL_39;
    v21 = 0;
    while (1)
    {
      v22 = *v2;
      v23 = *(_QWORD *)&a1[v22];
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)&a1[*v3])
        break;
      v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
      *(_QWORD *)&a1[v22] = v24;
      if (v25 < 0 && v21++ <= 8)
        continue;
      goto LABEL_36;
    }
    v14 = *v4;
LABEL_35:
    a1[v14] = 1;
    goto LABEL_36;
  }
LABEL_37:
  v27 = a1[*v4] == 0;
LABEL_38:
  PBReaderRecallMark();
  return v27;
}

BOOL GEOLatLngReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLatLngReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18962502C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLatLngE7ReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLatLngE7ReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189625810(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalTimeReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  id v31;
  void *v32;
  _BOOL8 v33;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 2000)
        {
          PBReaderReadString();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v26;

        }
        else if ((_DWORD)v18 == 2)
        {
          *(_BYTE *)(a1 + 36) |= 2u;
          v28 = *v4;
          v29 = *(_QWORD *)&v3[v28];
          if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)&v3[*v5])
          {
            v30 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v29);
            *(_QWORD *)&v3[v28] = v29 + 4;
          }
          else
          {
            v3[*v6] = 1;
            v30 = 0;
          }
          *(_DWORD *)(a1 + 32) = v30;
        }
        else if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
              break;
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              goto LABEL_38;
            v19 += 7;
            v15 = v20++ >= 9;
            if (v15)
            {
              v21 = 0;
              goto LABEL_40;
            }
          }
          v3[*v6] = 1;
LABEL_38:
          if (v3[*v6])
            v21 = 0;
LABEL_40:
          *(_QWORD *)(a1 + 24) = v21;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v31 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v32 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v31;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_45;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v33 = v3[*v6] == 0;
  }
  else
  {
LABEL_45:
    v33 = 0;
  }
  objc_sync_exit(v3);

  return v33;
}

void sub_189626370(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalTimeReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalTimeReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896263D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalTimeIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BOOL8 v28;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      if ((v8 >> 3) == 2000)
      {
        if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_43:
          v28 = 0;
          goto LABEL_42;
        }
      }
      else if ((_DWORD)v18 == 2)
      {
        if (v16 != 5)
          goto LABEL_43;
        v25 = *v2;
        v26 = *(_QWORD *)&a1[v25];
        if (v26 > 0xFFFFFFFFFFFFFFFBLL)
          goto LABEL_39;
        v27 = v26 + 4;
        if (v27 > *(_QWORD *)&a1[*v3])
          goto LABEL_39;
        *(_QWORD *)&a1[v25] = v27;
      }
      else
      {
        if ((_DWORD)v18 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_43;
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              break;
            v23 = *(char *)(*(_QWORD *)&a1[*v5] + v21);
            *(_QWORD *)&a1[v20] = v22;
            if (v23 < 0 && v19++ <= 8)
              continue;
            goto LABEL_40;
          }
          v14 = *v4;
LABEL_39:
          a1[v14] = 1;
          continue;
        }
        if (!PBReaderSkipValueWithTag())
          goto LABEL_43;
      }
LABEL_40:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
LABEL_42:
  PBReaderRecallMark();
  return v28;
}

BOOL GEOLocalizationCapabilitiesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalizationCapabilitiesReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189627484(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizationCapabilitiesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_50;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        v13 = v7++ >= 9;
        if (v13)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_50;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
        {
          if ((v8 & 7) != 0)
            goto LABEL_52;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              break;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v15++;
              if (v21 <= 8)
                continue;
            }
            goto LABEL_49;
          }
LABEL_37:
          a1[*v4] = 1;
          goto LABEL_49;
        }
        if (!PBReaderPlaceMark())
        {
LABEL_52:
          PBReaderRecallMark();
          return 0;
        }
LABEL_39:
        while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3])
        {
          v28 = a1[*v4];
          if (a1[*v4])
            break;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              break;
            v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v13 = v28++ >= 9;
              if (!v13)
                continue;
            }
            goto LABEL_39;
          }
          a1[*v4] = 1;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_52;
      }
LABEL_49:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_50;
    }
    if ((v8 & 7) != 0)
      goto LABEL_52;
    v22 = 0;
    while (1)
    {
      v23 = *v2;
      v24 = *(_QWORD *)&a1[v23];
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
        goto LABEL_37;
      v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
      *(_QWORD *)&a1[v23] = v25;
      if (v26 < 0 && v22++ <= 8)
        continue;
      goto LABEL_49;
    }
  }
LABEL_50:
  v33 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v33;
}

void sub_189627C6C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedBytesReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  int v49;
  int *v50;
  unsigned __int8 v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v51 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_59:
      v49 = 1;
      goto LABEL_60;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 3)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31)
      {
        if ((*(_BYTE *)(a1 + 52) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = 32 * *(_BYTE *)(a1 + 52);
          goto LABEL_57;
        }
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = 32;
        goto LABEL_44;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v42 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v49 = 0;
LABEL_60:
      v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v51) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v31)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 2) == 0)
  {
    PBReaderReadData();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 24;
LABEL_44:
    v38 = *(void **)(a1 + v37);
    *(_QWORD *)(a1 + v37) = v36;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v43 = *(_BYTE *)(a1 + 52) << 6;
LABEL_57:
    v10 += v43 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v51 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v50[267]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v49 & 1) == 0))
  {
    *(_BYTE *)(a1 + v50[267]) |= 4u;
    *(_BYTE *)(a1 + v50[267]) |= 2u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v46 = *v16++;
      v45 = v46;
      if (v46 == 1)
        break;
      if (v45 == 3)
      {
        v44 = 2;
LABEL_69:
        *(_BYTE *)(a1 + v50[267]) |= v44;
      }
      else if (!v45)
      {
        goto LABEL_73;
      }
    }
    v44 = 4;
    goto LABEL_69;
  }
LABEL_73:
  if (v49)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_189628288(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896287F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedBytesReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocalizedBytesReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocalizedBytesReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocalizedBytesReadAllFrom_initialTag;
  Specified = GEOLocalizedBytesReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189628980(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedBytesReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalizedBytesReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896289E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedBytesIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 3)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_189628D2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedBytesIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189628FD4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896291F8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocalizedStringReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocalizedStringReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896296B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189629848(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocalizedStringIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189629AF0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189629D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  const float *v12;
  uint32x4_t v13;
  int8x16_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOLatLng *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  char v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  id v84;
  void *v85;
  int v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  char v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  char v129;
  unsigned int v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  char v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  char v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  int v148;
  int v149;
  void *v150;
  int v152;
  char v153;
  char v154;
  char v155;
  char v156;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 136));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 132);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 128));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v12 = (const float *)(a1 + 180);
  v13 = (uint32x4_t)vld1q_dup_f32(v12);
  v14.i64[0] = 0x100000001;
  v14.i64[1] = 0x100000001;
  v15 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vshlq_u32(v13, (uint32x4_t)xmmword_189CDFF50), v14));
  while (2)
  {
    v16 = 1;
    v17 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v15;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v18 = v15 > 1;
        v19 = v18 | v10;
        v153 = v18 & ~(_BYTE)v10 | v9;
        v155 = v18 | v10 | v153;
        if ((((v18 | v10) | v8) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v156 = (v20 == 0) | v19;
        v23 = (int *)MEMORY[0x1E0D82BB8];
        v154 = v18 | v10;
        break;
      default:
        ++v15;
LABEL_7:
        v16 = v9;
LABEL_8:
        v17 = v10;
LABEL_9:
        ++v7;
        v9 = v16;
        v10 = v17;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_273;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_24;
      v24 += 7;
      v31 = v25++ >= 9;
      if (v31)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_24:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_26:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_273:
      v152 = 1;
      goto LABEL_274;
    }
    v34 = v26 >> 3;
    v35 = v19;
    if ((v156 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    switch((int)v34)
    {
      case 1:
        if (!v35)
          goto LABEL_193;
        if ((*(_BYTE *)(a1 + v11[271] + 2) & 0x80) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_295;
          v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
          v145 = (int)(*(_DWORD *)(a1 + 180) << 8) >> 31;
          goto LABEL_251;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_295;
        v40 = objc_alloc_init(GEOLatLng);
        if (!GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_294;
        PBReaderRecallMark();
        v41 = 64;
        goto LABEL_156;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        v45 = 0;
        v46 = 0;
        v47 = 0;
        *(_DWORD *)(a1 + v11[271]) |= 0x40000u;
        while (2)
        {
          v48 = *v21;
          v49 = *(_QWORD *)(v3 + v48);
          v50 = v49 + 1;
          if (v49 == -1 || v50 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v51 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v49);
            *(_QWORD *)(v3 + v48) = v50;
            v47 |= (unint64_t)(v51 & 0x7F) << v45;
            if (v51 < 0)
            {
              v45 += 7;
              v31 = v46++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_198;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v47) = 0;
LABEL_198:
        v142 = 172;
        goto LABEL_244;
      case 3:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 0x80u;
        v52 = *v21;
        v53 = *(_QWORD *)(v3 + v52);
        if (v53 <= 0xFFFFFFFFFFFFFFF7 && v53 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v53);
          *(_QWORD *)(v3 + v52) = v53 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 104;
        goto LABEL_271;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        v54 = 0;
        v55 = 0;
        v47 = 0;
        *(_DWORD *)(a1 + v11[271]) |= 0x400u;
        while (2)
        {
          v56 = *v21;
          v57 = *(_QWORD *)(v3 + v56);
          v58 = v57 + 1;
          if (v57 == -1 || v58 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v57);
            *(_QWORD *)(v3 + v56) = v58;
            v47 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v31 = v55++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_202;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v47) = 0;
LABEL_202:
        v142 = 140;
        goto LABEL_244;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 8u;
        v60 = *v21;
        v61 = *(_QWORD *)(v3 + v60);
        if (v61 <= 0xFFFFFFFFFFFFFFF7 && v61 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v61);
          *(_QWORD *)(v3 + v60) = v61 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 56;
        goto LABEL_271;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 0x200u;
        v62 = *v21;
        v63 = *(_QWORD *)(v3 + v62);
        if (v63 <= 0xFFFFFFFFFFFFFFF7 && v63 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v63);
          *(_QWORD *)(v3 + v62) = v63 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 120;
        goto LABEL_271;
      case 7:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 0x40u;
        v64 = *v21;
        v65 = *(_QWORD *)(v3 + v64);
        if (v65 <= 0xFFFFFFFFFFFFFFF7 && v65 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v65);
          *(_QWORD *)(v3 + v64) = v65 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 96;
        goto LABEL_271;
      case 8:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 4u;
        v66 = *v21;
        v67 = *(_QWORD *)(v3 + v66);
        if (v67 <= 0xFFFFFFFFFFFFFFF7 && v67 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v67);
          *(_QWORD *)(v3 + v66) = v67 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 48;
        goto LABEL_271;
      case 9:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 2u;
        v68 = *v21;
        v69 = *(_QWORD *)(v3 + v68);
        if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v69);
          *(_QWORD *)(v3 + v68) = v69 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 40;
        goto LABEL_271;
      case 10:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        v70 = 0;
        v71 = 0;
        v47 = 0;
        *(_DWORD *)(a1 + v11[271]) |= 0x2000u;
        while (2)
        {
          v72 = *v21;
          v73 = *(_QWORD *)(v3 + v72);
          v74 = v73 + 1;
          if (v73 == -1 || v74 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v22) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v73);
            *(_QWORD *)(v3 + v72) = v74;
            v47 |= (unint64_t)(v75 & 0x7F) << v70;
            if (v75 < 0)
            {
              v70 += 7;
              v31 = v71++ >= 9;
              if (v31)
              {
                LODWORD(v47) = 0;
                goto LABEL_206;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v22))
          LODWORD(v47) = 0;
LABEL_206:
        v142 = 152;
        goto LABEL_244;
      case 11:
        if (!v35)
          goto LABEL_193;
        if ((*(_BYTE *)(a1 + v11[271] + 2) & 0x40) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_295;
          v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
          v145 = (int)(*(_DWORD *)(a1 + 180) << 9) >> 31;
          goto LABEL_251;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_295;
        v40 = objc_alloc_init(GEOCoarseLocationMetadata);
        if (!GEOCoarseLocationMetadataReadAllFrom((uint64_t)v40, (void *)v3))
          goto LABEL_294;
        PBReaderRecallMark();
        v41 = 24;
        goto LABEL_156;
      case 12:
        if ((v8 & 1) == 0)
          goto LABEL_193;
        *(_DWORD *)(a1 + v11[271]) |= 1u;
        v76 = *v21;
        v77 = *(_QWORD *)(v3 + v76);
        if (v77 <= 0xFFFFFFFFFFFFFFF7 && v77 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v77);
          *(_QWORD *)(v3 + v76) = v77 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + *v22) = 1;
          v44 = 0;
        }
        v146 = 32;
LABEL_271:
        *(_QWORD *)(a1 + v146) = v44;
        goto LABEL_272;
      case 13:
        if ((v8 & 1) != 0)
        {
          v78 = 0;
          v79 = 0;
          v47 = 0;
          *(_DWORD *)(a1 + v11[271]) |= 0x800u;
          while (1)
          {
            v80 = *v21;
            v81 = *(_QWORD *)(v3 + v80);
            v82 = v81 + 1;
            if (v81 == -1 || v82 > *(_QWORD *)(v3 + *v6))
              break;
            v83 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v81);
            *(_QWORD *)(v3 + v80) = v82;
            v47 |= (unint64_t)(v83 & 0x7F) << v78;
            if ((v83 & 0x80) == 0)
              goto LABEL_208;
            v78 += 7;
            v31 = v79++ >= 9;
            if (v31)
            {
              LODWORD(v47) = 0;
              goto LABEL_210;
            }
          }
          *(_BYTE *)(v3 + *v22) = 1;
LABEL_208:
          if (*(_BYTE *)(v3 + *v22))
            LODWORD(v47) = 0;
LABEL_210:
          v142 = 144;
LABEL_244:
          *(_DWORD *)(a1 + v142) = v47;
        }
        else
        {
LABEL_193:
          v141 = PBReaderSkipValueWithTag();
          v22 = (int *)MEMORY[0x1E0D82BC8];
          v19 = v154;
          v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
          if ((v141 & 1) == 0)
          {
            v152 = 0;
            goto LABEL_274;
          }
        }
        goto LABEL_272;
      default:
        switch((int)v34)
        {
          case 'e':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            *(_DWORD *)(a1 + v11[271]) |= 0x20u;
            v42 = *v21;
            v43 = *(_QWORD *)(v3 + v42);
            if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(v3 + *v6))
            {
              v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v43);
              *(_QWORD *)(v3 + v42) = v43 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v22) = 1;
              v44 = 0;
            }
            v146 = 88;
            goto LABEL_271;
          case 'f':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v87 = 0;
            v88 = 0;
            v89 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x80000u;
            while (2)
            {
              v90 = *v21;
              v91 = *(_QWORD *)(v3 + v90);
              v92 = v91 + 1;
              if (v91 == -1 || v92 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v93 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v91);
                *(_QWORD *)(v3 + v90) = v92;
                v89 |= (unint64_t)(v93 & 0x7F) << v87;
                if (v93 < 0)
                {
                  v87 += 7;
                  v31 = v88++ >= 9;
                  if (v31)
                  {
                    v89 = 0;
                    goto LABEL_214;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              v89 = 0;
LABEL_214:
            v143 = v89 != 0;
            v144 = 176;
            goto LABEL_219;
          case 'g':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v94 = 0;
            v95 = 0;
            v96 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x100000u;
            while (2)
            {
              v97 = *v21;
              v98 = *(_QWORD *)(v3 + v97);
              v99 = v98 + 1;
              if (v98 == -1 || v99 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v100 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v98);
                *(_QWORD *)(v3 + v97) = v99;
                v96 |= (unint64_t)(v100 & 0x7F) << v94;
                if (v100 < 0)
                {
                  v94 += 7;
                  v31 = v95++ >= 9;
                  if (v31)
                  {
                    v96 = 0;
                    goto LABEL_218;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              v96 = 0;
LABEL_218:
            v143 = v96 != 0;
            v144 = 177;
LABEL_219:
            *(_BYTE *)(a1 + v144) = v143;
            goto LABEL_272;
          case 'h':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v101 = 0;
            v102 = 0;
            v103 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x100u;
            while (2)
            {
              v104 = *v21;
              v105 = *(_QWORD *)(v3 + v104);
              v106 = v105 + 1;
              if (v105 == -1 || v106 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v107 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v105);
                *(_QWORD *)(v3 + v104) = v106;
                v103 |= (unint64_t)(v107 & 0x7F) << v101;
                if (v107 < 0)
                {
                  v101 += 7;
                  v31 = v102++ >= 9;
                  if (v31)
                  {
                    v103 = 0;
                    goto LABEL_223;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              v103 = 0;
LABEL_223:
            *(_QWORD *)(a1 + 112) = v103;
            goto LABEL_272;
          case 'i':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v108 = 0;
            v109 = 0;
            v47 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x8000u;
            while (2)
            {
              v110 = *v21;
              v111 = *(_QWORD *)(v3 + v110);
              v112 = v111 + 1;
              if (v111 == -1 || v112 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v113 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v111);
                *(_QWORD *)(v3 + v110) = v112;
                v47 |= (unint64_t)(v113 & 0x7F) << v108;
                if (v113 < 0)
                {
                  v108 += 7;
                  v31 = v109++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_227;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              LODWORD(v47) = 0;
LABEL_227:
            v142 = 160;
            goto LABEL_244;
          case 'j':
            if (!v35)
              goto LABEL_193;
            if ((*(_BYTE *)(a1 + v11[271] + 3) & 1) != 0)
            {
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_295;
              v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
              v145 = (int)(*(_DWORD *)(a1 + 180) << 7) >> 31;
LABEL_251:
              v7 += v145;
LABEL_252:
              v19 = v154;
              v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_272:
              if (!(v155 & 1 | (v7 != 0)))
                goto LABEL_273;
              continue;
            }
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_295;
            v40 = objc_alloc_init(GEOLatLng);
            if (GEOLatLngReadAllFrom((uint64_t)v40, (void *)v3))
            {
              PBReaderRecallMark();
              v41 = 72;
LABEL_156:
              v114 = *(void **)(a1 + v41);
              *(_QWORD *)(a1 + v41) = v40;

              --v7;
              v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
              goto LABEL_252;
            }
LABEL_294:

LABEL_295:
            v152 = 0;
            v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
            v19 = v154;
            v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_274:
            if ((v153 & 1) != 0)
LABEL_275:
              *(_DWORD *)(a1 + v11[271]) |= 0x200000u;
            if (v19 & 1 | ((v152 & 1) == 0))
            {
              *(_DWORD *)(a1 + v11[271]) |= 0x800000u;
              *(_DWORD *)(a1 + v11[271]) |= 0x400000u;
              *(_DWORD *)(a1 + v11[271]) |= 0x1000000u;
              goto LABEL_288;
            }
            if (v20)
            {
              while (2)
              {
                while (1)
                {
                  v148 = *v20++;
                  v147 = v148;
                  if (v148 > 10)
                    break;
                  if (v147 == 1)
                  {
                    v149 = 0x800000;
LABEL_286:
                    *(_DWORD *)(a1 + v11[271]) |= v149;
                    continue;
                  }
                  if (!v147)
                    goto LABEL_288;
                }
                if (v147 == 106)
                {
                  v149 = 0x1000000;
                }
                else
                {
                  if (v147 != 11)
                    continue;
                  v149 = 0x400000;
                }
                goto LABEL_286;
              }
            }
LABEL_288:
            if (v152)
            {
              v3 = *(_BYTE *)(v3 + *v22) == 0;
              if ((v19 & 1) == 0)
                return v3;
LABEL_292:
              v150 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = 0;

            }
            else
            {
              v3 = 0;
              if ((v19 & 1) != 0)
                goto LABEL_292;
            }
            return v3;
          case 'k':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            *(_DWORD *)(a1 + v11[271]) |= 0x10u;
            v115 = *v21;
            v116 = *(_QWORD *)(v3 + v115);
            if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *(_QWORD *)(v3 + *v6))
            {
              v44 = *(_QWORD *)(*(_QWORD *)(v3 + *v23) + v116);
              *(_QWORD *)(v3 + v115) = v116 + 8;
            }
            else
            {
              *(_BYTE *)(v3 + *v22) = 1;
              v44 = 0;
            }
            v146 = 80;
            goto LABEL_271;
          case 'l':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v117 = 0;
            v118 = 0;
            v47 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x4000u;
            while (2)
            {
              v119 = *v21;
              v120 = *(_QWORD *)(v3 + v119);
              v121 = v120 + 1;
              if (v120 == -1 || v121 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v122 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v120);
                *(_QWORD *)(v3 + v119) = v121;
                v47 |= (unint64_t)(v122 & 0x7F) << v117;
                if (v122 < 0)
                {
                  v117 += 7;
                  v31 = v118++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_231;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              LODWORD(v47) = 0;
LABEL_231:
            v142 = 156;
            goto LABEL_244;
          case 'm':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v123 = 0;
            v124 = 0;
            v47 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x1000u;
            while (2)
            {
              v125 = *v21;
              v126 = *(_QWORD *)(v3 + v125);
              v127 = v126 + 1;
              if (v126 == -1 || v127 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v128 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v126);
                *(_QWORD *)(v3 + v125) = v127;
                v47 |= (unint64_t)(v128 & 0x7F) << v123;
                if (v128 < 0)
                {
                  v123 += 7;
                  v31 = v124++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_235;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              LODWORD(v47) = 0;
LABEL_235:
            v142 = 148;
            goto LABEL_244;
          case 'n':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v129 = 0;
            v130 = 0;
            v47 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x10000u;
            while (2)
            {
              v131 = *v21;
              v132 = *(_QWORD *)(v3 + v131);
              v133 = v132 + 1;
              if (v132 == -1 || v133 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v134 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v132);
                *(_QWORD *)(v3 + v131) = v133;
                v47 |= (unint64_t)(v134 & 0x7F) << v129;
                if (v134 < 0)
                {
                  v129 += 7;
                  v31 = v130++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_239;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              LODWORD(v47) = 0;
LABEL_239:
            v142 = 164;
            goto LABEL_244;
          case 'o':
            if ((v8 & 1) == 0)
              goto LABEL_193;
            v135 = 0;
            v136 = 0;
            v47 = 0;
            *(_DWORD *)(a1 + v11[271]) |= 0x20000u;
            while (2)
            {
              v137 = *v21;
              v138 = *(_QWORD *)(v3 + v137);
              v139 = v138 + 1;
              if (v138 == -1 || v139 > *(_QWORD *)(v3 + *v6))
              {
                *(_BYTE *)(v3 + *v22) = 1;
              }
              else
              {
                v140 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v138);
                *(_QWORD *)(v3 + v137) = v139;
                v47 |= (unint64_t)(v140 & 0x7F) << v135;
                if (v140 < 0)
                {
                  v135 += 7;
                  v31 = v136++ >= 9;
                  if (v31)
                  {
                    LODWORD(v47) = 0;
                    goto LABEL_243;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(_BYTE *)(v3 + *v22))
              LODWORD(v47) = 0;
LABEL_243:
            v142 = 168;
            goto LABEL_244;
          default:
            if ((v153 & 1) == 0 || (*(_BYTE *)(a1 + v11[271] + 2) & 0x20) != 0)
              goto LABEL_193;
            if (!*(_QWORD *)(a1 + 16))
            {
              v84 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v85 = *(void **)(a1 + 16);
              *(_QWORD *)(a1 + 16) = v84;

            }
            v86 = PBUnknownFieldAdd();
            v11 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
            v19 = v154;
            v22 = (int *)MEMORY[0x1E0D82BC8];
            if (v86)
              goto LABEL_272;
            v152 = 0;
            goto LABEL_275;
        }
    }
  }
}

unint64_t GEOLocationReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 132))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLocationReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 128) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 132) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLocationReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLocationReadAllFrom_initialTag;
  Specified = GEOLocationReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
  {
    objc_msgSend(*(id *)(a1 + 64), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
    objc_msgSend(*(id *)(a1 + 72), "readAll:", 1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  return Specified;
}

void sub_18962C73C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLocationReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocationReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18962C79C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLocationIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int v82;
  BOOL v83;
  uint64_t v84;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_140;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = *v4;
          v16 = a1[v15];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = *v4;
      v16 = a1[v15];
      if (a1[v15])
        v9 = 0;
LABEL_14:
      v17 = v9 & 7;
      if (v16 || v17 == 4)
        goto LABEL_140;
      switch((v9 >> 3))
      {
        case 1u:
          if (v5 || v17 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_148;
          PBReaderRecallMark();
          v5 = 1;
          goto LABEL_137;
        case 2u:
          if ((v9 & 7) != 0)
            goto LABEL_148;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_135;
            v26 = *(char *)(*(_QWORD *)&a1[*v6] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v27 = v22++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_137;
          }
        case 3u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xCu:
LABEL_25:
          if (v17 != 1)
            goto LABEL_148;
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          if (v20 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_136;
          v21 = v20 + 8;
          if (v21 > *(_QWORD *)&a1[*v3])
            goto LABEL_136;
          *(_QWORD *)&a1[v19] = v21;
          goto LABEL_137;
        case 4u:
          if ((v9 & 7) != 0)
            goto LABEL_148;
          v28 = 0;
          while (1)
          {
            v29 = *v2;
            v30 = *(_QWORD *)&a1[v29];
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
              goto LABEL_135;
            v32 = *(char *)(*(_QWORD *)&a1[*v6] + v30);
            *(_QWORD *)&a1[v29] = v31;
            if (v32 < 0)
            {
              v27 = v28++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_137;
          }
        case 0xAu:
          if ((v9 & 7) != 0)
            goto LABEL_148;
          v33 = 0;
          while (1)
          {
            v34 = *v2;
            v35 = *(_QWORD *)&a1[v34];
            v36 = v35 + 1;
            if (v35 == -1 || v36 > *(_QWORD *)&a1[*v3])
              goto LABEL_135;
            v37 = *(char *)(*(_QWORD *)&a1[*v6] + v35);
            *(_QWORD *)&a1[v34] = v36;
            if (v37 < 0)
            {
              v27 = v33++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_137;
          }
        case 0xBu:
          if (v17 != 2 || !PBReaderPlaceMark() || !GEOCoarseLocationMetadataIsValid(a1))
            goto LABEL_148;
LABEL_102:
          PBReaderRecallMark();
          goto LABEL_137;
        case 0xDu:
          if ((v9 & 7) != 0)
          {
LABEL_148:
            PBReaderRecallMark();
            return 0;
          }
          v38 = 0;
          while (1)
          {
            v39 = *v2;
            v40 = *(_QWORD *)&a1[v39];
            v41 = v40 + 1;
            if (v40 == -1 || v41 > *(_QWORD *)&a1[*v3])
              break;
            v42 = *(char *)(*(_QWORD *)&a1[*v6] + v40);
            *(_QWORD *)&a1[v39] = v41;
            if (v42 < 0)
            {
              v27 = v38++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_137;
          }
LABEL_135:
          v15 = *v4;
LABEL_136:
          a1[v15] = 1;
LABEL_137:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_140;
          break;
        default:
          switch((v9 >> 3))
          {
            case 'e':
            case 'k':
              goto LABEL_25;
            case 'f':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v43 = 0;
              while (1)
              {
                v44 = *v2;
                v45 = *(_QWORD *)&a1[v44];
                v46 = v45 + 1;
                if (v45 == -1 || v46 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v47 = *(char *)(*(_QWORD *)&a1[*v6] + v45);
                *(_QWORD *)&a1[v44] = v46;
                if (v47 < 0)
                {
                  v27 = v43++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'g':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v48 = 0;
              while (1)
              {
                v49 = *v2;
                v50 = *(_QWORD *)&a1[v49];
                v51 = v50 + 1;
                if (v50 == -1 || v51 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v52 = *(char *)(*(_QWORD *)&a1[*v6] + v50);
                *(_QWORD *)&a1[v49] = v51;
                if (v52 < 0)
                {
                  v27 = v48++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'h':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v53 = 0;
              while (1)
              {
                v54 = *v2;
                v55 = *(_QWORD *)&a1[v54];
                v56 = v55 + 1;
                if (v55 == -1 || v56 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v57 = *(char *)(*(_QWORD *)&a1[*v6] + v55);
                *(_QWORD *)&a1[v54] = v56;
                if (v57 < 0)
                {
                  v27 = v53++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'i':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v58 = 0;
              while (1)
              {
                v59 = *v2;
                v60 = *(_QWORD *)&a1[v59];
                v61 = v60 + 1;
                if (v60 == -1 || v61 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v62 = *(char *)(*(_QWORD *)&a1[*v6] + v60);
                *(_QWORD *)&a1[v59] = v61;
                if (v62 < 0)
                {
                  v27 = v58++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'j':
              if (v17 == 2 && PBReaderPlaceMark() && GEOLatLngIsValid(a1))
                goto LABEL_102;
              goto LABEL_148;
            case 'l':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v63 = 0;
              while (1)
              {
                v64 = *v2;
                v65 = *(_QWORD *)&a1[v64];
                v66 = v65 + 1;
                if (v65 == -1 || v66 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v67 = *(char *)(*(_QWORD *)&a1[*v6] + v65);
                *(_QWORD *)&a1[v64] = v66;
                if (v67 < 0)
                {
                  v27 = v63++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'm':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v68 = 0;
              while (1)
              {
                v69 = *v2;
                v70 = *(_QWORD *)&a1[v69];
                v71 = v70 + 1;
                if (v70 == -1 || v71 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v72 = *(char *)(*(_QWORD *)&a1[*v6] + v70);
                *(_QWORD *)&a1[v69] = v71;
                if (v72 < 0)
                {
                  v27 = v68++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'n':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v73 = 0;
              while (1)
              {
                v74 = *v2;
                v75 = *(_QWORD *)&a1[v74];
                v76 = v75 + 1;
                if (v75 == -1 || v76 > *(_QWORD *)&a1[*v3])
                  goto LABEL_135;
                v77 = *(char *)(*(_QWORD *)&a1[*v6] + v75);
                *(_QWORD *)&a1[v74] = v76;
                if (v77 < 0)
                {
                  v27 = v73++ > 8;
                  if (!v27)
                    continue;
                }
                goto LABEL_137;
              }
            case 'o':
              if ((v9 & 7) != 0)
                goto LABEL_148;
              v78 = 0;
              break;
            default:
              if ((PBReaderSkipValueWithTag() & 1) == 0)
                goto LABEL_148;
              goto LABEL_137;
          }
          while (1)
          {
            v79 = *v2;
            v80 = *(_QWORD *)&a1[v79];
            v81 = v80 + 1;
            if (v80 == -1 || v81 > *(_QWORD *)&a1[*v3])
              goto LABEL_135;
            v82 = *(char *)(*(_QWORD *)&a1[*v6] + v80);
            *(_QWORD *)&a1[v79] = v81;
            if (v82 < 0)
            {
              v27 = v78++ > 8;
              if (!v27)
                continue;
            }
            goto LABEL_137;
          }
      }
    }
  }
  v5 = 0;
LABEL_140:
  if (a1[*v4])
    v83 = 1;
  else
    v83 = v5 == 0;
  v84 = !v83;
  PBReaderRecallMark();
  return v84;
}

BOOL GEOLocationIsDirty(os_unfair_lock_s *a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner(a1 + 34);
  v2 = (a1[45]._os_unfair_lock_opaque & 0x3C00000) != 0;
  os_unfair_lock_unlock(a1 + 34);
  return v2;
}

void sub_18962E330(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapRegionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapRegionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18962FA48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapRegionE7ReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  GEOLatLngE7 *v33;
  uint64_t v34;
  _BOOL8 v35;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (!v3[*v6])
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            *(_BYTE *)(a1 + 40) |= 4u;
            v18 = *v4;
            v19 = *(_QWORD *)&v3[v18];
            if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v19 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v19);
              *(_QWORD *)&v3[v18] = v20;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v34 = 32;
            goto LABEL_47;
          case 2u:
            *(_BYTE *)(a1 + 40) |= 8u;
            v24 = *v4;
            v25 = *(_QWORD *)&v3[v24];
            if (v25 <= 0xFFFFFFFFFFFFFFFBLL && (v26 = v25 + 4, v25 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v25);
              *(_QWORD *)&v3[v24] = v26;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v34 = 36;
            goto LABEL_47;
          case 3u:
            *(_BYTE *)(a1 + 40) |= 2u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFFBLL && (v29 = v28 + 4, v28 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v29;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v34 = 28;
            goto LABEL_47;
          case 4u:
            *(_BYTE *)(a1 + 40) |= 1u;
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            if (v31 <= 0xFFFFFFFFFFFFFFFBLL && (v32 = v31 + 4, v31 + 4 <= *(_QWORD *)&v3[*v5]))
            {
              v21 = *(_DWORD *)(*(_QWORD *)&v3[*v7] + v31);
              *(_QWORD *)&v3[v30] = v32;
            }
            else
            {
              v21 = 0;
              v3[*v6] = 1;
            }
            v34 = 24;
LABEL_47:
            *(_DWORD *)(a1 + v34) = v21;
            goto LABEL_48;
          case 5u:
            if ((PBReaderPlaceMark() & 1) == 0)
              goto LABEL_51;
            v33 = objc_alloc_init(GEOLatLngE7);
            if (!GEOLatLngE7ReadAllFrom((uint64_t)v33, v3))
            {

              goto LABEL_51;
            }
            PBReaderRecallMark();
            objc_msgSend((id)a1, "addVertexE7:", v33, 0, 0);

LABEL_48:
            if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
              goto LABEL_49;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v22 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v23 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v22;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_51;
            goto LABEL_48;
        }
      }
    }
LABEL_49:
    v35 = v3[*v6] == 0;
  }
  else
  {
LABEL_51:
    v35 = 0;
  }
  objc_sync_exit(v3);

  return v35;
}

void sub_1896315F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapRegionE7ReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOMapRegionE7ReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189631650(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOMapRegionE7IsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BOOL8 v21;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
        case 2u:
        case 3u:
        case 4u:
          if (v16 != 5)
            goto LABEL_33;
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFFBLL && (v20 = v19 + 4, v20 <= *(_QWORD *)&a1[*v3]))
            *(_QWORD *)&a1[v18] = v20;
          else
            a1[v14] = 1;
          goto LABEL_30;
        case 5u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngE7IsValid(a1))
            goto LABEL_33;
          PBReaderRecallMark();
          goto LABEL_30;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_33:
            PBReaderRecallMark();
            return 0;
          }
LABEL_30:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_31;
          break;
      }
    }
  }
LABEL_31:
  v21 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v21;
}

void sub_189632424(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONameInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  void *v62;
  char v63;
  uint64_t v64;
  __int16 v65;
  int v66;
  __int16 v67;
  void *v68;
  int v70;
  int *v71;
  char v72;
  char v73;
  char v74;
  BOOL v75;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (unsigned __int16)(vaddv_s16((int16x4_t)vand_s8((int8x8_t)vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int16 *)(a1 + 80)), (uint16x4_t)0xFFFCFFF9FFFBFFFALL), (int8x8_t)0x1000100010001))+ ((*(_WORD *)(a1 + 80) >> 3) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v72 = v15;
        v73 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v74 = (v17 == 0) | v16;
        v75 = v16;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_106;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_106:
      v70 = 1;
      goto LABEL_107;
    }
    v31 = v23 >> 3;
    v32 = v75;
    if ((v74 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 80) & 0x20) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
          goto LABEL_80;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v65 = *(_WORD *)(a1 + 80) << 10;
        goto LABEL_105;
      case 2:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 80) & 0x40) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_80;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v65 = *(_WORD *)(a1 + 80) << 9;
        goto LABEL_105;
      case 3:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 80) & 0x80) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
          goto LABEL_80;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_125;
        v65 = *(_WORD *)(a1 + 80) << 8;
        goto LABEL_105;
      case 4:
        if ((v8 & 1) == 0)
          goto LABEL_81;
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 80) |= 2u;
        while (2)
        {
          v45 = *v18;
          v46 = *(_QWORD *)(v3 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v46);
            *(_QWORD *)(v3 + v45) = v47;
            v44 |= (unint64_t)(v48 & 0x7F) << v42;
            if (v48 < 0)
            {
              v42 += 7;
              v28 = v43++ >= 9;
              if (v28)
              {
                LODWORD(v44) = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v44) = 0;
LABEL_87:
        *(_DWORD *)(a1 + 72) = -(v44 & 1) ^ ((int)v44 >> 1);
        goto LABEL_82;
      case 5:
        if ((v8 & 1) == 0)
          goto LABEL_81;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        *(_WORD *)(a1 + 80) |= 1u;
        while (2)
        {
          v52 = *v18;
          v53 = *(_QWORD *)(v3 + v52);
          v54 = v53 + 1;
          if (v53 == -1 || v54 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v55 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v53);
            *(_QWORD *)(v3 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              v28 = v50++ >= 9;
              if (v28)
              {
                LODWORD(v51) = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v51) = 0;
LABEL_91:
        v64 = 68;
        goto LABEL_96;
      case 6:
        if ((v8 & 1) == 0)
          goto LABEL_81;
        v56 = 0;
        v57 = 0;
        v51 = 0;
        *(_WORD *)(a1 + 80) |= 4u;
        while (2)
        {
          v58 = *v18;
          v59 = *(_QWORD *)(v3 + v58);
          v60 = v59 + 1;
          if (v59 == -1 || v60 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v61 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v59);
            *(_QWORD *)(v3 + v58) = v60;
            v51 |= (unint64_t)(v61 & 0x7F) << v56;
            if (v61 < 0)
            {
              v56 += 7;
              v28 = v57++ >= 9;
              if (v28)
              {
                LODWORD(v51) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v51) = 0;
LABEL_95:
        v64 = 76;
LABEL_96:
        *(_DWORD *)(a1 + v64) = v51;
        goto LABEL_82;
      case 7:
        if (!v32)
          goto LABEL_81;
        if ((*(_WORD *)(a1 + 80) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
LABEL_80:
          v62 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          v19 = (int *)MEMORY[0x1E0D82BC8];
          --v9;
          goto LABEL_82;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v65 = *(_WORD *)(a1 + 80) << 11;
LABEL_105:
          v9 += v65 >> 15;
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_82:
          if (!(v73 & 1 | (v9 != 0)))
            goto LABEL_106;
          continue;
        }
LABEL_125:
        v70 = 0;
        v71 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_108:
        if ((v72 & 1) != 0)
LABEL_109:
          *(_WORD *)(a1 + v71[273]) |= 8u;
        if (v75 || (v70 & 1) == 0)
        {
          *(_WORD *)(a1 + v71[273]) |= 0x20u;
          *(_WORD *)(a1 + v71[273]) |= 0x40u;
          *(_WORD *)(a1 + v71[273]) |= 0x80u;
          *(_WORD *)(a1 + v71[273]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            v66 = *v17++;
            v67 = 32;
            switch(v66)
            {
              case 0:
                goto LABEL_118;
              case 1:
                goto LABEL_117;
              case 2:
                v67 = 64;
                goto LABEL_117;
              case 3:
                v67 = 128;
                goto LABEL_117;
              case 7:
                v67 = 16;
LABEL_117:
                *(_WORD *)(a1 + v71[273]) |= v67;
                break;
              default:
                continue;
            }
          }
        }
LABEL_118:
        if (v70)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v75)
        {
          v68 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v72 & 1) == 0 || (*(_WORD *)(a1 + 80) & 8) != 0)
        {
LABEL_81:
          v63 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v63 & 1) != 0)
            goto LABEL_82;
          v70 = 0;
LABEL_107:
          v71 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
          goto LABEL_108;
        }
        if (!*(_QWORD *)(a1 + 16))
        {
          v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v40 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v39;

        }
        v41 = PBUnknownFieldAdd();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v41)
        {
          v70 = 0;
          v71 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
          goto LABEL_109;
        }
        goto LABEL_82;
    }
  }
}

void sub_189632D98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189632ED8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896333D0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189633CF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONameInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEONameInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEONameInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEONameInfoReadAllFrom_initialTag;
  Specified = GEONameInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189633E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEONameInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONameInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189633EDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONameInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_55;
          goto LABEL_51;
        case 2u:
          if (v15 == 2)
            goto LABEL_51;
          goto LABEL_55;
        case 3u:
          if (v15 == 2)
            goto LABEL_51;
          goto LABEL_55;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_55;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_52;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_55;
          v23 = 0;
          while (1)
          {
            v24 = *v2;
            v25 = *(_QWORD *)&a1[v24];
            v26 = v25 + 1;
            if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
              goto LABEL_49;
            v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
            *(_QWORD *)&a1[v24] = v26;
            if (v27 < 0)
            {
              v22 = v23++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_52;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_55;
          v28 = 0;
          break;
        case 7u:
          if (v15 == 2)
            goto LABEL_51;
          goto LABEL_55;
        default:
LABEL_51:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_55:
          v33 = 0;
          goto LABEL_54;
      }
      while (1)
      {
        v29 = *v2;
        v30 = *(_QWORD *)&a1[v29];
        v31 = v30 + 1;
        if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
          break;
        v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
        *(_QWORD *)&a1[v29] = v31;
        if (v32 < 0)
        {
          v22 = v28++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_52;
      }
LABEL_49:
      a1[*v4] = 1;
LABEL_52:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v33 = a1[*v4] == 0;
LABEL_54:
  PBReaderRecallMark();
  return v33;
}

void sub_18963441C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONameInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_WORD *)(a1 + 80) & 0x1F0) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189634850(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189634C98(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONameInfoListReadAllFrom(_QWORD *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEONameInfo *v20;
  id v21;
  void *v22;
  _BOOL8 v23;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_29;
          v20 = objc_alloc_init(GEONameInfo);
          if (!GEONameInfoReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_29;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addNameInfo:", v20, 0, 0);

        }
        else
        {
          if (!a1[1])
          {
            v21 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v22 = (void *)a1[1];
            a1[1] = v21;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_29;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v23 = v5[*v8] == 0;
  }
  else
  {
LABEL_29:
    v23 = 0;
  }
  objc_sync_exit(v5);

  return v23;
}

void sub_189635640(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONameInfoListReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEONameInfoListReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896356A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEONameInfoListIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEONameInfoIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

BOOL GEOPrivacyMetadataReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int *v26;
  id v27;
  void *v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _BOOL8 v47;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 8u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPrivacyMetadata__isUnderageAccount;
                goto LABEL_56;
              }
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                break;
              v18 += 7;
              v25 = v19++ > 8;
              if (v25)
              {
                v20 = 0;
                v26 = &OBJC_IVAR___GEOPrivacyMetadata__isUnderageAccount;
                goto LABEL_59;
              }
            }
            v26 = &OBJC_IVAR___GEOPrivacyMetadata__isUnderageAccount;
            goto LABEL_57;
          case 2u:
            v29 = 0;
            v30 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 1u;
            while (2)
            {
              v31 = *v4;
              v32 = *(_QWORD *)&v3[v31];
              v33 = v32 + 1;
              if (v32 == -1 || v33 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPrivacyMetadata__isManagedAccount;
                goto LABEL_56;
              }
              v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v32);
              *(_QWORD *)&v3[v31] = v33;
              v20 |= (unint64_t)(v34 & 0x7F) << v29;
              if (v34 < 0)
              {
                v29 += 7;
                v25 = v30++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEOPrivacyMetadata__isManagedAccount;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPrivacyMetadata__isManagedAccount;
            goto LABEL_57;
          case 3u:
            v35 = 0;
            v36 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 2u;
            while (2)
            {
              v37 = *v4;
              v38 = *(_QWORD *)&v3[v37];
              v39 = v38 + 1;
              if (v38 == -1 || v39 > *(_QWORD *)&v3[*v5])
              {
                v26 = &OBJC_IVAR___GEOPrivacyMetadata__isMismatchedStorefrontDeviceRegion;
                goto LABEL_56;
              }
              v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v38);
              *(_QWORD *)&v3[v37] = v39;
              v20 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v25 = v36++ > 8;
                if (v25)
                {
                  v20 = 0;
                  v26 = &OBJC_IVAR___GEOPrivacyMetadata__isMismatchedStorefrontDeviceRegion;
                  goto LABEL_59;
                }
                continue;
              }
              break;
            }
            v26 = &OBJC_IVAR___GEOPrivacyMetadata__isMismatchedStorefrontDeviceRegion;
            goto LABEL_57;
          case 4u:
            v41 = 0;
            v42 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 20) |= 4u;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v28 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v27;

            }
            if ((PBUnknownFieldAdd() & 1) == 0)
              goto LABEL_67;
            continue;
        }
        while (1)
        {
          v43 = *v4;
          v44 = *(_QWORD *)&v3[v43];
          v45 = v44 + 1;
          if (v44 == -1 || v45 > *(_QWORD *)&v3[*v5])
            break;
          v46 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v44);
          *(_QWORD *)&v3[v43] = v45;
          v20 |= (unint64_t)(v46 & 0x7F) << v41;
          if ((v46 & 0x80) == 0)
          {
            v26 = &OBJC_IVAR___GEOPrivacyMetadata__isSharedIpadForEducation;
            goto LABEL_57;
          }
          v41 += 7;
          v25 = v42++ > 8;
          if (v25)
          {
            v20 = 0;
            v26 = &OBJC_IVAR___GEOPrivacyMetadata__isSharedIpadForEducation;
            goto LABEL_59;
          }
        }
        v26 = &OBJC_IVAR___GEOPrivacyMetadata__isSharedIpadForEducation;
LABEL_56:
        v3[*v6] = 1;
LABEL_57:
        if (v3[*v6])
          v20 = 0;
LABEL_59:
        *(_BYTE *)(a1 + *v26) = v20 != 0;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v47 = v3[*v6] == 0;
  }
  else
  {
LABEL_67:
    v47 = 0;
  }
  objc_sync_exit(v3);

  return v47;
}

void sub_189636ADC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPrivacyMetadataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPrivacyMetadataReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189636B3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPrivacyMetadataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  _BOOL8 v37;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v16 = 0;
          while (1)
          {
            v17 = *v2;
            v18 = *(_QWORD *)&a1[v17];
            v19 = v18 + 1;
            if (v18 == -1 || v19 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v20 = *(char *)(*(_QWORD *)&a1[*v5] + v18);
            *(_QWORD *)&a1[v17] = v19;
            if (v20 < 0)
            {
              v21 = v16++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v22 = 0;
          while (1)
          {
            v23 = *v2;
            v24 = *(_QWORD *)&a1[v23];
            v25 = v24 + 1;
            if (v24 == -1 || v25 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v26 = *(char *)(*(_QWORD *)&a1[*v5] + v24);
            *(_QWORD *)&a1[v23] = v25;
            if (v26 < 0)
            {
              v21 = v22++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v27 = 0;
          while (1)
          {
            v28 = *v2;
            v29 = *(_QWORD *)&a1[v28];
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
              goto LABEL_53;
            v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
            *(_QWORD *)&a1[v28] = v30;
            if (v31 < 0)
            {
              v21 = v27++ > 8;
              if (!v21)
                continue;
            }
            goto LABEL_54;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_57;
          v32 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_57:
          v37 = 0;
          goto LABEL_56;
      }
      while (1)
      {
        v33 = *v2;
        v34 = *(_QWORD *)&a1[v33];
        v35 = v34 + 1;
        if (v34 == -1 || v35 > *(_QWORD *)&a1[*v3])
          break;
        v36 = *(char *)(*(_QWORD *)&a1[*v5] + v34);
        *(_QWORD *)&a1[v33] = v35;
        if (v36 < 0)
        {
          v21 = v32++ > 8;
          if (!v21)
            continue;
        }
        goto LABEL_54;
      }
LABEL_53:
      a1[*v4] = 1;
LABEL_54:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v37 = a1[*v4] == 0;
LABEL_56:
  PBReaderRecallMark();
  return v37;
}

BOOL GEORoadAccessPointReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEORoadAccessPointReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189638C58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOScreenDimensionReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  void *v24;
  int *v25;
  _BOOL8 v26;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_37;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_37;
        if ((v10 >> 3) == 2)
          break;
        if ((v10 >> 3) == 1)
        {
          *(_BYTE *)(a1 + 32) |= 2u;
          v18 = *v4;
          v19 = *(_QWORD *)&v3[v18];
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)&v3[*v5])
          {
            v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v19);
            *(_QWORD *)&v3[v18] = v19 + 8;
          }
          else
          {
            v3[*v6] = 1;
            v20 = 0;
          }
          v25 = &OBJC_IVAR___GEOScreenDimension__width;
LABEL_35:
          *(_QWORD *)(a1 + *v25) = v20;
          goto LABEL_36;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v23 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v24 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v23;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_38;
LABEL_36:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_37;
      }
      *(_BYTE *)(a1 + 32) |= 1u;
      v21 = *v4;
      v22 = *(_QWORD *)&v3[v21];
      if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(_QWORD *)&v3[*v5])
      {
        v20 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v22);
        *(_QWORD *)&v3[v21] = v22 + 8;
      }
      else
      {
        v3[*v6] = 1;
        v20 = 0;
      }
      v25 = &OBJC_IVAR___GEOScreenDimension__height;
      goto LABEL_35;
    }
LABEL_37:
    v26 = v3[*v6] == 0;
  }
  else
  {
LABEL_38:
    v26 = 0;
  }
  objc_sync_exit(v3);

  return v26;
}

void sub_189639B00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOScreenDimensionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOScreenDimensionReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189639B60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOScreenResolutionDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOScreenResolutionDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOScreenResolution<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOScreenResolutionDictionaryRepresentation(uint64_t a1)
{
  void *v2;
  char v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *(_BYTE *)(a1 + 16);
  if ((v3 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("height"));

    v3 = *(_BYTE *)(a1 + 16);
  }
  if ((v3 & 2) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 8));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("width"));

  }
  return v2;
}

void _GEOScreenResolutionFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("width"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 16) |= 2u;
    objc_msgSend(v4, "doubleValue");
    *(_QWORD *)(a2 + 8) = v5;
  }

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("height"));
  v7 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 16) |= 1u;
    objc_msgSend(v7, "doubleValue");
    *(_QWORD *)a2 = v6;
  }

}

uint64_t GEOScreenResolutionReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOScreenResolutionReadAllFrom(a1, a2);
}

uint64_t GEOScreenResolutionReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v24 = 0;
        }
        *(_QWORD *)a1 = v24;
      }
      else if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 2u;
        v19 = *v3;
        v20 = *(_QWORD *)(a2 + v19);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
          *(_QWORD *)(a2 + v19) = v20 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v21 = 0;
        }
        *(_QWORD *)(a1 + 8) = v21;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEOScreenResolutionHash()
{
  return PBHashBytes();
}

id GEOSessionIDDescription(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOSessionIDDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOSessionID<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOSessionIDDictionaryRepresentation(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", *a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("high"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLongLong:", a1[1]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("low"));

  return v2;
}

void _GEOSessionIDFromDictionaryRepresentation(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = a1;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("low"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    a2[1] = objc_msgSend(v4, "unsignedLongLongValue");

  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("high"));
  v5 = (id)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    *a2 = objc_msgSend(v5, "unsignedLongLongValue");

}

uint64_t GEOSessionIDReadFrom(_QWORD *a1, uint64_t a2)
{
  return GEOSessionIDReadAllFrom(a1, a2);
}

uint64_t GEOSessionIDWriteTo()
{
  PBDataWriterWriteUint64Field();
  return PBDataWriterWriteUint64Field();
}

BOOL GEOSessionIDEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t GEOSessionIDHash()
{
  return PBHashBytes();
}

uint64_t GEOSessionIDIsValid(void *a1)
{
  uint64_t v2;
  _QWORD v4[4];

  v4[2] = objc_msgSend(a1, "position");
  v4[3] = objc_msgSend(a1, "length");
  v2 = GEOSessionIDReadAllFrom(v4, (uint64_t)a1);
  PBReaderRecallMark();
  return v2;
}

BOOL GEOSlippyTileReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  void *v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_59;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_59;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOSlippyTile__z;
              goto LABEL_51;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOSlippyTile__z;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOSlippyTile__z;
LABEL_50:
          v3[*v6] = 1;
          goto LABEL_51;
        }
        if ((_DWORD)v18 == 2)
          break;
        if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOSlippyTile__x;
              goto LABEL_50;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOSlippyTile__x;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOSlippyTile__x;
          goto LABEL_51;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v41 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v40;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_60;
LABEL_54:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_59;
      }
      v34 = 0;
      v35 = 0;
      v21 = 0;
      *(_BYTE *)(a1 + 28) |= 2u;
      while (1)
      {
        v36 = *v4;
        v37 = *(_QWORD *)&v3[v36];
        v38 = v37 + 1;
        if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
        {
          v27 = &OBJC_IVAR___GEOSlippyTile__y;
          goto LABEL_50;
        }
        v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
        *(_QWORD *)&v3[v36] = v38;
        v21 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0)
          break;
        v34 += 7;
        v26 = v35++ > 8;
        if (v26)
        {
          LODWORD(v21) = 0;
          v27 = &OBJC_IVAR___GEOSlippyTile__y;
          goto LABEL_53;
        }
      }
      v27 = &OBJC_IVAR___GEOSlippyTile__y;
LABEL_51:
      if (v3[*v6])
        LODWORD(v21) = 0;
LABEL_53:
      *(_DWORD *)(a1 + *v27) = v21;
      goto LABEL_54;
    }
LABEL_59:
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_60:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_18963B058(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSlippyTileReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSlippyTileReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18963B0B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSlippyTileIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  _BOOL8 v33;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_48;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v14 || (v8 & 7) == 4)
        goto LABEL_48;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v28 = 0;
        while (1)
        {
          v29 = *v2;
          v30 = *(_QWORD *)&a1[v29];
          v31 = v30 + 1;
          if (v30 == -1 || v31 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          v32 = *(char *)(*(_QWORD *)&a1[*v5] + v30);
          *(_QWORD *)&a1[v29] = v31;
          if (v32 < 0)
          {
            v22 = v28++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
      }
      if ((_DWORD)v16 == 1)
      {
        if ((v8 & 7) != 0)
          goto LABEL_50;
        v17 = 0;
        while (1)
        {
          v18 = *v2;
          v19 = *(_QWORD *)&a1[v18];
          v20 = v19 + 1;
          if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
            break;
          v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
          *(_QWORD *)&a1[v18] = v20;
          if (v21 < 0)
          {
            v22 = v17++ > 8;
            if (!v22)
              continue;
          }
          goto LABEL_47;
        }
LABEL_45:
        a1[*v4] = 1;
        goto LABEL_47;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_50:
        v33 = 0;
        goto LABEL_49;
      }
LABEL_47:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_48;
    }
    if ((v8 & 7) != 0)
      goto LABEL_50;
    v23 = 0;
    while (1)
    {
      v24 = *v2;
      v25 = *(_QWORD *)&a1[v24];
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
        goto LABEL_45;
      v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
      *(_QWORD *)&a1[v24] = v26;
      if (v27 < 0)
      {
        v22 = v23++ > 8;
        if (!v22)
          continue;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  v33 = a1[*v4] == 0;
LABEL_49:
  PBReaderRecallMark();
  return v33;
}

BOOL GEOStructuredAddressReadFrom(_QWORD *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOStructuredAddressReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18963CE3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSubPremiseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  _BOOL4 v31;
  _BOOL8 v32;
  _QWORD v34[2];

  v34[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v34[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v31 = 0;
  }
  else
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        v21 = 0;
        v22 = 1;
        while (1)
        {
          v23 = v22;
          v24 = *((_DWORD *)v34 + v21);
          if (!v24)
            break;
          if (v24 != 1)
          {
            v22 = 0;
            v21 = 1;
            if ((v23 & 1) != 0)
              continue;
          }
          goto LABEL_49;
        }
        *((_DWORD *)v34 + v21) = 1;
        if (v15)
        {
LABEL_49:
          PBReaderRecallMark();
          return 0;
        }
        v25 = 0;
        while (1)
        {
          v26 = *v2;
          v27 = *(_QWORD *)&a1[v26];
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
            break;
          v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
          *(_QWORD *)&a1[v26] = v28;
          if (v29 < 0 && v25++ <= 8)
            continue;
          goto LABEL_33;
        }
        a1[*v4] = 1;
      }
      else
      {
        if ((v8 >> 3) == 2)
        {
          v17 = 0;
          v18 = 1;
          while (1)
          {
            v19 = v18;
            v20 = *((_DWORD *)v34 + v17);
            if (!v20)
              break;
            if (v20 != 2)
            {
              v18 = 0;
              v17 = 1;
              if ((v19 & 1) != 0)
                continue;
            }
            goto LABEL_49;
          }
          *((_DWORD *)v34 + v17) = 2;
          if (v15 != 2)
            goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_49;
      }
LABEL_33:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
    v31 = HIDWORD(v34[0]) != 0;
  }
  if (a1[*v4])
    v32 = 0;
  else
    v32 = v31;
  PBReaderRecallMark();
  return v32;
}

BOOL GEOSubPremiseReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  _BOOL8 v29;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 2)
        {
          PBReaderReadString();
          v25 = objc_claimAutoreleasedReturnValue();
          v26 = *(void **)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v25;

        }
        else if ((v10 >> 3) == 1)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v21 = *v4;
            v22 = *(_QWORD *)&v3[v21];
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
              break;
            v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
            *(_QWORD *)&v3[v21] = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_34;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_36;
            }
          }
          v3[*v6] = 1;
LABEL_34:
          if (v3[*v6])
            LODWORD(v20) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 24) = v20;
        }
        else
        {
          if (!*(_QWORD *)(a1 + 8))
          {
            v27 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v28 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v27;

          }
          if (!PBUnknownFieldAdd())
            goto LABEL_39;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v29 = v3[*v6] == 0;
  }
  else
  {
LABEL_39:
    v29 = 0;
  }
  objc_sync_exit(v3);

  return v29;
}

void sub_18963E63C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOSubPremiseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOSubPremiseReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18963E69C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18963EB74(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTextLinkReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  void *v41;
  GEOLocalizedString *v42;
  id v43;
  void *v44;
  int v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  int v52;
  int *v53;
  char v54;
  char v55;
  char v56;
  BOOL v57;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v12;
        v13 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
        v13 = v7;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v8;
        v18 = v16 | v11;
        v54 = v17;
        v19 = v18 | v17;
        if (((v18 | v9) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v57 = v18;
        v55 = v19;
        v56 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
        v14 = v8;
LABEL_8:
        v15 = v11;
LABEL_10:
        ++v10;
        v7 = v13;
        v8 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_64;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_64:
      v52 = 1;
      goto LABEL_65;
    }
    v34 = v26 >> 3;
    v35 = v57;
    if ((v56 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35)
      {
        if ((*(_BYTE *)(a1 + 52) & 4) == 0)
        {
          PBReaderReadString();
          v40 = objc_claimAutoreleasedReturnValue();
          v41 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v40;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_84;
        v47 = 32 * *(_BYTE *)(a1 + 52);
        goto LABEL_61;
      }
    }
    else if ((v54 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v43 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v44 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v43;

      }
      v45 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v45)
      {
        v52 = 0;
        v53 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_67;
      }
      goto LABEL_63;
    }
LABEL_55:
    v46 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v46 & 1) == 0)
    {
      v52 = 0;
LABEL_65:
      v53 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_66;
    }
LABEL_63:
    if (!(v55 & 1 | (v10 != 0)))
      goto LABEL_64;
  }
  if (!v35)
    goto LABEL_55;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_84;
    v47 = *(_BYTE *)(a1 + 52) << 6;
LABEL_61:
    v10 += v47 >> 7;
    goto LABEL_62;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_84;
  v42 = objc_alloc_init(GEOLocalizedString);
  if (GEOLocalizedStringReadAllFrom((uint64_t)v42, (void *)v3, v7 & 1))
  {
    PBReaderRecallMark();
    v41 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v42;
LABEL_48:

    --v10;
LABEL_62:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_63;
  }

LABEL_84:
  v52 = 0;
  v53 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_66:
  if ((v54 & 1) == 0)
    goto LABEL_68;
LABEL_67:
  *(_BYTE *)(a1 + v53[275]) |= 1u;
LABEL_68:
  if (v57 || (v52 & 1) == 0)
  {
    *(_BYTE *)(a1 + v53[275]) |= 4u;
    *(_BYTE *)(a1 + v53[275]) |= 2u;
    goto LABEL_77;
  }
  if (v20)
  {
    while (2)
    {
      while (1)
      {
        v49 = *v20++;
        v48 = v49;
        if (v49 == 1)
          break;
        if (v48 == 2)
          goto LABEL_76;
        if (!v48)
          goto LABEL_77;
      }
      LOBYTE(v48) = 4;
LABEL_76:
      *(_BYTE *)(a1 + v53[275]) |= v48;
      continue;
    }
  }
LABEL_77:
  if (v52)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v57)
  {
    v50 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18963F1E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18963F754(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTextLinkReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOTextLinkReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOTextLinkReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOTextLinkReadAllFrom_initialTag;
  Specified = GEOTextLinkReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18963F8F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOTextLinkReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTextLinkReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18963F954(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTextLinkIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 2)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
          goto LABEL_29;
        PBReaderRecallMark();
      }
      else if ((v8 >> 3) == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_29:
        PBReaderRecallMark();
        return 0;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_18963FCB8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL _GEOTextLinkIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 52) & 0xC) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 52) & 2) != 0)
    return GEOLocalizedStringIsDirty(*(_QWORD *)(a1 + 24));
  return 0;
}

os_unfair_lock_s *GEOTextLinkIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  _BOOL8 IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOTextLinkIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18963FFB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896401E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileCoordinateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  unint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  id v40;
  void *v41;
  _BOOL8 v42;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      while (1)
      {
        if (v3[*v6])
          goto LABEL_59;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          goto LABEL_59;
        v18 = v10 >> 3;
        if ((v10 >> 3) == 3)
        {
          v28 = 0;
          v29 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 4u;
          while (1)
          {
            v30 = *v4;
            v31 = *(_QWORD *)&v3[v30];
            v32 = v31 + 1;
            if (v31 == -1 || v32 > *(_QWORD *)&v3[*v5])
              break;
            v33 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v31);
            *(_QWORD *)&v3[v30] = v32;
            v21 |= (unint64_t)(v33 & 0x7F) << v28;
            if ((v33 & 0x80) == 0)
            {
              v27 = &OBJC_IVAR___GEOTileCoordinate__zoom;
              goto LABEL_51;
            }
            v28 += 7;
            v26 = v29++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOTileCoordinate__zoom;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOTileCoordinate__zoom;
LABEL_50:
          v3[*v6] = 1;
          goto LABEL_51;
        }
        if ((_DWORD)v18 == 2)
          break;
        if ((_DWORD)v18 == 1)
        {
          v19 = 0;
          v20 = 0;
          v21 = 0;
          *(_BYTE *)(a1 + 28) |= 1u;
          while (1)
          {
            v22 = *v4;
            v23 = *(_QWORD *)&v3[v22];
            v24 = v23 + 1;
            if (v23 == -1 || v24 > *(_QWORD *)&v3[*v5])
            {
              v27 = &OBJC_IVAR___GEOTileCoordinate__x;
              goto LABEL_50;
            }
            v25 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v23);
            *(_QWORD *)&v3[v22] = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0)
              break;
            v19 += 7;
            v26 = v20++ > 8;
            if (v26)
            {
              LODWORD(v21) = 0;
              v27 = &OBJC_IVAR___GEOTileCoordinate__x;
              goto LABEL_53;
            }
          }
          v27 = &OBJC_IVAR___GEOTileCoordinate__x;
          goto LABEL_51;
        }
        if (!*(_QWORD *)(a1 + 8))
        {
          v40 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
          v41 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v40;

        }
        if ((PBUnknownFieldAdd() & 1) == 0)
          goto LABEL_60;
LABEL_54:
        if (*(_QWORD *)&v3[*v4] >= *(_QWORD *)&v3[*v5])
          goto LABEL_59;
      }
      v34 = 0;
      v35 = 0;
      v21 = 0;
      *(_BYTE *)(a1 + 28) |= 2u;
      while (1)
      {
        v36 = *v4;
        v37 = *(_QWORD *)&v3[v36];
        v38 = v37 + 1;
        if (v37 == -1 || v38 > *(_QWORD *)&v3[*v5])
        {
          v27 = &OBJC_IVAR___GEOTileCoordinate__y;
          goto LABEL_50;
        }
        v39 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v37);
        *(_QWORD *)&v3[v36] = v38;
        v21 |= (unint64_t)(v39 & 0x7F) << v34;
        if ((v39 & 0x80) == 0)
          break;
        v34 += 7;
        v26 = v35++ > 8;
        if (v26)
        {
          LODWORD(v21) = 0;
          v27 = &OBJC_IVAR___GEOTileCoordinate__y;
          goto LABEL_53;
        }
      }
      v27 = &OBJC_IVAR___GEOTileCoordinate__y;
LABEL_51:
      if (v3[*v6])
        LODWORD(v21) = 0;
LABEL_53:
      *(_DWORD *)(a1 + *v27) = v21;
      goto LABEL_54;
    }
LABEL_59:
    v42 = v3[*v6] == 0;
  }
  else
  {
LABEL_60:
    v42 = 0;
  }
  objc_sync_exit(v3);

  return v42;
}

void sub_189640CA4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOTileCoordinateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOTileCoordinateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189640D04(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPolygonFeatureContains(float *a1, float a2, float a3)
{
  _DWORD *v3;
  char v4;
  uint64_t v5;
  float v6;
  float v7;
  char v8;
  _DWORD v10[2];

  *(float *)v10 = a2;
  *(float *)&v10[1] = a3;
  v3 = geo::codec::multiSectionFeatureBounds(a1);
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v6 = *(float *)&v10[v5];
    if (v6 < *(float *)&v3[v5])
      break;
    v7 = *(float *)&v3[v5 + 2];
    v5 = 1;
    v8 = (v6 < v7) & ~v4;
    v4 = 1;
    if ((v8 & 1) == 0)
      return v6 < v7;
  }
  return 0;
}

void GEONetworkLoadLoopRun(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  id v4;

  v1 = qword_1ECDBC798;
  v2 = a1;
  v4 = v2;
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1ECDBC798, &__block_literal_global_167);
    v3 = v4;
  }
  dispatch_async((dispatch_queue_t)_MergedGlobals_304, v3);

}

BOOL _GEOMapDataSubscriptionIdentifierIsCompatible(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char v6;
  _BOOL8 v7;

  v3 = a1;
  v4 = a2;
  v7 = 1;
  if ((objc_msgSend(v3, "isEqualToString:", v4) & 1) == 0
    && (objc_msgSend(v3, "isEqualToString:", CFSTR("*")) & 1) == 0)
  {
    if (!objc_msgSend(v3, "hasSuffix:", CFSTR("*"))
      || (objc_msgSend(v3, "substringToIndex:", objc_msgSend(v3, "length") - 1),
          v5 = (void *)objc_claimAutoreleasedReturnValue(),
          v6 = objc_msgSend(v4, "hasPrefix:", v5),
          v5,
          (v6 & 1) == 0))
    {
      v7 = 0;
    }
  }

  return v7;
}

void sub_189643674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_189643A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189643C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1896445F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_189644B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_189644CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1896450C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_18964516C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1896451C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_189645234(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1896452AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18964537C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_189645454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1896458F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_189645BE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id GEOGetStringConditionEvaluatorLog()
{
  if (qword_1ECDBC7C0 != -1)
    dispatch_once(&qword_1ECDBC7C0, &__block_literal_global_169);
  return (id)_MergedGlobals_306;
}

void sub_189647B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_189647E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  if (v11)
    operator delete(v11);

  _Unwind_Resume(a1);
}

void sub_18964807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:

  _Unwind_Resume(a1);
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::enumerate(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;
  __int128 v6;
  id *v7;
  id *j;
  id v9;
  uint64_t v10;
  id v11;
  id *v12;
  uint64_t v13;
  id v14;
  id v15;

  v11 = &v11;
  v12 = &v11;
  v13 = 0;
  std::mutex::lock((std::mutex *)a1);
  geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_prune(a1);
  for (i = *(_QWORD *)(a1 + 72); i != a1 + 64; i = *(_QWORD *)(i + 8))
  {
    v5 = operator new(0x38uLL);
    *(_QWORD *)v5 = 0;
    *((_QWORD *)v5 + 1) = 0;
    v6 = *(_OWORD *)(i + 32);
    *((_OWORD *)v5 + 1) = *(_OWORD *)(i + 16);
    *((_OWORD *)v5 + 2) = v6;
    objc_copyWeak((id *)v5 + 6, (id *)(i + 48));
    v7 = v12;
    *(_QWORD *)v5 = &v11;
    *((_QWORD *)v5 + 1) = v7;
    *v7 = v5;
    v12 = (id *)v5;
    ++v13;
  }
  std::mutex::unlock((std::mutex *)a1);
  for (j = v12; j != &v11; j = (id *)j[1])
  {
    v9 = j[5];
    v10 = *(_QWORD *)(a2 + 24);
    v15 = j[4];
    v14 = v9;
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, id *, id *, id *, id *))(*(_QWORD *)v10 + 48))(v10, j + 2, j + 6, &v15, &v14);
  }
  std::__list_imp<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::clear(&v11);
}

void sub_1896481D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::clear((id *)va);
  _Unwind_Resume(a1);
}

void sub_189648530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v22;
  uint64_t v23;

  std::__list_imp<std::__list_iterator<LoadItem,void *>>::clear(&a10);
  v22 = a21;
  if (a21 == &a18)
  {
    v23 = 4;
    v22 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:

  _Unwind_Resume(a1);
}

void std::__list_imp<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::clear(id *a1)
{
  _QWORD **v2;
  id *v3;
  _QWORD *v4;
  id *v5;

  if (a1[2])
  {
    v2 = (_QWORD **)*a1;
    v3 = (id *)a1[1];
    v4 = *v3;
    v4[1] = *((_QWORD *)*a1 + 1);
    *v2[1] = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (id *)v3[1];
        objc_storeWeak(v3 + 6, 0);
        objc_destroyWeak(v3 + 6);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,objc_object * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__emplace_unique_key_args<_GEOTileKey,std::piecewise_construct_t const&,std::tuple<_GEOTileKey const&>,std::tuple<>>(float *a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  int8x8_t prime;
  void *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint8x8_t v26;
  unint64_t v27;
  uint8x8_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  _QWORD *v36;

  v7 = GEOTileKeyHash(a2);
  v8 = v7;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == *a2 && i[3] == a2[1])
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x28uLL);
  *i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  v15 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v16 = a1[8];
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      prime = (int8x8_t)v19;
    else
      prime = (int8x8_t)v18;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_34;
    if (*(_QWORD *)&prime < v9)
    {
      v27 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v28 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v28.i16[0] = vaddlv_u8(v28), v28.u32[0] > 1uLL))
      {
        v27 = std::__next_prime(v27);
      }
      else
      {
        v29 = 1 << -(char)__clz(v27 - 1);
        if (v27 >= 2)
          v27 = v29;
      }
      if (*(_QWORD *)&prime <= v27)
        prime = (int8x8_t)v27;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_34:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v21 = operator new(8 * *(_QWORD *)&prime);
          v22 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v21;
          if (v22)
            operator delete(v22);
          v23 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23++) = 0;
          while (*(_QWORD *)&prime != v23);
          v24 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v24)
          {
            v25 = v24[1];
            v26 = (uint8x8_t)vcnt_s8(prime);
            v26.i16[0] = vaddlv_u8(v26);
            if (v26.u32[0] > 1uLL)
            {
              if (v25 >= *(_QWORD *)&prime)
                v25 %= *(_QWORD *)&prime;
            }
            else
            {
              v25 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = a1 + 4;
            v30 = (_QWORD *)*v24;
            if (*v24)
            {
              do
              {
                v31 = v30[1];
                if (v26.u32[0] > 1uLL)
                {
                  if (v31 >= *(_QWORD *)&prime)
                    v31 %= *(_QWORD *)&prime;
                }
                else
                {
                  v31 &= *(_QWORD *)&prime - 1;
                }
                if (v31 != v25)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v31))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v24;
                    goto LABEL_59;
                  }
                  *v24 = *v30;
                  *v30 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v31);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v31) = v30;
                  v30 = v24;
                }
                v31 = v25;
LABEL_59:
                v24 = v30;
                v30 = (_QWORD *)*v30;
                v25 = v31;
              }
              while (v30);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_63;
        }
        v36 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v36)
          operator delete(v36);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_63:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v32 = *(_QWORD **)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v33)
  {
    *i = *v33;
LABEL_76:
    *v33 = i;
    goto LABEL_77;
  }
  *i = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = i;
  v32[v3] = a1 + 4;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v34 >= v9)
        v34 %= v9;
    }
    else
    {
      v34 &= v9 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_76;
  }
LABEL_77:
  ++*((_QWORD *)a1 + 3);
  return i;
}

void sub_189648EA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_removeForKey(int64x2_t *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  id location;

  v3 = &a1[5].i64[1];
  v4 = std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::find<_GEOTileKey>(&a1[5].i64[1], a2);
  if (v4)
  {
    v5 = v4;
    v6 = v4[4];
    location = 0;
    geo::_geo_weak_ptr<GEOTileData * {__strong}>::operator=((id *)(v6 + 48), &location);
    objc_storeWeak(&location, 0);
    objc_destroyWeak(&location);
    v7 = a1[9];
    v8.i64[0] = -1;
    v8.i64[1] = -1;
    v9.i64[1] = -1;
    v9.i64[0] = *(_QWORD *)(v6 + 40);
    v9.i64[0] = vsubq_s64(v7, v9).u64[0];
    v9.i64[1] = vaddq_s64(v7, v8).i64[1];
    a1[9] = v9;
    std::list<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::erase((uint64_t)a1[4].i64, (char *)v6);
    std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::erase(v3, v5);
  }
}

void std::list<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>>::erase(uint64_t a1, char *a2)
{
  uint64_t v3;
  id *v4;

  v3 = *(_QWORD *)a2;
  *(_QWORD *)(v3 + 8) = *((_QWORD *)a2 + 1);
  **((_QWORD **)a2 + 1) = v3;
  --*(_QWORD *)(a1 + 16);
  v4 = (id *)(a2 + 48);
  objc_storeWeak((id *)a2 + 6, 0);
  objc_destroyWeak(v4);
  operator delete(a2);
}

void std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>,std::equal_to<_GEOTileKey>,std::hash<_GEOTileKey>,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<geo::detail::_CacheItem<_GEOTileKey,GEOTileData * {__strong},geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::_value_ptr>,void *>>>>::__erase_unique<_GEOTileKey>(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;

  v3 = std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::find<_GEOTileKey>(a1, a2);
  if (v3)
    std::__hash_table<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,std::__unordered_map_hasher<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,hashkey,eqkey,true>,std::__unordered_map_equal<_GEOTileKey,std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>,eqkey,hashkey,true>,std::allocator<std::__hash_value_type<_GEOTileKey,std::__list_iterator<CacheItem,void *>>>>::erase(a1, v3);
}

void sub_1896490AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFAC80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFAC80;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::operator()(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  __n128 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v15 = *a4;
  v14 = v6;
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t, __n128 *, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, a2, a3, &v15, &v14))
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (__n128 *)operator new(0x20uLL);
    result = *a2;
    v11[1] = *a2;
    v11->n128_u64[0] = v10;
    v12 = *(__n128 ***)(v10 + 8);
    v11->n128_u64[1] = (unint64_t)v12;
    *v12 = v11;
    v13 = *(_QWORD *)(v10 + 16) + 1;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = v13;
  }
  return result;
}

uint64_t std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,GEOTileData * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<GEOTileData * {__strong}> const&,double,unsigned long)>::target_type()
{
}

void sub_189649350(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::~__func()
{
  JUMPOUT(0x18D76437CLL);
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E1BFACD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E1BFACD8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::operator()(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  __n128 result;
  unint64_t v10;
  __n128 *v11;
  __n128 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a5;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  v15 = *a4;
  v14 = v6;
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t, __n128 *, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v7 + 48))(v7, a2, a3, &v15, &v14))
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (__n128 *)operator new(0x20uLL);
    result = *a2;
    v11[1] = *a2;
    v11->n128_u64[0] = v10;
    v12 = *(__n128 ***)(v10 + 8);
    v11->n128_u64[1] = (unint64_t)v12;
    *v12 = v11;
    v13 = *(_QWORD *)(v10 + 16) + 1;
    *(_QWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 16) = v13;
  }
  return result;
}

uint64_t std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1},std::allocator<geo::detail::_GEOGenericContainer<_GEOTileKey,objc_object * {__strong},std::hash<_GEOTileKey>,std::equal_to<_GEOTileKey>,geo::GEOGenericContainerWeakReferenceTag,0ul,0ul,geo::GEOGenericContainerLockingTag,geo::detail::_default_pointer_type>::removeAllMatchingPredicate(std::function<BOOL ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>)::{lambda(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)#1}>,void ()(_GEOTileKey const&,geo::_geo_weak_ptr<objc_object * {__strong}> const&,double,unsigned long)>::target_type()
{
}

void sub_1896495F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL GEOLocationShiftRequestReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  _BOOL8 v18;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark() || (GEOPixelPointReadAllFrom(a1 + 8, (uint64_t)v3) & 1) == 0)
            goto LABEL_26;
          PBReaderRecallMark();
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v18 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v18 = 0;
  }
  objc_sync_exit(v3);

  return v18;
}

void sub_189649A48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationShiftRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocationShiftRequestReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189649AA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLocationShiftRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 1)
      {
        if (v5 || v16 != 2 || !PBReaderPlaceMark() || !GEOPixelPointIsValid(a1))
        {
LABEL_35:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
        v5 = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_35;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v18 = 1;
  else
    v18 = v5 == 0;
  v19 = !v18;
  PBReaderRecallMark();
  return v19;
}

uint64_t GEOPixelPointIsValid(void *a1)
{
  uint64_t AllFrom;
  _QWORD v4[5];

  v4[3] = objc_msgSend(a1, "position");
  v4[4] = objc_msgSend(a1, "length");
  memset(v4, 0, 24);
  AllFrom = GEOPixelPointReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

uint64_t GEOPixelPointWriteTo(uint64_t a1)
{
  uint64_t result;

  PBDataWriterWriteDoubleField();
  result = PBDataWriterWriteDoubleField();
  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    return PBDataWriterWriteInt32Field();
  return result;
}

BOOL GEOPixelPointEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL GEOLocationShiftResponseReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  _BOOL8 v18;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if (!PBReaderPlaceMark() || (GEOPixelPointReadAllFrom(a1 + 8, (uint64_t)v3) & 1) == 0)
            goto LABEL_26;
          PBReaderRecallMark();
        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_26;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v18 = v3[*v6] == 0;
  }
  else
  {
LABEL_26:
    v18 = 0;
  }
  objc_sync_exit(v3);

  return v18;
}

void sub_18964A3BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLocationShiftResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLocationShiftResponseReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18964A41C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOLocationShiftResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 1)
      {
        if (v5 || v16 != 2 || !PBReaderPlaceMark() || !GEOPixelPointIsValid(a1))
        {
LABEL_35:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
        v5 = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_35;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v18 = 1;
  else
    v18 = v5 == 0;
  v19 = !v18;
  PBReaderRecallMark();
  return v19;
}

id GEOPixelPointDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOPixelPointDictionaryRepresentation(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOPixelPoint<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOPixelPointDictionaryRepresentation(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v3, CFSTR("x"));

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 8));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setObject:forKey:", v4, CFSTR("y"));

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 16));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setObject:forKey:", v5, CFSTR("z"));

  }
  return v2;
}

void _GEOPixelPointFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a1;
  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("x"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "doubleValue");
    *(_QWORD *)a2 = v4;
  }

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("y"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v5, "doubleValue");
    *(_QWORD *)(a2 + 8) = v6;
  }

  objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("z"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 20) |= 1u;
    *(_DWORD *)(a2 + 16) = objc_msgSend(v7, "intValue");
  }

}

uint64_t GEOPixelPointReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOPixelPointReadAllFrom(a1, a2);
}

uint64_t GEOPixelPointReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v28;
          v25 |= (unint64_t)(v29 & 0x7F) << v23;
          if ((v29 & 0x80) == 0)
            goto LABEL_37;
          v23 += 7;
          v15 = v24++ >= 9;
          if (v15)
          {
            LODWORD(v25) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v25) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((_DWORD)v19 == 2)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFF7 && v31 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v32 = 0;
        }
        *(_QWORD *)(a1 + 8) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = *v3;
        v21 = *(_QWORD *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v22 = 0;
        }
        *(_QWORD *)a1 = v22;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEOPixelPointHash()
{
  return PBHashBytes();
}

BOOL GEOPolyLocationShiftRequestReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  GEOLatLng *v18;
  void *v19;
  _BOOL8 v20;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v18 = objc_alloc_init(GEOLatLng);
          if (!GEOLatLngReadAllFrom((uint64_t)v18, v3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          v19 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v18;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v20 = v3[*v6] == 0;
  }
  else
  {
LABEL_27:
    v20 = 0;
  }
  objc_sync_exit(v3);

  return v20;
}

void sub_18964B14C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPolyLocationShiftRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPolyLocationShiftRequestReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18964B1AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPolyLocationShiftRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int v5;
  int *v6;
  char v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  int v16;
  BOOL v18;
  uint64_t v19;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] >= *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      while (1)
      {
        v10 = *v2;
        v11 = *(_QWORD *)&a1[v10];
        v12 = v11 + 1;
        if (v11 == -1 || v12 > *(_QWORD *)&a1[*v3])
          break;
        v13 = *(_BYTE *)(*(_QWORD *)&a1[*v6] + v11);
        *(_QWORD *)&a1[v10] = v12;
        v9 |= (unint64_t)(v13 & 0x7F) << v7;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v7 += 7;
        if (v8++ >= 9)
        {
          v9 = 0;
          v15 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v15 = a1[*v4];
      if (a1[*v4])
        v9 = 0;
LABEL_14:
      v16 = v9 & 7;
      if (v15 || v16 == 4)
        break;
      if ((v9 >> 3) == 1)
      {
        if (v5 || v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
        {
LABEL_35:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
        v5 = 1;
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_35;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  if (a1[*v4])
    v18 = 1;
  else
    v18 = v5 == 0;
  v19 = !v18;
  PBReaderRecallMark();
  return v19;
}

void sub_18964B8B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPolyLocationShiftResponseReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _BOOL4 v15;
  int *v16;
  int *v17;
  BOOL v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v32;
  _BOOL4 v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  GEOLatLng *v42;
  void *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  unint64_t v57;
  int v58;
  char v59;
  int v60;
  int v61;
  char v62;
  void *v63;
  _BOOL4 v65;
  BOOL v66;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 72) >> 1) & 1) + (*(_BYTE *)(a1 + 72) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v8])
    {
      case -3:
        v7 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        if (((v10 & 1 | v11) != 0) | v7 & 1)
          v14 = 0;
        else
          v14 = a3;
        v15 = (v10 & 1 | v11) != 0;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
          goto LABEL_96;
        if (v14)
          v18 = (v10 & 1 | v11) != 0;
        else
          v18 = 1;
        v66 = v18;
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v8;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_BYTE *)(v3 + *v17))
      goto LABEL_96;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_26;
      v20 += 7;
      v27 = v21++ >= 9;
      if (v27)
      {
        v22 = 0;
        v28 = *v17;
        v29 = *(unsigned __int8 *)(v3 + v28);
        goto LABEL_28;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_26:
    v28 = *v17;
    v29 = *(unsigned __int8 *)(v3 + v28);
    if (*(_BYTE *)(v3 + v28))
      v22 = 0;
LABEL_28:
    v30 = v22 & 7;
    if (v29 || v30 == 4)
    {
LABEL_96:
      if (v15)
      {
        v59 = 1;
        goto LABEL_98;
      }
      if (!v14)
        goto LABEL_109;
      while (1)
      {
        v61 = *v14++;
        v60 = v61;
        if (v61 == 2)
          break;
        if (v60 == 100)
        {
          v62 = 2;
LABEL_108:
          *(_BYTE *)(a1 + 72) |= v62;
        }
        else if (!v60)
        {
          goto LABEL_109;
        }
      }
      v62 = 1;
      goto LABEL_108;
    }
    v32 = v22 >> 3;
    v33 = v15;
    if (!v66)
    {
      v34 = v14;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((int)v32 <= 2)
    {
      if ((_DWORD)v32 == 1)
      {
        if ((v7 & 1) != 0)
        {
          v44 = 0;
          v45 = 0;
          v46 = 0;
          while (1)
          {
            v47 = *v16;
            v48 = *(_QWORD *)(v3 + v47);
            v49 = v48 + 1;
            if (v48 == -1 || v49 > *(_QWORD *)(v3 + *v6))
              break;
            v50 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v48);
            *(_QWORD *)(v3 + v47) = v49;
            v46 |= (unint64_t)(v50 & 0x7F) << v44;
            if ((v50 & 0x80) == 0)
              goto LABEL_77;
            v44 += 7;
            v27 = v45++ >= 9;
            if (v27)
            {
              LODWORD(v46) = 0;
              goto LABEL_79;
            }
          }
          *(_BYTE *)(v3 + *v17) = 1;
LABEL_77:
          if (*(_BYTE *)(v3 + *v17))
            LODWORD(v46) = 0;
LABEL_79:
          *(_DWORD *)(a1 + 68) = v46;
          goto LABEL_91;
        }
      }
      else
      {
        if ((_DWORD)v32 != 2)
          goto LABEL_72;
        if (v33 && (*(_BYTE *)(a1 + 72) & 1) == 0)
        {
          if (v30 == 2)
          {
            if (!PBReaderPlaceMark())
              goto LABEL_113;
            while (1)
            {
              v38 = (unint64_t *)(v3 + *v16);
              v39 = *v38;
              v40 = *(_QWORD *)(v3 + *v6);
              if (*v38 >= v40)
                break;
              v41 = (int)*MEMORY[0x1E0D82BC8];
              if (*(_BYTE *)(v3 + v41))
                break;
              if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > v40)
                *(_BYTE *)(v3 + v41) = 1;
              else
                *v38 = v39 + 8;
              PBRepeatedDoubleAdd();
            }
            PBReaderRecallMark();
          }
          else
          {
            v56 = *v16;
            v57 = *(_QWORD *)(v3 + v56);
            if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(_QWORD *)(v3 + *v6))
              *(_QWORD *)(v3 + v56) = v57 + 8;
            else
              *(_BYTE *)(v3 + v28) = 1;
            PBRepeatedDoubleAdd();
          }
          goto LABEL_90;
        }
      }
      goto LABEL_74;
    }
    if ((_DWORD)v32 == 3)
    {
      if ((v7 & 1) != 0)
      {
        v51 = *v16;
        v52 = *(_QWORD *)(v3 + v51);
        if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *(_QWORD *)(v3 + *v6))
        {
          v53 = *(_QWORD *)(*(_QWORD *)(v3 + *v19) + v52);
          *(_QWORD *)(v3 + v51) = v52 + 8;
        }
        else
        {
          *(_BYTE *)(v3 + v28) = 1;
          v53 = 0;
        }
        *(_QWORD *)(a1 + 48) = v53;
        goto LABEL_91;
      }
      goto LABEL_74;
    }
    if ((_DWORD)v32 != 100)
    {
LABEL_72:
      v54 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if (!v54)
        goto LABEL_112;
      goto LABEL_91;
    }
    if (v33)
      break;
LABEL_74:
    v55 = PBReaderSkipValueWithTag();
    v17 = (int *)MEMORY[0x1E0D82BC8];
    if ((v55 & 1) == 0)
    {
LABEL_112:
      v59 = 0;
      goto LABEL_98;
    }
LABEL_91:
    if (v8)
      v58 = 1;
    else
      v58 = v15;
    if (v58 != 1 || *(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_96;
  }
  if ((*(_BYTE *)(a1 + 72) & 2) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
    {
LABEL_113:
      v59 = 0;
      goto LABEL_115;
    }
    v8 += *(unsigned __int8 *)(a1 + 72) << 30 >> 31;
    goto LABEL_90;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_113;
  v65 = v15;
  v42 = objc_alloc_init(GEOLatLng);
  if (GEOLatLngReadAllFrom((uint64_t)v42, (void *)v3))
  {
    PBReaderRecallMark();
    v43 = *(void **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v42;

    --v8;
    v15 = v65;
LABEL_90:
    v17 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_91;
  }

  v59 = 0;
  v15 = v65;
LABEL_115:
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_98:
  *(_BYTE *)(a1 + 72) |= 1u;
  *(_BYTE *)(a1 + 72) |= 2u;
  if ((v59 & 1) != 0)
  {
LABEL_109:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v15)
      goto LABEL_110;
    return v3;
  }
  v3 = 0;
  if (!v15)
    return v3;
LABEL_110:
  v63 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_18964C7B8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPolyLocationShiftResponseReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPolyLocationShiftResponseReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPolyLocationShiftResponseReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPolyLocationShiftResponseReadAllFrom_initialTag;
  Specified = GEOPolyLocationShiftResponseReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 40), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_18964C95C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOPolyLocationShiftResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPolyLocationShiftResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18964C9BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPolyLocationShiftResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  _BOOL4 v41;
  _BOOL8 v42;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v44[0] = 0;
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_63;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
      {
LABEL_63:
        v41 = HIDWORD(v44[0]) != 0;
        goto LABEL_65;
      }
      v18 = v8 >> 3;
      if ((int)(v8 >> 3) > 2)
      {
        if ((_DWORD)v18 == 100)
        {
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOLatLngIsValid(a1))
            goto LABEL_69;
          goto LABEL_45;
        }
        if ((_DWORD)v18 != 3)
        {
LABEL_46:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_69;
          goto LABEL_62;
        }
        v24 = 0;
        v25 = 1;
        while (1)
        {
          v26 = v25;
          v27 = *((_DWORD *)v44 + v24);
          if (!v27)
            break;
          if (v27 != 3)
          {
            v25 = 0;
            v24 = 1;
            if ((v26 & 1) != 0)
              continue;
          }
          goto LABEL_69;
        }
        *((_DWORD *)v44 + v24) = 3;
        if (v16 != 1)
        {
LABEL_69:
          PBReaderRecallMark();
          return 0;
        }
      }
      else
      {
        if ((_DWORD)v18 == 1)
        {
          v28 = 0;
          v29 = 1;
          while (1)
          {
            v30 = v29;
            v31 = *((_DWORD *)v44 + v28);
            if (!v31)
              break;
            if (v31 != 1)
            {
              v29 = 0;
              v28 = 1;
              if ((v30 & 1) != 0)
                continue;
            }
            goto LABEL_69;
          }
          *((_DWORD *)v44 + v28) = 1;
          if (v16)
            goto LABEL_69;
          v35 = 0;
          while (1)
          {
            v36 = *v2;
            v37 = *(_QWORD *)&a1[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&a1[*v3])
              break;
            v39 = *(char *)(*(_QWORD *)&a1[*v5] + v37);
            *(_QWORD *)&a1[v36] = v38;
            if (v39 < 0 && v35++ <= 8)
              continue;
            goto LABEL_62;
          }
          v14 = *v4;
LABEL_61:
          a1[v14] = 1;
          goto LABEL_62;
        }
        if ((_DWORD)v18 != 2)
          goto LABEL_46;
        if (v16 != 1)
        {
          if (v16 != 2 || !PBReaderPlaceMark())
            goto LABEL_69;
          while (1)
          {
            v19 = (unint64_t *)&a1[*v2];
            v20 = *v19;
            v21 = *(_QWORD *)&a1[*v3];
            if (*v19 >= v21)
              break;
            v22 = *v4;
            if (a1[v22])
              break;
            if (v20 > 0xFFFFFFFFFFFFFFF7 || (v23 = v20 + 8, v23 > v21))
              a1[v22] = 1;
            else
              *v19 = v23;
          }
LABEL_45:
          PBReaderRecallMark();
          goto LABEL_62;
        }
      }
      v32 = *v2;
      v33 = *(_QWORD *)&a1[v32];
      if (v33 > 0xFFFFFFFFFFFFFFF7)
        goto LABEL_61;
      v34 = v33 + 8;
      if (v34 > *(_QWORD *)&a1[*v3])
        goto LABEL_61;
      *(_QWORD *)&a1[v32] = v34;
LABEL_62:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_63;
    }
  }
  v41 = 0;
LABEL_65:
  if (a1[*v4])
    v42 = 0;
  else
    v42 = v41;
  PBReaderRecallMark();
  return v42;
}

void sub_18964CF24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPolyLocationShiftResponseIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 72) & 7) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_18964D088(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18964D304(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOPDCameraPathFrameDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOPDCameraPathFrameDictionaryRepresentation(a1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOPDCameraPathFrame<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id GEOPDCameraPathFrameDictionaryRepresentation(uint64_t a1)
{
  return _GEOPDCameraPathFrameDictionaryRepresentation(a1, 0);
}

id _GEOPDCameraPathFrameDictionaryRepresentation(uint64_t a1, int a2)
{
  void *v4;
  double v5;
  __int16 v6;
  void *v7;
  void *v9;
  const __CFString *v10;
  void *v11;
  const __CFString *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const __CFString *v21;
  void *v22;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 1) != 0)
  {
    LODWORD(v5) = *(_DWORD *)a1;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      v10 = CFSTR("easeIn");
    else
      v10 = CFSTR("ease_in");
    objc_msgSend(v4, "setObject:forKey:", v9, v10);

    v6 = *(_WORD *)(a1 + 80);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_22;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  LODWORD(v5) = *(_DWORD *)(a1 + 4);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v12 = CFSTR("easeOut");
  else
    v12 = CFSTR("ease_out");
  objc_msgSend(v4, "setObject:forKey:", v11, v12);

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_26;
  }
LABEL_22:
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v14 = CFSTR("fieldOfView");
  else
    v14 = CFSTR("field_of_view");
  objc_msgSend(v4, "setObject:forKey:", v13, v14);

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_27;
  }
LABEL_26:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 16));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v15, CFSTR("height"));

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_28;
  }
LABEL_27:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 24));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v16, CFSTR("latitude"));

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_29;
  }
LABEL_28:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 32));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v17, CFSTR("longitude"));

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_30;
  }
LABEL_29:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 40));
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v18, CFSTR("roll"));

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0)
      goto LABEL_10;
    goto LABEL_31;
  }
LABEL_30:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 48));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setObject:forKey:", v19, CFSTR("rotation"));

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0)
      goto LABEL_11;
LABEL_35:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 64));
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v22, CFSTR("tilt"));

    if ((*(_WORD *)(a1 + 80) & 0x400) == 0)
      return v4;
    goto LABEL_12;
  }
LABEL_31:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 56));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v21 = CFSTR("secondsToNextFrame");
  else
    v21 = CFSTR("seconds_to_next_frame");
  objc_msgSend(v4, "setObject:forKey:", v20, v21);

  v6 = *(_WORD *)(a1 + 80);
  if ((v6 & 0x200) != 0)
    goto LABEL_35;
LABEL_11:
  if ((v6 & 0x400) != 0)
  {
LABEL_12:
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *(double *)(a1 + 72));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "setObject:forKey:", v7, CFSTR("zoom"));

  }
  return v4;
}

id GEOPDCameraPathFrameJSONRepresentation(uint64_t a1)
{
  return _GEOPDCameraPathFrameDictionaryRepresentation(a1, 1);
}

void GEOPDCameraPathFrameFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  _GEOPDCameraPathFrameFromDictionaryRepresentation(a1, a2, 0);
}

void _GEOPDCameraPathFrameFromDictionaryRepresentation(void *a1, uint64_t a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const __CFString *v19;
  void *v20;
  uint64_t v21;
  const __CFString *v22;
  void *v23;
  int v24;
  const __CFString *v25;
  void *v26;
  int v27;
  const __CFString *v28;
  void *v29;
  int v30;
  id v31;

  v31 = a1;
  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("latitude"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x10u;
    objc_msgSend(v5, "doubleValue");
    *(_QWORD *)(a2 + 24) = v6;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("longitude"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x20u;
    objc_msgSend(v7, "doubleValue");
    *(_QWORD *)(a2 + 32) = v8;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("height"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 8u;
    objc_msgSend(v9, "doubleValue");
    *(_QWORD *)(a2 + 16) = v10;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("zoom"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x400u;
    objc_msgSend(v11, "doubleValue");
    *(_QWORD *)(a2 + 72) = v12;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("tilt"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x200u;
    objc_msgSend(v13, "doubleValue");
    *(_QWORD *)(a2 + 64) = v14;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("rotation"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x80u;
    objc_msgSend(v15, "doubleValue");
    *(_QWORD *)(a2 + 48) = v16;
  }

  objc_msgSend(v31, "objectForKeyedSubscript:", CFSTR("roll"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x40u;
    objc_msgSend(v17, "doubleValue");
    *(_QWORD *)(a2 + 40) = v18;
  }

  if (a3)
    v19 = CFSTR("secondsToNextFrame");
  else
    v19 = CFSTR("seconds_to_next_frame");
  objc_msgSend(v31, "objectForKeyedSubscript:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 0x100u;
    objc_msgSend(v20, "doubleValue");
    *(_QWORD *)(a2 + 56) = v21;
  }

  if (a3)
    v22 = CFSTR("easeIn");
  else
    v22 = CFSTR("ease_in");
  objc_msgSend(v31, "objectForKeyedSubscript:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 1u;
    objc_msgSend(v23, "floatValue");
    *(_DWORD *)a2 = v24;
  }

  if (a3)
    v25 = CFSTR("easeOut");
  else
    v25 = CFSTR("ease_out");
  objc_msgSend(v31, "objectForKeyedSubscript:", v25);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 2u;
    objc_msgSend(v26, "floatValue");
    *(_DWORD *)(a2 + 4) = v27;
  }

  if (a3)
    v28 = CFSTR("fieldOfView");
  else
    v28 = CFSTR("field_of_view");
  objc_msgSend(v31, "objectForKeyedSubscript:", v28);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_WORD *)(a2 + 80) |= 4u;
    objc_msgSend(v29, "floatValue");
    *(_DWORD *)(a2 + 8) = v30;
  }

}

void GEOPDCameraPathFrameFromJSONRepresentation(void *a1, uint64_t a2)
{
  _GEOPDCameraPathFrameFromDictionaryRepresentation(a1, a2, 1);
}

uint64_t GEOPDCameraPathFrameReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOPDCameraPathFrameReadAllFrom(a1, a2);
}

uint64_t GEOPDCameraPathFrameReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  uint64_t result;
  uint64_t v50;
  unint64_t v51;
  int v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *v5;
            v17 = *(unsigned __int8 *)(a2 + v16);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *v5;
        v17 = *(unsigned __int8 *)(a2 + v16);
        if (*(_BYTE *)(a2 + v16))
          v10 = 0;
LABEL_14:
        if (v17)
          v18 = 1;
        else
          v18 = (v10 & 7) == 4;
        if (!v18)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 0x10u;
              v19 = *v3;
              v20 = *(_QWORD *)(a2 + v19);
              if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v21 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v20);
                *(_QWORD *)(a2 + v19) = v20 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v21 = 0;
              }
              *(_QWORD *)(a1 + 24) = v21;
              goto LABEL_76;
            case 2u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              v22 = *v3;
              v23 = *(_QWORD *)(a2 + v22);
              if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
                *(_QWORD *)(a2 + v22) = v23 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v24 = 0;
              }
              *(_QWORD *)(a1 + 32) = v24;
              goto LABEL_76;
            case 3u:
              *(_WORD *)(a1 + 80) |= 8u;
              v25 = *v3;
              v26 = *(_QWORD *)(a2 + v25);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v27 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v26);
                *(_QWORD *)(a2 + v25) = v26 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v27 = 0;
              }
              *(_QWORD *)(a1 + 16) = v27;
              goto LABEL_76;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              v28 = *v3;
              v29 = *(_QWORD *)(a2 + v28);
              if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v30 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v29);
                *(_QWORD *)(a2 + v28) = v29 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v30 = 0;
              }
              *(_QWORD *)(a1 + 72) = v30;
              goto LABEL_76;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              v31 = *v3;
              v32 = *(_QWORD *)(a2 + v31);
              if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v33 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v32);
                *(_QWORD *)(a2 + v31) = v32 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v33 = 0;
              }
              *(_QWORD *)(a1 + 64) = v33;
              goto LABEL_76;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x80u;
              v34 = *v3;
              v35 = *(_QWORD *)(a2 + v34);
              if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v36 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v35);
                *(_QWORD *)(a2 + v34) = v35 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v36 = 0;
              }
              *(_QWORD *)(a1 + 48) = v36;
              goto LABEL_76;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              v37 = *v3;
              v38 = *(_QWORD *)(a2 + v37);
              if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v39 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v38);
                *(_QWORD *)(a2 + v37) = v38 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v39 = 0;
              }
              *(_QWORD *)(a1 + 40) = v39;
              goto LABEL_76;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x100u;
              v40 = *v3;
              v41 = *(_QWORD *)(a2 + v40);
              if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v42 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v41);
                *(_QWORD *)(a2 + v40) = v41 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v42 = 0;
              }
              *(_QWORD *)(a1 + 56) = v42;
              goto LABEL_76;
            case 9u:
              *(_WORD *)(a1 + 80) |= 1u;
              v50 = *v3;
              v51 = *(_QWORD *)(a2 + v50);
              if (v51 <= 0xFFFFFFFFFFFFFFFBLL && v51 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v52 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v51);
                *(_QWORD *)(a2 + v50) = v51 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v52 = 0;
              }
              *(_DWORD *)a1 = v52;
              goto LABEL_76;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 2u;
              v43 = *v3;
              v44 = *(_QWORD *)(a2 + v43);
              if (v44 <= 0xFFFFFFFFFFFFFFFBLL && v44 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v45 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v44);
                *(_QWORD *)(a2 + v43) = v44 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v45 = 0;
              }
              *(_DWORD *)(a1 + 4) = v45;
              goto LABEL_76;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 4u;
              v46 = *v3;
              v47 = *(_QWORD *)(a2 + v46);
              if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(a2 + *v4))
              {
                v48 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v47);
                *(_QWORD *)(a2 + v46) = v47 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v16) = 1;
                v48 = 0;
              }
              *(_DWORD *)(a1 + 8) = v48;
              goto LABEL_76;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_76:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t GEOPDCameraPathFrameWriteTo(uint64_t result)
{
  uint64_t v1;
  __int16 v2;

  v1 = result;
  v2 = *(_WORD *)(result + 80);
  if ((v2 & 0x10) != 0)
  {
    result = PBDataWriterWriteDoubleField();
    v2 = *(_WORD *)(v1 + 80);
    if ((v2 & 0x20) == 0)
    {
LABEL_3:
      if ((v2 & 8) == 0)
        goto LABEL_4;
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_4:
    if ((v2 & 0x400) == 0)
      goto LABEL_5;
    goto LABEL_16;
  }
LABEL_15:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_5:
    if ((v2 & 0x200) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_16:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 0x200) == 0)
  {
LABEL_6:
    if ((v2 & 0x80) == 0)
      goto LABEL_7;
    goto LABEL_18;
  }
LABEL_17:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 0x80) == 0)
  {
LABEL_7:
    if ((v2 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_19;
  }
LABEL_18:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_8:
    if ((v2 & 0x100) == 0)
      goto LABEL_9;
    goto LABEL_20;
  }
LABEL_19:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0)
      goto LABEL_10;
    goto LABEL_21;
  }
LABEL_20:
  result = PBDataWriterWriteDoubleField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 1) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0)
      goto LABEL_11;
    goto LABEL_22;
  }
LABEL_21:
  result = PBDataWriterWriteFloatField();
  v2 = *(_WORD *)(v1 + 80);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 4) == 0)
      return result;
    return PBDataWriterWriteFloatField();
  }
LABEL_22:
  result = PBDataWriterWriteFloatField();
  if ((*(_WORD *)(v1 + 80) & 4) != 0)
    return PBDataWriterWriteFloatField();
  return result;
}

BOOL GEOPDCameraPathFrameEquals(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x58uLL) == 0;
}

uint64_t GEOPDCameraPathFrameHash()
{
  return PBHashBytes();
}

uint64_t GEOPDCameraPathFrameIsValid(void *a1)
{
  uint64_t AllFrom;
  _OWORD v4[5];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = objc_msgSend(a1, "position");
  v7 = objc_msgSend(a1, "length");
  v5 = 0;
  memset(v4, 0, sizeof(v4));
  AllFrom = GEOPDCameraPathFrameReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

void sub_18964EFA0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDFlyoverReadSpecified(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  char v15;
  int *v16;
  GEOLocalizedString *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  char v47;
  int v48;
  char v49;
  void *v50;
  int v52;
  char v53;
  char v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 84);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 80));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 96)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFCFFFDFFFFFFFELL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v7])
    {
      case -3:
        v8 = 1;
        goto LABEL_6;
      case -2:
        v12 = v9;
        goto LABEL_8;
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 > 2;
        v15 = v10 | v14;
        if ((((v10 | v14) | v8) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        LODWORD(v17) = v10 | v14;
        v54 = (v16 == 0) | v15;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v53 = (v7 != 0) | v15;
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_6:
        v12 = v9;
        v13 = v10;
LABEL_8:
        ++v7;
        v9 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_77;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_23;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_23:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_25:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_77:
      if ((v17 & 1) != 0)
      {
        v47 = 1;
        goto LABEL_89;
      }
      if (v16)
      {
        while (1)
        {
          v48 = *v16++;
          v49 = 2;
          switch(v48)
          {
            case 0:
              goto LABEL_90;
            case 1:
              goto LABEL_84;
            case 3:
              v49 = 4;
              goto LABEL_84;
            case 4:
              v49 = 8;
              goto LABEL_84;
            case 5:
              v49 = 16;
LABEL_84:
              *(_BYTE *)(a1 + 96) |= v49;
              break;
            default:
              continue;
          }
        }
      }
      goto LABEL_90;
    }
    v31 = v23 >> 3;
    v32 = (char)v17;
    if ((v54 & 1) == 0)
    {
      v33 = v16;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32 || (*(_BYTE *)(a1 + 96) & 2) != 0)
          goto LABEL_70;
        if (!PBReaderPlaceMark())
          goto LABEL_86;
        -[GEOPDFlyover _reserveCameraPaths:](a1, 1uLL);
        if ((GEOPDCameraPathFrameReadAllFrom(*(_QWORD *)(a1 + 16) + 88 * *(_QWORD *)(a1 + 24), v3) & 1) == 0)
          goto LABEL_86;
        PBReaderRecallMark();
        v37 = 24;
        goto LABEL_57;
      case 2:
        if ((v8 & 1) == 0)
          goto LABEL_70;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 96) |= 1u;
        while (2)
        {
          v42 = *v18;
          v43 = *(_QWORD *)(v3 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v43);
            *(_QWORD *)(v3 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v28 = v40++ >= 9;
              if (v28)
              {
                v41 = 0;
                goto LABEL_76;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          v41 = 0;
LABEL_76:
        *(_BYTE *)(a1 + 92) = v41 != 0;
        goto LABEL_71;
      case 3:
        if (!v32 || (*(_BYTE *)(a1 + 96) & 4) != 0)
          goto LABEL_70;
        if (!PBReaderPlaceMark())
          goto LABEL_86;
        -[GEOPDFlyover _reserveLabelFrames:](a1, 1uLL);
        if ((GEOPDLabelFrameReadAllFrom(*(_QWORD *)(a1 + 40) + 16 * *(_QWORD *)(a1 + 48), v3) & 1) == 0)
          goto LABEL_86;
        PBReaderRecallMark();
        v37 = 48;
LABEL_57:
        ++*(_QWORD *)(a1 + v37);
        goto LABEL_69;
      case 4:
        if (!v32 || (*(_BYTE *)(a1 + 96) & 8) != 0)
          goto LABEL_70;
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_86;
        v52 = (int)v17;
        v17 = objc_alloc_init(GEOPDLabelLocalizations);
        if (!GEOPDLabelLocalizationsReadAllFrom(v17, (void *)v3, v9 & 1))
          goto LABEL_87;
        PBReaderRecallMark();
        -[GEOPDFlyover _addNoFlagsLabel:](a1, v17);
        goto LABEL_68;
      case 5:
        if (!v32 || (*(_BYTE *)(a1 + 96) & 0x10) != 0)
        {
LABEL_70:
          v46 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v46 & 1) == 0)
          {
LABEL_85:
            v47 = 0;
            goto LABEL_89;
          }
          goto LABEL_71;
        }
        if ((PBReaderPlaceMark() & 1) != 0)
        {
          v52 = (int)v17;
          v17 = objc_alloc_init(GEOLocalizedString);
          if (!GEOLocalizedStringReadAllFrom((uint64_t)v17, (void *)v3, v9 & 1))
          {
LABEL_87:

            v47 = 0;
            LOBYTE(v17) = v52;
            goto LABEL_88;
          }
          PBReaderRecallMark();
          -[GEOPDFlyover _addNoFlagsNotificationMessage:](a1, v17);
LABEL_68:

          LODWORD(v17) = v52;
LABEL_69:
          v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_71:
          if ((v53 & 1) == 0)
            goto LABEL_77;
          continue;
        }
LABEL_86:
        v47 = 0;
LABEL_88:
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_89:
        *(_BYTE *)(a1 + 96) |= 2u;
        *(_BYTE *)(a1 + 96) |= 4u;
        *(_BYTE *)(a1 + 96) |= 8u;
        *(_BYTE *)(a1 + 96) |= 0x10u;
        if ((v47 & 1) != 0)
        {
LABEL_90:
          v3 = *(_BYTE *)(v3 + *v19) == 0;
          if ((v17 & 1) != 0)
            goto LABEL_91;
        }
        else
        {
          v3 = 0;
          if ((v17 & 1) != 0)
          {
LABEL_91:
            v50 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = 0;

          }
        }
        return v3;
      default:
        v38 = PBReaderSkipValueWithTag();
        v19 = (int *)MEMORY[0x1E0D82BC8];
        if (!v38)
          goto LABEL_85;
        goto LABEL_71;
    }
  }
}

void sub_18964FB90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189650030(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189650360(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOPDLabelFrameJSONRepresentation(uint64_t a1)
{
  return _GEOPDLabelFrameDictionaryRepresentation(a1, 1);
}

id GEOPDLabelFrameDictionaryRepresentation(uint64_t a1)
{
  return _GEOPDLabelFrameDictionaryRepresentation(a1, 0);
}

void GEOPDLabelFrameFromJSONRepresentation(void *a1, uint64_t a2)
{
  _GEOPDLabelFrameFromDictionaryRepresentation(a1, a2, 1);
}

void GEOPDLabelFrameFromDictionaryRepresentation(void *a1, uint64_t a2)
{
  _GEOPDLabelFrameFromDictionaryRepresentation(a1, a2, 0);
}

void sub_189651154(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOPDFlyoverCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 64);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 72);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

uint64_t GEOPDFlyoverReadAllFrom(uint64_t a1, void *a2, int a3)
{
  uint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 84))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOPDFlyoverReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 88));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 80) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 84) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOPDFlyoverReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOPDFlyoverReadAllFrom_initialTag;
  Specified = GEOPDFlyoverReadSpecified(a1, (uint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOPDFlyoverCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 88));
  return Specified;
}

void sub_189651478(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t GEOPDFlyoverReadFrom(uint64_t a1, void *a2)
{
  id v3;
  uint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDFlyoverReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896514D8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDFlyoverIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 == 2 && PBReaderPlaceMark() && GEOPDCameraPathFrameIsValid(a1))
            goto LABEL_44;
          goto LABEL_49;
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v17 = 0;
          break;
        case 3u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDLabelFrameIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDLabelLocalizationsIsValid(a1))
            goto LABEL_49;
          goto LABEL_44;
        case 5u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
            goto LABEL_49;
LABEL_44:
          PBReaderRecallMark();
          continue;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_49:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v18 = *v2;
        v19 = *(_QWORD *)&a1[v18];
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
          break;
        v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
        *(_QWORD *)&a1[v18] = v20;
        if (v21 < 0 && v17++ <= 8)
          continue;
        goto LABEL_45;
      }
      a1[*v4] = 1;
LABEL_45:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

uint64_t GEOPDLabelFrameIsValid(void *a1)
{
  uint64_t AllFrom;
  _QWORD v4[4];

  v4[2] = objc_msgSend(a1, "position");
  v4[3] = objc_msgSend(a1, "length");
  v4[0] = 0;
  v4[1] = 0;
  AllFrom = GEOPDLabelFrameReadAllFrom((uint64_t)v4, (uint64_t)a1);
  PBReaderRecallMark();
  return AllFrom;
}

BOOL GEOPDLabelLocalizationsIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOLocalizedStringIsValid(a1))
        {
LABEL_27:
          PBReaderRecallMark();
          return 0;
        }
        PBReaderRecallMark();
      }
      else if ((PBReaderSkipValueWithTag() & 1) == 0)
      {
        goto LABEL_27;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_189651D58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOPDFlyoverIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 88));
  if ((*(_BYTE *)(a1 + 96) & 0x3E) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 96) & 0x10) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 72);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if (GEOLocalizedStringIsDirty(*(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * i)))
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

uint64_t GEOPDLabelFrameWriteTo(uint64_t result)
{
  uint64_t v1;
  char v2;

  v1 = result;
  v2 = *(_BYTE *)(result + 12);
  if ((v2 & 2) != 0)
  {
    result = PBDataWriterWriteUint32Field();
    v2 = *(_BYTE *)(v1 + 12);
    if ((v2 & 4) == 0)
    {
LABEL_3:
      if ((v2 & 1) == 0)
        return result;
      return PBDataWriterWriteFloatField();
    }
  }
  else if ((*(_BYTE *)(result + 12) & 4) == 0)
  {
    goto LABEL_3;
  }
  result = PBDataWriterWriteFloatField();
  if ((*(_BYTE *)(v1 + 12) & 1) != 0)
    return PBDataWriterWriteFloatField();
  return result;
}

os_unfair_lock_s *GEOPDFlyoverIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOPDFlyoverIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 22);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_1896524E8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id GEOPDLabelFrameDescription(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)MEMORY[0x1E0CB3940];
  _GEOPDLabelFrameDictionaryRepresentation(a1, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringWithFormat:", CFSTR("GEOPDLabelFrame<%p> %@"), a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id _GEOPDLabelFrameDictionaryRepresentation(uint64_t a1, int a2)
{
  void *v4;
  double v5;
  char v6;
  void *v7;
  const __CFString *v8;
  void *v10;
  const __CFString *v11;
  void *v12;
  const __CFString *v13;

  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *(_BYTE *)(a1 + 12);
  if ((v6 & 1) != 0)
  {
    LODWORD(v5) = *(_DWORD *)a1;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      v11 = CFSTR("endFraction");
    else
      v11 = CFSTR("end_fraction");
    objc_msgSend(v4, "setObject:forKey:", v10, v11);

    v6 = *(_BYTE *)(a1 + 12);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        return v4;
      goto LABEL_4;
    }
  }
  else if ((*(_BYTE *)(a1 + 12) & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInt:", *(unsigned int *)(a1 + 4));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (a2)
    v13 = CFSTR("labelIndex");
  else
    v13 = CFSTR("label_index");
  objc_msgSend(v4, "setObject:forKey:", v12, v13);

  if ((*(_BYTE *)(a1 + 12) & 4) != 0)
  {
LABEL_4:
    LODWORD(v5) = *(_DWORD *)(a1 + 8);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (a2)
      v8 = CFSTR("startFraction");
    else
      v8 = CFSTR("start_fraction");
    objc_msgSend(v4, "setObject:forKey:", v7, v8);

  }
  return v4;
}

void _GEOPDLabelFrameFromDictionaryRepresentation(void *a1, uint64_t a2, int a3)
{
  id v5;
  const __CFString *v6;
  void *v7;
  const __CFString *v8;
  void *v9;
  int v10;
  const __CFString *v11;
  void *v12;
  int v13;
  id v14;

  v5 = a1;
  if (a3)
    v6 = CFSTR("labelIndex");
  else
    v6 = CFSTR("label_index");
  v14 = v5;
  objc_msgSend(v5, "objectForKeyedSubscript:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 2u;
    *(_DWORD *)(a2 + 4) = objc_msgSend(v7, "unsignedIntValue");
  }

  if (a3)
    v8 = CFSTR("startFraction");
  else
    v8 = CFSTR("start_fraction");
  objc_msgSend(v14, "objectForKeyedSubscript:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 4u;
    objc_msgSend(v9, "floatValue");
    *(_DWORD *)(a2 + 8) = v10;
  }

  if (a3)
    v11 = CFSTR("endFraction");
  else
    v11 = CFSTR("end_fraction");
  objc_msgSend(v14, "objectForKeyedSubscript:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    *(_BYTE *)(a2 + 12) |= 1u;
    objc_msgSend(v12, "floatValue");
    *(_DWORD *)a2 = v13;
  }

}

uint64_t GEOPDLabelFrameReadFrom(uint64_t a1, uint64_t a2)
{
  return GEOPDLabelFrameReadAllFrom(a1, a2);
}

uint64_t GEOPDLabelFrameReadAllFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *v5;
          v17 = *(unsigned __int8 *)(a2 + v16);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *v5;
      v17 = *(unsigned __int8 *)(a2 + v16);
      if (*(_BYTE *)(a2 + v16))
        v10 = 0;
LABEL_14:
      if (v17 || (v10 & 7) == 4)
        break;
      v19 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(_BYTE *)(a1 + 12) |= 1u;
        v27 = *v3;
        v28 = *(_QWORD *)(a2 + v27);
        if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v29 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v29 = 0;
        }
        *(_DWORD *)a1 = v29;
      }
      else if ((_DWORD)v19 == 2)
      {
        *(_BYTE *)(a1 + 12) |= 4u;
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 <= 0xFFFFFFFFFFFFFFFBLL && v31 + 4 <= *(_QWORD *)(a2 + *v4))
        {
          v32 = *(_DWORD *)(*(_QWORD *)(a2 + *v7) + v31);
          *(_QWORD *)(a2 + v30) = v31 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v16) = 1;
          v32 = 0;
        }
        *(_DWORD *)(a1 + 8) = v32;
      }
      else if ((_DWORD)v19 == 1)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 12) |= 2u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_37;
          v20 += 7;
          v15 = v21++ >= 9;
          if (v15)
          {
            LODWORD(v22) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 4) = v22;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

BOOL GEOPDLabelFrameEquals(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t GEOPDLabelFrameHash()
{
  return PBHashBytes();
}

BOOL GEOPDLabelLocalizationsReadAllFrom(void *a1, void *a2, int a3)
{
  char *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  int v18;
  GEOLocalizedString *v20;
  _BOOL8 v21;

  v5 = a2;
  objc_sync_enter(v5);
  if (v5)
  {
    v6 = (int *)MEMORY[0x1E0D82BF0];
    v7 = (int *)MEMORY[0x1E0D82BD8];
    v8 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v5[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v5[*MEMORY[0x1E0D82BD8]])
    {
      v9 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v5[*v8])
          break;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        while (1)
        {
          v13 = *v6;
          v14 = *(_QWORD *)&v5[v13];
          v15 = v14 + 1;
          if (v14 == -1 || v15 > *(_QWORD *)&v5[*v7])
            break;
          v16 = *(_BYTE *)(*(_QWORD *)&v5[*v9] + v14);
          *(_QWORD *)&v5[v13] = v15;
          v12 |= (unint64_t)(v16 & 0x7F) << v10;
          if ((v16 & 0x80) == 0)
            goto LABEL_13;
          v10 += 7;
          if (v11++ >= 9)
          {
            v12 = 0;
            v18 = v5[*v8];
            goto LABEL_15;
          }
        }
        v5[*v8] = 1;
LABEL_13:
        v18 = v5[*v8];
        if (v5[*v8])
          v12 = 0;
LABEL_15:
        if (v18 || (v12 & 7) == 4)
          break;
        if ((v12 >> 3) == 1)
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_27;
          v20 = objc_alloc_init(GEOLocalizedString);
          if (!GEOLocalizedStringReadAllFrom((uint64_t)v20, v5, a3))
          {

            goto LABEL_27;
          }
          PBReaderRecallMark();
          objc_msgSend(a1, "addLocalizedString:", v20, 0, 0);

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_27;
        }
      }
      while (*(_QWORD *)&v5[*v6] < *(_QWORD *)&v5[*v7]);
    }
    v21 = v5[*v8] == 0;
  }
  else
  {
LABEL_27:
    v21 = 0;
  }
  objc_sync_exit(v5);

  return v21;
}

void sub_189653680(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPDLabelLocalizationsReadFrom(void *a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOPDLabelLocalizationsReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896536E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOPolylineCoordinateIsValid(uint64_t a1)
{
  return *((float *)&a1 + 1) >= 0.0;
}

BOOL GEOPolylineCoordinateIsInvalid(uint64_t a1)
{
  return *((float *)&a1 + 1) < 0.0;
}

BOOL GEOPolylineCoordinateRangeIsValid(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;

  if (*((float *)&a1 + 1) < 0.0 || *((float *)&a2 + 1) < 0.0)
    return 0;
  v3 = *((float *)&a1 + 1) == *((float *)&a2 + 1) || *((float *)&a1 + 1) < *((float *)&a2 + 1);
  if ((_DWORD)a1 == (_DWORD)a2)
    return v3;
  else
    return a1 < a2;
}

BOOL GEOPolylineCoordinateIsABeforeOrEqualToB(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = *((float *)&a1 + 1) == *((float *)&a2 + 1) || *((float *)&a1 + 1) < *((float *)&a2 + 1);
  if ((_DWORD)a1 == (_DWORD)a2)
    return v2;
  else
    return a1 < a2;
}

BOOL GEOPolylineCoordinateRangeIsInvalid(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;
  _BOOL4 v3;

  if (*((float *)&a1 + 1) >= 0.0 && *((float *)&a2 + 1) >= 0.0)
  {
    v2 = a1 < a2;
    v3 = *((float *)&a1 + 1) == *((float *)&a2 + 1) || *((float *)&a1 + 1) < *((float *)&a2 + 1);
    if ((_DWORD)a1 == (_DWORD)a2)
      v2 = v3;
  }
  else
  {
    v2 = 0;
  }
  return !v2;
}

BOOL GEOPolylineCoordinateIsZero(uint64_t a1)
{
  return fabsf((float)a1 + *((float *)&a1 + 1)) < 0.001;
}

BOOL GEOPolylineCoordinateEqual(uint64_t a1, uint64_t a2)
{
  return vabds_f32((float)a1 + *((float *)&a1 + 1), (float)a2 + *((float *)&a2 + 1)) < 0.001;
}

BOOL GEOPolylineCoordinateEqualEps(uint64_t a1, uint64_t a2, double a3)
{
  return vabds_f32((float)a1 + *((float *)&a1 + 1), (float)a2 + *((float *)&a2 + 1)) < a3;
}

BOOL GEOPolylineCoordinateRangeEqual(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return vabds_f32((float)a1 + *((float *)&a1 + 1), (float)a3 + *((float *)&a3 + 1)) < 0.001
      && vabds_f32((float)a2 + *((float *)&a2 + 1), (float)a4 + *((float *)&a4 + 1)) < 0.001;
}

BOOL GEOPolylineCoordinateRangeEqualEps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  return vabds_f32((float)a1 + *((float *)&a1 + 1), (float)a3 + *((float *)&a3 + 1)) < a5
      && vabds_f32((float)a2 + *((float *)&a2 + 1), (float)a4 + *((float *)&a4 + 1)) < a5;
}

uint64_t GEOPolylineCoordinateCompare(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = -1;
  if (a1 < a2)
    v3 = -1;
  else
    v3 = 1;
  if (*((float *)&a1 + 1) >= *((float *)&a2 + 1))
    v2 = 1;
  if (*((float *)&a1 + 1) == *((float *)&a2 + 1))
    v2 = 0;
  if ((_DWORD)a1 == (_DWORD)a2)
    return v2;
  else
    return v3;
}

BOOL GEOPolylineCoordinateWithinRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;

  if ((_DWORD)a2 == (_DWORD)a1)
  {
    if (*((float *)&a2 + 1) > *((float *)&a1 + 1))
      return 0;
  }
  else if (a2 >= a1)
  {
    return 0;
  }
  v4 = *((float *)&a1 + 1) == *((float *)&a3 + 1) || *((float *)&a1 + 1) < *((float *)&a3 + 1);
  if ((_DWORD)a1 == (_DWORD)a3)
    return v4;
  else
    return a1 < a3;
}

BOOL GEOPolylineCoordinateIsABeforeB(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = *((float *)&a1 + 1) < *((float *)&a2 + 1);
  if (*((float *)&a1 + 1) == *((float *)&a2 + 1))
    v2 = 0;
  if ((_DWORD)a1 == (_DWORD)a2)
    return v2;
  else
    return a1 < a2;
}

BOOL GEOPolylineCoordinateInRange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL4 v4;

  if ((_DWORD)a2 == (_DWORD)a1)
  {
    if (*((float *)&a2 + 1) > *((float *)&a1 + 1))
      return 0;
  }
  else if (a2 >= a1)
  {
    return 0;
  }
  v4 = *((float *)&a1 + 1) == *((float *)&a3 + 1) || *((float *)&a1 + 1) < *((float *)&a3 + 1);
  if ((_DWORD)a1 == (_DWORD)a3)
    return v4;
  else
    return a1 < a3;
}

BOOL GEOPolylineCoordinateRangeIntersectsRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v5;
  _BOOL4 v6;

  if ((_DWORD)a2 == (_DWORD)a3)
  {
    if (*((float *)&a2 + 1) <= *((float *)&a3 + 1))
      return 0;
  }
  else if (a2 < a3)
  {
    return 0;
  }
  v5 = a4 < a1;
  v6 = *((float *)&a4 + 1) == *((float *)&a1 + 1) || *((float *)&a4 + 1) < *((float *)&a1 + 1);
  if ((_DWORD)a4 == (_DWORD)a1)
    v5 = v6;
  return !v5;
}

BOOL GEOPolylineCoordinateRangeEncompassesRange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v5;

  if ((_DWORD)a1 == (_DWORD)a3)
  {
    if (*((float *)&a1 + 1) > *((float *)&a3 + 1))
      return 0;
  }
  else if (a1 >= a3)
  {
    return 0;
  }
  v5 = *((float *)&a4 + 1) == *((float *)&a2 + 1) || *((float *)&a4 + 1) < *((float *)&a2 + 1);
  if ((_DWORD)a4 == (_DWORD)a2)
    return v5;
  else
    return a4 < a2;
}

uint64_t GEOPolylineCoordinateNearestIndex(uint64_t a1)
{
  unint64_t v1;

  v1 = vcvtas_u32_f32((float)a1 + *((float *)&a1 + 1));
  if (*((float *)&a1 + 1) >= 0.0)
    return v1;
  else
    return 0x7FFFFFFFFFFFFFFFLL;
}

id GEOPolylineCoordinateAsString(uint64_t a1, char a2, char a3, double a4)
{
  uint64_t v5;

  LODWORD(a4) = HIDWORD(a1);
  if ((a2 & 1) != 0)
  {
    if ((a3 & 1) != 0 || fabsf(*((float *)&a1 + 1)) >= 0.01)
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%0.2f"), (float)((float)a1 + *((float *)&a1 + 1)), (float)((float)a1 + *((float *)&a1 + 1)), v5);
    else
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u"), a4, a1, v5);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u, %0.2f"), *((float *)&a1 + 1), a1, *((float *)&a1 + 1));
  }
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t GEOPolylineCoordinateAsFullString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%u, %0.2f"), a1, *((float *)&a1 + 1));
}

id GEOPolylineCoordinateAsShortString(uint64_t a1, double a2)
{
  return GEOPolylineCoordinateAsString(a1, 1, 0, a2);
}

id GEOPolylineCoordinateRangeAsString(uint64_t a1, uint64_t a2, double a3)
{
  void *v4;
  void *v5;
  double v6;
  void *v7;
  void *v8;

  v4 = (void *)MEMORY[0x1E0CB3940];
  GEOPolylineCoordinateAsString(a1, 1, 0, a3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  GEOPolylineCoordinateAsString(a2, 1, 0, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringWithFormat:", CFSTR("%@ - %@"), v5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

BOOL GEOServicesStateReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  _BOOL8 v19;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        if ((v10 >> 3) == 1)
        {
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

        }
        else if (!PBReaderSkipValueWithTag())
        {
          goto LABEL_24;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v19 = v3[*v6] == 0;
  }
  else
  {
LABEL_24:
    v19 = 0;
  }
  objc_sync_exit(v3);

  return v19;
}

void sub_189656490(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOServicesStateReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOServicesStateReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896564F0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOServicesStateIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  _BOOL8 v16;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v14 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_26:
          v16 = 0;
          goto LABEL_25;
        }
      }
      else if (!PBReaderSkipValueWithTag())
      {
        goto LABEL_26;
      }
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v16 = a1[*v4] == 0;
LABEL_25:
  PBReaderRecallMark();
  return v16;
}

BOOL GEOListResultItemReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          if (v12 == -1 || v12 >= *(_QWORD *)&v3[*v5])
            break;
          v13 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v15 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v15 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v17 = 0;
            v18 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 36) |= 4u;
            while (1)
            {
              v20 = *v4;
              v21 = *(_QWORD *)&v3[v20];
              if (v21 == -1 || v21 >= *(_QWORD *)&v3[*v5])
                break;
              v22 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v21);
              *(_QWORD *)&v3[v20] = v21 + 1;
              v19 |= (unint64_t)(v22 & 0x7F) << v17;
              if ((v22 & 0x80) == 0)
                goto LABEL_65;
              v17 += 7;
              v14 = v18++ >= 9;
              if (v14)
              {
                LODWORD(v19) = 0;
                goto LABEL_67;
              }
            }
            v3[*v6] = 1;
LABEL_65:
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_67:
            v51 = 24;
            goto LABEL_85;
          case 2u:
            v23 = 0;
            v24 = 0;
            v25 = 0;
            *(_BYTE *)(a1 + 36) |= 0x20u;
            while (2)
            {
              v26 = *v4;
              v27 = *(_QWORD *)&v3[v26];
              if (v27 == -1 || v27 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v28 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v27);
                *(_QWORD *)&v3[v26] = v27 + 1;
                v25 |= (unint64_t)(v28 & 0x7F) << v23;
                if (v28 < 0)
                {
                  v23 += 7;
                  v14 = v24++ >= 9;
                  if (v14)
                  {
                    v25 = 0;
                    goto LABEL_71;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v25 = 0;
LABEL_71:
            v52 = v25 != 0;
            v53 = 33;
            goto LABEL_76;
          case 3u:
            v29 = 0;
            v30 = 0;
            v31 = 0;
            *(_BYTE *)(a1 + 36) |= 0x10u;
            while (2)
            {
              v32 = *v4;
              v33 = *(_QWORD *)&v3[v32];
              if (v33 == -1 || v33 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v34 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v33);
                *(_QWORD *)&v3[v32] = v33 + 1;
                v31 |= (unint64_t)(v34 & 0x7F) << v29;
                if (v34 < 0)
                {
                  v29 += 7;
                  v14 = v30++ >= 9;
                  if (v14)
                  {
                    v31 = 0;
                    goto LABEL_75;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v31 = 0;
LABEL_75:
            v52 = v31 != 0;
            v53 = 32;
LABEL_76:
            *(_BYTE *)(a1 + v53) = v52;
            continue;
          case 4u:
            v35 = 0;
            v36 = 0;
            v37 = 0;
            *(_BYTE *)(a1 + 36) |= 2u;
            while (2)
            {
              v38 = *v4;
              v39 = *(_QWORD *)&v3[v38];
              if (v39 == -1 || v39 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v40 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v39);
                *(_QWORD *)&v3[v38] = v39 + 1;
                v37 |= (unint64_t)(v40 & 0x7F) << v35;
                if (v40 < 0)
                {
                  v35 += 7;
                  v14 = v36++ >= 9;
                  if (v14)
                  {
                    v37 = 0;
                    goto LABEL_80;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              v37 = 0;
LABEL_80:
            v54 = 16;
            goto LABEL_90;
          case 5u:
            v41 = 0;
            v42 = 0;
            v19 = 0;
            *(_BYTE *)(a1 + 36) |= 8u;
            while (2)
            {
              v43 = *v4;
              v44 = *(_QWORD *)&v3[v43];
              if (v44 == -1 || v44 >= *(_QWORD *)&v3[*v5])
              {
                v3[*v6] = 1;
              }
              else
              {
                v45 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v44);
                *(_QWORD *)&v3[v43] = v44 + 1;
                v19 |= (unint64_t)(v45 & 0x7F) << v41;
                if (v45 < 0)
                {
                  v41 += 7;
                  v14 = v42++ >= 9;
                  if (v14)
                  {
                    LODWORD(v19) = 0;
                    goto LABEL_84;
                  }
                  continue;
                }
              }
              break;
            }
            if (v3[*v6])
              LODWORD(v19) = 0;
LABEL_84:
            v51 = 28;
LABEL_85:
            *(_DWORD *)(a1 + v51) = v19;
            continue;
          case 6u:
            v46 = 0;
            v47 = 0;
            v37 = 0;
            *(_BYTE *)(a1 + 36) |= 1u;
            break;
          default:
            if (!PBReaderSkipValueWithTag())
              goto LABEL_93;
            continue;
        }
        while (1)
        {
          v48 = *v4;
          v49 = *(_QWORD *)&v3[v48];
          if (v49 == -1 || v49 >= *(_QWORD *)&v3[*v5])
            break;
          v50 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v49);
          *(_QWORD *)&v3[v48] = v49 + 1;
          v37 |= (unint64_t)(v50 & 0x7F) << v46;
          if ((v50 & 0x80) == 0)
            goto LABEL_87;
          v46 += 7;
          v14 = v47++ >= 9;
          if (v14)
          {
            v37 = 0;
            goto LABEL_89;
          }
        }
        v3[*v6] = 1;
LABEL_87:
        if (v3[*v6])
          v37 = 0;
LABEL_89:
        v54 = 8;
LABEL_90:
        *(_QWORD *)(a1 + v54) = v37;
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v55 = v3[*v6] == 0;
  }
  else
  {
LABEL_93:
    v55 = 0;
  }
  objc_sync_exit(v3);

  return v55;
}

void sub_189658F48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOListResultItemReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOListResultItemReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189658FA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOListResultItemIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  _BOOL8 v46;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      if (v13 || (v8 & 7) == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v15 = 0;
          while (1)
          {
            v16 = *v2;
            v17 = *(_QWORD *)&a1[v16];
            if (v17 == -1 || v17 >= *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v18 = v17 + 1;
            v19 = *(char *)(*(_QWORD *)&a1[*v5] + v17);
            *(_QWORD *)&a1[v16] = v18;
            if (v19 < 0)
            {
              v20 = v15++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_70;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v21 = 0;
          while (1)
          {
            v22 = *v2;
            v23 = *(_QWORD *)&a1[v22];
            if (v23 == -1 || v23 >= *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v24 = v23 + 1;
            v25 = *(char *)(*(_QWORD *)&a1[*v5] + v23);
            *(_QWORD *)&a1[v22] = v24;
            if (v25 < 0)
            {
              v20 = v21++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_70;
          }
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v26 = 0;
          while (1)
          {
            v27 = *v2;
            v28 = *(_QWORD *)&a1[v27];
            if (v28 == -1 || v28 >= *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v29 = v28 + 1;
            v30 = *(char *)(*(_QWORD *)&a1[*v5] + v28);
            *(_QWORD *)&a1[v27] = v29;
            if (v30 < 0)
            {
              v20 = v26++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_70;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v31 = 0;
          while (1)
          {
            v32 = *v2;
            v33 = *(_QWORD *)&a1[v32];
            if (v33 == -1 || v33 >= *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v34 = v33 + 1;
            v35 = *(char *)(*(_QWORD *)&a1[*v5] + v33);
            *(_QWORD *)&a1[v32] = v34;
            if (v35 < 0)
            {
              v20 = v31++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_70;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v36 = 0;
          while (1)
          {
            v37 = *v2;
            v38 = *(_QWORD *)&a1[v37];
            if (v38 == -1 || v38 >= *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v39 = v38 + 1;
            v40 = *(char *)(*(_QWORD *)&a1[*v5] + v38);
            *(_QWORD *)&a1[v37] = v39;
            if (v40 < 0)
            {
              v20 = v36++ > 8;
              if (!v20)
                continue;
            }
            goto LABEL_70;
          }
        case 6u:
          if ((v8 & 7) != 0)
            goto LABEL_73;
          v41 = 0;
          break;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_73:
          v46 = 0;
          goto LABEL_72;
      }
      while (1)
      {
        v42 = *v2;
        v43 = *(_QWORD *)&a1[v42];
        if (v43 == -1 || v43 >= *(_QWORD *)&a1[*v3])
          break;
        v44 = v43 + 1;
        v45 = *(char *)(*(_QWORD *)&a1[*v5] + v43);
        *(_QWORD *)&a1[v42] = v44;
        if (v45 < 0)
        {
          v20 = v41++ > 8;
          if (!v20)
            continue;
        }
        goto LABEL_70;
      }
LABEL_69:
      a1[*v4] = 1;
LABEL_70:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v46 = a1[*v4] == 0;
LABEL_72:
  PBReaderRecallMark();
  return v46;
}

void sub_189659E94(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventListInteractionSessionReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  _BOOL4 v13;
  int *v14;
  BOOL v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  void *v42;
  GEOListResultItem *v43;
  int v44;
  char v45;
  char v46;
  char v47;
  int v48;
  int v49;
  void *v50;
  BOOL v52;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 36);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 32));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 48) >> 1) & 1) + ((*(unsigned __int8 *)(a1 + 48) >> 2) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = v9 & 1 | v10;
  v13 = v12 != 0;
  if ((v12 != 0) | v7 & 1)
    v14 = 0;
  else
    v14 = a3;
  if (v12)
    v15 = 1;
  else
    v15 = v14 == 0;
  v52 = v15;
  v16 = (int *)MEMORY[0x1E0D82BF0];
  v17 = (int *)MEMORY[0x1E0D82BC8];
  v18 = (int *)MEMORY[0x1E0D82BB8];
  v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  while (2)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_74;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v16;
      v24 = *(_QWORD *)(v3 + v23);
      if (v24 == -1 || v24 >= *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v24);
      *(_QWORD *)(v3 + v23) = v24 + 1;
      v22 |= (unint64_t)(v25 & 0x7F) << v20;
      if ((v25 & 0x80) == 0)
        goto LABEL_27;
      v20 += 7;
      v26 = v21++ >= 9;
      if (v26)
      {
        v22 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_29;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_27:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v22 = 0;
LABEL_29:
    if (v27 || (v22 & 7) == 4)
    {
LABEL_74:
      if (v13)
      {
        v47 = 1;
        goto LABEL_88;
      }
      if (!v14)
        goto LABEL_89;
      while (1)
      {
        while (1)
        {
          v49 = *v14++;
          v48 = v49;
          if (v49 != 2)
            break;
LABEL_79:
          *(_BYTE *)(a1 + v19[391]) |= v48;
        }
        if (v48 == 3)
        {
          LOBYTE(v48) = 4;
          goto LABEL_79;
        }
        if (!v48)
          goto LABEL_89;
      }
    }
    v29 = v22 >> 3;
    v30 = v13;
    if (!v52)
    {
      v31 = v14;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 3)
    {
      if (!v30)
        goto LABEL_61;
      if ((*(_BYTE *)(a1 + v19[391]) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
        {
LABEL_85:
          v47 = 0;
          goto LABEL_87;
        }
        v8 += *(unsigned __int8 *)(a1 + v19[391]) << 29 >> 31;
      }
      else
      {
        PBReaderReadString();
        v41 = objc_claimAutoreleasedReturnValue();
        v42 = *(void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v41;

        --v8;
      }
LABEL_69:
      v17 = (int *)MEMORY[0x1E0D82BC8];
      goto LABEL_70;
    }
    if ((_DWORD)v29 != 2)
    {
      if ((_DWORD)v29 != 1)
      {
        v44 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if (!v44)
          goto LABEL_84;
LABEL_70:
        if (v8)
          v46 = 1;
        else
          v46 = v13;
        if ((v46 & 1) == 0)
          goto LABEL_74;
        continue;
      }
      if ((v7 & 1) != 0)
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        *(_BYTE *)(a1 + v19[391]) |= 1u;
        while (1)
        {
          v38 = *v16;
          v39 = *(_QWORD *)(v3 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(v3 + *v6))
            break;
          v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if ((v40 & 0x80) == 0)
            goto LABEL_64;
          v35 += 7;
          v26 = v36++ >= 9;
          if (v26)
          {
            LODWORD(v37) = 0;
            goto LABEL_66;
          }
        }
        *(_BYTE *)(v3 + *v17) = 1;
LABEL_64:
        if (*(_BYTE *)(v3 + *v17))
          LODWORD(v37) = 0;
LABEL_66:
        *(_DWORD *)(a1 + 44) = v37;
        goto LABEL_70;
      }
LABEL_61:
      v45 = PBReaderSkipValueWithTag();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if ((v45 & 1) == 0)
      {
LABEL_84:
        v47 = 0;
        goto LABEL_88;
      }
      goto LABEL_70;
    }
    break;
  }
  if (!v30 || (*(_BYTE *)(a1 + v19[391]) & 2) != 0)
    goto LABEL_61;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_85;
  v43 = objc_alloc_init(GEOListResultItem);
  if (GEOListResultItemReadAllFrom((uint64_t)v43, (void *)v3))
  {
    PBReaderRecallMark();
    -[GEOLogMsgEventListInteractionSession _addNoFlagsListResultItem:](a1, v43);

    v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
    goto LABEL_69;
  }

  v47 = 0;
  v19 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
LABEL_87:
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_88:
  *(_BYTE *)(a1 + v19[391]) |= 2u;
  *(_BYTE *)(a1 + v19[391]) |= 4u;
  if ((v47 & 1) != 0)
  {
LABEL_89:
    v3 = *(_BYTE *)(v3 + *v17) == 0;
    if (v13)
      goto LABEL_90;
  }
  else
  {
    v3 = 0;
    if (v13)
    {
LABEL_90:
      v50 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;

    }
  }
  return v3;
}

void sub_18965A694(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18965AF14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOLogMsgEventListInteractionSessionCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 16);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * v5++), "readAll:", 1, (_QWORD)v6);
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

unint64_t GEOLogMsgEventListInteractionSessionReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 36))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOLogMsgEventListInteractionSessionReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 40));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 32) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 36) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOLogMsgEventListInteractionSessionReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOLogMsgEventListInteractionSessionReadAllFrom_initialTag;
  Specified = GEOLogMsgEventListInteractionSessionReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOLogMsgEventListInteractionSessionCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return Specified;
}

void sub_18965B19C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOLogMsgEventListInteractionSessionReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOLogMsgEventListInteractionSessionReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18965B1FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventListInteractionSessionIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  int v13;
  int v14;
  unint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _BOOL8 v23;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_39;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        if (v10 == -1 || v10 >= *(_QWORD *)&a1[*v3])
          break;
        v11 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v10 + 1;
        v8 |= (unint64_t)(v11 & 0x7F) << v6;
        if ((v11 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v13 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v13 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v14 = v8 & 7;
      if (v13 || v14 == 4)
        goto LABEL_39;
      v16 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v16 != 2)
      {
        if ((_DWORD)v16 == 1)
        {
          if ((v8 & 7) != 0)
            goto LABEL_41;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            if (v19 == -1 || v19 >= *(_QWORD *)&a1[*v3])
              break;
            v20 = v19 + 1;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0 && v17++ <= 8)
              continue;
            goto LABEL_38;
          }
          a1[*v4] = 1;
          goto LABEL_38;
        }
        goto LABEL_35;
      }
      if (v14 != 2 || !PBReaderPlaceMark() || !GEOListResultItemIsValid(a1))
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
      PBReaderRecallMark();
LABEL_38:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_39;
    }
    if (v14 != 2)
      goto LABEL_41;
LABEL_35:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_41;
    goto LABEL_38;
  }
LABEL_39:
  v23 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v23;
}

void sub_18965B69C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOLogMsgEventListInteractionSessionIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 40));
  v2 = (*(_BYTE *)(a1 + 48) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 40));
  return v2;
}

void sub_18965BAB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_GEOSingleTileSetMapRegionTileKeyEnumerator *GEOTileKeyEnumeratorForRegion(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  _GEOSingleTileSetMapRegionTileKeyEnumerator *v7;

  v5 = a2;
  v6 = a1;
  v7 = -[_GEOSingleTileSetMapRegionTileKeyEnumerator initWithMapRegion:tileSet:zoomMode:]([_GEOSingleTileSetMapRegionTileKeyEnumerator alloc], "initWithMapRegion:tileSet:zoomMode:", v6, v5, a3);

  return v7;
}

_GEOMultiTileKeyEnumerator *GEOTileKeyEnumeratorContainingEnumerators(void *a1)
{
  id v1;
  _GEOMultiTileKeyEnumerator *v2;

  v1 = a1;
  v2 = -[_GEOMultiTileKeyEnumerator initWithEnumerators:]([_GEOMultiTileKeyEnumerator alloc], "initWithEnumerators:", v1);

  return v2;
}

void sub_18965C06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18965C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18965CB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18965CEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18965D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_18965DB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_18965E3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_18965E4F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18965ED04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_18965F7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{

  _Unwind_Resume(a1);
}

void sub_18965FB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_18965FD4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_189660160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_18966039C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  void *v19;
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v21 - 112), 8);

  _Unwind_Resume(a1);
}

void sub_1896605D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a24, 8);
  _Unwind_Resume(a1);
}

void sub_189660894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_189660DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1896611A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_189661348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1896616B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL25GEOGetGEOComposedRouteLogv_block_invoke_2()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.GeoServices", "GEOComposedRoute");
  v1 = (void *)_MergedGlobals_307;
  _MergedGlobals_307 = (uint64_t)v0;

}

void sub_189662164(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentRequestReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int *v19;
  int *v20;
  int *v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  BOOL v29;
  int v30;
  unint64_t v32;
  BOOL v33;
  int *v34;
  int v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  GEOPDClientMetadata *v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  id v48;
  void *v49;
  int v50;
  char v51;
  char v52;
  int v53;
  int v54;
  char v55;
  void *v56;
  int v58;
  int *v59;
  char v60;
  char v61;
  char v62;
  char v63;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = v6;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v14 = 1;
    v15 = 1;
    v16 = 1;
    switch(a3[v11])
    {
      case -4:
        ++v13;
        v14 = v8;
        goto LABEL_8;
      case -3:
        v10 = 1;
        goto LABEL_7;
      case -2:
        v14 = v8;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v17 = v13 != 0;
        v60 = v17 & ~(_BYTE)v12 | v9;
        v61 = v17 | v12 | v60;
        if ((((v17 | v12) | v10) & 1) != 0)
          v18 = 0;
        else
          v18 = a3;
        v62 = (v18 == 0) | v17 | v12;
        v63 = v17 | v12;
        v19 = (int *)MEMORY[0x1E0D82BF0];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v21 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v13;
LABEL_7:
        v14 = v8;
        v15 = v9;
LABEL_8:
        v16 = v12;
LABEL_10:
        ++v11;
        v8 = v14;
        v9 = v15;
        v12 = v16;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v19) >= *(_QWORD *)(v3 + *v7) || *(_BYTE *)(v3 + *v20))
      goto LABEL_77;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    while (1)
    {
      v25 = *v19;
      v26 = *(_QWORD *)(v3 + v25);
      v27 = v26 + 1;
      if (v26 == -1 || v27 > *(_QWORD *)(v3 + *v7))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v26);
      *(_QWORD *)(v3 + v25) = v27;
      v24 |= (unint64_t)(v28 & 0x7F) << v22;
      if ((v28 & 0x80) == 0)
        goto LABEL_25;
      v22 += 7;
      v29 = v23++ >= 9;
      if (v29)
      {
        v24 = 0;
        v30 = *(unsigned __int8 *)(v3 + *v20);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v20) = 1;
LABEL_25:
    v30 = *(unsigned __int8 *)(v3 + *v20);
    if (*(_BYTE *)(v3 + *v20))
      v24 = 0;
LABEL_27:
    if (v30 || (v24 & 7) == 4)
    {
LABEL_77:
      v58 = 1;
      goto LABEL_78;
    }
    v32 = v24 >> 3;
    v33 = v63;
    if ((v62 & 1) == 0)
    {
      v34 = v18;
      do
      {
        v36 = *v34++;
        v35 = v36;
        v33 = v36 != 0;
        if (v36)
          v37 = v35 == (_DWORD)v32;
        else
          v37 = 1;
      }
      while (!v37);
    }
    if ((_DWORD)v32 == 3)
      break;
    if ((_DWORD)v32 == 2)
    {
      if ((v10 & 1) == 0)
        goto LABEL_64;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      *(_BYTE *)(a1 + 56) |= 1u;
      while (1)
      {
        v44 = *v19;
        v45 = *(_QWORD *)(v3 + v44);
        v46 = v45 + 1;
        if (v45 == -1 || v46 > *(_QWORD *)(v3 + *v7))
          break;
        v47 = *(_BYTE *)(*(_QWORD *)(v3 + *v21) + v45);
        *(_QWORD *)(v3 + v44) = v46;
        v43 |= (unint64_t)(v47 & 0x7F) << v41;
        if ((v47 & 0x80) == 0)
          goto LABEL_67;
        v41 += 7;
        v29 = v42++ >= 9;
        if (v29)
        {
          LODWORD(v43) = 0;
          goto LABEL_69;
        }
      }
      *(_BYTE *)(v3 + *v20) = 1;
LABEL_67:
      if (*(_BYTE *)(v3 + *v20))
        LODWORD(v43) = 0;
LABEL_69:
      *(_DWORD *)(a1 + 52) = v43;
    }
    else
    {
      if ((_DWORD)v32 == 1)
      {
        if (!v33)
          goto LABEL_64;
        if ((*(_BYTE *)(a1 + 56) & 8) == 0)
        {
          PBReaderReadString();
          v38 = objc_claimAutoreleasedReturnValue();
          v39 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v38;
          goto LABEL_49;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_97;
        v52 = 16 * *(_BYTE *)(a1 + 56);
LABEL_74:
        v11 += v52 >> 7;
LABEL_75:
        v20 = (int *)MEMORY[0x1E0D82BC8];
        v7 = (int *)MEMORY[0x1E0D82BD8];
        goto LABEL_76;
      }
      if ((v60 & 1) == 0 || (*(_BYTE *)(a1 + 56) & 2) != 0)
      {
LABEL_64:
        v51 = PBReaderSkipValueWithTag();
        v7 = (int *)MEMORY[0x1E0D82BD8];
        v20 = (int *)MEMORY[0x1E0D82BC8];
        if ((v51 & 1) == 0)
        {
          v58 = 0;
          goto LABEL_78;
        }
        goto LABEL_76;
      }
      if (!*(_QWORD *)(a1 + 16))
      {
        v48 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v49 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v48;

      }
      v50 = PBUnknownFieldAdd();
      v20 = (int *)MEMORY[0x1E0D82BC8];
      v7 = (int *)MEMORY[0x1E0D82BD8];
      if (!v50)
      {
        v58 = 0;
        v59 = &OBJC_IVAR___GEOTileCoordinate__x;
        goto LABEL_79;
      }
    }
LABEL_76:
    if (!(v61 & 1 | (v11 != 0)))
      goto LABEL_77;
  }
  if (!v33)
    goto LABEL_64;
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_97;
    v52 = 32 * *(_BYTE *)(a1 + 56);
    goto LABEL_74;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_97;
  v40 = objc_alloc_init(GEOPDClientMetadata);
  if (GEOPDClientMetadataReadAllFrom((uint64_t)v40, (void *)v3, v8 & 1))
  {
    PBReaderRecallMark();
    v39 = *(void **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v40;
LABEL_49:

    --v11;
    goto LABEL_75;
  }

LABEL_97:
  v58 = 0;
  v20 = (int *)MEMORY[0x1E0D82BC8];
LABEL_78:
  v59 = &OBJC_IVAR___GEOTileCoordinate__x;
  if ((v60 & 1) == 0)
    goto LABEL_80;
LABEL_79:
  *(_BYTE *)(a1 + v59[48]) |= 2u;
LABEL_80:
  if (v63 & 1 | ((v58 & 1) == 0))
  {
    *(_BYTE *)(a1 + v59[48]) |= 8u;
    *(_BYTE *)(a1 + v59[48]) |= 4u;
    goto LABEL_90;
  }
  if (v18)
  {
    while (2)
    {
      while (1)
      {
        v54 = *v18++;
        v53 = v54;
        if (v54 == 1)
          break;
        if (v53 == 3)
        {
          v55 = 4;
          goto LABEL_89;
        }
        if (!v53)
          goto LABEL_90;
      }
      v55 = 8;
LABEL_89:
      *(_BYTE *)(a1 + v59[48]) |= v55;
      continue;
    }
  }
LABEL_90:
  if (v58)
    v3 = *(_BYTE *)(v3 + *v20) == 0;
  else
    v3 = 0;
  if ((v63 & 1) != 0)
  {
    v56 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_189662A34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189663118(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentRequestReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABAssignmentRequestReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABAssignmentRequestReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABAssignmentRequestReadAllFrom_initialTag;
  Specified = GEOABAssignmentRequestReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_1896632BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABAssignmentRequestReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABAssignmentRequestReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18966331C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABAssignmentRequestIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v24;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDClientMetadataIsValid(a1))
          goto LABEL_41;
        PBReaderRecallMark();
      }
      else if ((_DWORD)v17 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_38;
        }
        a1[*v4] = 1;
      }
      else if ((_DWORD)v17 == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
LABEL_38:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v24 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v24;
}

void sub_189663710(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

os_unfair_lock_s *_GEOABAssignmentRequestIsDirty(uint64_t a1)
{
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 56) & 0x18) != 0)
    return (os_unfair_lock_s *)1;
  if ((*(_BYTE *)(a1 + 56) & 4) != 0)
    return GEOPDClientMetadataIsDirty(*(os_unfair_lock_s **)(a1 + 24));
  return 0;
}

os_unfair_lock_s *GEOABAssignmentRequestIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    v2 = _GEOABAssignmentRequestIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return v2;
  }
  return result;
}

void GEOABAssignmentRequestClearSensitiveFields(void *a1, uint64_t a2, int a3)
{
  void *v5;
  int HasSensitiveFields;
  void *v7;
  id *v8;

  if (a3
    && objc_msgSend(a1, "hasClientMetadata")
    && (objc_msgSend(a1, "clientMetadata"),
        v5 = (void *)objc_claimAutoreleasedReturnValue(),
        HasSensitiveFields = GEOPDClientMetadataHasSensitiveFields(v5),
        v5,
        HasSensitiveFields))
  {
    objc_msgSend(a1, "clientMetadata");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = (id *)objc_msgSend(v7, "copy");

    GEOPDClientMetadataClearSensitiveFields(v8, a2, 0);
    objc_msgSend(a1, "setClientMetadata:", v8);
  }
  else
  {
    objc_msgSend(a1, "clientMetadata");
    v8 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "clearSensitiveFields:", a2);
  }

}

void *GEOABAssignmentRequestHasSensitiveFields(void *result)
{
  void *v1;
  uint64_t HasSensitiveFields;

  if (result)
  {
    objc_msgSend(result, "clientMetadata");
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    HasSensitiveFields = GEOPDClientMetadataHasSensitiveFields(v1);

    return (void *)HasSensitiveFields;
  }
  return result;
}

void sub_189663BC0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189663E90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896640A0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896641E0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189664740(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189664880(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189665898(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABAssignmentResponseCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = a1[3];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v8);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  objc_msgSend(a1[5], "readAll:", 1);
  objc_msgSend(a1[7], "readAll:", 1);
  objc_msgSend(a1[11], "readAll:", 1);
  objc_msgSend(a1[8], "readAll:", 1);
  return objc_msgSend(a1[6], "readAll:", 1);
}

unint64_t GEOABAssignmentResponseReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABAssignmentResponseReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189665A48(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABAssignmentResponseIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BOOL8 v43;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      v18 = v8 >> 3;
      switch((v8 >> 3))
      {
        case 1u:
          if (v16 != 2)
            goto LABEL_79;
          goto LABEL_75;
        case 2u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOABExperimentAssignmentIsValid(a1))
            goto LABEL_79;
          goto LABEL_22;
        case 3u:
          if ((v8 & 7) != 0)
            goto LABEL_79;
          v19 = 0;
          while (1)
          {
            v20 = *v2;
            v21 = *(_QWORD *)&a1[v20];
            v22 = v21 + 1;
            if (v21 == -1 || v22 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v23 = *(char *)(*(_QWORD *)&a1[*v5] + v21);
            *(_QWORD *)&a1[v20] = v22;
            if (v23 < 0)
            {
              v24 = v19++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_76;
          }
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_79;
          v25 = 0;
          while (1)
          {
            v26 = *v2;
            v27 = *(_QWORD *)&a1[v26];
            v28 = v27 + 1;
            if (v27 == -1 || v28 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v29 = *(char *)(*(_QWORD *)&a1[*v5] + v27);
            *(_QWORD *)&a1[v26] = v28;
            if (v29 < 0)
            {
              v24 = v25++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_76;
          }
        case 5u:
          if ((v8 & 7) != 0)
            goto LABEL_79;
          v30 = 0;
          while (1)
          {
            v31 = *v2;
            v32 = *(_QWORD *)&a1[v31];
            v33 = v32 + 1;
            if (v32 == -1 || v33 > *(_QWORD *)&a1[*v3])
              goto LABEL_69;
            v34 = *(char *)(*(_QWORD *)&a1[*v5] + v32);
            *(_QWORD *)&a1[v31] = v33;
            if (v34 < 0)
            {
              v24 = v30++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_76;
          }
        case 6u:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOABClientConfigIsValid(a1))
            goto LABEL_79;
          goto LABEL_22;
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
          if (v16 != 2 || !PBReaderPlaceMark() || !GEOABSecondPartyPlaceRequestClientMetaDataIsValid(a1))
            goto LABEL_79;
LABEL_22:
          PBReaderRecallMark();
          goto LABEL_76;
        case 0xBu:
          if ((v8 & 7) != 0)
            goto LABEL_79;
          v35 = 0;
          while (1)
          {
            v36 = *v2;
            v37 = *(_QWORD *)&a1[v36];
            v38 = v37 + 1;
            if (v37 == -1 || v38 > *(_QWORD *)&a1[*v3])
              break;
            v39 = *(char *)(*(_QWORD *)&a1[*v5] + v37);
            *(_QWORD *)&a1[v36] = v38;
            if (v39 < 0)
            {
              v24 = v35++ > 8;
              if (!v24)
                continue;
            }
            goto LABEL_76;
          }
LABEL_69:
          v14 = *v4;
          goto LABEL_70;
        default:
          if ((_DWORD)v18 == 100)
          {
            if (v16 != 1)
              goto LABEL_79;
            v40 = *v2;
            v41 = *(_QWORD *)&a1[v40];
            if (v41 > 0xFFFFFFFFFFFFFFF7 || (v42 = v41 + 8, v42 > *(_QWORD *)&a1[*v3]))
LABEL_70:
              a1[v14] = 1;
            else
              *(_QWORD *)&a1[v40] = v42;
          }
          else
          {
            if ((_DWORD)v18 == 101 && v16 != 2)
            {
LABEL_79:
              PBReaderRecallMark();
              return 0;
            }
LABEL_75:
            if ((PBReaderSkipValueWithTag() & 1) == 0)
              goto LABEL_79;
          }
LABEL_76:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_77;
          break;
      }
    }
  }
LABEL_77:
  v43 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v43;
}

BOOL GEOABExperimentAssignmentIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  _BOOL8 v28;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v17 = 0;
          while (1)
          {
            v18 = *v2;
            v19 = *(_QWORD *)&a1[v18];
            v20 = v19 + 1;
            if (v19 == -1 || v20 > *(_QWORD *)&a1[*v3])
              goto LABEL_35;
            v21 = *(char *)(*(_QWORD *)&a1[*v5] + v19);
            *(_QWORD *)&a1[v18] = v20;
            if (v21 < 0)
            {
              v22 = v17++ > 8;
              if (!v22)
                continue;
            }
            goto LABEL_44;
          }
        case 2u:
          if ((v8 & 7) != 0)
            goto LABEL_47;
          v23 = 0;
          break;
        case 3u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        case 4u:
          if (v15 != 2 || !PBReaderPlaceMark() || !GEOABDebugPanelExperimentBranchIsValid(a1))
            goto LABEL_47;
          PBReaderRecallMark();
          continue;
        case 5u:
          if (v15 == 2)
            goto LABEL_43;
          goto LABEL_47;
        default:
LABEL_43:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            continue;
LABEL_47:
          PBReaderRecallMark();
          return 0;
      }
      while (1)
      {
        v24 = *v2;
        v25 = *(_QWORD *)&a1[v24];
        v26 = v25 + 1;
        if (v25 == -1 || v26 > *(_QWORD *)&a1[*v3])
          break;
        v27 = *(char *)(*(_QWORD *)&a1[*v5] + v25);
        *(_QWORD *)&a1[v24] = v26;
        if (v27 < 0)
        {
          v22 = v23++ > 8;
          if (!v22)
            continue;
        }
        goto LABEL_44;
      }
LABEL_35:
      a1[*v4] = 1;
LABEL_44:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v28 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v28;
}

BOOL GEOABClientConfigIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_32;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_32;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
        break;
      if ((_DWORD)v17 == 2)
      {
        if (v15 != 2)
          goto LABEL_33;
      }
      else if ((_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOABConfigKeyValuePairIsValid(a1))
          goto LABEL_33;
LABEL_28:
        PBReaderRecallMark();
        goto LABEL_31;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_33;
LABEL_31:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_32;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOABClientDebugPanelExperimentBranchIsValid(a1))
    {
LABEL_33:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_28;
  }
LABEL_32:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

BOOL GEOABSecondPartyPlaceRequestClientMetaDataIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  _BOOL8 v18;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_35;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_35;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 5)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOPDABClientDatasetMetadataIsValid(a1))
        {
LABEL_36:
          PBReaderRecallMark();
          return 0;
        }
        goto LABEL_32;
      }
      if ((_DWORD)v17 == 2)
        break;
      if ((_DWORD)v17 == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOABExperimentAssignmentIsValid(a1))
          goto LABEL_36;
LABEL_32:
        PBReaderRecallMark();
        goto LABEL_34;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_36;
LABEL_34:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_35;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOABClientConfigIsValid(a1))
      goto LABEL_36;
    goto LABEL_32;
  }
LABEL_35:
  v18 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v18;
}

void sub_1896668B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABAssignmentResponseIsDirty(uint64_t a1)
{
  __int16 v2;
  uint64_t v3;
  id v5;
  uint64_t v6;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 120));
  v2 = *(_WORD *)(a1 + 128);
  if ((v2 & 0x4840) != 0)
    return 1;
  if ((v2 & 0x80) != 0)
  {
    if ((GEOABClientConfigIsDirty(*(os_unfair_lock_s **)(a1 + 40)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 128);
  }
  if ((v2 & 0x200) != 0)
  {
    if ((GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 56)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 128);
  }
  if ((v2 & 0x1000) != 0)
  {
    if ((GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 88)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 128);
  }
  if ((v2 & 0x400) != 0)
  {
    if ((GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 64)) & 1) != 0)
      return 1;
    v2 = *(_WORD *)(a1 + 128);
  }
  if ((v2 & 0x100) == 0)
    goto LABEL_19;
  if ((GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(*(os_unfair_lock_s **)(a1 + 48)) & 1) != 0)
    return 1;
  v2 = *(_WORD *)(a1 + 128);
LABEL_19:
  if ((v2 & 0x2000) != 0)
    return 1;
  if ((v2 & 0x40) == 0)
    return 0;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v6 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v6)
          objc_enumerationMutation(v5);
        if ((GEOABExperimentAssignmentIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v8 + 1) + 8 * i)) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_32;
        }
      }
      v3 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_32:

  return v3;
}

os_unfair_lock_s *GEOABAssignmentResponseIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOABAssignmentResponseIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 30);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189667144(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189667970(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189667C4C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189667F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABBranchInfoReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned __int8 v15;
  int *v16;
  int *v17;
  int *v18;
  int *v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  int v28;
  unint64_t v30;
  BOOL v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  int v41;
  char v42;
  char v43;
  char v44;
  int v45;
  int v46;
  void *v47;
  int v49;
  int *v50;
  unsigned __int8 v51;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v10])
    {
      case -4:
        ++v11;
        v12 = v7;
        goto LABEL_8;
      case -3:
        v9 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_8;
      case 0:
        v14 = v11 != 0;
        v15 = v14 | v7;
        v51 = v14 & ~(_BYTE)v7 | v8;
        if ((((v14 | v7) | v9) & 1) != 0)
          v16 = 0;
        else
          v16 = a3;
        v17 = (int *)MEMORY[0x1E0D82BF0];
        v18 = (int *)MEMORY[0x1E0D82BC8];
        v19 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
        v13 = v8;
LABEL_8:
        ++v10;
        v7 = v12;
        v8 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v17) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v18))
      goto LABEL_59;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    while (1)
    {
      v23 = *v17;
      v24 = *(_QWORD *)(v3 + v23);
      v25 = v24 + 1;
      if (v24 == -1 || v25 > *(_QWORD *)(v3 + *v6))
        break;
      v26 = *(_BYTE *)(*(_QWORD *)(v3 + *v19) + v24);
      *(_QWORD *)(v3 + v23) = v25;
      v22 |= (unint64_t)(v26 & 0x7F) << v20;
      if ((v26 & 0x80) == 0)
        goto LABEL_23;
      v20 += 7;
      if (v21++ >= 9)
      {
        v22 = 0;
        v28 = *(unsigned __int8 *)(v3 + *v18);
        goto LABEL_25;
      }
    }
    *(_BYTE *)(v3 + *v18) = 1;
LABEL_23:
    v28 = *(unsigned __int8 *)(v3 + *v18);
    if (*(_BYTE *)(v3 + *v18))
      v22 = 0;
LABEL_25:
    if (v28 || (v22 & 7) == 4)
    {
LABEL_59:
      v49 = 1;
      goto LABEL_60;
    }
    v30 = v22 >> 3;
    v31 = v15;
    if (!((v16 == 0) | v15 & 1))
    {
      v32 = v16;
      do
      {
        v34 = *v32++;
        v33 = v34;
        v31 = v34 != 0;
        if (v34)
          v35 = v33 == (_DWORD)v30;
        else
          v35 = 1;
      }
      while (!v35);
    }
    if ((_DWORD)v30 == 2)
      break;
    if ((_DWORD)v30 == 1)
    {
      if (v31)
      {
        if ((*(_BYTE *)(a1 + 52) & 2) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_79;
          v43 = *(_BYTE *)(a1 + 52) << 6;
          goto LABEL_57;
        }
        PBReaderReadString();
        v36 = objc_claimAutoreleasedReturnValue();
        v37 = 24;
        goto LABEL_44;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v40 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v39;

      }
      v41 = PBUnknownFieldAdd();
      v18 = (int *)MEMORY[0x1E0D82BC8];
      if (!v41)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_62;
      }
      goto LABEL_58;
    }
LABEL_51:
    v42 = PBReaderSkipValueWithTag();
    v18 = (int *)MEMORY[0x1E0D82BC8];
    if ((v42 & 1) == 0)
    {
      v49 = 0;
LABEL_60:
      v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_61;
    }
LABEL_58:
    if (!((v15 | v51) & 1 | (v10 != 0)))
      goto LABEL_59;
  }
  if (!v31)
    goto LABEL_51;
  if ((*(_BYTE *)(a1 + 52) & 4) == 0)
  {
    PBReaderReadString();
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = 32;
LABEL_44:
    v38 = *(void **)(a1 + v37);
    *(_QWORD *)(a1 + v37) = v36;

    v18 = (int *)MEMORY[0x1E0D82BC8];
    --v10;
    goto LABEL_58;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
  {
    v43 = 32 * *(_BYTE *)(a1 + 52);
LABEL_57:
    v10 += v43 >> 7;
    v18 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_58;
  }
LABEL_79:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v18 = (int *)MEMORY[0x1E0D82BC8];
LABEL_61:
  if ((v51 & 1) == 0)
    goto LABEL_63;
LABEL_62:
  *(_BYTE *)(a1 + v50[410]) |= 1u;
LABEL_63:
  if (v15 & 1 | ((v49 & 1) == 0))
  {
    *(_BYTE *)(a1 + v50[410]) |= 2u;
    *(_BYTE *)(a1 + v50[410]) |= 4u;
    goto LABEL_73;
  }
  if (v16)
  {
    while (1)
    {
      v46 = *v16++;
      v45 = v46;
      if (v46 == 1)
        break;
      if (v45 == 2)
      {
        v44 = 4;
LABEL_69:
        *(_BYTE *)(a1 + v50[410]) |= v44;
      }
      else if (!v45)
      {
        goto LABEL_73;
      }
    }
    v44 = 2;
    goto LABEL_69;
  }
LABEL_73:
  if (v49)
  {
    v3 = *(_BYTE *)(v3 + *v18) == 0;
    if ((v15 & 1) == 0)
      return v3;
LABEL_77:
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  else
  {
    v3 = 0;
    if ((v15 & 1) != 0)
      goto LABEL_77;
  }
  return v3;
}

void sub_189668520(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189668A78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABBranchInfoReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABBranchInfoReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABBranchInfoReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABBranchInfoReadAllFrom_initialTag;
  Specified = GEOABBranchInfoReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_189668C00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABBranchInfoReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABBranchInfoReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189668C60(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABBranchInfoIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_27;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_27;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2)
          goto LABEL_29;
        goto LABEL_23;
      }
      if (!PBReaderSkipValueWithTag())
      {
LABEL_29:
        v17 = 0;
        goto LABEL_28;
      }
LABEL_26:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_27;
    }
    if (v15 != 2)
      goto LABEL_29;
LABEL_23:
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_29;
    goto LABEL_26;
  }
LABEL_27:
  v17 = a1[*v4] == 0;
LABEL_28:
  PBReaderRecallMark();
  return v17;
}

void sub_189668FAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABBranchInfoIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 52) & 0xE) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_189669254(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189669478(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896698C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189669A08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966A5CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOABClientConfigCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  _BYTE v21[128];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v21, 16);
    }
    while (v4);
  }

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v7 = *(id *)(a1 + 40);
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v12);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v12, v20, 16);
    }
    while (v9);
  }

}

unint64_t GEOABClientConfigReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABClientConfigReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18966A7BC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABConfigKeyValuePairIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  _BOOL8 v24;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      v17 = v8 >> 3;
      if ((v8 >> 3) == 3)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOABConfigValueIsValid(a1))
          goto LABEL_41;
        PBReaderRecallMark();
      }
      else if ((_DWORD)v17 == 2)
      {
        if ((v8 & 7) != 0)
          goto LABEL_41;
        v18 = 0;
        while (1)
        {
          v19 = *v2;
          v20 = *(_QWORD *)&a1[v19];
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
            break;
          v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
          *(_QWORD *)&a1[v19] = v21;
          if (v22 < 0 && v18++ <= 8)
            continue;
          goto LABEL_38;
        }
        a1[*v4] = 1;
      }
      else if ((_DWORD)v17 == 1 && v15 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
      {
LABEL_41:
        PBReaderRecallMark();
        return 0;
      }
LABEL_38:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v24 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v24;
}

BOOL GEOABClientDebugPanelExperimentBranchIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "position");
  objc_msgSend(a1, "length");
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (a1[*v4])
        goto LABEL_30;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        goto LABEL_30;
      if ((v8 >> 3) == 2)
        break;
      if ((v8 >> 3) == 1)
      {
        if (v15 != 2 || !PBReaderPlaceMark() || !GEOABDebugPanelExperimentBranchIsValid(a1))
          goto LABEL_31;
LABEL_27:
        PBReaderRecallMark();
        goto LABEL_29;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        goto LABEL_31;
LABEL_29:
      if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
        goto LABEL_30;
    }
    if (v15 != 2 || !PBReaderPlaceMark() || !GEOABConfigKeyValuePairIsValid(a1))
    {
LABEL_31:
      PBReaderRecallMark();
      return 0;
    }
    goto LABEL_27;
  }
LABEL_30:
  v17 = a1[*v4] == 0;
  PBReaderRecallMark();
  return v17;
}

void sub_18966AEC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABClientConfigIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 60) & 0x1E) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 8) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 40);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if ((GEOABClientDebugPanelExperimentBranchIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v7 + 1)
                                                                                                 + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

os_unfair_lock_s *GEOABClientConfigIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOABClientConfigIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18966B4B4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966B868(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966BC34(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABClientDebugPanelExperimentBranchReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  char v19;
  int *v20;
  int *v21;
  int *v22;
  int *v23;
  char v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  int v32;
  unint64_t v34;
  BOOL v35;
  int *v36;
  int v37;
  int v38;
  BOOL v39;
  GEOABDebugPanelExperimentBranch *v40;
  void *v41;
  id v42;
  void *v43;
  int v44;
  char v45;
  int v46;
  int v47;
  void *v48;
  int v50;
  int *v51;
  char v52;
  char v53;
  char v54;
  BOOL v55;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 52) >> 1) & 1)
      + (*(_BYTE *)(a1 + 52) & 1)
      + ((*(unsigned __int8 *)(a1 + 52) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v8])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v7 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 != 0;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v52 = v17;
        v19 = v18 | v17;
        if (((v18 | v7) & 1) != 0)
          v20 = 0;
        else
          v20 = a3;
        v55 = v18;
        v53 = v19;
        v54 = (v20 == 0) | v18;
        v21 = (int *)MEMORY[0x1E0D82BF0];
        v22 = (int *)MEMORY[0x1E0D82BC8];
        v23 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v8;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v21) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v22))
      goto LABEL_62;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    while (1)
    {
      v27 = *v21;
      v28 = *(_QWORD *)(v3 + v27);
      v29 = v28 + 1;
      if (v28 == -1 || v29 > *(_QWORD *)(v3 + *v6))
        break;
      v30 = *(_BYTE *)(*(_QWORD *)(v3 + *v23) + v28);
      *(_QWORD *)(v3 + v27) = v29;
      v26 |= (unint64_t)(v30 & 0x7F) << v24;
      if ((v30 & 0x80) == 0)
        goto LABEL_25;
      v24 += 7;
      if (v25++ >= 9)
      {
        v26 = 0;
        v32 = *(unsigned __int8 *)(v3 + *v22);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v22) = 1;
LABEL_25:
    v32 = *(unsigned __int8 *)(v3 + *v22);
    if (*(_BYTE *)(v3 + *v22))
      v26 = 0;
LABEL_27:
    if (v32 || (v26 & 7) == 4)
    {
LABEL_62:
      v50 = 1;
      goto LABEL_63;
    }
    v34 = v26 >> 3;
    v35 = v55;
    if ((v54 & 1) == 0)
    {
      v36 = v20;
      do
      {
        v38 = *v36++;
        v37 = v38;
        v35 = v38 != 0;
        if (v38)
          v39 = v37 == (_DWORD)v34;
        else
          v39 = 1;
      }
      while (!v39);
    }
    if ((_DWORD)v34 == 2)
      break;
    if ((_DWORD)v34 == 1)
    {
      if (v35)
      {
        if ((*(_BYTE *)(a1 + 52) & 4) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_82;
          v8 += *(unsigned __int8 *)(a1 + 52) << 29 >> 31;
        }
        else
        {
          if ((PBReaderPlaceMark() & 1) == 0)
            goto LABEL_82;
          v40 = objc_alloc_init(GEOABDebugPanelExperimentBranch);
          if (!GEOABDebugPanelExperimentBranchReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
            goto LABEL_81;
          PBReaderRecallMark();
          v41 = *(void **)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v40;

          --v8;
        }
        goto LABEL_60;
      }
    }
    else if ((v52 & 1) != 0 && (*(_BYTE *)(a1 + 52) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v42 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v43 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v42;

      }
      v44 = PBUnknownFieldAdd();
      v22 = (int *)MEMORY[0x1E0D82BC8];
      if (!v44)
      {
        v50 = 0;
        v51 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    v45 = PBReaderSkipValueWithTag();
    v22 = (int *)MEMORY[0x1E0D82BC8];
    if ((v45 & 1) == 0)
    {
      v50 = 0;
LABEL_63:
      v51 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_64;
    }
LABEL_61:
    if (!(v53 & 1 | (v8 != 0)))
      goto LABEL_62;
  }
  if (!v35 || (*(_BYTE *)(a1 + 52) & 2) != 0)
    goto LABEL_56;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_82;
  v40 = objc_alloc_init(GEOABConfigKeyValuePair);
  if (GEOABConfigKeyValuePairReadAllFrom((uint64_t)v40, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOABClientDebugPanelExperimentBranch _addNoFlagsConfigKeyValue:](a1, v40);

LABEL_60:
    v22 = (int *)MEMORY[0x1E0D82BC8];
    goto LABEL_61;
  }
LABEL_81:

LABEL_82:
  v50 = 0;
  v51 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v22 = (int *)MEMORY[0x1E0D82BC8];
LABEL_64:
  if ((v52 & 1) == 0)
    goto LABEL_66;
LABEL_65:
  *(_BYTE *)(a1 + v51[415]) |= 1u;
LABEL_66:
  if (v55 || (v50 & 1) == 0)
  {
    *(_BYTE *)(a1 + v51[415]) |= 4u;
    *(_BYTE *)(a1 + v51[415]) |= 2u;
    goto LABEL_75;
  }
  if (v20)
  {
    while (1)
    {
      v47 = *v20++;
      v46 = v47;
      if (v47 == 1)
        break;
      if (v46 == 2)
      {
LABEL_71:
        *(_BYTE *)(a1 + v51[415]) |= v46;
      }
      else if (!v46)
      {
        goto LABEL_75;
      }
    }
    LOBYTE(v46) = 4;
    goto LABEL_71;
  }
LABEL_75:
  if (v50)
    v3 = *(_BYTE *)(v3 + *v22) == 0;
  else
    v3 = 0;
  if (v55)
  {
    v48 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18966C2A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966CC58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void _GEOABClientDebugPanelExperimentBranchCallReadAllRecursiveWithoutSynchronized(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v2 = *(id *)(a1 + 24);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "readAll:", 1, (_QWORD)v7);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

unint64_t GEOABClientDebugPanelExperimentBranchReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABClientDebugPanelExperimentBranchReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABClientDebugPanelExperimentBranchReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABClientDebugPanelExperimentBranchReadAllFrom_initialTag;
  Specified = GEOABClientDebugPanelExperimentBranchReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOABClientDebugPanelExperimentBranchCallReadAllRecursiveWithoutSynchronized(a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18966CEF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABClientDebugPanelExperimentBranchReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABClientDebugPanelExperimentBranchReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18966CF58(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABDebugPanelExperimentBranchIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v14;
  int v15;
  _BOOL8 v17;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    while (!a1[*v4])
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = a1[*v4];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = a1[*v4];
      if (a1[*v4])
        v8 = 0;
LABEL_14:
      v15 = v8 & 7;
      if (v14 || v15 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if (v15 != 2)
            goto LABEL_32;
          goto LABEL_28;
        case 2u:
          if (v15 == 2)
            goto LABEL_28;
          goto LABEL_32;
        case 3u:
          if (v15 == 2)
            goto LABEL_28;
          goto LABEL_32;
        case 4u:
          if (v15 != 2)
            goto LABEL_32;
LABEL_28:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
          {
LABEL_32:
            v17 = 0;
            goto LABEL_31;
          }
LABEL_29:
          if (*(_QWORD *)&a1[*v2] >= *(_QWORD *)&a1[*v3])
            goto LABEL_30;
          break;
        default:
          if (!PBReaderSkipValueWithTag())
            goto LABEL_32;
          goto LABEL_29;
      }
    }
  }
LABEL_30:
  v17 = a1[*v4] == 0;
LABEL_31:
  PBReaderRecallMark();
  return v17;
}

void sub_18966D388(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABClientDebugPanelExperimentBranchIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = *(unsigned __int8 *)(a1 + 52);
  if ((v2 & 8) != 0)
    return 1;
  if ((v2 & 4) != 0)
  {
    if (GEOABDebugPanelExperimentBranchIsDirty(*(_QWORD *)(a1 + 32)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 52);
  }
  return (v2 >> 1) & 1;
}

os_unfair_lock_s *GEOABClientDebugPanelExperimentBranchIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOABClientDebugPanelExperimentBranchIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 12);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_18966D79C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966DA90(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966DDD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABConfigKeyValuePairReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  int *v15;
  int *v16;
  int *v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  int v27;
  unint64_t v29;
  BOOL v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  GEOABConfigValue *v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  id v45;
  void *v46;
  int v47;
  char v48;
  char v49;
  int v50;
  int v51;
  char v52;
  void *v53;
  int v55;
  int *v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 44);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 40));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = ((*(unsigned __int8 *)(a1 + 56) >> 2) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 56) >> 1) & 1);
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 != 0;
        v57 = v14 & ~(_BYTE)v10 | v7;
        v58 = v14 | v10 | v57;
        if ((((v14 | v10) | v8) & 1) != 0)
          v15 = 0;
        else
          v15 = a3;
        v59 = (v15 == 0) | v14 | v10;
        v60 = v14 | v10;
        v16 = (int *)MEMORY[0x1E0D82BF0];
        v17 = (int *)MEMORY[0x1E0D82BC8];
        v18 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v16) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v17))
      goto LABEL_76;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v16;
      v23 = *(_QWORD *)(v3 + v22);
      v24 = v23 + 1;
      if (v23 == -1 || v24 > *(_QWORD *)(v3 + *v6))
        break;
      v25 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v24;
      v21 |= (unint64_t)(v25 & 0x7F) << v19;
      if ((v25 & 0x80) == 0)
        goto LABEL_24;
      v19 += 7;
      v26 = v20++ >= 9;
      if (v26)
      {
        v21 = 0;
        v27 = *(unsigned __int8 *)(v3 + *v17);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v17) = 1;
LABEL_24:
    v27 = *(unsigned __int8 *)(v3 + *v17);
    if (*(_BYTE *)(v3 + *v17))
      v21 = 0;
LABEL_26:
    if (v27 || (v21 & 7) == 4)
    {
LABEL_76:
      v55 = 1;
      goto LABEL_77;
    }
    v29 = v21 >> 3;
    v30 = v60;
    if ((v59 & 1) == 0)
    {
      v31 = v15;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 == 3)
      break;
    if ((_DWORD)v29 == 2)
    {
      if ((v8 & 1) == 0)
        goto LABEL_63;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      *(_BYTE *)(a1 + 56) |= 1u;
      while (1)
      {
        v41 = *v16;
        v42 = *(_QWORD *)(v3 + v41);
        v43 = v42 + 1;
        if (v42 == -1 || v43 > *(_QWORD *)(v3 + *v6))
          break;
        v44 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v42);
        *(_QWORD *)(v3 + v41) = v43;
        v40 |= (unint64_t)(v44 & 0x7F) << v38;
        if ((v44 & 0x80) == 0)
          goto LABEL_66;
        v38 += 7;
        v26 = v39++ >= 9;
        if (v26)
        {
          LODWORD(v40) = 0;
          goto LABEL_68;
        }
      }
      *(_BYTE *)(v3 + *v17) = 1;
LABEL_66:
      if (*(_BYTE *)(v3 + *v17))
        LODWORD(v40) = 0;
LABEL_68:
      *(_DWORD *)(a1 + 52) = v40;
    }
    else
    {
      if ((_DWORD)v29 == 1)
      {
        if (!v30)
          goto LABEL_63;
        if ((*(_BYTE *)(a1 + 56) & 4) == 0)
        {
          PBReaderReadString();
          v35 = objc_claimAutoreleasedReturnValue();
          v36 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v35;
          goto LABEL_48;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_96;
        v49 = 32 * *(_BYTE *)(a1 + 56);
LABEL_73:
        v9 += v49 >> 7;
LABEL_74:
        v17 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_75;
      }
      if ((v57 & 1) == 0 || (*(_BYTE *)(a1 + 56) & 2) != 0)
      {
LABEL_63:
        v48 = PBReaderSkipValueWithTag();
        v17 = (int *)MEMORY[0x1E0D82BC8];
        if ((v48 & 1) == 0)
        {
          v55 = 0;
          goto LABEL_77;
        }
        goto LABEL_75;
      }
      if (!*(_QWORD *)(a1 + 16))
      {
        v45 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v46 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v45;

      }
      v47 = PBUnknownFieldAdd();
      v17 = (int *)MEMORY[0x1E0D82BC8];
      if (!v47)
      {
        v55 = 0;
        v56 = &OBJC_IVAR___GEOTileCoordinate__x;
        goto LABEL_78;
      }
    }
LABEL_75:
    if (!(v58 & 1 | (v9 != 0)))
      goto LABEL_76;
  }
  if (!v30)
    goto LABEL_63;
  if ((*(_BYTE *)(a1 + 56) & 8) != 0)
  {
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      goto LABEL_96;
    v49 = 16 * *(_BYTE *)(a1 + 56);
    goto LABEL_73;
  }
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_96;
  v37 = objc_alloc_init(GEOABConfigValue);
  if (GEOABConfigValueReadAllFrom((uint64_t)v37, (void *)v3))
  {
    PBReaderRecallMark();
    v36 = *(void **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v37;
LABEL_48:

    --v9;
    goto LABEL_74;
  }

LABEL_96:
  v55 = 0;
  v17 = (int *)MEMORY[0x1E0D82BC8];
LABEL_77:
  v56 = &OBJC_IVAR___GEOTileCoordinate__x;
  if ((v57 & 1) == 0)
    goto LABEL_79;
LABEL_78:
  *(_BYTE *)(a1 + v56[92]) |= 2u;
LABEL_79:
  if (v60 & 1 | ((v55 & 1) == 0))
  {
    *(_BYTE *)(a1 + v56[92]) |= 4u;
    *(_BYTE *)(a1 + v56[92]) |= 8u;
    goto LABEL_89;
  }
  if (v15)
  {
    while (2)
    {
      while (1)
      {
        v51 = *v15++;
        v50 = v51;
        if (v51 == 1)
          break;
        if (v50 == 3)
        {
          v52 = 8;
          goto LABEL_88;
        }
        if (!v50)
          goto LABEL_89;
      }
      v52 = 4;
LABEL_88:
      *(_BYTE *)(a1 + v56[92]) |= v52;
      continue;
    }
  }
LABEL_89:
  if (v55)
    v3 = *(_BYTE *)(v3 + *v17) == 0;
  else
    v3 = 0;
  if ((v60 & 1) != 0)
  {
    v53 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18966E6A4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966EDDC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABConfigKeyValuePairReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 44))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABConfigKeyValuePairReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 48));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 40) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 44) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABConfigKeyValuePairReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABConfigKeyValuePairReadAllFrom_initialTag;
  Specified = GEOABConfigKeyValuePairReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 32), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return Specified;
}

void sub_18966EF80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABConfigKeyValuePairReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABConfigKeyValuePairReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_18966EFE0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABConfigValueIsValid(char *a1)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  _BOOL8 v32;

  objc_msgSend(a1, "length", objc_msgSend(a1, "position"));
  v2 = (int *)MEMORY[0x1E0D82BF0];
  v3 = (int *)MEMORY[0x1E0D82BD8];
  v4 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)&a1[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&a1[*MEMORY[0x1E0D82BD8]])
  {
    v5 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (a1[*v4])
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = *v2;
        v10 = *(_QWORD *)&a1[v9];
        v11 = v10 + 1;
        if (v10 == -1 || v11 > *(_QWORD *)&a1[*v3])
          break;
        v12 = *(_BYTE *)(*(_QWORD *)&a1[*v5] + v10);
        *(_QWORD *)&a1[v9] = v11;
        v8 |= (unint64_t)(v12 & 0x7F) << v6;
        if ((v12 & 0x80) == 0)
          goto LABEL_12;
        v6 += 7;
        if (v7++ >= 9)
        {
          v8 = 0;
          v14 = *v4;
          v15 = a1[v14];
          goto LABEL_14;
        }
      }
      a1[*v4] = 1;
LABEL_12:
      v14 = *v4;
      v15 = a1[v14];
      if (a1[v14])
        v8 = 0;
LABEL_14:
      v16 = v8 & 7;
      if (v15 || v16 == 4)
        break;
      switch((v8 >> 3))
      {
        case 1u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v18 = 0;
          while (1)
          {
            v19 = *v2;
            v20 = *(_QWORD *)&a1[v19];
            v21 = v20 + 1;
            if (v20 == -1 || v21 > *(_QWORD *)&a1[*v3])
              goto LABEL_44;
            v22 = *(char *)(*(_QWORD *)&a1[*v5] + v20);
            *(_QWORD *)&a1[v19] = v21;
            if (v22 < 0)
            {
              v23 = v18++ > 8;
              if (!v23)
                continue;
            }
            goto LABEL_46;
          }
        case 2u:
          if (v16 != 1)
            goto LABEL_49;
          v24 = *v2;
          v25 = *(_QWORD *)&a1[v24];
          if (v25 > 0xFFFFFFFFFFFFFFF7)
            goto LABEL_45;
          v26 = v25 + 8;
          if (v26 > *(_QWORD *)&a1[*v3])
            goto LABEL_45;
          *(_QWORD *)&a1[v24] = v26;
          continue;
        case 3u:
          if (v16 != 2 || (PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_49;
          continue;
        case 4u:
          if ((v8 & 7) != 0)
            goto LABEL_49;
          v27 = 0;
          break;
        default:
          if (PBReaderSkipValueWithTag())
            continue;
LABEL_49:
          v32 = 0;
          goto LABEL_48;
      }
      while (1)
      {
        v28 = *v2;
        v29 = *(_QWORD *)&a1[v28];
        v30 = v29 + 1;
        if (v29 == -1 || v30 > *(_QWORD *)&a1[*v3])
          break;
        v31 = *(char *)(*(_QWORD *)&a1[*v5] + v29);
        *(_QWORD *)&a1[v28] = v30;
        if (v31 < 0)
        {
          v23 = v27++ > 8;
          if (!v23)
            continue;
        }
        goto LABEL_46;
      }
LABEL_44:
      v14 = *v4;
LABEL_45:
      a1[v14] = 1;
LABEL_46:
      ;
    }
    while (*(_QWORD *)&a1[*v2] < *(_QWORD *)&a1[*v3]);
  }
  v32 = a1[*v4] == 0;
LABEL_48:
  PBReaderRecallMark();
  return v32;
}

void sub_18966F43C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABConfigKeyValuePairIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 48));
  v2 = (*(_BYTE *)(a1 + 56) & 0x1C) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 48));
  return v2;
}

void sub_18966F744(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18966FA14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABConfigValueReadAllFrom(uint64_t a1, void *a2)
{
  char *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  _BOOL8 v39;

  v3 = a2;
  objc_sync_enter(v3);
  if (v3)
  {
    v4 = (int *)MEMORY[0x1E0D82BF0];
    v5 = (int *)MEMORY[0x1E0D82BD8];
    v6 = (int *)MEMORY[0x1E0D82BC8];
    if (*(_QWORD *)&v3[*MEMORY[0x1E0D82BF0]] < *(_QWORD *)&v3[*MEMORY[0x1E0D82BD8]])
    {
      v7 = (int *)MEMORY[0x1E0D82BB8];
      do
      {
        if (v3[*v6])
          break;
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v4;
          v12 = *(_QWORD *)&v3[v11];
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)&v3[*v5])
            break;
          v14 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v12);
          *(_QWORD *)&v3[v11] = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_13;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = v3[*v6];
            goto LABEL_15;
          }
        }
        v3[*v6] = 1;
LABEL_13:
        v16 = v3[*v6];
        if (v3[*v6])
          v10 = 0;
LABEL_15:
        if (v16 || (v10 & 7) == 4)
          break;
        switch((v10 >> 3))
        {
          case 1u:
            v18 = 0;
            v19 = 0;
            v20 = 0;
            *(_BYTE *)(a1 + 44) |= 2u;
            while (1)
            {
              v21 = *v4;
              v22 = *(_QWORD *)&v3[v21];
              v23 = v22 + 1;
              if (v22 == -1 || v23 > *(_QWORD *)&v3[*v5])
                break;
              v24 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v22);
              *(_QWORD *)&v3[v21] = v23;
              v20 |= (unint64_t)(v24 & 0x7F) << v18;
              if ((v24 & 0x80) == 0)
                goto LABEL_43;
              v18 += 7;
              v15 = v19++ >= 9;
              if (v15)
              {
                v20 = 0;
                goto LABEL_45;
              }
            }
            v3[*v6] = 1;
LABEL_43:
            if (v3[*v6])
              v20 = 0;
LABEL_45:
            *(_QWORD *)(a1 + 24) = -(v20 & 1) ^ (v20 >> 1);
            break;
          case 2u:
            *(_BYTE *)(a1 + 44) |= 1u;
            v27 = *v4;
            v28 = *(_QWORD *)&v3[v27];
            if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(_QWORD *)&v3[*v5])
            {
              v29 = *(_QWORD *)(*(_QWORD *)&v3[*v7] + v28);
              *(_QWORD *)&v3[v27] = v28 + 8;
            }
            else
            {
              v3[*v6] = 1;
              v29 = 0;
            }
            *(_QWORD *)(a1 + 16) = v29;
            break;
          case 3u:
            PBReaderReadString();
            v30 = objc_claimAutoreleasedReturnValue();
            v31 = *(void **)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v30;

            break;
          case 4u:
            v32 = 0;
            v33 = 0;
            v34 = 0;
            *(_BYTE *)(a1 + 44) |= 4u;
            while (1)
            {
              v35 = *v4;
              v36 = *(_QWORD *)&v3[v35];
              v37 = v36 + 1;
              if (v36 == -1 || v37 > *(_QWORD *)&v3[*v5])
                break;
              v38 = *(_BYTE *)(*(_QWORD *)&v3[*v7] + v36);
              *(_QWORD *)&v3[v35] = v37;
              v34 |= (unint64_t)(v38 & 0x7F) << v32;
              if ((v38 & 0x80) == 0)
                goto LABEL_47;
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v34 = 0;
                goto LABEL_49;
              }
            }
            v3[*v6] = 1;
LABEL_47:
            if (v3[*v6])
              v34 = 0;
LABEL_49:
            *(_BYTE *)(a1 + 40) = v34 != 0;
            break;
          default:
            if (!*(_QWORD *)(a1 + 8))
            {
              v25 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
              v26 = *(void **)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v25;

            }
            if (!PBUnknownFieldAdd())
              goto LABEL_54;
            break;
        }
      }
      while (*(_QWORD *)&v3[*v4] < *(_QWORD *)&v3[*v5]);
    }
    v39 = v3[*v6] == 0;
  }
  else
  {
LABEL_54:
    v39 = 0;
  }
  objc_sync_exit(v3);

  return v39;
}

void sub_189670618(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABConfigValueReadFrom(uint64_t a1, void *a2)
{
  id v3;
  _BOOL8 AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABConfigValueReadAllFrom(a1, v3);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189670678(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189670E28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABDebugPanelExperimentBranchReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unsigned __int8 v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  int v41;
  void *v42;
  char v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  char v50;
  char v51;
  char v52;
  BOOL v53;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 60);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 56));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)vdup_n_s16(*(unsigned __int8 *)(a1 + 68)), (uint16x4_t)0xFFFEFFFFFFFDFFFCLL) & 0xFF01FF01FF01FF01))+ (*(_BYTE *)(a1 + 68) & 1));
  while (2)
  {
    v12 = 1;
    v13 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v11;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
      case -1:
        goto LABEL_9;
      case 0:
        v14 = v11 > 2;
        v15 = v14 & ~(_BYTE)v10 | v7;
        v16 = v14 | v10;
        v50 = v15;
        v51 = v16 | v15;
        if (((v16 | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v52 = (v17 == 0) | v16;
        v53 = v16;
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v11;
LABEL_7:
        v12 = v7;
LABEL_8:
        v13 = v10;
LABEL_9:
        ++v9;
        v7 = v12;
        v10 = v13;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_69;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_24;
      v21 += 7;
      if (v22++ >= 9)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_26;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_24:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_26:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_69:
      v49 = 1;
      goto LABEL_70;
    }
    v31 = v23 >> 3;
    v32 = v53;
    if ((v52 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 8) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 40;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = 16 * *(_BYTE *)(a1 + 68);
        goto LABEL_67;
      case 2:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 48;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_67;
      case 3:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 2) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 24;
          goto LABEL_56;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_86;
        v44 = *(_BYTE *)(a1 + 68) << 6;
        goto LABEL_67;
      case 4:
        if (!v32)
          goto LABEL_57;
        if ((*(_BYTE *)(a1 + 68) & 4) == 0)
        {
          PBReaderReadString();
          v37 = objc_claimAutoreleasedReturnValue();
          v38 = 32;
LABEL_56:
          v42 = *(void **)(a1 + v38);
          *(_QWORD *)(a1 + v38) = v37;

          v19 = (int *)MEMORY[0x1E0D82BC8];
          --v9;
LABEL_68:
          if (!(v51 & 1 | (v9 != 0)))
            goto LABEL_69;
          continue;
        }
        if ((PBReaderSkipValueWithTag() & 1) != 0)
        {
          v44 = 32 * *(_BYTE *)(a1 + 68);
LABEL_67:
          v9 += v44 >> 7;
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_68;
        }
LABEL_86:
        v49 = 0;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_70:
        if ((v50 & 1) != 0)
LABEL_71:
          *(_BYTE *)(a1 + 68) |= 1u;
        if (v53 || (v49 & 1) == 0)
        {
          *(_BYTE *)(a1 + 68) |= 8u;
          *(_BYTE *)(a1 + 68) |= 0x10u;
          *(_BYTE *)(a1 + 68) |= 2u;
          *(_BYTE *)(a1 + 68) |= 4u;
        }
        else if (v17)
        {
          while (1)
          {
            v45 = *v17++;
            v46 = 8;
            switch(v45)
            {
              case 0:
                goto LABEL_80;
              case 1:
                goto LABEL_79;
              case 2:
                v46 = 16;
                goto LABEL_79;
              case 3:
                v46 = 2;
                goto LABEL_79;
              case 4:
                v46 = 4;
LABEL_79:
                *(_BYTE *)(a1 + 68) |= v46;
                break;
              default:
                continue;
            }
          }
        }
LABEL_80:
        if (v49)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if (v53)
        {
          v47 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      default:
        if ((v50 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 1) != 0)
        {
LABEL_57:
          v43 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v43 & 1) == 0)
          {
            v49 = 0;
            goto LABEL_70;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v39 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v40 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v39;

          }
          v41 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v41)
          {
            v49 = 0;
            goto LABEL_71;
          }
        }
        goto LABEL_68;
    }
  }
}

void sub_189671534(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189671670(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896717AC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189671E40(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABDebugPanelExperimentBranchReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 60))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABDebugPanelExperimentBranchReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 64));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 56) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 60) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABDebugPanelExperimentBranchReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABDebugPanelExperimentBranchReadAllFrom_initialTag;
  Specified = GEOABDebugPanelExperimentBranchReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return Specified;
}

void sub_189671FC8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABDebugPanelExperimentBranchReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABDebugPanelExperimentBranchReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189672028(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896721FC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL GEOABDebugPanelExperimentBranchIsDirty(uint64_t a1)
{
  _BOOL8 v2;

  if (!a1)
    return 0;
  os_unfair_lock_lock_with_options();
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 64));
  v2 = (*(_BYTE *)(a1 + 68) & 0x3E) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 64));
  return v2;
}

void sub_189672514(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1896727D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189673428(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABExperimentAssignmentReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;
  char v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  BOOL v28;
  int v29;
  unint64_t v31;
  BOOL v32;
  int *v33;
  int v34;
  int v35;
  BOOL v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  id v44;
  void *v45;
  int v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  GEOABDebugPanelExperimentBranch *v55;
  void *v56;
  char v57;
  uint64_t v58;
  char v59;
  int v60;
  char v61;
  void *v62;
  int v64;
  int *v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = vaddv_s16((int16x4_t)(*(_QWORD *)&vshl_u16((uint16x4_t)(*(_QWORD *)&vdup_n_s16(*(unsigned __int8 *)(a1 + 68)) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFEFFFCFFFBFFFDLL) & 0xFF01FF01FF01FF01));
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v9])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v66 = v16 & ~(_BYTE)v11 | v7;
        v67 = v8;
        v68 = v16 | v11 | v66;
        if ((((v16 | v11) | v8) & 1) != 0)
          v17 = 0;
        else
          v17 = a3;
        v69 = (v17 == 0) | v16 | v11;
        v70 = v16 | v11;
        v18 = (int *)MEMORY[0x1E0D82BF0];
        v19 = (int *)MEMORY[0x1E0D82BC8];
        v20 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v7;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v9;
        v7 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (2)
  {
    if (*(_QWORD *)(v3 + *v18) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v19))
      goto LABEL_94;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v24 = *v18;
      v25 = *(_QWORD *)(v3 + v24);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(v3 + *v6))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v25);
      *(_QWORD *)(v3 + v24) = v26;
      v23 |= (unint64_t)(v27 & 0x7F) << v21;
      if ((v27 & 0x80) == 0)
        goto LABEL_25;
      v21 += 7;
      v28 = v22++ >= 9;
      if (v28)
      {
        v23 = 0;
        v29 = *(unsigned __int8 *)(v3 + *v19);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v19) = 1;
LABEL_25:
    v29 = *(unsigned __int8 *)(v3 + *v19);
    if (*(_BYTE *)(v3 + *v19))
      v23 = 0;
LABEL_27:
    if (v29 || (v23 & 7) == 4)
    {
LABEL_94:
      v64 = 1;
      goto LABEL_95;
    }
    v31 = v23 >> 3;
    v32 = v70;
    if ((v69 & 1) == 0)
    {
      v33 = v17;
      do
      {
        v35 = *v33++;
        v34 = v35;
        v32 = v35 != 0;
        if (v35)
          v36 = v34 == (_DWORD)v31;
        else
          v36 = 1;
      }
      while (!v36);
    }
    switch((int)v31)
    {
      case 1:
        if ((v67 & 1) == 0)
          goto LABEL_74;
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (1)
        {
          v40 = *v18;
          v41 = *(_QWORD *)(v3 + v40);
          v42 = v41 + 1;
          if (v41 == -1 || v42 > *(_QWORD *)(v3 + *v6))
            break;
          v43 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v41);
          *(_QWORD *)(v3 + v40) = v42;
          v39 |= (unint64_t)(v43 & 0x7F) << v37;
          if ((v43 & 0x80) == 0)
            goto LABEL_77;
          v37 += 7;
          v28 = v38++ >= 9;
          if (v28)
          {
            LODWORD(v39) = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(v3 + *v19) = 1;
LABEL_77:
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_79:
        v58 = 64;
        goto LABEL_84;
      case 2:
        if ((v67 & 1) == 0)
          goto LABEL_74;
        v47 = 0;
        v48 = 0;
        v39 = 0;
        *(_BYTE *)(a1 + 68) |= 1u;
        while (2)
        {
          v49 = *v18;
          v50 = *(_QWORD *)(v3 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(v3 + *v6))
          {
            *(_BYTE *)(v3 + *v19) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v20) + v50);
            *(_QWORD *)(v3 + v49) = v51;
            v39 |= (unint64_t)(v52 & 0x7F) << v47;
            if (v52 < 0)
            {
              v47 += 7;
              v28 = v48++ >= 9;
              if (v28)
              {
                LODWORD(v39) = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(v3 + *v19))
          LODWORD(v39) = 0;
LABEL_83:
        v58 = 60;
LABEL_84:
        *(_DWORD *)(a1 + v58) = v39;
        goto LABEL_93;
      case 3:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 68) & 0x20) == 0)
        {
          PBReaderReadString();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = 40;
          goto LABEL_72;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v59 = 4 * *(_BYTE *)(a1 + 68);
        goto LABEL_91;
      case 4:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 68) & 8) != 0)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            goto LABEL_112;
          v59 = 16 * *(_BYTE *)(a1 + 68);
LABEL_91:
          v9 += v59 >> 7;
          goto LABEL_92;
        }
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_112;
        v55 = objc_alloc_init(GEOABDebugPanelExperimentBranch);
        if (GEOABDebugPanelExperimentBranchReadAllFrom((uint64_t)v55, (void *)v3, v10 & 1))
        {
          PBReaderRecallMark();
          v56 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v55;
LABEL_73:

          --v9;
LABEL_92:
          v19 = (int *)MEMORY[0x1E0D82BC8];
          goto LABEL_93;
        }

LABEL_112:
        v64 = 0;
        v65 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        v19 = (int *)MEMORY[0x1E0D82BC8];
LABEL_96:
        if ((v66 & 1) != 0)
LABEL_97:
          *(_BYTE *)(a1 + v65[420]) |= 4u;
        if (v70 & 1 | ((v64 & 1) == 0))
        {
          *(_BYTE *)(a1 + v65[420]) |= 0x20u;
          *(_BYTE *)(a1 + v65[420]) |= 8u;
          *(_BYTE *)(a1 + v65[420]) |= 0x10u;
        }
        else if (v17)
        {
          while (1)
          {
            v60 = *v17++;
            v61 = 32;
            switch(v60)
            {
              case 0:
                goto LABEL_105;
              case 3:
                goto LABEL_104;
              case 4:
                v61 = 8;
                goto LABEL_104;
              case 5:
                v61 = 16;
LABEL_104:
                *(_BYTE *)(a1 + v65[420]) |= v61;
                break;
              default:
                continue;
            }
          }
        }
LABEL_105:
        if (v64)
          v3 = *(_BYTE *)(v3 + *v19) == 0;
        else
          v3 = 0;
        if ((v70 & 1) != 0)
        {
          v62 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = 0;

        }
        return v3;
      case 5:
        if (!v32)
          goto LABEL_74;
        if ((*(_BYTE *)(a1 + 68) & 0x10) == 0)
        {
          PBReaderReadString();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = 32;
LABEL_72:
          v56 = *(void **)(a1 + v54);
          *(_QWORD *)(a1 + v54) = v53;
          goto LABEL_73;
        }
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_112;
        v59 = 8 * *(_BYTE *)(a1 + 68);
        goto LABEL_91;
      default:
        if ((v66 & 1) == 0 || (*(_BYTE *)(a1 + 68) & 4) != 0)
        {
LABEL_74:
          v57 = PBReaderSkipValueWithTag();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if ((v57 & 1) == 0)
          {
            v64 = 0;
LABEL_95:
            v65 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
            goto LABEL_96;
          }
        }
        else
        {
          if (!*(_QWORD *)(a1 + 16))
          {
            v44 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
            v45 = *(void **)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v44;

          }
          v46 = PBUnknownFieldAdd();
          v19 = (int *)MEMORY[0x1E0D82BC8];
          if (!v46)
          {
            v64 = 0;
            v65 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
            goto LABEL_97;
          }
        }
LABEL_93:
        if (!(v68 & 1 | (v9 != 0)))
          goto LABEL_94;
        continue;
    }
  }
}

void sub_189673CAC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189673DEC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189674D8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABExperimentAssignmentReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABExperimentAssignmentReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABExperimentAssignmentReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABExperimentAssignmentReadAllFrom_initialTag;
  Specified = GEOABExperimentAssignmentReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    objc_msgSend(*(id *)(a1 + 24), "readAll:", 1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189674F2C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABExperimentAssignmentReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABExperimentAssignmentReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_189674F8C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189675180(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABExperimentAssignmentIsDirty(uint64_t a1)
{
  unsigned int v2;

  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v2 = *(unsigned __int8 *)(a1 + 68);
  if ((v2 & 0x60) != 0)
    return 1;
  if ((v2 & 8) != 0)
  {
    if (GEOABDebugPanelExperimentBranchIsDirty(*(_QWORD *)(a1 + 24)))
      return 1;
    v2 = *(unsigned __int8 *)(a1 + 68);
  }
  return (v2 >> 4) & 1;
}

os_unfair_lock_s *GEOABExperimentAssignmentIsDirty(os_unfair_lock_s *result)
{
  os_unfair_lock_s *v1;
  uint64_t IsDirty;

  if (result)
  {
    v1 = result;
    os_unfair_lock_lock_with_options();
    IsDirty = _GEOABExperimentAssignmentIsDirty((uint64_t)v1);
    os_unfair_lock_unlock(v1 + 14);
    return (os_unfair_lock_s *)IsDirty;
  }
  return result;
}

void sub_189675574(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189675900(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189675B80(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABSecondPartyPlaceRequestClientMetaDataReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  char v17;
  unsigned __int8 v18;
  int *v19;
  int *v20;
  int *v21;
  int *v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  int v31;
  unint64_t v33;
  BOOL v34;
  int *v35;
  int v36;
  int v37;
  BOOL v38;
  GEOPDABClientDatasetMetadata *v39;
  void *v40;
  id v41;
  void *v42;
  int v43;
  char v44;
  int v45;
  char v46;
  void *v47;
  int v49;
  int *v50;
  char v51;
  char v52;
  char v53;
  BOOL v54;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 52);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 48));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = ((*(unsigned __int8 *)(a1 + 60) >> 1) & 1)
      + (*(_BYTE *)(a1 + 60) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 3) & 1)
      + ((*(unsigned __int8 *)(a1 + 60) >> 2) & 1);
  while (2)
  {
    v13 = 1;
    v14 = 1;
    v15 = 1;
    switch(a3[v7])
    {
      case -4:
        ++v12;
        goto LABEL_8;
      case -3:
        v8 = 1;
        goto LABEL_7;
      case -2:
        v14 = v10;
        goto LABEL_10;
      case -1:
        goto LABEL_10;
      case 0:
        v16 = v12 > 1;
        v17 = v16 & ~(_BYTE)v11 | v9;
        v18 = v16 | v11;
        v51 = v17;
        v52 = v18 | v17;
        if (((v18 | v8) & 1) != 0)
          v19 = 0;
        else
          v19 = a3;
        v20 = (int *)MEMORY[0x1E0D82BF0];
        v53 = (v19 == 0) | v18;
        v54 = v18;
        v21 = (int *)MEMORY[0x1E0D82BC8];
        v22 = (int *)MEMORY[0x1E0D82BB8];
        break;
      default:
        ++v12;
LABEL_7:
        v13 = v9;
LABEL_8:
        v14 = v10;
        v15 = v11;
LABEL_10:
        ++v7;
        v9 = v13;
        v10 = v14;
        v11 = v15;
        continue;
    }
    break;
  }
  while (1)
  {
    if (*(_QWORD *)(v3 + *v20) >= *(_QWORD *)(v3 + *v6) || *(_BYTE *)(v3 + *v21))
      goto LABEL_69;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    while (1)
    {
      v26 = *v20;
      v27 = *(_QWORD *)(v3 + v26);
      v28 = v27 + 1;
      if (v27 == -1 || v28 > *(_QWORD *)(v3 + *v6))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(v3 + *v22) + v27);
      *(_QWORD *)(v3 + v26) = v28;
      v25 |= (unint64_t)(v29 & 0x7F) << v23;
      if ((v29 & 0x80) == 0)
        goto LABEL_25;
      v23 += 7;
      if (v24++ >= 9)
      {
        v25 = 0;
        v31 = *(unsigned __int8 *)(v3 + *v21);
        goto LABEL_27;
      }
    }
    *(_BYTE *)(v3 + *v21) = 1;
LABEL_25:
    v31 = *(unsigned __int8 *)(v3 + *v21);
    if (*(_BYTE *)(v3 + *v21))
      v25 = 0;
LABEL_27:
    if (v31 || (v25 & 7) == 4)
    {
LABEL_69:
      v49 = 1;
      goto LABEL_70;
    }
    v33 = v25 >> 3;
    v34 = v54;
    if ((v53 & 1) == 0)
    {
      v35 = v19;
      do
      {
        v37 = *v35++;
        v36 = v37;
        v34 = v37 != 0;
        if (v37)
          v38 = v36 == (_DWORD)v33;
        else
          v38 = 1;
      }
      while (!v38);
    }
    if ((_DWORD)v33 != 5)
      break;
    if (v34)
    {
      if ((*(_BYTE *)(a1 + 60) & 4) != 0)
      {
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          goto LABEL_87;
        v7 += *(unsigned __int8 *)(a1 + 60) << 29 >> 31;
      }
      else
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_87;
        v39 = objc_alloc_init(GEOPDABClientDatasetMetadata);
        if (!GEOPDABClientDatasetMetadataReadAllFrom((uint64_t)v39, (void *)v3))
          goto LABEL_86;
        PBReaderRecallMark();
        v40 = *(void **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v39;

        --v7;
      }
      goto LABEL_67;
    }
LABEL_63:
    v44 = PBReaderSkipValueWithTag();
    v21 = (int *)MEMORY[0x1E0D82BC8];
    if ((v44 & 1) == 0)
    {
      v49 = 0;
LABEL_70:
      v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
      goto LABEL_71;
    }
LABEL_68:
    if (!(v52 & 1 | (v7 != 0)))
      goto LABEL_69;
  }
  if ((_DWORD)v33 != 2)
  {
    if ((_DWORD)v33 == 1)
    {
      if (v34 && (*(_BYTE *)(a1 + 60) & 8) == 0)
      {
        if ((PBReaderPlaceMark() & 1) == 0)
          goto LABEL_87;
        v39 = objc_alloc_init(GEOABExperimentAssignment);
        if (!GEOABExperimentAssignmentReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
          goto LABEL_86;
        PBReaderRecallMark();
        -[GEOABSecondPartyPlaceRequestClientMetaData _addNoFlagsServerAbAssignment:](a1, v39);
LABEL_56:

LABEL_67:
        v21 = (int *)MEMORY[0x1E0D82BC8];
        goto LABEL_68;
      }
    }
    else if ((v51 & 1) != 0 && (*(_BYTE *)(a1 + 60) & 1) == 0)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
        v41 = objc_alloc_init(MEMORY[0x1E0D82BB0]);
        v42 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v41;

      }
      v43 = PBUnknownFieldAdd();
      v21 = (int *)MEMORY[0x1E0D82BC8];
      if (!v43)
      {
        v49 = 0;
        v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
        goto LABEL_72;
      }
      goto LABEL_68;
    }
    goto LABEL_63;
  }
  if (!v34 || (*(_BYTE *)(a1 + 60) & 2) != 0)
    goto LABEL_63;
  if ((PBReaderPlaceMark() & 1) == 0)
    goto LABEL_87;
  v39 = objc_alloc_init(GEOABClientConfig);
  if (GEOABClientConfigReadAllFrom((uint64_t)v39, (void *)v3, v10 & 1))
  {
    PBReaderRecallMark();
    -[GEOABSecondPartyPlaceRequestClientMetaData _addNoFlagsClientConfig:](a1, v39);
    goto LABEL_56;
  }
LABEL_86:

LABEL_87:
  v49 = 0;
  v50 = &OBJC_IVAR___GEOPlaceIdentifier__unknownFields;
  v21 = (int *)MEMORY[0x1E0D82BC8];
LABEL_71:
  if ((v51 & 1) == 0)
    goto LABEL_73;
LABEL_72:
  *(_BYTE *)(a1 + v50[423]) |= 1u;
LABEL_73:
  if (v54 || (v49 & 1) == 0)
  {
    *(_BYTE *)(a1 + v50[423]) |= 8u;
    *(_BYTE *)(a1 + v50[423]) |= 2u;
    *(_BYTE *)(a1 + v50[423]) |= 4u;
  }
  else if (v19)
  {
    while (1)
    {
      v45 = *v19++;
      v46 = 8;
      switch(v45)
      {
        case 0:
          goto LABEL_80;
        case 1:
          goto LABEL_79;
        case 2:
          v46 = 2;
          goto LABEL_79;
        case 5:
          v46 = 4;
LABEL_79:
          *(_BYTE *)(a1 + v50[423]) |= v46;
          break;
        default:
          continue;
      }
    }
  }
LABEL_80:
  if (v49)
    v3 = *(_BYTE *)(v3 + *v21) == 0;
  else
    v3 = 0;
  if (v54)
  {
    v47 = *(void **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;

  }
  return v3;
}

void sub_18967648C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABSecondPartyPlaceRequestClientMetaDataCallReadAllRecursiveWithoutSynchronized(id *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v2 = a1[5];
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v18;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v18 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v17 + 1) + 8 * v6++), "readAll:", 1);
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v22, 16);
    }
    while (v4);
  }

  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v7 = a1[3];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v14;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v14 != v10)
          objc_enumerationMutation(v7);
        objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v11++), "readAll:", 1, (_QWORD)v13);
      }
      while (v9 != v11);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v13, v21, 16);
    }
    while (v9);
  }

  return objc_msgSend(a1[4], "readAll:", 1);
}

unint64_t GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 52))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 56));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 48) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 52) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom_initialTag;
  Specified = GEOABSecondPartyPlaceRequestClientMetaDataReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  if (a3)
    _GEOABSecondPartyPlaceRequestClientMetaDataCallReadAllRecursiveWithoutSynchronized((id *)a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 56));
  return Specified;
}

void sub_189677364(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEOABSecondPartyPlaceRequestClientMetaDataReadFrom(uint64_t a1, void *a2)
{
  id v3;
  unint64_t AllFrom;

  v3 = a2;
  objc_sync_enter(v3);
  AllFrom = GEOABSecondPartyPlaceRequestClientMetaDataReadAllFrom(a1, v3, 0);
  objc_sync_exit(v3);

  return AllFrom;
}

void sub_1896773C4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t _GEOABSecondPartyPlaceRequestClientMetaDataIsDirty(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 56));
  if ((*(_BYTE *)(a1 + 60) & 0x1E) != 0)
    return 1;
  if ((*(_BYTE *)(a1 + 60) & 2) == 0)
    return 0;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v3 = *(id *)(a1 + 24);
  v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v2)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v2; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v3);
        if ((GEOABClientConfigIsDirty(*(os_unfair_lock_s **)(*((_QWORD *)&v7 + 1) + 8 * i)) & 1) != 0)
        {
          v2 = 1;
          goto LABEL_15;
        }
      }
      v2 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v2)
        continue;
      break;
    }
  }
LABEL_15:

  return v2;
}

void sub_189677960(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_189677D28(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18967B248(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPAmenityCorrectionsReadSpecified(uint64_t a1, unint64_t a2, int *a3)
{
  unint64_t v3;
  int *v6;
  char v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  _BOOL4 v12;
  int *v13;
  int *v14;
  int *v15;
  BOOL v16;
  _BOOL4 v17;
  int *v18;
  char v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  BOOL v25;
  int v26;
  int v27;
  unint64_t v29;
  _BOOL4 v30;
  int *v31;
  int v32;
  int v33;
  BOOL v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  char v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  char v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  BOOL v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  int v61;
  int v62;
  char v63;
  void *v64;
  _BOOL4 v66;

  v3 = a2;
  if (!a2)
    return v3;
  os_unfair_lock_assert_owner((const os_unfair_lock *)(a1 + 72));
  v6 = (int *)MEMORY[0x1E0D82BD8];
  *(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BD8]) = *(unsigned int *)(a1 + 68);
  objc_msgSend((id)v3, "seekToOffset:", *(unsigned int *)(a1 + 64));
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = ((*(unsigned __int8 *)(a1 + 76) >> 1) & 1) + (*(_BYTE *)(a1 + 76) & 1);
  while (1)
  {
    v11 = a3[v8];
    if (v11 >= 0xFFFFFFFE)
    {
      v9 = 1;
      goto LABEL_9;
    }
    if (v11 != -3)
      break;
    v7 = 1;
LABEL_9:
    ++v8;
  }
  if (v11)
  {
    ++v10;
    goto LABEL_9;
  }
  v12 = (v9 & 1 | v10) != 0;
  if (((v9 & 1 | v10) != 0) | v7 & 1)
    v13 = 0;
  else
    v13 = a3;
  v14 = (int *)MEMORY[0x1E0D82BF0];
  v15 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(v3 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(v3 + *v6))
  {
LABEL_97:
    if (v12)
    {
      v60 = 1;
      goto LABEL_99;
    }
    if (!v13)
      goto LABEL_110;
    while (1)
    {
      v62 = *v13++;
      v61 = v62;
      if (v62 == 3)
        break;
      if (v61 == 4)
      {
        v63 = 2;
LABEL_109:
        *(_BYTE *)(a1 + 76) |= v63;
      }
      else if (!v61)
      {
        goto LABEL_110;
      }
    }
    v63 = 1;
    goto LABEL_109;
  }
  if (v13)
    v16 = (v9 & 1 | v10) != 0;
  else
    v16 = 1;
  if (v8)
    v17 = 1;
  else
    v17 = (v9 & 1 | v10) != 0;
  v66 = v17;
  v18 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    if (*(_BYTE *)(v3 + *v15))
      goto LABEL_97;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *v14;
      v23 = *(_QWORD *)(v3 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(v3 + *v6))
        break;
      v24 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v23);
      *(_QWORD *)(v3 + v22) = v23 + 1;
      v21 |= (unint64_t)(v24 & 0x7F) << v19;
      if ((v24 & 0x80) == 0)
        goto LABEL_30;
      v19 += 7;
      v25 = v20++ >= 9;
      if (v25)
      {
        v21 = 0;
        v26 = *(unsigned __int8 *)(v3 + *v15);
        goto LABEL_32;
      }
    }
    *(_BYTE *)(v3 + *v15) = 1;
LABEL_30:
    v26 = *(unsigned __int8 *)(v3 + *v15);
    if (*(_BYTE *)(v3 + *v15))
      v21 = 0;
LABEL_32:
    v27 = v21 & 7;
    if (v26 || v27 == 4)
      goto LABEL_97;
    v29 = v21 >> 3;
    v30 = v12;
    if (!v16)
    {
      v31 = v13;
      do
      {
        v33 = *v31++;
        v32 = v33;
        v30 = v33 != 0;
        if (v33)
          v34 = v32 == (_DWORD)v29;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if ((_DWORD)v29 != 4)
    {
      if ((_DWORD)v29 != 3 || !v30 || (*(_BYTE *)(a1 + 76) & 1) != 0)
        break;
      if (v27 != 2)
      {
        v47 = 0;
        v48 = 0;
        v49 = 0;
        while (1)
        {
          v50 = *v14;
          v51 = *(_QWORD *)(v3 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(v3 + *v6))
            goto LABEL_95;
          v52 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v51);
          *(_QWORD *)(v3 + v50) = v51 + 1;
          v49 |= (unint64_t)(v52 & 0x7F) << v47;
          if (v52 < 0)
          {
            v47 += 7;
            v53 = v48++ > 8;
            if (!v53)
              continue;
          }
          goto LABEL_96;
        }
      }
      if (!PBReaderPlaceMark())
        goto LABEL_113;
      while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
      {
        v35 = 0;
        v36 = 0;
        v37 = 0;
        while (1)
        {
          v38 = *v14;
          v39 = *(_QWORD *)(v3 + v38);
          if (v39 == -1 || v39 >= *(_QWORD *)(v3 + *v6))
            break;
          v40 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v39);
          *(_QWORD *)(v3 + v38) = v39 + 1;
          v37 |= (unint64_t)(v40 & 0x7F) << v35;
          if (v40 < 0)
          {
            v35 += 7;
            v25 = v36++ >= 9;
            if (!v25)
              continue;
          }
          goto LABEL_59;
        }
        *(_BYTE *)(v3 + *v15) = 1;
LABEL_59:
        PBRepeatedInt32Add();
      }
      goto LABEL_79;
    }
    if (!v30 || (*(_BYTE *)(a1 + 76) & 2) != 0)
      break;
    if (v27 != 2)
    {
      v54 = 0;
      v55 = 0;
      v56 = 0;
      while (1)
      {
        v57 = *v14;
        v58 = *(_QWORD *)(v3 + v57);
        if (v58 == -1 || v58 >= *(_QWORD *)(v3 + *v6))
          break;
        v59 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v58);
        *(_QWORD *)(v3 + v57) = v58 + 1;
        v56 |= (unint64_t)(v59 & 0x7F) << v54;
        if (v59 < 0)
        {
          v54 += 7;
          v53 = v55++ > 8;
          if (!v53)
            continue;
        }
        goto LABEL_96;
      }
LABEL_95:
      *(_BYTE *)(v3 + *v15) = 1;
LABEL_96:
      PBRepeatedInt32Add();
LABEL_76:
      if (!v66)
        goto LABEL_97;
      goto LABEL_77;
    }
    if (!PBReaderPlaceMark())
      goto LABEL_113;
    while (*(_QWORD *)(v3 + *v14) < *(_QWORD *)(v3 + *v6) && !*(_BYTE *)(v3 + *v15))
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      while (1)
      {
        v44 = *v14;
        v45 = *(_QWORD *)(v3 + v44);
        if (v45 == -1 || v45 >= *(_QWORD *)(v3 + *v6))
          break;
        v46 = *(_BYTE *)(*(_QWORD *)(v3 + *v18) + v45);
        *(_QWORD *)(v3 + v44) = v45 + 1;
        v43 |= (unint64_t)(v46 & 0x7F) << v41;
        if (v46 < 0)
        {
          v41 += 7;
          v25 = v42++ >= 9;
          if (!v25)
            continue;
        }
        goto LABEL_74;
      }
      *(_BYTE *)(v3 + *v15) = 1;
LABEL_74:
      PBRepeatedInt32Add();
    }
LABEL_79:
    PBReaderRecallMark();
    if (!v66)
      goto LABEL_97;
LABEL_77:
    if (*(_QWORD *)(v3 + *v14) >= *(_QWORD *)(v3 + *v6))
      goto LABEL_97;
  }
  if ((PBReaderSkipValueWithTag() & 1) != 0)
    goto LABEL_76;
LABEL_113:
  v60 = 0;
LABEL_99:
  *(_BYTE *)(a1 + 76) |= 1u;
  *(_BYTE *)(a1 + 76) |= 2u;
  if ((v60 & 1) != 0)
  {
LABEL_110:
    v3 = *(_BYTE *)(v3 + *v15) == 0;
    if (v12)
      goto LABEL_111;
    return v3;
  }
  v3 = 0;
  if (!v12)
    return v3;
LABEL_111:
  v64 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;

  return v3;
}

void sub_18967C308(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_18967E148(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

unint64_t GEORPAmenityCorrectionsReadAllFrom(uint64_t a1, void *a2, int a3)
{
  unint64_t Specified;
  id v8;
  int *v9;
  uint8_t v10[16];

  if (*(_DWORD *)(a1 + 68))
  {
    objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99778], CFSTR("GEORPAmenityCorrectionsReadAllFrom can only be called once per object"));
    return 0;
  }
  if ((unint64_t)objc_msgSend(a2, "position") >> 32 || (unint64_t)objc_msgSend(a2, "length") >> 32)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_fault_impl(&dword_1885A9000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Cannot decode data with position/length > UINT32_MAX", v10, 2u);
    }
    return 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 72));
  v8 = a2;
  objc_sync_enter(v8);
  objc_storeStrong((id *)(a1 + 8), a2);
  *(_DWORD *)(a1 + 64) = objc_msgSend(v8, "position");
  *(_DWORD *)(a1 + 68) = objc_msgSend(v8, "length");
  if (a3)
    v9 = (int *)&GEORPAmenityCorrectionsReadAllFrom_recursiveTag;
  else
    v9 = (int *)&GEORPAmenityCorrectionsReadAllFrom_initialTag;
  Specified = GEORPAmenityCorrectionsReadSpecified(a1, (unint64_t)v8, v9);
  objc_sync_exit(v8);

  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 72));
  return Specified;
}

