id PKDisplayablePaymentNetworkCardNameForPaymentCredentialType(uint64_t a1)
{
  __CFString *v1;
  void *v2;

  if (a1 <= 99)
  {
    switch(a1)
    {
      case 1:
        v1 = CFSTR("NETWORK_NAME_AMEX_CARD_NAME");
        break;
      case 2:
        v1 = CFSTR("NETWORK_NAME_DISCOVER_CARD_NAME");
        break;
      case 3:
        v1 = CFSTR("NETWORK_NAME_MASTERCARD_CARD_NAME");
        break;
      case 4:
        v1 = CFSTR("NETWORK_NAME_VISA_CARD_NAME");
        break;
      case 5:
        v1 = CFSTR("NETWORK_NAME_BANKCARD_CARD_NAME");
        break;
      case 6:
        v1 = CFSTR("NETWORK_NAME_JCB_CARD_NAME");
        break;
      case 7:
        v1 = CFSTR("NETWORK_NAME_DINERSCLUB");
        break;
      case 8:
        v1 = CFSTR("NETWORK_NAME_CARTEBLEUE_CARD_NAME");
        break;
      case 9:
        v1 = CFSTR("NETWORK_NAME_CARTEBANCAIRES_CARD_NAME");
        break;
      case 10:
        v1 = CFSTR("NETWORK_NAME_DANKORT_CARD_NAME");
        break;
      case 11:
        v1 = CFSTR("NETWORK_NAME_CHINAUNIONPAY_CARD_NAME");
        break;
      case 12:
        v1 = CFSTR("NETWORK_NAME_EFTPOS_CARD_NAME");
        break;
      case 13:
        v1 = CFSTR("NETWORK_NAME_INTERAC_CARD_NAME");
        break;
      case 14:
        v1 = CFSTR("NETWORK_NAME_MADA_CARD_NAME");
        break;
      case 15:
        v1 = CFSTR("NETWORK_NAME_MAESTRO_CARD_NAME");
        break;
      case 16:
        v1 = CFSTR("NETWORK_NAME_ELECTRON_CARD_NAME");
        break;
      case 17:
        v1 = CFSTR("NETWORK_NAME_VPAY_CARD_NAME");
        break;
      case 18:
        v1 = CFSTR("NETWORK_NAME_GIROCARD_CARD_NAME");
        break;
      case 19:
        v1 = CFSTR("NETWORK_NAME_MIR_CARD_NAME");
        break;
      case 20:
        v1 = CFSTR("NETWORK_NAME_BANCOMAT");
        break;
      case 21:
        v1 = CFSTR("NETWORK_NAME_BANCONTACT");
        break;
      case 22:
        v1 = CFSTR("NETWORK_NAME_POSTFINANCE_CARD_NAME");
        break;
      case 24:
        v1 = CFSTR("NETWORK_NAME_BANKAXEPT_CARD_NAME");
        break;
      case 25:
        v1 = CFSTR("NETWORK_NAME_MEEZA_CARD_NAME");
        break;
      case 26:
        v1 = CFSTR("NETWORK_NAME_NAPAS_CARD_NAME");
        break;
      default:
        goto LABEL_45;
    }
    goto LABEL_46;
  }
  if (a1 <= 122)
  {
    switch(a1)
    {
      case 'd':
        v1 = CFSTR("NETWORK_NAME_PRIVATELABEL_CARD_NAME");
        break;
      case 'g':
        v1 = CFSTR("NETWORK_NAME_SUICA_CARD_NAME");
        break;
      case 'i':
        v1 = CFSTR("NETWORK_NAME_QUICPAY_CARD_NAME");
        break;
      case 'j':
        v1 = CFSTR("NETWORK_NAME_ID_CARD_NAME");
        break;
      case 'k':
        v1 = CFSTR("NETWORK_NAME_HID_CARD_NAME");
        break;
      case 'p':
        v1 = CFSTR("NETWORK_NAME_ELO_CARD_NAME");
        break;
      default:
        goto LABEL_45;
    }
    goto LABEL_46;
  }
  if (a1 > 127)
  {
    if (a1 == 128)
    {
      v1 = CFSTR("NETWORK_NAME_NANACO_CARD_NAME");
      goto LABEL_46;
    }
    if (a1 != 135)
    {
LABEL_45:
      v1 = CFSTR("NETWORK_NAME_GENERIC_CARD_NAME");
      goto LABEL_46;
    }
    PKLocalizedLynxString(CFSTR("NETWORK_NAME_APPLE_BALANCE_CARD_NAME"), 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    if (a1 != 123)
    {
      if (a1 == 127)
      {
        v1 = CFSTR("NETWORK_NAME_WAON_CARD_NAME");
LABEL_46:
        PKLocalizedPaymentString(&v1->isa, 0);
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        return v2;
      }
      goto LABEL_45;
    }
    PKLocalizedAquamanString(CFSTR("NETWORK_NAME_BARCODE_CARD_NAME"), 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

id PKPaymentNetworkNamesForPaymentCredentialTypes(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        PKPaymentNetworkNameForPaymentCredentialType(objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * v7), "integerValue", (_QWORD)v11));
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
          objc_msgSend(v2, "addObject:", v8);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id PKPaymentCredentialTypesForPaymentNetworkNames(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = (void *)MEMORY[0x1E0CB37E8];
        v9 = PKPaymentCredentialTypeForPaymentNetworkName(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v7));
        objc_msgSend(v8, "numberWithInteger:", v9, (_QWORD)v13);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObject:", v10);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v5);
  }

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id PKDefaultPaymentNetworkNameForPaymentPass(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "devicePrimaryPaymentApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    PKPaymentNetworkNameForPaymentCredentialType(objc_msgSend(v1, "paymentNetworkIdentifier"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKDictionaryFromJSONString(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v7;
  uint8_t buf[4];
  id v9;
  __int16 v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "dataUsingEncoding:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
    goto LABEL_8;
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v2, 0, &v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v7;
  if (v4)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v9 = v4;
      v10 = 2112;
      v11 = v1;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Error decoding string into NSDictionary with error: %@, string: %@", buf, 0x16u);
    }

    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_7:

LABEL_8:
    v3 = 0;
  }

  return v3;
}

__CFString *PKLegacyTransitNetworkIdentifierForCredentialType(uint64_t a1)
{
  __CFString **v1;
  __CFString *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  if (a1 > 107)
  {
    if (a1 == 109)
    {
      v1 = PKTransitNetworkIdentifierSPTCC;
      goto LABEL_10;
    }
    if (a1 == 108)
    {
      v1 = PKTransitNetworkIdentifierBMAC;
      goto LABEL_10;
    }
  }
  else
  {
    if (a1 == 1)
    {
      v1 = PKTransitNetworkIdentifierAmericanExpress;
      goto LABEL_10;
    }
    if (a1 == 103)
    {
      v1 = PKTransitNetworkIdentifierSuica;
LABEL_10:
      v2 = *v1;
      return v2;
    }
  }
  if ((unint64_t)(a1 - 1) <= 0x62
    && (PKPaymentNetworkNameForPaymentCredentialType(a1), (v4 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v5 = v4;
    v6 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v4, "lowercaseString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "stringWithFormat:", CFSTR("%@.emv.%@"), CFSTR("com.apple.transit"), v7);
    v2 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

BOOL PKIsOpenLoopCredentialType(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 0x63;
}

__CFString *PKPaymentTransitAppletFormatForPaymentNetwork(void *a1)
{
  id v1;
  __CFString **v2;
  __CFString *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("Suica")) & 1) != 0)
  {
    v2 = PKPaymentAppletDataFormatSuica;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("BMAC")) & 1) != 0)
  {
    v2 = PKTransitAppletDataFormatBMAC;
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("SPTCC")))
    {
      v3 = 0;
      goto LABEL_8;
    }
    v2 = PKTransitAppletDataFormatSPTCC;
  }
  v3 = *v2;
LABEL_8:

  return v3;
}

__CFString *PKPaymentPaymentNetworkForTransitAppletFormat(void *a1)
{
  id v1;
  __CFString **v2;
  __CFString *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("transit.felica.suica")) & 1) != 0)
  {
    v2 = (__CFString **)&PKPaymentNetworkSuica;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("transit.apple.bmac")) & 1) != 0)
  {
    v2 = PKPaymentNetworkBMAC;
  }
  else
  {
    if (!objc_msgSend(v1, "isEqualToString:", CFSTR("transit.apple.sptcc")))
    {
      v3 = 0;
      goto LABEL_8;
    }
    v2 = PKPaymentNetworkSPTCC;
  }
  v3 = *v2;
LABEL_8:

  return v3;
}

uint64_t PKUnpredictableNumberFromNonce(void *a1)
{
  unsigned int v2;

  v2 = 0;
  objc_msgSend(a1, "getBytes:length:", &v2, 4);
  return bswap32(v2);
}

id PKInAppSupportedPaymentNetworks()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  _QWORD v6[31];

  v6[30] = *MEMORY[0x1E0C80C00];
  v6[0] = CFSTR("AmEx");
  v6[1] = CFSTR("Bancomat");
  v6[2] = CFSTR("PagoBancomat");
  v6[3] = CFSTR("Bancontact");
  v6[4] = CFSTR("CarteBancaire");
  v6[5] = CFSTR("CarteBancaires");
  v6[6] = CFSTR("CartesBancaires");
  v6[7] = CFSTR("ChinaUnionPay");
  v6[8] = CFSTR("Dankort");
  v6[9] = CFSTR("Discover");
  v6[10] = CFSTR("Eftpos");
  v6[11] = CFSTR("Electron");
  v6[12] = CFSTR("Elo");
  v6[13] = CFSTR("Interac");
  v6[14] = CFSTR("girocard");
  v6[15] = CFSTR("mada");
  v6[16] = CFSTR("Maestro");
  v6[17] = CFSTR("MasterCard");
  v6[18] = CFSTR("PrivateLabel");
  v6[19] = CFSTR("Visa");
  v6[20] = CFSTR("VPay");
  v6[21] = CFSTR("JCB");
  v6[22] = CFSTR("iD");
  v6[23] = CFSTR("QUICPay");
  v6[24] = CFSTR("Mir");
  v6[25] = CFSTR("PostFinanceAG");
  v6[26] = CFSTR("Meeza");
  v6[27] = CFSTR("NAPAS");
  v6[28] = CFSTR("BankAxept");
  v6[29] = CFSTR("Barcode");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 30);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKAdditionalSupportedNetworks();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "allKeys");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "arrayByAddingObjectsFromArray:", v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = v0;
  }

  return v4;
}

uint64_t PKIsSRD()
{
  if (qword_1ECF21D60 != -1)
    dispatch_once(&qword_1ECF21D60, &__block_literal_global_453);
  return byte_1ECF21C7D;
}

uint64_t PKIsBeneficiaryAccountWithAltDsid(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint8_t v7[16];
  uint8_t buf[16];

  v1 = a1;
  if (PKPaymentSetupForceIsBeneficiaryAccountEnabled())
  {
    PKLogFacilityTypeGetObject(0);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Forcing isBeneficiaryAccount", buf, 2u);
    }
    v3 = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0D00100], "sharedInstance");
    v2 = objc_claimAutoreleasedReturnValue();
    -[NSObject authKitAccountWithAltDSID:](v2, "authKitAccountWithAltDSID:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (v4)
    {
      v3 = -[NSObject isBeneficiaryForAccount:](v2, "isBeneficiaryForAccount:", v4);
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Unable to find apple account for altDsid for isBeneficiary check", v7, 2u);
      }

      v3 = 0;
    }

  }
  return v3;
}

void PKSecureElementIsAvailableWithCompletion(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  if (qword_1ECF21D70 != -1)
    dispatch_once(&qword_1ECF21D70, &__block_literal_global_460);
  v4 = qword_1ECF21D78;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __PKSecureElementIsAvailableWithCompletion_block_invoke_2;
  v6[3] = &unk_1E2AC1C68;
  v7 = v3;
  v8 = a1;
  v5 = v3;
  dispatch_async(v4, v6);

}

uint64_t PKHomeButtonIsAvailable()
{
  if (qword_1ECF21D88 != -1)
    dispatch_once(&qword_1ECF21D88, &__block_literal_global_464);
  return byte_1ECF21C7F;
}

uint64_t PKPearlIsAvailable()
{
  if (qword_1ECF21D98 != -1)
    dispatch_once(&qword_1ECF21D98, &__block_literal_global_470);
  return byte_1ECF21C81;
}

uint64_t PKOpticIDIsAvailable()
{
  return 0;
}

uint64_t PKSystemApertureIsAvailable()
{
  if (qword_1ECF21DA0 != -1)
    dispatch_once(&qword_1ECF21DA0, &__block_literal_global_473);
  return byte_1ECF21C82;
}

double PKFrontCameraNormalizedReferencePosition()
{
  if (qword_1ECF21DA8 != -1)
    dispatch_once(&qword_1ECF21DA8, &__block_literal_global_474);
  return *(double *)&qword_1ECF21DB0;
}

uint64_t PKFrontFaceCameraIsWithinScreen()
{
  if (qword_1ECF21DA0 != -1)
    dispatch_once(&qword_1ECF21DA0, &__block_literal_global_473);
  return byte_1ECF21C82;
}

uint64_t PKDeviceHasInternalBatteryAndIsUnplugged()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  if ((_DWORD)result)
    return MGGetBoolAnswer() ^ 1;
  return result;
}

uint64_t PKDeviceIsPluggedIn()
{
  return MGGetBoolAnswer();
}

uint64_t PKWebServiceFeaturesCredential(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v3 = a1;
  objc_msgSend(v3, "targetDevice");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "deviceRegion");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "context");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "configuration");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "paymentSetupFeaturedNetworksForRegion:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  PKPaymentNetworkNameForPaymentCredentialType(a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_msgSend(v8, "containsObject:", v9);

  return v10;
}

uint64_t PKDeviceSupportsFelicaDebitWithWebService(void *a1)
{
  id v1;
  int v2;
  void *v3;
  void *v4;
  int v5;
  uint64_t v6;

  v1 = a1;
  v2 = PKWebServiceFeaturesCredential(v1, 103);
  objc_msgSend(v1, "targetDevice");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    objc_msgSend(v1, "targetDevice");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v4, "felicaSecureElementIsAvailable");

  }
  else
  {
    v5 = 0;
  }

  if (v2)
    v6 = v5 ^ 1u;
  else
    v6 = 1;

  return v6;
}

uint64_t PKDeviceSupportsTransitWithWebService(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  char v14;

  v1 = a1;
  if (qword_1ECF21D10 != -1)
    dispatch_once(&qword_1ECF21D10, &__block_literal_global_224);
  if (!byte_1ECF21C7B)
  {
    objc_msgSend(v1, "targetDevice");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "deviceRegion");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "context");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "configuration");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v6, "paymentSetupBrowsableProductTypesForRegion:", v4);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v7, "containsObject:", &unk_1E2C3E968))
    {
      if (objc_msgSend(v4, "isEqualToString:", CFSTR("CN")))
      {
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          if ((objc_msgSend(v3, "supportsCredentialType:", 108) & 1) != 0)
            v2 = 1;
          else
            v2 = objc_msgSend(v3, "supportsCredentialType:", 109);
          goto LABEL_33;
        }
      }
      else
      {
        if (objc_msgSend(v4, "isEqualToString:", CFSTR("JP")))
        {
          v8 = PKWebServiceFeaturesCredential(v1, 103);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            v9 = objc_msgSend(v3, "felicaSecureElementIsAvailable");
          else
            v9 = 0;
          if (v8)
            v2 = v9;
          else
            v2 = 0;
          goto LABEL_33;
        }
        if (objc_msgSend(v4, "isEqualToString:", CFSTR("HK")))
        {
          v10 = PKWebServiceFeaturesCredential(v1, 117);
          if ((objc_opt_respondsToSelector() & 1) != 0)
            v11 = objc_msgSend(v3, "supportsCredentialType:", 117) ^ 1;
          else
            LOBYTE(v11) = 1;
          v12 = (objc_opt_respondsToSelector() & 1) != 0 ? objc_msgSend(v3, "felicaSecureElementIsAvailable") : 0;
          v13 = (objc_opt_respondsToSelector() & 1) != 0
              ? objc_msgSend(v3, "supportsExpressForAutomaticSelectionTechnologyType:", 6)
              : 0;
          v14 = v10 ? v11 : 1;
          if ((v14 & 1) == 0)
          {
            v2 = v12 & v13;
            goto LABEL_33;
          }
        }
      }
    }
    v2 = 0;
LABEL_33:

    goto LABEL_34;
  }
  v2 = 0;
LABEL_34:

  return v2;
}

uint64_t PKTargetDeviceSupportsExpress(void *a1)
{
  id v1;
  uint64_t v2;
  NSObject *v3;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    if ((objc_opt_respondsToSelector() & 1) != 0)
      v2 = objc_msgSend(v1, "secureElementSupportsExpressMode");
    else
      v2 = 1;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 136315138;
      v6 = "BOOL PKTargetDeviceSupportsExpress(__strong id<PKPaymentWebServiceTargetDeviceProtocol>)";
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "Error - %s called with nil target device, returning NO", (uint8_t *)&v5, 0xCu);
    }

    v2 = 0;
  }

  return v2;
}

uint64_t PKDeviceRegionSupportsDebit(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("JP")) ^ 1;
}

uint64_t PKFelicaSecureElementIsAvailable()
{
  if (qword_1ECF21DC0 != -1)
    dispatch_once(&qword_1ECF21DC0, &__block_literal_global_502);
  return byte_1ECF21C83;
}

uint64_t PKDeviceSupportsReaderMode()
{
  if (qword_1ECF21DC8 != -1)
    dispatch_once(&qword_1ECF21DC8, &__block_literal_global_504);
  return byte_1ECF21C84;
}

uint64_t PKDeviceSupportsBackgroundTagReading()
{
  if (qword_1ECF21DD0 != -1)
    dispatch_once(&qword_1ECF21DD0, &__block_literal_global_505);
  return byte_1ECF21C85;
}

uint64_t PKGetSecureElementOwnershipState(void *a1)
{
  id v1;
  PKSecureElement *v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_alloc_init(PKSecureElement);
  if (!v1)
  {
    PKCurrentUserUUID();
    v1 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = -[PKSecureElement ownershipStateForUserUUID:](v2, "ownershipStateForUserUUID:", v1);

  return v3;
}

uint64_t PKSetSecureElementOwnerUserUUID(void *a1, void *a2)
{
  id v3;
  id v4;
  PKSecureElement *v5;
  uint64_t v6;

  v3 = a2;
  v4 = a1;
  v5 = objc_alloc_init(PKSecureElement);
  v6 = -[PKSecureElement setOwnerUserUUID:keybagUUID:](v5, "setOwnerUserUUID:keybagUUID:", v4, v3);

  return v6;
}

id PKGetSecureElementOwnerUserUUID()
{
  PKSecureElement *v0;
  void *v1;

  v0 = objc_alloc_init(PKSecureElement);
  -[PKSecureElement ownerUserUUID](v0, "ownerUserUUID");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void PKRootVolumeIsBootVolume(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  if (v1)
  {
    v2 = v1;
    (*((void (**)(id, uint64_t))v1 + 2))(v1, 1);

  }
  else
  {
    __break(1u);
  }
}

id PKCreateTapToRadarURL(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  objc_class *v14;
  __CFString *v15;
  __CFString *v16;
  __CFString *v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  const __CFString *v22;
  void *v23;
  id v24;
  const __CFString *v25;
  void *v26;
  id v27;
  const __CFString *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;

  v11 = a1;
  v12 = a2;
  v13 = a6;
  v14 = (objc_class *)MEMORY[0x1E0CB3998];
  v15 = a5;
  v16 = a4;
  v17 = a3;
  v18 = objc_alloc_init(v14);
  objc_msgSend(v18, "setScheme:", CFSTR("tap-to-radar"));
  objc_msgSend(v18, "setHost:", CFSTR("new"));
  v19 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB39D8]), "initWithName:value:", CFSTR("BundleID"), CFSTR("com.apple.Passbook"));
  objc_msgSend(v19, "addObject:", v20);

  v21 = objc_alloc(MEMORY[0x1E0CB39D8]);
  if (v15)
    v22 = v15;
  else
    v22 = CFSTR("675055");
  v23 = (void *)objc_msgSend(v21, "initWithName:value:", CFSTR("ComponentID"), v22);

  objc_msgSend(v19, "addObject:", v23);
  v24 = objc_alloc(MEMORY[0x1E0CB39D8]);
  if (v17)
    v25 = v17;
  else
    v25 = CFSTR("UI/Usability");
  v26 = (void *)objc_msgSend(v24, "initWithName:value:", CFSTR("Classification"), v25);

  objc_msgSend(v19, "addObject:", v26);
  v27 = objc_alloc(MEMORY[0x1E0CB39D8]);
  if (v16)
    v28 = v16;
  else
    v28 = CFSTR("I Didn't Try");
  v29 = (void *)objc_msgSend(v27, "initWithName:value:", CFSTR("Reproducibility"), v28);

  objc_msgSend(v19, "addObject:", v29);
  if (v11 && objc_msgSend(v11, "length"))
  {
    v30 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB39D8]), "initWithName:value:", CFSTR("Title"), v11);
    objc_msgSend(v19, "addObject:", v30);

  }
  if (v12 && objc_msgSend(v12, "length"))
  {
    v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB39D8]), "initWithName:value:", CFSTR("Description"), v12);
    objc_msgSend(v19, "addObject:", v31);

  }
  if (v13 && objc_msgSend(v13, "count"))
  {
    v32 = objc_alloc(MEMORY[0x1E0CB39D8]);
    objc_msgSend(v13, "componentsJoinedByString:", CFSTR(","));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v32, "initWithName:value:", CFSTR("Attachments"), v33);
    objc_msgSend(v19, "addObject:", v34);

  }
  objc_msgSend(v18, "setQueryItems:", v19);
  objc_msgSend(v18, "URL");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  return v35;
}

void PKSetEnvironment(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a1;
  v5 = a2;
  v6 = a3;
  if (v11 && objc_msgSend(v11, "caseInsensitiveCompare:", CFSTR("PROD")))
  {
    PKSetStockholmEnvironmentName(v11);
    PKSetStockholmConfigURL(v5);
    PKSetMerchantServicesURL(v6);
  }
  else
  {
    PKSetStockholmEnvironmentName(0);
    PKSetStockholmConfigURL(0);
    PKSetMerchantServicesURL(0);
    PKClearPreferencesDomain(CFSTR("com.apple.stockholm"));
  }
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  PKSharedWebServiceContextPath();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "removeItemAtPath:error:", v8, 0);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  PKBackgroundWebServiceContextPath();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "removeItemAtPath:error:", v10, 0);

}

uint64_t PKIsPairedWithWatch()
{
  void *v0;
  uint64_t v1;

  -[objc_class sharedInstance](getNRPairedDeviceRegistryClass(), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "isPaired");

  return v1;
}

uint64_t PKHasPairedWatchSupportingFeatureIdentifier(void *a1)
{
  __CFString *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  const __CFString *v11;
  NSObject *v12;
  void *v13;
  int v14;
  int v16;
  void *v17;
  __int16 v18;
  const __CFString *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (PKIsPairedWithWatch())
  {
    PKPairedOrPairingDevice();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    _MergedGlobals_171();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "valueForProperty:", v3);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v4, "containsObject:", v1))
    {
      PKFeatureIdentifierToString(2);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = -[__CFString isEqualToString:](v1, "isEqualToString:", v5);

      if (v6)
      {
        off_1ECF21B08();
        v9 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "valueForProperty:", v9);
        v7 = (void *)objc_claimAutoreleasedReturnValue();

        v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", CFSTR("DC264F98-B0E2-4D96-9248-663A801E4FB1"));
        LODWORD(v9) = objc_msgSend(v2, "supportsCapability:", v8);

        PKLogFacilityTypeGetObject(6uLL);
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v11 = CFSTR("NO");
          if ((_DWORD)v9)
            v11 = CFSTR("YES");
          v16 = 138412546;
          v17 = v7;
          v18 = 2112;
          v19 = v11;
          _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "(account-pass-feature-check) watchOSVersion %@ supports Apple card capability %@", (uint8_t *)&v16, 0x16u);
        }

      }
      else
      {
        LODWORD(v9) = 1;
      }
      PKFeatureIdentifierToString(3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = -[__CFString isEqualToString:](v1, "isEqualToString:", v13);

      if (v14)
        v9 = 0;
      else
        v9 = v9;
    }
    else
    {
      PKLogFacilityTypeGetObject(6uLL);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 138412546;
        v17 = v4;
        v18 = 2112;
        v19 = v1;
        _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Paired device supported features %@ does not include %@", (uint8_t *)&v16, 0x16u);
      }

      v9 = 0;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id PKPairedOrPairingDevice()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  -[objc_class sharedInstance](getNRPairedDeviceRegistryClass(), "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  -[objc_class activeDeviceSelectorBlock](getNRPairedDeviceRegistryClass(), "activeDeviceSelectorBlock");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getAllDevicesWithArchivedAltAccountDevicesMatching:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "firstObject");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  getNRDevicePropertyIsArchived();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "valueForProperty:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v5, "BOOLValue"))
    v6 = 0;
  else
    v6 = v3;
  v7 = v6;

  return v7;
}

uint64_t PKIsDeviceParing(void *a1)
{
  void (__cdecl *v1)();
  id v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  v1 = (void (__cdecl *)())off_1ECF21B10;
  v2 = a1;
  v1();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForProperty:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  off_1ECF21B18();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForProperty:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v4, "BOOLValue"))
    v7 = objc_msgSend(v6, "BOOLValue") ^ 1;
  else
    v7 = 0;

  return v7;
}

uint64_t PKIsAltAccountPairedOrPairing()
{
  void *v0;
  uint64_t HasAltAccount;

  PKPairedOrPairingDevice();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  HasAltAccount = PKNRDeviceHasAltAccount(v0);

  return HasAltAccount;
}

uint64_t PKNRDeviceHasAltAccount(void *a1)
{
  void (__cdecl *v1)();
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = (void (__cdecl *)())getNRDevicePropertyIsAltAccount[0];
  v2 = a1;
  v1();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "valueForProperty:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_msgSend(v4, "BOOLValue");
  return v5;
}

id PKSerialNumberFromNRDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getNRDevicePropertySerialNumber[0]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Unable to fetch companion serial number from given device:%@", (uint8_t *)&v6, 0xCu);
    }

  }
  return v3;
}

double PKScreenScaleFromNRDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  float v4;
  double v5;
  NSObject *v6;
  int v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getNRDevicePropertyScreenScale[0]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    objc_msgSend(v3, "floatValue");
    v5 = v4;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 138412290;
      v9 = v1;
      _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "We couldn't get screen scale from given device %@, falling back to @3x", (uint8_t *)&v8, 0xCu);
    }

    v5 = 3.0;
  }

  return v5;
}

id PKDeviceClassFromNRDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getNRDevicePropertyClass[0]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Unable to fetch device class from given device:%@", (uint8_t *)&v6, 0xCu);
    }

  }
  return v3;
}

id PKOSVersionFromNRDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  off_1ECF21B08();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Unable to fetch OS version from given device:%@", (uint8_t *)&v6, 0xCu);
    }

  }
  return v3;
}

id PKProductTypeFromNRDevice(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  int v6;
  id v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  getNRDevicePropertyProductType[0]();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "valueForProperty:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Unable to fetch device class from given device:%@", (uint8_t *)&v6, 0xCu);
    }

  }
  return v3;
}

id PKSerialNumberFromPairedOrPairingDevice()
{
  void *v0;
  void *v1;

  PKPairedOrPairingDevice();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKSerialNumberFromNRDevice(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

const __CFString *PKPANMask()
{
  return CFSTR("••••");
}

id PKMaskedPaymentPAN(uint64_t a1)
{
  void *v1;
  void *v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ %@"), CFSTR("••••"), a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\u202A%@\u202C"), v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id PKFormattedStringForPAN(void *a1)
{
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v1 = (void *)objc_msgSend(a1, "mutableCopy");
  objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", CFSTR(" "), &stru_1E2ADF4C0, 0, 0, objc_msgSend(v1, "length"));
  v2 = objc_msgSend(v1, "length");
  v3 = v2;
  if ((int)v2 > 15)
  {
    if ((_DWORD)v2 == 16 && objc_msgSend(v1, "hasPrefix:", CFSTR("56")))
      goto LABEL_12;
LABEL_18:
    v5 = (v3 >> 2) + 1;
    v6 = 4 * (v3 >> 2);
    do
    {
      if (v6 < (int)v3)
        objc_msgSend(v1, "insertString:atIndex:", CFSTR(" "), v6);
      --v5;
      v6 -= 4;
    }
    while (v5 > 1);
    return v1;
  }
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("34")) & 1) != 0
    || objc_msgSend(v1, "hasPrefix:", CFSTR("37")))
  {
    if ((unint64_t)objc_msgSend(v1, "length") >= 0xB)
      objc_msgSend(v1, "insertString:atIndex:", CFSTR(" "), 10);
    if ((unint64_t)objc_msgSend(v1, "length") > 4)
    {
      v4 = 4;
LABEL_16:
      objc_msgSend(v1, "insertString:atIndex:", CFSTR(" "), v4);
      return v1;
    }
    return v1;
  }
  if ((objc_msgSend(v1, "hasPrefix:", CFSTR("56")) & 1) == 0)
  {
    if ((int)v3 < 4)
      return v1;
    goto LABEL_18;
  }
LABEL_12:
  if ((unint64_t)objc_msgSend(v1, "length") >= 0xB)
    objc_msgSend(v1, "insertString:atIndex:", CFSTR(" "), 10);
  if ((unint64_t)objc_msgSend(v1, "length") > 6)
  {
    v4 = 6;
    goto LABEL_16;
  }
  return v1;
}

id PKFPANSuffixFromFPAN(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") < 4)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "length") - 4);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id PKApplyFormatToString(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *, unint64_t, uint64_t, uint64_t, uint64_t, _BYTE *);
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5 && objc_msgSend(v6, "length") && objc_msgSend(v7, "count"))
  {
    v8 = (void *)MEMORY[0x1E0CB3500];
    objc_msgSend(v7, "componentsJoinedByString:", &stru_1E2ADF4C0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "characterSetWithCharactersInString:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "componentsSeparatedByCharactersInSet:", v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "componentsJoinedByString:", &stru_1E2ADF4C0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_msgSend(v6, "rangeOfCharacterFromSet:options:", v10, 12);
    v15 = v14;
    v16 = (void *)objc_msgSend(v12, "mutableCopy");
    v17 = objc_msgSend(v6, "length");
    v20 = MEMORY[0x1E0C809B0];
    v21 = 3221225472;
    v22 = __PKApplyFormatToString_block_invoke;
    v23 = &unk_1E2AC1DC0;
    v24 = v7;
    v25 = v16;
    v26 = v13;
    v27 = v15;
    v18 = v16;
    objc_msgSend(v6, "enumerateSubstringsInRange:options:usingBlock:", 0, v17, 2, &v20);
    v5 = (id)objc_msgSend(v18, "copy", v20, v21, v22, v23);

  }
  return v5;
}

id PKFormattedSanitizedPAN(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  id v5;
  void *v6;
  int v7;
  id v9;

  objc_msgSend(MEMORY[0x1E0CB3900], "scannerWithString:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("*"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB37A0], "string");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isAtEnd") & 1) == 0)
  {
    do
    {
      v9 = 0;
      v4 = objc_msgSend(v1, "scanUpToCharactersFromSet:intoString:", v2, &v9);
      v5 = v9;
      if (v4)
        objc_msgSend(v3, "appendString:", v5);
      objc_msgSend(v2, "invertedSet");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v1, "scanUpToCharactersFromSet:intoString:", v6, 0);

      if (v7)
        objc_msgSend(v3, "appendFormat:", CFSTR(" %@ "), CFSTR("••••"));

    }
    while (!objc_msgSend(v1, "isAtEnd"));
  }

  return v3;
}

id PKSanitizedPrimaryAccountRepresentationForPaymentCredential(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "sanitizedPrimaryAccountName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "length"))
  {
    objc_msgSend(v1, "sanitizedPrimaryAccountNumber");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    PKMaskedPaymentPAN((uint64_t)v3);
    v4 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v4;
  }

  return v2;
}

id PKSanitizedPrimaryAccountRepresentationForPass(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  objc_msgSend(v1, "sanitizedPrimaryAccountName");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!objc_msgSend(v2, "length"))
  {
    PKSanitizedPrimaryAccountNumberForPass(v1);
    v3 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v3;
  }
  if (!objc_msgSend(v2, "length"))
  {
    objc_msgSend(v1, "customerServiceIdentifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "invertedSet");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "stringByRemovingCharactersFromSet:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if ((unint64_t)objc_msgSend(v7, "length") >= 5)
    {
      objc_msgSend(v7, "substringFromIndex:", objc_msgSend(v7, "length") - 4);
      v8 = objc_claimAutoreleasedReturnValue();

      v7 = (void *)v8;
    }
    PKMaskedPaymentPAN((uint64_t)v7);
    v9 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v9;
  }

  return v2;
}

id PKSanitizedPrimaryAccountNumberForPass(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "primaryAccountNumberSuffix");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  PKMaskedPaymentPAN((uint64_t)v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKSanitizedDeviceAccountNumberForPass(void *a1)
{
  void *v1;
  void *v2;

  objc_msgSend(a1, "devicePrimaryPaymentApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  PKSanitizedDeviceAccountNumberForPaymentApplication(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKSanitizedDeviceAccountNumberForPaymentApplication(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v1 = a1;
  v2 = objc_msgSend(v1, "paymentNetworkIdentifier");
  if (v2 == 117 || v2 == 11)
  {
    objc_msgSend(v1, "sanitizedDPAN");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v4)
    {
      v7 = 0;
      goto LABEL_10;
    }
    objc_msgSend(v1, "sanitizedDPAN");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    PKFormattedSanitizedPAN((uint64_t)v5);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v1, "dpanSuffix");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    PKMaskedPaymentPAN((uint64_t)v5);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;

LABEL_10:
  return v7;
}

id PKSanitizedBankAccountNumber(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  if ((unint64_t)objc_msgSend(v1, "length") > 4)
  {
    objc_msgSend(v1, "substringFromIndex:", objc_msgSend(v1, "length") - 4);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(&stru_1E2ADF4C0, "stringByPaddingToLength:withString:startingAtIndex:", objc_msgSend(v1, "length") - 4, CFSTR("•"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), v4, v3);
    v2 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v2 = v1;
  }

  return v2;
}

__CFString *PKDisplayableStringForPaymentApplicationState(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;

  v3 = a1 - 2;
  if ((unint64_t)(a1 - 2) <= 8 && ((0x13Fu >> v3) & 1) != 0)
  {
    PKLocalizedPaymentString(&off_1E2AC2608[v3]->isa, 0, v1, v2);
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = &stru_1E2ADF4C0;
  }
  return v4;
}

id PKSortedPaymentApplicationsBySupportedInAppMerchantCountryCode(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __PKSortedPaymentApplicationsBySupportedInAppMerchantCountryCode_block_invoke;
  v7[3] = &unk_1E2AC1E10;
  v8 = v3;
  v4 = v3;
  objc_msgSend(a1, "sortedArrayUsingComparator:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

BOOL PKValueAddedServicesEnabled()
{
  if (qword_1ECF21D58 != -1)
    dispatch_once(&qword_1ECF21D58, &__block_literal_global_450);
  if (!byte_1ECF21C7C)
    return 0;
  if (!+[PKSecureElement isInFailForward](PKSecureElement, "isInFailForward")
    || PKHandsOnDemoModeEnabled()
    || PKUIOnlyDemoModeEnabled())
  {
    return 1;
  }
  if (qword_1ECF21CA8 != -1)
    dispatch_once(&qword_1ECF21CA8, &__block_literal_global_13);
  return _MergedGlobals_21 != 0;
}

uint64_t PKValueAddedServicesEnabledForPass(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (PKValueAddedServicesEnabled() && objc_msgSend(v1, "hasValidNFCPayload"))
    v2 = objc_msgSend(v1, "isValid");
  else
    v2 = 0;

  return v2;
}

uint64_t PKValueAddedServicesAutomaticSelectionDefaultForPass(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (objc_msgSend(v1, "passType") == 1)
  {
    if (PKValueAddedServicesEnabled()
      && (objc_msgSend(v1, "availableForAutomaticPresentationUsingVASContext") & 1) != 0)
    {
      v2 = 1;
    }
    else
    {
      v2 = objc_msgSend(v1, "availableForAutomaticPresentationUsingBeaconContext");
    }
  }
  else if (objc_msgSend(v1, "hasValidNFCPayload") && objc_msgSend(v1, "isValid"))
  {
    v2 = objc_msgSend(v1, "hasStoredValue") ^ 1;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

BOOL PKBarcodePassSharingEnabled(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  if (objc_msgSend(v1, "supportsSharing"))
    v2 = objc_msgSend(v1, "sharingMethod") != -1;
  else
    v2 = 0;

  return v2;
}

uint64_t PKInAppPaymentAllowed()
{
  uint64_t v0;
  void *v1;

  if (qword_1ECF21CA8 != -1)
    dispatch_once(&qword_1ECF21CA8, &__block_literal_global_13);
  if (_MergedGlobals_21)
    return 0;
  objc_msgSend(MEMORY[0x1E0D47230], "sharedConnection");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v0 = objc_msgSend(v1, "isInAppPaymentAllowed");

  return v0;
}

id PKShortExpiration(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  objc_msgSend(v1, "componentsSeparatedByString:", CFSTR("/"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "count") != 2)
    goto LABEL_5;
  objc_msgSend(v2, "objectAtIndex:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectAtIndex:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length") != 4)
  {

LABEL_5:
    v6 = v1;
    goto LABEL_6;
  }
  objc_msgSend(v4, "substringFromIndex:", objc_msgSend(v4, "length") - 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), v3, v5);
  v6 = (id)objc_claimAutoreleasedReturnValue();

LABEL_6:
  return v6;
}

id PKDateStringForExpiredPass(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  NSDate *v5;
  NSDate *v6;

  v1 = a1;
  objc_msgSend(v1, "expirationDate");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "relevantDates");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    PKMediumDateString(v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else if (objc_msgSend(v3, "count"))
  {
    +[PKPassRelevantDate findDateFromDates:option:](PKPassRelevantDate, "findDateFromDates:option:", v3, 0);
    v5 = (NSDate *)objc_claimAutoreleasedReturnValue();
    +[PKPassRelevantDate findDateFromDates:option:](PKPassRelevantDate, "findDateFromDates:option:", v3, 1);
    v6 = (NSDate *)objc_claimAutoreleasedReturnValue();
    if ((-[NSDate isEqual:](v5, "isEqual:", v6) & 1) != 0)
      PKMediumDateString(v5);
    else
      PKDateRangeStringFromDateToDate(v5, v6, 0, 1, 0, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKMediumDateString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21E48;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21E48, &__block_literal_global_636);
  objc_msgSend((id)qword_1ECF21E40, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKDateRangeStringFromDateToDate(NSDate *a1, NSDate *a2, int a3, int a4, int a5)
{
  return PKDateRangeStringFromDateToDate(a1, a2, a3, a4, a5, 0);
}

uint64_t PKUniqueNumber()
{
  const __CFUUID *v0;
  uint64_t v1;

  v0 = CFUUIDCreate(0);
  v1 = *(_OWORD *)&CFUUIDGetUUIDBytes(v0);
  CFRelease(v0);
  return objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", v1);
}

id PKRelativePathAfterResolvingSymlinks(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a2;
  objc_msgSend(a1, "URLByResolvingSymlinksInPath");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "path");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "URLByResolvingSymlinksInPath");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "path");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v7, "hasPrefix:", v5))
  {
    objc_msgSend(v7, "pathComponents");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "pathComponents");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "count");

    v11 = objc_msgSend(v8, "count");
    v12 = (void *)MEMORY[0x1E0CB3940];
    objc_msgSend(v8, "subarrayWithRange:", v10, v11 - v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "pathWithComponents:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

id PKGenerateTransactionReceiptUniqueID(void *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char v11;

  v11 = 30;
  v3 = (void *)MEMORY[0x1E0C99DF0];
  v4 = a2;
  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "dataWithData:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "appendBytes:length:", &v11, 1);
  objc_msgSend(v4, "dataUsingEncoding:", 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "appendData:", v7);
  objc_msgSend(v6, "SHA1Hash");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "fileSafeBase64Encoding");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

void PKTemporaryItemPrepareDirectory()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  id v4;
  NSObject *v5;
  void *v6;
  id v7;
  uint8_t buf[4];
  void *v9;
  __int16 v10;
  id v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKTemporaryItemDirectoryURL();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = *MEMORY[0x1E0CB2AA8];
  v13[0] = &unk_1E2C3E980;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v13, &v12, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  v3 = objc_msgSend(v0, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v1, 1, v2, &v7);
  v4 = v7;

  if ((v3 & 1) == 0)
  {
    PKLogFacilityTypeGetObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      PKTemporaryItemDirectoryURL();
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v9 = v6;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "PKTemporaryItem: failed to create temporary directory at %{public}@ - %@.", buf, 0x16u);

    }
  }

}

id PKTemporaryItemDirectoryURL()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  v0 = (void *)MEMORY[0x1E0C99E98];
  NSTemporaryDirectory();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "fileURLWithPath:isDirectory:", v1, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "URLByAppendingPathComponent:isDirectory:", CFSTR("com.apple.Passbook"), 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

const __CFUUID *PKTemporaryItemNameWithExtension(void *a1)
{
  id v1;
  const __CFUUID *v2;
  __CFString *v3;
  __CFString *v4;

  v1 = a1;
  v2 = CFUUIDCreate(0);
  if (v2)
  {
    v3 = (__CFString *)CFUUIDCreateString(0, v2);
    CFRelease(v2);
    if (v3)
    {
      if (v1 && objc_msgSend(v1, "length"))
        v4 = (__CFString *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@.%@"), v3, v1);
      else
        v4 = v3;
      v2 = (const __CFUUID *)v4;

    }
    else
    {
      v2 = 0;
    }
  }

  return v2;
}

id PKTemporaryItemURLWithExtension(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  PKTemporaryItemNameWithExtension(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PKTemporaryItemDirectoryURL();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URLByAppendingPathComponent:isDirectory:", v3, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKCacheItemPathWithExtension(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  PKTemporaryItemPrepareDirectory();
  PKTemporaryItemURLWithExtension(v1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "path");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void PKSetDisplayProperties(double a1, double a2, double a3)
{
  double v4;
  double v5;

  if (a1 <= a2)
    v4 = a2;
  else
    v4 = a1;
  if (a1 <= a2)
    v5 = a1;
  else
    v5 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)&__displayPropertiesLock);
  qword_1ECF21DD8 = *(_QWORD *)&v5;
  unk_1ECF21DE0 = *(_QWORD *)&v4;
  __displayProperties_2 = *(_QWORD *)&a3;
  __displayPropertiesSet = 1;
  os_unfair_lock_unlock((os_unfair_lock_t)&__displayPropertiesLock);
}

uint64_t PKIsSimulator()
{
  return 0;
}

id PKPrimaryAppleAccountFormattedUsername()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  +[PKAppleAccountManager sharedInstance](PKAppleAccountManager, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "accountStore");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "aa_primaryAppleAccount");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "aa_formattedUsername");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t PKHasVerifiedPrimaryAppleAccount()
{
  void *v0;
  void *v1;
  void *v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  void *v6;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  +[PKAppleAccountManager sharedInstance](PKAppleAccountManager, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "accountStore");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "aa_primaryAppleAccount");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "aa_isPrimaryEmailVerified");
  if (!v2)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "No Primary Apple Account available.", (uint8_t *)&v8, 2u);
    }
    goto LABEL_8;
  }
  if ((v3 & 1) == 0)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v2, "username");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = 138412290;
      v9 = v6;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Primary Apple Account %@ is unverified.", (uint8_t *)&v8, 0xCu);

    }
LABEL_8:

    v4 = 0;
    goto LABEL_9;
  }
  v4 = 1;
LABEL_9:

  return v4;
}

id PKPrimaryAppleAccountEmail()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  if (PKHasVerifiedPrimaryAppleAccount())
  {
    +[PKAppleAccountManager sharedInstance](PKAppleAccountManager, "sharedInstance");
    v0 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "accountStore");
    v1 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "aa_primaryAppleAccount");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "aa_primaryEmail");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

BOOL PKLuhnCheck(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  signed int v11;
  unint64_t v12;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "invertedSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v1, "rangeOfCharacterFromSet:", v3);

  v5 = objc_msgSend(v1, "length");
  v6 = 0;
  if (v4 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = v5;
    if ((unint64_t)(v5 - 100) >= 0xFFFFFFFFFFFFFF9FLL)
    {
      v8 = objc_msgSend(objc_retainAutorelease(v1), "UTF8String");
      v9 = 0;
      v10 = v7 + 1;
      do
      {
        LOBYTE(v11) = *(_BYTE *)(v8 + (v10 - 2)) - 48;
        if (((((_DWORD)v10 - 2) ^ v7) & 1) == 0)
        {
          v11 = (char)(2 * v11);
          if (v11 >= 10)
            v11 = v11 - 10 * (v11 / 0xAu) + v11 / 0xAu;
        }
        v9 += (char)v11;
        --v10;
      }
      while (v10 > 1);
      HIDWORD(v12) = -858993459 * v9 + 429496728;
      LODWORD(v12) = HIDWORD(v12);
      v6 = (v12 >> 1) < 0x19999999;
    }
  }

  return v6;
}

uint64_t PKPANHasBinPrefix(void *a1, void *a2)
{
  id v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR(" "), &stru_1E2ADF4C0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v3, "count");
  v6 = objc_msgSend(v3, "indexOfObject:inSortedRange:options:usingComparator:", v4, 0, v5, 1280, &__block_literal_global_590);
  v7 = 0;
  if (v6 < v5)
  {
    objc_msgSend(v3, "objectAtIndex:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if ((objc_msgSend(v7, "isEqual:", v4) & 1) != 0)
  {
    v8 = 1;
  }
  else if (v6 - 1 >= v5)
  {
    v8 = 0;
  }
  else
  {
    objc_msgSend(v3, "objectAtIndex:");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v4, "hasPrefix:", v9);

  }
  return v8;
}

BOOL PKPaymentApplicationStateIsPersonalized(uint64_t a1)
{
  return a1 == 1 || a1 == 15;
}

BOOL PKPaymentApplicationStateIsSuspended(uint64_t a1)
{
  return (unint64_t)(a1 - 6) < 4;
}

uint64_t PKPaymentApplicationStateIndicatesAppletPresence(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return 0;
  else
    return byte_190453B00[a1 - 1];
}

uint64_t PKPaymentApplicationStateSupportsExpress(unint64_t a1)
{
  return (a1 < 0x10) & (0x83DEu >> a1);
}

id PKPaymentPassCommuteRouteExpirationDate(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(a1, "fieldForKey:", CFSTR("commuter_route_expiration"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "unformattedValue");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v4 = v3;
    else
      v4 = 0;

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

BOOL PKPaymentPassCommuteRouteIsValid(void *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  PKPaymentPassCommuteRouteExpirationDate(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v2, "compare:", v1) == -1;

  }
  else
  {
    v3 = 1;
  }

  return v3;
}

__CFString *PKExpressPassCategoryIdentifier(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  __CFString *v5;
  int v6;
  __CFString *v7;

  v1 = a1;
  if (objc_msgSend(v1, "isTransitPass"))
  {
    objc_msgSend(v1, "devicePrimaryPaymentApplication");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    v3 = objc_msgSend(v2, "paymentNetworkIdentifier");
    objc_msgSend(v2, "supportedTransitNetworkIdentifiers");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "count"))
    {
      v5 = v4;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v3);
      v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    v7 = v5;

  }
  else
  {
    v6 = objc_msgSend(v1, "isAccessPass");

    if (v6)
      v7 = CFSTR("com.apple.passkit.access");
    else
      v7 = CFSTR("com.apple.passkit.payment");
  }
  return v7;
}

id PKCurrentMobileCarrierRegion()
{
  void *KnownNetworkCountryCode;
  void *v1;

  KnownNetworkCountryCode = (void *)CPPhoneNumberCopyNetworkCountryCode();
  if (!KnownNetworkCountryCode)
    KnownNetworkCountryCode = (void *)CPPhoneNumberCopyLastKnownNetworkCountryCode();
  objc_msgSend(KnownNetworkCountryCode, "uppercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

uint64_t PKRegistrationSupportedInCurrentRegionForWebService(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "targetDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deviceRegion");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = PKRegistrationSupportedInRegionForWebService(v3, v1);

  return v4;
}

uint64_t PKRegistrationSupportedInRegionForWebService(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v16;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "context");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "configuration");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "targetDevice");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "osVersion");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "deviceClass");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v6, "supportedRegionsForOSVersion:deviceClass:", v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    objc_msgSend(v10, "addObjectsFromArray:", v11);
  objc_msgSend(v6, "unsupportedRegionsForOSVersion:deviceClass:", v8, v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
    objc_msgSend(v10, "addObjectsFromArray:", v12);
  v13 = PKStockholmSetupSupportedInRegion(v3, v10);
  if (!objc_msgSend(v11, "containsObject:", v3) || v13 != 1)
  {
    objc_msgSend(v7, "deviceVersion");
    v16 = v5;
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v6, "hasFeatureRequiringRegistrationInRegion:osVersion:deviceClass:", v3, v14, v9))
      v13 = 1;
    else
      v13 = 2;

    v5 = v16;
  }

  return v13;
}

uint64_t PKStockholmSetupSupportedInCurrentRegion(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  PKCurrentRegion();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = PKStockholmSetupSupportedInRegion(v2, v1);

  return v3;
}

id PKLocalizedEnvironmentHint(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v5;
  PKSecureElement *v6;
  BOOL v7;

  v1 = a1;
  PKStockholmEnvironmentDisplayName();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    if (qword_1ECF21D68 != -1)
      dispatch_once(&qword_1ECF21D68, &__block_literal_global_457_0);
    if (byte_1ECF21C7E && (PKSuppressSecureElementUIHinting() & 1) == 0)
    {
      if (!os_variant_has_internal_ui())
      {
        PKLocalizedPaymentString(CFSTR("ENV_SANDBOX"), 0);
        v5 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_15;
      }
      if (v1)
      {
        if (objc_msgSend(v1, "BOOLValue"))
        {
LABEL_11:
          v5 = v2;
LABEL_15:
          v3 = v5;
          goto LABEL_7;
        }
      }
      else
      {
        v6 = objc_alloc_init(PKSecureElement);
        v7 = -[PKSecureElement isProductionSigned](v6, "isProductionSigned");

        if (v7)
          goto LABEL_11;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Dev SE - %@"), v2);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_15;
    }
  }
  v3 = 0;
LABEL_7:

  return v3;
}

uint64_t PKDevicePasscodeLocked()
{
  SBSGetScreenLockStatus();
  return 0;
}

uint64_t PKDeviceUILocked()
{
  const char *v0;
  BOOL v1;
  int v2;
  uint64_t v3;

  os_unfair_lock_lock(&PKDeviceUILocked_lock);
  if (PKDeviceUILocked_token == -1)
  {
    v0 = (const char *)objc_msgSend(CFSTR("com.apple.springboard.lockstate"), "UTF8String");
    if (notify_register_dispatch(v0, &PKDeviceUILocked_token, MEMORY[0x1E0C80D38], &__block_literal_global_600))
      v1 = PKDeviceUILocked_token == -1;
    else
      v1 = 1;
    if (!v1)
    {
      notify_cancel(PKDeviceUILocked_token);
      PKDeviceUILocked_token = -1;
    }
  }
  while (1)
  {
    v2 = __ldaxr(PKDeviceUILocked_dirty);
    if (v2 != 1)
      break;
    if (!__stlxr(0, PKDeviceUILocked_dirty))
    {
      v3 = SBSGetScreenLockStatus() != 0;
      PKDeviceUILocked_locked = v3;
      goto LABEL_11;
    }
  }
  __clrex();
  v3 = PKDeviceUILocked_locked;
LABEL_11:
  os_unfair_lock_unlock(&PKDeviceUILocked_lock);
  return v3;
}

uint64_t PKProcessHasNetworkPrivilegies()
{
  if (qword_1ECF21E00 != -1)
    dispatch_once(&qword_1ECF21E00, &__block_literal_global_605);
  return byte_1ECF21C89;
}

uint64_t PKRunningInViewService()
{
  if (qword_1ECF21E08 != -1)
    dispatch_once(&qword_1ECF21E08, &__block_literal_global_606);
  return byte_1ECF21C8A;
}

uint64_t PKRunningInLockScreenPlugin()
{
  if (qword_1ECF21E10 != -1)
    dispatch_once(&qword_1ECF21E10, &__block_literal_global_607);
  return byte_1ECF21C8B;
}

uint64_t PKRunningInPassKitThumbnailExtension()
{
  if (qword_1ECF21E18 != -1)
    dispatch_once(&qword_1ECF21E18, &__block_literal_global_608);
  return byte_1ECF21C8C;
}

uint64_t PKVersionComparison(void *a1, const char *a2)
{
  return objc_msgSend(a1, "compare:options:", a2, 64);
}

BOOL PKVersionCheck(void *a1, uint64_t a2)
{
  return (unint64_t)(objc_msgSend(a1, "compare:options:", a2, 64) + 1) < 2;
}

uint64_t PKDeviceVersionMeetsRequiredVersion(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  const __CFString *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v1 = a1;
  +[PKOSVersionRequirement fromDeviceVersion](PKOSVersionRequirement, "fromDeviceVersion");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v1)
  {
    objc_msgSend(v2, "iphone");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      v5 = CFSTR("iPhone");
LABEL_17:
      v6 = objc_msgSend(v1, "versionMeetsRequirements:deviceClass:", v3, v5);
      goto LABEL_18;
    }
    objc_msgSend(v3, "ipad");
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (v7)
    {
      v5 = CFSTR("iPad");
      goto LABEL_17;
    }
    objc_msgSend(v3, "ipod");
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      v5 = CFSTR("iPod");
      goto LABEL_17;
    }
    objc_msgSend(v3, "appletv");
    v9 = (void *)objc_claimAutoreleasedReturnValue();

    if (v9)
    {
      v5 = CFSTR("AppleTV");
      goto LABEL_17;
    }
    objc_msgSend(v3, "mac");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (v10)
    {
      v5 = CFSTR("Mac");
      goto LABEL_17;
    }
    objc_msgSend(v3, "watch");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    if (v11)
    {
      v5 = CFSTR("Watch");
      goto LABEL_17;
    }
    objc_msgSend(v3, "vision");
    v6 = objc_claimAutoreleasedReturnValue();

    if (v6)
    {
      v5 = CFSTR("RealityDevice");
      goto LABEL_17;
    }
  }
  else
  {
    v6 = 1;
  }
LABEL_18:

  return v6;
}

void PKRangeEnumeratePartitions(unint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;

  v5 = a3;
  if (a1)
  {
    v10 = v5;
    if (a2 >= a1)
    {
      (*((void (**)(id, _QWORD, unint64_t))v5 + 2))(v5, 0, a1);
      v5 = v10;
    }
    else
    {
      v6 = 0;
      v7 = a1;
      do
      {
        v8 = v7 - a2;
        if (v7 >= a2)
          v9 = a2;
        else
          v9 = v7;
        (*((void (**)(id, unint64_t, unint64_t))v5 + 2))(v10, v6, v9);
        v5 = v10;
        v6 += a2;
        v7 = v8;
      }
      while (v6 < a1);
    }
  }

}

id PKTransactionDetailsSensitiveURL(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
  {
    if (+[PKWalletVisibility isWalletVisible](PKWalletVisibility, "isWalletVisible"))
    {
      v5 = objc_alloc_init(MEMORY[0x1E0CB3998]);
      objc_msgSend(v5, "setScheme:", CFSTR("shoebox"));
      objc_msgSend(v5, "setHost:", CFSTR("transaction"));
      objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("serviceIdentifier"), v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v17[0] = v6;
      objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("transactionSourceIdentifier"), v4);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v17[1] = v7;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v17, 2);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setQueryItems:", v8);

      objc_msgSend(v5, "URL");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithString:", CFSTR("prefs:root=PASSBOOK&path="));
      objc_msgSend(v5, "appendString:", CFSTR("transaction"));
      objc_msgSend(v5, "appendString:", CFSTR("&"));
      objc_msgSend(v5, "appendString:", CFSTR("serviceIdentifier"));
      objc_msgSend(v5, "appendString:", CFSTR("="));
      objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "stringByAddingPercentEncodingWithAllowedCharacters:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "appendString:", v11);
      objc_msgSend(v5, "appendString:", CFSTR("&"));
      objc_msgSend(v5, "appendString:", CFSTR("transactionSourceIdentifier"));
      objc_msgSend(v5, "appendString:", CFSTR("="));
      objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "stringByAddingPercentEncodingWithAllowedCharacters:", v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v5, "appendString:", v13);
      v14 = (void *)MEMORY[0x1E0C99E98];
      v15 = (void *)objc_msgSend(v5, "copy");
      objc_msgSend(v14, "URLWithString:", v15);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

BOOL PKIsEmailAddress(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  v1 = (objc_class *)MEMORY[0x1E0D1E6B8];
  v2 = a1;
  v3 = (void *)objc_msgSend([v1 alloc], "initWithString:", v2);

  return v3 != 0;
}

BOOL PKAutomaticRegistrationSupported()
{
  unint64_t v0;
  NSObject *v1;
  _BOOL4 v2;
  uint8_t v4[16];

  v0 = PKCurrentPassbookState();
  if (v0 >= 2)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v1 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_18FC92000, v1, OS_LOG_TYPE_DEFAULT, "PKAutomaticRegistrationSupported() returning NO since Wallet has been deleted", v4, 2u);
    }

  }
  v2 = !PKAutomaticRegistrationDisabled();
  return v0 < 2 && v2;
}

id AMPEnrollmentDismissedKeyForPass(void *a1)
{
  return PKDismissedKeyForPass(CFSTR("AMPEnrollmentDismissed"), a1);
}

id PKDismissedKeyForPass(void *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a1;
  objc_msgSend(a2, "uniqueID");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@-%@"), v4, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void PKSharedCacheSetObjectForKey(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;

  v5 = a1;
  v3 = a2;
  if (v5)
  {
    _SharedCacheQueue();
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PKSharedCacheSetObjectForKey_block_invoke;
    block[3] = &unk_1E2ABE0D0;
    v7 = v5;
    v8 = v3;
    dispatch_sync(v4, block);

  }
  else
  {
    PKSharedCacheRemoveObjectForKey(v3);
  }

}

BOOL _CanWriteToSharedCacheDirectory()
{
  void *v1;
  void *v2;
  id v3;

  if (_CanWriteToSharedCacheDirectory___writeAccess)
    return 1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  PKSharedCacheDirectoryPath();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v2, 1, 0, 0);

  PKSharedCacheDirectoryPath();
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  _CanWriteToSharedCacheDirectory___writeAccess = access((const char *)objc_msgSend(v3, "UTF8String"), 2) == 0;

  return _CanWriteToSharedCacheDirectory___writeAccess != 0;
}

void PKSharedCacheRemoveObjectForKey(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  _SharedCacheQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PKSharedCacheRemoveObjectForKey_block_invoke;
  block[3] = &unk_1E2ABE120;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

void PKSharedCacheSetBoolForKey(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a2;
  objc_msgSend(v3, "numberWithBool:", a1);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  PKSharedCacheSetObjectForKey(v5, v4);

}

id PKSharedCacheGetKeysWithKeyPrefix(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;

  v1 = a1;
  v13 = 0;
  v14 = &v13;
  v15 = 0x3032000000;
  v16 = __Block_byref_object_copy__3;
  v17 = __Block_byref_object_dispose__3;
  v18 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  _SharedCacheQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  v8 = 3221225472;
  v9 = __PKSharedCacheGetKeysWithKeyPrefix_block_invoke;
  v10 = &unk_1E2AC1F78;
  v12 = &v13;
  v3 = v1;
  v11 = v3;
  dispatch_sync(v2, &v7);

  if (objc_msgSend((id)v14[5], "count", v7, v8, v9, v10))
    v4 = (void *)v14[5];
  else
    v4 = 0;
  v5 = v4;

  _Block_object_dispose(&v13, 8);
  return v5;
}

void sub_18FF05A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKSharedCacheGetStringForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKSharedCacheGetNumberForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKSharedCacheGetDateForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKSharedCacheGetDictionaryForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKSharedCacheGetArrayForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t PKSharedCacheGetIntegerForKey(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_opt_class();
  PKSharedCacheGetObjectForKeyOfClass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = objc_msgSend(v3, "integerValue");
  else
    v4 = 0;

  return v4;
}

id PKLocaleWithOverriddenCalendar(void *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = (void *)MEMORY[0x1E0C99DC8];
  v4 = a2;
  objc_msgSend(a1, "localeIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "componentsFromLocaleIdentifier:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v6, "mutableCopy");

  objc_msgSend(v7, "removeObjectForKey:", CFSTR("calendar"));
  objc_msgSend(v7, "setObject:forKey:", v4, *MEMORY[0x1E0C99790]);

  objc_msgSend(MEMORY[0x1E0C99DC8], "localeIdentifierFromComponents:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", v8);

  return v9;
}

uint64_t PKLocaleIs24HourMode(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  uint64_t v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char v12;

  v1 = a1;
  v9 = 0;
  v10 = &v9;
  v11 = 0x2020000000;
  v12 = 0;
  if (qword_1ECF21E28 != -1)
    dispatch_once(&qword_1ECF21E28, &__block_literal_global_620);
  v2 = qword_1ECF21E20;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __PKLocaleIs24HourMode_block_invoke_2;
  v6[3] = &unk_1E2AC1FC0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = *((unsigned __int8 *)v10 + 24);

  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t PKLocalizedHourOfDate(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  id v23;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (qword_1ECF21E30 != -1)
      dispatch_once(&qword_1ECF21E30, &__block_literal_global_626);
    objc_msgSend(MEMORY[0x1E0C99DC8], "autoupdatingCurrentLocale");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = objc_alloc_init(MEMORY[0x1E0CB3578]);
    objc_msgSend(v6, "setLocale:", v5);
    v23 = v4;
    if (v4)
    {
      objc_msgSend(v6, "setTimeZone:", v4);
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "setTimeZone:", v8);

    }
    v22 = (void *)v5;
    objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("J"), 0, v5);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "length");
    v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB37A0]), "initWithCapacity:", v10);
    objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("KhHk"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      for (i = 0; i < v10; i = v16 + v15 + 1)
      {
        v15 = objc_msgSend(v9, "rangeOfComposedCharacterSequenceAtIndex:", i);
        v16 = v14;
        if (v14 == 1)
        {
          v17 = objc_msgSend(v9, "characterAtIndex:", v15);
          if (objc_msgSend(v12, "characterIsMember:", v17))
            objc_msgSend(v11, "appendFormat:", CFSTR("%C"), v17);
        }
        else if (!v14)
        {
          break;
        }
      }
    }
    objc_msgSend(v6, "setDateFormat:", v11);
    v18 = (void *)qword_1ECF21E38;
    objc_msgSend(v6, "stringFromDate:", v3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "numberFromString:", v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v20, "unsignedIntegerValue");

    v4 = v23;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL PKHourOfDateIsSingular(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  int v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "locale");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    v6 = PKLocaleIs24HourMode(v4);
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = PKLocaleIs24HourMode(v7);

  }
  if (v6)
    v8 = 24;
  else
    v8 = 12;

  v9 = objc_msgSend(v3, "component:fromDate:", 32, v2);
  return v9 % v8 == 1;
}

uint64_t PKShortDateString(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3578], "localizedStringFromDate:dateStyle:timeStyle:", a1, 1, 0);
}

id PKLongDateString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21E58;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21E58, &__block_literal_global_637);
  objc_msgSend((id)qword_1ECF21E50, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKWideDateMonthString(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD block[4];
  id v11;

  v3 = a2;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PKWideDateMonthString_block_invoke;
  block[3] = &unk_1E2ABE120;
  v11 = v3;
  v4 = qword_1ECF21E68;
  v5 = v3;
  v6 = a1;
  if (v4 == -1)
  {
    v7 = v5;
  }
  else
  {
    dispatch_once(&qword_1ECF21E68, block);
    v7 = v11;
  }
  objc_msgSend((id)qword_1ECF21E60, "stringFromDate:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id PKRelativeDateString(void *a1)
{
  return PKRelativeDateStringWithFullDateForUnits(a1, 8206, 1);
}

id PKRelativeDateStringWithFullDateForUnits(void *a1, __int16 a2, char a3)
{
  id v5;
  void *v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;
  void *v20;
  int v21;
  uint64_t v22;
  void *v24;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v5 = a1;
  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "timeIntervalSinceDate:", v5);
    if (v7 <= 0.0)
    {
      if (v7 <= -60.0)
      {
        objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isDateInTomorrow:", v5);

        if (!v21)
        {
          objc_msgSend(MEMORY[0x1E0CB3578], "localizedStringFromDate:dateStyle:timeStyle:", v5, 1, 0);
          v22 = objc_claimAutoreleasedReturnValue();
          goto LABEL_30;
        }
        v19 = CFSTR("RELATIVE_DATE_TOMORROW");
LABEL_29:
        PKLocalizedString(&v19->isa, 0);
        v22 = objc_claimAutoreleasedReturnValue();
LABEL_30:
        v18 = (void *)v22;
        goto LABEL_31;
      }
    }
    else if (v7 >= 60.0)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      PKDateIgnoringSmallerUnitsWithTimeZone(v6, 16, 1);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      PKDateIgnoringSmallerUnitsWithTimeZone(v5, 16, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "components:fromDate:toDate:options:", 8222, v9, v10, 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (qword_1ECF21F40 != -1)
        dispatch_once(&qword_1ECF21F40, &__block_literal_global_698);
      if (objc_msgSend(v11, "year") && (v12 = objc_msgSend(v11, "year"), (a2 & 4) != 0) && v12 != 0x7FFFFFFFFFFFFFFFLL
        || objc_msgSend(v11, "era") && (v13 = objc_msgSend(v11, "era"), (a2 & 2) != 0) && v13 != 0x7FFFFFFFFFFFFFFFLL
        || objc_msgSend(v11, "month")
        && (v14 = objc_msgSend(v11, "month"), (a2 & 8) != 0)
        && v14 != 0x7FFFFFFFFFFFFFFFLL
        || objc_msgSend(v11, "weekOfYear")
        && (v15 = objc_msgSend(v11, "weekOfYear"), (a2 & 0x2000) != 0)
        && v15 != 0x7FFFFFFFFFFFFFFFLL
        || objc_msgSend(v11, "day") && (v16 = objc_msgSend(v11, "day"), (a2 & 0x10) != 0) && v16 != 0x7FFFFFFFFFFFFFFFLL)
      {
        objc_msgSend(MEMORY[0x1E0CB3578], "localizedStringFromDate:dateStyle:timeStyle:", v5, 1, 0);
        v17 = objc_claimAutoreleasedReturnValue();
      }
      else if ((a3 & 1) != 0
             || (!objc_msgSend(v11, "year") || objc_msgSend(v11, "year") == 0x7FFFFFFFFFFFFFFFLL)
             && (!objc_msgSend(v11, "era") || objc_msgSend(v11, "era") == 0x7FFFFFFFFFFFFFFFLL)
             && (!objc_msgSend(v11, "month") || objc_msgSend(v11, "month") == 0x7FFFFFFFFFFFFFFFLL)
             && (!objc_msgSend(v11, "weekOfYear") || objc_msgSend(v11, "weekOfYear") == 0x7FFFFFFFFFFFFFFFLL)
             && ((v29 = objc_msgSend(v11, "day"), v30 = objc_msgSend(v11, "day"), v29 >= 0) ? (v31 = v30) : (v31 = -v30),
                 v31 < 2 || objc_msgSend(v11, "day") == 0x7FFFFFFFFFFFFFFFLL))
      {
        objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v25 = objc_msgSend(v24, "isDateInYesterday:", v5);

        v26 = (void *)qword_1ECF21F48;
        if (v25)
        {
          PKDateIgnoringSmallerUnitsWithTimeZone(v5, 16, 1);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          PKDateIgnoringSmallerUnitsWithTimeZone(v6, 16, 1);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v26, "localizedStringForDate:relativeToDate:", v27, v28);
          v18 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_23;
        }
        objc_msgSend((id)qword_1ECF21F48, "localizedStringForDate:relativeToDate:", v5, v6);
        v17 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        objc_msgSend((id)qword_1ECF21F50, "stringFromDate:", v5);
        v17 = objc_claimAutoreleasedReturnValue();
      }
      v18 = (void *)v17;
LABEL_23:

LABEL_31:
      goto LABEL_32;
    }
    v19 = CFSTR("RELATIVE_DATE_NOW");
    goto LABEL_29;
  }
  v18 = 0;
LABEL_32:

  return v18;
}

id PKW3CDateStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21E78;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21E78, &__block_literal_global_640);
  objc_msgSend((id)qword_1ECF21E70, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKISO8601DateStringFromDate(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _PKISO8601DateFormatter();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringFromDate:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _PKISO8601DateFormatter()
{
  if (qword_1ECF22080 != -1)
    dispatch_once(&qword_1ECF22080, &__block_literal_global_1004);
  return (id)qword_1ECF22078;
}

id PKISO8601DateFromDateString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;

  v1 = a1;
  _PKISO8601DateFormatter();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "hasSuffix:", CFSTR("Z")) & 1) == 0)
  {
    objc_msgSend(v1, "stringByAppendingString:", CFSTR("Z"));
    v3 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v3;
  }
  objc_msgSend(v2, "dateFromString:", v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PKISO8601DateFromDateStringContainingFractionalSeconds(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (qword_1ECF21E88 != -1)
    dispatch_once(&qword_1ECF21E88, &__block_literal_global_645);
  if ((objc_msgSend(v1, "hasSuffix:", CFSTR("Z")) & 1) == 0)
  {
    objc_msgSend(v1, "stringByAppendingString:", CFSTR("Z"));
    v2 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v2;
  }
  objc_msgSend((id)qword_1ECF21E80, "dateFromString:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id RFC3339DateStringFromDateInUTCWithIntegralSeconds(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  _RFC3339DateFormatterInUTCWithIntegralSeconds();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "stringFromDate:", v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _RFC3339DateFormatterInUTCWithIntegralSeconds()
{
  if (qword_1ECF22090 != -1)
    dispatch_once(&qword_1ECF22090, &__block_literal_global_1005);
  return (id)qword_1ECF22088;
}

id PKRFC3339DateFromDateStringInUTCWithIntegralSeconds(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "hasSuffix:", CFSTR("Z")))
  {
    _RFC3339DateFormatterInUTCWithIntegralSeconds();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dateFromString:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKDateComponentsRangeString(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21E98;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21E98, &__block_literal_global_647);
  objc_msgSend((id)qword_1ECF21E90, "stringFromDateComponentsRange:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKDateRangeStringFromDateToDate(NSDate *a1, NSDate *a2, int a3, int a4)
{
  return PKDateRangeStringFromDateToDate(a1, a2, a3, a4, 0, 0);
}

id PKDateRangeStringFromDateToDate(NSDate *a1, NSDate *a2, int a3, int a4, NSTimeZone *a5)
{
  return PKDateRangeStringFromDateToDate(a1, a2, a3, a4, 0, a5);
}

id PKDateRangeStringFromDateToDate(NSDate *a1, NSDate *a2, int a3, int a4, int a5, NSTimeZone *a6)
{
  NSDate *v11;
  NSDate *v12;
  NSTimeZone *v13;
  id v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v11 = a1;
  v12 = a2;
  v13 = a6;
  v14 = objc_alloc_init(MEMORY[0x1E0CB3590]);
  objc_msgSend(v14, "setTimeZone:", v13);
  if (a3 && a4)
  {
    if (a5)
      v15 = CFSTR("MMMM dd yyyy jm");
    else
      v15 = CFSTR("MMMM dd yyyy");
  }
  else
  {
    v16 = CFSTR("MMM dd");
    if (a5)
    {
      v16 = CFSTR("MMM dd jm");
      v17 = CFSTR("MMM dd yyyy jm");
    }
    else
    {
      v17 = CFSTR("MMM dd yyyy");
    }
    if (a4)
      v16 = v17;
    v18 = CFSTR("MMMM dd");
    if (a5)
      v18 = CFSTR("MMMM dd jm");
    if (a3)
      v15 = v18;
    else
      v15 = v16;
  }
  objc_msgSend(v14, "setDateTemplate:", v15);
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = v19;
  if (v13)
    objc_msgSend(v19, "setTimeZone:", v13);
  v21 = objc_msgSend(v20, "component:fromDate:", 8, v11);
  if (v21 == objc_msgSend(v20, "component:fromDate:", 8, v12))
    objc_msgSend(v14, "setBoundaryStyle:", 1);
  objc_msgSend(v14, "stringFromDate:toDate:", v11, v12);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  return v22;
}

id PKShortDayAndMonthStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21EA8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21EA8, &__block_literal_global_666);
  objc_msgSend((id)qword_1ECF21EA0, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKShortMonthAndYearStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21EB8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21EB8, &__block_literal_global_669);
  objc_msgSend((id)qword_1ECF21EB0, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKMediumDayAndMonthStringFromDate(NSDate *a1)
{
  return PKMediumDayAndMonthStringFromDate(a1, 0);
}

id PKMediumDayAndMonthStringFromDate(NSDate *a1, NSTimeZone *a2)
{
  uint64_t v3;
  NSTimeZone *v4;
  NSDate *v5;
  void *v6;

  v3 = qword_1ECF21EC8;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ECF21EC8, &__block_literal_global_672);
  objc_msgSend((id)qword_1ECF21EC0, "setTimeZone:", v4);

  objc_msgSend((id)qword_1ECF21EC0, "stringFromDate:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t ___Z33PKMediumDayAndMonthStringFromDateP6NSDateP10NSTimeZone_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ECF21EC0;
  qword_1ECF21EC0 = (uint64_t)v0;

  objc_msgSend((id)qword_1ECF21EC0, "setLocalizedDateFormatFromTemplate:", CFSTR("MMM d"));
  return objc_msgSend((id)qword_1ECF21EC0, "setFormattingContext:", 5);
}

id PKMediumDayAndLongMonthStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21ED8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21ED8, &__block_literal_global_675);
  objc_msgSend((id)qword_1ECF21ED0, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKMonthAndYearStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21EE8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21EE8, &__block_literal_global_678);
  objc_msgSend((id)qword_1ECF21EE0, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKYearStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21EF8;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21EF8, &__block_literal_global_681);
  objc_msgSend((id)qword_1ECF21EF0, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKMonthStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21F08;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21F08, &__block_literal_global_684);
  objc_msgSend((id)qword_1ECF21F00, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKFullWeekdayStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21F18;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21F18, &__block_literal_global_687);
  objc_msgSend((id)qword_1ECF21F10, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKMediumDayLongMonthAndTimeStringFromDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21F28;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21F28, &__block_literal_global_690);
  objc_msgSend((id)qword_1ECF21F20, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PKTimeStringFromDate(NSDate *a1)
{
  return PKTimeStringFromDate(a1, 0);
}

id PKTimeStringFromDate(NSDate *a1, NSTimeZone *a2)
{
  uint64_t v3;
  NSTimeZone *v4;
  NSDate *v5;
  void *v6;

  v3 = qword_1ECF21F38;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&qword_1ECF21F38, &__block_literal_global_693);
  objc_msgSend((id)qword_1ECF21F30, "setTimeZone:", v4);

  objc_msgSend((id)qword_1ECF21F30, "stringFromDate:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t ___Z20PKTimeStringFromDateP6NSDateP10NSTimeZone_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)qword_1ECF21F30;
  qword_1ECF21F30 = (uint64_t)v0;

  objc_msgSend((id)qword_1ECF21F30, "setLocalizedDateFormatFromTemplate:", CFSTR("h:mm a"));
  return objc_msgSend((id)qword_1ECF21F30, "setFormattingContext:", 2);
}

id PKDateIgnoringTime(void *a1)
{
  return PKDateIgnoringSmallerUnitsWithTimeZone(a1, 16, 1);
}

double PKSecondsFromMachTimeInterval(unint64_t a1)
{
  double v2;
  unint64_t v3;
  unint64_t v4;
  mach_timebase_info info;

  v2 = *(double *)&PKSecondsFromMachTimeInterval_timeScaleSeconds;
  if (*(double *)&PKSecondsFromMachTimeInterval_timeScaleSeconds == 0.0)
  {
    info = 0;
    if (mach_timebase_info(&info))
    {
      v2 = *(double *)&PKSecondsFromMachTimeInterval_timeScaleSeconds;
    }
    else
    {
      LODWORD(v3) = info.numer;
      LODWORD(v4) = info.denom;
      v2 = (double)v3 / (double)v4 / 1000.0 / 1000000.0;
      PKSecondsFromMachTimeInterval_timeScaleSeconds = *(_QWORD *)&v2;
    }
  }
  return v2 * (double)a1;
}

id PKDateForString(void *a1)
{
  return _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(a1, 0, 0);
}

id _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(void *a1, char a2, double *a3)
{
  id v5;
  int v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;
  char *v12;
  double v13;
  double v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char __str[2];
  char v24;
  tm v25;
  unint64_t v26;
  char v27[19];
  int v28;
  __int16 v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v5 = a1;
  v6 = objc_msgSend(v5, "getBytes:maxLength:usedLength:encoding:options:range:remainingRange:", v27, 38, &v26, 5, 0, 0, objc_msgSend(v5, "length"), 0);

  v7 = 0;
  if (!v6)
    return v7;
  v8 = v26;
  if (v26 < 0xA)
    return v7;
  v9 = v26 - 1;
  v10 = v27[v26 - 1];
  if (v10 == 90)
  {
    if (v26 - 35 < 0xFFFFFFFFFFFFFFD9)
      goto LABEL_26;
    v11 = &v27[v26];
    *(_DWORD *)&v27[v9] = 808464427;
    v9 = v8 + 4;
    v26 = v8 + 4;
    v11[3] = 48;
  }
  else
  {
    if (v27[v26 - 3] != 58)
      goto LABEL_26;
    if ((a2 & 1) != 0)
    {
      *(_DWORD *)&v27[v26 - 5] = 808464432;
    }
    else
    {
      v12 = &v27[v26];
      v27[v26 - 3] = v27[v26 - 2];
      *(v12 - 2) = v10;
    }
    v26 = v9;
    if (v9 > 0x26)
      goto LABEL_26;
  }
  v27[v9] = 0;
  v13 = 0.0;
  if (v9 < 0x14 || v28 != 46)
    goto LABEL_17;
  *(_QWORD *)&v25.tm_sec = 0;
  v14 = strtod((const char *)&v28, (char **)&v25);
  if (!*(_QWORD *)&v25.tm_sec || (v13 = v14, v15 = **(unsigned __int8 **)&v25.tm_sec, v15 != 45) && v15 != 43)
  {
LABEL_26:
    v7 = 0;
    return v7;
  }
  v16 = **(_DWORD **)&v25.tm_sec;
  v29 = *(_WORD *)(*(_QWORD *)&v25.tm_sec + 4);
  v28 = v16;
  v26 = 24;
LABEL_17:
  memset(&v25, 0, sizeof(v25));
  v17 = strptime_l(v27, "%Y-%m-%dT%H:%M%z", &v25, 0);
  if (!v17)
    v17 = strptime_l(v27, "%Y-%m-%dT%H:%M:%S%z", &v25, 0);
  v7 = 0;
  if (v17)
  {
    if (v17 == &v27[v26])
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSince1970:", v13 + (double)mktime(&v25));
      v18 = objc_claimAutoreleasedReturnValue();
      v7 = (void *)v18;
      if (a3)
      {
        if (v18)
        {
          v24 = 0;
          *(_WORD *)__str = *(_WORD *)&v27[v26 - 4];
          v19 = strtol(__str, 0, 10);
          *(_WORD *)__str = *(_WORD *)&v27[v26 - 2];
          v20 = strtol(__str, 0, 10);
          v21 = 60 * (v20 + 60 * v19);
          if (v27[v26 - 5] != 43)
            v21 = -60 * (v20 + 60 * v19);
          *a3 = (double)v21;
        }
      }
    }
  }
  return v7;
}

id PKDateForStringIgnoringTimeZone(void *a1)
{
  return _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(a1, 1, 0);
}

id PKDateFromString(void *a1, double *a2)
{
  return _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(a1, 0, a2);
}

id PKDateIgnoringTimeWithTimeZone(void *a1, char a2)
{
  return PKDateIgnoringSmallerUnitsWithTimeZone(a1, 16, a2);
}

id PKDateIgnoringSmallerUnitsWithTimeZone(void *a1, uint64_t a2, char a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v5 = a1;
  v6 = v5;
  if (a2 > 31)
  {
    if (a2 > 127)
    {
      if (a2 == 2048)
      {
        a2 = 2054;
        goto LABEL_19;
      }
      if (a2 == 128)
      {
        a2 = 2302;
        goto LABEL_19;
      }
    }
    else
    {
      if (a2 == 32)
      {
        a2 = 2110;
        goto LABEL_19;
      }
      if (a2 == 64)
      {
        a2 = 2174;
        goto LABEL_19;
      }
    }
    goto LABEL_23;
  }
  if (a2 > 7)
  {
    if (a2 == 8)
    {
      a2 = 2062;
      goto LABEL_19;
    }
    if (a2 == 16)
    {
      a2 = 2078;
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  if (a2 != 2)
  {
    if (a2 == 4)
    {
      a2 = 6;
      goto LABEL_19;
    }
LABEL_23:
    v10 = v5;
    goto LABEL_22;
  }
LABEL_19:
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((a3 & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneWithAbbreviation:", CFSTR("UTC"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setTimeZone:", v8);

  }
  objc_msgSend(v7, "components:fromDate:", a2, v6);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "dateFromComponents:", v9);
  v10 = (id)objc_claimAutoreleasedReturnValue();

LABEL_22:
  return v10;
}

id PKDateIgnoringSmallerUnits(void *a1, uint64_t a2)
{
  return PKDateIgnoringSmallerUnitsWithTimeZone(a1, a2, 1);
}

const __CFString *PKCalendarUnitString(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;

  v1 = CFSTR("second");
  v2 = CFSTR("quarter");
  if (a1 != 2048)
    v2 = 0;
  if (a1 != 128)
    v1 = v2;
  v3 = CFSTR("minute");
  if (a1 != 64)
    v3 = 0;
  if (a1 == 32)
    v3 = CFSTR("hour");
  if (a1 <= 127)
    v1 = v3;
  v4 = CFSTR("month");
  v5 = CFSTR("day");
  if (a1 != 16)
    v5 = 0;
  if (a1 != 8)
    v4 = v5;
  v6 = CFSTR("year");
  if (a1 != 4)
    v6 = 0;
  if (a1 == 2)
    v6 = CFSTR("era");
  if (a1 <= 7)
    v4 = v6;
  if (a1 <= 31)
    return v4;
  else
    return v1;
}

uint64_t PKCalendarUnitForString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("era")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("year")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("quarter")) & 1) != 0)
  {
    v2 = 2048;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("month")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("day")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("hour")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("minute")) & 1) != 0)
  {
    v2 = 64;
  }
  else if (objc_msgSend(v1, "isEqualToIgnoringCase:", CFSTR("second")))
  {
    v2 = 128;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKCalendarUnitIntervalString(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;

  if (qword_1ECF21F60 != -1)
    dispatch_once(&qword_1ECF21F60, &__block_literal_global_722);
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setValue:forComponent:", a1, a2);
  objc_msgSend((id)qword_1ECF21F58, "stringFromDateComponents:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

__CFString *PKLocalizedIntervalTermString(unint64_t a1, uint64_t a2)
{
  __CFString *v3;
  __CFString *v4;
  void *v6;
  unint64_t v7;
  void *v8;

  if (a1 == 1)
  {
    v3 = &stru_1E2ADF4C0;
    if (a2 <= 15)
    {
      if (a2 == 4)
      {
        v4 = CFSTR("PAYMENT_RECURRING_TERM_PER_YEAR");
        goto LABEL_18;
      }
      if (a2 == 8)
      {
        v4 = CFSTR("PAYMENT_RECURRING_TERM_PER_MONTH");
        goto LABEL_18;
      }
    }
    else
    {
      switch(a2)
      {
        case 16:
          v4 = CFSTR("PAYMENT_RECURRING_TERM_PER_DAY");
          goto LABEL_18;
        case 32:
          v4 = CFSTR("PAYMENT_RECURRING_TERM_PER_HOUR");
          goto LABEL_18;
        case 64:
          v4 = CFSTR("PAYMENT_RECURRING_TERM_PER_MINUTE");
LABEL_18:
          PKLocalizedPaymentString(&v4->isa, 0);
          v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
          break;
      }
    }
  }
  else
  {
    if (a2 == 16)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "maximumRangeOfUnit:", 512);
      if (a1 && !(a1 % v7))
      {
        PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_EVERY_INTERVAL_WEEKS"), CFSTR("%lu"), a1 / v7);
        v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

        return v3;
      }

    }
    PKCalendarUnitIntervalString(a1, a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_EVERY_INTERVAL"), CFSTR("%lu%@"), a1, v8);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  return v3;
}

id PKLocalizedIntervalTermStringWithAmount(void *a1, unint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  unint64_t v8;
  void *v9;
  id v10;

  v5 = a1;
  v6 = v5;
  if (a2 == 1)
  {
    if (a3 <= 15)
    {
      if (a3 == 4)
      {
        PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_PER_YEAR_FMT"), CFSTR("%@"), v5);
        goto LABEL_19;
      }
      if (a3 == 8)
      {
        PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_PER_MONTH_FMT"), CFSTR("%@"), v5);
        goto LABEL_19;
      }
    }
    else
    {
      switch(a3)
      {
        case 16:
          PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_PER_DAY_FMT"), CFSTR("%@"), v5);
          goto LABEL_19;
        case 32:
          PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_PER_HOUR_FMT"), CFSTR("%@"), v5);
          goto LABEL_19;
        case 64:
          PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_PER_MINUTE_FMT"), CFSTR("%@"), v5);
LABEL_19:
          v10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_20:
          v9 = v10;
          goto LABEL_21;
      }
    }
    v10 = v5;
    goto LABEL_20;
  }
  if (a3 == 16)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "maximumRangeOfUnit:", 512);
    if (a2 && !(a2 % v8))
    {
      PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_EVERY_INTERVAL_WEEKS_FMT"), CFSTR("%lu%@"), a2 / v8, v6);
      goto LABEL_12;
    }

  }
  PKCalendarUnitIntervalString(a2, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  PKLocalizedPaymentString(CFSTR("PAYMENT_RECURRING_TERM_EVERY_INTERVAL_FMT"), CFSTR("%lu%@%@"), a2, v7, v6);
LABEL_12:
  v9 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_21:
  return v9;
}

id PKLocalizedWeekdaySpecificStringKeyForKey(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  const __CFString *v10;
  id v11;
  id v12;

  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v5 = (void *)MEMORY[0x1E0C99D48];
    v6 = *MEMORY[0x1E0C996C8];
    v7 = a2;
    objc_msgSend(v5, "calendarWithIdentifier:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "component:fromDate:", 512, v7);

    switch(v9)
    {
      case 1:
        v10 = CFSTR("_SUNDAY");
        goto LABEL_12;
      case 2:
        v10 = CFSTR("_MONDAY");
        goto LABEL_12;
      case 3:
        v10 = CFSTR("_TUESDAY");
        goto LABEL_12;
      case 4:
        v10 = CFSTR("_WEDNESDAY");
        goto LABEL_12;
      case 5:
        v10 = CFSTR("_THURSDAY");
        goto LABEL_12;
      case 6:
        v10 = CFSTR("_FRIDAY");
        goto LABEL_12;
      case 7:
        v10 = CFSTR("_SATURDAY");
LABEL_12:
        objc_msgSend(v4, "stringByAppendingString:", v10);
        v12 = (id)objc_claimAutoreleasedReturnValue();
        break;
      default:
        v12 = v4;
        break;
    }
    v11 = v12;

  }
  else
  {
    v11 = v3;
  }

  return v11;
}

id PKEarlierDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v4;
  if (v3 && (v6 = v3, v4))
  {
    objc_msgSend(v3, "earlierDate:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = v6;
  }
  v8 = v7;

  return v8;
}

id PKLaterDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v4;
  if (v3 && (v6 = v3, v4))
  {
    objc_msgSend(v3, "laterDate:", v4);
    v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v7 = v6;
  }
  v8 = v7;

  return v8;
}

id PKDatesMidpoint(void *a1, void *a2)
{
  id v3;
  double v4;
  void *v5;

  v3 = a1;
  objc_msgSend(a2, "timeIntervalSinceDate:", v3);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeInterval:sinceDate:", v3, v4 * 0.5);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

BOOL PKDateIsBetweenDates(void *a1, void *a2, void *a3, int a4)
{
  _BOOL8 result;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v16;
  _BOOL4 v18;

  result = 0;
  if (a1 && a2 && a3)
  {
    v8 = a3;
    v9 = a2;
    v10 = a1;
    v11 = objc_msgSend(v9, "compare:", v10);
    v12 = objc_msgSend(v8, "compare:", v10);
    v13 = objc_msgSend(v9, "compare:", v10);

    v14 = objc_msgSend(v8, "compare:", v10);
    v16 = v11 == -1 && v12 == 1;
    v18 = v11 == -1 || v13 == 0;
    if (v12 != 1 && v14 != 0)
      v18 = 0;
    if (a4)
      return v18;
    else
      return v16;
  }
  return result;
}

BOOL PKDateRangeContainsMultipleIntervals(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  _BOOL8 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  double v15;

  v7 = a1;
  v8 = a2;
  v9 = v8;
  v10 = 0;
  if (v7 && v8)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    PKDateIgnoringSmallerUnitsWithTimeZone(v7, a4, 1);
    v12 = objc_claimAutoreleasedReturnValue();

    PKDateIgnoringSmallerUnitsWithTimeZone(v9, a4, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v11, "dateByAddingUnit:value:toDate:options:", a4, a3, v12, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "timeIntervalSinceDate:", v14);
    v10 = v15 > 0.0;

    v9 = v13;
    v7 = (id)v12;
  }

  return v10;
}

uint64_t PKDateRangeNumberOfIntervalsForUnit(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = 0;
  if (v5 && v6)
  {
    objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    PKDateIgnoringSmallerUnitsWithTimeZone(v5, a3, 1);
    v10 = objc_claimAutoreleasedReturnValue();

    PKDateIgnoringSmallerUnitsWithTimeZone(v7, a3, 1);
    v11 = objc_claimAutoreleasedReturnValue();

    objc_msgSend(v9, "components:fromDate:toDate:options:", a3, v10, v11, 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v12, "valueForComponent:", a3);

    v7 = (void *)v11;
    v5 = (id)v10;
  }

  return v8;
}

id PKEndOfNextMonth(void *a1)
{
  return PKEndOfNextMonthAndTimeZone(a1, 0);
}

id PKEndOfNextMonthAndTimeZone(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
    objc_msgSend(v5, "setTimeZone:", v4);
  v7 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v7, "setMonth:", 2);
  objc_msgSend(v7, "setDay:", -1);
  if (v3)
  {
    v8 = v3;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "date");
    v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  v9 = v8;
  PKStartOfMonthWithTimeZone(v8, v4);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dateByAddingComponents:toDate:options:", v7, v10, 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  PKEndOfDayWithTimeZone(v11, v4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id PKStartOfMonthWithTimeZone(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v4)
  {
    objc_msgSend(v5, "setTimeZone:", v4);
    objc_msgSend(v6, "componentsInTimeZone:fromDate:", v4, v3);
  }
  else
  {
    objc_msgSend(v5, "components:fromDate:", 12, v3);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setDay:", 1);
  objc_msgSend(v6, "dateFromComponents:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id PKEndOfMonthWithTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a1;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
    objc_msgSend(v6, "setTimeZone:", v3);
  v8 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v8, "setMonth:", 1);
  objc_msgSend(v8, "setDay:", -1);
  PKStartOfMonthWithTimeZone(v5, v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "dateByAddingComponents:toDate:options:", v8, v9, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  PKEndOfDayWithTimeZone(v10, v3);
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  return v11;
}

id PKEndOfDayWithTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99D48];
  v5 = a1;
  objc_msgSend(v4, "currentCalendar");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (v3)
    objc_msgSend(v6, "setTimeZone:", v3);
  v8 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v8, "setHour:", 23);
  objc_msgSend(v8, "setMinute:", 59);
  objc_msgSend(v8, "setSecond:", 59);
  objc_msgSend(v7, "nextDateAfterDate:matchingComponents:options:", v5, v8, 512);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id PKEndOfMonth(void *a1)
{
  void *v1;
  void *v2;

  PKStartOfNextMonth(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateByAddingTimeInterval:", -1.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKStartOfNextMonth(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setMonth:", 1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v4, v2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  PKStartOfMonth(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PKStartOfLastMonth(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setMonth:", -1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v4, v2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  PKStartOfMonth(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PKStartOfMonth(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 14, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "dateFromComponents:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKEndOfLastMonth(void *a1)
{
  void *v1;
  void *v2;

  PKStartOfMonth(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateByAddingTimeInterval:", -1.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKStartOfYear(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 6, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "dateFromComponents:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKStartOfLastYear(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setYear:", -1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v4, v2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  PKStartOfYear(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PKEndOfLastYear(void *a1)
{
  void *v1;
  void *v2;

  PKStartOfYear(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateByAddingTimeInterval:", -1.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKStartOfNextYear(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setYear:", 1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v4, v2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  PKStartOfYear(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PKEndOfYear(void *a1)
{
  void *v1;
  void *v2;

  PKStartOfNextYear(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dateByAddingTimeInterval:", -1.0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKStartOfDay(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "components:fromDate:", 30, v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "dateFromComponents:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKEndOfDay(void *a1)
{
  return PKEndOfDayWithTimeZone(a1, 0);
}

id PKStartOfWeek(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v6;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = 0;
  objc_msgSend(v3, "rangeOfUnit:startDate:interval:forDate:", 4096, &v6, 0, v2);

  v4 = v6;
  return v4;
}

id PKOneMonthEarlier(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;

  v1 = (void *)MEMORY[0x1E0C99D48];
  v2 = a1;
  objc_msgSend(v1, "currentCalendar");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
  objc_msgSend(v4, "setMonth:", -1);
  objc_msgSend(v3, "dateByAddingComponents:toDate:options:", v4, v2, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKPaymentDateStringFromDateWithTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  PKPaymentDateFormatterWithTimeZone(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromDate:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKPaymentDateFormatterWithTimeZone(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21FE0;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21FE0, &__block_literal_global_791);
  v3 = (void *)objc_msgSend((id)qword_1ECF21FD8, "copy");
  objc_msgSend(v3, "setTimeZone:", v2);

  return v3;
}

id PKPaymentDateFromDateStringWithTimeZone(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  PKPaymentDateFormatterWithTimeZone(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "dateFromString:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKRFC1123StringForDate(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF21F70;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF21F70, &__block_literal_global_775);
  objc_msgSend((id)qword_1ECF21F68, "stringFromDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _PKNumberFormatterForCurrencyCode(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  if (qword_1ECF21F80 != -1)
    dispatch_once(&qword_1ECF21F80, &__block_literal_global_778);
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__3;
  v13 = __Block_byref_object_dispose__3;
  v14 = 0;
  v2 = qword_1ECF21F88;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___PKNumberFormatterForCurrencyCode_block_invoke_2;
  v6[3] = &unk_1E2AC1FC0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

id _PKNumberFormatterWithMinimalFractionDigits(uint64_t a1)
{
  id v2;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t);
  id v10;

  if (qword_1ECF21F98 != -1)
    dispatch_once(&qword_1ECF21F98, &__block_literal_global_781);
  v5 = 0;
  v6 = &v5;
  v7 = 0x3032000000;
  v8 = __Block_byref_object_copy__3;
  v9 = __Block_byref_object_dispose__3;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___PKNumberFormatterWithMinimalFractionDigits_block_invoke_2;
  v4[3] = &unk_1E2AC2288;
  v4[4] = &v5;
  v4[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1ECF21FA0, v4);
  v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

id _PKNumberFormatterWithMinimalFractionDigitsForCurrencyCode(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  if (qword_1ECF21FB0 != -1)
    dispatch_once(&qword_1ECF21FB0, &__block_literal_global_783);
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__3;
  v13 = __Block_byref_object_dispose__3;
  v14 = 0;
  v2 = qword_1ECF21FB8;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___PKNumberFormatterWithMinimalFractionDigitsForCurrencyCode_block_invoke_2;
  v6[3] = &unk_1E2AC1FC0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

id _PKNumberFormatterForCurrencyCodeExcludingCurrencySymbols(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  id v4;
  _QWORD v6[4];
  id v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v1 = a1;
  if (qword_1ECF21FC8 != -1)
    dispatch_once(&qword_1ECF21FC8, &__block_literal_global_785);
  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__3;
  v13 = __Block_byref_object_dispose__3;
  v14 = 0;
  v2 = qword_1ECF21FD0;
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = ___PKNumberFormatterForCurrencyCodeExcludingCurrencySymbols_block_invoke_2;
  v6[3] = &unk_1E2AC1FC0;
  v7 = v1;
  v8 = &v9;
  v3 = v1;
  dispatch_sync(v2, v6);
  v4 = (id)v10[5];

  _Block_object_dispose(&v9, 8);
  return v4;
}

id PKFormattedCurrencyStringFromNumber(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _PKNumberFormatterForCurrencyCode(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKFormattedCurrencyStringWithMinimalFractionDigitsFromNumber(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _PKNumberFormatterWithMinimalFractionDigitsForCurrencyCode(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKFormattedCurrencyStringExcludingCurrencySymbolsFromNumber(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _PKNumberFormatterForCurrencyCodeExcludingCurrencySymbols(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKFormattedStringMinimalFractionDigitsFromNumber(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  _PKNumberFormatterWithMinimalFractionDigits(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "stringFromNumber:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKFormattedStringSignificantDigitsFromNumber(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;

  v5 = a1;
  _PKNumberFormatterWithSignificantDigits(a2, a3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringFromNumber:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id _PKNumberFormatterWithSignificantDigits(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  id v11;
  os_unfair_lock_s lock;

  v5 = a3;
  lock._os_unfair_lock_opaque = 0;
  if (qword_1ECF220A0 != -1)
    dispatch_once(&qword_1ECF220A0, &__block_literal_global_1008);
  os_unfair_lock_lock(&lock);
  objc_msgSend(v5, "localeIdentifier");
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)v6;
  v8 = &stru_1E2ADF4C0;
  if (v6)
    v8 = (__CFString *)v6;
  v9 = v8;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu-%lu%@"), a1, a2, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend((id)qword_1ECF22098, "objectForKeyedSubscript:", v10);
  v11 = (id)objc_claimAutoreleasedReturnValue();
  if (!v11)
  {
    v11 = objc_alloc_init(MEMORY[0x1E0CB37F0]);
    objc_msgSend(v11, "setNumberStyle:", 1);
    objc_msgSend(v11, "setUsesSignificantDigits:", 1);
    objc_msgSend(v11, "setMinimumSignificantDigits:", a1);
    objc_msgSend(v11, "setMaximumSignificantDigits:", a2);
    if (v5)
      objc_msgSend(v11, "setLocale:", v5);
    objc_msgSend((id)qword_1ECF22098, "setObject:forKeyedSubscript:", v11, v10);
  }
  os_unfair_lock_unlock(&lock);

  return v11;
}

id PKFormattedStringSignificantDigitsFromNumberInLocale(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;

  v7 = a1;
  _PKNumberFormatterWithSignificantDigits(a2, a3, a4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringFromNumber:", v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id PKMutableNumberFormatterForCurrencyCode(void *a1)
{
  void *v1;
  void *v2;

  _PKNumberFormatterForCurrencyCode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");

  return v2;
}

id PKMutableNumberFormatterWithMinimalFractionDigitsForCurrencyCode(void *a1)
{
  void *v1;
  void *v2;

  _PKNumberFormatterWithMinimalFractionDigitsForCurrencyCode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");

  return v2;
}

id PKMutableNumberFormatterForCurrencyCodeExcludingCurrencySymbols(void *a1)
{
  void *v1;
  void *v2;

  _PKNumberFormatterForCurrencyCodeExcludingCurrencySymbols(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");

  return v2;
}

id PKMutableNumberFormatterWithMinimalFractionDigits(uint64_t a1)
{
  void *v1;
  void *v2;

  _PKNumberFormatterWithMinimalFractionDigits(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v1, "copy");

  return v2;
}

uint64_t PKMaximumFractionDigitsForCurrencyCode(void *a1)
{
  void *v1;
  uint64_t v2;

  _PKNumberFormatterForCurrencyCode(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "maximumFractionDigits");

  return v2;
}

id PKBestGuessNormalizedPhoneNumber(void *a1)
{
  id v1;
  id v2;
  const __CFString *v3;
  NSObject *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  int v10;
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    v2 = v1;
    v3 = (const __CFString *)PNCopyBestGuessCountryCodeForNumber();
    if (!v3)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Could not extract country code from phone number. Trying device", (uint8_t *)&v10, 2u);
      }

      v3 = (const __CFString *)CPPhoneNumberCopyHomeCountryCode();
      if (!v3)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v10) = 0;
          _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Could not extract country code from device. Trying locale", (uint8_t *)&v10, 2u);
        }

        PKCurrentRegion();
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "lowercaseString");
        v3 = (const __CFString *)objc_claimAutoreleasedReturnValue();

        if (!v3)
        {
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v10) = 0;
            _os_log_impl(&dword_18FC92000, v4, OS_LOG_TYPE_DEFAULT, "Could not extract country code from locale. Defaulting to 'us'", (uint8_t *)&v10, 2u);
          }

          v3 = CFSTR("us");
        }
      }
    }
    v6 = (void *)PNCopyBestGuessNormalizedNumberForCountry();
    if (!v6
      || (objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v6),
          (v7 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
    {
      PKLogFacilityTypeGetObject(6uLL);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 138412290;
        v11 = v2;
        _os_log_impl(&dword_18FC92000, v8, OS_LOG_TYPE_DEFAULT, "Could not generate best guess phone number from input: %@", (uint8_t *)&v10, 0xCu);
      }

      v7 = 0;
    }
    if (v2)
      CFRelease(v2);
    if (v3)
      CFRelease(v3);
    if (v6)
      free(v6);
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id PKBestGuessNormalizedEmailOrPhoneNumber(void *a1)
{
  id v1;
  id v2;
  void *v3;

  v1 = a1;
  if (PKIsEmailAddress(v1))
  {
    v2 = v1;
  }
  else
  {
    PKBestGuessNormalizedPhoneNumber(v1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  v3 = v2;

  return v3;
}

id PKTelephoneURLFromPhoneNumber(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "URLPathAllowedCharacterSet");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "stringByAddingPercentEncodingWithAllowedCharacters:", v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v3, "length"))
    {
      v4 = objc_alloc(MEMORY[0x1E0C99E98]);
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("tel://%@"), v3);
      v6 = (void *)objc_msgSend(v4, "initWithString:", v5);

    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id PKPaymentDateFormatter()
{
  void *v0;
  void *v1;

  objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKPaymentDateFormatterWithTimeZone(v0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKMerchantFormattedLocationForTransaction(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  _BOOL4 v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "rawState");
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "state");
  v6 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "locality");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "administrativeArea");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v4, "effectiveTransactionSource");

  if (v9 == 5)
  {
    v10 = v6 | v5;
    if (v8)
    {
      if (v10)
      {
        if (v6)
        {
          v11 = objc_msgSend(v8, "caseInsensitiveCompare:", v6) == 0;
          if (v5)
          {
LABEL_6:
            v12 = objc_msgSend(v8, "caseInsensitiveCompare:", v5) == 0;
LABEL_12:
            LODWORD(v10) = v11 || v12;
            goto LABEL_13;
          }
        }
        else
        {
          v11 = 0;
          if (v5)
            goto LABEL_6;
        }
        v12 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      LODWORD(v10) = v10 == 0;
    }
    v13 = v7 != 0;
    v14 = v8 != 0;
    goto LABEL_17;
  }
  LODWORD(v10) = 1;
LABEL_13:
  v13 = v7 != 0;
  v14 = v8 != 0;
  if ((_DWORD)v10 && v7 && v8)
  {
    PKLocalizationAwareFormatLocationComponents(v7, v8);
    v15 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_23;
  }
LABEL_17:
  if (!(_DWORD)v10 || !v13 && !v14)
  {
    objc_msgSend(v3, "city");
    v18 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "city");
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = (void *)v19;
    if (v18 && v6)
    {
      PKLocalizationAwareFormatLocationComponents((void *)v19, (void *)v6);
      v21 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v17 = (void *)(v19 | v6);

      if (!v17)
        goto LABEL_33;
      objc_msgSend(v3, "city");
      v22 = objc_claimAutoreleasedReturnValue();
      v20 = (void *)v22;
      if (v22)
        v23 = (void *)v22;
      else
        v23 = (void *)v6;
      v21 = v23;
    }
    v17 = v21;

    goto LABEL_33;
  }
  if (v13)
    v16 = v7;
  else
    v16 = v8;
  v15 = v16;
LABEL_23:
  v17 = v15;
LABEL_33:

  return v17;
}

id PKLocalizationAwareFormatLocationComponents(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  int v6;
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  void *v16;

  v3 = a1;
  v4 = a2;
  v5 = CNIsChineseJapaneseKoreanString();
  v6 = CNIsChineseJapaneseKoreanString();
  v7 = CNStringContainsKoreanCharacters();
  v8 = CNStringContainsKoreanCharacters();
  if (!v5 || (v7 & 1) != 0 || !v6 || v8)
  {
    if (((v5 | v6) & 1) != 0)
    {
      v15 = CFSTR("%2$@ %1$@");
    }
    else
    {
      PKCoreLocalizedString(CFSTR("TRANSACTION_ADDRESS_COMMA_SEPARATED_FORMAT"), 0);
      v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v15 = CFSTR("%2$@%1$@");
  }
  PKStringWithValidatedFormat(v15, CFSTR("%@%@"), v9, v10, v11, v12, v13, v14, (uint64_t)v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id PKMerchantFormattedLocationForPostalAddress(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "city");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "state");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "country");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "subLocality");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    v6 = v2;
    v7 = v6;
    if (v6)
    {
      v8 = objc_msgSend(v6, "length");

      if (v8)
      {
        v9 = v3;
        if (v9)
        {
          v10 = v9;
          v11 = objc_msgSend(v9, "length");

          v12 = v7;
          if (v11)
            goto LABEL_17;
        }
      }
      if (objc_msgSend(v7, "length"))
      {
        v13 = v4;
        if (v13)
        {
          v10 = v13;
          v14 = objc_msgSend(v13, "length");

          v12 = v7;
          if (v14)
            goto LABEL_17;
        }
      }
      if (objc_msgSend(v7, "length"))
      {
        v15 = v7;
LABEL_26:
        v12 = v15;
        goto LABEL_27;
      }
    }
    v16 = v5;
    v12 = v16;
    if (v16 && (v17 = objc_msgSend(v16, "length"), v12, v17))
    {
      if (!v4)
      {
        v21 = v12;
LABEL_24:
        v22 = objc_msgSend(v12, "length");

        if (!v22)
        {
          v12 = 0;
          goto LABEL_27;
        }
        v15 = v12;
        goto LABEL_26;
      }
      if (objc_msgSend(v4, "length"))
      {
        v10 = v4;
LABEL_17:
        v18 = v12;
        v19 = v10;
        PKLocalizationAwareFormatLocationComponents(v18, v19);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_27:
        return v12;
      }
    }
    else if (!v4)
    {
LABEL_21:
      v20 = v12;
      if (!v12)
        goto LABEL_27;
      goto LABEL_24;
    }
    if (objc_msgSend(v4, "length"))
    {
      v15 = v4;
      goto LABEL_26;
    }
    goto LABEL_21;
  }
  v12 = 0;
  return v12;
}

id PKValidationWarningWithReason(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v18[2];
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  v12 = (void *)MEMORY[0x1E0CB35C8];
  v18[0] = *MEMORY[0x1E0CB2D50];
  v18[1] = CFSTR("PKIsWarning");
  v19[0] = v11;
  v19[1] = &unk_1E2C3E998;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, v18, 2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  PKLocalizedString(CFSTR("PASS_VALIDATION_ERROR"), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _PKErrorWithDescriptionAndUnderlyingError(v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id PKSignatureErrorWithReason(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  v12 = (void *)MEMORY[0x1E0CB35C8];
  v18 = *MEMORY[0x1E0CB2D50];
  v19[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  PKLocalizedString(CFSTR("PASS_SIGNATURE_ERROR"), 0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  _PKErrorWithDescriptionAndUnderlyingError(v15, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

id PKSignatureEvaluationUnreachableError()
{
  void *v0;
  void *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), -6000, 0);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKLocalizedString(CFSTR("PASS_SIGNATURE_ERROR"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  _PKErrorWithDescriptionAndUnderlyingError(v1, v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

BOOL PKValidateAmountDecimalNumber(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if ((objc_msgSend(v1, "pk_isNegativeNumber") & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithMantissa:exponent:isNegative:", 1, 8, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "compare:", v1) == -1;

  }
  return v2;
}

double PKTimeToPerformBlock(void *a1)
{
  void (**v1)(_QWORD);
  uint64_t v2;
  unint64_t v3;

  v1 = a1;
  v2 = mach_absolute_time();
  v1[2](v1);

  v3 = mach_absolute_time() - v2;
  return PKSecondsFromMachTimeInterval(v3);
}

void PKLogTimeToPerformBlockWithIdentifier(void *a1, void *a2, void *a3)
{
  NSObject *v5;
  id v6;
  id v7;
  void *v8;
  double v9;
  int v10;
  id v11;
  __int16 v12;
  double v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = (void *)MEMORY[0x19400CFE8]();
  v9 = PKTimeToPerformBlock(v7);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 138412546;
    v11 = v6;
    v12 = 2048;
    v13 = v9;
    _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Time profile: %@: %g seconds", (uint8_t *)&v10, 0x16u);
  }
  objc_autoreleasePoolPop(v8);

}

void PKTimeProfileBegin(uint64_t a1, void *a2)
{
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v3 = a2;
  if (v3)
  {
    PKTimeProfileQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PKTimeProfileBegin_block_invoke;
    block[3] = &unk_1E2ABE120;
    v5 = v3;
    dispatch_sync(v2, block);

  }
}

id PKTimeProfileQueue()
{
  if (qword_1ECF220A8 != -1)
    dispatch_once(&qword_1ECF220A8, &__block_literal_global_1017);
  return (id)qword_1ECF220B0;
}

id PKTimeProfileEnd(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id v9;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v6)
  {
    v16 = 0;
    v17 = &v16;
    v18 = 0x3032000000;
    v19 = __Block_byref_object_copy__3;
    v20 = __Block_byref_object_dispose__3;
    v21 = 0;
    PKTimeProfileQueue();
    v8 = objc_claimAutoreleasedReturnValue();
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __PKTimeProfileEnd_block_invoke;
    v11[3] = &unk_1E2AC2310;
    v12 = v6;
    v13 = v5;
    v14 = v7;
    v15 = &v16;
    dispatch_sync(v8, v11);

    v9 = (id)v17[5];
    _Block_object_dispose(&v16, 8);

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id PKDevicePhoneNumber()
{
  void *v0;
  dispatch_queue_t v1;
  void *v2;
  id v3;
  id v5;

  v5 = 0;
  v0 = (void *)MEMORY[0x19400CFE8]();
  v1 = dispatch_queue_create("com.apple.passkit.phone-number", 0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA6E38]), "initWithQueue:", v1);
  _PKDevicePhoneNumberAndSignature(v2, &v5, 0);

  objc_autoreleasePoolPop(v0);
  v3 = v5;

  return v3;
}

void _PKDevicePhoneNumberAndSignature(void *a1, id *a2, id *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[4];
  id v27;
  _BYTE v28[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5 && (unint64_t)a2 | (unint64_t)a3)
  {
    objc_msgSend(v5, "getSubscriptionInfoWithError:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "subscriptionsInUse");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "getUserDefaultVoiceSubscriptionContext:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "uuid");
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = ___PKDevicePhoneNumberAndSignature_block_invoke;
    v26[3] = &unk_1E2AC2568;
    v11 = v10;
    v27 = v11;
    objc_msgSend(v8, "sortedArrayUsingComparator:", v26);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v13 = v12;
    v14 = (void *)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
    if (v14)
    {
      v20 = v11;
      v21 = v7;
      v15 = *(_QWORD *)v23;
      while (2)
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v23 != v15)
            objc_enumerationMutation(v13);
          v17 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)i);
          objc_msgSend(v6, "getPhoneNumber:error:", v17, 0, v20, v21, (_QWORD)v22);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "number");
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v19, "length"))
          {
            if (a3)
            {
              objc_msgSend(v6, "context:getPhoneNumberSignature:", v17, 0);
              v14 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v14 = 0;
            }
            v11 = v20;
            v7 = v21;

            goto LABEL_17;
          }

        }
        v14 = (void *)objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v22, v28, 16);
        if (v14)
          continue;
        break;
      }
      v19 = 0;
      v11 = v20;
      v7 = v21;
    }
    else
    {
      v19 = 0;
    }
LABEL_17:

    if (a2)
      objc_storeStrong(a2, v19);
    if (a3)
      objc_storeStrong(a3, v14);

  }
}

id PKDevicePhoneNumberSignature()
{
  void *v0;
  dispatch_queue_t v1;
  void *v2;
  id v3;
  id v5;

  v5 = 0;
  v0 = (void *)MEMORY[0x19400CFE8]();
  v1 = dispatch_queue_create("com.apple.passkit.phone-number", 0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA6E38]), "initWithQueue:", v1);
  _PKDevicePhoneNumberAndSignature(v2, 0, &v5);

  objc_autoreleasePoolPop(v0);
  v3 = v5;

  return v3;
}

void sub_18FF0C238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKURLByAppendingQueryParams(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  char v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  const __CFString *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v30;
  id obj;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3
    && v4
    && (objc_msgSend(v4, "allKeys"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "count"),
        v6,
        v7))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "URLQueryAllowedCharacterSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(v8, "mutableCopy");

    objc_msgSend(v9, "removeCharactersInString:", CFSTR("&=?"));
    objc_msgSend(v3, "query");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v3;
    if (objc_msgSend(v10, "length"))
    {
      objc_msgSend(v3, "query");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v11, "hasSuffix:", CFSTR("&")) ^ 1;

    }
    else
    {
      v12 = 0;
    }

    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    objc_msgSend(v5, "allKeys");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v15 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    if (v15)
    {
      v16 = v15;
      v17 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v16; ++i)
        {
          if (*(_QWORD *)v33 != v17)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          objc_msgSend(v19, "stringByAddingPercentEncodingWithAllowedCharacters:", v9);
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v5, "objectForKey:", v19);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v21, "stringByAddingPercentEncodingWithAllowedCharacters:", v9);
          v22 = v5;
          v23 = (void *)objc_claimAutoreleasedReturnValue();

          v24 = CFSTR("&");
          if ((v12 & 1) == 0)
            v24 = &stru_1E2ADF4C0;
          objc_msgSend(v14, "appendFormat:", CFSTR("%@%@=%@"), v24, v20, v23);

          v5 = v22;
          v12 = 1;
        }
        v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
      }
      while (v16);
    }

    v3 = v30;
    objc_msgSend(v30, "query");
    v25 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v25)
      objc_msgSend(v14, "insertString:atIndex:", CFSTR("?"), 0);
    objc_msgSend(v30, "absoluteString");
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = (void *)MEMORY[0x1E0C99E98];
    objc_msgSend(v26, "stringByAppendingString:", v14);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "URLWithString:", v28);
    v13 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v13 = v3;
  }

  return v13;
}

BOOL PKHasImplementationOfSelectorInImage(void *a1, const char *a2)
{
  id v3;
  id v4;
  double v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  _QWORD v14[4];
  id v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char v26;
  uint8_t buf[4];
  void *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v19 = 0;
  v20 = &v19;
  v21 = 0x2020000000;
  v22 = 0;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = __PKHasImplementationOfSelectorInImage_block_invoke;
  v14[3] = &unk_1E2AC2388;
  v4 = v3;
  v15 = v4;
  v16 = &v19;
  v17 = &v23;
  v18 = a2;
  v5 = PKTimeToPerformBlock(v14);
  v6 = *((unsigned __int8 *)v24 + 24);
  PKLogFacilityTypeGetObject(6uLL);
  v7 = objc_claimAutoreleasedReturnValue();
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      NSStringFromSelector(a2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)v20[3];
      *(_DWORD *)buf = 138413058;
      v28 = v9;
      v29 = 2080;
      v30 = v10;
      v31 = 2112;
      v32 = *(double *)&v4;
      v33 = 2048;
      v34 = v5;
      _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "Found impl of %@ on %s in (%@) in %gs", buf, 0x2Au);

    }
  }
  else if (v8)
  {
    NSStringFromSelector(a2);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412802;
    v28 = v11;
    v29 = 2112;
    v30 = v4;
    v31 = 2048;
    v32 = v5;
    _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "No impl of %@ in (%@) in %gs", buf, 0x20u);

  }
  v12 = *((_BYTE *)v24 + 24) != 0;

  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v23, 8);

  return v12;
}

void sub_18FF0D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id PKProcessNameForPid(int a1)
{
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v9;
  _DWORD size[3];
  int v11[2];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v11 = 0x800000001;
  size[0] = 0;
  *(_QWORD *)&size[1] = 4;
  if (sysctl(v11, 2u, size, (size_t *)&size[1], 0, 0) < 0)
    return 0;
  v2 = (char *)malloc_type_malloc(size[0], 0xC9D6323DuLL);
  if (!v2)
    return 0;
  v3 = v2;
  *(_QWORD *)v11 = 0x3100000001;
  v12 = a1;
  *(_QWORD *)&size[1] = size[0];
  if (sysctl(v11, 3u, v2, (size_t *)&size[1], 0, 0) < 0)
  {
    free(v3);
    return 0;
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v3 + 4, 4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length"))
  {
    v5 = objc_msgSend(v4, "length") + 1;
    while (1)
    {
      v6 = v5 - 2;
      if (v5 - 2 < 0)
        break;
      --v5;
      if (objc_msgSend(v4, "characterAtIndex:", v6) == 47)
      {
        objc_msgSend(v4, "substringFromIndex:", v5);
        v7 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_13;
      }
    }
    v7 = v4;
LABEL_13:
    v9 = v7;
    free(v3);
  }
  else
  {
    free(v3);
    v9 = 0;
  }

  return v9;
}

uint64_t PKGetMyPid()
{
  if (qword_1ECF21FF0 != -1)
    dispatch_once(&qword_1ECF21FF0, &__block_literal_global_939);
  return dword_1ECF21C90;
}

uint64_t PKProcessIsiOSOnMac(void)
{
  if (PKProcessIsiOSOnMac != -1)
    dispatch_once(&PKProcessIsiOSOnMac, &__block_literal_global_940);
  return 0;
}

void ___Z19PKProcessIsiOSOnMacv_block_invoke()
{
  if (qword_1ECF21FF0 != -1)
    dispatch_once(&qword_1ECF21FF0, &__block_literal_global_939);
}

uint64_t PKProcessIsiOSOnMac()
{
  return 0;
}

id PKAttributedStringByParsingLinksInString(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, void *);
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[5];
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v36 = 0;
    v37 = &v36;
    v38 = 0x2020000000;
    v39 = 0;
    v34[0] = 0;
    v34[1] = v34;
    v34[2] = 0x3032000000;
    v34[3] = __Block_byref_object_copy__3;
    v34[4] = __Block_byref_object_dispose__3;
    v35 = 0;
    v5 = objc_alloc_init(MEMORY[0x1E0CB3778]);
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v4)
    {
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
      v4 = (id)objc_claimAutoreleasedReturnValue();
    }
    if (qword_1ECF21FF8 != -1)
      dispatch_once(&qword_1ECF21FF8, &__block_literal_global_942);
    v7 = (void *)qword_1ECF21C98;
    v8 = objc_msgSend(v3, "length");
    v24 = MEMORY[0x1E0C809B0];
    v25 = 3221225472;
    v26 = __PKAttributedStringByParsingLinksInString_block_invoke_2;
    v27 = &unk_1E2AC2410;
    v9 = v3;
    v28 = v9;
    v32 = &v36;
    v10 = v6;
    v29 = v10;
    v4 = v4;
    v30 = v4;
    v33 = v34;
    v11 = v5;
    v31 = v11;
    objc_msgSend(v7, "enumerateMatchesInString:options:range:usingBlock:", v9, 0, 0, v8, &v24);
    v12 = v37[3];
    if (v12 != objc_msgSend(v9, "length", v24, v25, v26, v27))
    {
      v13 = v37[3];
      v14 = objc_msgSend(v9, "length");
      objc_msgSend(v9, "substringWithRange:", v13, v14 - v37[3]);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:attributes:", v15, v4);
      objc_msgSend(v11, "appendAttributedString:", v16);

    }
    objc_msgSend(v11, "mutableString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "mutableString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "replaceOccurrencesOfString:withString:options:range:", CFSTR("&lt;"),
      CFSTR("<"),
      1,
      0,
      objc_msgSend(v18, "length"));

    objc_msgSend(v11, "mutableString");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "mutableString");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "replaceOccurrencesOfString:withString:options:range:", CFSTR("&gt;"),
      CFSTR(">"),
      1,
      0,
      objc_msgSend(v20, "length"));

    v21 = v31;
    v22 = v11;

    _Block_object_dispose(v34, 8);
    _Block_object_dispose(&v36, 8);
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

void sub_18FF0DED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t PKBeginBackgroundTask(void *a1, void *a2)
{
  Class (__cdecl *v3)();
  id v4;
  id v5;
  void *v6;
  uint64_t v7;

  v3 = getUIApplicationClass;
  v4 = a2;
  v5 = a1;
  -[objc_class sharedApplication](v3(), "sharedApplication");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "beginBackgroundTaskWithName:expirationHandler:", v5, v4);

  return v7;
}

void PKEndBackgroundTask(uint64_t a1)
{
  id v2;

  -[objc_class sharedApplication](getUIApplicationClass(), "sharedApplication");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "endBackgroundTask:", a1);

}

BOOL PKApplicationIsInBackground()
{
  void *v0;
  _BOOL8 v1;

  -[objc_class sharedApplication](getUIApplicationClass(), "sharedApplication");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v0, "applicationState") == 2;

  return v1;
}

uint64_t PKGymKitConflictsWithPass(void *a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if (objc_msgSend(a1, "hasImmediateAutomaticSelectionCriterion")
    && (objc_opt_respondsToSelector() & 1) != 0)
  {
    v4 = objc_msgSend(v3, "isGymKitEnabled");
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

Class initNPKCompanionAgentConnection()
{
  Class result;

  if (qword_1ECF22060 != -1)
    dispatch_once(&qword_1ECF22060, &__block_literal_global_988);
  result = objc_getClass("NPKCompanionAgentConnection");
  qword_1ECF22058 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction;
  return result;
}

id NPKCompanionAgentConnectionFunction()
{
  return (id)qword_1ECF22058;
}

Class initNRPairedDeviceRegistry()
{
  Class result;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  result = objc_getClass("NRPairedDeviceRegistry");
  classNRPairedDeviceRegistry = (uint64_t)result;
  getNRPairedDeviceRegistryClass = (uint64_t (*)())NRPairedDeviceRegistryFunction;
  return result;
}

id NRPairedDeviceRegistryFunction()
{
  return (id)classNRPairedDeviceRegistry;
}

id initNRDevicePropertySupportedFeatureIdentifiers()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertySupportedFeatureIdentifiers");
  objc_storeStrong((id *)&qword_1ECF22020, *v0);
  _MergedGlobals_171 = (uint64_t (*)())NRDevicePropertySupportedFeatureIdentifiersFunction;
  return (id)qword_1ECF22020;
}

id NRDevicePropertySupportedFeatureIdentifiersFunction()
{
  return (id)qword_1ECF22020;
}

id initNRDevicePropertySystemVersion()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertySystemVersion");
  objc_storeStrong((id *)&qword_1ECF22028, *v0);
  off_1ECF21B08 = (uint64_t (*)())NRDevicePropertySystemVersionFunction;
  return (id)qword_1ECF22028;
}

id NRDevicePropertySystemVersionFunction()
{
  return (id)qword_1ECF22028;
}

id initNRDevicePropertyIsArchived()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyIsArchived");
  objc_storeStrong((id *)&constantNRDevicePropertyIsArchived, *v0);
  getNRDevicePropertyIsArchived = (uint64_t (*)())NRDevicePropertyIsArchivedFunction;
  return (id)constantNRDevicePropertyIsArchived;
}

id NRDevicePropertyIsArchivedFunction()
{
  return (id)constantNRDevicePropertyIsArchived;
}

id initNRDevicePropertyIsActive()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyIsActive");
  objc_storeStrong((id *)&qword_1ECF22038, *v0);
  off_1ECF21B10 = (uint64_t (*)())NRDevicePropertyIsActiveFunction;
  return (id)qword_1ECF22038;
}

id NRDevicePropertyIsActiveFunction()
{
  return (id)qword_1ECF22038;
}

id initNRDevicePropertyIsPaired()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyIsPaired");
  objc_storeStrong((id *)&qword_1ECF22040, *v0);
  off_1ECF21B18 = (uint64_t (*)())NRDevicePropertyIsPairedFunction;
  return (id)qword_1ECF22040;
}

id NRDevicePropertyIsPairedFunction()
{
  return (id)qword_1ECF22040;
}

id initNRDevicePropertyIsAltAccount()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyIsAltAccount");
  objc_storeStrong((id *)&qword_1ECF22018, *v0);
  getNRDevicePropertyIsAltAccount[0] = (uint64_t (*)())NRDevicePropertyIsAltAccountFunction;
  return (id)qword_1ECF22018;
}

id NRDevicePropertyIsAltAccountFunction()
{
  return (id)qword_1ECF22018;
}

id initNRDevicePropertySerialNumber()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertySerialNumber");
  objc_storeStrong((id *)&qword_1ECF22008, *v0);
  getNRDevicePropertySerialNumber[0] = (uint64_t (*)())NRDevicePropertySerialNumberFunction;
  return (id)qword_1ECF22008;
}

id NRDevicePropertySerialNumberFunction()
{
  return (id)qword_1ECF22008;
}

id initNRDevicePropertyScreenScale()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyScreenScale");
  objc_storeStrong((id *)&qword_1ECF22000, *v0);
  getNRDevicePropertyScreenScale[0] = (uint64_t (*)())NRDevicePropertyScreenScaleFunction;
  return (id)qword_1ECF22000;
}

id NRDevicePropertyScreenScaleFunction()
{
  return (id)qword_1ECF22000;
}

id initNRDevicePropertyClass()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyClass");
  objc_storeStrong((id *)&qword_1ECF22010, *v0);
  getNRDevicePropertyClass[0] = (uint64_t (*)())NRDevicePropertyClassFunction;
  return (id)qword_1ECF22010;
}

id NRDevicePropertyClassFunction()
{
  return (id)qword_1ECF22010;
}

id initNRDevicePropertyProductType()
{
  id *v0;

  if (qword_1ECF22070 != -1)
    dispatch_once(&qword_1ECF22070, &__block_literal_global_991);
  v0 = (id *)dlsym((void *)qword_1ECF22068, "NRDevicePropertyProductType");
  objc_storeStrong((id *)&qword_1ECF22030, *v0);
  getNRDevicePropertyProductType[0] = (uint64_t (*)())NRDevicePropertyProductTypeFunction;
  return (id)qword_1ECF22030;
}

id NRDevicePropertyProductTypeFunction()
{
  return (id)qword_1ECF22030;
}

void _SharedCacheValuesChangedHandler()
{
  NSObject *v0;
  _QWORD block[4];
  id v2;

  _SharedCacheQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __dispatch_async_ar_block_invoke_2;
  block[3] = &unk_1E2ABD9A0;
  v2 = &__block_literal_global_1027;
  dispatch_async(v0, block);

}

Class initUIApplication()
{
  Class result;

  if (LoadUIKit_loadPredicate != -1)
    dispatch_once(&LoadUIKit_loadPredicate, &__block_literal_global_1029);
  result = objc_getClass("UIApplication");
  classUIApplication = (uint64_t)result;
  getUIApplicationClass = (uint64_t (*)())UIApplicationFunction;
  return result;
}

id UIApplicationFunction()
{
  return (id)classUIApplication;
}

id PDPassLibraryInAppInterface()
{
  if (qword_1ECF22198 != -1)
    dispatch_once(&qword_1ECF22198, &__block_literal_global_181);
  return (id)qword_1ECF22190;
}

unint64_t PKContentAlignmentMake(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

double PKSizeAspectFit(double result, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = 1.0;
  v5 = 1.0;
  if (result != 0.0)
    v5 = fmin(a3 / result, 1.0);
  if (a2 != 0.0)
    v4 = fmin(a4 / a2, 1.0);
  if (fmin(v5, v4) != 1.0)
  {
    if (v5 >= v4)
      return a4 * (result / a2);
    else
      return a3;
  }
  return result;
}

double PKSizeAspectFitToCover(double result, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = 1.0;
  v5 = 1.0;
  if (result != 0.0)
    v5 = fmin(a3 / result, 1.0);
  if (a2 != 0.0)
    v4 = fmin(a4 / a2, 1.0);
  if (fmax(v5, v4) != 1.0)
  {
    if (v5 <= v4)
      return a4 * (result / a2);
    else
      return a3;
  }
  return result;
}

double PKSizeScaleAspectFit(double result, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a3 / result;
  if (result == 0.0)
    v4 = 1.0;
  v5 = a4 / a2;
  if (a2 == 0.0)
    v5 = 1.0;
  if (fmin(v4, v5) != 1.0)
  {
    if (v4 >= v5)
      return a4 * (result / a2);
    else
      return a3;
  }
  return result;
}

double PKSizeAspectFill(double result, double a2, double a3, double a4)
{
  double v4;
  double v5;

  v4 = a3 / result;
  if (result == 0.0)
    v4 = 1.0;
  v5 = a4 / a2;
  if (a2 == 0.0)
    v5 = 1.0;
  if (fmax(v4, v5) != 1.0)
  {
    if (v4 <= v5)
      return a4 * (result / a2);
    else
      return a3;
  }
  return result;
}

double PKRectRoundToPixelWithScale(double a1, double a2, double a3, double a4, double a5)
{
  double v8;

  v8 = PKPointRoundToPixelWithScale(a1, a2, a5);
  PKSizeRoundToPixelWithScale(a3, a4, a5);
  return v8;
}

double PKPointRoundToPixelWithScale(double a1, double a2, double a3)
{
  double v5;
  double v6;

  v5 = a3;
  if (a3 == 0.0)
    v5 = PKScreenScale();
  if (v5 == 0.0)
    v6 = round(a1);
  else
    v6 = round(a1 * v5) / v5;
  if (a3 == 0.0)
    PKScreenScale();
  return v6;
}

double PKSizeCeilToPixelWithScale(double a1, double a2, double a3)
{
  double v5;
  double v6;

  v5 = a3;
  if (a3 == 0.0)
    v5 = PKScreenScale();
  if (v5 == 0.0)
    v6 = ceil(a1);
  else
    v6 = ceil(a1 * v5) / v5;
  if (a3 == 0.0)
    PKScreenScale();
  return v6;
}

double PKSizeFloorToPixelWithScale(double a1, double a2, double a3)
{
  double v5;
  double v6;

  v5 = a3;
  if (a3 == 0.0)
    v5 = PKScreenScale();
  if (v5 == 0.0)
    v6 = floor(a1);
  else
    v6 = floor(a1 * v5) / v5;
  if (a3 == 0.0)
    PKScreenScale();
  return v6;
}

double PKPassStackScrollingOverlapLength()
{
  return 25.0;
}

uint64_t PKCATrackedLayoutIsAnimated()
{
  return _MergedGlobals_194;
}

id PKCATrackedLayoutGetTracker()
{
  void *v0;
  BOOL v1;
  PKCAAnimatedLayoutTracker *v2;
  void *v3;

  v0 = (void *)qword_1ECF221E8;
  if (_MergedGlobals_194)
    v1 = qword_1ECF221E8 == 0;
  else
    v1 = 0;
  if (v1)
  {
    v2 = +[PKCAAnimatedLayoutTracker _create]();
    v3 = (void *)qword_1ECF221E8;
    qword_1ECF221E8 = (uint64_t)v2;

    -[PKCAAnimatedLayoutTracker _suspend]((void *)qword_1ECF221E8);
    v0 = (void *)qword_1ECF221E8;
  }
  return v0;
}

void PKCATrackedLayoutPerform(int a1, void *a2, void *a3)
{
  void (**v5)(_QWORD);
  void (**v6)(_QWORD);
  char v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v12 = a2;
  v5 = a3;
  if (v5)
  {
    v6 = v5;
    v7 = _MergedGlobals_194;
    v8 = (void *)qword_1ECF221E8;
    v9 = (id)qword_1ECF221E8;
    _MergedGlobals_194 = a1;
    if (a1)
      v10 = v12;
    else
      v10 = 0;
    objc_storeStrong((id *)&qword_1ECF221E8, v10);
    if (qword_1ECF221E8)
      -[PKCAAnimatedLayoutTracker _suspend]((void *)qword_1ECF221E8);
    v11 = (void *)MEMORY[0x19400CFE8]();
    v6[2](v6);
    objc_autoreleasePoolPop(v11);
    if (qword_1ECF221E8)
      -[PKCAAnimatedLayoutTracker _resume]((void *)qword_1ECF221E8);
    _MergedGlobals_194 = v7;
    objc_storeStrong((id *)&qword_1ECF221E8, v8);

  }
  else
  {
    __break(1u);
  }
}

void sub_18FF12988()
{
  objc_end_catch();
  JUMPOUT(0x18FF12960);
}

void PKCALayerLayoutIfNeeded(CALayer *a1, int a2, PKCAAnimatedLayoutTracker *a3)
{
  CALayer *v5;
  PKCAAnimatedLayoutTracker *v6;
  CALayer *v7;
  PKCAAnimatedLayoutTracker *v8;
  _QWORD v9[4];
  CALayer *v10;

  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v9[1] = 3221225472;
    v9[2] = ___Z23PKCALayerLayoutIfNeededP7CALayerbP25PKCAAnimatedLayoutTracker_block_invoke;
    v9[3] = &unk_1E2ABE120;
    v10 = v5;
    v8 = v6;
    v9[0] = MEMORY[0x1E0C809B0];
    v7 = v5;
    PKCATrackedLayoutPerform(a2, v8, v9);

  }
  else
  {
    __break(1u);
  }
}

uint64_t ___Z23PKCALayerLayoutIfNeededP7CALayerbP25PKCAAnimatedLayoutTracker_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

void sub_18FF12EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

Class initNPKCompanionAgentConnection_0()
{
  Class result;

  if (qword_1ECF221F8 != -1)
    dispatch_once(&qword_1ECF221F8, &__block_literal_global_18);
  result = objc_getClass("NPKCompanionAgentConnection");
  _MergedGlobals_195 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass_0[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction_0;
  return result;
}

id NPKCompanionAgentConnectionFunction_0()
{
  return (id)_MergedGlobals_195;
}

void sub_18FF14A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id CarKeyLocalizedTitle(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  char v10;
  id v11;
  __CFString *v12;
  void *v13;

  v5 = a3;
  objc_msgSend(a1, "PKStringForKey:", CFSTR("title"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "passLocalizedStringForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 && v7)
  {
    v8 = v7;
    if (v6 == v8)
    {

    }
    else
    {
      v9 = v8;
      v10 = objc_msgSend(v6, "isEqualToString:", v8);

      if ((v10 & 1) == 0)
      {
        v11 = v9;
        goto LABEL_16;
      }
    }
  }
  switch(a2)
  {
    case 0:
      v12 = CFSTR("FULL_ACCESS_ENTITLEMENT_NAME");
      break;
    case 1:
      v12 = CFSTR("UNLOCK_ONLY_ENTITLEMENT_NAME");
      break;
    case 2:
      v12 = CFSTR("RESTRICTED_ACCESS_ENTITLEMENT_NAME");
      break;
    case 3:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_CAR_DELIVERY_NAME");
      break;
    case 4:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_VALET_NAME");
      break;
    case 5:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_VEHICLE_SERVICE_NAME");
      break;
    default:
      v12 = CFSTR("PROPRIETARY_ENTITLEMENT_NAME");
      break;
  }
  PKLocalizedCredentialString(&v12->isa, 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:
  v13 = v11;

  return v13;
}

id CarKeyLocalizedDescriptionTitle(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  char v10;
  id v11;
  __CFString *v12;
  void *v13;

  v5 = a3;
  objc_msgSend(a1, "PKStringForKey:", CFSTR("description"));
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "passLocalizedStringForKey:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6 && v7)
  {
    v8 = v7;
    if (v6 == v8)
    {

    }
    else
    {
      v9 = v8;
      v10 = objc_msgSend(v6, "isEqualToString:", v8);

      if ((v10 & 1) == 0)
      {
        v11 = v9;
        goto LABEL_16;
      }
    }
  }
  switch(a2)
  {
    case 0:
      v12 = CFSTR("FULL_ACCESS_ENTITLEMENT_DESCRIPTION");
      break;
    case 1:
      v12 = CFSTR("UNLOCK_ONLY_ENTITLEMENT_DESCRIPTION");
      break;
    case 2:
      v12 = CFSTR("RESTRICTED_ACCESS_ENTITLEMENT_DESCRIPTION");
      break;
    case 3:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_CAR_DELIVERY_DESCRIPTION");
      break;
    case 4:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_VALET_DESCRIPTION");
      break;
    case 5:
      v12 = CFSTR("CAR_KEY_ENTITLEMENT_VEHICLE_SERVICE_DESCRIPTION");
      break;
    default:
      v12 = CFSTR("PROPRIETARY_ENTITLEMENT_DESCRIPTION");
      break;
  }
  PKLocalizedCredentialString(&v12->isa, 0);
  v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:
  v13 = v11;

  return v13;
}

void sub_18FF16D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF16E98(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FF17028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF173C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF17538(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FF176C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF178FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF17A6C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FF17BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF17E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF17FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF1822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF191A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

CGImageRef PKCreateCGImage(NSData *a1)
{
  NSData *v1;
  const __CFData *v2;
  CGImageSource *v3;
  CGImageSource *v4;
  CGImageRef ImageAtIndex;

  v1 = a1;
  v2 = (const __CFData *)v1;
  if (!v1 || !-[NSData length](v1, "length"))
    goto LABEL_8;
  if (qword_1ECF22218 != -1)
    dispatch_once(&qword_1ECF22218, &__block_literal_global_203_0);
  v3 = CGImageSourceCreateWithData(v2, (CFDictionaryRef)qword_1ECF22210);
  if (v3)
  {
    v4 = v3;
    if (CGImageSourceGetCount(v3))
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    else
      ImageAtIndex = 0;
    CFRelease(v4);
  }
  else
  {
LABEL_8:
    ImageAtIndex = 0;
  }

  return ImageAtIndex;
}

CGImageRef PKCreateCGImage(NSURL *a1)
{
  NSURL *v1;
  NSURL *v2;
  CGImageSource *v3;
  CGImageSource *v4;
  CGImageRef ImageAtIndex;

  v1 = a1;
  v2 = v1;
  if (!v1 || !-[NSURL isFileURL](v1, "isFileURL") && !-[NSURL isFileReferenceURL](v2, "isFileReferenceURL"))
    goto LABEL_9;
  if (qword_1ECF22218 != -1)
    dispatch_once(&qword_1ECF22218, &__block_literal_global_203_0);
  v3 = CGImageSourceCreateWithURL((CFURLRef)v2, (CFDictionaryRef)qword_1ECF22210);
  if (v3)
  {
    v4 = v3;
    if (CGImageSourceGetCount(v3))
      ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, 0);
    else
      ImageAtIndex = 0;
    CFRelease(v4);
  }
  else
  {
LABEL_9:
    ImageAtIndex = 0;
  }

  return ImageAtIndex;
}

CGPDFDocument *PKCreateCGImage(CGPDFDocumentRef document, CGSize a2, double a3)
{
  CGPDFDocument *Image;
  double height;
  double width;
  CGPDFPage *Page;
  CGPDFPage *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  CGContext *BitmapContext;
  CGAffineTransform v18;
  CGRect BoxRect;

  Image = document;
  if (document)
  {
    height = a2.height;
    width = a2.width;
    if (CGPDFDocumentGetNumberOfPages(document))
    {
      Page = CGPDFDocumentGetPage(Image, 1uLL);
      v8 = CGPDFPageRetain(Page);
      BoxRect = CGPDFPageGetBoxRect(v8, kCGPDFMediaBox);
      v9 = BoxRect.size.width;
      v10 = BoxRect.size.height;
      v11 = width / BoxRect.size.width;
      if (BoxRect.size.width == 0.0)
        v11 = 1.0;
      v12 = height / BoxRect.size.height;
      if (BoxRect.size.height == 0.0)
        v12 = 1.0;
      if (fmin(v11, v12) == 1.0)
      {
        height = BoxRect.size.height;
        width = BoxRect.size.width;
      }
      else if (v11 >= v12)
      {
        width = height * (BoxRect.size.width / BoxRect.size.height);
      }
      else
      {
        height = width * (BoxRect.size.height / BoxRect.size.width);
      }
      v13 = PKSizeFloorToPixelWithScale(width, height, a3);
      v15 = fmin(v13 / v9, v14 / v10);
      BitmapContext = _CreateBitmapContext(0, 0, 0, v13 * a3, v14 * a3, 1.0);
      CGContextScaleCTM(BitmapContext, a3, a3);
      CGAffineTransformMakeScale(&v18, v15, v15);
      CGContextConcatCTM(BitmapContext, &v18);
      CGContextDrawPDFPage(BitmapContext, v8);
      CGPDFPageRelease(v8);
      Image = CGBitmapContextCreateImage(BitmapContext);
      CGContextRelease(BitmapContext);
    }
    else
    {
      return 0;
    }
  }
  return Image;
}

id PKGetImageFromBitmapContext(CGContext *a1)
{
  CGAffineTransform v3;

  CGContextGetCTM(&v3, a1);
  PKGetImageFromBitmapContext(a1, fabs(v3.a + v3.c));
  return (id)objc_claimAutoreleasedReturnValue();
}

PKImage *PKGetImageFromPDFDocument(CGPDFDocument *a1, double a2, double a3, double a4)
{
  CGPDFDocument *v5;
  CGImage *v6;
  PKImage *v7;

  v5 = PKCreateCGImage(a1, *(CGSize *)&a2, a4);
  if (v5)
  {
    v6 = v5;
    v7 = -[PKImage initWithCGImage:scale:orientation:]([PKImage alloc], "initWithCGImage:scale:orientation:", v5, 1, a4);
    CGImageRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

double PKRectCenteredIntegralRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float v7;

  v7 = a5 + (a7 - a3) * 0.5;
  return roundf(v7);
}

double PKRectCenteredXInRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  float v7;

  v7 = a5 + (a7 - a3) * 0.5;
  return roundf(v7);
}

void _Draw3PartSlice(CGContext *a1, CGImage *a2, uint64_t a3, _BOOL4 a4, double a5, double a6, double a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12, double a13, CGFloat a14, double a15, CGFloat a16)
{
  CGRect v27;
  CGRect v28;
  CGRect slice;
  CGRect remainder;
  CGRect v31;

  v31.origin.x = a9;
  remainder.origin.x = a9;
  remainder.origin.y = a10;
  remainder.size.width = a11;
  remainder.size.height = a12;
  memset(&slice, 0, sizeof(slice));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  v31.origin.y = a10;
  v31.size.width = a11;
  v31.size.height = a12;
  CGRectDivide(v31, &slice, &remainder, a14, CGRectMinXEdge);
  CGRectDivide(remainder, &v27, &v28, a16, CGRectMaxXEdge);
  if (!CGRectIsEmpty(slice))
    _DrawImagePart(a1, a2, a3, a4, 0.0, a6, a14, a8, slice.origin.x, slice.origin.y, slice.size.width, slice.size.height);
  if (!CGRectIsEmpty(v28))
    _DrawImagePart(a1, a2, a3, a4, a14, a6, a7 - (a14 + a16), a8, v28.origin.x, v28.origin.y, v28.size.width, v28.size.height);
  if (!CGRectIsEmpty(v27))
    _DrawImagePart(a1, a2, a3, a4, a7 - a16, a6, a16, a8, v27.origin.x, v27.origin.y, v27.size.width, v27.size.height);
}

void _DrawImagePart(CGContext *a1, CGImage *a2, uint64_t a3, _BOOL4 a4, double a5, double a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10, CGFloat a11, CGFloat a12)
{
  double v24;
  double v25;
  double v26;
  double v27;
  CGFloat v28;
  CGFloat v29;
  CGImage *v30;
  CGImage *v31;
  double v32;
  double v33;
  CGAffineTransform v34;
  CGAffineTransform v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;

  if (!CGRectIsEmpty(*(CGRect *)&a5))
  {
    v36.origin.x = a9;
    v36.origin.y = a10;
    v36.size.width = a11;
    v36.size.height = a12;
    if (!CGRectIsEmpty(v36))
    {
      v24 = a5 * (double)a3;
      v25 = a6 * (double)a3;
      v26 = a7 * (double)a3;
      v27 = a8 * (double)a3;
      if (a4)
      {
        v32 = v25;
        v33 = v24;
        CGContextGetCTM(&v34, a1);
        CGAffineTransformInvert(&v35, &v34);
        v25 = v32;
        v24 = v33;
        a4 = v27 * v35.d + v35.b * v26 != a12 || v27 * v35.c + v35.a * v26 != a11;
      }
      v28 = a7 * (double)a3;
      v29 = a8 * (double)a3;
      v30 = CGImageCreateWithImageInRect(a2, *(CGRect *)&v24);
      if (v30)
      {
        v31 = v30;
        if (a4)
        {
          CGContextSaveGState(a1);
          v37.origin.x = a9;
          v37.origin.y = a10;
          v37.size.width = a11;
          v37.size.height = a12;
          CGContextClipToRect(a1, v37);
          v38.origin.y = a10 + a12;
          v38.origin.x = a9;
          v38.size.width = a7;
          v38.size.height = a8;
          CGContextDrawTiledImage(a1, v38, v31);
          CGContextRestoreGState(a1);
        }
        else
        {
          v39.origin.x = a9;
          v39.origin.y = a10;
          v39.size.width = a11;
          v39.size.height = a12;
          CGContextDrawImage(a1, v39, v30);
        }
        CGImageRelease(v31);
      }
    }
  }
}

id PKPaymentAuthorizationServiceInterface()
{
  if (qword_1ECF22228 != -1)
    dispatch_once(&qword_1ECF22228, &__block_literal_global_20);
  return (id)_MergedGlobals_197;
}

void PKPaymentAuthorizationServiceInterfaceSet(void *a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;

  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = a1;
  v3 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v3, objc_opt_class(), 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_authorizationDidSelectShippingMethodCompleteWithStatus_paymentSummaryItems_, 1, 0);

  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, objc_opt_class(), 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v7, sel_authorizationDidSelectShippingAddressCompleteWithStatus_shippingMethods_paymentSummaryItems_, 1, 0);

  v8 = (void *)MEMORY[0x1E0C99E60];
  v9 = objc_opt_class();
  objc_msgSend(v8, "setWithObjects:", v9, objc_opt_class(), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v10, sel_authorizationDidSelectShippingAddressCompleteWithStatus_shippingMethods_paymentSummaryItems_, 2, 0);

  v11 = (void *)MEMORY[0x1E0C99E60];
  v12 = objc_opt_class();
  objc_msgSend(v11, "setWithObjects:", v12, objc_opt_class(), 0);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setClasses:forSelector:argumentIndex:ofReply:", v13, sel_authorizationDidSelectPaymentMethodCompleteWithPaymentSummaryItems_, 0, 0);

}

id PKDACarKeySharingMessageFromMessage(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (objc_class *)MEMORY[0x1E0D1D370];
  v2 = a1;
  v3 = [v1 alloc];
  objc_msgSend(v2, "genericSharingDict");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "carKeySharingDict");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(v3, "initWithGenericDataDictionary:additionalDataDictionary:", v4, v5);
  return v6;
}

PKSharingCarKeyMessage *PKCarKeyMessageFromDACarKeySharingMessage(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  PKSharingCarKeyMessage *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  PKSharingCarKeyMessage *v11;

  v1 = a1;
  objc_msgSend(v1, "genericData");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "additionalData");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = [PKSharingCarKeyMessage alloc];
  objc_msgSend(v2, "message");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v2, "messageType");
  if ((unint64_t)(v6 - 1) >= 7)
    v7 = 0;
  else
    v7 = v6;
  objc_msgSend(v2, "sharingIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "friendKeyIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "asDictionary");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = -[PKSharingCarKeyMessage initWithRawMessage:type:shareIdentifier:friendKeyIdentifier:carKeySharingDict:](v4, "initWithRawMessage:type:shareIdentifier:friendKeyIdentifier:carKeySharingDict:", v5, v7, v8, v9, v10);

  return v11;
}

id PKDAAlishaKeyEncryptedRequestFromSubcredentialEncryptedRequest(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;

  v1 = (objc_class *)MEMORY[0x1E0D1D368];
  v2 = a1;
  v3 = [v1 alloc];
  objc_msgSend(v2, "encryptionScheme");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(v2, "ephemeralPublicKey");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "dataWithHexEncodedString:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(v2, "publicKeyHash");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "dataWithHexEncodedString:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "data");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v12 = (void *)objc_msgSend(v3, "initWithVersion:ephemeralPublicKey:publicKeyHash:encryptedRequest:", v4, v7, v10, v11);
  return v12;
}

uint64_t PKProtobufPaymentDeviceRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = *(void **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v17;

          continue;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 32) |= 2u;
          while (2)
          {
            v23 = *v3;
            v24 = *(_QWORD *)(a2 + v23);
            if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
              *(_QWORD *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                v14 = v21++ >= 9;
                if (v14)
                {
                  v22 = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v22 = 0;
LABEL_42:
          *(_BYTE *)(a1 + 28) = v22 != 0;
          continue;
        case 3u:
          PBReaderReadData();
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          if (v26)
            objc_msgSend((id)a1, "addKnownManifestHashes:", v26);

          continue;
        case 4u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0)
          goto LABEL_44;
        v27 += 7;
        v14 = v28++ >= 9;
        if (v14)
        {
          LODWORD(v29) = 0;
          goto LABEL_46;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_44:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v29) = 0;
LABEL_46:
      *(_DWORD *)(a1 + 24) = v29;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *PKInstallmentRetailChannelToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 0;
  else
    return off_1E2AC2C48[a1 - 1];
}

void sub_18FF21E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF21F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF24FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF25C70(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_18FF2B114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF2B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t PKWebServiceRegionFeatureTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v6;
  __CFString *v7;
  char v8;
  __CFString *v9;
  __CFString *v10;
  char v11;
  __CFString *v12;
  __CFString *v13;
  char v14;
  __CFString *v15;
  __CFString *v16;
  char v17;
  __CFString *v18;
  __CFString *v19;
  char v20;
  __CFString *v21;
  __CFString *v22;
  char v23;
  __CFString *v24;
  __CFString *v25;
  char v26;
  int has_internal_ui;
  __CFString *v28;
  __CFString *v29;
  char v30;
  __CFString *v31;
  __CFString *v32;
  char v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  char v37;
  __CFString *v38;
  __CFString *v39;
  char v40;
  int v41;
  __CFString *v42;
  __CFString *v43;
  char v44;
  char v45;
  __CFString *v46;
  __CFString *v47;
  char v48;
  __CFString *v49;
  __CFString *v50;
  char v51;
  __CFString *v52;
  __CFString *v53;
  char v54;
  __CFString *v55;
  __CFString *v56;
  int v57;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("carAccess"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_29:
    has_internal_ui = os_variant_has_internal_ui();
    v28 = v2;
    v29 = v28;
    if (has_internal_ui)
    {
      if (v28 == CFSTR("shastaLiveOn"))
      {
LABEL_35:
        v4 = 8;
        goto LABEL_5;
      }
      if (v2)
      {
        v30 = -[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("shastaLiveOn"));

        if ((v30 & 1) != 0)
          goto LABEL_35;
        v31 = v29;
        if (v31 == CFSTR("virtualCardLiveOn"))
          goto LABEL_35;
        v32 = v31;
        v33 = -[__CFString isEqualToString:](v31, "isEqualToString:", CFSTR("virtualCardLiveOn"));

        if ((v33 & 1) != 0)
          goto LABEL_35;
        if (v32 == CFSTR("shasta"))
        {
LABEL_55:
          v4 = 7;
          goto LABEL_5;
        }
LABEL_38:
        v34 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("shasta"));

        if ((v34 & 1) != 0)
          goto LABEL_55;
        v35 = v29;
        if (v35 == CFSTR("virtualCard"))
          goto LABEL_55;
        v36 = v35;
        v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("virtualCard"));

        if ((v37 & 1) != 0)
          goto LABEL_55;
        v38 = v36;
        if (v38 == CFSTR("disbursement")
          || (v39 = v38,
              v40 = -[__CFString isEqualToString:](v38, "isEqualToString:", CFSTR("disbursement")),
              v39,
              (v40 & 1) != 0))
        {
          v4 = 9;
          goto LABEL_5;
        }
        v49 = v39;
        if (v49 == CFSTR("issuerBinding")
          || (v50 = v49,
              v51 = -[__CFString isEqualToString:](v49, "isEqualToString:", CFSTR("issuerBinding")),
              v50,
              (v51 & 1) != 0))
        {
          v4 = 11;
          goto LABEL_5;
        }
LABEL_45:
        v41 = os_variant_has_internal_ui();
        v42 = v29;
        v43 = v42;
        if (v41)
        {
          if (v42 == CFSTR("documentDeliveryLiveOn"))
          {
LABEL_49:
            v4 = 13;
            goto LABEL_5;
          }
          if (v2)
          {
            v44 = -[__CFString isEqualToString:](v42, "isEqualToString:", CFSTR("documentDeliveryLiveOn"));

            if ((v44 & 1) != 0)
              goto LABEL_49;
            if (v43 != CFSTR("documentDelivery"))
              goto LABEL_57;
LABEL_58:
            v4 = 12;
            goto LABEL_5;
          }
        }
        else
        {
          if (v42 == CFSTR("documentDelivery"))
            goto LABEL_58;
          if (v2)
          {
LABEL_57:
            v45 = -[__CFString isEqualToString:](v43, "isEqualToString:", CFSTR("documentDelivery"));

            if ((v45 & 1) != 0)
              goto LABEL_58;
            v46 = v43;
            if (v46 == CFSTR("cdnDataSource")
              || (v47 = v46,
                  v48 = -[__CFString isEqualToString:](v46, "isEqualToString:", CFSTR("cdnDataSource")),
                  v47,
                  (v48 & 1) != 0))
            {
              v4 = 14;
              goto LABEL_5;
            }
            v52 = v47;
            if (v52 == CFSTR("paymentOffers")
              || (v53 = v52,
                  v54 = -[__CFString isEqualToString:](v52, "isEqualToString:", CFSTR("paymentOffers")),
                  v53,
                  (v54 & 1) != 0))
            {
              v4 = 15;
              goto LABEL_5;
            }
            v55 = v53;
            if (v55 == CFSTR("ticketing")
              || (v56 = v55,
                  v57 = -[__CFString isEqualToString:](v55, "isEqualToString:", CFSTR("ticketing")),
                  v56,
                  v57))
            {
              v4 = 18;
              goto LABEL_5;
            }
LABEL_53:
            v4 = 0;
            goto LABEL_5;
          }
        }

        goto LABEL_53;
      }
    }
    else
    {
      if (v28 == CFSTR("shasta"))
        goto LABEL_55;
      if (v2)
        goto LABEL_38;
    }

    goto LABEL_45;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("carAccess"));

  if ((v3 & 1) == 0)
  {
    v6 = v2;
    if (v6 == CFSTR("pushProvisioning")
      || (v7 = v6,
          v8 = -[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("pushProvisioning")),
          v7,
          (v8 & 1) != 0))
    {
      v4 = 1;
      goto LABEL_5;
    }
    v9 = v7;
    if (v9 == CFSTR("zion")
      || (v10 = v9,
          v11 = -[__CFString isEqualToString:](v9, "isEqualToString:", CFSTR("zion")),
          v10,
          (v11 & 1) != 0)
      || (v12 = v10, v12 == CFSTR("merchantTokens"))
      || (v13 = v12,
          v14 = -[__CFString isEqualToString:](v12, "isEqualToString:", CFSTR("merchantTokens")),
          v13,
          (v14 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_5;
    }
    v15 = v13;
    if (v15 == CFSTR("unsupportedMerchantCategoryCodes")
      || (v16 = v15,
          v17 = -[__CFString isEqualToString:](v15, "isEqualToString:", CFSTR("unsupportedMerchantCategoryCodes")),
          v16,
          (v17 & 1) != 0))
    {
      v4 = 16;
      goto LABEL_5;
    }
    v18 = v16;
    if (v18 == CFSTR("remoteNetworkPayment")
      || (v19 = v18,
          v20 = -[__CFString isEqualToString:](v18, "isEqualToString:", CFSTR("remoteNetworkPayment")),
          v19,
          (v20 & 1) != 0))
    {
      v4 = 17;
      goto LABEL_5;
    }
    v21 = v19;
    if (v21 == CFSTR("mmor")
      || (v22 = v21,
          v23 = -[__CFString isEqualToString:](v21, "isEqualToString:", CFSTR("mmor")),
          v22,
          (v23 & 1) != 0)
      || (v24 = v22, v24 == CFSTR("multiTokens"))
      || (v25 = v24,
          v26 = -[__CFString isEqualToString:](v24, "isEqualToString:", CFSTR("multiTokens")),
          v25,
          (v26 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_5;
    }
    if ((-[__CFString isEqual:](v25, "isEqual:", CFSTR("sharing")) & 1) != 0)
    {
      v4 = 5;
      goto LABEL_5;
    }
    if ((-[__CFString isEqual:](v25, "isEqual:", CFSTR("torino")) & 1) != 0)
    {
      v4 = 6;
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_4:
  v4 = 2;
LABEL_5:

  return v4;
}

uint64_t PKColorSpaceStandardLinearRGB()
{
  if (qword_1ECF22280 != -1)
    dispatch_once(&qword_1ECF22280, &__block_literal_global_23);
  return qword_1ECF22268;
}

uint64_t PKColorSpaceStandardExtendedRGB()
{
  if (qword_1ECF22280 != -1)
    dispatch_once(&qword_1ECF22280, &__block_literal_global_23);
  return qword_1ECF22270;
}

uint64_t PKColorSpaceStandardExtendedLinearRGB()
{
  if (qword_1ECF22280 != -1)
    dispatch_once(&qword_1ECF22280, &__block_literal_global_23);
  return qword_1ECF22278;
}

CGColor *PKColorCreateCopyByMatchingExtendedLinearSRGB(CGColor *result)
{
  CGColor *v1;
  CGColorSpace *ColorSpace;
  const __CFString *v3;
  const __CFString *v4;
  CFComparisonResult v5;
  CGColorSpace *v6;
  CGColorRenderingIntent v7;

  if (result)
  {
    v1 = result;
    ColorSpace = CGColorGetColorSpace(result);
    v3 = CGColorSpaceCopyName(ColorSpace);
    if (!v3)
      goto LABEL_5;
    v4 = v3;
    if (CFStringCompare(v3, (CFStringRef)*MEMORY[0x1E0C9D958], 0))
    {
      v5 = CFStringCompare(v4, (CFStringRef)*MEMORY[0x1E0C9D960], 0);
      CFRelease(v4);
      if (v5 == kCFCompareEqualTo)
      {
        if (qword_1ECF22280 != -1)
          dispatch_once(&qword_1ECF22280, &__block_literal_global_23);
        v6 = (CGColorSpace *)qword_1ECF22278;
        v7 = kCGRenderingIntentAbsoluteColorimetric;
        return CGColorCreateCopyByMatchingToColorSpace(v6, v7, v1, 0);
      }
LABEL_5:
      if (qword_1ECF22280 != -1)
        dispatch_once(&qword_1ECF22280, &__block_literal_global_23);
      v6 = (CGColorSpace *)qword_1ECF22278;
      v7 = kCGRenderingIntentPerceptual;
      return CGColorCreateCopyByMatchingToColorSpace(v6, v7, v1, 0);
    }
    CFRelease(v4);
    return CGColorRetain(v1);
  }
  return result;
}

CGColorRef PKColorCreateBlendedLinearColor(CGColor *a1, CGColor *a2, double a3)
{
  CGColorSpace *ColorSpace;
  CGColorSpaceRef v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  CGColorSpaceRef v10;
  CGColorSpace *v11;
  CFStringRef v12;
  const __CFString *v13;
  const __CFString *v14;
  const __CFString *v15;
  size_t NumberOfComponents;
  size_t v17;
  BOOL v18;
  const CGFloat *Components;
  const CGFloat *v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  const CGFloat *v24;
  double *v25;
  double v26;
  double v27;
  double v28;
  CGColorRef v29;
  CGColor *v30;
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  if (!a1)
    goto LABEL_22;
  if (!a2)
    goto LABEL_22;
  ColorSpace = CGColorGetColorSpace(a1);
  v7 = CGColorSpaceRetain(ColorSpace);
  if (!v7)
    goto LABEL_22;
  v8 = v7;
  v9 = CGColorGetColorSpace(a2);
  v10 = CGColorSpaceRetain(v9);
  if (!v10
    || (v11 = v10, (v12 = CGColorSpaceCopyName(v8)) == 0)
    || (v13 = v12, (v14 = CGColorSpaceCopyName(v11)) == 0)
    || (v15 = v14, CFStringCompare(v13, v14, 0))
    || CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E0C9DA00], 0)
    && CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E0C9D958], 0)
    && CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E0C9D9F0], 0)
    && CFStringCompare(v13, (CFStringRef)*MEMORY[0x1E0C9D948], 0))
  {
LABEL_22:
    __break(1u);
  }
  CFRelease(v11);
  CFRelease(v13);
  CFRelease(v15);
  if (a3 <= 0.0)
  {
    v30 = a1;
LABEL_20:
    v29 = CGColorRetain(v30);
    goto LABEL_21;
  }
  if (a3 >= 1.0)
  {
    v30 = a2;
    goto LABEL_20;
  }
  NumberOfComponents = CGColorSpaceGetNumberOfComponents(v8);
  v17 = NumberOfComponents + 1;
  v18 = NumberOfComponents == -1;
  Components = CGColorGetComponents(a1);
  v20 = CGColorGetComponents(a2);
  v21 = (double *)MEMORY[0x1E0C80A78](v20);
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = (const CGFloat *)((char *)v32 - v23);
  if (!v18)
  {
    v25 = (double *)((char *)v32 - v23);
    do
    {
      v26 = *Components++;
      v27 = v26;
      v28 = *v21++;
      *v25++ = v28 * a3 + v27 * (1.0 - a3);
      --v17;
    }
    while (v17);
  }
  v29 = CGColorCreate(v8, v24);
LABEL_21:
  CFRelease(v8);
  return v29;
}

double PKColorGetLightness(CGColor *a1)
{
  double v1;
  double v2;

  if (!a1)
    return 0.0;
  v1 = PKColorGetRelativeLuminance(a1) / 100.0;
  if (v1 <= 0.00885645168)
    v2 = v1 * 7.78703704 + 0.137931034;
  else
    v2 = pow(v1, 0.333333333);
  return (v2 * 116.0 + -16.0) / 100.0;
}

__CFString *PKSemanticColorToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x17)
    return 0;
  else
    return off_1E2AC3280[a1 - 1];
}

uint64_t PKSemanticColorFromString(void *a1, uint64_t *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  __CFString *v34;
  __CFString *v35;
  int v36;
  __CFString *v37;
  __CFString *v38;
  int v39;
  __CFString *v40;
  __CFString *v41;
  int v42;
  __CFString *v43;
  __CFString *v44;
  int v45;
  __CFString *v46;
  __CFString *v47;
  int v48;
  __CFString *v49;
  __CFString *v50;
  int v51;
  __CFString *v52;
  __CFString *v53;
  int v54;
  __CFString *v55;
  __CFString *v56;
  int v57;
  __CFString *v58;
  __CFString *v59;
  int v60;
  __CFString *v61;
  __CFString *v62;
  int v63;
  __CFString *v64;
  __CFString *v65;
  int v66;
  __CFString *v67;
  __CFString *v68;
  int v69;
  __CFString *v70;
  __CFString *v71;
  int v72;
  __CFString *v73;
  __CFString *v74;
  int v75;
  __CFString *v76;
  __CFString *v77;
  int v78;
  __CFString *v79;
  __CFString *v80;
  int v81;
  __CFString *v82;
  __CFString *v83;
  int v84;
  __CFString *v85;
  __CFString *v86;
  int v87;
  __CFString *v88;
  __CFString *v89;
  int v90;
  __CFString *v91;
  __CFString *v92;
  int v93;
  __CFString *v94;
  __CFString *v95;
  int v96;
  __CFString *v97;
  __CFString *v98;
  int v99;
  __CFString *v100;
  __CFString *v101;
  int v102;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    if (a2)
    {
      v8 = 0;
      goto LABEL_8;
    }
LABEL_9:

    v9 = v4;
LABEL_10:

    v10 = v4;
LABEL_11:

    v11 = v4;
LABEL_12:

    v12 = v4;
LABEL_13:

    v13 = v4;
LABEL_14:

    v14 = v4;
LABEL_15:

    v15 = v4;
LABEL_16:

    v16 = v4;
LABEL_17:

    v17 = v4;
LABEL_18:

    v18 = v4;
LABEL_19:

    v19 = v4;
LABEL_20:

    v20 = v4;
LABEL_21:

    v21 = v4;
LABEL_22:

    v22 = v4;
LABEL_23:

    v23 = v4;
LABEL_24:

    v24 = v4;
LABEL_25:

    v25 = v4;
LABEL_26:

    v26 = v4;
LABEL_27:

    v27 = v4;
LABEL_28:

    v28 = v4;
LABEL_29:

    v29 = v4;
LABEL_30:

    v30 = v4;
LABEL_31:

    v31 = v4;
LABEL_32:

    v32 = 1;
    goto LABEL_33;
  }

  v5 = v4;
  if (v5 == CFSTR("label")
    || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("label")), v6, v7))
  {
    if (a2)
    {
      v8 = 1;
LABEL_8:
      *a2 = v8;
      goto LABEL_9;
    }
    goto LABEL_9;
  }

  v34 = v6;
  if (v34 == CFSTR("secondaryLabel")
    || (v35 = v34,
        v36 = -[__CFString isEqualToString:](v34, "isEqualToString:", CFSTR("secondaryLabel")),
        v35,
        v36))
  {
    if (a2)
      *a2 = 2;
    goto LABEL_10;
  }

  v37 = v35;
  if (v37 == CFSTR("tertiaryLabel")
    || (v38 = v37,
        v39 = -[__CFString isEqualToString:](v37, "isEqualToString:", CFSTR("tertiaryLabel")),
        v38,
        v39))
  {
    if (a2)
      *a2 = 3;
    goto LABEL_11;
  }

  v40 = v38;
  if (v40 == CFSTR("quaternaryLabel")
    || (v41 = v40,
        v42 = -[__CFString isEqualToString:](v40, "isEqualToString:", CFSTR("quaternaryLabel")),
        v41,
        v42))
  {
    if (a2)
      *a2 = 4;
    goto LABEL_12;
  }

  v43 = v41;
  if (v43 == CFSTR("link")
    || (v44 = v43, v45 = -[__CFString isEqualToString:](v43, "isEqualToString:", CFSTR("link")), v44, v45))
  {
    if (a2)
      *a2 = 5;
    goto LABEL_13;
  }

  v46 = v44;
  if (v46 == CFSTR("placeholderText")
    || (v47 = v46,
        v48 = -[__CFString isEqualToString:](v46, "isEqualToString:", CFSTR("placeholderText")),
        v47,
        v48))
  {
    if (a2)
      *a2 = 6;
    goto LABEL_14;
  }

  v49 = v47;
  if (v49 == CFSTR("systemFill")
    || (v50 = v49,
        v51 = -[__CFString isEqualToString:](v49, "isEqualToString:", CFSTR("systemFill")),
        v50,
        v51))
  {
    if (a2)
      *a2 = 7;
    goto LABEL_15;
  }

  v52 = v50;
  if (v52 == CFSTR("secondarySystemFill")
    || (v53 = v52,
        v54 = -[__CFString isEqualToString:](v52, "isEqualToString:", CFSTR("secondarySystemFill")),
        v53,
        v54))
  {
    if (a2)
      *a2 = 8;
    goto LABEL_16;
  }

  v55 = v53;
  if (v55 == CFSTR("tertiarySystemFill")
    || (v56 = v55,
        v57 = -[__CFString isEqualToString:](v55, "isEqualToString:", CFSTR("tertiarySystemFill")),
        v56,
        v57))
  {
    if (a2)
      *a2 = 9;
    goto LABEL_17;
  }

  v58 = v56;
  if (v58 == CFSTR("quaternarySystemFill")
    || (v59 = v58,
        v60 = -[__CFString isEqualToString:](v58, "isEqualToString:", CFSTR("quaternarySystemFill")),
        v59,
        v60))
  {
    if (a2)
      *a2 = 10;
    goto LABEL_18;
  }

  v61 = v59;
  if (v61 == CFSTR("systemBackground")
    || (v62 = v61,
        v63 = -[__CFString isEqualToString:](v61, "isEqualToString:", CFSTR("systemBackground")),
        v62,
        v63))
  {
    if (a2)
      *a2 = 11;
    goto LABEL_19;
  }

  v64 = v62;
  if (v64 == CFSTR("secondarySystemBackground")
    || (v65 = v64,
        v66 = -[__CFString isEqualToString:](v64, "isEqualToString:", CFSTR("secondarySystemBackground")),
        v65,
        v66))
  {
    if (a2)
      *a2 = 12;
    goto LABEL_20;
  }

  v67 = v65;
  if (v67 == CFSTR("tertiarySystemBackground")
    || (v68 = v67,
        v69 = -[__CFString isEqualToString:](v67, "isEqualToString:", CFSTR("tertiarySystemBackground")),
        v68,
        v69))
  {
    if (a2)
      *a2 = 13;
    goto LABEL_21;
  }

  v70 = v68;
  if (v70 == CFSTR("systemBlue")
    || (v71 = v70,
        v72 = -[__CFString isEqualToString:](v70, "isEqualToString:", CFSTR("systemBlue")),
        v71,
        v72))
  {
    if (a2)
      *a2 = 14;
    goto LABEL_22;
  }

  v73 = v71;
  if (v73 == CFSTR("systemGreen")
    || (v74 = v73,
        v75 = -[__CFString isEqualToString:](v73, "isEqualToString:", CFSTR("systemGreen")),
        v74,
        v75))
  {
    if (a2)
      *a2 = 15;
    goto LABEL_23;
  }

  v76 = v74;
  if (v76 == CFSTR("systemIndigo")
    || (v77 = v76,
        v78 = -[__CFString isEqualToString:](v76, "isEqualToString:", CFSTR("systemIndigo")),
        v77,
        v78))
  {
    if (a2)
      *a2 = 16;
    goto LABEL_24;
  }

  v79 = v77;
  if (v79 == CFSTR("systemOrange")
    || (v80 = v79,
        v81 = -[__CFString isEqualToString:](v79, "isEqualToString:", CFSTR("systemOrange")),
        v80,
        v81))
  {
    if (a2)
      *a2 = 17;
    goto LABEL_25;
  }

  v82 = v80;
  if (v82 == CFSTR("systemPink")
    || (v83 = v82,
        v84 = -[__CFString isEqualToString:](v82, "isEqualToString:", CFSTR("systemPink")),
        v83,
        v84))
  {
    if (a2)
      *a2 = 18;
    goto LABEL_26;
  }

  v85 = v83;
  if (v85 == CFSTR("systemPurple")
    || (v86 = v85,
        v87 = -[__CFString isEqualToString:](v85, "isEqualToString:", CFSTR("systemPurple")),
        v86,
        v87))
  {
    if (a2)
      *a2 = 19;
    goto LABEL_27;
  }

  v88 = v86;
  if (v88 == CFSTR("systemRed")
    || (v89 = v88,
        v90 = -[__CFString isEqualToString:](v88, "isEqualToString:", CFSTR("systemRed")),
        v89,
        v90))
  {
    if (a2)
      *a2 = 20;
    goto LABEL_28;
  }

  v91 = v89;
  if (v91 == CFSTR("systemTeal")
    || (v92 = v91,
        v93 = -[__CFString isEqualToString:](v91, "isEqualToString:", CFSTR("systemTeal")),
        v92,
        v93))
  {
    if (a2)
      *a2 = 21;
    goto LABEL_29;
  }

  v94 = v92;
  if (v94 == CFSTR("systemYellow")
    || (v95 = v94,
        v96 = -[__CFString isEqualToString:](v94, "isEqualToString:", CFSTR("systemYellow")),
        v95,
        v96))
  {
    if (a2)
      *a2 = 22;
    goto LABEL_30;
  }

  v97 = v95;
  if (v97 == CFSTR("systemGray")
    || (v98 = v97,
        v99 = -[__CFString isEqualToString:](v97, "isEqualToString:", CFSTR("systemGray")),
        v98,
        v99))
  {
    if (a2)
      *a2 = 23;
    goto LABEL_31;
  }

  v100 = v98;
  if (v100 == CFSTR("tint")
    || (v101 = v100,
        v102 = -[__CFString isEqualToString:](v100, "isEqualToString:", CFSTR("tint")),
        v101,
        v102))
  {
    if (a2)
      *a2 = 24;
    goto LABEL_32;
  }

  v32 = 0;
  if (a2)
    *a2 = 0;
LABEL_33:

  return v32;
}

uint64_t _GetHValue(float *a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  uint64_t IntValue;
  int v8;

  if (!a2)
    return 0;
  v3 = (objc_class *)MEMORY[0x1E0CB3900];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithString:", v4);

  v8 = 0;
  IntValue = _GetIntValue((uint64_t)&v8, v5);
  if ((_DWORD)IntValue)
    *a1 = (float)(v8 % 360) / 359.0;

  return IntValue;
}

uint64_t _GetSLValue(float *a1, void *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  uint64_t PercentValue;
  float v8;

  if (!a2)
    return 0;
  v3 = (objc_class *)MEMORY[0x1E0CB3900];
  v4 = a2;
  v5 = (void *)objc_msgSend([v3 alloc], "initWithString:", v4);

  v8 = 0.0;
  PercentValue = _GetPercentValue((uint64_t)&v8, v5);
  if ((_DWORD)PercentValue)
    *a1 = v8 / 100.0;

  return PercentValue;
}

uint64_t _GetPercentValue(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;

  v3 = a2;
  if (objc_msgSend(v3, "scanFloat:", a1)
    && objc_msgSend(v3, "scanString:intoString:", CFSTR("%"), 0)
    && (objc_msgSend(v3, "isAtEnd") & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    objc_msgSend(v3, "setScanLocation:", 0);
    v4 = 0;
  }

  return v4;
}

uint64_t PKAccountWebServiceVirtualCardManageActionFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fetch")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cancel")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("replace")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enable")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("disable")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("enableDynamicSecurityCode")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("disableDynamicSecurityCode")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_18FF3AEDC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t PKAccountWebServiceVirtualCardSecurityCodeActionFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("viewed")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("autofilled")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKAccountWebServiceExportTransactionDataRequestTypeToString(uint64_t a1)
{
  if (a1)
    return CFSTR("transactionMetadata");
  else
    return CFSTR("default");
}

const __CFString *PKAccountWebServiceTransactionDataTriggerToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2AC3448[a1 - 1];
}

unint64_t PKStricterAccountEnhancedMerchantCooldownLevel(unint64_t result, unint64_t a2)
{
  unint64_t v2;

  if (result >= a2)
    v2 = a2;
  else
    v2 = result;
  if (a2 <= 3)
    return v2;
  return result;
}

void sub_18FF4145C(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void sub_18FF418D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF42848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF42950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF42A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF42B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF435F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF437D4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v1);
  objc_destroyWeak(v2);
  _Unwind_Resume(a1);
}

void sub_18FF43BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPaymentTransactionRewardsItemTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("appleProperty"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("applePay"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("other"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("return"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("promotion"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(CFSTR("activationOffer"), "isEqualToString:", v1))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPaymentTransactionRewardsItemStateFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("eligible"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("earned"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("reversed"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(CFSTR("eligible_activity"), "isEqualToString:", v1))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPaymentTransactionRewardsItemValueUnitFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("percent"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(CFSTR("cash"), "isEqualToString:", v1))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPassTileWidthClassVerticalFlowToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("default");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("compact");
  else
    return v1;
}

uint64_t PKPassTileWidthClassVerticalFlowFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("default")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("default")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("compact")
      || v2
      && (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("compact")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

__CFString *PKPayLaterFinancingPlanGeneratorMerchantToString(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2AC38A0[a1];
}

uint64_t PKPayLaterFinancingPlanGeneratorMerchantFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  char v12;
  __CFString *v13;
  __CFString *v14;
  char v15;
  __CFString *v16;
  __CFString *v17;
  char v18;
  __CFString *v19;
  __CFString *v20;
  int v21;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("None") && v1 != 0)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("None"));

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("Test Merchant")
        || (v8 = v7,
            v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("Test Merchant")),
            v8,
            (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("Best Buy")
        || (v11 = v10,
            v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("Best Buy")),
            v11,
            (v12 & 1) != 0))
      {
        v5 = 2;
        goto LABEL_7;
      }
      v13 = v11;
      if (v13 == CFSTR("Nike")
        || (v14 = v13,
            v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("Nike")),
            v14,
            (v15 & 1) != 0))
      {
        v5 = 3;
        goto LABEL_7;
      }
      v16 = v14;
      if (v16 == CFSTR("Saks")
        || (v17 = v16,
            v18 = -[__CFString isEqualToString:](v16, "isEqualToString:", CFSTR("Saks")),
            v17,
            (v18 & 1) != 0))
      {
        v5 = 4;
        goto LABEL_7;
      }
      v19 = v17;
      if (v19 == CFSTR("Macys")
        || (v20 = v19,
            v21 = -[__CFString isEqualToString:](v19, "isEqualToString:", CFSTR("Macys")),
            v20,
            v21))
      {
        v5 = 5;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

const __CFString *PKPaymentOfferAssetTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("icon");
  else
    return off_1E2AC38D0[a1];
}

uint64_t PKPaymentOfferPeriodFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("day"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("day"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("month")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("month")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPaymentOfferPeriodToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("day");
  if (a1 == 2)
    v1 = CFSTR("month");
  if (a1)
    return v1;
  else
    return CFSTR("unknown");
}

id PKPaymentOffersDisplayableError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  PKLocalizedPaymentString(CFSTR("GENERIC_ERROR_TITLE"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  PKLocalizedPaymentString(CFSTR("GENERIC_ERROR_MESSAGE"), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PKDisplayableErrorCustomWithType(-1, v2, v3, v1, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

uint64_t PKPaymentOffersEligibleInDeviceRegion(void *a1)
{
  id v1;
  void *v2;
  NSObject *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  int v17;
  void *v18;
  __int16 v19;
  void *v20;
  __int16 v21;
  void *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      v9 = "Payment offers not eligible since 2024 oslo UI updates flag is not turned on";
LABEL_9:
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v17, 2u);
    }
LABEL_10:
    v8 = 0;
    goto LABEL_19;
  }
  if ((PKMagmaEnabled() & 1) == 0)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      v9 = "Payment offers not eligible since the feature flag is not on";
      goto LABEL_9;
    }
    goto LABEL_10;
  }
  objc_msgSend(v1, "targetDevice");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "deviceRegion");
  v3 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "context");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "configuration");
  v5 = objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v5, "featureWithType:inRegion:", 15, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "targetDevice");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = objc_msgSend(v6, "isSupportedOnDevice:", v7);

  if ((v5 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v8 = PKPaymentOffersForceFeatureSupport();
    if ((_DWORD)v8)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Forcing payment offers support via internal flag", (uint8_t *)&v17, 2u);
      }
    }
    else
    {
      objc_msgSend(v1, "targetDevice");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "deviceVersion");
      v10 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(v1, "targetDevice");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "deviceClass");
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      PKLogFacilityTypeGetObject(6uLL);
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        -[NSObject asDictionary](v10, "asDictionary");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = 138412802;
        v18 = v6;
        v19 = 2112;
        v20 = v15;
        v21 = 2112;
        v22 = v13;
        _os_log_impl(&dword_18FC92000, v14, OS_LOG_TYPE_DEFAULT, "Payment offers not supported since the feautre doesnt meet requirements. Feature: %@, deviceVersion: %@, deviceClass: %@", (uint8_t *)&v17, 0x20u);

      }
    }

  }
LABEL_19:

  return v8;
}

uint64_t PKPaymentOffersEligibleToFetchCatalog(void *a1)
{
  id v1;
  _BOOL4 v2;
  _BOOL4 v3;
  _BOOL4 v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  __int16 v10;
  uint8_t buf[2];
  __int16 v12;

  v1 = a1;
  if ((_os_feature_enabled_impl() & 1) != 0)
  {
    if ((PKMagmaEnabled() & 1) != 0)
    {
      v2 = PKHidePayLaterOptions();
      v3 = PKHideCardBenefitPayLater();
      v4 = PKHideCardBenefitRewards();
      if (!v2 || !v3 || !v4)
      {
        v8 = PKPaymentOffersEligibleInDeviceRegion(v1);
        goto LABEL_14;
      }
      PKLogFacilityTypeGetObject(6uLL);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v10 = 0;
        v6 = "Not fetching payment offers all 3 settings flags are off: PayLaterOffers, CardBenefitPayLater, CardBenefitRewards";
        v7 = (uint8_t *)&v10;
LABEL_12:
        _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, v6, v7, 2u);
      }
    }
    else
    {
      PKLogFacilityTypeGetObject(6uLL);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v6 = "Not fetching payment offers since the feauture flag is not turned on";
        v7 = buf;
        goto LABEL_12;
      }
    }
  }
  else
  {
    PKLogFacilityTypeGetObject(6uLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 0;
      v6 = "Not fetching payment offers since 2024 oslo UI updates flag is not turned on";
      v7 = (uint8_t *)&v12;
      goto LABEL_12;
    }
  }

  v8 = 0;
LABEL_14:

  return v8;
}

__CFString *PKPassTileAccessoryTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AC3908[a1];
}

uint64_t PKPassTileAccessoryTypeFromString(void *a1, _QWORD *a2)
{
  __CFString *v3;
  __CFString *v4;
  int v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  int v9;
  __CFString *v10;
  uint64_t v11;
  __CFString *v13;
  __CFString *v14;
  int v15;

  v3 = a1;
  v4 = v3;
  if (v3 == CFSTR("button")
    || v3 && (v5 = -[__CFString isEqualToString:](v3, "isEqualToString:", CFSTR("button")), v4, v5))
  {
    if (a2)
      *a2 = 0;

    v6 = v4;
LABEL_12:

    v10 = v4;
LABEL_13:

    v11 = 1;
    goto LABEL_14;
  }

  v7 = v4;
  if (v7 == CFSTR("spinner")
    || (v8 = v7, v4)
    && (v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("spinner")), v8, v9))
  {
    if (a2)
      *a2 = 1;
    goto LABEL_12;
  }

  v13 = v8;
  if (v13 == CFSTR("image")
    || (v14 = v13, v4)
    && (v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("image")), v14, v15))
  {
    if (a2)
      *a2 = 2;
    goto LABEL_13;
  }

  v11 = 0;
  if (a2)
    *a2 = 0;
LABEL_14:

  return v11;
}

const __CFString *PKPaymentOfferCriteriaTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("installments");
  if (a1 == 2)
    return CFSTR("rewards");
  else
    return v1;
}

const __CFString *PKPaymentOfferCriteriaEligibilityToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("eligible");
  if (a1 == 2)
    return CFSTR("notEligible");
  else
    return v1;
}

const __CFString *PKPaymentOfferCriteriaIneligibleReasonToString(unint64_t a1)
{
  if (a1 > 0x12)
    return CFSTR("unknown");
  else
    return off_1E2AC3920[a1];
}

uint64_t PKPaymentOfferCriteriaTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("installments"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("installments"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("rewards")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("rewards")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

id PDSharingChannelServiceInterface_Server()
{
  if (qword_1ECF22290 != -1)
    dispatch_once(&qword_1ECF22290, &__block_literal_global_28);
  return (id)_MergedGlobals_200;
}

id PKSharingChannelServiceInterface_Client()
{
  if (qword_1ECF222A0 != -1)
    dispatch_once(&qword_1ECF222A0, &__block_literal_global_85);
  return (id)qword_1ECF22298;
}

BOOL PKProtobufPaymentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  PKProtobufPaymentToken *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = objc_alloc_init(PKProtobufPaymentToken);
        objc_storeStrong((id *)(a1 + 32), v17);
        if (PBReaderPlaceMark() && PKProtobufPaymentTokenReadFrom((uint64_t)v17, a2))
          goto LABEL_29;
        goto LABEL_34;
      case 2u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
        goto LABEL_26;
      case 3u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
LABEL_26:
        v17 = *(PKProtobufPaymentToken **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;
        goto LABEL_30;
      case 4u:
        v17 = objc_alloc_init(PKProtobufShippingMethod);
        objc_storeStrong((id *)(a1 + 24), v17);
        if (PBReaderPlaceMark() && (PKProtobufShippingMethodReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

void sub_18FF4E580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *PKPassTileStateTypeToString(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E2AC3AC8[a1];
}

uint64_t PKPassTileStateTypeFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  _BOOL8 v5;
  __CFString *v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  __CFString *v10;
  __CFString *v11;
  int v12;
  __CFString *v13;
  __CFString *v14;
  int v15;
  __CFString *v16;
  __CFString *v17;
  int v18;
  __CFString *v20;
  __CFString *v21;
  char v22;

  v3 = a1;
  v4 = v3;
  v5 = v3 == 0;
  if (!v3)
  {
    if (a2)
    {
LABEL_6:
      *a2 = 0;
      v9 = v5;
      goto LABEL_33;
    }
LABEL_32:
    v9 = 1;
    goto LABEL_33;
  }
  v6 = (__CFString *)v3;
  v7 = v6;
  if (v6 == CFSTR("default"))
  {
    v8 = 1;
    if (!a2)
      goto LABEL_10;
  }
  else
  {
    v8 = -[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("default"));
    if (!a2)
      goto LABEL_10;
  }
  if (v8)
    *a2 = 0;
LABEL_10:

  if ((v8 & 1) != 0)
    goto LABEL_32;
  v10 = v7;
  v11 = v10;
  if (v10 == CFSTR("defaultV2"))
  {
    v12 = 1;
    if (!a2)
      goto LABEL_17;
  }
  else
  {
    v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("defaultV2"));
    if (!a2)
      goto LABEL_17;
  }
  if (v12)
    *a2 = 1;
LABEL_17:

  if ((v12 & 1) != 0)
    goto LABEL_32;
  v13 = v11;
  v14 = v13;
  if (v13 == CFSTR("checkIn"))
  {
    v15 = 1;
    if (!a2)
      goto LABEL_24;
  }
  else
  {
    v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("checkIn"));
    if (!a2)
      goto LABEL_24;
  }
  if (v15)
    *a2 = 2;
LABEL_24:

  if ((v15 & 1) != 0)
    goto LABEL_32;
  v16 = v14;
  v17 = v16;
  if (v16 == CFSTR("group"))
  {
    v18 = 1;
    if (!a2)
      goto LABEL_31;
  }
  else
  {
    v18 = -[__CFString isEqualToString:](v16, "isEqualToString:", CFSTR("group"));
    if (!a2)
      goto LABEL_31;
  }
  if (v18)
    *a2 = 3;
LABEL_31:

  if ((v18 & 1) != 0)
    goto LABEL_32;
  v20 = v17;
  v21 = v20;
  if (v20 == CFSTR("hostedView"))
    v9 = 1;
  else
    v9 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("hostedView"));
  if (a2 && (_DWORD)v9)
    *a2 = 4;

  if (a2)
    v22 = v9;
  else
    v22 = 1;
  if ((v22 & 1) == 0)
    goto LABEL_6;
LABEL_33:

  return v9;
}

const __CFString *PKPayLaterFinancingOptionAutoPaymentToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("required");
  else
    return CFSTR("available");
}

BOOL PKPayLaterFinancingOptionAutoPaymentFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  BOOL v3;
  char v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  _BOOL8 v8;

  v1 = a1;
  v2 = v1;
  v3 = v1 == CFSTR("available") || v1 == 0;
  v8 = 0;
  if (!v3)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("available"));

    if ((v4 & 1) == 0)
    {
      v5 = v2;
      if (v5 == CFSTR("required")
        || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("required")),
                     v6,
                     v7))
      {
        v8 = 1;
      }
    }
  }

  return v8;
}

void sub_18FF5B448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5B6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5BDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5C438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5C6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5C7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5C898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5CC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5CD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5CDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5CE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5D020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5D230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5D84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5DCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5E5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5E9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5EAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5EC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5EF4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_18FF5F0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF62634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF63B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_18FF63EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF64008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF64D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18FF65500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_18FF656A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18FF65988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF660CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18FF66864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18FF675D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF680FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_18FF6848C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6AA84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6CF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6D038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6DE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18FF6E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Unwind_Resume(a1);
}

void PKUnregisterPassSettingsChangedObserver(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;

  v3 = (void *)MEMORY[0x1E0CB37D0];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "defaultCenter");
  v6 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "removeObserver:name:object:", v5, CFSTR("PKPassSettingsDidChangeNotification"), v4);

}

void sub_18FF6F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_18FF6FAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initSFSafariCredentialStore()
{
  Class result;

  if (qword_1ECF222E0 != -1)
    dispatch_once(&qword_1ECF222E0, &__block_literal_global_31);
  result = objc_getClass("SFSafariCredentialStore");
  _MergedGlobals_202 = (uint64_t)result;
  getSFSafariCredentialStoreClass[0] = (uint64_t (*)())SFSafariCredentialStoreFunction;
  return result;
}

id SFSafariCredentialStoreFunction()
{
  return (id)_MergedGlobals_202;
}

void sub_18FF728C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF72B14(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FF72D54(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FF72FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF732C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FF73D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *PKAccountActionTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AC4BF8[a1];
}

const __CFString *PKAccountStateToString(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_1E2AC4CF0[a1];
}

uint64_t PKAccountStateFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("active")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("restricted")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("locked")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("closed")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("removed")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKAccountStateIsTerminal(unint64_t a1)
{
  return (a1 < 6) & (0x30u >> a1);
}

const __CFString *PKAccountStateReasonToString(unint64_t a1)
{
  if (a1 > 0xF)
    return CFSTR("unknown");
  else
    return off_1E2AC4C10[a1];
}

const __CFString *PKAccountTypeToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1E2AC4CC8[a1];
}

const __CFString *PKAccountAccessLevelToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AC4CB0[a1];
}

uint64_t PKAccountAccessLevelFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("primary")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("participant")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

BOOL PKAccountStateReasonIsInMerge(uint64_t a1)
{
  return a1 == 14 || a1 == 11;
}

uint64_t PKAccountTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("credit")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("paylater")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("applebalance")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("savings")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKRoundDecimalNumberToPlaces(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;

  v3 = (void *)MEMORY[0x1E0CB35A0];
  v4 = a1;
  objc_msgSend(v3, "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", 0, a2, 0, 1, 1, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "decimalNumberByRoundingAccordingToBehavior:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

id PKCompoundInterestForPrincipal(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  int v26;

  v7 = a1;
  v8 = a3;
  v9 = v8;
  v10 = 0;
  if (!v7 || !v8)
    goto LABEL_8;
  v11 = (void *)MEMORY[0x1E0CB3598];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a4);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v12;
  if (v12)
  {
    objc_msgSend(v12, "decimalValue");
  }
  else
  {
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
  }
  objc_msgSend(v11, "decimalNumberWithDecimal:", v25);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3598], "one");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "decimalNumberByDividingBy:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "decimalNumberByAdding:", v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  PKRoundDecimalNumberToPlaces(v17, 10);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v18, "decimalNumberByRaisingToPower:", a2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "decimalNumberByMultiplyingBy:", v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v20, "decimalNumberBySubtracting:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v10
    || (objc_msgSend(MEMORY[0x1E0CB3598], "zero"),
        v21 = (void *)objc_claimAutoreleasedReturnValue(),
        v22 = objc_msgSend(v10, "compare:", v21),
        v21,
        v23 = v10,
        v22 == -1))
  {
LABEL_8:
    objc_msgSend(MEMORY[0x1E0CB3598], "zero");
    v23 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v23;
}

id PKPayLaterFundingSourcePaymentTypeToStrings(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("debit"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      objc_msgSend(v3, "addObject:", CFSTR("appleCash"));
      if ((a1 & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("credit"));
  if ((a1 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((a1 & 8) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("ach"));
LABEL_6:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKPayLaterFundingSourcePaymentTypeFromStrings(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "containsObject:", CFSTR("debit"));
  if (objc_msgSend(v1, "containsObject:", CFSTR("credit")))
    v2 |= 2uLL;
  if (objc_msgSend(v1, "containsObject:", CFSTR("appleCash")))
    v3 = v2 | 4;
  else
    v3 = v2;
  v4 = objc_msgSend(v1, "containsObject:", CFSTR("ach"));

  if (v4)
    return v3 | 8;
  else
    return v3;
}

uint64_t PKMerchantCapabilityFromFundingSourcePaymentType(unsigned int a1)
{
  return (__rbit32(a1) >> 28) & 0xC;
}

const __CFString *PKFinancingPlanPaymentIntentTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2AC5000[a1];
}

const __CFString *PKPayLaterFinancingOptionCancellationReasonToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2AC5020[a1];
}

void sub_18FF7ECDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_18FF7EFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_18FF7F104(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_18FF7F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKAuxiliaryCapabilityRoleToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("deviceDecryptions");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("deviceSignatures");
  else
    return v1;
}

uint64_t PKAuxiliaryCapabilityRoleFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("deviceDecryption"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("deviceDecryption"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("deviceSignature")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("deviceSignature")),
          v6,
          v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKDeviceSignatureTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  int v37;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("access-18013_5-v1"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_38:
    v4 = 0;
    goto LABEL_39;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("access-18013_5-v1"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("unifiedAccessHome")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("unifiedAccessHome")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_39;
    }
    v8 = v6;
    if (v8 == CFSTR("fido")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("fido")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_39;
    }
    v11 = v9;
    if (v11 == CFSTR("applePayTrust")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("applePayTrust")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_39;
    }
    v14 = v12;
    if (v14 == CFSTR("coreIDCred")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("coreIDCred")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_39;
    }
    v17 = v15;
    if (v17 == CFSTR("carConnectivityConsortium")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("carConnectivityConsortium")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_39;
    }
    v20 = v18;
    if (v20 == CFSTR("aliro")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("aliro")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_39;
    }
    v23 = v21;
    if (v23 == CFSTR("aliroHome")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("aliroHome")),
          v24,
          (v25 & 1) != 0))
    {
      v4 = 8;
      goto LABEL_39;
    }
    v26 = v24;
    if (v26 == CFSTR("coreIDCredAccount")
      || (v27 = v26,
          v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("coreIDCredAccount")),
          v27,
          (v28 & 1) != 0))
    {
      v4 = 9;
      goto LABEL_39;
    }
    v29 = v27;
    if (v29 == CFSTR("iso18013BiometricACL")
      || (v30 = v29,
          v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("iso18013BiometricACL")),
          v30,
          (v31 & 1) != 0))
    {
      v4 = 10;
      goto LABEL_39;
    }
    v32 = v30;
    if (v32 == CFSTR("iso18013KeySigningKey")
      || (v33 = v32,
          v34 = -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("iso18013KeySigningKey")),
          v33,
          (v34 & 1) != 0))
    {
      v4 = 11;
      goto LABEL_39;
    }
    v35 = v33;
    if (v35 == CFSTR("iso18013Credential")
      || (v36 = v35,
          v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("iso18013Credential")),
          v36,
          v37))
    {
      v4 = 12;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_4:
  v4 = 1;
LABEL_39:

  return v4;
}

__CFString *PKDeviceSignatureTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return 0;
  else
    return off_1E2AC5438[a1 - 1];
}

BOOL PKSignatureSchemeVersionFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("ECDSA"))
  {
    if (!v1
      || (v3 = -[__CFString caseInsensitiveCompare:](v1, "caseInsensitiveCompare:", CFSTR("ECDSA")), v2, v3))
    {
      v4 = 0;
    }
  }

  return v4;
}

const __CFString *PKSignatureSchemeVersionToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("ECDSA");
  else
    return 0;
}

uint64_t PKDeviceDecryptionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  int v16;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("coreIDCred"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_17:
    v4 = 0;
    goto LABEL_18;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("coreIDCred"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("syncedKMLKey")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("syncedKMLKey")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_18;
    }
    v8 = v6;
    if (v8 == CFSTR("access-18013_5-v1")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("access-18013_5-v1")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_18;
    }
    v11 = v9;
    if (v11 == CFSTR("applePayTrust")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("applePayTrust")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_18;
    }
    v14 = v12;
    if (v14 == CFSTR("carConnectivityConsortium")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("carConnectivityConsortium")),
          v15,
          v16))
    {
      v4 = 5;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_4:
  v4 = 1;
LABEL_18:

  return v4;
}

__CFString *PKDeviceDecryptionTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return 0;
  else
    return off_1E2AC5498[a1 - 1];
}

BOOL PKDeviceDecryptionUsageFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("isoContainer"))
  {
    if (!v1
      || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("isoContainer")), v2, !v3))
    {
      v4 = 0;
    }
  }

  return v4;
}

const __CFString *PKDeviceDecryptionUsageToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("isoContainer");
  else
    return 0;
}

uint64_t PKDecryptionSchemeVersionFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("EC_v3"))
    goto LABEL_7;
  if (v1)
  {
    v3 = -[__CFString caseInsensitiveCompare:](v1, "caseInsensitiveCompare:", CFSTR("EC_v3"));

    if (v3)
    {
      v4 = v2;
      if (v4 == CFSTR("hpke")
        || (v5 = v4,
            v6 = -[__CFString caseInsensitiveCompare:](v4, "caseInsensitiveCompare:", CFSTR("hpke")),
            v5,
            !v6))
      {
        v7 = 2;
        goto LABEL_9;
      }
      goto LABEL_6;
    }
LABEL_7:
    v7 = 1;
    goto LABEL_9;
  }
LABEL_6:
  v7 = 0;
LABEL_9:

  return v7;
}

const __CFString *PKDecryptionSchemeVersionToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("EC_v3");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("hpke");
  else
    return v1;
}

void sub_18FF86A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_18FF8AEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKPassShareActivationOptionTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2AC5C58[a1 - 1];
}

uint64_t PKPassShareActivationOptionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("pinCode"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("pinCode"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("externallyEnteredPin")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("externallyEnteredPin")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("secondaryKey")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("secondaryKey")),
          v9,
          v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

uint64_t PKPassShareActivationOptionTypeIsActivationCode(unint64_t a1)
{
  return (a1 < 4) & (6u >> (a1 & 0xF));
}

void *PKPassShareActivationOptionActivationCodeTypes()
{
  return &unk_1E2C3DDE0;
}

void *PKPassShareActivationOptionExternallyManagedTypes()
{
  return &unk_1E2C3DDF8;
}

void sub_18FF90330(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18FF97090(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

Class initFKBankConnectOsloProvider()
{
  Class result;

  if (qword_1ECF22300 != -1)
    dispatch_once(&qword_1ECF22300, &__block_literal_global_775_0);
  result = objc_getClass("FKBankConnectOsloProvider");
  _MergedGlobals_204 = (uint64_t)result;
  getFKBankConnectOsloProviderClass[0] = (uint64_t (*)())FKBankConnectOsloProviderFunction;
  return result;
}

id FKBankConnectOsloProviderFunction()
{
  return (id)_MergedGlobals_204;
}

Class initSTSSession()
{
  Class result;

  if (qword_1ECF22310 != -1)
    dispatch_once(&qword_1ECF22310, &__block_literal_global_117);
  result = objc_getClass("STSSession");
  _MergedGlobals_205 = (uint64_t)result;
  getSTSSessionClass[0] = (uint64_t (*)())STSSessionFunction;
  return result;
}

id STSSessionFunction()
{
  return (id)_MergedGlobals_205;
}

const __CFString *PKSEConsistencyCheckDeviceCredentialTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AC6288[a1];
}

const __CFString *PKProxCardTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("PKProxCardTypeVehicleInitiatedPairing");
  else
    return CFSTR("Unknown");
}

uint64_t PKIdentityProofingConfigurationTargetDeviceTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("phone"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("phone"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("watch")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("watch")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKIdentityProofingStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  int v37;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("actionRequired"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_38:
    v4 = 0;
    goto LABEL_39;
  }
  v3 = objc_msgSend(CFSTR("actionRequired"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("pending")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("pending"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_39;
    }
    v8 = v6;
    if (v8 == CFSTR("readyToAdd")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("readyToAdd"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_39;
    }
    v11 = v9;
    if (v11 == CFSTR("none")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("none"), "isEqualToString:", v11), v12, (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_39;
    }
    v14 = v12;
    if (v14 == CFSTR("enterAuthCode")
      || (v15 = v14,
          v16 = objc_msgSend(CFSTR("enterAuthCode"), "isEqualToString:", v14),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_39;
    }
    v17 = v15;
    if (v17 == CFSTR("retryAddingID")
      || (v18 = v17,
          v19 = objc_msgSend(CFSTR("retryAddingID"), "isEqualToString:", v17),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_39;
    }
    v20 = v18;
    if (v20 == CFSTR("processingRequest")
      || (v21 = v20,
          v22 = objc_msgSend(CFSTR("processingRequest"), "isEqualToString:", v20),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_39;
    }
    v23 = v21;
    if (v23 == CFSTR("cannotAddID")
      || (v24 = v23, v25 = objc_msgSend(CFSTR("cannotAddID"), "isEqualToString:", v23),
                     v24,
                     (v25 & 1) != 0))
    {
      v4 = 8;
      goto LABEL_39;
    }
    v26 = v24;
    if (v26 == CFSTR("unableToAddID")
      || (v27 = v26,
          v28 = objc_msgSend(CFSTR("unableToAddID"), "isEqualToString:", v26),
          v27,
          (v28 & 1) != 0))
    {
      v4 = 9;
      goto LABEL_39;
    }
    v29 = v27;
    if (v29 == CFSTR("waitingForWifi")
      || (v30 = v29,
          v31 = objc_msgSend(CFSTR("waitingForWifi"), "isEqualToString:", v29),
          v30,
          (v31 & 1) != 0))
    {
      v4 = 10;
      goto LABEL_39;
    }
    v32 = v30;
    if (v32 == CFSTR("retryAuthCode")
      || (v33 = v32,
          v34 = objc_msgSend(CFSTR("retryAuthCode"), "isEqualToString:", v32),
          v33,
          (v34 & 1) != 0))
    {
      v4 = 11;
      goto LABEL_39;
    }
    v35 = v33;
    if (v35 == CFSTR("livenessStepUp")
      || (v36 = v35, v37 = objc_msgSend(CFSTR("livenessStepUp"), "isEqualToString:", v35), v36, v37))
    {
      v4 = 12;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_4:
  v4 = 1;
LABEL_39:

  return v4;
}

__CFString *PKIdentityProofingStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xB)
    return 0;
  else
    return off_1E2AC6300[a1 - 1];
}

id PKSearchRegionsFromLocationItems(void *a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v7), "group", (_QWORD)v12);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "regions");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "addObjectsFromArray:", v9);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return v10;
}

id PKSearchTokensOfGroupTypeFromTokens(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v17;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        if (!objc_msgSend(v10, "tokenType", (_QWORD)v16))
        {
          v11 = v10;
          objc_msgSend(v11, "group");
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "type");

          if (v13 == a1)
            objc_msgSend(v4, "addObject:", v11);

        }
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v7);
  }

  v14 = (void *)objc_msgSend(v4, "copy");
  return v14;
}

id PKSearchTokensOfTypeFromTokens(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v14 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (objc_msgSend(v10, "tokenType", (_QWORD)v13) == a1)
          objc_msgSend(v4, "addObject:", v10);
      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v7);
  }

  v11 = (void *)objc_msgSend(v4, "copy");
  return v11;
}

const __CFString *PKPaymentTransactionArchiveLocationTypeToString()
{
  return CFSTR("cloudStore");
}

uint64_t PKEnagementActionTypeForActionURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  void *v10;
  unint64_t v11;
  void *v12;
  __CFString *v13;
  __CFString *v14;
  int v15;
  void *v16;
  __CFString *v17;
  __CFString *v18;
  int v19;
  void *v20;
  void *v21;

  v1 = a1;
  if (v1)
  {
    v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3998]), "initWithURL:resolvingAgainstBaseURL:", v1, 1);
    v3 = v2;
    if (!v2)
    {
      v8 = 0;
LABEL_32:

      goto LABEL_33;
    }
    objc_msgSend(v2, "host");
    v4 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    v5 = CFSTR("wallet.apple.com");
    if (v4 == v5)
    {

    }
    else
    {
      v6 = v5;
      if (v4)
        v7 = v5 == 0;
      else
        v7 = 1;
      if (v7)
      {

        goto LABEL_30;
      }
      v9 = -[__CFString isEqualToString:](v4, "isEqualToString:", v5);

      if (!v9)
        goto LABEL_30;
    }
    objc_msgSend(v1, "pathComponents");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "count");

    if (v11 < 3)
      goto LABEL_26;
    objc_msgSend(v1, "pathComponents");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "objectAtIndexedSubscript:", 1);
    v13 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    v14 = v13;
    if (v13 == CFSTR("dashboard"))
      v15 = 0;
    else
      v15 = v13 ? -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("dashboard")) ^ 1 : 1;

    objc_msgSend(v1, "pathComponents");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "objectAtIndexedSubscript:", 2);
    v17 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
    v18 = v17;
    if (v17 == CFSTR("action"))
      v19 = 0;
    else
      v19 = v17 ? -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("action")) ^ 1 : 1;

    if (((v15 | v19) & 1) != 0)
    {
LABEL_26:
      v8 = 2;
      goto LABEL_32;
    }
    objc_msgSend(v3, "queryItems");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "firstObject");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "value");
    v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

    if (v4)
    {
      if ((-[__CFString isEqual:](v4, "isEqual:", CFSTR("pass-details")) & 1) != 0)
      {
        v8 = 1;
      }
      else if ((-[__CFString isEqual:](v4, "isEqual:", CFSTR("card-numbers")) & 1) != 0)
      {
        v8 = 3;
      }
      else if ((-[__CFString isEqual:](v4, "isEqual:", CFSTR("set-default-wallet")) & 1) != 0)
      {
        v8 = 4;
      }
      else if ((-[__CFString isEqual:](v4, "isEqual:", CFSTR("set-default-apple")) & 1) != 0)
      {
        v8 = 5;
      }
      else if (-[__CFString isEqual:](v4, "isEqual:", CFSTR("set-default-wallet-and-apple")))
      {
        v8 = 6;
      }
      else
      {
        v8 = 2;
      }
      goto LABEL_31;
    }
LABEL_30:
    v8 = 2;
LABEL_31:

    goto LABEL_32;
  }
  v8 = 0;
LABEL_33:

  return v8;
}

id PKEventStore()
{
  if (qword_1EE1C55B8 != -1)
    dispatch_once(&qword_1EE1C55B8, &__block_literal_global_42);
  return (id)_MergedGlobals_1_0;
}

id PKExistingCalendarEventsForPass(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = 0;
  if (objc_msgSend(MEMORY[0x1E0CAA078], "authorizationStatusForEntityType:", 0) == 3)
  {
    v6 = (void *)MEMORY[0x1E0CB3880];
    objc_msgSend(v3, "passURL");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "predicateWithFormat:", CFSTR("URL = [c] %@"), v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    v9 = (void *)MEMORY[0x1E0CB3880];
    objc_msgSend(v3, "eventName");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "predicateWithFormat:", CFSTR("title = [c] %@"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "relevantDates");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    +[PKPassRelevantDate findDateFromDates:option:](PKPassRelevantDate, "findDateFromDates:option:", v12, 0);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v3, "relevantDates");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    +[PKPassRelevantDate findDateFromDates:option:](PKPassRelevantDate, "findDateFromDates:option:", v14, 3);
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    v5 = 0;
    if (v13 && v15)
    {
      objc_msgSend(v4, "predicateForEventsWithStartDate:endDate:calendars:", v13, v15, 0);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "eventsMatchingPredicate:", v22);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_alloc(MEMORY[0x1E0CB3528]);
      v23[0] = v8;
      v23[1] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 2);
      v18 = v8;
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = (void *)objc_msgSend(v17, "initWithType:subpredicates:", 2, v19);
      objc_msgSend(v16, "filteredArrayUsingPredicate:", v20);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      v8 = v18;
    }

  }
  return v5;
}

uint64_t PKIsAuthorizedForEvents()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;

  v0 = objc_msgSend(MEMORY[0x1E0CAA078], "authorizationStatusForEntityType:", 0);
  result = 0;
  v2 = v0 - 1;
  if (v2 <= 3)
    return qword_190453E98[v2];
  return result;
}

id PKGenerateCalendarEventsForPass(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t i;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id obj;
  uint64_t v28;
  id v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v29 = a2;
  objc_msgSend(v3, "relevantDates");
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue();
  v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  v4 = 0;
  if (v30)
  {
    v28 = *(_QWORD *)v32;
    do
    {
      for (i = 0; i != v30; ++i)
      {
        if (*(_QWORD *)v32 != v28)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
        if (!v4)
          v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(MEMORY[0x1E0CAA060], "eventWithEventStore:", v29);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "defaultCalendarForNewEvents");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setCalendar:", v8);

        objc_msgSend(v3, "eventName");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setTitle:", v9);

        objc_msgSend(v6, "effectiveStartDate");
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "effectiveEndDate");
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = (void *)v11;
        if (v10)
          v13 = v11 == 0;
        else
          v13 = 1;
        if (v13)
        {
          objc_msgSend(v6, "date");
          v14 = objc_claimAutoreleasedReturnValue();

          objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v15, "dateByAddingUnit:value:toDate:options:", 32, 2, v14, 0);
          v16 = objc_claimAutoreleasedReturnValue();

          v12 = (void *)v16;
          v10 = (void *)v14;
        }
        objc_msgSend(v7, "setStartDate:", v10);
        objc_msgSend(v7, "setEndDate:", v12);
        objc_msgSend(v3, "passURL");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v7, "setURL:", v17);

        objc_msgSend(v3, "eventLocation");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "CLLocation");
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        if (v19)
        {
          v20 = objc_alloc(_MergedGlobals_172());
          v21 = objc_alloc((Class)off_1ECF21B28());
          objc_msgSend(v19, "coordinate");
          v22 = (void *)objc_msgSend(v21, "initWithCoordinate:");
          v23 = (void *)objc_msgSend(v20, "initWithPlacemark:", v22);

          objc_msgSend(MEMORY[0x1E0CAA158], "locationWithMapItem:", v23);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v3, "stringForSemanticKey:", CFSTR("venueName"));
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          if (v25)
            objc_msgSend(v24, "setTitle:", v25);
          objc_msgSend(v7, "setStructuredLocation:", v24);

        }
        objc_msgSend(v4, "safelyAddObject:", v7);

      }
      v30 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    }
    while (v30);
  }

  return v4;
}

uint64_t PKRemoveCalendarEventsForPass(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CAA078]);
  PKExistingCalendarEventsForPass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && objc_msgSend(v3, "count"))
  {
    v7 = 0;
    v5 = PKCommitCalendarEvents(v1, v4, 1, v2, &v7);
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

uint64_t PKCommitCalendarEvents(void *a1, void *a2, uint64_t a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  unsigned __int8 v21;
  id v22;
  id v24;
  id v25;
  id v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v12 = v10;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v13)
  {
    v14 = v13;
    v24 = v9;
    v15 = 0;
    v16 = 0;
    v17 = *(_QWORD *)v29;
LABEL_3:
    v18 = 0;
    while (1)
    {
      if (*(_QWORD *)v29 != v17)
        objc_enumerationMutation(v12);
      v19 = *(_QWORD *)(*((_QWORD *)&v28 + 1) + 8 * v18);
      if (a3 == 1)
      {
        v26 = v15;
        v20 = &v26;
        v21 = objc_msgSend(v11, "removeEvent:span:commit:error:", v19, 1, 0, &v26);
      }
      else
      {
        if (a3)
          goto LABEL_11;
        v27 = v15;
        v20 = &v27;
        v21 = objc_msgSend(v11, "saveEvent:span:commit:error:", v19, 1, 0, &v27);
      }
      v16 = v21;
      v22 = *v20;

      v15 = v22;
LABEL_11:
      if ((v16 & 1) == 0 && v15)
      {
        v9 = v24;
        goto LABEL_19;
      }
      if (v14 == ++v18)
      {
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        if (v14)
          goto LABEL_3;

        v9 = v24;
        if ((v16 & (v15 == 0)) == 1)
        {
          v25 = 0;
          v16 = objc_msgSend(v11, "commit:", &v25);
          v15 = v25;
        }
        goto LABEL_20;
      }
    }
  }
  v15 = 0;
LABEL_19:

  v16 = 0;
LABEL_20:
  if (a5)
    *a5 = objc_retainAutorelease(v15);

  return v16 & 1;
}

uint64_t PKUpdateCalendarEventsForPass(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  BOOL v7;
  id v8;
  void *v9;
  void *v10;
  id v12;
  id v13;

  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CAA078]);
  PKExistingCalendarEventsForPass(v1, v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3 && objc_msgSend(v3, "count"))
  {
    v13 = 0;
    v5 = PKCommitCalendarEvents(v1, v4, 1, v2, &v13);
    v6 = v13;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      PKGenerateCalendarEventsForPass(v1, v2);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v9;
      if (v9 && objc_msgSend(v9, "count"))
      {
        v12 = 0;
        v5 = PKCommitCalendarEvents(v1, v10, 0, v2, &v12);
        v8 = v12;
      }
      else
      {
        v8 = 0;
        v5 = 1;
      }

    }
    else
    {
      v8 = v6;
    }

  }
  else
  {
    v5 = 1;
  }

  return v5;
}

id PKNextCalendarEventFromEvents(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
LABEL_3:
    v7 = 0;
    while (1)
    {
      if (*(_QWORD *)v14 != v6)
        objc_enumerationMutation(v3);
      v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v7);
      objc_msgSend(v8, "startDate", (_QWORD)v13);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v2, "compare:", v9);

      if (v10 == -1)
        break;
      if (v5 == ++v7)
      {
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v5)
          goto LABEL_3;
        goto LABEL_9;
      }
    }
    v11 = v8;

    if (v11)
      goto LABEL_12;
  }
  else
  {
LABEL_9:

  }
  objc_msgSend(v3, "lastObject", (_QWORD)v13);
  v11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_12:

  return v11;
}

void PKRequestEventsAuthorization(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __PKRequestEventsAuthorization_block_invoke;
  v5[3] = &unk_1E2ABE148;
  v6 = v3;
  v4 = v3;
  objc_msgSend(a1, "requestFullAccessToEventsWithCompletion:", v5);

}

Class initMKMapItem()
{
  Class result;

  if (qword_1EE1C55C8 != -1)
    dispatch_once(&qword_1EE1C55C8, &__block_literal_global_23);
  result = objc_getClass("MKMapItem");
  qword_1EE1C55C0 = (uint64_t)result;
  _MergedGlobals_172 = (uint64_t (*)())MKMapItemFunction;
  return result;
}

id MKMapItemFunction()
{
  return (id)qword_1EE1C55C0;
}

Class initMKPlacemark()
{
  Class result;

  if (qword_1EE1C55C8 != -1)
    dispatch_once(&qword_1EE1C55C8, &__block_literal_global_23);
  result = objc_getClass("MKPlacemark");
  qword_1EE1C55D0 = (uint64_t)result;
  off_1ECF21B28 = (uint64_t (*)())MKPlacemarkFunction;
  return result;
}

id MKPlacemarkFunction()
{
  return (id)qword_1EE1C55D0;
}

uint64_t PKProtobufPeerPaymentMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  unint64_t v7;
  int *v8;
  unint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  int v18;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  PKProtobufNSDecimalNumber *v55;
  uint64_t v56;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = 0x1ECF1A000uLL;
  v8 = (int *)MEMORY[0x1E0D82BB8];
  v9 = 0x1ECF1A000uLL;
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *v3;
      v14 = *(_QWORD *)(a2 + v13);
      v15 = v14 + 1;
      if (v14 == -1 || v15 > *(_QWORD *)(a2 + *v4))
        break;
      v16 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v14);
      *(_QWORD *)(a2 + v13) = v15;
      v12 |= (unint64_t)(v16 & 0x7F) << v10;
      if ((v16 & 0x80) == 0)
        goto LABEL_12;
      v10 += 7;
      v17 = v11++ >= 9;
      if (v17)
      {
        v12 = 0;
        v18 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v18 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v12 = 0;
LABEL_14:
    if (v18 || (v12 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v12 >> 3))
    {
      case 1u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + *v4))
            break;
          v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v24);
          *(_QWORD *)(a2 + v23) = v25;
          v22 |= (unint64_t)(v26 & 0x7F) << v20;
          if ((v26 & 0x80) == 0)
            goto LABEL_72;
          v20 += 7;
          v17 = v21++ >= 9;
          if (v17)
          {
            LODWORD(v22) = 0;
            goto LABEL_74;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_74:
        v56 = *(int *)(v7 + 2960);
        goto LABEL_87;
      case 2u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = *(int *)(v9 + 2884);
        goto LABEL_65;
      case 3u:
        v30 = 0;
        v31 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 152) |= 8u;
        while (2)
        {
          v32 = *v3;
          v33 = *(_QWORD *)(a2 + v32);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v33);
            *(_QWORD *)(a2 + v32) = v34;
            v22 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v17 = v31++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_78:
        v56 = 144;
        goto LABEL_87;
      case 4u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 24;
        goto LABEL_65;
      case 5u:
        v36 = 0;
        v37 = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 152) |= 1u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v40);
            *(_QWORD *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              v17 = v37++ >= 9;
              if (v17)
              {
                v38 = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v38 = 0;
LABEL_82:
        *(_QWORD *)(a1 + 8) = -(v38 & 1) ^ (v38 >> 1);
        goto LABEL_66;
      case 6u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 120;
        goto LABEL_65;
      case 7u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 64;
        goto LABEL_65;
      case 8u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 112;
        goto LABEL_65;
      case 9u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 56;
        goto LABEL_65;
      case 0xAu:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 136;
        goto LABEL_65;
      case 0xBu:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 48;
        goto LABEL_65;
      case 0xCu:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 104;
        goto LABEL_65;
      case 0xDu:
        v43 = 0;
        v44 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 152) |= 4u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + *v8) + v46);
            *(_QWORD *)(a2 + v45) = v47;
            v22 |= (unint64_t)(v48 & 0x7F) << v43;
            if (v48 < 0)
            {
              v43 += 7;
              v17 = v44++ >= 9;
              if (v17)
              {
                LODWORD(v22) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_86:
        v56 = 128;
LABEL_87:
        *(_DWORD *)(a1 + v56) = v22;
        goto LABEL_66;
      case 0xEu:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 96;
        goto LABEL_65;
      case 0xFu:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 80;
        goto LABEL_65;
      case 0x10u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 72;
        goto LABEL_65;
      case 0x11u:
        *(_BYTE *)(a1 + 152) |= 2u;
        v49 = *v3;
        v50 = *(_QWORD *)(a2 + v49);
        if (v50 <= 0xFFFFFFFFFFFFFFF7 && v50 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v51 = *(_QWORD *)(*(_QWORD *)(a2 + *v8) + v50);
          *(_QWORD *)(a2 + v49) = v50 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v51 = 0;
        }
        *(_QWORD *)(a1 + 16) = v51;
        goto LABEL_66;
      case 0x12u:
        PBReaderReadString();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = 88;
LABEL_65:
        v52 = *(void **)(a1 + v29);
        *(_QWORD *)(a1 + v29) = v28;

        goto LABEL_66;
      case 0x13u:
        v53 = v9;
        v54 = v7;
        v55 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 32), v55);
        if (PBReaderPlaceMark() && (PKProtobufNSDecimalNumberReadFrom((uint64_t)v55, a2) & 1) != 0)
        {
          PBReaderRecallMark();

          v7 = v54;
          v9 = v53;
LABEL_66:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_66;
    }
  }
}

const __CFString *PKAccountReportTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AC6590[a1];
}

void PKPayLaterValidateConfiguration(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  PKInAppPaymentService *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint8_t buf[4];
  id v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  PKLogFacilityTypeGetObject(6uLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v11 = v3;
    _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Validating PKPayLaterView eligibilty for configuration %@", buf, 0xCu);
  }

  v6 = objc_alloc_init(PKInAppPaymentService);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __PKPayLaterValidateConfiguration_block_invoke;
  v8[3] = &unk_1E2AC65B0;
  v9 = v4;
  v7 = v4;
  -[PKInAppPaymentService validatePayLaterMerchandisingConfiguration:type:completion:](v6, "validatePayLaterMerchandisingConfiguration:type:completion:", v3, 1, v8);

}

void PKPayLaterValidateAmount(NSDecimalNumber *amount, NSString *currencyCode, void *completion)
{
  void *v5;
  NSString *v6;
  NSDecimalNumber *v7;
  PKPayLaterMerchandisingConfiguration *v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v5 = completion;
  v6 = currencyCode;
  v7 = amount;
  v8 = objc_alloc_init(PKPayLaterMerchandisingConfiguration);
  -[PKPayLaterMerchandisingConfiguration setAmount:](v8, "setAmount:", v7);

  -[PKPayLaterMerchandisingConfiguration setCurrency:](v8, "setCurrency:", v6);
  -[PKPayLaterMerchandisingConfiguration setEnvironmentType:](v8, "setEnvironmentType:", 0);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __PKPayLaterValidateAmount_block_invoke;
  v10[3] = &unk_1E2AC65B0;
  v11 = v5;
  v9 = v5;
  PKPayLaterValidateConfiguration(v8, v10);

}

__CFString *PKPayLaterEnvironmentTypeToString(__CFString *result)
{
  if ((unint64_t)result < 4)
    return off_1E2AC6628[(_QWORD)result];
  __break(1u);
  return result;
}

uint64_t PKPayLaterEnvironmentTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  char v12;
  __CFString *v13;
  __CFString *v14;
  int v15;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("production") && v1 != 0)
  {
    v4 = objc_msgSend(CFSTR("production"), "isEqualToString:", v1);

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("develop")
        || (v8 = v7, v9 = objc_msgSend(CFSTR("develop"), "isEqualToString:", v7), v8, (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("QA")
        || (v11 = v10, v12 = objc_msgSend(CFSTR("QA"), "isEqualToString:", v10), v11, (v12 & 1) != 0))
      {
        v5 = 2;
        goto LABEL_7;
      }
      v13 = v11;
      if (v13 == CFSTR("UAT")
        || (v14 = v13, v15 = objc_msgSend(CFSTR("UAT"), "isEqualToString:", v13), v14, v15))
      {
        v5 = 3;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

__CFString *PKPayLaterThemeToString(__CFString *result)
{
  if ((unint64_t)result < 3)
    return off_1E2AC6648[(_QWORD)result];
  __break(1u);
  return result;
}

uint64_t PKPayLaterThemeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  int v12;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("auto") && v1 != 0)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("auto"));

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("light")
        || (v8 = v7,
            v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("light")),
            v8,
            (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("dark")
        || (v11 = v10,
            v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("dark")),
            v11,
            v12))
      {
        v5 = 2;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

__CFString *PKPayLaterDisplayStyleToString(__CFString *result)
{
  if ((unint64_t)result < 4)
    return off_1E2AC6660[(_QWORD)result];
  __break(1u);
  return result;
}

uint64_t PKPayLaterDisplayStyleFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  char v12;
  __CFString *v13;
  __CFString *v14;
  int v15;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("plain") && v1 != 0)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("plain"));

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("badge")
        || (v8 = v7,
            v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("badge")),
            v8,
            (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("checkout")
        || (v11 = v10,
            v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("checkout")),
            v11,
            (v12 & 1) != 0))
      {
        v5 = 2;
        goto LABEL_7;
      }
      v13 = v11;
      if (v13 == CFSTR("price")
        || (v14 = v13,
            v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("price")),
            v14,
            v15))
      {
        v5 = 3;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

const __CFString *PKPayLaterActionToString(const __CFString *result)
{
  if (!result)
    return CFSTR("learn-more");
  if (result == (const __CFString *)1)
    return CFSTR("calculator");
  __break(1u);
  return result;
}

BOOL PKPayLaterActionFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  BOOL v3;
  char v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  _BOOL8 v8;

  v1 = a1;
  v2 = v1;
  v3 = v1 == CFSTR("learn-more") || v1 == 0;
  v8 = 0;
  if (!v3)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("learn-more"));

    if ((v4 & 1) == 0)
    {
      v5 = v2;
      if (v5 == CFSTR("calculator")
        || (v6 = v5,
            v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("calculator")),
            v6,
            v7))
      {
        v8 = 1;
      }
    }
  }

  return v8;
}

__CFString *PKPayLaterMerchandisingConfigurationPropertyToString(uint64_t a1)
{
  __CFString *result;
  const __CFString *v3;
  id v4;
  int v5;
  uint64_t v6;
  void *v7;
  id v8;
  NSObject *v9;
  void *v10;
  id v11;
  uint8_t buf[4];
  uint64_t v13;
  __int16 v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1 > 15)
  {
    if (a1 <= 63)
    {
      if (a1 == 16)
        return CFSTR("type");
      if (a1 == 32)
        return CFSTR("theme");
    }
    else
    {
      switch(a1)
      {
        case 64:
          return CFSTR("modal-type");
        case 128:
          return CFSTR("environment-type");
        case 255:
          return (__CFString *)0;
      }
    }
LABEL_19:
    v4 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v5 = 1;
    v6 = 1;
    while (1)
    {
      if ((v6 & a1) != 0)
      {
        if (v6 <= 15)
        {
          v3 = CFSTR("none");
          switch(v6)
          {
            case 0:
              goto LABEL_36;
            case 1:
              v3 = CFSTR("amount");
              goto LABEL_36;
            case 2:
              v3 = CFSTR("currency-code");
              goto LABEL_36;
            case 4:
              v3 = CFSTR("country-code");
              goto LABEL_36;
            case 8:
              v3 = CFSTR("locale");
              goto LABEL_36;
            default:
              goto LABEL_37;
          }
          goto LABEL_37;
        }
        if (v6 > 63)
        {
          if (v6 == 64)
          {
            v3 = CFSTR("modal-type");
            goto LABEL_36;
          }
          if (v6 == 128)
          {
            v3 = CFSTR("environment-type");
            goto LABEL_36;
          }
        }
        else
        {
          if (v6 == 16)
          {
            v3 = CFSTR("type");
            goto LABEL_36;
          }
          if (v6 == 32)
          {
            v3 = CFSTR("theme");
LABEL_36:
            objc_msgSend(v4, "addObject:", v3);
          }
        }
      }
LABEL_37:
      v6 = 1 << v5++;
      if (v6 > (unint64_t)a1)
      {
        if (objc_msgSend(v4, "count", v3))
        {
          v11 = 0;
          objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v4, 3, &v11);
          v7 = (void *)objc_claimAutoreleasedReturnValue();
          v8 = v11;
          if (v8)
          {
            PKLogFacilityTypeGetObject(6uLL);
            v9 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134218242;
              v13 = a1;
              v14 = 2112;
              v15 = v8;
              _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Error getting property description %ld, jsonError: %@", buf, 0x16u);
            }

            v10 = 0;
          }
          else
          {
            v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v7, 4);
          }

        }
        else
        {
          v10 = 0;
        }

        return (__CFString *)v10;
      }
    }
  }
  switch(a1)
  {
    case 0:
      result = CFSTR("none");
      break;
    case 1:
      result = CFSTR("amount");
      break;
    case 2:
      result = CFSTR("currency-code");
      break;
    case 4:
      result = CFSTR("country-code");
      break;
    case 8:
      result = CFSTR("locale");
      break;
    default:
      goto LABEL_19;
  }
  return result;
}

void sub_18FFB90F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFB9C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

CGContext *PKCreateBitmapContext(vImagePixelCount a1, vImagePixelCount a2, int a3)
{
  __int16 v3;
  CGColorSpace *v6;
  CGColorSpace *v7;
  size_t NumberOfComponents;
  unint64_t v9;
  int v10;
  vImage_Error v11;
  vImagePixelCount height;
  size_t rowBytes;
  NSObject *v14;
  const char *v15;
  vImagePixelCount v16;
  uint64_t v17;
  NSObject *v18;
  uint32_t v19;
  CGContext *v20;
  vm_size_t v21;
  unint64_t v22;
  id v23;
  NSObject *v24;
  vImage_Buffer v26;
  CGColorSpaceRef v27[2];
  int v28;
  uint64_t v29;
  _BYTE v30[12];
  uint8_t buf[4];
  vImagePixelCount v32;
  __int16 v33;
  size_t v34;
  uint64_t v35;

  v3 = a3;
  v35 = *MEMORY[0x1E0C80C00];
  if ((a3 & 0x10000) != 0)
    v6 = (CGColorSpace *)PKColorSpaceStandardLinearRGB();
  else
    v6 = (CGColorSpace *)PKColorSpaceStandardRGB();
  v7 = v6;
  if (v6)
  {
    NumberOfComponents = CGColorSpaceGetNumberOfComponents(v6);
    if (NumberOfComponents > 0xFE)
      goto LABEL_38;
    v9 = (8 * (_WORD)NumberOfComponents + 8) & 0x7F8;
    if (v9 >= 0x100)
      goto LABEL_38;
  }
  else
  {
    LOBYTE(v9) = 8;
  }
  *(_QWORD *)&v30[4] = 0;
  if ((v3 & 0x100) != 0)
    v10 = 8198;
  else
    v10 = 8194;
  LODWORD(v27[0]) = 8;
  HIDWORD(v27[0]) = v9 & 0xF8;
  v27[1] = v7;
  v28 = v10;
  v29 = 0;
  *(_QWORD *)v30 = 0;
  memset(&v26, 0, sizeof(v26));
  v11 = vImageBuffer_Init(&v26, a2, a1, HIDWORD(v27[0]), 0x200u);
  if (v11 < 0 || v26.data)
LABEL_38:
    __break(1u);
  height = v26.height;
  rowBytes = v26.rowBytes;
  if (!is_mul_ok(v26.height, v26.rowBytes))
  {
    PKLogFacilityTypeGetObject(0);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v32 = height;
      v33 = 2048;
      v34 = rowBytes;
      v15 = "PKBitmapContext: image length computation overflowed - %zu x %zu.";
LABEL_22:
      v18 = v14;
      v19 = 22;
LABEL_23:
      _os_log_impl(&dword_18FC92000, v18, OS_LOG_TYPE_DEFAULT, v15, buf, v19);
      goto LABEL_24;
    }
    goto LABEL_24;
  }
  v16 = v26.height * v26.rowBytes;
  if (!(v26.height * v26.rowBytes))
    return 0;
  v17 = *MEMORY[0x1E0C85AD8] - 1;
  if (!__CFADD__(v16, v17))
  {
    v21 = (v16 + v17) & -*MEMORY[0x1E0C85AD8];
    if (v16 > v21)
      goto LABEL_38;
    v22 = v11;
    if (vm_allocate(*MEMORY[0x1E0C83DA0], (vm_address_t *)&v26, v21, 1))
    {
      PKLogFacilityTypeGetObject(0);
      v14 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        goto LABEL_24;
      *(_DWORD *)buf = 134217984;
      v32 = v21;
      v15 = "PKBitmapContext: could not create allocation of size %zu.";
      v18 = v14;
      v19 = 12;
      goto LABEL_23;
    }
    if (v26.data)
    {
      if (v22 && os_variant_has_internal_ui() && (unint64_t)v26.data % v22)
        goto LABEL_38;
      v23 = objc_alloc(MEMORY[0x1E0C99D50]);
      v24 = objc_msgSend(v23, "initWithBytesNoCopy:length:deallocator:", v26.data, v21, &__block_literal_global_93);
      if (v24)
      {
        v14 = v24;
        v20 = _PKCreateBitmapContext(v27, (uint64_t)&v26, v24, (char)v3);
        goto LABEL_25;
      }
    }
    return 0;
  }
  PKLogFacilityTypeGetObject(0);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    v32 = v16;
    v33 = 2048;
    v34 = v17;
    v15 = "PKBitmapContext: buffer length computation overflowed - %zu + %zu.";
    goto LABEL_22;
  }
LABEL_24:
  v20 = 0;
LABEL_25:

  return v20;
}

CGContext *PKCreateBitmapContext(CGSize a1, double a2, int a3)
{
  return _CreateBitmapContext(a3, 1, 0, a1.width, a1.height, a2);
}

CGContext *PKCreateBitmapContext(CGSize a1, double a2, int a3, int a4)
{
  return _CreateBitmapContext(a3, a4, 0, a1.width, a1.height, a2);
}

CGContext *PKCreateLinearBitmapContext(CGSize a1, double a2, int a3)
{
  return _CreateBitmapContext(a3, 1, 1, a1.width, a1.height, a2);
}

CGContext *PKCreateLinearBitmapContext(CGSize a1, double a2, int a3, int a4)
{
  return _CreateBitmapContext(a3, a4, 1, a1.width, a1.height, a2);
}

void sub_18FFBC1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKBillPaymentSuggestedAmountCategoryFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("MinimumRemainingPayment")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LastPayment")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LastPaymentPlusMerchantCategory1")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("LastPaymentPlusMerchantCategory2")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("NewPurchases")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInNineMonths")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInEightMonths")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInSevenMonths")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInSixMonths")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInFiveMonths")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInFourMonths")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInThreeMonths")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInTwoMonths")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInNineMonthsFromUtilization")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInSixMonthsFromUtilization")) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInThreeMonthsFromUtilization")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInPlanCompletion")) & 1) != 0)
  {
    v2 = 17;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RemainingStatementBalance")) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CurrentBalance")) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneThirdOfCurrentBalance")) & 1) != 0)
  {
    v2 = 20;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneSixthOfCurrentBalance")) & 1) != 0)
  {
    v2 = 21;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneNinthOfCurrentBalance")) & 1) != 0)
  {
    v2 = 22;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInThreeMonthsForTransactor")) & 1) != 0)
  {
    v2 = 23;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInSixMonthsForTransactor")) & 1) != 0)
  {
    v2 = 24;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PayInNineMonthsForTransactor")) & 1) != 0)
  {
    v2 = 25;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneThirdOfStatementBalance")) & 1) != 0)
  {
    v2 = 26;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneSixthOfStatementBalance")) & 1) != 0)
  {
    v2 = 27;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("OneNinthOfStatementBalance")) & 1) != 0)
  {
    v2 = 28;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("AverageOfMinimumAndStatetmentBalance")) & 1) != 0)
  {
    v2 = 29;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CardBalance")) & 1) != 0)
  {
    v2 = 30;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("CombinedBalance")) & 1) != 0)
  {
    v2 = 31;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("VeryExpensivePurchase")) & 1) != 0)
  {
    v2 = 32;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RecurringExpenses")) & 1) != 0)
  {
    v2 = 33;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("TopMerchant")) & 1) != 0)
  {
    v2 = 34;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("RecentTrip")) & 1) != 0)
  {
    v2 = 35;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("PeakSpendDay")))
  {
    v2 = 36;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKBillPaymentSuggestedAmountCategoryToString(unint64_t a1)
{
  if (a1 > 0x24)
    return CFSTR("unknown");
  else
    return off_1E2AC6760[a1];
}

__CFString *PKBillPaymentDifferentialPrivacyFeatureToString(unint64_t a1)
{
  if (a1 < 0xF)
    return off_1E2AC6888[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lu"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

const __CFString *PKBillPaymentDifferentialPrivacyButtonActionToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("0");
  else
    return off_1E2AC6900[a1];
}

uint64_t PKBillPaymentDifferentialPrivacyButtonActiontoPaymentRingInstrumentation(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return qword_190453F20[a1];
}

uint64_t PKBillPaymentCategoryToDifferentialFeature(unint64_t a1)
{
  if (a1 > 0x1D)
    return 0;
  else
    return qword_190453F40[a1];
}

uint64_t PKBillPaymentSuggestedAmountCategoryToPaymentRingInstrumentation(unint64_t a1)
{
  if (a1 > 0x24)
    return 14;
  else
    return qword_190454030[a1];
}

void sub_18FFC0A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FFC1414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FFCA00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 176), 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_18FFCF08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FFCF338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FFCF5D4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFCF890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPaymentTransactionTransitSubtypeForTransactionDetailString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_55;
  if ((objc_msgSend(v1, "isEqual:", CFSTR("Transit")) & 1) == 0)
  {
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitMetro")) & 1) != 0)
    {
      v3 = 2;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitMetroUpgrade")) & 1) != 0)
    {
      v3 = 1026;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitLightRail")) & 1) != 0)
    {
      v3 = 7;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitBus")) & 1) != 0)
    {
      v3 = 3;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitTrain")) & 1) != 0)
    {
      v3 = 4;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitTrainMaglev")) & 1) != 0)
    {
      v3 = 258;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitTrainShinkansen")) & 1) != 0)
    {
      v3 = 257;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitOther")) & 1) != 0)
    {
      v3 = 5;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitOtherTaxi")) & 1) != 0)
    {
      v3 = 259;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitOtherFerry")) & 1) != 0)
    {
      v3 = 260;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitOtherBike")) & 1) != 0)
    {
      v3 = 261;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitSpecial")) & 1) != 0)
    {
      v3 = 6;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitOtherCableCar")) & 1) != 0)
    {
      v3 = 8;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TransitSpecialGreenCarUsed")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("TransitSpecialGreenCarSeated")) & 1) != 0)
    {
      v3 = 1025;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("Purchase")) & 1) != 0)
      goto LABEL_42;
    if ((objc_msgSend(v2, "isEqual:", CFSTR("Renewal")) & 1) != 0)
    {
      v3 = 518;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRetail")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRetailMerchant")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRetailGasStation")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseAdmission")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseAdmissionParking")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseAdmissionGarden")) & 1) != 0)
    {
LABEL_42:
      v3 = 515;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRefund")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRefundReturn")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("PurchaseRefundCancellation")) & 1) != 0)
    {
      v3 = 514;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("TopUp")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("TopUpContactless")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("TopUpAuto")) & 1) != 0
      || (objc_msgSend(v2, "isEqual:", CFSTR("TopUpServer")) & 1) != 0)
    {
      v3 = 513;
      goto LABEL_56;
    }
    if ((objc_msgSend(v2, "isEqual:", CFSTR("CardRead")) & 1) != 0)
    {
      v3 = 517;
      goto LABEL_56;
    }
    objc_msgSend(v2, "isEqual:", CFSTR("Unknown"));
LABEL_55:
    v3 = 0;
    goto LABEL_56;
  }
  v3 = 1;
LABEL_56:

  return v3;
}

id PKDateFromDateComponents(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  if ((objc_msgSend(v1, "isValidDate") & 1) == 0)
  {
    objc_msgSend(v1, "calendar");
    v2 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v2)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "calendarWithIdentifier:", *MEMORY[0x1E0C996C8]);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setCalendar:", v3);

    }
    objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "setTimeZone:", v4);

  }
  objc_msgSend(v1, "date");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id PKEnrouteTransitTypesForTransactionsInProgress(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0C99E60];
    v2 = a1;
    v3 = (void *)objc_msgSend([v1 alloc], "initWithArray:", v2);

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

uint64_t PKDeviceEnvironmentClientToString(uint64_t a1, void **a2)
{
  void *v2;
  const __CFString *v3;
  char v4;

  if (a2)
  {
    if (a1 == 1)
    {
      v2 = *a2;
      v3 = CFSTR("accountManager");
    }
    else
    {
      if (a1)
      {
        objc_msgSend(MEMORY[0x1E0C99DA0], "raise:format:", *MEMORY[0x1E0C99768], CFSTR("pass valid PDDeviceEnvironmentClient value"));
        return v4 & 1;
      }
      v2 = *a2;
      v3 = CFSTR("discovery");
    }
    *a2 = (void *)v3;

    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

BOOL PKSecureElementPassesAvailable()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("secure-element-passes-available"), CFSTR("com.apple.passd.class-d"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

BOOL PKPrearmAvailable()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("pre-arm-available"), CFSTR("com.apple.passd.class-d"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

BOOL PKFieldDetectAvailable()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  _BOOL8 v3;

  v0 = (const __CFBoolean *)CFPreferencesCopyValue(CFSTR("field-detect-available"), CFSTR("com.apple.passd.class-d"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

const __CFString *PKPassTileStateStyleToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("twoLineDefault");
  else
    return off_1E2AC7750[a1 - 1];
}

uint64_t PKPassTileStateStyleFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("twoLineDefault")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("twoLineDefault")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 0;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("twoLineCompact")
      || (v6 = v5, v2)
      && (v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("twoLineCompact")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 1;
    }
    else
    {
      v8 = v6;
      if (v8 == CFSTR("threeLineDefault")
        || (v9 = v8, v2)
        && (v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("threeLineDefault")),
            v9,
            v9,
            (v10 & 1) != 0))
      {
        v4 = 2;
      }
      else
      {
        v11 = v9;
        if (v11 == CFSTR("threeLineCompact")
          || (v12 = v11, v2)
          && (v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("threeLineCompact")),
              v12,
              v12,
              (v13 & 1) != 0))
        {
          v4 = 3;
        }
        else
        {
          v14 = v12;
          if (v14 == CFSTR("dynamicDefault")
            || (v15 = v14, v2)
            && (v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("dynamicDefault")),
                v15,
                v15,
                (v16 & 1) != 0))
          {
            v4 = 4;
          }
          else
          {
            v17 = v15;
            v18 = v17;
            if (v17 == CFSTR("dynamicCompact"))
              v4 = 5;
            else
              v4 = 0;
            if (v17 != CFSTR("dynamicCompact") && v2)
            {
              if (-[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("dynamicCompact")))
                v4 = 5;
              else
                v4 = 0;
            }

          }
        }
      }
    }
  }

  return v4;
}

id PKValidatePaymentSetupConfiguration(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  __CFString *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  char v12;
  void *v13;
  void *v14;
  char v15;
  __CFString *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  OSStatus v23;
  OSStatus v24;
  void *v25;
  __CFString *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __CFString *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __CFString *v52;
  uint64_t v54;
  const void *ApplePinned;
  __CFString *v56;
  void *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint8_t buf[4];
  id v63;
  __int16 v64;
  __CFString *v65;
  __int16 v66;
  void *v67;
  _BYTE v68[128];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "signature");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "pk_decodeHexadecimal");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "signedFields");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "count"))
  {
    if (v3)
    {
      objc_msgSend(v1, "originatingURL");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = (void *)MEMORY[0x1E0C99E98];
      objc_msgSend(v4, "firstObject");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "URLWithString:", v7);
      v8 = (__CFString *)objc_claimAutoreleasedReturnValue();

      PKLogFacilityTypeGetObject(6uLL);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v63 = v5;
        v64 = 2112;
        v65 = v8;
        _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "PKValidatePaymentSetup webkitURL: %@ externalURL: %@", buf, 0x16u);
      }

      -[__CFString host](v8, "host");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "host");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = objc_msgSend(v10, "isEqualToString:", v11);

      if ((v12 & 1) != 0)
      {
        -[__CFString path](v8, "path");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "path");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        v15 = objc_msgSend(v13, "isEqualToString:", v14);

        if ((v15 & 1) != 0)
        {
          v56 = v8;
          v57 = v5;
          ApplePinned = (const void *)SecPolicyCreateApplePinned();
          v16 = (__CFString *)objc_alloc_init(MEMORY[0x1E0C99DF0]);
          v58 = 0u;
          v59 = 0u;
          v60 = 0u;
          v61 = 0u;
          v17 = v4;
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
          if (v18)
          {
            v19 = v18;
            v20 = *(_QWORD *)v59;
            do
            {
              for (i = 0; i != v19; ++i)
              {
                if (*(_QWORD *)v59 != v20)
                  objc_enumerationMutation(v17);
                objc_msgSend(*(id *)(*((_QWORD *)&v58 + 1) + 8 * i), "dataUsingEncoding:", 4);
                v22 = (void *)objc_claimAutoreleasedReturnValue();
                -[__CFString appendData:](v16, "appendData:", v22);

              }
              v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v58, v68, 16);
            }
            while (v19);
          }

          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412802;
            v63 = v17;
            v64 = 2112;
            v65 = v16;
            v66 = 2112;
            v67 = v3;
            _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Evaluating payment setup configuration using PROD trust policy.\nSignedFields: %@,\nSignedData: %@,\nSignatureData: %@", buf, 0x20u);
          }

          v23 = SecCMSVerifyCopyDataAndAttributes();
          v24 = v23;
          v8 = v56;
          v5 = v57;
          if (ApplePinned)
          {
            v25 = 0;
            if (!v23)
              goto LABEL_21;
          }
          v26 = (__CFString *)SecCopyErrorMessageString(v23, 0);
          PKLogFacilityTypeGetObject(5uLL);
          v27 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218242;
            v63 = (id)v24;
            v64 = 2112;
            v65 = v26;
            _os_log_impl(&dword_18FC92000, v27, OS_LOG_TYPE_DEFAULT, "Payment setup configuration validation error: %ld message: %@", buf, 0x16u);
          }

          PKSignatureErrorWithReason(CFSTR("Payment setup configuration signature did not validate"), v28, v29, v30, v31, v32, v33, v34, v54);
          v25 = (void *)objc_claimAutoreleasedReturnValue();

          if (ApplePinned)
LABEL_21:
            CFRelease(ApplePinned);

          goto LABEL_37;
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Failed to validate payment setup configuration Invalid URL path", buf, 2u);
        }

        v52 = CFSTR("Invalid URL path");
      }
      else
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Failed to validate payment setup configuration Invalid URL Host", buf, 2u);
        }

        v52 = CFSTR("Invalid URL Host");
      }
      PKValidationErrorWithReason(v52, v45, v46, v47, v48, v49, v50, v51, v54);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_37:

      goto LABEL_38;
    }
    PKLogFacilityTypeGetObject(6uLL);
    v44 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v44, OS_LOG_TYPE_DEFAULT, "Failed to validate payment setup configuration Missing signature data", buf, 2u);
    }

    v43 = CFSTR("Missing signature data");
  }
  else
  {
    PKLogFacilityTypeGetObject(6uLL);
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v35, OS_LOG_TYPE_DEFAULT, "Failed to validate payment setup configuration Missing signedFields", buf, 2u);
    }

    v43 = CFSTR("Missing signedFields");
  }
  PKValidationErrorWithReason(v43, v36, v37, v38, v39, v40, v41, v42, v54);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_38:

  return v25;
}

uint64_t PKValidateIssuerBindingData(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  BOOL v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  double v18;
  double v19;
  PKFidoProfile *v20;
  void *v21;
  NSObject *v22;
  uint64_t v23;
  void *v24;
  BOOL v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  NSObject *v29;
  id v31;
  NSObject *log;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint8_t buf[4];
  NSObject *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  id v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  PKLogFacilityTypeGetObject(0x22uLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_signpost_enabled(v5))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_18FC92000, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "issuerData:validate", "", buf, 2u);
  }
  v39 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v3, 0, &v39);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v39;
  if (!v7)
  {
    if (v6)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("displayableName"));
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = v8;
        if (!v4 || !v3 || !v8)
        {
          PKLogFacilityTypeGetObject(0x2AuLL);
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v3, "description");
            v27 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412802;
            v41 = v9;
            v42 = 2112;
            v43 = v27;
            v44 = 2112;
            v45 = v4;
            _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Missing required data to setup issuer binding view controller: issuerName: %@ issuerData: %@ signature: %@", buf, 0x20u);

          }
          v7 = 0;
          v26 = 0;
          goto LABEL_51;
        }
        -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("passTypeIdentifier"));
        v10 = objc_claimAutoreleasedReturnValue();
        -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("teamIdentifier"));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v12 = v11;
        if (v10 && v11)
        {
          v38 = 0;
          v13 = PKValidateIssuerDataSignature(v3, v4, v10, v11, 1, &v38);
          v7 = v38;
          if (!v7 && v13)
          {
            v35 = v12;
            -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("sessionIdentifier"));
            v14 = objc_claimAutoreleasedReturnValue();
            -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("creationTimestamp"));
            v15 = (void *)objc_claimAutoreleasedReturnValue();
            -[NSObject PKStringForKey:](v6, "PKStringForKey:", CFSTR("callbackURL"));
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            if (v37 && v14 && v15)
            {
              v34 = v15;
              PKISO8601DateFromDateString(v15);
              v16 = objc_claimAutoreleasedReturnValue();
              objc_msgSend(MEMORY[0x1E0C99D68], "date");
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v36 = (void *)v16;
              objc_msgSend(v17, "timeIntervalSinceDate:", v16);
              v19 = v18;

              if (v19 < 0.0 || v19 > 300.0)
              {
                PKLogFacilityTypeGetObject(0x2AuLL);
                v22 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_18FC92000, v22, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  issuerData creation beyond threshhold", buf, 2u);
                }
                v26 = 0;
                v12 = v35;
              }
              else
              {
                v20 = [PKFidoProfile alloc];
                -[NSObject objectForKey:](v6, "objectForKey:", CFSTR("fidoProfile"));
                v21 = (void *)objc_claimAutoreleasedReturnValue();
                v22 = -[PKFidoProfile initWithDictionary:](v20, "initWithDictionary:", v21);

                -[NSObject relyingPartyIdentifier](v22, "relyingPartyIdentifier");
                v23 = objc_claimAutoreleasedReturnValue();
                -[NSObject accountHash](v22, "accountHash");
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v33 = (void *)v23;
                if (v23)
                  v25 = v24 == 0;
                else
                  v25 = 1;
                v26 = !v25;
                v12 = v35;
                if (v25)
                {
                  v31 = v24;
                  PKLogFacilityTypeGetObject(0x2AuLL);
                  log = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl(&dword_18FC92000, log, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  valid fido profile not supplied", buf, 2u);
                  }

                  v24 = v31;
                }

              }
              v15 = v34;
            }
            else
            {
              PKLogFacilityTypeGetObject(0x2AuLL);
              v29 = objc_claimAutoreleasedReturnValue();
              v36 = v29;
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v41 = v6;
                _os_log_impl(&dword_18FC92000, v29, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation -  issuerData not valid: %@", buf, 0xCu);
              }
              v26 = 0;
              v12 = v35;
            }

            v7 = 0;
            goto LABEL_50;
          }
          PKLogFacilityTypeGetObject(0x2AuLL);
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            -[NSObject description](v7, "description");
            v28 = objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 138412290;
            v41 = v28;
            _os_log_impl(&dword_18FC92000, v14, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation - unable to validate signature with error: %@", buf, 0xCu);

          }
        }
        else
        {
          PKLogFacilityTypeGetObject(0x2AuLL);
          v14 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            v41 = v10;
            v42 = 2112;
            v43 = v12;
            _os_log_impl(&dword_18FC92000, v14, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation - missing required data to validate signature. passTypeIdentiier: %@ teamIdentifier: %@", buf, 0x16u);
          }
          v7 = 0;
        }
        v26 = 0;
LABEL_50:

LABEL_51:
        goto LABEL_52;
      }
    }
  }
  PKLogFacilityTypeGetObject(0x2AuLL);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v41 = v7;
    _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Pass Issuer Data Generation - unable to parse issuerData error: %@", buf, 0xCu);
  }
  v26 = 0;
LABEL_52:

  return v26;
}

BOOL PKValidateIssuerDataSignature(void *a1, void *a2, void *a3, void *a4, int a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __CFString *v28;
  const void *v29;
  uint64_t v30;
  const void *v31;
  CFArrayRef v32;
  const void *PassbookCardSigner;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const __CFDictionary *Value;
  void *v43;
  const __CFDate *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  const __CFArray *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  SecTrustResultType result;
  CFDictionaryRef theDict;
  SecTrustRef trust;
  _BYTE buf[22];
  __int16 v79;
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v11;
    _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Verifying signature for data %@", buf, 0xCu);
  }
  PKLogFacilityTypeGetObject(5uLL);
  v15 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Verifying signature for data %@", buf, 0xCu);
  }

  v16 = v11;
  v17 = v12;
  v18 = v13;
  v19 = v14;
  if ((PKIgnoreSignatures() & 1) != 0)
  {
    if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Signature validation: *** IGNORING SIGNATURES ***", buf, 2u);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Signature validation: *** IGNORING SIGNATURES ***", buf, 2u);
    }

    v27 = 0;
    goto LABEL_73;
  }
  if (v19)
  {
    if (objc_msgSend(v18, "length"))
    {
      if (objc_msgSend(v17, "length"))
      {
        if (objc_msgSend(v16, "length"))
          goto LABEL_22;
        v28 = CFSTR("Data is missing");
      }
      else
      {
        v28 = CFSTR("Signature is missing");
      }
    }
    else
    {
      v28 = CFSTR("Pass type identifier is missing");
    }
  }
  else
  {
    v28 = CFSTR("Team identifier is missing");
  }
  PKSignatureErrorWithReason(v28, v20, v21, v22, v23, v24, v25, v26, v72);
  v27 = objc_claimAutoreleasedReturnValue();
  if (v27)
    goto LABEL_73;
LABEL_22:
  v73 = a5;
  v74 = a6;
  theDict = 0;
  trust = 0;
  v29 = (const void *)SecCertificateCreateWithBytes();
  v30 = SecCertificateCreateWithBytes();
  v31 = (const void *)v30;
  v32 = 0;
  if (v29 && v30)
  {
    *(_QWORD *)buf = v29;
    *(_QWORD *)&buf[8] = v30;
    v32 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)buf, 2, 0);
  }
  PassbookCardSigner = (const void *)SecPolicyCreatePassbookCardSigner();
  v34 = SecCMSVerifySignedData();
  CFRelease(PassbookCardSigner);
  if (v29)
    CFRelease(v29);
  if (v31)
    CFRelease(v31);
  if (v32)
    CFRelease(v32);
  if (v34)
  {
    if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v34;
      _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CMS verification error: %ld", buf, 0xCu);
    }
    a6 = v74;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v34;
      _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "CMS verification error: %ld", buf, 0xCu);
    }

    PKSignatureErrorWithReason(CFSTR("Data signature did not verify successfully"), v35, v36, v37, v38, v39, v40, v41, v72);
    v27 = objc_claimAutoreleasedReturnValue();
    goto LABEL_69;
  }
  Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E0CD6C60]);
  PKSecTrustGetCertificateAtIndex(trust, 0);
  if (Value && CFDictionaryGetValue(Value, (const void *)*MEMORY[0x1E0CD6C50]))
  {
    v27 = 0;
  }
  else
  {
    v43 = (void *)MEMORY[0x1E0C99D68];
    SecCertificateNotValidBefore();
    objc_msgSend(v43, "dateWithTimeIntervalSinceReferenceDate:");
    v44 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
    if (_CertValidityStartDateIsPastCutoff(v44))
    {
      PKSignatureErrorWithReason(CFSTR("Signature must contain a signing date"), v45, v46, v47, v48, v49, v50, v51, v72);
      v27 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_18FC92000, v52, OS_LOG_TYPE_ERROR, "Data signature must contain a signing date. This will start being enforced for newly issued certs.", buf, 2u);
      }

      SecTrustSetVerifyDate(trust, v44);
      v27 = 0;
    }

  }
  a6 = v74;
  if (v73)
  {
    v53 = _PKCertificateCopyValuesForOID();
    if (!v53)
    {
      PKSignatureErrorWithReason(CFSTR("Data must be signed with an enhanced Passbook certificate."), v54, v55, v56, v57, v58, v59, v60, v72);
      v70 = objc_claimAutoreleasedReturnValue();

      v27 = v70;
      if (!v70)
        goto LABEL_51;
      goto LABEL_69;
    }
    CFRelease(v53);
  }
  if (!v27)
  {
LABEL_51:
    v61 = SecTrustEvaluateWithError(trust, 0);
    result = kSecTrustResultInvalid;
    if (v61 && !SecTrustGetTrustResult(trust, &result))
    {
      v62 = 0;
      if (result > kSecTrustResultOtherError)
      {
        v27 = 0;
        goto LABEL_58;
      }
      if (((1 << result) & 0x68) == 0)
      {
        v27 = 0;
        if (((1 << result) & 0x85) != 0)
        {
          v62 = (uint64_t)CFSTR("Unreachable trust evaluation.");
          PKSignatureEvaluationUnreachableError();
          v27 = objc_claimAutoreleasedReturnValue();
          goto LABEL_59;
        }
LABEL_58:
        if (!(v27 | v62))
        {
          v27 = 0;
LABEL_68:
          a6 = v74;
          goto LABEL_69;
        }
LABEL_59:
        if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v61;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = result;
          v79 = 2112;
          v80 = v62;
          _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Error evaluating trust. Status: %ld ResultType: %ld Description: %@", buf, 0x20u);
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v61;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = result;
          v79 = 2112;
          v80 = v62;
          _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Error evaluating trust. Status: %ld ResultType: %ld Description: %@", buf, 0x20u);
        }

        goto LABEL_68;
      }
    }
    v62 = SecTrustCopyFailureDescription();
    PKSignatureErrorWithReason(CFSTR("The passTypeIdentifier or teamIdentifier provided may not match your certificate, or the certificate trust chain could not be verified."), v63, v64, v65, v66, v67, v68, v69, v72);
    v27 = objc_claimAutoreleasedReturnValue();
    goto LABEL_58;
  }
LABEL_69:
  if (trust)
    CFRelease(trust);
  if (theDict)
    CFRelease(theDict);
LABEL_73:

  if (a6)
    *a6 = objc_retainAutorelease((id)v27);

  return v27 == 0;
}

id PKValidatePaymentMerchantSession(void *a1)
{
  id v1;
  NSObject *v2;
  const void *ApplePinned;
  int v4;
  int v5;
  void *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Evaluating merchant session using PROD trust policy.", v16, 2u);
  }

  ApplePinned = (const void *)SecPolicyCreateApplePinned();
  objc_msgSend(v1, "signature");
  objc_msgSend(v1, "signedData");
  v4 = SecCMSVerifyCopyDataAndAttributes();
  v5 = v4;
  if (ApplePinned)
  {
    v6 = 0;
    if (!v4)
      goto LABEL_8;
  }
  PKLogFacilityTypeGetObject(5uLL);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v16 = 134217984;
    *(_QWORD *)&v16[4] = v5;
    _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "Merchant session validation error: %ld", v16, 0xCu);
  }

  PKSignatureErrorWithReason(CFSTR("Merchant session signature did not validate"), v8, v9, v10, v11, v12, v13, v14, *(uint64_t *)v16);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (ApplePinned)
LABEL_8:
    CFRelease(ApplePinned);

  return v6;
}

void PKCheckRevocationStatus(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void (**v8)(_QWORD);
  void *v9;
  id v10;
  uint64_t v11;
  SecPolicyRef Revocation;
  NSObject *v13;
  _QWORD *v14;
  NSObject *v15;
  _QWORD v16[4];
  id v17;
  SecTrustRef v18;
  id v19;
  _QWORD aBlock[4];
  id v21;
  SecTrustRef trust;
  __int128 block;
  void (*v24)(uint64_t);
  void *v25;
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  trust = 0;
  v5 = (void *)MEMORY[0x19400CFE8]();
  v6 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __PKCheckRevocationStatus_block_invoke;
  aBlock[3] = &unk_1E2ABD9A0;
  v7 = v4;
  v21 = v7;
  v8 = (void (**)(_QWORD))_Block_copy(aBlock);
  v19 = 0;
  PKObjectDictionaryWithError(v3, &v19);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v19;
  if (!v9)
  {
    if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v10;
      _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Cannot check revocation status of pass with invalid pass.json: %@", (uint8_t *)&block, 0xCu);
    }
    PKLogFacilityTypeGetObject(5uLL);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v10;
      _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Cannot check revocation status of pass with invalid pass.json: %@", (uint8_t *)&block, 0xCu);
    }
    goto LABEL_25;
  }
  _PKVerifySignatureLocally(v3, v9);
  v11 = objc_claimAutoreleasedReturnValue();

  if (v11 || !trust)
  {
    if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v11;
      _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Cannot check revocation status of pass that does not verify locally: %@", (uint8_t *)&block, 0xCu);
    }
    PKLogFacilityTypeGetObject(5uLL);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(block) = 138412290;
      *(_QWORD *)((char *)&block + 4) = v11;
      _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Cannot check revocation status of pass that does not verify locally: %@", (uint8_t *)&block, 0xCu);
    }
    v10 = (id)v11;
    goto LABEL_25;
  }
  Revocation = SecPolicyCreateRevocation(3uLL);
  if (!Revocation)
  {
    if (trust)
      CFRelease(trust);
    if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
    {
      LOWORD(block) = 0;
      _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Could not create recovation policy", (uint8_t *)&block, 2u);
    }
    PKLogFacilityTypeGetObject(5uLL);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block) = 0;
      _os_log_impl(&dword_18FC92000, v15, OS_LOG_TYPE_DEFAULT, "Could not create recovation policy", (uint8_t *)&block, 2u);
    }
    v10 = 0;
LABEL_25:

    v8[2](v8);
    objc_autoreleasePoolPop(v5);
    goto LABEL_26;
  }
  SecTrustSetPolicies(trust, Revocation);
  CFRelease(Revocation);

  objc_autoreleasePoolPop(v5);
  dispatch_get_global_queue(-2, 0);
  v13 = objc_claimAutoreleasedReturnValue();
  v16[0] = v6;
  v16[1] = 3221225472;
  v16[2] = __PKCheckRevocationStatus_block_invoke_63;
  v16[3] = &unk_1E2AC1C68;
  v18 = trust;
  v17 = v7;
  v14 = v16;
  *(_QWORD *)&block = v6;
  *((_QWORD *)&block + 1) = 3221225472;
  v24 = __dispatch_async_ar_block_invoke_5;
  v25 = &unk_1E2ABD9A0;
  v26 = v14;
  dispatch_async(v13, &block);

LABEL_26:
}

id _PKVerifySignatureLocally(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  __CFString *v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  const void *v45;
  CFArrayRef v46;
  const void *PassbookCardSigner;
  int v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  void *v59;
  void *v60;
  CFDictionaryRef theDict;
  SecTrustRef trust;
  __int128 values;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "PKStringForKey:", CFSTR("teamIdentifier"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v12)
  {
    PKSignatureErrorWithReason(CFSTR("Team identifier is missing"), v5, v6, v7, v8, v9, v10, v11, v58);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0;
LABEL_9:
    v23 = 0;
    goto LABEL_32;
  }
  objc_msgSend(v4, "PKStringForKey:", CFSTR("passTypeIdentifier"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v20)
  {
    PKSignatureErrorWithReason(CFSTR("Pass type identifier is missing"), v13, v14, v15, v16, v17, v18, v19, v58);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  v21 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", CFSTR("signature"), 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "dataWithContentsOfURL:", v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v23)
  {
    v41 = CFSTR("Signature is missing");
LABEL_12:
    PKSignatureErrorWithReason(v41, v24, v25, v26, v27, v28, v29, v30, v58);
    v42 = objc_claimAutoreleasedReturnValue();
    if (v42)
    {
      v40 = (void *)v42;
      goto LABEL_32;
    }
    v59 = 0;
    v60 = v23;
    v39 = v3;
    goto LABEL_17;
  }
  v60 = v23;
  v31 = (void *)MEMORY[0x1E0C99D50];
  objc_msgSend(CFSTR("manifest"), "stringByAppendingPathExtension:", CFSTR("json"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "URLByAppendingPathComponent:isDirectory:", v32, 0);
  v33 = v3;
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "dataWithContentsOfURL:", v34);
  v35 = objc_claimAutoreleasedReturnValue();

  v59 = (void *)v35;
  if (!v35)
  {
    v41 = CFSTR("Manifest is missing");
    v3 = v33;
    v23 = v60;
    goto LABEL_12;
  }
  objc_msgSend(CFSTR("personalization"), "stringByAppendingPathExtension:", CFSTR("json"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "URLByAppendingPathComponent:isDirectory:", v36, 0);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "PKDictionaryForKey:", CFSTR("nfc"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();

  v39 = v33;
  if (!v38)
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v37);

  }
LABEL_17:
  theDict = 0;
  trust = 0;
  v43 = (const void *)SecCertificateCreateWithBytes();
  v44 = SecCertificateCreateWithBytes();
  v45 = (const void *)v44;
  v46 = 0;
  if (v43 && v44)
  {
    *(_QWORD *)&values = v43;
    *((_QWORD *)&values + 1) = v44;
    v46 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)&values, 2, 0);
  }
  PassbookCardSigner = (const void *)SecPolicyCreatePassbookCardSigner();
  v48 = SecCMSVerifySignedData();
  CFRelease(PassbookCardSigner);
  if (v43)
    CFRelease(v43);
  if (v45)
    CFRelease(v45);
  if (v46)
    CFRelease(v46);
  v3 = v39;
  if (PKDeveloperLoggingEnabled() && os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    LODWORD(values) = 134217984;
    *(_QWORD *)((char *)&values + 4) = v48;
    _os_log_error_impl(&dword_18FC92000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "CMS verification error: %ld", (uint8_t *)&values, 0xCu);
  }
  PKLogFacilityTypeGetObject(5uLL);
  v49 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(values) = 134217984;
    *(_QWORD *)((char *)&values + 4) = v48;
    _os_log_impl(&dword_18FC92000, v49, OS_LOG_TYPE_DEFAULT, "CMS verification error: %ld", (uint8_t *)&values, 0xCu);
  }

  PKSignatureErrorWithReason(CFSTR("Manifest signature did not verify successfully"), v50, v51, v52, v53, v54, v55, v56, v58);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v60;

LABEL_32:
  return v40;
}

id PKValidateLocationDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  id v35;
  id v36;
  id v37;

  v1 = a1;
  v37 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("latitude"), 0, v2, &v37);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    objc_msgSend(v37, "doubleValue");
    if (*(double *)&v11 >= -90.0 && *(double *)&v11 <= 90.0)
    {
      v36 = 0;
      v12 = objc_opt_class();
      _PKVerifyDictionaryKey(v1, CFSTR("longitude"), 0, v12, &v36);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v3)
      {
        objc_msgSend(v36, "doubleValue");
        if (*(double *)&v20 >= -180.0 && *(double *)&v20 <= 180.0)
        {
          v35 = 0;
          v21 = objc_opt_class();
          _PKVerifyDictionaryKey(v1, CFSTR("maxDistance"), 1, v21, &v35);
          v3 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v3)
          {
            objc_msgSend(v35, "doubleValue");
            if (v35 && *(double *)&v29 <= 0.0)
            {
              PKValidationErrorWithReason(CFSTR("Maximum distance must be greater than zero. It’s ‘%g’."), v22, v23, v24, v25, v26, v27, v28, v29);
              v30 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v31 = objc_opt_class();
              _PKVerifyDictionaryKey(v1, CFSTR("altitude"), 1, v31, 0);
              v3 = (void *)objc_claimAutoreleasedReturnValue();
              if (v3)
                goto LABEL_16;
              v32 = objc_opt_class();
              _PKVerifyDictionaryKey(v1, CFSTR("name"), 1, v32, 0);
              v3 = (void *)objc_claimAutoreleasedReturnValue();
              if (v3)
                goto LABEL_16;
              v34 = objc_opt_class();
              _PKVerifyDictionaryKey(v1, CFSTR("relevantText"), 1, v34, 0);
              v30 = objc_claimAutoreleasedReturnValue();
            }
            v3 = (void *)v30;
          }
LABEL_16:

          goto LABEL_17;
        }
        PKValidationErrorWithReason(CFSTR("Longitude must be between -180 and 180. It’s ‘%g’."), v13, v14, v15, v16, v17, v18, v19, v20);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
      }
LABEL_17:

      goto LABEL_18;
    }
    PKValidationErrorWithReason(CFSTR("Latitude must be between -90 and 90. It’s ‘%g’."), v4, v5, v6, v7, v8, v9, v10, v11);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
LABEL_18:

  return v3;
}

id PKValidateBeaconDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;

  v1 = a1;
  v38 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("proximityUUID"), 0, v2, &v38);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v6 = objc_alloc(MEMORY[0x1E0CB3A28]);
    v14 = (void *)objc_msgSend(v6, "initWithUUIDString:", v38);
    if (!v14)
    {
      PKValidationErrorWithReason(CFSTR("Proximity UUID (%@) is not a valid UUID."), v7, v8, v9, v10, v11, v12, v13, (uint64_t)v38);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = 0;
LABEL_13:

      goto LABEL_14;
    }
    v37 = 0;
    v15 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("major"), 1, v15, &v37);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    if (v16)
    {
      v4 = v16;
      v5 = v4;
LABEL_12:

      goto LABEL_13;
    }
    if ((unint64_t)objc_msgSend(v37, "unsignedIntegerValue") >= 0x10000)
    {
      PKValidationErrorWithReason(CFSTR("Beacon major value (%@) is not within valid range (0-%lu)."), v17, v18, v19, v20, v21, v22, v23, (uint64_t)v37);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = 0;
      goto LABEL_12;
    }
    v36 = 0;
    v24 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("minor"), 1, v24, &v36);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v25)
    {
      if ((unint64_t)objc_msgSend(v36, "unsignedIntegerValue") >= 0x10000)
      {
        PKValidationErrorWithReason(CFSTR("Beacon minor value (%@) is not within valid range (0-%lu)."), v27, v28, v29, v30, v31, v32, v33, (uint64_t)v36);
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        v4 = 0;
        goto LABEL_11;
      }
      v34 = objc_opt_class();
      _PKVerifyDictionaryKey(v1, CFSTR("name"), 1, v34, 0);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v25)
      {
        v35 = objc_opt_class();
        _PKVerifyDictionaryKey(v1, CFSTR("relevantText"), 1, v35, 0);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v25)
        {
          v4 = 0;
          v5 = 0;
          goto LABEL_11;
        }
      }
    }
    v4 = v25;
    v5 = v4;
LABEL_11:

    goto LABEL_12;
  }
  v4 = v3;
  v5 = v4;
LABEL_14:

  return v5;
}

id PKValidateRelevantDateDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  PKPassRelevantDate *v5;
  void *v6;
  void *v7;
  PKPassRelevantDate *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v19;
  id v20;

  v1 = a1;
  v19 = 0;
  v20 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("startDate"), 1, v2, &v20);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v4 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("endDate"), 1, v4, &v19);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
    {
      if (v20 && v19)
      {
        v5 = [PKPassRelevantDate alloc];
        _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(v20, 0, 0);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(v19, 0, 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        v8 = -[PKPassRelevantDate initWithEffectiveStartDate:effectiveEndDate:](v5, "initWithEffectiveStartDate:effectiveEndDate:", v6, v7);

        if (v8)
        {

          v3 = 0;
        }
        else
        {
          objc_msgSend(0, "description");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          PKValidationErrorWithReason(CFSTR("RelevantDate (%@) is not a valid relevant date."), v11, v12, v13, v14, v15, v16, v17, (uint64_t)v10);
          v3 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
      else
      {
        v9 = objc_opt_class();
        _PKVerifyDictionaryKey(v1, CFSTR("date"), 0, v9, 0);
        v3 = (void *)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  return v3;
}

id PKValidateChangeMessage(void *a1)
{
  id v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unsigned __int8 *v12;
  __CFString *v13;
  int v14;
  void *v15;

  v1 = objc_retainAutorelease(a1);
  v2 = (_BYTE *)objc_msgSend(v1, "UTF8String");
  v10 = *v2;
  if (!*v2)
    goto LABEL_16;
  v11 = 0;
  v12 = v2 + 1;
  v13 = CFSTR("Change message \"%@\" has more than one %%@");
  do
  {
    if (v10 == 64)
    {
      if (v11 == 1)
      {
        v11 = 2;
      }
      else if (v11 == 3)
      {
        goto LABEL_17;
      }
    }
    else if (v10 == 37)
    {
      if (v11 < 4)
        v11 = dword_190454B00[v11];
    }
    else if ((v11 | 2) == 3)
    {
      v13 = CFSTR("Change message \"%@\" has a format code other than %%@");
      goto LABEL_17;
    }
    v14 = *v12++;
    v10 = v14;
  }
  while (v14);
  if (v11 == 2)
  {
    v15 = 0;
  }
  else
  {
LABEL_16:
    v13 = CFSTR("Change message \"%@\" needs to contain %%@.");
LABEL_17:
    PKValidationErrorWithReason(v13, v3, v4, v5, v6, v7, v8, v9, (uint64_t)v1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

id _PKValidateTopLevelPassStructure(void *a1, void *a2, id *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  __CFString *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t j;
  void *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  void *v85;
  void *v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t m;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  void *v136;
  NSObject *v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  uint64_t v149;
  void *v150;
  id v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t n;
  void *v158;
  void *v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t ii;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t jj;
  uint64_t v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t kk;
  uint64_t v203;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t mm;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  void *v236;
  id v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  uint64_t v242;
  id v243;
  id v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  id v250;
  uint64_t v251;
  void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  id *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  id v281;
  id v282;
  void *v283;
  int v284;
  void *v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  void *v290;
  uint64_t v291;
  void *v292;
  int v293;
  uint64_t v294;
  id v295;
  void *v296;
  uint64_t v297;
  void *v298;
  void *v299;
  void *v300;
  void *v301;
  void *v302;
  uint64_t v303;
  void *v304;
  void *v305;
  id v306;
  uint64_t v307;
  uint64_t v308;
  void *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  id v317;
  uint64_t v318;
  id v319;
  id v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  id v331;
  void *v332;
  id v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  id v337;
  uint64_t v338;
  uint64_t v339;
  void *v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  id v345;
  void *v346;
  id v347;
  id v348;
  uint64_t v349;
  id v350;
  id v351;
  id obj;
  id obja;
  id objb;
  id v355;
  id v356;
  id v357;
  id v358;
  id *location;
  id *locationa;
  void *v361;
  id v362;
  void *v363;
  id v364;
  id v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  id v370;
  id v371;
  id v372;
  id v373;
  id v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  id v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  id v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  id v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  id v394;
  __int128 v395;
  __int128 v396;
  __int128 v397;
  __int128 v398;
  id v399;
  id v400;
  uint8_t buf[8];
  __int128 v402;
  __int128 v403;
  __int128 v404;
  __int128 v405;
  id v406;
  id v407;
  id v408;
  id v409;
  id v410;
  id v411;
  id v412;
  id v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  id v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  id v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  id v428;
  id v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  id v434;
  _BYTE v435[128];
  _BYTE v436[128];
  _BYTE v437[128];
  _BYTE v438[128];
  _BYTE v439[128];
  _BYTE v440[128];
  _BYTE v441[128];
  _BYTE v442[128];
  _BYTE v443[128];
  _BYTE v444[128];
  id v445[18];

  v445[16] = *(id *)MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v8 = objc_alloc_init(MEMORY[0x1E0C99E20]);
  v16 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB34D0]), "initWithURL:", v5);
  if (!v16)
  {
    v347 = v5;
    v18 = CFSTR("NSBundle init returns nil for URL %@");
    goto LABEL_5;
  }
  +[PKImage URLForImageNamed:inBundle:scale:](PKImage, "URLForImageNamed:inBundle:scale:", CFSTR("icon"), v16, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    objc_msgSend(CFSTR("icon"), "stringByAppendingPathExtension:", CFSTR("png"));
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v16, "URLForResource:withExtension:", v20, CFSTR("urls"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();

    if (v21)
      goto LABEL_7;
    v18 = CFSTR("Pass does not contain icon.png/icon@2x.png/icon@3x.png");
LABEL_5:
    PKValidationErrorWithReason(v18, v9, v10, v11, v12, v13, v14, v15, (uint64_t)v347);
    v19 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_27;
  }

LABEL_7:
  v429 = 0;
  _PKValidateVersion(v6, &v429);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22)
  {
    v23 = v22;
LABEL_25:
    v45 = v23;
    v19 = v23;
    goto LABEL_26;
  }
  v24 = v6;
  v434 = 0;
  v25 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("preferredStyleSchemes"), 1, v25, &v434);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v26)
  {
    v28 = v26;
  }
  else
  {
    v355 = v24;
    location = a3;
    v362 = v8;
    v29 = v5;
    v30 = v6;
    v31 = v7;
    v433 = 0u;
    v432 = 0u;
    v431 = 0u;
    v430 = 0u;
    v32 = v434;
    v33 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v430, v445, 16);
    if (v33)
    {
      v34 = v33;
      v35 = *(_QWORD *)v431;
      while (2)
      {
        for (i = 0; i != v34; ++i)
        {
          if (*(_QWORD *)v431 != v35)
            objc_enumerationMutation(v32);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            v37 = objc_opt_class();
            PKValidationErrorWithReason(CFSTR("scheme in preferredStyleSchemes array needs to be a string. Found object of class %@."), v38, v39, v40, v41, v42, v43, v44, v37);
            v28 = (id)objc_claimAutoreleasedReturnValue();

            goto LABEL_22;
          }
        }
        v34 = objc_msgSend(v32, "countByEnumeratingWithState:objects:count:", &v430, v445, 16);
        if (v34)
          continue;
        break;
      }
    }

    v28 = 0;
LABEL_22:
    v7 = v31;
    v6 = v30;
    v5 = v29;
    v8 = v362;
    v24 = v355;
    a3 = location;
  }

  if (v28)
  {
    v23 = v28;
    goto LABEL_25;
  }
  v445[0] = 0;
  *(_QWORD *)&v430 = 0;
  v47 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("passTypeIdentifier"), 0, v47, v445);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
    goto LABEL_35;
  v49 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("serialNumber"), 0, v49, (id *)&v430);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
    goto LABEL_35;
  v50 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("description"), 0, v50, 0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
    goto LABEL_35;
  v51 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("organizationName"), 0, v51, 0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48)
    goto LABEL_35;
  v52 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("teamIdentifier"), 0, v52, 0);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  if (v48
    || (v53 = objc_opt_class(),
        _PKVerifyDictionaryKey(v24, CFSTR("cardType"), 1, v53, 0),
        (v48 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    || (v54 = objc_opt_class(),
        _PKVerifyDictionaryKey(v24, CFSTR("cardSubtype"), 1, v54, 0),
        (v48 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
LABEL_35:
    v45 = v48;
    v19 = v45;
    goto LABEL_36;
  }
  locationa = a3;
  v361 = v16;
  v363 = v8;
  v434 = 0;
  v55 = v24;
  _PKValidateURLStringKey(v24, CFSTR("webServiceURL"), 1, 1, &v434);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v56)
  {
LABEL_38:
    v45 = v56;
    v19 = v45;
    goto LABEL_39;
  }
  if (v434)
  {
    v428 = 0;
    v57 = objc_opt_class();
    _PKVerifyDictionaryKey(v24, CFSTR("authenticationToken"), 0, v57, &v428);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v58;
    if (v58)
    {
      v59 = v58;
LABEL_45:
      v19 = v59;

      goto LABEL_39;
    }
    if ((unint64_t)objc_msgSend(v428, "length") <= 0xF)
    {
      PKValidationErrorWithReason(CFSTR("authenticationToken '%@' is too short. It needs to be at least %d characters."), v60, v61, v62, v63, v64, v65, v66, (uint64_t)v428);
      v59 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_45;
    }

  }
  v67 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("transactionServicePushTopic"), 1, v67, 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v56)
    goto LABEL_38;
  _PKValidateURLStringKey(v24, CFSTR("transactionServiceURL"), 1, 1, 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v56)
    goto LABEL_38;
  _PKVerifyDateDictionaryKey(v24, CFSTR("relevantDate"));
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  if (v56)
    goto LABEL_38;
  v428 = 0;
  v68 = objc_opt_class();
  _PKVerifyDictionaryKey(v24, CFSTR("relevantDates"), 1, v68, &v428);
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (v69)
    goto LABEL_65;
  if (v428)
  {
    v426 = 0u;
    v427 = 0u;
    v424 = 0u;
    v425 = 0u;
    v70 = v428;
    v71 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v424, v444, 16);
    if (v71)
    {
      v72 = v71;
      v73 = *(_QWORD *)v425;
      do
      {
        for (j = 0; j != v72; ++j)
        {
          if (*(_QWORD *)v425 != v73)
            objc_enumerationMutation(v70);
          PKValidateRelevantDateDictionary(*(void **)(*((_QWORD *)&v424 + 1) + 8 * j));
          v75 = (void *)objc_claimAutoreleasedReturnValue();
          if (v75)
          {
            v347 = v445[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"));
            v76 = (void *)objc_claimAutoreleasedReturnValue();
            _PKShoutPassValidationError(v75, v76);

          }
        }
        v72 = objc_msgSend(v70, "countByEnumeratingWithState:objects:count:", &v424, v444, 16);
      }
      while (v72);
    }

  }
  _PKVerifyDateDictionaryKey(v55, CFSTR("expirationDate"));
  v69 = (void *)objc_claimAutoreleasedReturnValue();
  if (v69
    || (v77 = objc_opt_class(),
        _PKVerifyDictionaryKey(v55, CFSTR("voided"), 1, v77, 0),
        (v69 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    || (v78 = objc_opt_class(),
        _PKVerifyDictionaryKey(v55, CFSTR("groupingIdentifier"), 1, v78, 0),
        (v69 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
LABEL_65:
    v19 = v69;
    v356 = v19;
    goto LABEL_66;
  }
  v423 = 0;
  v79 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("locations"), 1, v79, &v423);
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  if (v80)
  {
    v19 = v80;
    v356 = v19;
    goto LABEL_99;
  }
  v421 = 0u;
  v422 = 0u;
  v419 = 0u;
  v420 = 0u;
  obj = v423;
  v81 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v419, v443, 16);
  if (!v81)
    goto LABEL_78;
  v82 = v81;
  v83 = *(_QWORD *)v420;
  while (2)
  {
    for (k = 0; k != v82; ++k)
    {
      if (*(_QWORD *)v420 != v83)
        objc_enumerationMutation(obj);
      v85 = *(void **)(*((_QWORD *)&v419 + 1) + 8 * k);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v89 = objc_opt_class();
        PKValidationErrorWithReason(CFSTR("entry in locations array needs to be a dictionary. Found object of class %@."), v90, v91, v92, v93, v94, v95, v96, v89);
        v19 = (id)objc_claimAutoreleasedReturnValue();
        v356 = 0;
LABEL_82:
        v97 = obj;
        goto LABEL_98;
      }
      PKValidateLocationDictionary(v85);
      v86 = (void *)objc_claimAutoreleasedReturnValue();
      if (v86)
      {
        v19 = v86;
        v356 = v19;
        goto LABEL_82;
      }
    }
    v82 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v419, v443, 16);
    if (v82)
      continue;
    break;
  }
LABEL_78:

  v418 = 0;
  v87 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("beacons"), 1, v87, &v418);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  if (v88)
    goto LABEL_79;
  v416 = 0u;
  v417 = 0u;
  v414 = 0u;
  v415 = 0u;
  v98 = v418;
  v99 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v414, v442, 16);
  if (v99)
  {
    v100 = v99;
    v101 = *(_QWORD *)v415;
    while (2)
    {
      for (m = 0; m != v100; ++m)
      {
        if (*(_QWORD *)v415 != v101)
          objc_enumerationMutation(v98);
        v103 = *(void **)(*((_QWORD *)&v414 + 1) + 8 * m);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v109 = objc_opt_class();
          PKValidationErrorWithReason(CFSTR("entry in beacons array needs to be a dictionary. Found object of class %@."), v110, v111, v112, v113, v114, v115, v116, v109);
          v19 = (id)objc_claimAutoreleasedReturnValue();

          v356 = 0;
          goto LABEL_97;
        }
        PKValidateBeaconDictionary(v103);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        if (v104)
        {
          v347 = v445[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"));
          v105 = (void *)objc_claimAutoreleasedReturnValue();
          _PKShoutPassValidationError(v104, v105);

        }
      }
      v100 = objc_msgSend(v98, "countByEnumeratingWithState:objects:count:", &v414, v442, 16);
      if (v100)
        continue;
      break;
    }
  }

  v106 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("userInfo"), 1, v106, 0);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  if (v88)
  {
LABEL_79:
    v19 = v88;
    v356 = v19;
    goto LABEL_97;
  }
  v413 = 0;
  v107 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("foregroundColor"), 1, v107, &v413);
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  if (v108 || v413 && (_PKValidateColorString(v413), (v108 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v108;
    v356 = v19;
    goto LABEL_120;
  }
  v412 = 0;
  v117 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("backgroundColor"), 1, v117, &v412);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  if (v118 || v412 && (_PKValidateColorString(v412), (v118 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v118;
    v356 = v19;
    goto LABEL_119;
  }
  v411 = 0;
  v119 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("secondaryBackgroundColor"), 1, v119, &v411);
  v120 = (void *)objc_claimAutoreleasedReturnValue();
  if (v120 || v411 && (_PKValidateColorString(v411), (v120 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v120;
    v356 = v19;
    goto LABEL_118;
  }
  v410 = 0;
  v121 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("labelColor"), 1, v121, &v410);
  v122 = (void *)objc_claimAutoreleasedReturnValue();
  if (v122 || v410 && (_PKValidateColorString(v410), (v122 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v122;
    v356 = v19;
    goto LABEL_117;
  }
  v409 = 0;
  v123 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("stripColor"), 1, v123, &v409);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  if (v124
    || v409 && (_PKValidateColorString(v409), (v124 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    || (v125 = objc_opt_class(),
        _PKVerifyDictionaryKey(v55, CFSTR("logoText"), 1, v125, 0),
        (v124 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v124;
    v356 = v19;
    goto LABEL_116;
  }
  v408 = 0;
  v126 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("barcode"), 1, v126, &v408);
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  if (v127 || v408 && (_PKValidateBarcodeDict(v408), (v127 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v127;
    v356 = v19;
    goto LABEL_357;
  }
  v407 = 0;
  v128 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("semantics"), 1, v128, &v407);
  v129 = (void *)objc_claimAutoreleasedReturnValue();
  if (v129
    || v407 && (_PKValidateSemanticsDict(v407, 0), (v129 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v19 = v129;
    v356 = v19;
    goto LABEL_356;
  }
  v406 = 0;
  v130 = objc_opt_class();
  v131 = _PKVerifyDictionaryKey(v55, CFSTR("barcodes"), 1, v130, &v406);
  v402 = 0u;
  v403 = 0u;
  v404 = 0u;
  v405 = 0u;
  v350 = v406;
  v132 = objc_msgSend(v350, "countByEnumeratingWithState:objects:count:", &v402, v441, 16);
  if (v132)
  {
    v133 = v132;
    v134 = 0;
    obja = *(id *)v403;
    while (2)
    {
      v135 = 0;
      v356 = v134;
      do
      {
        if (*(id *)v403 != obja)
          objc_enumerationMutation(v350);
        v136 = *(void **)(*((_QWORD *)&v402 + 1) + 8 * v135);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v140 = objc_opt_class();
          PKValidationErrorWithReason(CFSTR("item in barcodes array needs to be a dictionary. Found object of class %@."), v141, v142, v143, v144, v145, v146, v147, v140);
          v19 = (id)objc_claimAutoreleasedReturnValue();
          v148 = v350;
          goto LABEL_355;
        }
        _PKValidateBarcodeDict(v136);
        v134 = (void *)objc_claimAutoreleasedReturnValue();

        if (v134)
        {
          PKLogFacilityTypeGetObject(0);
          v137 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_18FC92000, v137, OS_LOG_TYPE_ERROR, "The barcodes array did not validate correctly. This could be due to an unrecognized barcode format, or a more serious problem", buf, 2u);
          }

        }
        ++v135;
        v356 = v134;
      }
      while (v133 != v135);
      v133 = objc_msgSend(v350, "countByEnumeratingWithState:objects:count:", &v402, v441, 16);
      if (v133)
        continue;
      break;
    }

  }
  *(_QWORD *)buf = 0;
  v138 = objc_opt_class();
  _PKVerifyDictionaryKey(v55, CFSTR("hasStoredValue"), 1, v138, (id *)buf);
  v139 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v139)
  {
    v400 = 0;
    v149 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("nfc"), 1, v149, &v400);
    v150 = (void *)objc_claimAutoreleasedReturnValue();
    if (v150
      || (v151 = v400) != 0
      && (objc_msgSend(*(id *)buf, "BOOLValue"),
          _PKValidateNFCDict(v151),
          (v150 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v19 = v150;
      v356 = v19;
LABEL_353:

      goto LABEL_354;
    }
    v399 = 0;
    v152 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("paymentApplications"), 1, v152, &v399);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    if (v153)
    {
      v19 = v153;
      v356 = v19;
LABEL_352:

      goto LABEL_353;
    }
    v397 = 0u;
    v398 = 0u;
    v395 = 0u;
    v396 = 0u;
    v357 = v399;
    v154 = objc_msgSend(v357, "countByEnumeratingWithState:objects:count:", &v395, v440, 16);
    if (v154)
    {
      v155 = v154;
      v156 = *(_QWORD *)v396;
      while (2)
      {
        for (n = 0; n != v155; ++n)
        {
          if (*(_QWORD *)v396 != v156)
            objc_enumerationMutation(v357);
          v158 = *(void **)(*((_QWORD *)&v395 + 1) + 8 * n);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PKValidationErrorWithReason(CFSTR("item in %@ array needs to be a dictionary. Found object of class %@."), v163, v164, v165, v166, v167, v168, v169, (uint64_t)CFSTR("paymentApplications"));
            v19 = (id)objc_claimAutoreleasedReturnValue();

            v356 = 0;
            goto LABEL_352;
          }
          PKValidatePaymentApplicationDict(v158);
          v159 = (void *)objc_claimAutoreleasedReturnValue();
          if (v159)
          {
            v347 = v445[0];
            objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"));
            v160 = (void *)objc_claimAutoreleasedReturnValue();
            _PKShoutPassValidationError(v159, v160);

          }
        }
        v155 = objc_msgSend(v357, "countByEnumeratingWithState:objects:count:", &v395, v440, 16);
        if (v155)
          continue;
        break;
      }
    }

    v394 = 0;
    v161 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("associatedPassTypeIdentifiers"), 1, v161, &v394);
    v162 = (void *)objc_claimAutoreleasedReturnValue();
    if (v162)
    {
      v19 = v162;
      v356 = v19;
LABEL_351:

      goto LABEL_352;
    }
    v392 = 0u;
    v393 = 0u;
    v390 = 0u;
    v391 = 0u;
    v170 = v394;
    v171 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", &v390, v439, 16);
    if (v171)
    {
      v172 = v171;
      v173 = *(_QWORD *)v391;
      while (2)
      {
        for (ii = 0; ii != v172; ++ii)
        {
          if (*(_QWORD *)v391 != v173)
            objc_enumerationMutation(v170);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PKValidationErrorWithReason(CFSTR("Pass Type Identifier in %@ array needs to be a string.  Found object of class %@."), v177, v178, v179, v180, v181, v182, v183, (uint64_t)CFSTR("associatedPassTypeIdentifiers"));
            v19 = (id)objc_claimAutoreleasedReturnValue();

            v356 = 0;
            goto LABEL_351;
          }
        }
        v172 = objc_msgSend(v170, "countByEnumeratingWithState:objects:count:", &v390, v439, 16);
        if (v172)
          continue;
        break;
      }
    }

    v389 = 0;
    v175 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("associatedStoreIdentifiers"), 1, v175, &v389);
    v176 = (void *)objc_claimAutoreleasedReturnValue();
    if (v176)
    {
      v19 = v176;
      v356 = v19;
LABEL_350:

      goto LABEL_351;
    }
    v387 = 0u;
    v388 = 0u;
    v385 = 0u;
    v386 = 0u;
    v184 = v389;
    v185 = objc_msgSend(v184, "countByEnumeratingWithState:objects:count:", &v385, v438, 16);
    if (v185)
    {
      v186 = v185;
      v187 = *(_QWORD *)v386;
      while (2)
      {
        for (jj = 0; jj != v186; ++jj)
        {
          if (*(_QWORD *)v386 != v187)
            objc_enumerationMutation(v184);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PKValidationErrorWithReason(CFSTR("store ID in %@ array needs to be a number. Found object of class %@."), v191, v192, v193, v194, v195, v196, v197, (uint64_t)CFSTR("associatedStoreIdentifiers"));
            v19 = (id)objc_claimAutoreleasedReturnValue();

            v356 = 0;
            goto LABEL_350;
          }
        }
        v186 = objc_msgSend(v184, "countByEnumeratingWithState:objects:count:", &v385, v438, 16);
        if (v186)
          continue;
        break;
      }
    }

    v384 = 0;
    v189 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("auxiliaryStoreIdentifiers"), 1, v189, &v384);
    v190 = (void *)objc_claimAutoreleasedReturnValue();
    if (v190)
    {
      v19 = v190;
      v356 = v19;
LABEL_349:

      goto LABEL_350;
    }
    v382 = 0u;
    v383 = 0u;
    v380 = 0u;
    v381 = 0u;
    v198 = v384;
    v199 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v380, v437, 16);
    if (v199)
    {
      v200 = v199;
      v201 = *(_QWORD *)v381;
      while (2)
      {
        for (kk = 0; kk != v200; ++kk)
        {
          if (*(_QWORD *)v381 != v201)
            objc_enumerationMutation(v198);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PKValidationErrorWithReason(CFSTR("store ID in %@ array needs to be a number. Found object of class %@."), v205, v206, v207, v208, v209, v210, v211, (uint64_t)CFSTR("auxiliaryStoreIdentifiers"));
            v19 = (id)objc_claimAutoreleasedReturnValue();

            v356 = 0;
            goto LABEL_349;
          }
        }
        v200 = objc_msgSend(v198, "countByEnumeratingWithState:objects:count:", &v380, v437, 16);
        if (v200)
          continue;
        break;
      }
    }

    v379 = 0;
    v203 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("systemAppBundleIdentifiers"), 1, v203, &v379);
    v204 = (void *)objc_claimAutoreleasedReturnValue();
    if (v204)
    {
      v19 = v204;
      v356 = v19;
LABEL_348:

      goto LABEL_349;
    }
    v377 = 0u;
    v378 = 0u;
    v375 = 0u;
    v376 = 0u;
    v212 = v379;
    v213 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v375, v436, 16);
    if (v213)
    {
      v214 = v213;
      v215 = *(_QWORD *)v376;
      while (2)
      {
        for (mm = 0; mm != v214; ++mm)
        {
          if (*(_QWORD *)v376 != v215)
            objc_enumerationMutation(v212);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PKValidationErrorWithReason(CFSTR("system application bundle identifier in %@ array needs to be a string. Found object of class %@."), v228, v229, v230, v231, v232, v233, v234, (uint64_t)CFSTR("systemAppBundleIdentifiers"));
            v19 = (id)objc_claimAutoreleasedReturnValue();

            v356 = 0;
            goto LABEL_348;
          }
        }
        v214 = objc_msgSend(v212, "countByEnumeratingWithState:objects:count:", &v375, v436, 16);
        if (v214)
          continue;
        break;
      }
    }

    v374 = 0;
    _PKValidateURLStringKey(v55, CFSTR("appLaunchURL"), 1, 0, &v374);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    if (v217)
      goto LABEL_215;
    if (v374 && !objc_msgSend(v389, "count") && !objc_msgSend(v379, "count"))
    {
      PKValidationErrorWithReason(CFSTR("%@ key requires the presence of at least one item in the %@ or %@ array."), v218, v219, v220, v221, v222, v223, v224, (uint64_t)CFSTR("appLaunchURL"));
      v19 = (id)objc_claimAutoreleasedReturnValue();
      v356 = 0;
      goto LABEL_347;
    }
    v225 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("issuerCountryCode"), 1, v225, 0);
    v217 = (void *)objc_claimAutoreleasedReturnValue();
    if (v217
      || (v226 = objc_opt_class(),
          _PKVerifyDictionaryKey(v55, CFSTR("issuerAdministrativeAreaCode"), 1, v226, 0),
          (v217 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
      || (v227 = objc_opt_class(),
          _PKVerifyDictionaryKey(v55, CFSTR("identityAccountKeyIdentifier"), 1, v227, 0),
          (v217 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
LABEL_215:
      v19 = v217;
      v356 = v19;
LABEL_347:

      goto LABEL_348;
    }
    v373 = 0;
    v235 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("storeCard"), 1, v235, &v373);
    v236 = (void *)objc_claimAutoreleasedReturnValue();
    if (v236)
      goto LABEL_261;
    v237 = v373;
    if (!v373)
    {
      v238 = objc_opt_class();
      _PKVerifyDictionaryKey(v55, CFSTR("eventTicket"), 1, v238, &v373);
      v236 = (void *)objc_claimAutoreleasedReturnValue();
      if (v236)
        goto LABEL_261;
      v237 = v373;
      if (!v373)
      {
        v239 = objc_opt_class();
        _PKVerifyDictionaryKey(v55, CFSTR("coupon"), 1, v239, &v373);
        v236 = (void *)objc_claimAutoreleasedReturnValue();
        if (v236)
          goto LABEL_261;
        v237 = v373;
        if (!v373)
        {
          v240 = objc_opt_class();
          _PKVerifyDictionaryKey(v55, CFSTR("boardingPass"), 1, v240, &v373);
          v236 = (void *)objc_claimAutoreleasedReturnValue();
          if (v236)
            goto LABEL_261;
          v241 = v373;
          if (v373)
          {
            v372 = 0;
            v242 = objc_opt_class();
            _PKVerifyDictionaryKey(v241, CFSTR("transitType"), 0, v242, &v372);
            v243 = (id)objc_claimAutoreleasedReturnValue();
            if (v243)
              goto LABEL_231;
            v244 = v372;
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
            v249 = (void *)objc_claimAutoreleasedReturnValue();
            if (v249)
            {
              v243 = 0;
            }
            else
            {
              _PKEnumValueValidateString(v244, 0, CFSTR("PKTransitType"), CFSTR("PKTransitTypeGeneric, WLTransitTypeGeneric, PKTransitTypeAir, WLTransitTypeAir, PKTransitTypeTrain, WLTransitTypeTrain, PKTransitTypeBus, WLTransitTypeBus, PKTransitTypeBoat, WLTransitTypeBoat"), v245, v246, v247, v248, 0);
              v243 = (id)objc_claimAutoreleasedReturnValue();

            }
            if (v243)
            {
LABEL_231:
              v250 = v243;
LABEL_268:
              v19 = v250;

              v356 = v19;
LABEL_346:

              goto LABEL_347;
            }

            v237 = v373;
            if (v373)
              goto LABEL_240;
          }
          v251 = objc_opt_class();
          _PKVerifyDictionaryKey(v55, CFSTR("healthPass"), 1, v251, &v373);
          v252 = (void *)objc_claimAutoreleasedReturnValue();
          if (v373 && (objc_msgSend(v445[0], "hasPrefix:", CFSTR("healthpass")) & 1) == 0)
          {
            PKValidationErrorWithReason(CFSTR("Invalid passTypeIdentifier for pass style 'healthPass'"), v253, v254, v255, v256, v257, v258, v259, (uint64_t)v347);
            v260 = objc_claimAutoreleasedReturnValue();

            v252 = (void *)v260;
          }
          if (v252)
          {
LABEL_254:
            v281 = v252;
LABEL_280:
            v19 = v281;
            v356 = v281;
            goto LABEL_346;
          }
          v237 = v373;
          if (!v373)
          {
            v261 = objc_opt_class();
            _PKVerifyDictionaryKey(v55, CFSTR("generic"), 1, v261, &v373);
            v236 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v236)
            {
              v237 = v373;
              if (v373)
                goto LABEL_240;
              v262 = objc_opt_class();
              _PKVerifyDictionaryKey(v55, CFSTR("paymentCard"), 1, v262, &v373);
              v252 = (void *)objc_claimAutoreleasedReturnValue();
              if ((PKIgnoreSignatures() & 1) == 0
                && v373
                && (objc_msgSend(v445[0], "hasPrefix:", CFSTR("paymentpass")) & 1) == 0)
              {
                PKValidationErrorWithReason(CFSTR("Invalid passTypeIdentifier for pass style 'paymentCard'"), v263, v264, v265, v266, v267, v268, v269, (uint64_t)v347);
                v270 = objc_claimAutoreleasedReturnValue();

                v252 = (void *)v270;
              }
              if (v252)
                goto LABEL_254;
              v358 = v373;
              v271 = objc_opt_class();
              if (v373)
                v272 = 0;
              else
                v272 = &v373;
              _PKVerifyDictionaryKey(v55, CFSTR("accessCard"), 1, v271, v272);
              v252 = (void *)objc_claimAutoreleasedReturnValue();
              if ((PKIgnoreSignatures() & 1) == 0
                && v373
                && (objc_msgSend(v445[0], "hasPrefix:", CFSTR("paymentpass")) & 1) == 0)
              {
                PKValidationErrorWithReason(CFSTR("Invalid passTypeIdentifier for pass style 'accessCard'"), v273, v274, v275, v276, v277, v278, v279, (uint64_t)v347);
                v280 = objc_claimAutoreleasedReturnValue();

                v252 = (void *)v280;
              }
              if (v252)
                goto LABEL_254;
              v282 = v373;
              if (!v373 || !v434)
              {
LABEL_259:
                if (v282)
                {
                  objc_msgSend(v55, "objectForKey:", CFSTR("hasAssociatedPeerPaymentAccount"));
                  v283 = (void *)objc_claimAutoreleasedReturnValue();
                  v284 = objc_msgSend(v283, "BOOLValue");

                  objc_msgSend(v55, "objectForKey:", CFSTR("isShellPass"));
                  v285 = (void *)objc_claimAutoreleasedReturnValue();
                  v286 = objc_msgSend(v285, "BOOLValue");

                  v287 = objc_opt_class();
                  _PKVerifyDictionaryKey(v55, CFSTR("hasAssociatedPeerPaymentAccount"), 1, v287, 0);
                  v236 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v236)
                    goto LABEL_261;
                  if (v358)
                    v288 = v284 | v286;
                  else
                    v288 = 1;
                  v372 = 0;
                  v289 = objc_opt_class();
                  _PKVerifyDictionaryKey(v55, CFSTR("primaryAccountIdentifier"), v288, v289, &v372);
                  v290 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v290)
                  {
                    v250 = v290;
                    goto LABEL_268;
                  }
                  v371 = 0;
                  v291 = objc_opt_class();
                  _PKVerifyDictionaryKey(v55, CFSTR("primaryAccountSuffix"), 1, v291, &v371);
                  v292 = (void *)objc_claimAutoreleasedReturnValue();
                  if (v292)
                  {
                    v356 = v292;
                    v293 = 1;
                  }
                  else
                  {
                    v370 = 0;
                    v294 = objc_opt_class();
                    _PKVerifyDictionaryKey(v55, CFSTR("originalProvisioningDate"), 1, v294, &v370);
                    v356 = (id)objc_claimAutoreleasedReturnValue();
                    if (v356)
                    {
                      v295 = v356;
                      v293 = 1;
                    }
                    else
                    {
                      v293 = 0;
                    }

                  }
                  if (v293)
                  {
                    v19 = v356;
                    goto LABEL_346;
                  }
                  v237 = v373;
                  if (v373)
                    goto LABEL_278;
                }
                else
                {
                  v356 = 0;
                }
                PKValidationErrorWithReason(CFSTR("Pass dictionary must have an entry for one of {eventTicket, coupon, storeCard, boardingPass, generic, paymentCard, accessCard}."), v273, v274, v275, v276, v277, v278, v279, (uint64_t)v347);
                v19 = (id)objc_claimAutoreleasedReturnValue();
                goto LABEL_346;
              }
              PKValidationErrorWithReason(CFSTR("paymentCard/accessCard passes cannot contain a webserviceURL"), v273, v274, v275, v276, v277, v278, v279, (uint64_t)v347);
              v236 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v236)
              {
                v282 = v373;
                goto LABEL_259;
              }
            }
LABEL_261:
            v281 = v236;
            goto LABEL_280;
          }
        }
      }
    }
LABEL_240:
    v356 = 0;
LABEL_278:
    _PKValidateStyleFields(v237, v363, v7);
    v296 = (void *)objc_claimAutoreleasedReturnValue();

    if (v296)
    {
      v281 = v296;
      goto LABEL_280;
    }
    v372 = 0;
    v297 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("backFields"), 1, v297, &v372);
    v298 = (void *)objc_claimAutoreleasedReturnValue();
    if (v298)
      goto LABEL_300;
    if (v372)
    {
      v368 = 0u;
      v369 = 0u;
      v366 = 0u;
      v367 = 0u;
      v348 = v372;
      v351 = (id)objc_msgSend(v348, "countByEnumeratingWithState:objects:count:", &v366, v435, 16);
      if (v351)
      {
        v299 = 0;
        objb = *(id *)v367;
        v349 = *MEMORY[0x1E0CB3388];
        while (2)
        {
          v300 = 0;
          v301 = v299;
          do
          {
            if (*(id *)v367 != objb)
              objc_enumerationMutation(v348);
            _PKValidateFieldDict(*(void **)(*((_QWORD *)&v366 + 1) + 8 * (_QWORD)v300), v363, CFSTR("backFields"));
            v299 = (void *)objc_claimAutoreleasedReturnValue();

            if (v299)
            {
              if (!_PKUnderlyingErrorIsWarning(v299))
              {
                v19 = v299;

                v356 = v19;
                goto LABEL_345;
              }
              objc_msgSend(v299, "userInfo");
              v302 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v302, "objectForKey:", v349);
              v303 = objc_claimAutoreleasedReturnValue();
              v304 = (void *)v303;
              if (v303)
                v305 = (void *)v303;
              else
                v305 = v299;
              v306 = v305;

              objc_msgSend(v7, "addObject:", v306);
            }
            v300 = (char *)v300 + 1;
            v301 = v299;
          }
          while (v351 != v300);
          v351 = (id)objc_msgSend(v348, "countByEnumeratingWithState:objects:count:", &v366, v435, 16);
          if (v351)
            continue;
          break;
        }

      }
    }
    v307 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("sharingProhibited"), 1, v307, 0);
    v298 = (void *)objc_claimAutoreleasedReturnValue();
    if (v298)
    {
LABEL_300:
      v19 = v298;
      v356 = v19;
LABEL_345:

      goto LABEL_346;
    }
    if (objc_msgSend(v429, "integerValue") >= 2)
    {
      v371 = 0;
      v308 = objc_opt_class();
      _PKVerifyDictionaryKey(v55, CFSTR("sharing"), 1, v308, &v371);
      v309 = (void *)objc_claimAutoreleasedReturnValue();
      if (v309)
      {
        v19 = v309;
        v356 = v19;
LABEL_317:

        goto LABEL_345;
      }
      if (v371)
      {
        if ((objc_msgSend(v445[0], "hasPrefix:", CFSTR("pass.com.apple.")) & 1) == 0)
        {
          PKValidationErrorWithReason(CFSTR("Pass is not permitted to contain the %@ key."), v310, v311, v312, v313, v314, v315, v316, (uint64_t)CFSTR("sharing"));
          v19 = (id)objc_claimAutoreleasedReturnValue();
          v356 = 0;
          goto LABEL_317;
        }
        v370 = 0;
        v317 = v371;
        v318 = objc_opt_class();
        _PKVerifyDictionaryKey(v317, CFSTR("method"), 0, v318, &v370);
        v319 = (id)objc_claimAutoreleasedReturnValue();
        if (v319)
          goto LABEL_316;
        v320 = v370;
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", 0);
        v325 = (void *)objc_claimAutoreleasedReturnValue();
        if (v325)
        {
          v319 = 0;
        }
        else
        {
          _PKEnumValueValidateString(v320, 0, CFSTR("PKPassSharingMethod"), CFSTR("PKPassSharingMethodDisabled, PKPassSharingMethodPass, PKPassSharingMethodURL"), v321, v322, v323, v324, 0xFFFFFFFF);
          v319 = (id)objc_claimAutoreleasedReturnValue();

        }
        if (v319)
          goto LABEL_316;
        v331 = v370;
        _PKEnumValueToString(1, CFSTR("PKPassSharingMethod"), CFSTR("PKPassSharingMethodDisabled, PKPassSharingMethodPass, PKPassSharingMethodURL"), v326, v327, v328, v329, v330, -1);
        v332 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(v331) = objc_msgSend(v331, "isEqualToString:", v332);

        if ((_DWORD)v331)
        {
          _PKValidateURLStringKey(v371, CFSTR("url"), 0, 1, 0);
          v319 = (id)objc_claimAutoreleasedReturnValue();
          if (v319
            || (v333 = v371,
                v334 = objc_opt_class(),
                _PKVerifyDictionaryKey(v333, CFSTR("text"), 1, v334, 0),
                (v319 = (id)objc_claimAutoreleasedReturnValue()) != 0))
          {
LABEL_316:
            v19 = v319;

            v356 = v19;
            goto LABEL_317;
          }
        }

      }
    }
    v371 = 0;
    v335 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("auxiliaryCapabilities"), 1, v335, &v371);
    v336 = (void *)objc_claimAutoreleasedReturnValue();
    if (v336)
      goto LABEL_324;
    v337 = v371;
    if (v371)
      goto LABEL_323;
    v338 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("auxiliaryRegistrationRequirements"), 1, v338, &v371);
    v336 = (void *)objc_claimAutoreleasedReturnValue();
    if (v336)
    {
LABEL_324:
      v356 = v336;
LABEL_344:

      v19 = v356;
      goto LABEL_345;
    }
    v337 = v371;
    if (v371)
    {
LABEL_323:
      _PKValidateAuxiliaryRegistrationRequirementsDict(v337);
      v336 = (void *)objc_claimAutoreleasedReturnValue();
      if (v336)
        goto LABEL_324;
    }
    v370 = 0;
    v339 = objc_opt_class();
    _PKVerifyDictionaryKey(v55, CFSTR("barcodeSettings"), 1, v339, &v370);
    v340 = (void *)objc_claimAutoreleasedReturnValue();
    if (v340
      || v370 && (_PKValidateBarcodeSettingsDict(v370), (v340 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v356 = v340;
    }
    else
    {
      v365 = 0;
      v341 = objc_opt_class();
      _PKVerifyDictionaryKey(v55, CFSTR("borderStyle"), 1, v341, &v365);
      v342 = (void *)objc_claimAutoreleasedReturnValue();
      if (v342
        || (v343 = objc_opt_class(),
            _PKVerifyDictionaryKey(v55, CFSTR("cardholderInfoSectionTitle"), 1, v343, 0),
            (v342 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
        || (_PKValidateDynamicLayerConfiguration(v55), (v342 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
        || (_PKValidatePrivateTopLevelPassStructure(v5, v363, v7),
            (v342 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
      {
        v356 = v342;
      }
      else
      {
        v364 = 0;
        v344 = objc_opt_class();
        _PKVerifyDictionaryKey(v55, CFSTR("muteReadyForUseNotification"), 1, v344, &v364);
        v356 = (id)objc_claimAutoreleasedReturnValue();
        if (v356)
        {
          v345 = v356;
        }
        else if (locationa)
        {
          if (objc_msgSend(v7, "count"))
            v346 = v7;
          else
            v346 = 0;
          objc_storeStrong(locationa, v346);
        }

      }
    }

    goto LABEL_344;
  }
  v19 = v139;
  v356 = v19;
LABEL_354:
  v148 = *(id *)buf;
LABEL_355:

LABEL_356:
LABEL_357:

LABEL_116:
LABEL_117:

LABEL_118:
LABEL_119:

LABEL_120:
LABEL_97:
  v97 = v418;
LABEL_98:

LABEL_99:
LABEL_66:

  v45 = v356;
LABEL_39:

  v16 = v361;
  v8 = v363;
LABEL_36:

LABEL_26:
LABEL_27:

  return v19;
}

void _PKShoutPassValidationError(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  const __CFString *v10;
  int v11;
  const __CFString *v12;
  __int16 v13;
  id v14;
  __int16 v15;
  void *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = a1;
  v5 = objc_msgSend(v4, "code");
  objc_msgSend(v4, "userInfo");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v6, "objectForKey:", *MEMORY[0x1E0CB3388]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedDescription");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  PKLogFacilityTypeGetObject(0);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    v10 = CFSTR("Unknown error");
    if (v5 == 2)
      v10 = CFSTR("Unsupported version error");
    v11 = 138543874;
    if (v5 == 1)
      v10 = CFSTR("Invalid data error");
    v12 = v10;
    v13 = 2114;
    v14 = v3;
    v15 = 2114;
    v16 = v8;
    _os_log_error_impl(&dword_18FC92000, v9, OS_LOG_TYPE_ERROR, "%{public}@ reading pass %{public}@. %{public}@", (uint8_t *)&v11, 0x20u);
  }

}

BOOL _CertValidityStartDateIsPastCutoff(void *a1)
{
  uint64_t v1;
  id v2;
  double v3;
  double v4;

  v1 = qword_1ECF22370;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF22370, &__block_literal_global_49);
  objc_msgSend(v2, "timeIntervalSinceDate:", _MergedGlobals_210);
  v4 = v3;

  return v4 >= 0.0;
}

const __CFArray *_PKCertificateCopyValuesForOID()
{
  const __CFArray *v0;
  const __CFArray *v1;
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  const void *v5;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFArray *Copy;
  const __CFArray *v10;
  CFTypeID v11;

  v0 = (const __CFArray *)SecCertificateCopyProperties();
  if (!v0)
    return 0;
  v1 = v0;
  Count = CFArrayGetCount(v0);
  if (Count < 1)
    goto LABEL_7;
  v3 = Count;
  v4 = 0;
  v5 = (const void *)*MEMORY[0x1E0CD6FC8];
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v1, v4);
    Value = CFDictionaryGetValue(ValueAtIndex, v5);
    if (Value)
    {
      if (CFEqual(Value, CFSTR("1.2.840.113635.100.6.1.26")))
        break;
    }
    if (v3 == ++v4)
      goto LABEL_7;
  }
  v10 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E0CD6FE0]);
  Copy = v10;
  if (!v10)
    goto LABEL_8;
  v11 = CFGetTypeID(v10);
  if (v11 == CFArrayGetTypeID())
    Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Copy);
  else
LABEL_7:
    Copy = 0;
LABEL_8:
  CFRelease(v1);
  return Copy;
}

id _PKValidateVersion(void *a1, id *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id obj;
  _QWORD v20[2];
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  obj = 0;
  v3 = a1;
  v4 = objc_opt_class();
  _PKVerifyDictionaryKey(v3, CFSTR("formatVersion"), 0, v4, &obj);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    v6 = v5;
  }
  else
  {
    if (a2)
      objc_storeStrong(a2, obj);
    if ((objc_msgSend(&unk_1E2C3DE40, "containsObject:", obj) & 1) != 0)
    {
      v6 = 0;
    }
    else
    {
      v7 = (void *)MEMORY[0x1E0CB3940];
      objc_msgSend(&unk_1E2C3DE40, "componentsJoinedByString:", CFSTR(", "));
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "stringWithFormat:", CFSTR("This version of the operating system only supports passes of versions [%@], and this pass has version %@."), v8, obj);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      v10 = (void *)MEMORY[0x1E0CB35C8];
      v22 = *MEMORY[0x1E0CB2D50];
      v11 = v22;
      v23[0] = v9;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, &v22, 1);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 2, v12);
      v13 = (void *)objc_claimAutoreleasedReturnValue();

      v14 = (void *)MEMORY[0x1E0CB35C8];
      v20[0] = v11;
      PKLocalizedString(CFSTR("PASS_VERSION_ERROR"), 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v20[1] = *MEMORY[0x1E0CB3388];
      v21[0] = v15;
      v21[1] = v13;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v21, v20, 2);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 2, v16);
      v17 = (void *)objc_claimAutoreleasedReturnValue();

      v6 = v17;
    }
  }

  return v6;
}

id _PKValidateURLStringKey(void *a1, void *a2, int a3, int a4, id *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char v23;
  id v24;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v36 = 0;
  v10 = a1;
  v11 = objc_opt_class();
  _PKVerifyDictionaryKey(v10, v9, a3, v11, &v36);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
    v13 = 1;
  else
    v13 = v36 == 0;
  if (!v13)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    if (v21)
    {
      if (!a4
        || PKAllowHTTP()
        || (objc_msgSend(v21, "scheme"),
            v22 = (void *)objc_claimAutoreleasedReturnValue(),
            v23 = objc_msgSend(v22, "isEqual:", CFSTR("https")),
            v22,
            (v23 & 1) != 0))
      {
        if (a5)
          objc_storeStrong(a5, v21);

        goto LABEL_12;
      }
      PKLogFacilityTypeGetObject(0);
      v26 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        objc_msgSend(v21, "scheme");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543874;
        v38 = v9;
        v39 = 2114;
        v40 = v21;
        v41 = 2114;
        v42 = v34;
        _os_log_error_impl(&dword_18FC92000, v26, OS_LOG_TYPE_ERROR, "scheme of %{public}@ '%{public}@' needs to be an https rather than %{public}@.", buf, 0x20u);

      }
      objc_msgSend(v21, "scheme");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      PKValidationErrorWithReason(CFSTR("scheme of %@ '%@' needs to be an https rather than %@."), v27, v28, v29, v30, v31, v32, v33, (uint64_t)v9);
      v24 = (id)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      PKValidationErrorWithReason(CFSTR("%@ '%@' is not a valid URL."), v14, v15, v16, v17, v18, v19, v20, (uint64_t)v9);
      v24 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_15;
  }
LABEL_12:
  v24 = v12;
LABEL_15:

  return v24;
}

id _PKVerifyDateDictionaryKey(void *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a2;
  objc_msgSend(a1, "objectForKey:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(v4, 0, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 0;
      if (!v12)
      {
        PKValidationErrorWithReason(CFSTR("Unable to parse %@ %@ as a date. We expect dates in \"W3C date time stamp format\", either \"Complete date plus hours and minutes\" or \"Complete date plus hours, minutes and seconds\". For example, 1980-05-07T10:30-05:00."), v5, v6, v7, v8, v9, v10, v11, (uint64_t)v3);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
      }

    }
    else
    {
      objc_opt_class();
      PKValidationErrorWithReason(CFSTR("Value for key '%@' must be of class NSString, but is actually of class %@."), v14, v15, v16, v17, v18, v19, v20, (uint64_t)v3);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v13 = 0;
  }

  return v13;
}

id _PKValidateColorString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v1 = a1;
  +[PKColor colorFromString:](PKColor, "colorFromString:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    v10 = 0;
  }
  else
  {
    PKValidationErrorWithReason(CFSTR("Unable to parse color string '%@'."), v3, v4, v5, v6, v7, v8, v9, (uint64_t)v1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v10;
}

id _PKValidateBarcodeDict(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  id v13;
  CFStringEncoding v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFStringEncoding v22;
  uint64_t v23;
  const __CFString *v24;
  CFIndex Bytes;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFStringRef theString;
  id v34;
  __CFString *v35;
  CFRange v36;

  v1 = a1;
  v35 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("message"), 0, v2, (id *)&v35);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v34 = 0;
    v6 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("format"), 0, v6, &v34);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    if (v7
      || (v8 = objc_opt_class(),
          _PKVerifyDictionaryKey(v1, CFSTR("altText"), 1, v8, 0),
          (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
      || (v9 = objc_opt_class(),
          _PKVerifyDictionaryKey(v1, CFSTR("header"), 1, v9, 0),
          (v7 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v4 = v7;
      v5 = v4;
LABEL_7:

      goto LABEL_8;
    }
    theString = 0;
    v11 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("messageEncoding"), 0, v11, (id *)&theString);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v12;
    if (v12)
    {
      v13 = v12;
    }
    else
    {
      v14 = CFStringConvertIANACharSetNameToEncoding(theString);
      if (v14 == -1)
      {
        PKValidationErrorWithReason(CFSTR("message encoding \"%@\" is not an IANA character set name."), v15, v16, v17, v18, v19, v20, v21, (uint64_t)theString);
      }
      else
      {
        v22 = v14;
        v23 = -[__CFString length](v35, "length");
        v24 = v35;
        v36.length = -[__CFString length](v35, "length");
        v36.location = 0;
        Bytes = CFStringGetBytes(v24, v36, v22, 0, 0, 0, 0, 0);
        v5 = 0;
        if (v23 == Bytes)
        {
LABEL_17:

          goto LABEL_7;
        }
        PKValidationErrorWithReason(CFSTR("barcode message '%@' isn't encodable with encoding '%@'."), v26, v27, v28, v29, v30, v31, v32, (uint64_t)v35);
      }
      v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v5 = v13;
    goto LABEL_17;
  }
  v4 = v3;
  v5 = v4;
LABEL_8:

  return v5;
}

id _PKValidateSemanticsDict(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;

  v3 = a1;
  v4 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = __Block_byref_object_copy__18;
  v15 = __Block_byref_object_dispose__18;
  v16 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___PKValidateSemanticsDict_block_invoke;
  v8[3] = &unk_1E2AC7780;
  v5 = v4;
  v9 = v5;
  v10 = &v11;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v8);
  v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_18FFDDB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _PKValidateNFCDict(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  const __CFData *v10;
  CFDataRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v22;
  id v23;
  id v24;

  v1 = a1;
  v24 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("message"), 0, v2, &v24);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    v4 = v3;
  }
  else
  {
    v23 = 0;
    v5 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("requiresAuthentication"), 1, v5, &v23);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6)
    {
      v4 = v6;
    }
    else
    {
      v22 = 0;
      v7 = objc_opt_class();
      _PKVerifyDictionaryKey(v1, CFSTR("encryptionPublicKey"), 1, v7, &v22);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (v22)
      {
        v9 = objc_alloc(MEMORY[0x1E0C99D50]);
        v10 = (const __CFData *)objc_msgSend(v9, "initWithBase64EncodedString:options:", v22, 0);
        v11 = PKCreatePublicKeyFromDER(v10);
        if (v11)
        {
          CFRelease(v11);
        }
        else
        {
          PKValidationErrorWithReason(CFSTR("nfc encryptionPublicKey '%@' isn't a valid EC compact public key. Valid curves are secp256r1."), v12, v13, v14, v15, v16, v17, v18, (uint64_t)v22);
          v20 = objc_claimAutoreleasedReturnValue();

          v8 = (void *)v20;
        }

        v19 = v22;
      }
      else
      {
        v19 = 0;
      }
      v4 = v8;

    }
  }

  return v4;
}

id _PKValidateStyleFields(void *a1, void *a2, void *a3)
{
  uint64_t i;
  void *v6;
  uint64_t v7;
  void *v8;
  __CFString *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  id v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  _BYTE v52[128];
  _QWORD v53[6];
  _QWORD v54[8];

  v54[6] = *MEMORY[0x1E0C80C00];
  v37 = a1;
  v41 = a2;
  v40 = a3;
  v53[0] = CFSTR("primaryFields");
  v53[1] = CFSTR("secondaryFields");
  v54[0] = CFSTR("kValidationFailsOnWarning");
  v54[1] = CFSTR("kValidationLogsWarnings");
  v53[2] = CFSTR("auxiliaryFields");
  v53[3] = CFSTR("headerFields");
  v54[2] = CFSTR("kValidationFailsOnWarning");
  v54[3] = CFSTR("kValidationFailsOnWarning");
  v53[4] = CFSTR("backFields");
  v53[5] = CFSTR("additionalInfoFields");
  v54[4] = CFSTR("kValidationLogsWarnings");
  v54[5] = CFSTR("kValidationLogsWarnings");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 6);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v35 = objc_msgSend(&unk_1E2C3DE58, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
  if (v35)
  {
    v34 = *(_QWORD *)v48;
    v39 = *MEMORY[0x1E0CB3388];
    while (2)
    {
      for (i = 0; i != v35; ++i)
      {
        if (*(_QWORD *)v48 != v34)
          objc_enumerationMutation(&unk_1E2C3DE58);
        v6 = *(void **)(*((_QWORD *)&v47 + 1) + 8 * i);
        v46 = 0;
        v7 = objc_opt_class();
        _PKVerifyDictionaryKey(v37, v6, 1, v7, &v46);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v8)
        {
          v31 = v8;

          goto LABEL_34;
        }
        objc_msgSend(v36, "objectForKeyedSubscript:", v6);
        v9 = (__CFString *)objc_claimAutoreleasedReturnValue();
        v42 = 0u;
        v43 = 0u;
        v44 = 0u;
        v45 = 0u;
        v10 = v46;
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
        if (v11)
        {
          v12 = v11;
          v38 = i;
          v33 = a2;
          v13 = *(_QWORD *)v43;
          while (2)
          {
            for (j = 0; j != v12; ++j)
            {
              if (*(_QWORD *)v43 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                objc_opt_class();
                PKValidationErrorWithReason(CFSTR("Entry in %@ array needs to be a dictionary. Found object of class %@."), v24, v25, v26, v27, v28, v29, v30, (uint64_t)v6);
                a2 = (void *)objc_claimAutoreleasedReturnValue();
                v23 = 0;
                goto LABEL_26;
              }
              _PKValidateFieldDict(v15, v41, v6);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              v17 = v16;
              if (v16)
              {
                if (v9 != CFSTR("kValidationLogsWarnings") || !_PKUnderlyingErrorIsWarning(v16))
                {
                  v23 = 0;
                  a2 = v17;
                  goto LABEL_26;
                }
                objc_msgSend(v17, "userInfo");
                v18 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v18, "objectForKey:", v39);
                v19 = objc_claimAutoreleasedReturnValue();
                v20 = (void *)v19;
                if (v19)
                  v21 = (void *)v19;
                else
                  v21 = v17;
                v22 = v21;

                objc_msgSend(v40, "addObject:", v22);
              }

            }
            v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
            v23 = 1;
            if (v12)
              continue;
            break;
          }
          a2 = v33;
LABEL_26:
          i = v38;
        }
        else
        {
          v23 = 1;
        }

        if (!v23)
        {
          v31 = a2;
          goto LABEL_34;
        }
      }
      v31 = 0;
      v35 = objc_msgSend(&unk_1E2C3DE58, "countByEnumeratingWithState:objects:count:", &v47, v52, 16);
      if (v35)
        continue;
      break;
    }
  }
  else
  {
    v31 = 0;
  }
LABEL_34:

  return v31;
}

id _PKValidateFieldDict(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BOOL4 v25;
  uint64_t v26;
  __CFString *v28;
  __CFString *v29;
  __CFString *v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t i;
  void *v122;
  void *v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  uint64_t v137;
  void *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id obj;
  uint64_t v149;
  id v150;
  id v151;
  id v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  id v157;
  __int128 v158;
  id v159;
  id v160;
  id v161;
  id v162;
  id v163;
  id v164;
  id v165;
  __int128 v166;
  id v167;
  id v168;
  id v169;
  _BYTE v170[128];
  uint64_t v171;

  v171 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v169 = 0;
  v8 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("key"), 0, v8, &v169);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = v9;
    v11 = v10;
    goto LABEL_15;
  }
  if (objc_msgSend(v6, "containsObject:", v169))
  {
    PKValidationWarningWithReason(CFSTR("more than one field has the key '%@'. Field keys must be unique."), v12, (uint64_t)v169, v13, v14, v15, v16, v17, (uint64_t)v169);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v6, "addObject:", v169);
    v18 = 0;
  }
  v19 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("label"), 1, v19, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v20)
  {
    v10 = v20;

    v11 = v10;
    goto LABEL_15;
  }
  v168 = 0;
  v21 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("changeMessage"), 1, v21, &v168);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (v22)
  {
    v10 = v22;
    v11 = v10;
    goto LABEL_14;
  }
  v167 = 0;
  v23 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("foreignReferenceType"), 1, v23, &v167);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  if (v24
    || (v25 = v167 == 0,
        v26 = objc_opt_class(),
        _PKVerifyDictionaryKey(v5, CFSTR("foreignReferenceIdentifier"), v25, v26, 0),
        (v24 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v24;
    v11 = v10;
    goto LABEL_13;
  }
  v28 = (__CFString *)v169;
  v29 = CFSTR("auto_top_up_field_value");
  if (v28 == v29)
  {

  }
  else
  {
    v30 = v29;
    if (!v28 || !v29)
    {

      goto LABEL_25;
    }
    v31 = -[__CFString isEqualToString:](v28, "isEqualToString:", v29);

    if (!v31)
      goto LABEL_25;
  }
  *((_QWORD *)&v166 + 1) = 0;
  v32 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("amount"), 0, v32, (id *)&v166 + 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  if (v33)
  {
    v10 = v33;
LABEL_31:

    v11 = v10;
    goto LABEL_13;
  }
  *(_QWORD *)&v166 = 0;
  v38 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("threshold"), 0, v38, (id *)&v166);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  if (v39)
  {
    v10 = v39;

    goto LABEL_31;
  }

LABEL_25:
  *((_QWORD *)&v166 + 1) = 0;
  v34 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("startDate"), 1, v34, (id *)&v166 + 1);
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  if (v35)
  {
    v10 = v35;
    v11 = v10;
    goto LABEL_97;
  }
  *(_QWORD *)&v166 = 0;
  v36 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("endDate"), 1, v36, (id *)&v166);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  if (v37)
  {
    v10 = v37;
    v11 = v10;
    goto LABEL_96;
  }
  v165 = 0;
  if (v166 == 0)
  {
    if (v167)
      v42 = 1;
    else
      v42 = 2;
    v43 = objc_opt_class();
    _PKVerifyDictionaryKey(v5, CFSTR("value"), v42, v43, &v165);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    if (v44)
    {
      v10 = v44;
      v11 = v10;
      goto LABEL_95;
    }
    if (v165)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          v51 = (uint64_t)v169;
          objc_opt_class();
          PKValidationErrorWithReason(CFSTR("value in field with key %@ is of class %@. This needs to be a string or a number."), v52, v53, v54, v55, v56, v57, v58, v51);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v10 = 0;
          goto LABEL_95;
        }
      }
    }
  }
  v164 = 0;
  v40 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("link"), 1, v40, &v164);
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  if (v41)
  {
    v10 = v41;
    v11 = v10;
    goto LABEL_94;
  }
  v163 = 0;
  v45 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("textAlignment"), 1, v45, &v163);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  if (v46
    || v163
    && (_PKEnumValueValidateString(v163, 0, CFSTR("PKTextAlignment"), CFSTR("PKTextAlignmentLeft, PKTextAlignmentCenter, PKTextAlignmentRight, PKTextAlignmentNatural"), v47, v48, v49, v50, 0), (v46 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v46;
    v11 = v10;
    goto LABEL_93;
  }
  v162 = 0;
  v59 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("dateStyle"), 1, v59, &v162);
  v60 = (void *)objc_claimAutoreleasedReturnValue();
  if (v60
    || v162
    && (_PKEnumValueValidateString(v162, 0, CFSTR("PKDateStyle"), CFSTR("PKDateStyleNone, WLDateStyleNone,PKDateStyleShort, WLDateStyleShort, PKDateStyleMedium, WLDateStyleMedium, PKDateStyleLong, WLDateStyleLong, PKDateStyleFull, WLDateStyleFull"), v61, v62, v63, v64, 0), (v60 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v60;
    v11 = v10;
    goto LABEL_92;
  }
  v161 = 0;
  v65 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("timeStyle"), 1, v65, &v161);
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  if (v66
    || v161
    && (_PKEnumValueValidateString(v161, 0, CFSTR("PKDateStyle"), CFSTR("PKDateStyleNone, WLDateStyleNone,PKDateStyleShort, WLDateStyleShort, PKDateStyleMedium, WLDateStyleMedium, PKDateStyleLong, WLDateStyleLong, PKDateStyleFull, WLDateStyleFull"), v67, v68, v69, v70, 0), (v66 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v66;
    v11 = v10;
    goto LABEL_91;
  }
  v160 = 0;
  v71 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("isRelative"), 1, v71, &v160);
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  if (v72)
  {
    v10 = v72;
    v11 = v10;
    goto LABEL_90;
  }
  v159 = 0;
  v73 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("ignoresTimeZone"), 1, v73, &v159);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  if (v74)
  {
    v10 = v74;
    v11 = v10;
    goto LABEL_89;
  }
  *((_QWORD *)&v158 + 1) = 0;
  v75 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("numberStyle"), 1, v75, (id *)&v158 + 1);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  if (v76
    || *((_QWORD *)&v158 + 1)
    && (_PKEnumValueValidateString(*((void **)&v158 + 1), 0, CFSTR("PKNumberStyle"), CFSTR("PKNumberStyleDecimal, WLNumberStyleDecimal, PKNumberStylePercent, WLNumberStylePercent, PKNumberStyleScientific, WLNumberStyleScientific, PKNumberStyleSpellOut, WLNumberStyleSpellOut"), v77, v78, v79, v80, 1u), (v76 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
    v10 = v76;
    v11 = v10;
    goto LABEL_88;
  }
  *(_QWORD *)&v158 = 0;
  v81 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("currencyCode"), 1, v81, (id *)&v158);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  if (v82)
    goto LABEL_86;
  if (v166 == 0 && (v162 || v161 || v160 || v159))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v90 = (uint64_t)v169;
      objc_opt_class();
      PKValidationWarningWithReason(CFSTR("value in field with key %@ is of class %@. There are date formatting options, so this should be a string parseable as a date."), v91, v92, v93, v94, v95, v96, v97, v90);
      v98 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v98;
    }
    _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(v165, 0, 0);
    v99 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v99)
    {
      PKValidationWarningWithReason(CFSTR("Unable to parse %@ %@ as a date. We expect dates in \"W3C date time stamp format\", either \"Complete date plus hours and minutes\" or \"Complete date plus hours, minutes and seconds\". For example, 1980-05-07T10:30-05:00."), v83, v84, v85, v86, v87, v88, v89, (uint64_t)v169);
      v100 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v100;
    }
    if (v158 != 0)
    {
      PKValidationWarningWithReason(CFSTR("value in field %@ has both date and number formatting options. Choose one."), v83, v84, v85, v86, v87, v88, v89, (uint64_t)v169);
      v101 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v101;
    }
  }
  v102 = *((_QWORD *)&v158 + 1);
  v103 = v158;
  if (*((_QWORD *)&v158 + 1) && (_QWORD)v158)
  {
    PKValidationWarningWithReason(CFSTR("value in field %@ has both a numberStyle and a currencyCode. It should be one or the other"), v83, v84, v85, v86, v87, v88, v89, (uint64_t)v169);
    v104 = objc_claimAutoreleasedReturnValue();

    v102 = *((_QWORD *)&v158 + 1);
    v103 = v158;
    v18 = (void *)v104;
  }
  if (v102 | v103)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v105 = (uint64_t)v169;
      objc_opt_class();
      PKValidationWarningWithReason(CFSTR("value in field with key %@ is of class %@. There are number formatting options, so this should be a number."), v106, v107, v108, v109, v110, v111, v112, v105);
      v113 = objc_claimAutoreleasedReturnValue();

      v18 = (void *)v113;
    }
  }
  v114 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("imageLabel"), 1, v114, 0);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  if (v82
    || (v115 = objc_opt_class(),
        _PKVerifyDictionaryKey(v5, CFSTR("imageValue"), 1, v115, 0),
        (v82 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
    || (v116 = objc_opt_class(),
        _PKVerifyDictionaryKey(v5, CFSTR("imageAccessory"), 1, v116, 0),
        (v82 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
  {
LABEL_86:
    v10 = v82;
    v11 = v10;
    goto LABEL_87;
  }
  v157 = 0;
  v117 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("dataDetectorTypes"), 1, v117, &v157);
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  if (v118)
  {
    v10 = v118;
    v11 = v10;
    goto LABEL_131;
  }
  if (!v157)
    goto LABEL_111;
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  v154 = 0u;
  obj = v157;
  v119 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v170, 16);
  if (!v119)
    goto LABEL_110;
  v120 = v119;
  v149 = *(_QWORD *)v154;
  while (2)
  {
    for (i = 0; i != v120; ++i)
    {
      if (*(_QWORD *)v154 != v149)
        objc_enumerationMutation(obj);
      v122 = *(void **)(*((_QWORD *)&v153 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        v128 = (uint64_t)v169;
        objc_opt_class();
        PKValidationErrorWithReason(CFSTR("value in field %@ has an item of class %@ in the dataDetectorTypes array. These should be strings."), v129, v130, v131, v132, v133, v134, v135, v128);
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = 0;
LABEL_117:
        v136 = obj;
        goto LABEL_130;
      }
      PKDataDetectorTypesValidateString(v122);
      v123 = (void *)objc_claimAutoreleasedReturnValue();
      if (v123)
      {
        v10 = v123;
        v11 = v10;
        goto LABEL_117;
      }
    }
    v120 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v153, v170, 16);
    if (v120)
      continue;
    break;
  }
LABEL_110:

LABEL_111:
  v152 = 0;
  v124 = objc_opt_class();
  _PKVerifyDictionaryKey(v5, CFSTR("cellStyle"), 1, v124, &v152);
  v125 = (void *)objc_claimAutoreleasedReturnValue();
  if (v125)
  {
    v10 = v125;
    v11 = v10;
  }
  else
  {
    v151 = 0;
    v126 = objc_opt_class();
    _PKVerifyDictionaryKey(v5, CFSTR("semantics"), 1, v126, &v151);
    v127 = (void *)objc_claimAutoreleasedReturnValue();
    if (v127
      || v151 && (_PKValidateSemanticsDict(v151, v169), (v127 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
    {
      v10 = v127;
      v11 = v10;
    }
    else
    {
      v150 = 0;
      v137 = objc_opt_class();
      _PKVerifyDictionaryKey(v5, CFSTR("row"), 1, v137, &v150);
      v138 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = v138;
      if (v138)
      {
        v139 = v138;
      }
      else
      {
        if (v150
          && (unint64_t)objc_msgSend(v150, "unsignedIntegerValue") >= 2
          && objc_msgSend(v7, "isEqualToString:", CFSTR("auxiliaryFields")))
        {
          PKValidationWarningWithReason(CFSTR("row in field with key %@ must have the value of 0 or 1."), v140, v141, v142, v143, v144, v145, v146, (uint64_t)v169);
          v147 = objc_claimAutoreleasedReturnValue();

          v18 = (void *)v147;
        }
        v139 = v18;
        v18 = v139;
      }
      v11 = v139;

    }
  }
  v136 = v152;
LABEL_130:

LABEL_131:
LABEL_87:

LABEL_88:
LABEL_89:

LABEL_90:
LABEL_91:

LABEL_92:
LABEL_93:

LABEL_94:
LABEL_95:

LABEL_96:
LABEL_97:

LABEL_13:
LABEL_14:

LABEL_15:
  return v11;
}

uint64_t _PKUnderlyingErrorIsWarning(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(a1, "userInfo");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKey:", *MEMORY[0x1E0CB3388]);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "userInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("PKIsWarning"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
    v5 = objc_msgSend(v4, "BOOLValue");
  else
    v5 = 0;

  return v5;
}

id _PKValidateAuxiliaryRegistrationRequirementsDict(void *a1)
{
  id v1;
  void *v2;

  v1 = a1;
  _PKValidateAuxiliaryReqistrationRequirements(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    _PKValidateAuxiliaryReqistrationRequirements(v1);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _PKValidateBarcodeSettingsDict(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  _PKValidateURLStringKey(v1, CFSTR("barcodeServiceURL"), 1, 1, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2)
  {
    v3 = objc_opt_class();
    _PKVerifyDictionaryKey(v1, CFSTR("initialBarcodeFetchCount"), 1, v3, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id _PKValidateDynamicLayerConfiguration(void *a1)
{
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  int v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;

  v37 = 0;
  v1 = a1;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("dynamicLayerConfiguration"), 1, v2, &v37);
  v3 = (id)objc_claimAutoreleasedReturnValue();

  if (v3)
    goto LABEL_2;
  v3 = v37;
  if (!v37)
    goto LABEL_2;
  v36 = 0;
  v5 = objc_opt_class();
  _PKVerifyDictionaryKey(v3, CFSTR("version"), 0, v5, &v36);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v3 = v6;

    goto LABEL_3;
  }
  v35 = 0;
  v7 = v37;
  v8 = objc_opt_class();
  _PKVerifyDictionaryKey(v7, CFSTR("parallaxEnabled"), 1, v8, &v35);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v3 = v9;
    v10 = 1;
  }
  else
  {
    v34 = 0;
    v11 = v37;
    v12 = objc_opt_class();
    _PKVerifyDictionaryKey(v11, CFSTR("backgroundParallaxEmitter"), 1, v12, &v34);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    if (v13)
    {
      v3 = v13;
      v10 = 1;
    }
    else
    {
      v33 = 0;
      v14 = v37;
      v15 = objc_opt_class();
      _PKVerifyDictionaryKey(v14, CFSTR("neutralEmitter"), 1, v15, &v33);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        v3 = v16;
        v10 = 1;
      }
      else
      {
        v32 = 0;
        v17 = v37;
        v18 = objc_opt_class();
        _PKVerifyDictionaryKey(v17, CFSTR("foregroundParallaxEmitter"), 1, v18, &v32);
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        if (v19)
        {
          v3 = v19;
          v10 = 1;
        }
        else
        {
          v31 = 0;
          v20 = v37;
          v21 = objc_opt_class();
          _PKVerifyDictionaryKey(v20, CFSTR("staticOverlayEmitter"), 1, v21, &v31);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          if (v22)
            goto LABEL_16;
          if (v34)
          {
            _PKValidateEmitterLayerConfiguration(v34);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            if (v22)
              goto LABEL_16;
          }
          if (v33
            && (_PKValidateEmitterLayerConfiguration(v33), (v22 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
            || v32
            && (_PKValidateEmitterLayerConfiguration(v32), (v22 = (void *)objc_claimAutoreleasedReturnValue()) != 0)
            || v31
            && (_PKValidateEmitterLayerConfiguration(v31), (v22 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
          {
LABEL_16:
            v3 = v22;
            v10 = 1;
          }
          else
          {
            v30 = 0;
            v23 = v37;
            v24 = objc_opt_class();
            _PKVerifyDictionaryKey(v23, CFSTR("transactionEffect"), 1, v24, &v30);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            if (v25
              || v30
              && (_PKValidateTransactionEffectConfiguration(v30),
                  (v25 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
            {
              v3 = v25;
              v10 = 1;
            }
            else
            {
              v29 = 0;
              v26 = v37;
              v27 = objc_opt_class();
              _PKVerifyDictionaryKey(v26, CFSTR("crossDissolve"), 1, v27, &v29);
              v28 = (void *)objc_claimAutoreleasedReturnValue();
              if (v28
                || v29
                && (_PKValidateCrossDissolveConfiguration(v29),
                    (v28 = (void *)objc_claimAutoreleasedReturnValue()) != 0))
              {
                v3 = v28;
                v10 = 1;
              }
              else
              {
                v3 = 0;
                v10 = 0;
              }

            }
          }

        }
      }

    }
  }

  if (!v10)
LABEL_2:
    v3 = v3;
LABEL_3:

  return v3;
}

id _PKValidatePrivateTopLevelPassStructure(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  BOOL v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id obj;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  id v53;
  id v54;
  id v55;
  _BYTE v56[128];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v55 = 0;
  PKPrivateObjectDictionaryWithError(v5, &v55);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = v55;
  if (v9)
    v10 = 1;
  else
    v10 = v8 == 0;
  if (!v10)
  {
    v13 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB34D0]), "initWithURL:", v5);
    v21 = (void *)v13;
    if (!v13)
    {
      PKValidationErrorWithReason(CFSTR("NSBundle init returns nil for URL %@"), v14, v15, v16, v17, v18, v19, v20, (uint64_t)v5);
      v12 = (id)objc_claimAutoreleasedReturnValue();
      v11 = 0;
      goto LABEL_19;
    }
    _PKValidateVersion(v8, 0);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    if (v22)
    {
      v11 = v22;
      v12 = v11;
LABEL_19:

      goto LABEL_20;
    }
    v54 = 0;
    v23 = objc_opt_class();
    _PKVerifyDictionaryKey(v8, CFSTR("storeCard"), 1, v23, &v54);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (v24)
      goto LABEL_17;
    v25 = v54;
    if (!v54)
    {
      v28 = objc_opt_class();
      _PKVerifyDictionaryKey(v8, CFSTR("eventTicket"), 1, v28, &v54);
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      if (v24)
        goto LABEL_17;
      v25 = v54;
      if (!v54)
      {
        v30 = objc_opt_class();
        _PKVerifyDictionaryKey(v8, CFSTR("coupon"), 1, v30, &v54);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        if (v24)
          goto LABEL_17;
        v25 = v54;
        if (!v54)
        {
          v31 = objc_opt_class();
          _PKVerifyDictionaryKey(v8, CFSTR("boardingPass"), 1, v31, &v54);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          if (v24)
            goto LABEL_17;
          v25 = v54;
          if (!v54)
          {
            v32 = objc_opt_class();
            _PKVerifyDictionaryKey(v8, CFSTR("generic"), 1, v32, &v54);
            v24 = (void *)objc_claimAutoreleasedReturnValue();
            if (v24)
              goto LABEL_17;
            v25 = v54;
            if (!v54)
            {
              v33 = objc_opt_class();
              _PKVerifyDictionaryKey(v8, CFSTR("paymentCard"), 1, v33, &v54);
              v24 = (void *)objc_claimAutoreleasedReturnValue();
              if (v24)
                goto LABEL_17;
              v25 = v54;
              if (!v54)
              {
                v34 = objc_opt_class();
                if (v54)
                  v35 = 0;
                else
                  v35 = &v54;
                _PKVerifyDictionaryKey(v8, CFSTR("accessCard"), 1, v34, v35);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                if (v24)
                  goto LABEL_17;
                v25 = v54;
                if (!v54)
                  goto LABEL_14;
              }
            }
          }
        }
      }
    }
    _PKValidateStyleFields(v25, v6, v7);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v24)
    {
LABEL_14:
      v53 = 0;
      v26 = objc_opt_class();
      _PKVerifyDictionaryKey(v8, CFSTR("auxiliaryPassInformation"), 1, v26, &v53);
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = v27;
      if (v27)
      {
        v12 = v27;
      }
      else
      {
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        obj = v53;
        v36 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
        if (v36)
        {
          v37 = v36;
          v38 = *(_QWORD *)v50;
          while (2)
          {
            for (i = 0; i != v37; ++i)
            {
              if (*(_QWORD *)v50 != v38)
                objc_enumerationMutation(obj);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                v40 = objc_opt_class();
                PKValidationErrorWithReason(CFSTR("entry in auxiliaryPassInformation array needs to be a dictionary. Found object of class %@."), v41, v42, v43, v44, v45, v46, v47, v40);
                v12 = (id)objc_claimAutoreleasedReturnValue();

                goto LABEL_46;
              }
            }
            v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
            if (v37)
              continue;
            break;
          }
        }

        v12 = 0;
      }
LABEL_46:

      goto LABEL_18;
    }
LABEL_17:
    v11 = v24;
    v12 = v11;
LABEL_18:

    goto LABEL_19;
  }
  v11 = v9;
  v12 = v11;
LABEL_20:

  return v12;
}

id _PKValidateCurrencyAmountDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("currencyCode"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (v12)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("amount"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      if (v27)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v35 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v27);
          objc_msgSend(MEMORY[0x1E0CB3598], "notANumber");
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          v37 = objc_msgSend(v35, "isEqualToNumber:", v36);

          if (v37)
          {
            PKValidationErrorWithReason(CFSTR("\"amount\" value \"%@\" for semantic key \"%@\" is not a valid number."), v38, v39, v40, v41, v42, v43, v44, (uint64_t)v27);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v45 = 0;
          }

          goto LABEL_15;
        }
        PKValidationErrorWithReason(CFSTR("\"amount\" value for semantic key \"%@\" must be a string."), v28, v29, v30, v31, v32, v33, v34, (uint64_t)v4);
      }
      else
      {
        PKValidationErrorWithReason(CFSTR("\"amount\" value not provided for semantic key \"%@\". \"amount\" is a required key for currency amount semantics."), v20, v21, v22, v23, v24, v25, v26, (uint64_t)v4);
      }
      v45 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_15:

      goto LABEL_16;
    }
    PKValidationErrorWithReason(CFSTR("\"currencyCode\" value for semantic key \"%@\" is not a string"), v13, v14, v15, v16, v17, v18, v19, (uint64_t)v4);
  }
  else
  {
    PKValidationErrorWithReason(CFSTR("\"currencyCode\" value not provided for semantic key \"%@\". \"currencyCode\" is a required key for currency amount semantics."), v5, v6, v7, v8, v9, v10, v11, (uint64_t)v4);
  }
  v45 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_16:

  return v45;
}

id _PKValidateAuxiliaryReqistrationRequirements(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  __CFString *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  id v30;
  _BYTE v31[128];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v30 = 0;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("deviceSignatures"), 1, v2, &v30);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v4 = v30;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v27;
      v25 = CFSTR("usage");
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v27 != v7)
            objc_enumerationMutation(v4);
          v9 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v17 = v9;
            v18 = objc_opt_class();
            _PKVerifyDictionaryKey(v17, CFSTR("source"), 1, v18, 0);
            v3 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v3)
            {
              v19 = objc_opt_class();
              _PKVerifyDictionaryKey(v17, CFSTR("version"), 1, v19, 0);
              v3 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v3)
              {
                v20 = objc_opt_class();
                _PKVerifyDictionaryKey(v17, CFSTR("identifier"), 0, v20, 0);
                v3 = (void *)objc_claimAutoreleasedReturnValue();
                if (!v3)
                {
                  v21 = objc_opt_class();
                  _PKVerifyDictionaryKey(v17, CFSTR("type"), 1, v21, 0);
                  v3 = (void *)objc_claimAutoreleasedReturnValue();
                  if (!v3)
                  {
                    v22 = objc_opt_class();
                    _PKVerifyDictionaryKey(v17, v25, 1, v22, 0);
                    v3 = (void *)objc_claimAutoreleasedReturnValue();
                  }
                }
              }
            }

            if (v3)
              goto LABEL_19;
          }
          else
          {
            PKValidationErrorWithReason(CFSTR("Auxiliary registration requirements array must contain dictionaries."), v10, v11, v12, v13, v14, v15, v16, (uint64_t)v25);
            v3 = (void *)objc_claimAutoreleasedReturnValue();
            if (v3)
              goto LABEL_19;
          }
        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v6);
    }
    v3 = 0;
LABEL_19:

  }
  v23 = v3;

  return v23;
}

id _PKValidateEmitterLayerConfiguration(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  v6 = 0;
  v1 = a1;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("style"), 0, v2, &v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = v3;

  return v3;
}

id _PKValidateTransactionEffectConfiguration(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  v6 = 0;
  v1 = a1;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("style"), 0, v2, &v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = v3;

  return v3;
}

id _PKValidateCrossDissolveConfiguration(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v6;

  v6 = 0;
  v1 = a1;
  v2 = objc_opt_class();
  _PKVerifyDictionaryKey(v1, CFSTR("intensity"), 0, v2, &v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
    v4 = v3;

  return v3;
}

void sub_18FFE1154(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_18FFE1678(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_18FFE1874(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFE1C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18FFE1E84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_18FFE2054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKSharingInvitationUpdateReasonToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("Unknown");
  if (a1 == 1)
    v1 = CFSTR("Accepted");
  if (a1)
    return v1;
  else
    return CFSTR("Rescinded");
}

uint64_t PKRangingSuspensionDisplayableReasonForRangingSuspensionReason(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = 1;
  if ((a1 & 2) == 0)
    v1 = (a1 >> 5) & 2;
  v2 = 4;
  if ((~(_BYTE)a1 & 0x39) != 0)
    v2 = v1;
  if ((a1 & 4) != 0)
    return 3;
  else
    return v2;
}

void sub_18FFE4318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void PDScheduledActivityClientRegister(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_msgSend(v5, "length");
  if (v7 && v6 && v8)
  {
    _ScheduledActivityQueue();
    v9 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PDScheduledActivityClientRegister_block_invoke;
    block[3] = &unk_1E2ABE0F8;
    v11 = v5;
    v12 = v6;
    v13 = v7;
    dispatch_async(v9, block);

  }
}

id _ScheduledActivityQueue()
{
  if (_MergedGlobals_211 != -1)
    dispatch_once(&_MergedGlobals_211, &__block_literal_global_51);
  return (id)qword_1ECF22380;
}

id _RegisteredClients()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v21;
  id v22;
  id v23;
  uint8_t buf[4];
  void *v25;
  __int16 v26;
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v0 = (void *)_RegisteredClients_registeredClients;
  if (_RegisteredClients_registeredClients)
    return v0;
  _ArchiveFilePath();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v2, "fileExistsAtPath:", v1))
  {
    v23 = 0;
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfFile:options:error:", v1, 1, &v23);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v23;
    v5 = v4;
    v6 = 0;
    if (v3)
    {
      if (!v4)
      {
        v22 = 0;
        v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3710]), "initForReadingFromData:error:", v3, &v22);
        v7 = v22;
        v5 = v7;
        if (v6)
        {
          if (v7)
          {
            objc_msgSend(v6, "finishDecoding");
          }
          else
          {
            v8 = (void *)MEMORY[0x1E0C99E60];
            v9 = objc_opt_class();
            v10 = objc_opt_class();
            objc_msgSend(v8, "setWithObjects:", v9, v10, objc_opt_class(), 0);
            v11 = (void *)objc_claimAutoreleasedReturnValue();
            v12 = *MEMORY[0x1E0CB2CD0];
            v21 = 0;
            objc_msgSend(v6, "decodeTopLevelObjectOfClasses:forKey:error:", v11, v12, &v21);
            v13 = (void *)objc_claimAutoreleasedReturnValue();
            v5 = v21;

            v14 = objc_msgSend(v13, "mutableCopy");
            v15 = (void *)_RegisteredClients_registeredClients;
            _RegisteredClients_registeredClients = v14;

            objc_msgSend(v6, "finishDecoding");
            if (!v5)
            {
LABEL_12:

              goto LABEL_13;
            }
          }
        }
      }
    }
    PKLogFacilityTypeGetObject(0);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      v25 = v1;
      v26 = 2114;
      v27 = v5;
      _os_log_error_impl(&dword_18FC92000, v16, OS_LOG_TYPE_ERROR, "PDScheduledActivity: error trying to read %{public}@. The data will be discarded. %{public}@.", buf, 0x16u);
    }

    v17 = (void *)_RegisteredClients_registeredClients;
    _RegisteredClients_registeredClients = 0;

    objc_msgSend(v2, "removeItemAtPath:error:", v1, 0);
    goto LABEL_12;
  }
LABEL_13:
  if (!_RegisteredClients_registeredClients)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = (void *)_RegisteredClients_registeredClients;
    _RegisteredClients_registeredClients = v18;

  }
  v0 = (void *)_RegisteredClients_registeredClients;
  return v0;
}

void _RegisterXPCActivity(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  id v7;
  const char *v8;
  void *v9;
  _QWORD handler[4];
  id v11;
  id v12;
  id v13;

  v3 = a1;
  v4 = a2;
  _XPCActivityIdentifier(v3, (uint64_t)v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = objc_retainAutorelease(v5);
    v8 = (const char *)objc_msgSend(v7, "UTF8String");
    v9 = (void *)*MEMORY[0x1E0C80748];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = ___RegisterXPCActivity_block_invoke;
    handler[3] = &unk_1E2AC7B48;
    v11 = v3;
    v12 = v4;
    v13 = v7;
    xpc_activity_register(v8, v9, handler);

  }
}

void _ArchiveRegisteredClients()
{
  dispatch_time_t v0;
  void *v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  if (qword_1ECF22388 != -1)
    dispatch_once(&qword_1ECF22388, &__block_literal_global_198);
  if (!dispatch_semaphore_wait((dispatch_semaphore_t)qword_1ECF22390, 0))
  {
    v0 = dispatch_time(0, 2000000000);
    v1 = (void *)PDOSTransactionCreate("PDScheduledActivity");
    _ScheduledActivityQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ArchiveRegisteredClients_block_invoke_2;
    block[3] = &unk_1E2ABE120;
    v5 = v1;
    v3 = v1;
    dispatch_after(v0, v2, block);

  }
}

void PDScheduledActivityClientRemove(void *a1)
{
  id v1;
  NSObject *v2;
  _QWORD block[4];
  id v4;

  v1 = a1;
  if (v1)
  {
    _ScheduledActivityQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PDScheduledActivityClientRemove_block_invoke;
    block[3] = &unk_1E2ABE120;
    v4 = v1;
    dispatch_async(v2, block);

  }
}

id _XPCActivityIdentifier(void *a1, uint64_t a2)
{
  void *v2;
  int has_internal_ui;
  NSObject *v4;
  NSObject *v5;
  uint8_t buf[4];
  void *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "stringByAppendingFormat:", CFSTR(".%@"), a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend(v2, "length") >= 0x80)
  {
    has_internal_ui = os_variant_has_internal_ui();
    PKLogFacilityTypeGetObject(0);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (has_internal_ui)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v2;
        _os_log_fault_impl(&dword_18FC92000, v5, OS_LOG_TYPE_FAULT, "XPC activity identifiers cannot be longer than 128 characters. Identifier: '%@'", buf, 0xCu);
      }

      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v8 = v2;
        _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "XPC activity identifiers cannot be longer than 128 characters. Identifier: '%@'", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18FC92000, v5, OS_LOG_TYPE_ERROR, "XPC activity identifiers cannot be longer than 128 characters", buf, 2u);
    }

  }
  return v2;
}

void PDScheduledActivityRegister(NSString *a1, NSString *a2, PDScheduledActivityCriteria *a3)
{
  _PDScheduledActivityRegister(a1, a2, a3, 0);
}

void _PDScheduledActivityRegister(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  id v11;
  _QWORD block[4];
  id v13;
  id v14;
  id v15;
  id v16;

  v11 = a1;
  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v11, "length") && objc_msgSend(v7, "length"))
  {
    _ScheduledActivityQueue();
    v10 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___PDScheduledActivityRegister_block_invoke;
    block[3] = &unk_1E2AC0F90;
    v13 = v11;
    v14 = v7;
    v15 = v8;
    v16 = v9;
    dispatch_sync(v10, block);

  }
}

void PDScheduledActivityRemove(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;

  v5 = a1;
  v3 = a2;
  if (objc_msgSend(v5, "length") && objc_msgSend(v3, "length"))
  {
    _ScheduledActivityQueue();
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PDScheduledActivityRemove_block_invoke;
    block[3] = &unk_1E2ABE0D0;
    v7 = v5;
    v8 = v3;
    dispatch_sync(v4, block);

  }
}

id PDScheduledActivityClients()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__19;
  v8 = __Block_byref_object_dispose__19;
  v9 = 0;
  _ScheduledActivityQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDScheduledActivityClients_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

id PDScheduledActivitiesForClient(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v1 = a1;
  v8 = 0;
  v9 = &v8;
  v10 = 0x3032000000;
  v11 = __Block_byref_object_copy__19;
  v12 = __Block_byref_object_dispose__19;
  v13 = 0;
  if (objc_msgSend(v1, "length"))
  {
    _ScheduledActivityQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __PDScheduledActivitiesForClient_block_invoke;
    v5[3] = &unk_1E2AC1FC0;
    v6 = v1;
    v7 = &v8;
    dispatch_sync(v2, v5);

  }
  v3 = (id)v9[5];
  _Block_object_dispose(&v8, 8);

  return v3;
}

void sub_18FFE6888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL PDScheduledActivityExists(void *a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  _ScheduledActivityGetRegistration(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2 != 0;

  return v3;
}

id _ScheduledActivityGetRegistration(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  _QWORD block[4];
  id v9;
  id v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17;

  v3 = a1;
  v4 = a2;
  v12 = 0;
  v13 = &v12;
  v14 = 0x3032000000;
  v15 = __Block_byref_object_copy__19;
  v16 = __Block_byref_object_dispose__19;
  v17 = 0;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
  {
    _ScheduledActivityQueue();
    v5 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ScheduledActivityGetRegistration_block_invoke;
    block[3] = &unk_1E2AC7B98;
    v9 = v3;
    v11 = &v12;
    v10 = v4;
    dispatch_sync(v5, block);

  }
  v6 = (id)v13[5];
  _Block_object_dispose(&v12, 8);

  return v6;
}

void sub_18FFE6A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PDScheduledActivityGetContext(void *a1, void *a2)
{
  void *v2;
  void *v3;

  _ScheduledActivityGetRegistration(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activityContext");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PDScheduledActivityGetCriteria(void *a1, void *a2)
{
  void *v2;
  void *v3;

  _ScheduledActivityGetRegistration(a1, a2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "activityCriteria");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id _ArchiveFilePath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("ScheduledActivities.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_18FFE72F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Block_object_dispose((const void *)(v49 - 224), 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);
  _Unwind_Resume(a1);
}

__CFString *PKAggDKeyForPaymentRequestAPIType(unint64_t a1)
{
  if (a1 <= 4)
    a1 = *off_1E2AC83B0[a1];
  return (__CFString *)(id)a1;
}

void sub_18FFF104C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18FFF1480(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18FFF17E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18FFF20F4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_18FFF48B4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_18FFF4AC0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_18FFF7070(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_18FFF7868(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18FFF7B14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18FFF8858(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 136));
  _Unwind_Resume(a1);
}

void sub_18FFF9670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  uint64_t v11;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v11 - 136));
  _Unwind_Resume(a1);
}

void sub_18FFFD124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location, id *a15, id *a16, id *a17, id *a18)
{
  uint64_t v18;

  objc_destroyWeak((id *)(v18 - 112));
  _Unwind_Resume(a1);
}

void sub_18FFFDD5C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFFDFF8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFFE110(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFFE358(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFFEB14(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_18FFFF0A4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190000A54(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 40));
  _Unwind_Resume(a1);
}

Class initFKTrillianTransactionImporter()
{
  Class result;

  if (qword_1EE1DB518 != -1)
    dispatch_once(&qword_1EE1DB518, &__block_literal_global_1110);
  result = objc_getClass("FKTrillianTransactionImporter");
  _MergedGlobals_48 = (uint64_t)result;
  getFKTrillianTransactionImporterClass[0] = (uint64_t (*)())FKTrillianTransactionImporterFunction;
  return result;
}

id FKTrillianTransactionImporterFunction()
{
  return (id)_MergedGlobals_48;
}

Class initFKPendingApplePayOrderDetails()
{
  Class result;

  if (qword_1EE1DB518 != -1)
    dispatch_once(&qword_1EE1DB518, &__block_literal_global_1110);
  result = objc_getClass("FKPendingApplePayOrderDetails");
  qword_1EE1DB520 = (uint64_t)result;
  _MergedGlobals_173 = (uint64_t (*)())FKPendingApplePayOrderDetailsFunction;
  return result;
}

id FKPendingApplePayOrderDetailsFunction()
{
  return (id)qword_1EE1DB520;
}

Class initFKPendingApplePayOrderImporter()
{
  Class result;

  if (qword_1EE1DB518 != -1)
    dispatch_once(&qword_1EE1DB518, &__block_literal_global_1110);
  result = objc_getClass("FKPendingApplePayOrderImporter");
  qword_1EE1DB528 = (uint64_t)result;
  off_1ECF21B38 = (uint64_t (*)())FKPendingApplePayOrderImporterFunction;
  return result;
}

id FKPendingApplePayOrderImporterFunction()
{
  return (id)qword_1EE1DB528;
}

uint64_t PKPhysicalCardStateFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  int v16;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("new"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_17:
    v4 = 0;
    goto LABEL_18;
  }
  v3 = objc_msgSend(CFSTR("new"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("active")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("active"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_18;
    }
    v8 = v6;
    if (v8 == CFSTR("disabled")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("disabled"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_18;
    }
    v11 = v9;
    if (v11 == CFSTR("blocked")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("blocked"), "isEqualToString:", v11), v12, (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_18;
    }
    v14 = v12;
    if (v14 == CFSTR("cancelled")
      || (v15 = v14, v16 = objc_msgSend(CFSTR("cancelled"), "isEqualToString:", v14), v15, v16))
    {
      v4 = 5;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_4:
  v4 = 1;
LABEL_18:

  return v4;
}

const __CFString *PKStringFromPhysicalCardState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2AC85D8[a1 - 1];
}

BOOL PKAppleBalancePromotionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  v4 = 0;
  if (v1 != CFSTR("content"))
  {
    if (!v1 || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("content")), v2, !v3))
      v4 = 1;
  }

  return v4;
}

const __CFString *PKAppleBalancePromotionTypeToString(uint64_t a1)
{
  if (a1)
    return CFSTR("unknown");
  else
    return CFSTR("content");
}

Class initMKWalletMerchantStylingInfo()
{
  Class result;

  if (qword_1ECF223A0 != -1)
    dispatch_once(&qword_1ECF223A0, &__block_literal_global_54);
  result = objc_getClass("MKWalletMerchantStylingInfo");
  _MergedGlobals_212 = (uint64_t)result;
  getMKWalletMerchantStylingInfoClass[0] = (uint64_t (*)())MKWalletMerchantStylingInfoFunction;
  return result;
}

id MKWalletMerchantStylingInfoFunction()
{
  return (id)_MergedGlobals_212;
}

uint64_t PKPayLaterFinancingPlanStateFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  int v25;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("active"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_26:
    v4 = 0;
    goto LABEL_27;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("active"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("pending")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("pending")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_27;
    }
    v8 = v6;
    if (v8 == CFSTR("pendingConfirmed")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("pendingConfirmed")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_27;
    }
    v11 = v9;
    if (v11 == CFSTR("complete")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("complete")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_27;
    }
    v14 = v12;
    if (v14 == CFSTR("delinquent")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("delinquent")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_27;
    }
    v17 = v15;
    if (v17 == CFSTR("canceled")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("canceled")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_27;
    }
    v20 = v18;
    if (v20 == CFSTR("removed")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("removed")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_27;
    }
    v23 = v21;
    if (v23 == CFSTR("pendingCancellation")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("pendingCancellation")),
          v24,
          v25))
    {
      v4 = 8;
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_4:
  v4 = 1;
LABEL_27:

  return v4;
}

const __CFString *PKPayLaterFinancingPlanStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E2AC8748[a1 - 1];
}

BOOL PKPayLaterFinancingPlanStateIsPending(uint64_t a1)
{
  return a1 == 8 || (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

id PKPeerPaymentMessageDataURLWithData(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  if (a1)
  {
    objc_msgSend(a1, "base64EncodedStringWithOptions:", 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1)
    {
      objc_msgSend((id)PKPeerPaymentMessageAbsoluteDataURLPrefix, "stringByAppendingString:", v1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", v2);

    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id PKPeerPaymentMessageDataWithDataURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  void *v5;

  if (a1)
  {
    v1 = a1;
    objc_msgSend(v1, "absoluteString");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "scheme");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (objc_msgSend(v3, "isEqualToString:", CFSTR("data")))
    {
      v4 = objc_msgSend(v2, "hasPrefix:", PKPeerPaymentMessageAbsoluteDataURLPrefix);

      if (!v4)
      {
        v5 = 0;
        goto LABEL_9;
      }
      objc_msgSend(v2, "substringFromIndex:", objc_msgSend((id)PKPeerPaymentMessageAbsoluteDataURLPrefix, "length"));
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64EncodedString:options:", v3, 1);
    }
    else
    {
      v5 = 0;
    }

LABEL_9:
    return v5;
  }
  v5 = 0;
  return v5;
}

id PKPeerPaymentMessageFallbackMediaURL()
{
  void *v0;
  void *v1;

  PKPassKitCoreBundle();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "URLForResource:withExtension:", CFSTR("PeerPaymentMessageFallbackMedia"), CFSTR("png"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

PKProtobufPeerPaymentMessage *PKProtobufForDataURL(void *a1)
{
  void *v1;
  PKProtobufPeerPaymentMessage *v2;

  if (a1)
  {
    PKPeerPaymentMessageDataWithDataURL(a1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    if (v1)
      v2 = -[PKProtobufPeerPaymentMessage initWithData:]([PKProtobufPeerPaymentMessage alloc], "initWithData:", v1);
    else
      v2 = 0;

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

id PKPeerPaymentMessageIdentifierFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasIdentifier"))
  {
    v3 = objc_alloc(MEMORY[0x1E0CB3A28]);
    objc_msgSend(v2, "identifier");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = (void *)objc_msgSend(v3, "initWithUUIDString:", v4);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t PKPeerPaymentMessageTypeFromDataURL(void *a1)
{
  void *v1;
  uint64_t v2;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = PKPeerPaymentMessageTypeFromProtobuf(v1);

  return v2;
}

uint64_t PKPeerPaymentMessageTypeFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasType"))
  {
    v3 = objc_msgSend(v2, "type") - 1;
    if (v3 <= 2)
      v4 = v3 + 1;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKPeerPaymentMessageCurrencyAmountFromDataURL(void *a1)
{
  void *v1;
  void *v2;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  PKPeerPaymentMessageCurrencyAmountFromProtobuf(v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PKPeerPaymentMessageCurrencyAmountFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  NSString *v3;
  void *v4;
  NSDecimalNumber *v5;
  void *v6;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasCurrency") && objc_msgSend(v2, "hasAmount"))
  {
    objc_msgSend(v2, "currency");
    v3 = (NSString *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v2, "hasDecimalAmount"))
    {
      objc_msgSend(v2, "decimalAmount");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      PKProtoSupportDecimalNumberFromProtobuf(v4);
      v5 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      PKLegacyCurrencyStorageIntegerToDecimal(objc_msgSend(v2, "amount"), 0);
      v5 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
    }
    v6 = 0;
    if (v3 && v5)
    {
      PKCurrencyAmountCreate(v5, v3, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id PKPeerPaymentMessageSenderAddressFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasSenderAddress"))
  {
    objc_msgSend(v2, "senderAddress");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKPeerPaymentMessageRecipientAddressFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasRecipientAddress"))
  {
    objc_msgSend(v2, "recipientAddress");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

PKPeerPaymentRequestToken *PKPeerPaymentMessageRequestTokenFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  PKPeerPaymentRequestToken *v5;
  PKPeerPaymentRequestToken *v6;
  void *v7;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasRequestToken"))
  {
    if (objc_msgSend(v2, "hasRequestDeviceScoreIdentifier"))
    {
      objc_msgSend(v2, "requestDeviceScoreIdentifier");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      if (v3)
        v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3A28]), "initWithUUIDString:", v3);
      else
        v4 = 0;

    }
    else
    {
      v4 = 0;
    }
    v6 = [PKPeerPaymentRequestToken alloc];
    objc_msgSend(v2, "requestToken");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = -[PKPeerPaymentRequestToken initWithRequestToken:deviceScoreIdentifier:expiryDate:](v6, "initWithRequestToken:deviceScoreIdentifier:expiryDate:", v7, v4, 0);

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id PKPeerPaymentMessagePaymentIdentifierFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasPaymentIdentifier"))
  {
    objc_msgSend(v2, "paymentIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKPeerPaymentMessageTransactionIdentifierFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasTransactionIdentifier"))
  {
    objc_msgSend(v2, "transactionIdentifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKPeerPaymentMessageMemoFromDataURL(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  PKProtobufForDataURL(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasMemo"))
  {
    objc_msgSend(v2, "memo");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t PKPeerPaymentMessageRecurringPaymentFrequencyFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasRecurringPaymentFrequency"))
  {
    objc_msgSend(v2, "recurringPaymentFrequency");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = PKPeerPaymentRecurringPaymentFrequencyFromString(v3);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKPeerPaymentMessageRecurringPaymentStartDateFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasRecurringPaymentStartDate"))
  {
    v3 = (void *)MEMORY[0x1E0C99D68];
    objc_msgSend(v2, "recurringPaymentStartDate");
    objc_msgSend(v3, "dateWithTimeIntervalSinceReferenceDate:");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKPeerPaymentMessageRecurringPaymentEmojiFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "hasRecurringPaymentEmoji"))
  {
    objc_msgSend(v2, "recurringPaymentEmoji");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

uint64_t PKPeerPaymentMessageRecurringPaymentColorFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v1 = a1;
  v2 = v1;
  v6 = 0;
  if (v1 && objc_msgSend(v1, "hasRecurringPaymentColor"))
  {
    objc_msgSend(v2, "recurringPaymentColor");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    PKSemanticColorFromString(v3, &v6);

    v4 = v6;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKPeerPaymentMessageDictionaryRepresentationFromDataURL(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;

  PKProtobufForDataURL(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PKPeerPaymentMessageDictionaryRepresentationFromProtobuf(v3, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PKPeerPaymentMessageDictionaryRepresentationFromProtobuf(void *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (a1)
  {
    objc_msgSend(a1, "dictionaryRepresentation");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (a2 == 2)
    {
      v7 = (void *)MEMORY[0x1E0C99DE8];
      objc_msgSend(v3, "allKeys");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "arrayWithArray:", v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v9, "removeObjectsInArray:", &unk_1E2C3DEE8);
      _PKFilteredDictionary(v4, v9);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      if (a2 == 1)
      {
        _PKFilteredDictionary(v3, &unk_1E2C3DED0);
        v5 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        if (a2)
        {
          v6 = 0;
          goto LABEL_11;
        }
        v5 = v3;
      }
      v6 = v5;
    }
LABEL_11:

    return v6;
  }
  v6 = 0;
  return v6;
}

id _PKFilteredDictionary(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *, void *);
  void *v14;
  id v15;
  id v16;

  v3 = a2;
  v4 = (void *)MEMORY[0x1E0C99E08];
  v5 = a1;
  objc_msgSend(v4, "dictionary");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = MEMORY[0x1E0C809B0];
  v12 = 3221225472;
  v13 = ___PKFilteredDictionary_block_invoke;
  v14 = &unk_1E2AC87E8;
  v15 = v3;
  v16 = v6;
  v7 = v6;
  v8 = v3;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", &v11);

  v9 = (void *)objc_msgSend(v7, "copy", v11, v12, v13, v14);
  return v9;
}

uint64_t PKProtobufShippingMethodReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;
  PKProtobufCustomPrecisionAmount *v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 60) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_48:
        *(_QWORD *)(a1 + 8) = -(v19 & 1) ^ (v19 >> 1);
        goto LABEL_53;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 48;
        goto LABEL_38;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 60) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_52:
        *(_DWORD *)(a1 + 56) = v28;
        goto LABEL_53;
      case 4u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 40;
        goto LABEL_38;
      case 5u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 32;
LABEL_38:
        v32 = *(void **)(a1 + v25);
        *(_QWORD *)(a1 + v25) = v24;

        goto LABEL_53;
      case 6u:
        v33 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 16), v33);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v33, a2) & 1) == 0)
          goto LABEL_55;
        goto LABEL_44;
      case 7u:
        v33 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 24), v33);
        if (PBReaderPlaceMark() && (PKProtobufNSDecimalNumberReadFrom((uint64_t)v33, a2) & 1) != 0)
        {
LABEL_44:
          PBReaderRecallMark();

LABEL_53:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_55:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_53;
    }
  }
}

id PDContinuityPaymentServiceInterface()
{
  if (qword_1ECF223E0 != -1)
    dispatch_once(&qword_1ECF223E0, &__block_literal_global_56);
  return (id)_MergedGlobals_214;
}

id PKContinuityPaymentServiceInterface()
{
  if (qword_1ECF223F0 != -1)
    dispatch_once(&qword_1ECF223F0, &__block_literal_global_82_0);
  return (id)qword_1ECF223E8;
}

id PKContactFormatErrorForInvalidEmailAddressFormat()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[4];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v6[0] = *MEMORY[0x1E0CB2D50];
  PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_EMAIL_INCOMPLETE"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v1;
  v6[1] = *MEMORY[0x1E0CB2D68];
  PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_CONTACT_ITEM_INCORRECT_EMAIL"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v2;
  v7[2] = CFSTR("email");
  v6[2] = CFSTR("PKPaymentErrorContactField");
  v6[3] = CFSTR("PKPaymentErrorInvalidFormat");
  v7[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v0, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v3);

  return v4;
}

id PKContactFormatErrorForInvalidPhoneNumberFormat()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[4];
  _QWORD v7[5];

  v7[4] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v6[0] = *MEMORY[0x1E0CB2D50];
  PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_PHONE_INCOMPLETE"), 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = v1;
  v6[1] = *MEMORY[0x1E0CB2D68];
  PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_CONTACT_ITEM_INCORRECT_PHONE"), 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7[1] = v2;
  v7[2] = CFSTR("phone");
  v6[2] = CFSTR("PKPaymentErrorContactField");
  v6[3] = CFSTR("PKPaymentErrorInvalidFormat");
  v7[3] = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v7, v6, 4);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v0, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v3);

  return v4;
}

id PKContactFormatErrorsFromShippingNameComponenentFormatErrors(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[6];

  v1 = a1;
  v31[4] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((v1 & 1) != 0)
    {
      v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v30[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_NAME_INCOMPLETE"), 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = v4;
      v30[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_INCOMPLETE_REASON"), 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v31[1] = v5;
      v31[2] = CFSTR("name");
      v30[2] = CFSTR("PKPaymentErrorContactField");
      v30[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v31[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)objc_msgSend(v3, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v6);

      objc_msgSend(v2, "addObject:", v7);
    }
    if ((v1 & 2) != 0)
    {
      v8 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v28[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_NAME_INCOMPLETE"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = v9;
      v28[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_INCOMPLETE_REASON"), 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v29[1] = v10;
      v29[2] = CFSTR("name");
      v28[2] = CFSTR("PKPaymentErrorContactField");
      v28[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v29[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(v8, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v11);

      objc_msgSend(v2, "addObject:", v12);
    }
    if ((v1 & 4) != 0)
    {
      v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v26[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_PHONETIC_NAME_INCOMPLETE"), 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v14;
      v26[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_INCOMPLETE_REASON"), 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v27[1] = v15;
      v27[2] = CFSTR("phoneticName");
      v26[2] = CFSTR("PKPaymentErrorContactField");
      v26[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v27[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v13, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v16);

      objc_msgSend(v2, "addObject:", v17);
    }
    if ((v1 & 8) != 0)
    {
      v18 = objc_alloc(MEMORY[0x1E0CB35C8]);
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_PHONETIC_NAME_INCOMPLETE"), 0, *MEMORY[0x1E0CB2D50]);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v19;
      v24[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_INCOMPLETE_REASON"), 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v20;
      v25[2] = CFSTR("phoneticName");
      v24[2] = CFSTR("PKPaymentErrorContactField");
      v24[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v25[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 4);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v18, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v21);

      objc_msgSend(v2, "addObject:", v22);
    }
    v1 = objc_msgSend(v2, "copy");

  }
  return (id)v1;
}

id PKContactFormatErrorsFromBillingNameComponenentFormatErrors(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  _QWORD v24[4];
  _QWORD v25[4];
  _QWORD v26[4];
  _QWORD v27[4];
  _QWORD v28[4];
  _QWORD v29[4];
  _QWORD v30[4];
  _QWORD v31[6];

  v1 = a1;
  v31[4] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if ((v1 & 1) != 0)
    {
      v3 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v30[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_NAME_INCOMPLETE"), 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      v31[0] = v4;
      v30[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_CONTACT_INCOMPLETE_REASON"), 0);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v31[1] = v5;
      v31[2] = CFSTR("name");
      v30[2] = CFSTR("PKPaymentErrorContactField");
      v30[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v31[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 4);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = (void *)objc_msgSend(v3, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v6);

      objc_msgSend(v2, "addObject:", v7);
    }
    if ((v1 & 2) != 0)
    {
      v8 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v28[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_NAME_INCOMPLETE"), 0);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v29[0] = v9;
      v28[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_CONTACT_INCOMPLETE_REASON"), 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v29[1] = v10;
      v29[2] = CFSTR("name");
      v28[2] = CFSTR("PKPaymentErrorContactField");
      v28[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v29[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v12 = (void *)objc_msgSend(v8, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v11);

      objc_msgSend(v2, "addObject:", v12);
    }
    if ((v1 & 4) != 0)
    {
      v13 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v26[0] = *MEMORY[0x1E0CB2D50];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_PHONETIC_NAME_INCOMPLETE"), 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v27[0] = v14;
      v26[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_CONTACT_INCOMPLETE_REASON"), 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v27[1] = v15;
      v27[2] = CFSTR("phoneticName");
      v26[2] = CFSTR("PKPaymentErrorContactField");
      v26[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v27[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 4);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v13, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v16);

      objc_msgSend(v2, "addObject:", v17);
    }
    if ((v1 & 8) != 0)
    {
      v18 = objc_alloc(MEMORY[0x1E0CB35C8]);
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_CONTACT_PHONETIC_NAME_INCOMPLETE"), 0, *MEMORY[0x1E0CB2D50]);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v25[0] = v19;
      v24[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_CONTACT_INCOMPLETE_REASON"), 0);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v25[1] = v20;
      v25[2] = CFSTR("phoneticName");
      v24[2] = CFSTR("PKPaymentErrorContactField");
      v24[3] = CFSTR("PKPaymentErrorInvalidFormat");
      v25[3] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 4);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = (void *)objc_msgSend(v18, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v21);

      objc_msgSend(v2, "addObject:", v22);
    }
    v1 = objc_msgSend(v2, "copy");

  }
  return (id)v1;
}

id PKContactFormatErrorsFromShippingAddressFormatErrors(uint64_t a1)
{
  uint64_t v1;
  id v2;
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  void *v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[5];
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[7];

  v1 = a1;
  v60[5] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = (_QWORD *)MEMORY[0x1E0CB2D50];
    if ((v1 & 0x40) != 0)
    {
      v11 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v59[0] = *v3;
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v60[0] = v12;
      v59[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = *MEMORY[0x1E0C970A8];
      v60[1] = v13;
      v60[2] = v14;
      v59[2] = CFSTR("PKPaymentErrorPostalAddress");
      v59[3] = CFSTR("PKPaymentErrorContactField");
      v59[4] = CFSTR("PKPaymentErrorInvalidFormat");
      v60[3] = CFSTR("post");
      v60[4] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v60, v59, 5);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = (void *)objc_msgSend(v11, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v15);

      objc_msgSend(v2, "addObject:", v16);
      if ((v1 & 1) == 0)
      {
LABEL_4:
        if ((v1 & 2) == 0)
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    else if ((v1 & 1) == 0)
    {
      goto LABEL_4;
    }
    v17 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v57[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v58[0] = v18;
    v57[1] = *MEMORY[0x1E0CB2D68];
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = *MEMORY[0x1E0C970C8];
    v58[1] = v19;
    v58[2] = v20;
    v57[2] = CFSTR("PKPaymentErrorPostalAddress");
    v57[3] = CFSTR("PKPaymentErrorContactField");
    v57[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v58[3] = CFSTR("post");
    v58[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v58, v57, 5);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = (void *)objc_msgSend(v17, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v21);

    objc_msgSend(v2, "addObject:", v22);
    if ((v1 & 2) == 0)
    {
LABEL_5:
      if ((v1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_14:
    v23 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v55[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v56[0] = v24;
    v55[1] = *MEMORY[0x1E0CB2D68];
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = *MEMORY[0x1E0C970D8];
    v56[1] = v25;
    v56[2] = v26;
    v55[2] = CFSTR("PKPaymentErrorPostalAddress");
    v55[3] = CFSTR("PKPaymentErrorContactField");
    v55[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v56[3] = CFSTR("post");
    v56[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v56, v55, 5);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = (void *)objc_msgSend(v23, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v27);

    objc_msgSend(v2, "addObject:", v28);
    if ((v1 & 4) == 0)
    {
LABEL_6:
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
LABEL_15:
    v29 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v53[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v54[0] = v30;
    v53[1] = *MEMORY[0x1E0CB2D68];
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = *MEMORY[0x1E0C97098];
    v54[1] = v31;
    v54[2] = v32;
    v53[2] = CFSTR("PKPaymentErrorPostalAddress");
    v53[3] = CFSTR("PKPaymentErrorContactField");
    v53[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v54[3] = CFSTR("post");
    v54[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 5);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = (void *)objc_msgSend(v29, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v33);

    objc_msgSend(v2, "addObject:", v34);
    if ((v1 & 8) == 0)
    {
LABEL_7:
      if ((v1 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    v35 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v51[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    v52[0] = v36;
    v51[1] = *MEMORY[0x1E0CB2D68];
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = *MEMORY[0x1E0C970D0];
    v52[1] = v37;
    v52[2] = v38;
    v51[2] = CFSTR("PKPaymentErrorPostalAddress");
    v51[3] = CFSTR("PKPaymentErrorContactField");
    v51[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v52[3] = CFSTR("post");
    v52[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52, v51, 5);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = (void *)objc_msgSend(v35, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v39);

    objc_msgSend(v2, "addObject:", v40);
    if ((v1 & 0x10) == 0)
    {
LABEL_8:
      if ((v1 & 0x20) == 0)
      {
LABEL_10:
        v1 = objc_msgSend(v2, "copy");

        return (id)v1;
      }
LABEL_9:
      v4 = objc_alloc(MEMORY[0x1E0CB35C8]);
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0, *v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v48[0] = v5;
      v47[1] = *MEMORY[0x1E0CB2D68];
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = *MEMORY[0x1E0C970B0];
      v48[1] = v6;
      v48[2] = v7;
      v47[2] = CFSTR("PKPaymentErrorPostalAddress");
      v47[3] = CFSTR("PKPaymentErrorContactField");
      v47[4] = CFSTR("PKPaymentErrorInvalidFormat");
      v48[3] = CFSTR("post");
      v48[4] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v48, v47, 5);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = (void *)objc_msgSend(v4, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v8);

      objc_msgSend(v2, "addObject:", v9);
      goto LABEL_10;
    }
LABEL_17:
    v41 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v49[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE"), 0);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v50[0] = v42;
    v49[1] = *MEMORY[0x1E0CB2D68];
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_SHIPPING_ADDRESS_INCOMPLETE_REASON"), 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = *MEMORY[0x1E0C970C0];
    v50[1] = v43;
    v50[2] = v44;
    v49[2] = CFSTR("PKPaymentErrorPostalAddress");
    v49[3] = CFSTR("PKPaymentErrorContactField");
    v49[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v50[3] = CFSTR("post");
    v50[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v50, v49, 5);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v46 = (void *)objc_msgSend(v41, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 1, v45);

    objc_msgSend(v2, "addObject:", v46);
    if ((v1 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  return (id)v1;
}

id PKContactFormatErrorsFromBillingAddressFormatErrors(uint64_t a1)
{
  uint64_t v1;
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[5];
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[7];

  v1 = a1;
  v61[5] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v3 = (_QWORD *)MEMORY[0x1E0CB2D50];
    v4 = (_QWORD *)MEMORY[0x1E0CB2D68];
    if ((v1 & 0x40) != 0)
    {
      v12 = objc_alloc(MEMORY[0x1E0CB35C8]);
      v60[0] = *v3;
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v61[0] = v13;
      v60[1] = *v4;
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = *MEMORY[0x1E0C970A8];
      v61[1] = v14;
      v61[2] = v15;
      v60[2] = CFSTR("PKPaymentErrorPostalAddress");
      v60[3] = CFSTR("PKPaymentErrorContactField");
      v60[4] = CFSTR("PKPaymentErrorInvalidFormat");
      v61[3] = CFSTR("post");
      v61[4] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v61, v60, 5);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = (void *)objc_msgSend(v12, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v16);

      objc_msgSend(v2, "addObject:", v17);
      if ((v1 & 1) == 0)
      {
LABEL_4:
        if ((v1 & 2) == 0)
          goto LABEL_5;
        goto LABEL_14;
      }
    }
    else if ((v1 & 1) == 0)
    {
      goto LABEL_4;
    }
    v18 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v58[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v59[0] = v19;
    v58[1] = *v4;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = *MEMORY[0x1E0C970C8];
    v59[1] = v20;
    v59[2] = v21;
    v58[2] = CFSTR("PKPaymentErrorPostalAddress");
    v58[3] = CFSTR("PKPaymentErrorContactField");
    v58[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v59[3] = CFSTR("post");
    v59[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v59, v58, 5);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = (void *)objc_msgSend(v18, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v22);

    objc_msgSend(v2, "addObject:", v23);
    if ((v1 & 2) == 0)
    {
LABEL_5:
      if ((v1 & 4) == 0)
        goto LABEL_6;
      goto LABEL_15;
    }
LABEL_14:
    v24 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v56[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v57[0] = v25;
    v56[1] = *v4;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = *MEMORY[0x1E0C970D8];
    v57[1] = v26;
    v57[2] = v27;
    v56[2] = CFSTR("PKPaymentErrorPostalAddress");
    v56[3] = CFSTR("PKPaymentErrorContactField");
    v56[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v57[3] = CFSTR("post");
    v57[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v57, v56, 5);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = (void *)objc_msgSend(v24, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v28);

    objc_msgSend(v2, "addObject:", v29);
    if ((v1 & 4) == 0)
    {
LABEL_6:
      if ((v1 & 8) == 0)
        goto LABEL_7;
      goto LABEL_16;
    }
LABEL_15:
    v30 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v54[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v55[0] = v31;
    v54[1] = *v4;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = *MEMORY[0x1E0C97098];
    v55[1] = v32;
    v55[2] = v33;
    v54[2] = CFSTR("PKPaymentErrorPostalAddress");
    v54[3] = CFSTR("PKPaymentErrorContactField");
    v54[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v55[3] = CFSTR("post");
    v55[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v55, v54, 5);
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = (void *)objc_msgSend(v30, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v34);

    objc_msgSend(v2, "addObject:", v35);
    if ((v1 & 8) == 0)
    {
LABEL_7:
      if ((v1 & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_17;
    }
LABEL_16:
    v36 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v52[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v53[0] = v37;
    v52[1] = *v4;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = *MEMORY[0x1E0C970D0];
    v53[1] = v38;
    v53[2] = v39;
    v52[2] = CFSTR("PKPaymentErrorPostalAddress");
    v52[3] = CFSTR("PKPaymentErrorContactField");
    v52[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v53[3] = CFSTR("post");
    v53[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v53, v52, 5);
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    v41 = (void *)objc_msgSend(v36, "initWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 2, v40);

    objc_msgSend(v2, "addObject:", v41);
    if ((v1 & 0x10) == 0)
    {
LABEL_8:
      if ((v1 & 0x20) == 0)
      {
LABEL_10:
        v1 = objc_msgSend(v2, "copy");

        return (id)v1;
      }
LABEL_9:
      v5 = objc_alloc(MEMORY[0x1E0CB35C8]);
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0, *v3);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v49[0] = v6;
      v48[1] = *v4;
      PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = *MEMORY[0x1E0C970B0];
      v49[1] = v7;
      v49[2] = v8;
      v48[2] = CFSTR("PKPaymentErrorPostalAddress");
      v48[3] = CFSTR("PKPaymentErrorContactField");
      v48[4] = CFSTR("PKPaymentErrorInvalidFormat");
      v49[3] = CFSTR("post");
      v49[4] = MEMORY[0x1E0C9AAB0];
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v49, v48, 5);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = (void *)objc_msgSend(v5, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v9);

      objc_msgSend(v2, "addObject:", v10);
      goto LABEL_10;
    }
LABEL_17:
    v42 = objc_alloc(MEMORY[0x1E0CB35C8]);
    v50[0] = *v3;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE"), 0);
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    v51[0] = v43;
    v50[1] = *v4;
    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_BILLING_ADDRESS_INCOMPLETE_REASON"), 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = *MEMORY[0x1E0C970C0];
    v51[1] = v44;
    v51[2] = v45;
    v50[2] = CFSTR("PKPaymentErrorPostalAddress");
    v50[3] = CFSTR("PKPaymentErrorContactField");
    v50[4] = CFSTR("PKPaymentErrorInvalidFormat");
    v51[3] = CFSTR("post");
    v51[4] = MEMORY[0x1E0C9AAB0];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 5);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = (void *)objc_msgSend(v42, "initWithDomain:code:userInfo:", CFSTR("PKPaymentErrorDomain"), 2, v46);

    objc_msgSend(v2, "addObject:", v47);
    if ((v1 & 0x20) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  return (id)v1;
}

void PKContactFormatAssignFormatErrorsToPreferenceContact(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  id obj;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v34 = v3;
  if (v3 && v4)
  {
    objc_msgSend(v3, "preferences");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = objc_msgSend(v3, "type");
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    obj = v6;
    v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    if (!v37)
      goto LABEL_35;
    v35 = *(_QWORD *)v39;
    v36 = v7;
    while (1)
    {
      for (i = 0; i != v37; ++i)
      {
        if (*(_QWORD *)v39 != v35)
          objc_enumerationMutation(obj);
        v9 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * i);
        v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        objc_msgSend(v9, "postalAddresses");
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v11, "firstObject");
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "value");
        v13 = (void *)objc_claimAutoreleasedReturnValue();

        if (v13)
        {
          v14 = objc_msgSend(v5, "checkPostalAddressFormat:", v13);
          if (v7)
          {
            if (v7 != 1)
              goto LABEL_15;
            PKContactFormatErrorsFromShippingAddressFormatErrors(v14);
            v15 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            PKContactFormatErrorsFromBillingAddressFormatErrors(v14);
            v15 = objc_claimAutoreleasedReturnValue();
          }
          v16 = (void *)v15;
          if (v15)
          {
            objc_msgSend(v10, "addObjectsFromArray:", v15);

          }
        }
LABEL_15:
        objc_msgSend(v9, "nameComponents");
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = (void *)v17;
        if (v13)
          v19 = v17 == 0;
        else
          v19 = 1;
        if (!v19)
        {
          objc_msgSend(v13, "ISOCountryCode");
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          v21 = objc_msgSend(v5, "checkNameFormat:forCountryCode:", v18, v20);

          if (v7)
          {
            if (v7 != 1)
              goto LABEL_25;
            PKContactFormatErrorsFromShippingNameComponenentFormatErrors(v21);
            v22 = objc_claimAutoreleasedReturnValue();
          }
          else
          {
            PKContactFormatErrorsFromBillingNameComponenentFormatErrors(v21);
            v22 = objc_claimAutoreleasedReturnValue();
          }
          v23 = (void *)v22;
          if (v22)
          {
            objc_msgSend(v10, "addObjectsFromArray:", v22);

          }
        }
LABEL_25:
        objc_msgSend(v9, "phoneNumbers");
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v24, "firstObject");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "value");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v26 && (objc_msgSend(v5, "phoneNumberIsValid:forCountryCode:", v26, 0) & 1) == 0)
        {
          PKContactFormatErrorForInvalidPhoneNumberFormat();
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", v27);

        }
        objc_msgSend(v9, "emailAddresses");
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v28, "firstObject");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "value");
        v30 = (void *)objc_claimAutoreleasedReturnValue();

        if (v30 && (objc_msgSend(v5, "emailAddressIsValid:", v30) & 1) == 0)
        {
          PKContactFormatErrorForInvalidEmailAddressFormat();
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v10, "addObject:", v31);

        }
        if (objc_msgSend(v10, "count"))
        {
          v32 = (void *)objc_msgSend(v10, "copy");
          objc_msgSend(v34, "setErrors:forPreference:", v32, v9);

        }
        v7 = v36;
      }
      v37 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
      if (!v37)
      {
LABEL_35:

        break;
      }
    }
  }

}

id PKContactFormatRequiredPostalAddressKeysForCountryCode(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _QWORD v25[8];

  v25[6] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4 && objc_msgSend(v3, "length"))
  {
    v5 = *MEMORY[0x1E0C970D8];
    v25[0] = *MEMORY[0x1E0C970C8];
    v25[1] = v5;
    v6 = *MEMORY[0x1E0C970D0];
    v25[2] = *MEMORY[0x1E0C97098];
    v25[3] = v6;
    v7 = *MEMORY[0x1E0C970B0];
    v25[4] = *MEMORY[0x1E0C970C0];
    v25[5] = v7;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v25, 6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v10 = v8;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v12; ++i)
        {
          if (*(_QWORD *)v21 != v13)
            objc_enumerationMutation(v10);
          v15 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * i);
          objc_msgSend(v4, "contactFieldConfigurationForPostalField:forCountryCode:", v15, v3, (_QWORD)v20);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = v16;
          if (v16)
          {
            if (objc_msgSend(v16, "type"))
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || objc_msgSend(v17, "minLength") >= 1)
                objc_msgSend(v9, "addObject:", v15);
            }
          }

        }
        v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v12);
    }

    v18 = (void *)objc_msgSend(v9, "copy");
  }
  else
  {
    v18 = (void *)MEMORY[0x1E0C9AA60];
  }

  return v18;
}

void PKContactFormatAssignPhoneFormatErrorToPreferenceForContact(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (v5 && a2 && v6)
  {
    v8 = a2;
    objc_msgSend(v7, "phoneNumbers");
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v9, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "value");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    LOBYTE(v9) = objc_msgSend(v8, "phoneNumberIsValid:forCountryCode:", v11, 0);
    if ((v9 & 1) != 0)
    {
      objc_msgSend(v5, "setErrors:forPreference:", MEMORY[0x1E0C9AA60], v7);
    }
    else
    {
      PKContactFormatErrorForInvalidPhoneNumberFormat();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setErrors:forPreference:", v13, v7);

    }
  }

}

void PKContactFormatAssignEmailFormatErrorToPreferenceForContact(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (v5 && a2 && v6)
  {
    v8 = a2;
    objc_msgSend(v7, "emailAddresses");
    v9 = objc_claimAutoreleasedReturnValue();
    objc_msgSend((id)v9, "firstObject");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "value");
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    LOBYTE(v9) = objc_msgSend(v8, "emailAddressIsValid:", v11);
    if ((v9 & 1) != 0)
    {
      objc_msgSend(v5, "setErrors:forPreference:", MEMORY[0x1E0C9AA60], v7);
    }
    else
    {
      PKContactFormatErrorForInvalidEmailAddressFormat();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v14[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v14, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "setErrors:forPreference:", v13, v7);

    }
  }

}

id DateComponentsFromFelicaDateNumber(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 v4;
  id v5;
  id v6;
  void *v7;

  if (a1)
  {
    v1 = a1;
    v2 = (objc_msgSend(v1, "intValue") >> 24) & 0xF;
    v3 = (objc_msgSend(v1, "intValue") >> 16);
    v4 = objc_msgSend(v1, "intValue");

    v5 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    v6 = objc_alloc(MEMORY[0x1E0C99D48]);
    v7 = (void *)objc_msgSend(v6, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    objc_msgSend(v5, "setCalendar:", v7);

    objc_msgSend(v5, "setDay:", v3);
    objc_msgSend(v5, "setMonth:", v2);
    objc_msgSend(v5, "setYear:", v4);
  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id DateComponentsFromFelicaTimeNumber(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(v1, "integerValue") / 60;
    v3 = objc_msgSend(v1, "integerValue");

    v4 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    v5 = objc_alloc(MEMORY[0x1E0C99D48]);
    v6 = (void *)objc_msgSend(v5, "initWithCalendarIdentifier:", *MEMORY[0x1E0C996C8]);
    objc_msgSend(v4, "setCalendar:", v6);

    objc_msgSend(v4, "setHour:", v2);
    objc_msgSend(v4, "setMinute:", v3 % 60);
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

Class initLNClientConnection()
{
  Class result;

  if (qword_1ECF22400 != -1)
    dispatch_once(&qword_1ECF22400, &__block_literal_global_58);
  result = objc_getClass("LNClientConnection");
  _MergedGlobals_215 = (uint64_t)result;
  getLNClientConnectionClass[0] = (uint64_t (*)())LNClientConnectionFunction;
  return result;
}

id LNClientConnectionFunction()
{
  return (id)_MergedGlobals_215;
}

PKPaymentRequest *PKPaymentRequestFromSharingRequest(void *a1)
{
  id v1;
  PKPaymentRequest *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  __CFString *v9;
  void *v10;
  PKPaymentContentItem *v11;
  void *v12;
  void *v13;
  PKPaymentContentItem *v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  PKPaymentContentItem *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  PKPaymentContentItem *v27;
  PKPaymentContentItem *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v35;
  void *v36;
  PKPaymentContentItem *v37;
  id v38;
  void *v39;
  _QWORD v40[3];
  _QWORD v41[2];

  v41[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = objc_alloc_init(PKPaymentRequest);
    -[PKPaymentRequest setSuppressTotal:](v2, "setSuppressTotal:", 1);
    -[PKPaymentRequest setRequestType:](v2, "setRequestType:", 7);
    PKLocalizedString(CFSTR("WALLET"), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedNavigationTitle:](v2, "setLocalizedNavigationTitle:", v3);

    -[PKPaymentRequest setConfirmationStyle:](v2, "setConfirmationStyle:", 1);
    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_TITLE"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedErrorMessage:](v2, "setLocalizedErrorMessage:", v4);

    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_PROCESSING"), 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedAuthorizingTitle:](v2, "setLocalizedAuthorizingTitle:", v5);

    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_TITLE"), 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedCallbackErrorTitle:](v2, "setLocalizedCallbackErrorTitle:", v6);

    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_GENERIC_ERROR_BODY"), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedCallbackErrorMessage:](v2, "setLocalizedCallbackErrorMessage:", v7);

    objc_msgSend(v1, "pass");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v1, "isForLocalDevice"))
    {
      if (PKPearlIsAvailable())
        v9 = CFSTR("CAR_KEY_SHARING_WATCH_CONFIRMATION");
      else
        v9 = CFSTR("CAR_KEY_SHARING_WATCH_TOUCHID_CONFIRMATION");
      PKLocalizedCredentialString(&v9->isa, 0);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v11 = objc_alloc_init(PKPaymentContentItem);
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v10);
      -[PKPaymentContentItem setLabel:](v11, "setLabel:", v12);

      -[PKPaymentContentItem setCentered:](v11, "setCentered:", 1);
      v41[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v41, 1);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentRequest setPaymentContentItems:](v2, "setPaymentContentItems:", v13);
    }
    else
    {
      v14 = objc_alloc_init(PKPaymentContentItem);
      PKLocalizedCredentialString(CFSTR("CAR_KEY_SHARING_RECIPIENT_TITLE"), 0);
      v11 = (PKPaymentContentItem *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "recipientName");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v16 = v15;
      if (v15)
      {
        v17 = v15;
      }
      else
      {
        objc_msgSend(v1, "recipientIdentifier");
        v17 = (id)objc_claimAutoreleasedReturnValue();
      }
      v18 = v17;

      if (v11)
      {
        v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v11);
        -[PKPaymentContentItem setTitle:](v14, "setTitle:", v19);

      }
      if (v18)
      {
        v20 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v18);
        -[PKPaymentContentItem setLabel:](v14, "setLabel:", v20);

      }
      v37 = v14;
      v21 = objc_alloc_init(PKPaymentContentItem);
      objc_msgSend(v1, "entitlement");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v38 = +[PKDisplayablePassEntitlement localizedEntitlementFromCarKeyEntitlement:pass:](PKDisplayablePassEntitlement, "localizedEntitlementFromCarKeyEntitlement:pass:", v22, v8);

      PKLocalizedCredentialString(CFSTR("CAR_KEY_SHARING_ENTITLEMENT_TITLE"), 0);
      v23 = objc_claimAutoreleasedReturnValue();
      if (v23)
      {
        v24 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v23);
        -[PKPaymentContentItem setTitle:](v21, "setTitle:", v24);

      }
      v36 = v18;
      v39 = v8;
      objc_msgSend(v38, "localizedTitle", v23);
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      if (v25)
      {
        v26 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v25);
        -[PKPaymentContentItem setLabel:](v21, "setLabel:", v26);

      }
      v27 = v21;
      v28 = objc_alloc_init(PKPaymentContentItem);
      PKLocalizedCredentialString(CFSTR("CAR_KEY_SHARING_VEHICLE_TITLE"), 0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "localizedDescription");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      if (v29)
      {
        v31 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v29);
        -[PKPaymentContentItem setTitle:](v28, "setTitle:", v31);

      }
      if (v30)
      {
        v32 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v30);
        -[PKPaymentContentItem setLabel:](v28, "setLabel:", v32);

      }
      v10 = v37;
      v40[0] = v37;
      v40[1] = v27;
      v40[2] = v28;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 3);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentRequest setPaymentContentItems:](v2, "setPaymentContentItems:", v33);

      v8 = v39;
      v13 = v36;
    }

  }
  else
  {
    v2 = 0;
  }

  return v2;
}

Class initACCConnectionInfo()
{
  Class result;

  if (qword_1ECF22410 != -1)
    dispatch_once(&qword_1ECF22410, &__block_literal_global_61);
  result = objc_getClass("ACCConnectionInfo");
  _MergedGlobals_216 = (uint64_t)result;
  getACCConnectionInfoClass = (uint64_t (*)())ACCConnectionInfoFunction;
  return result;
}

id ACCConnectionInfoFunction()
{
  return (id)_MergedGlobals_216;
}

__CFString *PKSharingMessageFormatToString(uint64_t a1)
{
  __CFString **v1;

  if ((unint64_t)(a1 - 2) > 2)
    v1 = PKSharingMessageFormatGenericAuthorizationTokenKey;
  else
    v1 = off_1E2AC8AB8[a1 - 2];
  return *v1;
}

uint64_t PKSharingMessageFormatFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;
  int v4;

  v1 = a1;
  v2 = v1;
  if (v1 && CFSTR("digitalwallet.generic.authorizationToken"))
  {
    if ((-[__CFString isEqual:](v1, "isEqual:", CFSTR("digitalwallet.generic.authorizationToken")) & 1) != 0)
    {
LABEL_4:
      v3 = 1;
      goto LABEL_23;
    }
  }
  else if (CFSTR("digitalwallet.generic.authorizationToken") == v1)
  {
    goto LABEL_4;
  }
  if (v2 && CFSTR("digitalwallet.carkey.ccc"))
  {
    if ((-[__CFString isEqual:](v2, "isEqual:", CFSTR("digitalwallet.carkey.ccc")) & 1) != 0)
    {
LABEL_9:
      v3 = 2;
      goto LABEL_23;
    }
  }
  else if (CFSTR("digitalwallet.carkey.ccc") == v2)
  {
    goto LABEL_9;
  }
  if (v2 && CFSTR("digitalwallet.apple.home"))
  {
    if ((-[__CFString isEqual:](v2, "isEqual:", CFSTR("digitalwallet.apple.home")) & 1) != 0)
    {
LABEL_14:
      v3 = 4;
      goto LABEL_23;
    }
  }
  else if (CFSTR("digitalwallet.apple.home") == v2)
  {
    goto LABEL_14;
  }
  if (v2 && CFSTR("digitalwallet.apple"))
    v4 = -[__CFString isEqual:](v2, "isEqual:", CFSTR("digitalwallet.apple"));
  else
    v4 = CFSTR("digitalwallet.apple") == v2;
  if (v4)
    v3 = 3;
  else
    v3 = 0;
LABEL_23:

  return v3;
}

__CFString *PKSharingMessageGenericDataKeyForFormat(unint64_t a1)
{
  __CFString **v1;

  if (a1 > 4)
    v1 = PKSharingMessageAuthorizationTokenGenericDataKey;
  else
    v1 = off_1E2AC8AD0[a1];
  return *v1;
}

const __CFString *PKSharingMessageTypeToString(uint64_t a1)
{
  const __CFString *result;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;

  result = CFSTR("unknown");
  if (a1 > 1000)
  {
    v3 = CFSTR("url");
    v4 = CFSTR("discoveryRequest");
    v5 = CFSTR("discoveryResponse");
    if (a1 != 2002)
      v5 = CFSTR("unknown");
    if (a1 != 2001)
      v4 = v5;
    if (a1 != 1003)
      v3 = v4;
    v6 = CFSTR("invitationRequest");
    v7 = CFSTR("externalInvitationRequest");
    if (a1 != 1002)
      v7 = CFSTR("unknown");
    if (a1 != 1001)
      v6 = v7;
    if (a1 <= 1002)
      return v6;
    else
      return v3;
  }
  else
  {
    switch(a1)
    {
      case 1:
        result = CFSTR("invitation");
        break;
      case 2:
        result = CFSTR("keySigningRequest");
        break;
      case 3:
        result = CFSTR("keySigningResponse");
        break;
      case 4:
        result = CFSTR("ownerCancel");
        break;
      case 5:
        result = CFSTR("friendCancel");
        break;
      case 6:
        result = CFSTR("pinEntryRequest");
        break;
      case 7:
        result = CFSTR("pinEntryResponse");
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t PKSharingMessageTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  int v37;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("invitation"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_38:
    v4 = 0;
    goto LABEL_39;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("invitation"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("keySigningRequest")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("keySigningRequest")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_39;
    }
    v8 = v6;
    if (v8 == CFSTR("keySigningResponse")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("keySigningResponse")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_39;
    }
    v11 = v9;
    if (v11 == CFSTR("ownerCancel")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("ownerCancel")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_39;
    }
    v14 = v12;
    if (v14 == CFSTR("friendCancel")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("friendCancel")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_39;
    }
    v17 = v15;
    if (v17 == CFSTR("pinEntryRequest")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("pinEntryRequest")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_39;
    }
    v20 = v18;
    if (v20 == CFSTR("pinEntryResponse")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("pinEntryResponse")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_39;
    }
    v23 = v21;
    if (v23 == CFSTR("invitationRequest")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("invitationRequest")),
          v24,
          (v25 & 1) != 0))
    {
      v4 = 1001;
      goto LABEL_39;
    }
    v26 = v24;
    if (v26 == CFSTR("externalInvitationRequest")
      || (v27 = v26,
          v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("externalInvitationRequest")),
          v27,
          (v28 & 1) != 0))
    {
      v4 = 1002;
      goto LABEL_39;
    }
    v29 = v27;
    if (v29 == CFSTR("url")
      || (v30 = v29,
          v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("url")),
          v30,
          (v31 & 1) != 0))
    {
      v4 = 1003;
      goto LABEL_39;
    }
    v32 = v30;
    if (v32 == CFSTR("discoveryRequest")
      || (v33 = v32,
          v34 = -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("discoveryRequest")),
          v33,
          (v34 & 1) != 0))
    {
      v4 = 2001;
      goto LABEL_39;
    }
    v35 = v33;
    if (v35 == CFSTR("discoveryResponse")
      || (v36 = v35,
          v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("discoveryResponse")),
          v36,
          v37))
    {
      v4 = 2002;
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_4:
  v4 = 1;
LABEL_39:

  return v4;
}

uint64_t PKProtobufRecurringPaymentSummaryItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v15 = v9++ >= 9;
        if (v15)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          *(_BYTE *)(a1 + 32) |= 2u;
          v18 = *v3;
          v19 = *(_QWORD *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
            *(_QWORD *)(a2 + v18) = v19 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 16;
          goto LABEL_54;
        case 2u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 32) |= 8u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            v27 = v26 + 1;
            if (v26 == -1 || v27 > *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
              *(_QWORD *)(a2 + v25) = v27;
              v24 |= (unint64_t)(v28 & 0x7F) << v22;
              if (v28 < 0)
              {
                v22 += 7;
                v15 = v23++ >= 9;
                if (v15)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_44;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v24) = 0;
LABEL_44:
          v37 = 28;
          goto LABEL_49;
        case 3u:
          v29 = 0;
          v30 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 32) |= 4u;
          break;
        case 4u:
          *(_BYTE *)(a1 + 32) |= 1u;
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + *v4))
          {
            v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v36 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v5) = 1;
            v20 = 0;
          }
          v38 = 8;
LABEL_54:
          *(_QWORD *)(a1 + v38) = v20;
          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v31 = *v3;
        v32 = *(_QWORD *)(a2 + v31);
        v33 = v32 + 1;
        if (v32 == -1 || v33 > *(_QWORD *)(a2 + *v4))
          break;
        v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
        *(_QWORD *)(a2 + v31) = v33;
        v24 |= (unint64_t)(v34 & 0x7F) << v29;
        if ((v34 & 0x80) == 0)
          goto LABEL_46;
        v29 += 7;
        v15 = v30++ >= 9;
        if (v15)
        {
          LODWORD(v24) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v24) = 0;
LABEL_48:
      v37 = 24;
LABEL_49:
      *(_DWORD *)(a1 + v37) = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKPendingProvisioningStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  int v16;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("available"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_17:
    v4 = 0;
    goto LABEL_18;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("available"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("inProgress")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("inProgress")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_18;
    }
    v8 = v6;
    if (v8 == CFSTR("actionRequired")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("actionRequired")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_18;
    }
    v11 = v9;
    if (v11 == CFSTR("unavailable")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("unavailable")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_18;
    }
    v14 = v12;
    if (v14 == CFSTR("provisioned")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("provisioned")),
          v15,
          v16))
    {
      v4 = 5;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_4:
  v4 = 1;
LABEL_18:

  return v4;
}

const __CFString *PKPendingProvisioningStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("unknown");
  else
    return off_1E2AC8B88[a1 - 1];
}

id PKAllPendingProvisioningTypes()
{
  _QWORD v1[8];

  v1[7] = *MEMORY[0x1E0C80C00];
  v1[0] = CFSTR("CarKey");
  v1[1] = CFSTR("PaymentRemoteCredential");
  v1[2] = CFSTR("PaymentShareableCredential");
  v1[3] = CFSTR("AccountCredential");
  v1[4] = CFSTR("StatefulTransfer");
  v1[5] = CFSTR("PrecursorPassCredential");
  v1[6] = CFSTR("IdentityCredential");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v1, 7);
  return (id)objc_claimAutoreleasedReturnValue();
}

id PKSharingDisplayableErrorWithIsTerminal(void *a1, char *a2)
{
  return _PKSharingDisplayableError(a1, a2, 0);
}

id _PKSharingDisplayableError(void *a1, char *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  int v11;
  uint64_t v12;
  __CFString *v13;
  __CFString *v14;
  __CFString *v15;
  int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  char v21;
  void *v22;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  int v27;
  uint64_t v28;
  __CFString *v29;
  __CFString *v30;
  __CFString *v31;
  __CFString *v32;
  __CFString *v33;
  int v34;
  uint64_t v35;
  __CFString *v36;

  v5 = a1;
  v6 = a3;
  v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v5, "domain");
  v8 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v9 = CFSTR("PKDisplayableError");
  if (v8 == v9)
  {

    goto LABEL_7;
  }
  v10 = v9;
  if (!v8 || !v9)
  {

    goto LABEL_9;
  }
  v11 = -[__CFString isEqualToString:](v8, "isEqualToString:", v9);

  if (v11)
  {
LABEL_7:
    PKTitleForDisplayableError(v5);
    v12 = objc_claimAutoreleasedReturnValue();
LABEL_17:
    v18 = (void *)v12;
    objc_msgSend(v5, "localizedRecoverySuggestion");
    v19 = objc_claimAutoreleasedReturnValue();
LABEL_18:
    v20 = (void *)v19;
LABEL_19:
    v21 = 1;
    goto LABEL_20;
  }
LABEL_9:
  v13 = v8;
  v14 = CFSTR("PKPaymentWebServiceErrorDomain");
  if (v13 == v14)
  {

  }
  else
  {
    v15 = v14;
    if (!v8 || !v14)
    {

      goto LABEL_27;
    }
    v16 = -[__CFString isEqualToString:](v13, "isEqualToString:", v14);

    if (!v16)
    {
LABEL_27:
      v24 = v13;
      v25 = CFSTR("PKSharingErrorDomain");
      if (v24 == v25)
      {

      }
      else
      {
        v26 = v25;
        if (!v8 || !v25)
        {

          goto LABEL_39;
        }
        v27 = -[__CFString isEqualToString:](v24, "isEqualToString:", v25);

        if (!v27)
        {
LABEL_39:
          v31 = v24;
          v32 = CFSTR("PKAddSecureElementPassErrorDomain");
          if (v31 == v32)
          {

          }
          else
          {
            v33 = v32;
            if (!v8 || !v32)
            {

              goto LABEL_53;
            }
            v34 = -[__CFString isEqualToString:](v31, "isEqualToString:", v32);

            if (!v34)
              goto LABEL_53;
          }
          v35 = objc_msgSend(v5, "code");
          if (v35 == 6)
          {
            PKLocalizedShareableCredentialString(CFSTR("SHAREABLE_CREDENTIAL_ERROR_UNSUPPORTED_OS_VERSION_TITLE"), 0);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = CFSTR("SHAREABLE_CREDENTIAL_ERROR_UNSUPPORTED_OS_VERSION_MESSAGE_IPHONE");
            goto LABEL_68;
          }
          if (v35 == 4)
          {
            PKLocalizedShareableCredentialString(CFSTR("SHAREABLE_CREDENTIAL_ERROR_UNSUPPORTED_DEVICE_TITLE"), 0);
            v18 = (void *)objc_claimAutoreleasedReturnValue();
            v30 = CFSTR("SHAREABLE_CREDENTIAL_ERROR_UNSUPPORTED_DEVICE_MESSAGE");
LABEL_68:
            PKLocalizedShareableCredentialString(&v30->isa, 0);
            v19 = objc_claimAutoreleasedReturnValue();
            goto LABEL_18;
          }
LABEL_53:
          v20 = 0;
          v18 = 0;
          goto LABEL_19;
        }
      }
      switch(objc_msgSend(v5, "code"))
      {
        case 2:
          goto LABEL_56;
        case 3:
          goto LABEL_55;
        case 4:
        case 13:
          PKLocalizedShareableCredentialString(CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_TIMEOUT_TITLE"), 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_TIMEOUT_DESCRIPTION");
          goto LABEL_68;
        case 5:
          goto LABEL_51;
        case 6:
          PKLocalizedShareableCredentialString(CFSTR("SHARE_REDEMEPTION_ERROR_GENERIC_TITLE"), 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("SHARE_REDEMEPTION_ERROR_GENERIC_MESSAGE");
          goto LABEL_68;
        case 7:
        case 12:
          goto LABEL_54;
        case 8:
          PKLocalizedShareableCredentialString(CFSTR("SHARE_REDEMEPTION_ERROR_GENERIC_TITLE"), 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("SHARE_REDEMEPTION_ERROR_APPLE_NOT_SUPPORTED_DESCRIPTION_IPHONE");
          goto LABEL_68;
        case 9:
          _LocalizedShareableCredentialString(CFSTR("SHARE_EDIT_ERROR_UNAVAILABLE_TITLE"), v6);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = CFSTR("SHARE_EDIT_ERROR_UNAVAILABLE_DESCRIPTION");
          goto LABEL_65;
        case 10:
          PKLocalizedShareableCredentialString(CFSTR("SHARE_REDEMPTION_ERROR_INVITATION_ALREADY_ACCEPTED_TITLE"), 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = 0;
          goto LABEL_19;
        case 11:
          PKLocalizedShareableCredentialString(CFSTR("SHARE_REDEMEPTION_ERROR_GENERIC_TITLE"), 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v30 = CFSTR("SHARE_REDEMPTION_ERROR_INVITATION_ORIGINATED_LOCALLY_DESCRIPTION");
          goto LABEL_68;
        default:
          goto LABEL_53;
      }
    }
  }
  objc_msgSend(v5, "localizedFailureReason");
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (v17)
  {
    objc_msgSend(v5, "localizedFailureReason");
    v12 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  v28 = objc_msgSend(v5, "code");
  v20 = 0;
  v21 = 1;
  if (v28 > 60078)
  {
    v18 = 0;
    switch(v28)
    {
      case 60079:
        PKLocalizedShareableCredentialString(CFSTR("SHARE_INITIATION_ERROR_SHARE_LIMIT_REACHED_TITLE"), 0);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = CFSTR("SHARE_INITIATION_ERROR_SHARE_LIMIT_REACHED_DESCRIPTION");
        goto LABEL_65;
      case 60080:
LABEL_54:
        _LocalizedShareableCredentialString(CFSTR("SHARE_INITIATION_ERROR_UNAVAILABLE_TITLE"), v6);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = CFSTR("SHARE_INITIATION_ERROR_UNAVAILABLE_DESCRIPTION");
        goto LABEL_68;
      case 60081:
      case 60082:
      case 60084:
      case 60086:
        goto LABEL_20;
      case 60083:
LABEL_55:
        PKLocalizedShareableCredentialString(CFSTR("SHARE_ACTIVATION_ERROR_INVALID_LAST_ATTEMPT_TITLE"), 0);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v36 = CFSTR("SHARE_ACTIVATION_ERROR_INVALID_LAST_ATTEMPT_DESCRIPTION");
        goto LABEL_61;
      case 60085:
        _LocalizedShareableCredentialString(CFSTR("SHARE_REDEMPTION_ERROR_PASS_MERGE_UNAVAILABLE_TITLE"), v6);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v29 = CFSTR("SHARE_REDEMPTION_ERROR_PASS_MERGE_UNAVAILABLE_DESCRIPTION");
LABEL_65:
        _LocalizedShareableCredentialString(v29, v6);
        v19 = objc_claimAutoreleasedReturnValue();
        goto LABEL_18;
      case 60087:
        _LocalizedShareableCredentialString(CFSTR("SHARE_INITIATION_ERROR_UNAVAILABLE_TITLE"), v6);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v30 = CFSTR("SHARE_INITIATION_ERROR_NAME_TAKEN_DESCRIPTION");
        goto LABEL_68;
      default:
        v18 = 0;
        goto LABEL_20;
    }
  }
  if (v28 == 60009)
  {
    PKLocalizedShareableCredentialString(CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_REQUIRED_TITLE"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_REQUIRED_DESCRIPTION");
    goto LABEL_61;
  }
  if (v28 == 60010)
  {
LABEL_56:
    PKLocalizedShareableCredentialString(CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_INVALID_TITLE"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v36 = CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_INVALID_DESCRIPTION");
LABEL_61:
    PKLocalizedShareableCredentialString(&v36->isa, 0);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = 0;
    goto LABEL_20;
  }
  v18 = 0;
  if (v28 == 60011)
  {
LABEL_51:
    PKLocalizedShareableCredentialString(CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_LOCKOUT_TITLE"), 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = CFSTR("SHARE_ACTIVATION_ERROR_PIN_CODE_LOCKOUT_DESCRIPTION");
    goto LABEL_68;
  }
LABEL_20:
  if (a2)
    *a2 = v21;
  if (v18)
  {
    objc_msgSend(v7, "setObject:forKeyedSubscript:", 0, *MEMORY[0x1E0CB2938]);
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, *MEMORY[0x1E0CB3388]);
    PKDisplayableErrorCustomWithType(-1, v18, v20, v5, v7);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v22 = 0;
  }

  return v22;
}

id PKSharingDisplayableError(NSError *a1, BOOL *a2)
{
  return _PKSharingDisplayableError(a1, (char *)a2, 0);
}

id PKSharingDisplayableError(NSError *a1)
{
  return _PKSharingDisplayableError(a1, 0, 0);
}

id PKSharingDisplayableError(NSError *a1, PKSecureElementPass *a2)
{
  return _PKSharingDisplayableError(a1, 0, a2);
}

id PKSharingProvisioningErrorFromError(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  char v7;

  v7 = 0;
  v1 = a1;
  _PKSharingDisplayableError(v1, &v7, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v7)
    v3 = 5;
  else
    v3 = 4;
  if (v2)
    v4 = v2;
  else
    v4 = v1;
  +[PKProvisioningError errorWithUnderlyingError:defaultSeverity:](PKProvisioningError, "errorWithUnderlyingError:defaultSeverity:", v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void PKSharingFetchInvitationFromMailboxAddress(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v3 = a2;
  v4 = +[PKSharingRelayChannelDescriptor existingChannelForURL:](PKSharingRelayChannelDescriptor, "existingChannelForURL:", a1);
  v5 = +[PKSharingChannelHandle createHandleForDescriptor:queue:](PKSharingChannelHandle, "createHandleForDescriptor:queue:", v4, MEMORY[0x1E0C80D38]);
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __PKSharingFetchInvitationFromMailboxAddress_block_invoke;
  v8[3] = &unk_1E2ABDAE0;
  v9 = v5;
  v10 = v3;
  v6 = v3;
  v7 = v5;
  objc_msgSend(v7, "attachWithCompletion:", v8);

}

NSString *_LocalizedShareableCredentialString(void *a1, void *a2)
{
  id v3;
  id v4;
  NSString *v5;
  NSString *v6;
  NSString *v7;
  NSString *v8;
  BOOL v9;

  v3 = a1;
  v4 = a2;
  if (v4)
  {
    PKLocalizationKeyForPassType(v3, v4);
    v5 = (NSString *)objc_claimAutoreleasedReturnValue();
    PKLocalizedShareableCredentialString(v5, 0);
    v6 = (NSString *)(id)objc_claimAutoreleasedReturnValue();
    v7 = v5;
    v8 = v7;
    if (v6 == v7)
    {

    }
    else
    {
      if (!v7 || !v6)
      {

LABEL_11:
        goto LABEL_12;
      }
      v9 = -[NSString isEqualToString:](v6, "isEqualToString:", v7);

      if (!v9)
        goto LABEL_11;
    }

  }
  PKLocalizedShareableCredentialString((NSString *)v3, 0);
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
LABEL_12:

  return v6;
}

void sub_190024BD4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 160));
  _Block_object_dispose((const void *)(v2 - 144), 8);
  _Unwind_Resume(a1);
}

const __CFString *PKPaymentOfferCriteriaIneligibleDetailsReasonToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x1A)
    return CFSTR("none");
  else
    return off_1E2AC9090[a1 - 1];
}

id PKPaymentOffersControllerGenerateCacheKey(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;

  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "length") && objc_msgSend(v4, "length"))
    v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("%@-%@"), v3, v4);
  else
    v5 = v3;
  v6 = v5;

  return v6;
}

void sub_19002742C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190027A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,char a25)
{
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose((const void *)(v26 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_190027C40(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1900284EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,id location,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a68;
  id *v68;
  uint64_t v69;

  objc_destroyWeak(v68);
  _Block_object_dispose(&a45, 8);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a52, 8);
  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose((const void *)(v69 - 248), 8);
  _Block_object_dispose((const void *)(v69 - 200), 8);
  _Block_object_dispose((const void *)(v69 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_190028708(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190029004(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190029A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,char a27)
{
  id *v27;
  uint64_t v28;

  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v28 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_190029E9C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19002A510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19002B068(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_19002DD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19002E04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19002E348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_19002E700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19002FE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufNSDecimalNumberReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unsigned int v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_65;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_67;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_65:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_67:
          v52 = 36;
          goto LABEL_88;
        case 2u:
          v24 = 0;
          v25 = 0;
          v26 = 0;
          while (2)
          {
            v27 = *v3;
            v28 = *(_QWORD *)(a2 + v27);
            if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
              *(_QWORD *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v26) = 0;
LABEL_71:
          *(_DWORD *)(a1 + 8) = -(v26 & 1) ^ ((int)v26 >> 1);
          continue;
        case 3u:
          v30 = 0;
          v31 = 0;
          v19 = 0;
          while (2)
          {
            v32 = *v3;
            v33 = *(_QWORD *)(a2 + v32);
            if (v33 == -1 || v33 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v34 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v33);
              *(_QWORD *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_75;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_75:
          v52 = 20;
          goto LABEL_88;
        case 4u:
          v35 = 0;
          v36 = 0;
          v19 = 0;
          while (2)
          {
            v37 = *v3;
            v38 = *(_QWORD *)(a2 + v37);
            if (v38 == -1 || v38 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v39 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v38);
              *(_QWORD *)(a2 + v37) = v38 + 1;
              v19 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_79;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_79:
          v52 = 16;
          goto LABEL_88;
        case 5u:
          v40 = 0;
          v41 = 0;
          v19 = 0;
          while (2)
          {
            v42 = *v3;
            v43 = *(_QWORD *)(a2 + v42);
            if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v44 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
              *(_QWORD *)(a2 + v42) = v43 + 1;
              v19 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_83;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_83:
          v52 = 12;
          goto LABEL_88;
        case 6u:
          v45 = 0;
          v46 = 0;
          v19 = 0;
          break;
        case 7u:
          PBReaderReadData();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v50;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v47 = *v3;
        v48 = *(_QWORD *)(a2 + v47);
        if (v48 == -1 || v48 >= *(_QWORD *)(a2 + *v4))
          break;
        v49 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v48);
        *(_QWORD *)(a2 + v47) = v48 + 1;
        v19 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0)
          goto LABEL_85;
        v45 += 7;
        v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_87;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_85:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_87:
      v52 = 32;
LABEL_88:
      *(_DWORD *)(a1 + v52) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_190036CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190036EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19003704C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKSecureElementAccessPassTypeToAccessKeyString(uint64_t a1)
{
  __CFString *v1;

  if (a1 == 4)
    v1 = CFSTR("ACCESS_PASS_TYPE_CAR");
  else
    v1 = CFSTR("ACCESS_PASS_TYPE_KEY");
  PKLocalizedString(&v1->isa, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

void sub_19003A034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufPaymentDeviceResponseReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  PKProtobufPaymentInstrument *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        a1[44] |= 0x10u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_77;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_79;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_77:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_79:
        v59 = v19 != 0;
        v60 = 41;
        goto LABEL_105;
      case 2u:
        v24 = objc_alloc_init(PKProtobufPaymentInstrument);
        objc_msgSend(a1, "addPaymentInstruments:", v24);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentInstrumentReadFrom((uint64_t)v24, a2) & 1) == 0)
          goto LABEL_108;
        goto LABEL_75;
      case 3u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        a1[44] |= 1u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_83;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_83:
        v61 = 8;
        goto LABEL_100;
      case 4u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        a1[44] |= 0x40u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_87;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_87:
        v59 = v33 != 0;
        v60 = 43;
        goto LABEL_105;
      case 5u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        a1[44] |= 8u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_91:
        v59 = v39 != 0;
        v60 = 40;
        goto LABEL_105;
      case 6u:
        v43 = 0;
        v44 = 0;
        v27 = 0;
        a1[44] |= 2u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v27 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_95:
        v61 = 12;
        goto LABEL_100;
      case 7u:
        v48 = 0;
        v49 = 0;
        v27 = 0;
        a1[44] |= 4u;
        while (2)
        {
          v50 = *v3;
          v51 = *(_QWORD *)(a2 + v50);
          if (v51 == -1 || v51 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v51);
            *(_QWORD *)(a2 + v50) = v51 + 1;
            v27 |= (unint64_t)(v52 & 0x7F) << v48;
            if (v52 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v27) = 0;
LABEL_99:
        v61 = 24;
LABEL_100:
        *(_DWORD *)&a1[v61] = v27;
        goto LABEL_106;
      case 8u:
        v53 = 0;
        v54 = 0;
        v55 = 0;
        a1[44] |= 0x20u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v55 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v14 = v54++ >= 9;
              if (v14)
              {
                v55 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v55 = 0;
LABEL_104:
        v59 = v55 != 0;
        v60 = 42;
LABEL_105:
        a1[v60] = v59;
        goto LABEL_106;
      case 9u:
        v24 = objc_alloc_init(PKProtobufPaymentSetupFeature);
        objc_msgSend(a1, "addSupportedSetupFeatures:", v24);
        if (PBReaderPlaceMark() && PKProtobufPaymentSetupFeatureReadFrom((uint64_t)v24, a2))
        {
LABEL_75:
          PBReaderRecallMark();

LABEL_106:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_108:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_106;
    }
  }
}

const __CFString *PKServiceProviderOrderPaymentInstrumentTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("Applet");
  else
    return CFSTR("Unknown");
}

uint64_t PKServiceProviderOrderPaymentInstrumentTypeFromString(uint64_t a1)
{
  return objc_msgSend(CFSTR("Applet"), "isEqualToString:", a1);
}

uint64_t PKProtobufIDSSharingMessageWrapperReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadData();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 16;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_34;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_36;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_36:
            *(_DWORD *)(a1 + 24) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = 8;
      }
      v26 = *(void **)(a1 + v25);
      *(_QWORD *)(a1 + v25) = v24;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKPaymentPassActionTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("enteredValue"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("purchaseNew"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("selectedItem"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("openExternalURL"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("vehicleFunctionAction"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("autoTopUp"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(CFSTR("displayAuxiliaryPassInformationItem"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(CFSTR("displayTileContext"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 8;
  }
  else if (objc_msgSend(CFSTR("viewImage"), "isEqualToString:", v1))
  {
    v2 = 9;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPaymentPassActionTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("unknown");
  else
    return off_1E2AC98F0[a1 - 1];
}

id PKRenewActionForPaymentPassAndIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  __CFString *v7;
  __CFString *v8;
  __CFString *v9;
  uint64_t v10;
  _BOOL4 v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  __CFString *v20;
  uint64_t v21;
  id v22;
  void *v23;
  __CFString *v24;
  id v25;
  void *v26;
  __CFString *v28;
  id v29;
  void *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  PKCommutePlanDictionaryForPassByIdentifier(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "availableActions");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = CFSTR("commute_plan");
  v8 = (__CFString *)v4;
  v9 = v8;
  if (v7 != v8)
  {
    if (v8 && v7)
    {
      v10 = -[__CFString caseInsensitiveCompare:](v7, "caseInsensitiveCompare:", v8);

      if (!v10)
        goto LABEL_7;
    }
    else
    {

    }
    v11 = 0;
    goto LABEL_10;
  }

LABEL_7:
  v11 = objc_msgSend(v3, "transitCommutePlanType") == 1;
LABEL_10:
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v12 = v6;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
  if (!v13)
  {
    v17 = 0;
    goto LABEL_33;
  }
  v14 = v13;
  v28 = v7;
  v29 = v3;
  v30 = v5;
  v15 = *(_QWORD *)v32;
  while (2)
  {
    for (i = 0; i != v14; ++i)
    {
      if (*(_QWORD *)v32 != v15)
        objc_enumerationMutation(v12);
      v17 = *(void **)(*((_QWORD *)&v31 + 1) + 8 * i);
      if (objc_msgSend(v17, "type") != 2)
        continue;
      if (v11)
      {
        v22 = v17;
        v5 = v30;
        v23 = v30;
        v24 = v28;
        goto LABEL_30;
      }
      objc_msgSend(v17, "associatedPlanIdentifier");
      v18 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
      v19 = v9;
      v20 = v19;
      if (v18 == v19)
      {

LABEL_29:
        v25 = v17;
        v5 = v30;
        v23 = v30;
        v24 = v20;
LABEL_30:
        objc_msgSend(v23, "objectForKeyedSubscript:", v24);
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        if (v26)
          objc_msgSend(v17, "setAssociatedPlan:", v26);
        v3 = v29;

        goto LABEL_33;
      }
      if (v9 && v18)
      {
        v21 = -[__CFString caseInsensitiveCompare:](v18, "caseInsensitiveCompare:", v19);

        if (!v21)
          goto LABEL_29;
      }
      else
      {

      }
    }
    v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v31, v35, 16);
    if (v14)
      continue;
    break;
  }
  v17 = 0;
  v3 = v29;
  v5 = v30;
LABEL_33:

  return v17;
}

uint64_t PKProtobufRemotePaymentRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  PKProtobufPaymentRequest *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(PKProtobufPaymentRequest);
          objc_storeStrong((id *)(a1 + 24), v17);
          if (PBReaderPlaceMark() && (PKProtobufPaymentRequestReadFrom((uint64_t)v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();

            continue;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 16;
          goto LABEL_26;
        case 3u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 8;
LABEL_26:
          v21 = *(void **)(a1 + v20);
          *(_QWORD *)(a1 + v20) = v19;

          continue;
        case 4u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          *(_BYTE *)(a1 + 36) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v25 = *v3;
        v26 = *(_QWORD *)(a2 + v25);
        if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
          break;
        v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v26);
        *(_QWORD *)(a2 + v25) = v26 + 1;
        v24 |= (unint64_t)(v27 & 0x7F) << v22;
        if ((v27 & 0x80) == 0)
          goto LABEL_35;
        v22 += 7;
        v14 = v23++ >= 9;
        if (v14)
        {
          LODWORD(v24) = 0;
          goto LABEL_37;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_35:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v24) = 0;
LABEL_37:
      *(_DWORD *)(a1 + 32) = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *PKProvisioningErrorSeverityToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E2AC9960[a1 - 1];
}

uint64_t PKProvisioningErrorSeverityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  int v22;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("cancel"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_23:
    v4 = 0;
    goto LABEL_24;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("cancel"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("warning")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("warning")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_24;
    }
    v8 = v6;
    if (v8 == CFSTR("invalidInput")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("invalidInput")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_24;
    }
    v11 = v9;
    if (v11 == CFSTR("regular")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("regular")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_24;
    }
    v14 = v12;
    if (v14 == CFSTR("terminal")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("terminal")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_24;
    }
    v17 = v15;
    if (v17 == CFSTR("permanentlyTerminal")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("permanentlyTerminal")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_24;
    }
    v20 = v18;
    if (v20 == CFSTR("catastrophic")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("catastrophic")),
          v21,
          v22))
    {
      v4 = 7;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_4:
  v4 = 1;
LABEL_24:

  return v4;
}

void sub_1900457C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  uint64_t v12;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a12);
  va_start(va, a12);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v12 - 136), 8);
  _Unwind_Resume(a1);
}

BOOL PKProtobufShippingMethodsReadFrom(id *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  PKProtobufShippingMethod *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
      {
        v17 = objc_alloc_init(PKProtobufShippingMethod);
        objc_storeStrong(a1 + 1, v17);
      }
      else
      {
        if ((v10 >> 3) != 1)
        {
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
          continue;
        }
        v17 = objc_alloc_init(PKProtobufShippingMethod);
        objc_msgSend(a1, "addMethods:", v17);
      }
      if (!PBReaderPlaceMark() || (PKProtobufShippingMethodReadFrom((uint64_t)v17, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PDAssertionCoordinatorInterface()
{
  if (qword_1ECF22440 != -1)
    dispatch_once(&qword_1ECF22440, &__block_literal_global_70);
  return (id)_MergedGlobals_218;
}

__CFString *PKIDSGeneralMessageIDToString(__int16 a1)
{
  if ((unsigned __int16)(a1 - 1) > 0xFu)
    return 0;
  else
    return off_1E2AC99F8[(__int16)(a1 - 1)];
}

void PKProtobufSend(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;

  v11 = (void *)MEMORY[0x1E0C99E60];
  v12 = a6;
  v13 = a4;
  v14 = a2;
  v15 = a1;
  objc_msgSend(v11, "setWithObject:", a3);
  v16 = (id)objc_claimAutoreleasedReturnValue();
  PKProtobufSendWithOptions(v15, v14, v16, 300, v13, a5, 0, v12, 0);

}

void PKProtobufSendWithOptions(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, char a7, void *a8, void *a9)
{
  id v15;
  id v16;
  id v17;
  id v18;
  void (**v19)(id, id, id);
  id v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v36;
  id v37;
  id v38;
  uint8_t buf[4];
  void *v40;
  __int16 v41;
  void *v42;
  __int16 v43;
  void *v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  id v50;
  __int16 v51;
  int v52;
  __int16 v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a2;
  v17 = a3;
  v18 = a5;
  v19 = a8;
  v20 = a9;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D341E8]);
  if (v18)
    objc_msgSend(v21, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D34198]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a6);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "setObject:forKeyedSubscript:", v22, *MEMORY[0x1E0D34158]);

  if (v20)
    objc_msgSend(v21, "addEntriesFromDictionary:", v20);
  v33 = v18;
  v23 = a4;
  if (PKForceLocalIDS() && objc_msgSend(v17, "count") == 1 && (a7 & 1) == 0)
    objc_msgSend(v21, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D34168]);
  v36 = v17;
  objc_msgSend(v17, "pk_setByApplyingBlock:", &__block_literal_global_71);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = 0;
  v38 = 0;
  v34 = v15;
  v25 = objc_msgSend(v15, "sendProtobuf:toDestinations:priority:options:identifier:error:", v16, v24, v23, v21, &v38, &v37);
  v26 = v38;
  v27 = v37;
  PKLogFacilityTypeGetObject(8uLL);
  v28 = v23;
  v29 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v16, "pkDescription");
    v32 = v20;
    v30 = v16;
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138414082;
    v40 = v34;
    v41 = 2112;
    v42 = v31;
    v43 = 2112;
    v44 = v36;
    v45 = 2048;
    v46 = v28;
    v47 = 2112;
    v48 = v21;
    v49 = 2112;
    v50 = v26;
    v51 = 1024;
    v52 = v25;
    v53 = 2112;
    v54 = v27;
    _os_log_impl(&dword_18FC92000, v29, OS_LOG_TYPE_DEFAULT, "Service %@ sent protobuf (%@) destinations %@ priority %ld options %@: identifier %@ success %d error %@", buf, 0x4Eu);

    v16 = v30;
    v20 = v32;
  }

  if (v19)
    v19[2](v19, v26, v27);

}

id PKProtoSupportDecimalNumberFromProtobuf(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  int v5;
  int v6;
  int v7;
  char v8;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && (int)objc_msgSend(v1, "length") <= 8)
  {
    objc_msgSend(v2, "mantissa");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v4, "length") == 16)
    {
      v12 = 0uLL;
      objc_msgSend(v4, "getBytes:length:", &v12, 16);
      v5 = objc_msgSend(v2, "exponent");
      v6 = v5 & 0xFFFFF0FF | ((objc_msgSend(v2, "length") & 0xF) << 8);
      v7 = v6 & 0xFFFFEFFF | ((objc_msgSend(v2, "isNegative") & 1) << 12);
      v8 = objc_msgSend(v2, "isCompact");
      v10 = v7 & 0xFFFFDFFF | ((v8 & 1) << 13) | (objc_msgSend(v2, "reserved") << 14);
      v11 = v12;
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithDecimal:", &v10);
    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

PKProtobufNSDecimalNumber *PKProtoSupportProtoDecimalNumberFromDecimalNumber(void *a1)
{
  void *v1;
  PKProtobufNSDecimalNumber *v2;
  _BYTE v4[20];
  __int128 v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return (PKProtobufNSDecimalNumber *)0;
  memset(v4, 0, sizeof(v4));
  objc_msgSend(a1, "decimalValue");
  v5 = *(_OWORD *)&v4[4];
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", &v5, 16);
  v2 = objc_alloc_init(PKProtobufNSDecimalNumber);
  -[PKProtobufNSDecimalNumber setExponent:](v2, "setExponent:", 0);
  -[PKProtobufNSDecimalNumber setLength:](v2, "setLength:", 0);
  -[PKProtobufNSDecimalNumber setIsNegative:](v2, "setIsNegative:", 0);
  -[PKProtobufNSDecimalNumber setIsCompact:](v2, "setIsCompact:", 0);
  -[PKProtobufNSDecimalNumber setReserved:](v2, "setReserved:", 0);
  -[PKProtobufNSDecimalNumber setMantissa:](v2, "setMantissa:", v1);

  return v2;
}

PKProtobufCustomPrecisionAmount *DecimalToCustomPrecisionProtobuf(void *a1)
{
  id v1;
  PKProtobufCustomPrecisionAmount *v2;
  uint64_t v3;

  v1 = a1;
  v2 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
  v3 = PKCurrencyDecimalToLegacyStorageInteger(v1, 1);

  -[PKProtobufCustomPrecisionAmount setAmount:](v2, "setAmount:", v3);
  -[PKProtobufCustomPrecisionAmount setDecimalDigitsMultiplier:](v2, "setDecimalDigitsMultiplier:", 4);
  return v2;
}

const __CFString *PKPassProvisioningMetadataSourceDeviceTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("transfer");
  else
    return CFSTR("none");
}

BOOL PKPassProvisioningMetadataSourceDeviceTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("transfer"))
  {
    if (!v1 || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("transfer")), v2, !v3))
      v4 = 0;
  }

  return v4;
}

uint64_t PKRequiresUnifiedAccessCapableDeviceForPushableMetadata(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "provisioningTarget");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "requiresSimultaneousRequestRouting");

  return v2;
}

uint64_t PKRequiresUnifiedAccessCapableDeviceForPushableConfiguration(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "metadataProviders");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "pk_containsObjectPassingTest:", &__block_literal_global_75);

  return v2;
}

const __CFString *PKCloudStoreZoneTypeToString(unint64_t a1)
{
  if (a1 > 8)
    return CFSTR("card");
  else
    return off_1E2AC9BD8[a1];
}

void sub_190056944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose((const void *)(v35 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_190057B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void SharedHardwareManagerEventListenerRemove(void *a1)
{
  id v1;
  id v2;
  _QWORD v3[4];
  id v4;

  v1 = a1;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = __SharedHardwareManagerEventListenerRemove_block_invoke;
  v3[3] = &unk_1E2ACA498;
  v4 = v1;
  v2 = v1;
  _SharedHardwareManagerEventListenerAccess(0, v3);

}

void sub_19005B590(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19005D29C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19005EC20(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190062DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__469(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__470(uint64_t a1)
{

}

void _SharedHardwareManagerEventListenerAccess(int a1, void *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  void *v6;
  PKSecureElement_HWManagerEventListener *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void (**v12)(id, uint64_t);

  v12 = a2;
  os_unfair_lock_lock(&stru_1ECF2248C);
  v3 = qword_1ECF224D0;
  if (qword_1ECF224D0)
    v4 = 1;
  else
    v4 = a1 == 0;
  if (!v4)
  {
    objc_msgSend(MEMORY[0x1E0CB3690], "pk_weakObjectsHashTableUsingPointerPersonality");
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)qword_1ECF224D0;
    qword_1ECF224D0 = v5;

    v3 = qword_1ECF224D0;
  }
  v12[2](v12, v3);
  if (objc_msgSend((id)qword_1ECF224D0, "count"))
  {
    if (!qword_1ECF224C8)
    {
      v7 = objc_alloc_init(PKSecureElement_HWManagerEventListener);
      v8 = (void *)qword_1ECF224C8;
      qword_1ECF224C8 = (uint64_t)v7;

      objc_msgSend(PKGetClassNFHardwareManager(), "sharedHardwareManagerWithNoUI");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "registerEventListener:", qword_1ECF224C8);
LABEL_13:

    }
  }
  else
  {
    if (qword_1ECF224C8)
    {
      objc_msgSend(PKGetClassNFHardwareManager(), "sharedHardwareManagerWithNoUI");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "unregisterEventListener:", qword_1ECF224C8);
      v11 = (void *)qword_1ECF224C8;
      qword_1ECF224C8 = 0;

    }
    v9 = (void *)qword_1ECF224D0;
    if (qword_1ECF224D0)
    {
      qword_1ECF224D0 = 0;
      goto LABEL_13;
    }
  }
  os_unfair_lock_unlock(&stru_1ECF2248C);

}

const __CFString *PKPeerPaymentRecurringPaymentTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACA5E0[a1 - 1];
}

uint64_t PKPeerPaymentRecurringPaymentTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("peerPayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("scheduledTopUp"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(CFSTR("thresholdTopUp"), "isEqualToString:", v1))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

PKPaymentTransaction *PKPeerPaymentTransactionForUpcomingRecurringPayment(void *a1)
{
  id v1;
  PKPaymentTransaction *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = a1;
  v2 = objc_alloc_init(PKPaymentTransaction);
  objc_msgSend(v1, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setIdentifier:](v2, "setIdentifier:", v3);

  objc_msgSend(v1, "amount");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setAmount:](v2, "setAmount:", v4);

  objc_msgSend(v1, "currency");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setCurrencyCode:](v2, "setCurrencyCode:", v5);

  -[PKPaymentTransaction setTransactionType:](v2, "setTransactionType:", 3);
  -[PKPaymentTransaction setPeerPaymentType:](v2, "setPeerPaymentType:", 4);
  -[PKPaymentTransaction setTransactionStatus:](v2, "setTransactionStatus:", 1);
  objc_msgSend(v1, "recipientAddress");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setPeerPaymentCounterpartHandle:](v2, "setPeerPaymentCounterpartHandle:", v6);

  objc_msgSend(v1, "upcomingPaymentDates");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "firstObject");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setTransactionDate:](v2, "setTransactionDate:", v8);

  -[PKPaymentTransaction setAccountType:](v2, "setAccountType:", 1);
  -[PKPaymentTransaction setRecurring:](v2, "setRecurring:", 1);
  -[PKPaymentTransaction setRecurringPeerPayment:](v2, "setRecurringPeerPayment:", v1);

  return v2;
}

PKPaymentTransaction *PKPeerPaymentTransactionForRecurringPayment(void *a1)
{
  id v1;
  PKPaymentTransaction *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = a1;
  v2 = objc_alloc_init(PKPaymentTransaction);
  objc_msgSend(v1, "identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setIdentifier:](v2, "setIdentifier:", v3);

  objc_msgSend(v1, "amount");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setAmount:](v2, "setAmount:", v4);

  objc_msgSend(v1, "currency");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setCurrencyCode:](v2, "setCurrencyCode:", v5);

  -[PKPaymentTransaction setTransactionType:](v2, "setTransactionType:", 3);
  if (objc_msgSend(v1, "type") == 3)
    v6 = 6;
  else
    v6 = 5;
  -[PKPaymentTransaction setPeerPaymentType:](v2, "setPeerPaymentType:", v6);
  -[PKPaymentTransaction setTransactionStatus:](v2, "setTransactionStatus:", 1);
  objc_msgSend(v1, "recipientAddress");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setPeerPaymentCounterpartHandle:](v2, "setPeerPaymentCounterpartHandle:", v7);

  objc_msgSend(v1, "upcomingPaymentDates");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "firstObject");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setTransactionDate:](v2, "setTransactionDate:", v9);

  -[PKPaymentTransaction setAccountType:](v2, "setAccountType:", 1);
  -[PKPaymentTransaction setRecurring:](v2, "setRecurring:", 1);
  -[PKPaymentTransaction setRecurringPeerPayment:](v2, "setRecurringPeerPayment:", v1);

  return v2;
}

void sub_1900685C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

id PKCoreSpotlightTransactionCustomKeys()
{
  return objc_autoreleaseReturnValue((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("Passbook_transactionType"), CFSTR("Passbook_transactionStatus"), CFSTR("Passbook_transactionSource"), CFSTR("Passbook_transactionCategory"), CFSTR("Passbook_transactionHandle"), CFSTR("Passbook_transactionAltDSID"), CFSTR("Passbook_transactionRegions"), CFSTR("Passbook_transactionAmount"), CFSTR("Passbook_transactionCurrencyCode"), CFSTR("Passbook_transactionTags"), CFSTR("Passbook_transactionTagKeywords"), CFSTR("Passbook_transactionSubType"), CFSTR("Passbook_transactionRewardsPercentAggregate"), CFSTR("Passbook_transactionRewardsCashAggregate"), CFSTR("Passbook_transactionIdentifier"), CFSTR("Passbook_POImuid"), CFSTR("Passbook_Brandmuid"),
                                           CFSTR("Passbook_transactionSourceIdentifier"),
                                           0));
}

id PKCoreSpotlightTransactionKeys()
{
  return objc_autoreleaseReturnValue((id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("displayName"), CFSTR("contentDescription"), CFSTR("addedDate"), CFSTR("importantDates"), CFSTR("keywords"), CFSTR("URL"), CFSTR("fullyFormattedAddress"), CFSTR("thoroughFare"), CFSTR("city"), CFSTR("stateOrProvince"), CFSTR("postalCode"), CFSTR("country"), CFSTR("latitude"), CFSTR("longitude"), CFSTR("primaryReceipients"), CFSTR("authors"), CFSTR("accountHandles"),
                                           0));
}

const __CFString *PKCoreSpotlightAccountTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("card");
  if (a1 == 2)
    v1 = CFSTR("cash");
  if (a1)
    return v1;
  else
    return CFSTR("unknown");
}

uint64_t PKCoreSpotlightAccountTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("card"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("card"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("cash")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("cash")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKCoreSpotlightAccountTypeFromAccountType(unint64_t a1)
{
  if (a1 > 4)
    return 1;
  else
    return qword_190454F60[a1];
}

unint64_t PKSharedEntitlementsMostRestrictiveShareabilityForEntitlements(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t i;
  void *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v3 = v2;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v12;
      v7 = 999;
      do
      {
        for (i = 0; i != v5; ++i)
        {
          if (*(_QWORD *)v12 != v6)
            objc_enumerationMutation(v3);
          v9 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v9, "recipientShareability", (_QWORD)v11) < v7)
            v7 = objc_msgSend(v9, "recipientShareability");
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v5);
    }
    else
    {
      v7 = 999;
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

id initFHInsightTypeOverallSpend()
{
  id *v0;

  if (qword_1EE1DB558 != -1)
    dispatch_once(&qword_1EE1DB558, &__block_literal_global_82);
  v0 = (id *)dlsym((void *)qword_1EE1DB550, "FHInsightTypeOverallSpend");
  objc_storeStrong((id *)&qword_1EE1DB548, *v0);
  _MergedGlobals_174 = (uint64_t (*)())FHInsightTypeOverallSpendFunction;
  return (id)qword_1EE1DB548;
}

id FHInsightTypeOverallSpendFunction()
{
  return (id)qword_1EE1DB548;
}

id initFHInsightTypeCategorySpend()
{
  id *v0;

  if (qword_1EE1DB558 != -1)
    dispatch_once(&qword_1EE1DB558, &__block_literal_global_82);
  v0 = (id *)dlsym((void *)qword_1EE1DB550, "FHInsightTypeCategorySpend");
  objc_storeStrong((id *)&_MergedGlobals_11, *v0);
  off_1ECF21B50 = (uint64_t (*)())FHInsightTypeCategorySpendFunction;
  return (id)_MergedGlobals_11;
}

id FHInsightTypeCategorySpendFunction()
{
  return (id)_MergedGlobals_11;
}

Class initFHCategorySpendInsight()
{
  Class result;

  if (qword_1EE1DB558 != -1)
    dispatch_once(&qword_1EE1DB558, &__block_literal_global_82);
  result = objc_getClass("FHCategorySpendInsight");
  qword_1EE1DB560 = (uint64_t)result;
  off_1ECF21B48 = (uint64_t (*)())FHCategorySpendInsightFunction;
  return result;
}

id FHCategorySpendInsightFunction()
{
  return (id)qword_1EE1DB560;
}

void sub_190071678(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t PKProtobufSubcredentialInvitationMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_42;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_44:
          v32 = 48;
          goto LABEL_49;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_40;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 64) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
          goto LABEL_40;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 56;
          goto LABEL_40;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
          goto LABEL_40;
        case 7u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
LABEL_40:
          v31 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_46;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_48;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_48:
      v32 = 32;
LABEL_49:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKProtobufPaymentSetupRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKDiscoveryCardForegroundContentModeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("light"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("dark"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(CFSTR("neutral"), "isEqualToString:", v1))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKDiscoveryLargeCardTemplateTypeFromString()
{
  return 0;
}

uint64_t PKDiscoveryMiniCardTemplateTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("copyHeavy"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(CFSTR("imageHeavyRight"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(CFSTR("imageHeavyTop"), "isEqualToString:", v1))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_19007BD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19007BE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19007F6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190081C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19008208C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900869DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900879E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190087B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190087C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190087D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190087E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190089F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19008B1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19008B288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19008B400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19008BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190095720(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_190098DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19009AD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void PKCommutePlanFormatTitleFromLabelAndValue(void *a1, id *a2, id *a3, int a4)
{
  void *v7;
  __CFString *v8;
  __CFString *v9;
  void *v10;
  void *v11;
  int v12;
  uint64_t v13;
  const __CFString *v14;
  __CFString *v15;
  int v16;
  BOOL v17;
  __CFString *v18;
  __CFString *v19;
  id v20;

  v20 = a1;
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (__CFString *)*a2;
  v9 = (__CFString *)*a3;
  -[__CFString stringByTrimmingCharactersInSet:](v8, "stringByTrimmingCharactersInSet:", v7);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString stringByTrimmingCharactersInSet:](v9, "stringByTrimmingCharactersInSet:", v7);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8 && objc_msgSend(v10, "length"))
  {
    v12 = 0;
    if (!v9)
      goto LABEL_10;
  }
  else
  {

    v12 = 1;
    v8 = &stru_1E2ADF4C0;
    if (!v9)
    {
LABEL_10:

      if (((v12 | a4 ^ 1) & 1) != 0)
      {
        v9 = &stru_1E2ADF4C0;
        goto LABEL_29;
      }
      v14 = (const __CFString *)-[__CFString copy](v8, "copy");
      v9 = v8;
      v8 = &stru_1E2ADF4C0;
LABEL_28:

      v9 = (__CFString *)v14;
      goto LABEL_29;
    }
  }
  if (!objc_msgSend(v11, "length"))
    goto LABEL_10;
  if ((v12 & 1) == 0)
  {
    v15 = v8;
    v8 = v15;
    if (v15 == v9)
    {

    }
    else
    {
      v16 = -[__CFString isEqualToString:](v15, "isEqualToString:", v9);

      if (!v16)
      {
        if ((objc_msgSend(v20, "isSuicaPass") & 1) != 0)
        {
          if ((objc_msgSend(v20, "transitCommutePlanType") == 1) == a4)
            goto LABEL_29;
        }
        else if ((a4 & 1) == 0)
        {
          goto LABEL_29;
        }
        v13 = -[__CFString copy](v9, "copy");
        v14 = v8;

        v9 = (__CFString *)v14;
        goto LABEL_27;
      }
    }
    v17 = a4 == 0;
    if (a4)
      v14 = v9;
    else
      v14 = &stru_1E2ADF4C0;
    if (!v17)
    {
      v9 = v8;
      v8 = &stru_1E2ADF4C0;
    }
    goto LABEL_28;
  }
  if ((a4 & 1) == 0)
  {
    v13 = -[__CFString copy](v9, "copy");

    v14 = &stru_1E2ADF4C0;
LABEL_27:
    v8 = (__CFString *)v13;
    goto LABEL_28;
  }
LABEL_29:
  v18 = objc_retainAutorelease(v8);
  *a2 = v18;
  v19 = objc_retainAutorelease(v9);
  *a3 = v19;

}

BOOL PKCommutePlanFieldEitherLabelOrValueIsEmpty(void *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _BOOL8 v17;

  v3 = (void *)MEMORY[0x1E0CB3500];
  v4 = a2;
  v5 = a1;
  objc_msgSend(v3, "whitespaceCharacterSet");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByTrimmingCharactersInSet:", v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByTrimmingCharactersInSet:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = v7;
  v10 = v9;
  if (v9 && (v11 = objc_msgSend(v9, "length"), v10, v11))
  {
    v12 = v8;
    if (!v12 || (v13 = v12, v14 = objc_msgSend(v12, "length"), v13, !v14))
    {
      v17 = 1;
      goto LABEL_12;
    }
    v15 = v13;
  }
  else if (!v8)
  {
    v17 = 0;
    goto LABEL_12;
  }
  v16 = objc_msgSend(v8, "length");
  v17 = v16 != 0;

  if (v10 && v16)
    v17 = objc_msgSend(v10, "length") == 0;
LABEL_12:

  return v17;
}

id PKCommutePlanDictionaryForPassByIdentifier(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "transitCommutePlans");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", objc_msgSend(v1, "count"));
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v3 = v1;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v13 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * i);
        objc_msgSend(v8, "identifier", (_QWORD)v12);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, v9);

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    }
    while (v5);
  }

  v10 = (void *)objc_msgSend(v2, "copy");
  return v10;
}

id PKTransitCommutePlanInPassForIdentifier(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  PKCommutePlanDictionaryForPassByIdentifier(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "objectForKeyedSubscript:", v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _dateFromField(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_4;
  objc_msgSend(v1, "unformattedValue");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

LABEL_4:
    v3 = 0;
  }

  return v3;
}

uint64_t PKRemoteCredentialTransferTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("serverManaged"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = objc_msgSend(CFSTR("serverManaged"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("carKey")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("carKey"), "isEqualToString:", v5), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKRemoteCredentialStatusIsAvailable(uint64_t a1)
{
  return ((unint64_t)(a1 + 1) < 7) & (0x6Cu >> (a1 + 1));
}

id initSFCreditCardNumberKey()
{
  id *v0;

  if (qword_1EE1DB5A8 != -1)
    dispatch_once(&qword_1EE1DB5A8, &__block_literal_global_871);
  v0 = (id *)dlsym((void *)qword_1EE1DB5A0, "SFCreditCardNumberKey");
  objc_storeStrong((id *)&qword_1EE1DB588, *v0);
  _MergedGlobals_30[0] = (uint64_t (*)())SFCreditCardNumberKeyFunction;
  return (id)qword_1EE1DB588;
}

id SFCreditCardNumberKeyFunction()
{
  return (id)qword_1EE1DB588;
}

id initSFCreditCardSecurityCodeKey()
{
  id *v0;

  if (qword_1EE1DB5A8 != -1)
    dispatch_once(&qword_1EE1DB5A8, &__block_literal_global_871);
  v0 = (id *)dlsym((void *)qword_1EE1DB5A0, "SFCreditCardSecurityCodeKey");
  objc_storeStrong((id *)&qword_1EE1DB590, *v0);
  off_1EE1BCC88[0] = (uint64_t (*)())SFCreditCardSecurityCodeKeyFunction;
  return (id)qword_1EE1DB590;
}

id SFCreditCardSecurityCodeKeyFunction()
{
  return (id)qword_1EE1DB590;
}

id initSFCreditCardCardholderNameKey()
{
  id *v0;

  if (qword_1EE1DB5A8 != -1)
    dispatch_once(&qword_1EE1DB5A8, &__block_literal_global_871);
  v0 = (id *)dlsym((void *)qword_1EE1DB5A0, "SFCreditCardCardholderNameKey");
  objc_storeStrong((id *)&qword_1EE1DB578, *v0);
  off_1EE1BCC90[0] = (uint64_t (*)())SFCreditCardCardholderNameKeyFunction;
  return (id)qword_1EE1DB578;
}

id SFCreditCardCardholderNameKeyFunction()
{
  return (id)qword_1EE1DB578;
}

id initSFCreditCardNameKey()
{
  id *v0;

  if (qword_1EE1DB5A8 != -1)
    dispatch_once(&qword_1EE1DB5A8, &__block_literal_global_871);
  v0 = (id *)dlsym((void *)qword_1EE1DB5A0, "SFCreditCardNameKey");
  objc_storeStrong((id *)&qword_1EE1DB598, *v0);
  off_1EE1BCC98[0] = (uint64_t (*)())SFCreditCardNameKeyFunction;
  return (id)qword_1EE1DB598;
}

id SFCreditCardNameKeyFunction()
{
  return (id)qword_1EE1DB598;
}

id initSFCreditCardExpirationDateKey()
{
  id *v0;

  if (qword_1EE1DB5A8 != -1)
    dispatch_once(&qword_1EE1DB5A8, &__block_literal_global_871);
  v0 = (id *)dlsym((void *)qword_1EE1DB5A0, "SFCreditCardExpirationDateKey");
  objc_storeStrong((id *)&qword_1EE1DB580, *v0);
  off_1EE1BCCA0[0] = (uint64_t (*)())SFCreditCardExpirationDateKeyFunction;
  return (id)qword_1EE1DB580;
}

id SFCreditCardExpirationDateKeyFunction()
{
  return (id)qword_1EE1DB580;
}

uint64_t PKProtobufPaymentSummaryItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  void *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  PKProtobufRecurringPaymentSummaryItem *v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_63;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            v19 = 0;
            goto LABEL_65;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_63:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_65:
        *(_QWORD *)(a1 + 8) = -(v19 & 1) ^ (v19 >> 1);
        goto LABEL_60;
      case 2u:
        PBReaderReadString();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = v24;

        goto LABEL_60;
      case 3u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v29 = *v3;
          v30 = *(_QWORD *)(a2 + v29);
          if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
            *(_QWORD *)(a2 + v29) = v30 + 1;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if (v31 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v28) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v28) = 0;
LABEL_69:
        *(_DWORD *)(a1 + 88) = v28;
        goto LABEL_60;
      case 4u:
        v32 = objc_alloc_init(PKProtobufRecurringPaymentSummaryItem);
        objc_storeStrong((id *)(a1 + 72), v32);
        if (!PBReaderPlaceMark()
          || (PKProtobufRecurringPaymentSummaryItemReadFrom((uint64_t)v32, a2) & 1) == 0)
        {
          goto LABEL_71;
        }
        goto LABEL_59;
      case 5u:
        v32 = objc_alloc_init(PKProtobufDeferredPaymentSummaryItem);
        objc_storeStrong((id *)(a1 + 40), v32);
        if (!PBReaderPlaceMark()
          || (PKProtobufDeferredPaymentSummaryItemReadFrom((uint64_t)v32, a2) & 1) == 0)
        {
          goto LABEL_71;
        }
        goto LABEL_59;
      case 6u:
        v32 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 24), v32);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v32, a2) & 1) == 0)
          goto LABEL_71;
        goto LABEL_59;
      case 7u:
        v32 = objc_alloc_init(PKProtobufShippingMethod);
        objc_storeStrong((id *)(a1 + 80), v32);
        if (!PBReaderPlaceMark() || (PKProtobufShippingMethodReadFrom((uint64_t)v32, a2) & 1) == 0)
          goto LABEL_71;
        goto LABEL_59;
      case 8u:
        v32 = objc_alloc_init(PKProtobufAutomaticReloadPaymentSummaryItem);
        objc_storeStrong((id *)(a1 + 16), v32);
        if (!PBReaderPlaceMark()
          || !PKProtobufAutomaticReloadPaymentSummaryItemReadFrom((uint64_t)v32, a2))
        {
          goto LABEL_71;
        }
        goto LABEL_59;
      case 9u:
        v32 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 32), v32);
        if (!PBReaderPlaceMark() || (PKProtobufNSDecimalNumberReadFrom((uint64_t)v32, a2) & 1) == 0)
          goto LABEL_71;
        goto LABEL_59;
      case 0xAu:
        v32 = objc_alloc_init(PKProtobufDisbursementSummaryItem);
        objc_storeStrong((id *)(a1 + 48), v32);
        if (!PBReaderPlaceMark() || !PKProtobufDisbursementSummaryItemReadFrom((uint64_t)v32, a2))
          goto LABEL_71;
        goto LABEL_59;
      case 0xBu:
        v32 = objc_alloc_init(PKProtobufInstantFundsOutFeeSummaryItem);
        objc_storeStrong((id *)(a1 + 56), v32);
        if (PBReaderPlaceMark() && PKProtobufInstantFundsOutFeeSummaryItemReadFrom((uint64_t)v32, a2))
        {
LABEL_59:
          PBReaderRecallMark();

LABEL_60:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_71:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_60;
    }
  }
}

id _PKPeerPaymentWebServiceError(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __CFString *v18;
  NSString *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_GENERIC_ERROR_TITLE"), 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_GENERIC_ERROR_MESSAGE"), 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  if (a1 <= 40098)
  {
    switch(a1)
    {
      case 0:
      case 2:
      case 3:
      case 4:
        goto LABEL_3;
      case 1:
        PKLocalizedPeerPaymentString(CFSTR("IDENTITY_VERIFICATION_REQUIRED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("IDENTITY_VERIFICATION_REQUIRED_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 1;
        goto LABEL_55;
      case 5:
        PKLocalizedPeerPaymentString(CFSTR("TERMS_ACCEPTANCE_REQUIRED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("TERMS_ACCEPTANCE_REQUIRED_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 5;
        goto LABEL_55;
      default:
        if (a1 == 40001)
        {
          PKLocalizedPeerPaymentString(CFSTR("STALE_RECIPIENT_ERROR_TITLE"), 0);
          v13 = objc_claimAutoreleasedReturnValue();

          PKLocalizedPeerPaymentString(CFSTR("STALE_RECIPIENT_ERROR_DESCRIPTION"), 0);
          v14 = objc_claimAutoreleasedReturnValue();

          v12 = 40001;
LABEL_55:
          v10 = (void *)v13;
          v11 = (void *)v14;
        }
        else
        {
          v15 = 40014;
LABEL_9:
          if (a1 == v15)
LABEL_3:
            v12 = a1;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 40301:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INSUFFICIENT_BALANCE_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        objc_msgSend(v9, "account");
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        v17 = objc_msgSend(v16, "role");

        if (v17 == 1)
        {
          v18 = CFSTR("PEER_PAYMENT_INSUFFICIENT_BALANCE_ERROR_NO_CARD_DESCRIPTION");
          goto LABEL_51;
        }
        if (!v17)
        {
          v18 = CFSTR("PEER_PAYMENT_INSUFFICIENT_BALANCE_ERROR_DESCRIPTION");
LABEL_51:
          PKLocalizedPeerPaymentString(&v18->isa, 0);
          v14 = objc_claimAutoreleasedReturnValue();

          v12 = 40301;
          goto LABEL_55;
        }
        v12 = 40301;
        v10 = (void *)v13;
        break;
      case 40302:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_MINIMUM_AMOUNT_NOT_MET_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_MINIMUM_AMOUNT_NOT_MET_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40302;
        goto LABEL_55;
      case 40303:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_MAXIMUM_AMOUNT_EXCEEDED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_MAXIMUM_AMOUNT_EXCEEDED_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40303;
        goto LABEL_55;
      case 40304:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_UNSUPPORTED_PAYMENT_METHOD_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_UNSUPPORTED_PAYMENT_METHOD_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40304;
        goto LABEL_55;
      case 40305:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXCEEDS_CUMULATIVE_LIMIT_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXCEEDS_CUMULATIVE_LIMIT_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40305;
        goto LABEL_55;
      case 40306:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_WOULD_EXCEED_CUMULATIVE_LIMIT_ERROR_TITLE"), 0);
        v20 = objc_claimAutoreleasedReturnValue();

        +[PKPeerPaymentService sharedInstance](PKPeerPaymentService, "sharedInstance");
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v21, "account");
        v22 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "currentBalance");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "currency");
        v24 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v22, "sendToUserFeatureDescriptor");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v25, "maximumAmount");
        v26 = (void *)objc_claimAutoreleasedReturnValue();

        if (v22 && v24 && v26)
        {
          PKFormattedCurrencyStringWithMinimalFractionDigitsFromNumber(v26, v24);
          v27 = objc_claimAutoreleasedReturnValue();
          PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_WOULD_EXCEED_CUMULATIVE_LIMIT_ERROR_DESCRIPTION_FORMAT"), CFSTR("%@"), v27);
          v28 = objc_claimAutoreleasedReturnValue();

          v11 = (void *)v27;
        }
        else
        {
          PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_WOULD_EXCEED_CUMULATIVE_LIMIT_ERROR_DESCRIPTION"), 0);
          v28 = objc_claimAutoreleasedReturnValue();
        }

        v12 = 40306;
        v10 = (void *)v20;
        v11 = (void *)v28;
        break;
      case 40307:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXCESSIVE_PAYMENTS_RECEIVED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXCESSIVE_PAYMENTS_RECEIVED_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40307;
        goto LABEL_55;
      case 40308:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_UNDERAGE_ACCOUNT_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_UNDERAGE_ACCOUNT_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40308;
        goto LABEL_55;
      case 40309:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_LOCKED_RESTRICTED_ACCOUNT_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_LOCKED_RESTRICTED_ACCOUNT_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40309;
        goto LABEL_55;
      case 40310:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_HSA2_ACCOUNT_REQUIRED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_HSA2_ACCOUNT_REQUIRED_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40310;
        goto LABEL_55;
      case 40311:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_DECLINED_BY_ISSUER_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_DECLINED_BY_ISSUER_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40311;
        goto LABEL_55;
      case 40312:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_AMBIGUOUS_SENDER_ADDRESS_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKPrimaryAppleAccountFormattedUsername();
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_AMBIGUOUS_SENDER_ADDRESS_ERROR_DESCRIPTION_FORMAT"), CFSTR("%@"), v29);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40312;
        goto LABEL_55;
      case 40313:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_ROUTING_NUMBER_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_ROUTING_NUMBER_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40313;
        goto LABEL_55;
      case 40314:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_REQUEST_TOKEN_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_REQUEST_TOKEN_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40314;
        goto LABEL_55;
      case 40315:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXPIRED_UNKNOWN_REQUEST_TOKEN_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_EXPIRED_UNKNOWN_REQUEST_TOKEN_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40315;
        goto LABEL_55;
      case 40316:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_NEGATIVE_BALANCE_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        +[PKPeerPaymentService sharedInstance](PKPeerPaymentService, "sharedInstance");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v30, "account");
        v31 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v31, "currentBalance");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "minimalFormattedStringValue");
        v33 = (void *)objc_claimAutoreleasedReturnValue();

        if (v33)
          PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_NEGATIVE_BALANCE_ERROR_DESCRIPTION_FORMAT"), CFSTR("%@"), v33);
        else
          PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_NEGATIVE_BALANCE_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40316;
        goto LABEL_55;
      case 40317:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_BANK_INFORMATION_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_BANK_INFORMATION_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40317;
        goto LABEL_55;
      case 40318:
      case 40330:
      case 40331:
      case 40332:
      case 40333:
      case 40334:
      case 40335:
      case 40336:
      case 40337:
      case 40338:
      case 40339:
      case 40340:
      case 40341:
      case 40342:
      case 40343:
      case 40344:
      case 40345:
      case 40346:
      case 40347:
      case 40348:
      case 40397:
      case 40399:
        goto LABEL_3;
      case 40319:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_EMAIL_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_INVALID_EMAIL_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40319;
        goto LABEL_55;
      case 40320:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_POBOX_NOT_ACCEPTABLE_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_POBOX_NOT_ACCEPTABLE_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40320;
        goto LABEL_55;
      case 40321:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ACCOUNT_NOT_ACTIVE_PERSONALIZED_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ACCOUNT_NOT_ACTIVE_PERSONALIZED_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40321;
        goto LABEL_55;
      case 40322:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_NOT_IN_FAMILY_CIRCLE_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_NOT_IN_FAMILY_CIRCLE_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40322;
        goto LABEL_55;
      case 40323:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_OVERAGE_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_OVERAGE_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40323;
        goto LABEL_55;
      case 40324:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_EXISTING_ACCOUNT_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_EXISTING_ACCOUNT_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40324;
        goto LABEL_55;
      case 40325:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_CANNOT_PERFORM_ACTION_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_CANNOT_PERFORM_ACTION_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40325;
        goto LABEL_55;
      case 40326:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ACCOUNT_DO_NOT_EXIST_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ACCOUNT_DO_NOT_EXIST_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40326;
        goto LABEL_55;
      case 40327:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ALERT_CANNOT_ADD_ASSOCIATED_ACCOUNT_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_ALERT_CANNOT_ADD_ASSOCIATED_ACCOUNT_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40327;
        goto LABEL_55;
      case 40328:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_OS_VERSION_UPDATE_REQUIRED_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PDDeviceSpecificLocalizedStringKeyForKey(CFSTR("PEER_PAYMENT_OS_VERSION_UPDATE_REQUIRED_ERROR_MESSAGE"));
        v19 = (NSString *)objc_claimAutoreleasedReturnValue();
        PKLocalizedPeerPaymentString(v19, 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40328;
        goto LABEL_55;
      case 40329:
        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_EXISTING_PENDING_ACCOUNT_INVITATION_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentLexingtonString(CFSTR("PEER_PAYMENT_ERROR_EXISTING_PENDING_ACCOUNT_INVITATION_MESSAGE"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40329;
        goto LABEL_55;
      case 40349:
      case 40350:
      case 40351:
      case 40352:
      case 40353:
      case 40354:
      case 40355:
      case 40356:
      case 40357:
      case 40358:
      case 40359:
      case 40360:
      case 40361:
      case 40362:
      case 40363:
      case 40364:
      case 40365:
      case 40366:
      case 40367:
      case 40368:
      case 40369:
      case 40370:
      case 40371:
      case 40372:
      case 40373:
      case 40374:
      case 40375:
      case 40376:
      case 40377:
      case 40378:
      case 40379:
      case 40380:
      case 40381:
      case 40382:
      case 40383:
      case 40384:
      case 40385:
      case 40386:
      case 40387:
      case 40388:
      case 40389:
      case 40390:
      case 40391:
      case 40392:
      case 40393:
      case 40394:
      case 40395:
      case 40396:
        break;
      case 40398:
        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_SERVICE_PROVIDER_UNAVAILABLE_ERROR_TITLE"), 0);
        v13 = objc_claimAutoreleasedReturnValue();

        PKLocalizedPeerPaymentString(CFSTR("PEER_PAYMENT_SERVICE_PROVIDER_UNAVAILABLE_ERROR_DESCRIPTION"), 0);
        v14 = objc_claimAutoreleasedReturnValue();

        v12 = 40398;
        goto LABEL_55;
      default:
        v15 = 40099;
        goto LABEL_9;
    }
  }
  if (os_variant_has_internal_ui() && (unint64_t)(v12 - 2) <= 2)
  {
    objc_msgSend(v11, "stringByAppendingString:", off_1E2ACB920[v12 - 2]);
    v34 = objc_claimAutoreleasedReturnValue();

    v11 = (void *)v34;
  }
  _PKPeerPaymentWebServiceErrorCustom(v12, v10, v11, v7, v8);
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  return v35;
}

void sub_1900AAC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _PKPeerPaymentWebServiceErrorCustom(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  v9 = a5;
  v10 = (void *)MEMORY[0x1E0C99E08];
  v11 = a4;
  v12 = a3;
  v13 = a2;
  objc_msgSend(v10, "dictionary");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, *MEMORY[0x1E0CB2D68]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v12, *MEMORY[0x1E0CB2D80]);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ - %@"), v13, v12);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v14, "setObject:forKeyedSubscript:", v15, *MEMORY[0x1E0CB2D50]);
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0CB3388]);

  if (v9)
    objc_msgSend(v14, "addEntriesFromDictionary:", v9);
  v16 = (void *)MEMORY[0x1E0CB35C8];
  v17 = (void *)objc_msgSend(v14, "copy");
  objc_msgSend(v16, "errorWithDomain:code:userInfo:", CFSTR("PKPeerPaymentWebServiceErrorDomain"), a1, v17);
  v18 = (void *)objc_claimAutoreleasedReturnValue();

  return v18;
}

void sub_1900AB4F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

BOOL PKPeerPaymentWebServiceErrorIsIdentityVerificationRequiredError(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  _BOOL8 v8;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("PKDisplayableError"));

  if (v3)
  {
    objc_msgSend(v1, "userInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
    v5 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v5;
  }
  v8 = v1
    && (objc_msgSend(v1, "domain"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("PKPeerPaymentWebServiceErrorDomain")),
        v6,
        v7)
    && objc_msgSend(v1, "code") == 1;

  return v8;
}

BOOL PKPeerPaymentWebServiceErrorIsTermsAcceptanceRequiredError(void *a1)
{
  id v1;
  void *v2;
  int v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  _BOOL8 v8;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("PKDisplayableError"));

  if (v3)
  {
    objc_msgSend(v1, "userInfo");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
    v5 = objc_claimAutoreleasedReturnValue();

    v1 = (id)v5;
  }
  v8 = v1
    && (objc_msgSend(v1, "domain"),
        v6 = (void *)objc_claimAutoreleasedReturnValue(),
        v7 = objc_msgSend(v6, "isEqualToString:", CFSTR("PKPeerPaymentWebServiceErrorDomain")),
        v6,
        v7)
    && objc_msgSend(v1, "code") == 5;

  return v8;
}

Class initSFService()
{
  Class result;

  if (qword_1EE1C55F0 != -1)
    dispatch_once(&qword_1EE1C55F0, &__block_literal_global_86);
  result = objc_getClass("SFService");
  qword_1EE1C55E0 = (uint64_t)result;
  _MergedGlobals_175 = (uint64_t (*)())SFServiceFunction;
  return result;
}

id SFServiceFunction()
{
  return (id)qword_1EE1C55E0;
}

id initSFServiceIdentifierApplePayLegacy()
{
  id *v0;

  if (qword_1EE1C55F0 != -1)
    dispatch_once(&qword_1EE1C55F0, &__block_literal_global_86);
  v0 = (id *)dlsym((void *)qword_1EE1C55E8, "SFServiceIdentifierApplePayLegacy");
  objc_storeStrong((id *)&_MergedGlobals_1_1, *v0);
  off_1ECF21B60 = (uint64_t (*)())SFServiceIdentifierApplePayLegacyFunction;
  return (id)_MergedGlobals_1_1;
}

id SFServiceIdentifierApplePayLegacyFunction()
{
  return (id)_MergedGlobals_1_1;
}

const __CFString *PKShareStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 8)
    return CFSTR("unknown");
  else
    return off_1E2ACBBC0[a1 - 1];
}

uint64_t PKShareStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  char v37;
  __CFString *v38;
  __CFString *v39;
  int v40;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("active"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_37:
    v4 = 0;
    goto LABEL_38;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("active"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("pendingAcknowlegement")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("pendingAcknowlegement")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_38;
    }
    v8 = v6;
    if (v8 == CFSTR("pending")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("pending")),
          v9,
          (v10 & 1) != 0)
      || (v11 = v9, v11 == CFSTR("pendingAccept"))
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("pendingAccept")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_38;
    }
    v14 = v12;
    if (v14 == CFSTR("pendingActivation")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("pendingActivation")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_38;
    }
    v17 = v15;
    if (v17 == CFSTR("requiresVerification")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("requiresVerification")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_38;
    }
    v20 = v18;
    if (v20 == CFSTR("revoked"))
      goto LABEL_25;
    v21 = v20;
    v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("revoked"));

    if ((v22 & 1) != 0)
      goto LABEL_25;
    v23 = v21;
    if (v23 == CFSTR("requiresConfirmation")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("requiresConfirmation")),
          v24,
          (v25 & 1) != 0)
      || (v26 = v24, v26 == CFSTR("pendingRegister"))
      || (v27 = v26,
          v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("pendingRegister")),
          v27,
          (v28 & 1) != 0))
    {
LABEL_25:
      v4 = 6;
      goto LABEL_38;
    }
    v29 = v27;
    if (v29 == CFSTR("suspended")
      || (v30 = v29,
          v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("suspended")),
          v30,
          (v31 & 1) != 0)
      || (v32 = v30, v32 == CFSTR("pendingDelete"))
      || (v33 = v32,
          v34 = -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("pendingDelete")),
          v33,
          (v34 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_38;
    }
    v35 = v33;
    if (v35 == CFSTR("canceled")
      || (v36 = v35,
          v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("canceled")),
          v36,
          (v37 & 1) != 0))
    {
      v4 = 8;
      goto LABEL_38;
    }
    v38 = v36;
    if (v38 == CFSTR("notSupported")
      || (v39 = v38,
          v40 = -[__CFString isEqualToString:](v38, "isEqualToString:", CFSTR("notSupported")),
          v39,
          v40))
    {
      v4 = 9;
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_4:
  v4 = 1;
LABEL_38:

  return v4;
}

uint64_t PKShareStatusFromCarKeyStatus(uint64_t a1, _BYTE *a2)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 1:
    case 2:
    case 14:
      result = 1;
      break;
    case 6:
    case 7:
    case 8:
    case 9:
      result = 7;
      break;
    case 10:
      result = 0;
      if (a2)
        *a2 = 1;
      break;
    case 15:
      result = 6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PKShareStatusIsTerminal(unint64_t a1)
{
  return (a1 < 0xA) & (0x340u >> a1);
}

BOOL PKShareStatusIsPendingVerification(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL PKShareStatusIsWaitingOnUserAction(uint64_t a1)
{
  return a1 == 5;
}

BOOL PKShareStatusIsPending(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFELL) == 2;
}

const __CFString *PKSharingCapabilityShareabilityToString(uint64_t a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;

  v1 = CFSTR("none");
  v2 = CFSTR("max_depth_3");
  v3 = CFSTR("all");
  if (a1 != 999)
    v3 = CFSTR("none");
  if (a1 != 3)
    v2 = v3;
  if (a1 == 2)
    v1 = CFSTR("propagate");
  if (a1 == 1)
    v1 = CFSTR("direct");
  if (a1 <= 2)
    return v1;
  else
    return v2;
}

uint64_t PKSharingCapabilityShareabilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  __CFString *v4;
  __CFString *v5;
  char v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  int v19;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("direct"))
    goto LABEL_6;
  if (!v1)
  {
LABEL_18:
    v7 = 0;
    goto LABEL_19;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("direct"));

  if ((v3 & 1) == 0)
  {
    v4 = v2;
    if (v4 != CFSTR("max_depth_1"))
    {
      v5 = v4;
      v6 = -[__CFString isEqualToString:](v4, "isEqualToString:", CFSTR("max_depth_1"));

      if ((v6 & 1) == 0)
      {
        v8 = v5;
        if (v8 == CFSTR("propagate")
          || (v9 = v8,
              v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("propagate")),
              v9,
              (v10 & 1) != 0)
          || (v11 = v9, v11 == CFSTR("max_depth_2"))
          || (v12 = v11,
              v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("max_depth_2")),
              v12,
              (v13 & 1) != 0))
        {
          v7 = 2;
          goto LABEL_19;
        }
        v14 = v12;
        if (v14 == CFSTR("max_depth_3")
          || (v15 = v14,
              v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("max_depth_3")),
              v15,
              (v16 & 1) != 0))
        {
          v7 = 3;
          goto LABEL_19;
        }
        v17 = v15;
        if (v17 == CFSTR("all")
          || (v18 = v17,
              v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("all")),
              v18,
              v19))
        {
          v7 = 999;
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
  }
LABEL_6:
  v7 = 1;
LABEL_19:

  return v7;
}

id PKSharingCapabilityShareabilitiesToStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_87);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKSharingCapabilityShareabilitiesFromStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_51);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

BOOL PKSharingCapabilityShareabilityCanAllowResharing(uint64_t a1)
{
  return a1 != 0;
}

id PKSharingCapabilityShareabilityToLocalizedString(uint64_t a1, id *a2)
{
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;

  v5 = CFSTR("CAPABILITY_SHAREABILITY_NONE_DESCRIPTION");
  v6 = CFSTR("CAPABILITY_SHAREABILITY_NONE_TITLE");
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      v5 = CFSTR("CAPABILITY_SHAREABILITY_DIRECT_DESCRIPTION");
      v6 = CFSTR("CAPABILITY_SHAREABILITY_DIRECT_TITLE");
      goto LABEL_7;
    case 2:
      v5 = CFSTR("CAPABILITY_SHAREABILITY_PROPAGATE_DESCRIPTION");
      v6 = CFSTR("CAPABILITY_SHAREABILITY_PROPAGATE_TITLE");
      goto LABEL_7;
    case 3:
      v5 = CFSTR("CAPABILITY_SHAREABILITY_MAX_3_DESCRIPTION");
      v6 = CFSTR("CAPABILITY_SHAREABILITY_MAX_3_TITLE");
      goto LABEL_7;
    default:
      if (a1 == 999)
      {
        v5 = CFSTR("CAPABILITY_SHAREABILITY_ALL_DESCRIPTION");
        v6 = CFSTR("CAPABILITY_SHAREABILITY_ALL_TITLE");
LABEL_7:
        PKLocalizedShareableCredentialString(&v6->isa, 0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        PKLocalizedShareableCredentialString(&v5->isa, 0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        if (v7)
        {
          if (!a2)
            goto LABEL_10;
          goto LABEL_9;
        }
      }
      else
      {
        v8 = 0;
      }
      PKLocalizedShareableCredentialString(CFSTR("CAPABILITY_SHAREABILITY_NONE_TITLE"), 0);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (a2)
LABEL_9:
        objc_storeStrong(a2, v8);
LABEL_10:

      return v7;
  }
}

uint64_t PKSharingCapabilityShareabilityIsComplexCapability(uint64_t a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
    case 2:
      return result;
    default:
      result = 1;
      break;
  }
  return result;
}

const __CFString *PKSharingCapabilityManageabilityToString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 3)
    return CFSTR("none");
  else
    return off_1E2ACBC08[a1 + 1];
}

uint64_t PKSharingCapabilityManageabilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("propagate"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("propagate"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("all.max_depth_1")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("all.max_depth_1")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("all")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("all")), v9, v10))
    {
      v4 = -1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

id PKSharingCapabilityManageabilitiesToStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_74_0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKSharingCapabilityManageabilitiesFromStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_75_0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKSharingCapabilityManageabilityToLocalizedString(uint64_t a1)
{
  void *v1;

  if ((unint64_t)(a1 + 1) > 3
    || (PKLocalizedShareableCredentialString(&off_1E2ACBC28[a1 + 1]->isa, 0),
        (v1 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    PKLocalizedShareableCredentialString(CFSTR("CAPABILITY_MANAGEABILITY_NONE_TITLE"), 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

BOOL PKSharingCapabilityManageabilityIsComplexCapability(uint64_t a1)
{
  return ((a1 + 1) & 0xFFFFFFFFFFFFFFFDLL) != 0;
}

const __CFString *PKSharingCapabilityVisibilityToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 == 1)
    v1 = CFSTR("propagate");
  if (a1 == 2)
    return CFSTR("all");
  else
    return v1;
}

uint64_t PKSharingCapabilityVisibilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("propagate"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("propagate"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("all")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("all")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

id PKSharingCapabilityVisibilitiesToStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_84_1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

id PKSharingCapabilityVisibilitiesFromStringArray(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "count"))
  {
    objc_msgSend(v2, "pk_arrayByApplyingBlock:", &__block_literal_global_85_0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

const __CFString *PKPassShareManageabilityToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 == 1)
    v1 = CFSTR("revoke");
  if (a1 == 2)
    return CFSTR("edit");
  else
    return v1;
}

uint64_t PKPassShareManageabilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("revoke"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("revoke"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("edit")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("edit")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

id PKSharingCapabilityVisibilityToLocalizedString(unint64_t a1)
{
  void *v1;

  if (a1 > 2
    || (PKLocalizedShareableCredentialString(&off_1E2ACBC48[a1]->isa, 0),
        (v1 = (void *)objc_claimAutoreleasedReturnValue()) == 0))
  {
    PKLocalizedShareableCredentialString(CFSTR("CAPABILITY_VISIBILITY_NONE_TITLE"), 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v1;
}

BOOL PKSharingCapabilityVisibilityIsComplexCapability(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 0xFFFFFFFFFFFFFFFELL;
}

uint64_t PKSharingCapabilityIsVisibilityValidForManageability(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  _BOOL4 v4;
  unsigned int v5;

  v2 = (a2 + 1) & 0xF;
  v3 = (6u >> v2) & 1;
  if ((unint64_t)(a2 + 1) >= 4)
    v3 = 0;
  v4 = v2 == 1;
  v5 = (unint64_t)(a2 + 1) < 4 && v4;
  if (a1)
    v5 = 0;
  if (a1 == 1)
    v5 = v3;
  if (a1 == 2)
    return 1;
  else
    return v5;
}

BOOL PKSharingCapabilityIsManageabilityValidForVisibility(unint64_t a1, uint64_t a2)
{
  if (a1 < 2)
    return 1;
  if (a1 == 2 || a1 == -1)
    return a2 == 2;
  return 0;
}

const __CFString *PKSharingRelayServerEnvironmentToString(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("Auto");
  else
    return off_1E2ACBC60[a1];
}

uint64_t PKSharingRelayServerEnvironmentFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  char v12;
  __CFString *v13;
  __CFString *v14;
  char v15;
  __CFString *v16;
  __CFString *v17;
  char v18;
  __CFString *v19;
  __CFString *v20;
  char v21;
  __CFString *v22;
  __CFString *v23;
  char v24;
  __CFString *v25;
  __CFString *v26;
  char v27;
  __CFString *v28;
  __CFString *v29;
  char v30;
  __CFString *v31;
  __CFString *v32;
  int v33;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("Automatic") && v1 != 0)
  {
    v4 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("Automatic"));

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("Config")
        || (v8 = v7,
            v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("Config")),
            v8,
            (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("Prod")
        || (v11 = v10,
            v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", CFSTR("Prod")),
            v11,
            (v12 & 1) != 0))
      {
        v5 = 2;
        goto LABEL_7;
      }
      v13 = v11;
      if (v13 == CFSTR("Cert")
        || (v14 = v13,
            v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("Cert")),
            v14,
            (v15 & 1) != 0))
      {
        v5 = 3;
        goto LABEL_7;
      }
      v16 = v14;
      if (v16 == CFSTR("QA")
        || (v17 = v16,
            v18 = -[__CFString isEqualToString:](v16, "isEqualToString:", CFSTR("QA")),
            v17,
            (v18 & 1) != 0))
      {
        v5 = 4;
        goto LABEL_7;
      }
      v19 = v17;
      if (v19 == CFSTR("Dev")
        || (v20 = v19,
            v21 = -[__CFString isEqualToString:](v19, "isEqualToString:", CFSTR("Dev")),
            v20,
            (v21 & 1) != 0))
      {
        v5 = 5;
        goto LABEL_7;
      }
      v22 = v20;
      if (v22 == CFSTR("CN-Prod")
        || (v23 = v22,
            v24 = -[__CFString isEqualToString:](v22, "isEqualToString:", CFSTR("CN-Prod")),
            v23,
            (v24 & 1) != 0))
      {
        v5 = 6;
        goto LABEL_7;
      }
      v25 = v23;
      if (v25 == CFSTR("CN-Cert")
        || (v26 = v25,
            v27 = -[__CFString isEqualToString:](v25, "isEqualToString:", CFSTR("CN-Cert")),
            v26,
            (v27 & 1) != 0))
      {
        v5 = 7;
        goto LABEL_7;
      }
      v28 = v26;
      if (v28 == CFSTR("CN-QA")
        || (v29 = v28,
            v30 = -[__CFString isEqualToString:](v28, "isEqualToString:", CFSTR("CN-QA")),
            v29,
            (v30 & 1) != 0))
      {
        v5 = 8;
        goto LABEL_7;
      }
      v31 = v29;
      if (v31 == CFSTR("CN-Dev")
        || (v32 = v31,
            v33 = -[__CFString isEqualToString:](v31, "isEqualToString:", CFSTR("CN-Dev")),
            v32,
            v33))
      {
        v5 = 9;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

id PKSharingRelayServerURLForCurrentEnvironment(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;

  v1 = a1;
  v2 = _PKSharingCurrentRelayServerEnvironment();
  _PKSharingResolveRelayServerURLForEnvironment(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

__CFString *_PKSharingResolveRelayServerURLForEnvironment(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  uint64_t v8;

  v3 = a2;
  _PKTrimmedSharingRelayServerOverrideURL();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v4, "length"))
  {
    v5 = v4;
  }
  else
  {
    v6 = CFSTR("wallet.apple.com");
    switch(a1)
    {
      case 0:
        v8 = PKSharingResolvedRelayServerEnvironment();
        if (v3 && v8 == 2)
          goto LABEL_12;
        _PKSharingResolveRelayServerURLForEnvironment(v8, v3);
        v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
        break;
      case 1:
        if (!v3)
          goto LABEL_4;
LABEL_12:
        v5 = (__CFString *)v3;
        break;
      case 3:
        v6 = CFSTR("cert-wallet.apple.com");
        goto LABEL_4;
      case 4:
        v6 = CFSTR("qa-wallet.apay.apple.com");
        goto LABEL_4;
      case 5:
        v6 = CFSTR("dev-wallet.apay.apple.com");
        goto LABEL_4;
      case 6:
        v6 = CFSTR("wallet.apple.com.cn");
        goto LABEL_4;
      case 7:
        v6 = CFSTR("cert-wallet.apple.com.cn");
        goto LABEL_4;
      case 8:
        v6 = CFSTR("qa-wallet.apple.com.cn");
        goto LABEL_4;
      case 9:
        v6 = CFSTR("dev-wallet.apple.com.cn");
        goto LABEL_4;
      default:
        goto LABEL_4;
    }
  }
  v6 = v5;
LABEL_4:

  return v6;
}

uint64_t _PKSharingCurrentRelayServerEnvironment()
{
  void *v0;
  uint64_t v1;

  PKSharingRelayServerEnvironmentOverride();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = PKSharingRelayServerEnvironmentFromString(v0);

  return v1;
}

id PKSharingRelayServerURLs()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD v6[9];

  v6[8] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v6[0] = CFSTR("wallet.apple.com");
  v6[1] = CFSTR("cert-wallet.apple.com");
  v6[2] = CFSTR("qa-wallet.apay.apple.com");
  v6[3] = CFSTR("dev-wallet.apay.apple.com");
  v6[4] = CFSTR("wallet.apple.com.cn");
  v6[5] = CFSTR("cert-wallet.apple.com.cn");
  v6[6] = CFSTR("qa-wallet.apple.com.cn");
  v6[7] = CFSTR("dev-wallet.apple.com.cn");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 8);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)objc_msgSend(v0, "initWithArray:", v1);

  _PKTrimmedSharingRelayServerOverrideURL();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "safelyAddObject:", v3);

  v4 = (void *)objc_msgSend(v2, "copy");
  return v4;
}

id _PKTrimmedSharingRelayServerOverrideURL()
{
  void *v0;
  void *v1;

  PKSharingRelayServerOverrideURL();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "host");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

__CFString *PKSharingRelayServerPushTopicForCurrentEnvironment()
{
  unint64_t v0;

  v0 = PKSharingResolvedRelayServerEnvironment();
  return PKSharingRelayServerPushTopicForEnvironment(v0);
}

__CFString *PKSharingRelayServerPushTopicForEnvironment(unint64_t a1)
{
  __CFString *v2;
  uint64_t v4;

  v2 = CFSTR("com.apple.wallet.sharing");
  if (a1 <= 9)
  {
    if (((1 << a1) & 0x330) != 0)
    {
      v2 = CFSTR("com.apple.wallet.sharing.qa");
    }
    else if (!a1)
    {
      v4 = PKSharingResolvedRelayServerEnvironment();
      PKSharingRelayServerPushTopicForEnvironment(v4);
      v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  return v2;
}

uint64_t PKSharingResolvedRelayServerEnvironment()
{
  void *v0;
  void *v1;
  __CFString *v2;
  __CFString *v3;
  char v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  uint64_t v11;
  void *v12;
  char v13;

  _PKTrimmedSharingRelayServerOverrideURL();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (!v0)
    goto LABEL_9;
  v2 = v0;
  if (v2 == CFSTR("cert-wallet.apple.com"))
    goto LABEL_15;
  v3 = v2;
  v4 = -[__CFString isEqualToString:](v2, "isEqualToString:", CFSTR("cert-wallet.apple.com"));

  if ((v4 & 1) != 0)
    goto LABEL_15;
  v5 = v3;
  if (v5 == CFSTR("qa-wallet.apay.apple.com"))
    goto LABEL_14;
  v6 = v5;
  v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("qa-wallet.apay.apple.com"));

  if ((v7 & 1) != 0)
    goto LABEL_14;
  v8 = v6;
  if (v8 != CFSTR("dev-wallet.apay.apple.com"))
  {
    v9 = v8;
    v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("dev-wallet.apay.apple.com"));

    if ((v10 & 1) == 0)
    {
LABEL_9:
      v11 = _PKSharingCurrentRelayServerEnvironment();
      if (v11)
        goto LABEL_16;
      if (os_variant_has_internal_ui())
      {
        PKStockholmEnvironmentName();
        v12 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v12, "containsString:", CFSTR("Cert")))
        {

          v11 = 3;
          goto LABEL_16;
        }
        v13 = objc_msgSend(v12, "containsString:", CFSTR("QA"));

        if ((v13 & 1) != 0)
        {
LABEL_14:
          v11 = 4;
          goto LABEL_16;
        }
      }
LABEL_15:
      v11 = 2;
      goto LABEL_16;
    }
  }
  v11 = 5;
LABEL_16:

  return v11;
}

const __CFString *PKSharingRelayServerThirdPartyPushTopic()
{
  return CFSTR("com.apple.wallet.sharing.partners");
}

void *PKSharingRelayServerPushTopics()
{
  return &unk_1E2C3DFA8;
}

__CFString *PKSharingLoggableMailboxAddress(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  int v8;
  unint64_t v9;
  __CFString *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;

  v1 = a1;
  if (v1)
  {
    if (os_variant_has_internal_ui())
    {
      v2 = (__CFString *)objc_msgSend(v1, "copy");
    }
    else
    {
      v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E98]), "initWithString:", v1);
      v4 = v3;
      if (v3
        && (objc_msgSend(v3, "host"),
            v5 = (void *)objc_claimAutoreleasedReturnValue(),
            v6 = objc_msgSend(v5, "length"),
            v5,
            v6))
      {
        objc_msgSend(v4, "lastPathComponent");
        v7 = (id)objc_claimAutoreleasedReturnValue();
        v8 = 1;
      }
      else
      {
        v7 = v1;
        v8 = 0;
      }
      v9 = objc_msgSend(v7, "length");
      if (v9 < 0x20)
      {
        v10 = CFSTR("<redacted>");
      }
      else
      {
        objc_msgSend(v7, "substringFromIndex:", v9 - 8);
        v10 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      objc_msgSend(CFSTR("MB-"), "stringByAppendingString:", v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();

      if (v8)
      {
        v12 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
        objc_msgSend(v4, "pathComponents");
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        v14 = objc_msgSend(v13, "count");
        if ((unint64_t)(v14 - 1) >= 2)
        {
          v15 = v14;
          v16 = 2;
          do
          {
            objc_msgSend(v13, "objectAtIndexedSubscript:", v16 - 1);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v12, "appendFormat:", CFSTR("%@/"), v17);

            ++v16;
          }
          while (v15 != v16);
        }
        objc_msgSend(v12, "appendString:", v11);
        v18 = objc_alloc(MEMORY[0x1E0CB3940]);
        objc_msgSend(v4, "scheme");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "host");
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v2 = (__CFString *)objc_msgSend(v18, "initWithFormat:", CFSTR("%@://%@/%@"), v19, v20, v12);

      }
      else
      {
        v2 = v11;
      }

    }
  }
  else
  {
    v2 = CFSTR("MB-???");
  }

  return v2;
}

id PKSharingMailboxIdentifierForAddress(void *a1)
{
  objc_class *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;

  if (a1)
  {
    v1 = (objc_class *)MEMORY[0x1E0C99E98];
    v2 = a1;
    v3 = (void *)objc_msgSend([v1 alloc], "initWithString:", v2);

    if (v3
      && (objc_msgSend(v3, "host"),
          v4 = (void *)objc_claimAutoreleasedReturnValue(),
          v5 = objc_msgSend(v4, "length"),
          v4,
          v5))
    {
      objc_msgSend(v3, "lastPathComponent");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

const __CFString *PKStringFromPhysicalCardOrderReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 4)
    return CFSTR("new");
  else
    return off_1E2ACBD00[a1 - 1];
}

uint64_t PKPhysicalCardOrderReasonFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  int v16;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("new"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_17:
    v4 = 5;
    goto LABEL_18;
  }
  v3 = objc_msgSend(CFSTR("new"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("lost")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("lost"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_18;
    }
    v8 = v6;
    if (v8 == CFSTR("stolen")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("stolen"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_18;
    }
    v11 = v9;
    if (v11 == CFSTR("damaged")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("damaged"), "isEqualToString:", v11), v12, (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_18;
    }
    v14 = v12;
    if (v14 == CFSTR("expired")
      || (v15 = v14, v16 = objc_msgSend(CFSTR("expired"), "isEqualToString:", v14), v15, v16))
    {
      v4 = 1;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_4:
  v4 = 0;
LABEL_18:

  return v4;
}

uint64_t PKServiceProviderPurchaseStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("pending"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("complete"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(CFSTR("refunded"), "isEqualToString:", v1))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKServiceProviderPurchaseStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACBD28[a1 - 1];
}

uint64_t PKPeerPaymentPurchaseDataStatusFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("pending"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("complete"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("rejected"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("canceled"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("expired"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(CFSTR("failed"), "isEqualToString:", v1))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentPurchaseDataStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E2ACBD40[a1 - 1];
}

Class initCHSTimelineController()
{
  Class result;

  if (qword_1ECF224F0 != -1)
    dispatch_once(&qword_1ECF224F0, &__block_literal_global_88);
  result = objc_getClass("CHSTimelineController");
  _MergedGlobals_225 = (uint64_t)result;
  getCHSTimelineControllerClass[0] = (uint64_t (*)())CHSTimelineControllerFunction;
  return result;
}

id CHSTimelineControllerFunction()
{
  return (id)_MergedGlobals_225;
}

void sub_1900BCB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Unwind_Resume(a1);
}

void sub_1900BD16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufShareableCredentialReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_35;
        case 2u:
          v20 = 0;
          v21 = 0;
          v22 = 0;
          *(_BYTE *)(a1 + 68) |= 1u;
          break;
        case 3u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
          goto LABEL_35;
        case 4u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 48;
          goto LABEL_35;
        case 5u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_35;
        case 6u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_35;
        case 7u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 56;
          goto LABEL_35;
        case 8u:
          PBReaderReadString();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 40;
LABEL_35:
          v26 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v23 = *v3;
        v24 = *(_QWORD *)(a2 + v23);
        if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          break;
        v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
        *(_QWORD *)(a2 + v23) = v24 + 1;
        v22 |= (unint64_t)(v25 & 0x7F) << v20;
        if ((v25 & 0x80) == 0)
          goto LABEL_39;
        v20 += 7;
        v14 = v21++ >= 9;
        if (v14)
        {
          LODWORD(v22) = 0;
          goto LABEL_41;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_39:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v22) = 0;
LABEL_41:
      *(_DWORD *)(a1 + 64) = v22;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _EnrollmentErrorWithUnderlyingError(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v6 = *MEMORY[0x1E0CB3388];
  v7[0] = a1;
  v1 = (void *)MEMORY[0x1E0C99D80];
  v2 = a1;
  objc_msgSend(v1, "dictionaryWithObjects:forKeys:count:", v7, &v6, 1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), -1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

id PKDataDetectorTypesValidateString(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;

  v1 = a1;
  if (qword_1EE1DB5E0 != -1)
    dispatch_once(&qword_1EE1DB5E0, &__block_literal_global_92);
  v2 = (void *)_MergedGlobals_3;
  v3 = v1;
  v4 = v2;
  if ((objc_msgSend(v4, "containsObject:", v3) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    objc_msgSend(v4, "componentsJoinedByString:", CFSTR(", "));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    PKValidationErrorWithReason(CFSTR("%@ is not in %@"), v6, v7, v8, v9, v10, v11, v12, (uint64_t)v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v5;
}

uint64_t PKDataDetectorTypesFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypePhoneNumber")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypeLink")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypeAddress")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypeCalendarEvent")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypeNone")) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("PKDataDetectorTypeAll")) << 63 >> 63;
  }

  return v2;
}

const __CFString *PKLocalizedPaymentUnitKeyForType(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 4)
    return CFSTR("COMMUTE_PLAN_COUNT_BASED_NUMBER_OF_RIDES_DEFAULT");
  else
    return (const __CFString *)qword_1E2ACC0B8[a1 + 1];
}

uint64_t PKPassSectionDetailDrillInFieldAuthenticationRequirementFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("deviceOwner"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("deviceOwner"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("bio")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("bio")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

void sub_1900C7C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL PKProtobufRemoteRegistrationRequestResultReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__version;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__version;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__version;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__result;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__result;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___PKProtobufRemoteRegistrationRequestResult__result;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1900CAD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  id *v30;
  id *v31;
  id *v32;
  uint64_t v33;

  objc_destroyWeak(v32);
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose((const void *)(v33 - 152), 8);
  objc_destroyWeak((id *)(v33 - 104));
  _Unwind_Resume(a1);
}

void sub_1900CB144(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1900CC97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  id *v43;
  id *v44;
  uint64_t v45;

  objc_destroyWeak(v44);
  objc_destroyWeak(v43);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v45 - 256), 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v45 - 168));
  _Unwind_Resume(a1);
}

void sub_1900CCD10(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1900CCFA8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1900CD4BC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1900CDF54(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  uint64_t v4;

  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_1900CE084(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

const __CFString *PKPayLaterFinancingControllerChannelTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("web");
  if (a1 == 1)
    v1 = CFSTR("inApp");
  if (a1)
    return v1;
  else
    return CFSTR("none");
}

const __CFString *PKCloudStoreItemTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E2ACC5E0[a1 - 1];
}

__CFString *PKCloudStoreCodingTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2ACC630[a1];
}

uint64_t PKCloudStoreCodingTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v4;
  uint64_t v5;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v10;
  __CFString *v11;
  int v12;

  v1 = a1;
  v2 = v1;
  if (v1 != CFSTR("DeviceData") && v1 != 0)
  {
    v4 = objc_msgSend(CFSTR("DeviceData"), "isEqualToString:", v1);

    if ((v4 & 1) == 0)
    {
      v7 = v2;
      if (v7 == CFSTR("ServerData")
        || (v8 = v7, v9 = objc_msgSend(CFSTR("ServerData"), "isEqualToString:", v7), v8, (v9 & 1) != 0))
      {
        v5 = 1;
        goto LABEL_7;
      }
      v10 = v8;
      if (v10 == CFSTR("AllData")
        || (v11 = v10, v12 = objc_msgSend(CFSTR("AllData"), "isEqualToString:", v10), v11, v12))
      {
        v5 = 2;
        goto LABEL_7;
      }
    }
  }
  v5 = 0;
LABEL_7:

  return v5;
}

void sub_1900D2E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1900D3114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900D4518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1900D4A2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

const __CFString *PKPeerPaymentControllerStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("Unknown");
  else
    return off_1E2ACD7A8[a1 - 1];
}

const __CFString *PKPeerPaymentControllerModeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("Unknown");
  else
    return off_1E2ACD7E0[a1 - 1];
}

void sub_1900DC2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose(&a44, 8);
  _Block_object_dispose(&a50, 8);
  _Unwind_Resume(a1);
}

void sub_1900DF878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPeerPaymentControllerStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("Recipient"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("Mode"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("Quote"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("Authorize"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("Perform"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("Request"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(CFSTR("Complete"), "isEqualToString:", v1))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPeerPaymentControllerModeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("Send"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("DeviceTapSend"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("Request"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("Withdrawal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("InstantWithdrawal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(CFSTR("TopUp"), "isEqualToString:", v1))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKProtobufRemoteRegistrationRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  BOOL v37;
  uint64_t v38;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v24 = 0;
        v25 = 0;
        v26 = 0;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          v27 = *v3;
          v28 = *(_QWORD *)(a2 + v27);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
            break;
          v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
          *(_QWORD *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0)
            goto LABEL_49;
          v24 += 7;
          v14 = v25++ >= 9;
          if (v14)
          {
            v26 = 0;
            goto LABEL_51;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_49:
        if (*(_BYTE *)(a2 + *v5))
          v26 = 0;
LABEL_51:
        v37 = v26 != 0;
        v38 = 13;
      }
      else
      {
        if ((_DWORD)v17 != 2)
        {
          if ((_DWORD)v17 == 1)
          {
            v18 = 0;
            v19 = 0;
            v20 = 0;
            while (1)
            {
              v21 = *v3;
              v22 = *(_QWORD *)(a2 + v21);
              if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
                break;
              v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
              *(_QWORD *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0)
                goto LABEL_45;
              v18 += 7;
              v14 = v19++ >= 9;
              if (v14)
              {
                LODWORD(v20) = 0;
                goto LABEL_47;
              }
            }
            *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
            if (*(_BYTE *)(a2 + *v5))
              LODWORD(v20) = 0;
LABEL_47:
            *(_DWORD *)(a1 + 8) = v20;
          }
          else
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
          }
          continue;
        }
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 16) |= 1u;
        while (1)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            break;
          v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
          *(_QWORD *)(a2 + v33) = v34 + 1;
          v32 |= (unint64_t)(v35 & 0x7F) << v30;
          if ((v35 & 0x80) == 0)
            goto LABEL_53;
          v30 += 7;
          v14 = v31++ >= 9;
          if (v14)
          {
            v32 = 0;
            goto LABEL_55;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
        if (*(_BYTE *)(a2 + *v5))
          v32 = 0;
LABEL_55:
        v37 = v32 != 0;
        v38 = 12;
      }
      *(_BYTE *)(a1 + v38) = v37;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKProtobufDeferredPaymentRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  PKProtobufPaymentSummaryItem *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 48;
        goto LABEL_32;
      case 2u:
        v21 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        objc_storeStrong((id *)(a1 + 24), v21);
        if (PBReaderPlaceMark() && (PKProtobufPaymentSummaryItemReadFrom((uint64_t)v21, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_33:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 16;
        goto LABEL_32;
      case 4u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
        goto LABEL_32;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 56;
        goto LABEL_32;
      case 6u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_33;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 32;
LABEL_32:
        v25 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_33;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_33;
    }
  }
}

const __CFString *PKPaymentRewardsBalanceEligibilityToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("ineligible");
  if (a1 == 1)
    return CFSTR("redeemable");
  else
    return v1;
}

uint64_t PKPaymentRewardsBalanceEligibilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("ineligible"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("ineligible"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("redeemable")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("redeemable")),
                   v6,
                   v7))
    {
      v4 = 1;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 2;
LABEL_9:

  return v4;
}

void sub_1900E69CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900E6C9C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void PKEnableAutomaticSelectionForPaymentPass(void *a1)
{
  id v1;

  v1 = a1;
  objc_msgSend(v1, "setSettings:", objc_msgSend(v1, "settings") | 0x30);

}

void sub_1900E7300(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_1900E76B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900E79DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1900E877C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

Class initNPKCompanionAgentConnection_1()
{
  Class result;

  if (qword_1ECF22530 != -1)
    dispatch_once(&qword_1ECF22530, &__block_literal_global_142_0);
  result = objc_getClass("NPKCompanionAgentConnection");
  _MergedGlobals_229 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass_1[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction_1;
  return result;
}

id NPKCompanionAgentConnectionFunction_1()
{
  return (id)_MergedGlobals_229;
}

uint64_t PKProtobufDeviceSharingCapabilitiesReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  void *v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_41;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_43;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_43:
          *(_DWORD *)(a1 + 40) = v19;
          continue;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
          goto LABEL_39;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
          goto LABEL_39;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_39;
        case 5u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          *(_BYTE *)(a1 + 48) |= 1u;
          break;
        case 6u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
LABEL_39:
          v32 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v29 = *v3;
        v30 = *(_QWORD *)(a2 + v29);
        if (v30 == -1 || v30 >= *(_QWORD *)(a2 + *v4))
          break;
        v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v30);
        *(_QWORD *)(a2 + v29) = v30 + 1;
        v28 |= (unint64_t)(v31 & 0x7F) << v26;
        if ((v31 & 0x80) == 0)
          goto LABEL_45;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          v28 = 0;
          goto LABEL_47;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
      if (*(_BYTE *)(a2 + *v5))
        v28 = 0;
LABEL_47:
      *(_BYTE *)(a1 + 44) = v28 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1900EAECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1900EB2E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1900EB6F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1900EEB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

PKPassSemantic *PKPassSemanticStringInDictionary(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  PKPassSemantic *v12;
  void *v13;
  void *v14;
  PKPassSemantic *v15;
  NSObject *v16;
  int v18;
  int v19;
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v7;
  if ((objc_msgSend(v11, "isEqualToString:", CFSTR("departureLocationDescription")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationLocationDescription")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("transitProvider")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("vehicleName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("vehicleNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("vehicleType")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("boardingGroup")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("boardingSequenceNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("confirmationNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("transitStatus")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("transitStatusReason")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("membershipProgramName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("membershipProgramNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("priorityStatus")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("securityScreening")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("flightCode")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("airlineCode")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departureAirportCode")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departureAirportName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departureTerminal")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departureGate")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationAirportCode")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationAirportName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationTerminal")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationGate")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departurePlatform")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("departureStationName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationPlatform")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("destinationStationName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("carNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("eventName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueEntrance")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueRoom")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venuePhoneNumber")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("leagueName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("leagueAbbreviation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("homeTeamLocation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("homeTeamName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("homeTeamAbbreviation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("awayTeamLocation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("awayTeamName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("awayTeamAbbreviation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("sportName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("genre")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("eventLiveMessage")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("admissionLevel")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("admissionLevelAbbreviation")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("attendeeName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueRegionName")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("entranceDescription")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueEntranceGate")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueEntranceDoor")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("venueEntrancePortal")) & 1) != 0
    || objc_msgSend(v11, "isEqualToString:", CFSTR("additionalTicketAttributes")))
  {

  }
  else
  {
    v18 = objc_msgSend(v11, "isEqualToString:", CFSTR("eventType"));

    if (!v18)
    {
      v15 = 0;
      goto LABEL_63;
    }
  }
  v12 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v12, "setSemanticKey:", v11);
  objc_msgSend(v8, "objectForKeyedSubscript:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  PKLocalizedPassStringForPassBundle(v13, v9, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPassSemantic setStringValue:](v12, "setStringValue:", v14);
  if (-[PKPassSemantic hasValue](v12, "hasValue"))
  {
    v15 = v12;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 138543362;
      v20 = v11;
      _os_log_impl(&dword_18FC92000, v16, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v19, 0xCu);
    }

    v15 = 0;
  }

LABEL_63:
  return v15;
}

PKPassSemantic *PKPassSemanticDateInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  PKPassSemantic *v6;
  void *v7;
  void *v8;
  PKPassSemantic *v9;
  NSObject *v10;
  int v12;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("originalDepartureDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("currentDepartureDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("originalArrivalDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("currentArrivalDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("originalBoardingDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("currentBoardingDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("eventStartDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueDoorsOpenDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueGatesOpenDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueParkingLotsOpenDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueBoxOfficeOpenDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueFanZoneOpenDate")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("venueOpenDate")) & 1) != 0
    || objc_msgSend(v5, "isEqualToString:", CFSTR("venueCloseDate")))
  {

  }
  else
  {
    v12 = objc_msgSend(v5, "isEqualToString:", CFSTR("eventEndDate"));

    if (!v12)
    {
      v9 = 0;
      goto LABEL_22;
    }
  }
  v6 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v6, "setSemanticKey:", v5);
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  _PKParseW3CDTSCompleteDatePlusHoursMinutesAndOptionalSeconds(v7, 0, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPassSemantic setDateValue:](v6, "setDateValue:", v8);
  if (-[PKPassSemantic hasValue](v6, "hasValue"))
  {
    v9 = v6;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138543362;
      v14 = v5;
      _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v13, 0xCu);
    }

    v9 = 0;
  }

LABEL_22:
  return v9;
}

PKPassSemantic *PKPassSemanticEventDateInfoInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  PKPassSemantic *v5;
  void *v6;
  PKEventDateInfo *v7;
  PKPassSemantic *v8;
  NSObject *v9;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("eventStartDateInfo")))
  {
    v5 = objc_alloc_init(PKPassSemantic);
    -[PKPassSemantic setSemanticKey:](v5, "setSemanticKey:", v3);
    objc_msgSend(v4, "objectForKeyedSubscript:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = -[PKEventDateInfo initWithDictionary:]([PKEventDateInfo alloc], "initWithDictionary:", v6);
    -[PKPassSemantic setEventDateInfoValue:](v5, "setEventDateInfoValue:", v7);
    if (-[PKPassSemantic hasValue](v5, "hasValue"))
    {
      v8 = v5;
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 138543362;
        v12 = v3;
        _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v11, 0xCu);
      }

      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

PKPassSemantic *PKPassSemanticNumberInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  PKPassSemantic *v6;
  void *v7;
  PKPassSemantic *v8;
  NSObject *v9;
  int v11;
  int v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("flightNumber")) & 1) != 0
    || (objc_msgSend(v5, "isEqualToString:", CFSTR("duration")) & 1) != 0
    || objc_msgSend(v5, "isEqualToString:", CFSTR("tailgatingAllowed")))
  {

  }
  else
  {
    v11 = objc_msgSend(v5, "isEqualToString:", CFSTR("silenceRequested"));

    if (!v11)
    {
      v8 = 0;
      goto LABEL_11;
    }
  }
  v6 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v6, "setSemanticKey:", v5);
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPassSemantic setNumberValue:](v6, "setNumberValue:", v7);
  if (-[PKPassSemantic hasValue](v6, "hasValue"))
  {
    v8 = v6;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 138543362;
      v13 = v5;
      _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v12, 0xCu);
    }

    v8 = 0;
  }

LABEL_11:
  return v8;
}

PKPassSemantic *PKPassSemanticLocationInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  PKPassSemantic *v6;
  void *v7;
  PKLocation *v8;
  PKPassSemantic *v9;
  NSObject *v10;
  int v12;
  int v13;
  id v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("departureLocation")) & 1) != 0
    || objc_msgSend(v5, "isEqualToString:", CFSTR("destinationLocation")))
  {

  }
  else
  {
    v12 = objc_msgSend(v5, "isEqualToString:", CFSTR("venueLocation"));

    if (!v12)
    {
      v9 = 0;
      goto LABEL_10;
    }
  }
  v6 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v6, "setSemanticKey:", v5);
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = -[PKLocation initWithDictionary:]([PKLocation alloc], "initWithDictionary:", v7);
  -[PKPassSemantic setLocationValue:](v6, "setLocationValue:", v8);
  if (-[PKPassSemantic hasValue](v6, "hasValue"))
  {
    v9 = v6;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 138543362;
      v14 = v5;
      _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v13, 0xCu);
    }

    v9 = 0;
  }

LABEL_10:
  return v9;
}

PKPassSemantic *PKPassSemanticCurrencyAmountInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  PKPassSemantic *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  PKCurrencyAmount *v10;
  PKPassSemantic *v11;
  NSObject *v12;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if ((objc_msgSend(v3, "isEqualToString:", CFSTR("balance")) & 1) != 0
    || objc_msgSend(v3, "isEqualToString:", CFSTR("balance")))
  {
    v5 = objc_alloc_init(PKPassSemantic);
    -[PKPassSemantic setSemanticKey:](v5, "setSemanticKey:", v3);
    objc_msgSend(v4, "objectForKeyedSubscript:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("currencyCode"));
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("amount"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", v8);
    v10 = -[PKCurrencyAmount initWithAmount:currency:exponent:]([PKCurrencyAmount alloc], "initWithAmount:currency:exponent:", v9, v7, 0);
    -[PKPassSemantic setCurrencyAmountValue:](v5, "setCurrencyAmountValue:", v10);
    if (-[PKPassSemantic hasValue](v5, "hasValue"))
    {
      v11 = v5;
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 138543362;
        v15 = v3;
        _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v14, 0xCu);
      }

      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

PKPassSemantic *PKPassSemanticPersonNameComponentsInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  PKPassSemantic *v5;
  void *v6;
  void *v7;
  PKPassSemantic *v8;
  NSObject *v9;
  int v11;
  id v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (objc_msgSend(v3, "isEqualToString:", CFSTR("passengerName")))
  {
    v5 = objc_alloc_init(PKPassSemantic);
    -[PKPassSemantic setSemanticKey:](v5, "setSemanticKey:", v3);
    objc_msgSend(v4, "objectForKeyedSubscript:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    _PersonNameComponentsFromDictionary(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPassSemantic setPersonNameComponentsValue:](v5, "setPersonNameComponentsValue:", v7);
    if (-[PKPassSemantic hasValue](v5, "hasValue"))
    {
      v8 = v5;
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 138543362;
        v12 = v3;
        _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&v11, 0xCu);
      }

      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }

  return v8;
}

id _PersonNameComponentsFromDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  NSObject *v16;
  id v17;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint8_t buf[16];

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("namePrefix"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("givenName"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("middleName"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("familyName"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("nameSuffix"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("nickname"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("phoneticRepresentation"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v19 = v2;
  else
    v19 = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v3;
  else
    v8 = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v9 = v4;
  else
    v9 = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v10 = v5;
  else
    v10 = 0;
  v22 = v2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v11 = v6;
  else
    v11 = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v12 = v7;
  else
    v12 = 0;
  objc_opt_class();
  v21 = v3;
  v20 = v6;
  if ((objc_opt_isKindOfClass() & 1) != 0 && objc_msgSend(v23, "count"))
  {
    v13 = v5;
    _PersonNameComponentsFromDictionary(v23);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v13 = v5;
    v14 = 0;
  }
  v15 = v4;
  if (v19 || v8 || v9 || v10 || v11 || v12 || v14)
  {
    v17 = objc_alloc_init(MEMORY[0x1E0CB3850]);
    objc_msgSend(v17, "setNamePrefix:", v19);
    objc_msgSend(v17, "setGivenName:", v8);
    objc_msgSend(v17, "setMiddleName:", v9);
    objc_msgSend(v17, "setFamilyName:", v10);
    objc_msgSend(v17, "setNameSuffix:", v11);
    objc_msgSend(v17, "setNickname:", v12);
    objc_msgSend(v17, "setPhoneticRepresentation:", v14);
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v16, OS_LOG_TYPE_DEFAULT, "Returning nil name components for dictionary that does not contain any keys", buf, 2u);
    }

    v17 = 0;
  }

  return v17;
}

PKPassSemantic *PKPassSemanticStringsInDictionary(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  PKPassSemantic *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  PKPassSemantic *v22;
  NSObject *v23;
  int v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  id v32;
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v7;
  if ((objc_msgSend(v11, "isEqualToString:", CFSTR("artistIDs")) & 1) != 0
    || (objc_msgSend(v11, "isEqualToString:", CFSTR("performerNames")) & 1) != 0
    || objc_msgSend(v11, "isEqualToString:", CFSTR("albumIDs")))
  {

  }
  else
  {
    v25 = objc_msgSend(v11, "isEqualToString:", CFSTR("playlistIDs"));

    if (!v25)
    {
      v22 = 0;
      goto LABEL_18;
    }
  }
  v12 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v12, "setSemanticKey:", v11);
  v26 = v8;
  objc_msgSend(v8, "objectForKeyedSubscript:", v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v15 = v13;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v28;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v28 != v18)
          objc_enumerationMutation(v15);
        PKLocalizedPassStringForPassBundle(*(void **)(*((_QWORD *)&v27 + 1) + 8 * v19), v9, v10);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "addObject:", v20);

        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v17);
  }

  v21 = (void *)objc_msgSend(v14, "copy");
  -[PKPassSemantic setStringsValue:](v12, "setStringsValue:", v21);

  if (-[PKPassSemantic hasValue](v12, "hasValue"))
  {
    v22 = v12;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v32 = v11;
      _os_log_impl(&dword_18FC92000, v23, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", buf, 0xCu);
    }

    v22 = 0;
  }
  v8 = v26;

LABEL_18:
  return v22;
}

PKPassSemantic *PKPassSemanticDictionariesInDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  int v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  void *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  PKPassSemantic *v19;
  NSObject *v20;
  int v21;
  PKPassSemantic *v23;
  id v24;
  id obj;
  _QWORD v26[4];
  id v27;
  __int128 *p_buf;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 buf;
  uint64_t v34;
  char v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  if (!objc_msgSend(v5, "isEqualToString:", CFSTR("seats")))
  {
    v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("wifiAccess"));
    v7 = _os_feature_enabled_impl();
    if (!v7 || (v6 & 1) != 0)
    {
      v21 = v7 | v6;

      if (v21 == 1)
        goto LABEL_6;
    }
    else
    {
      v8 = objc_msgSend(v5, "isEqualToString:", CFSTR("airPlay"));

      if ((v8 & 1) != 0)
        goto LABEL_6;
    }
    v19 = 0;
    goto LABEL_27;
  }
  _os_feature_enabled_impl();

LABEL_6:
  v23 = objc_alloc_init(PKPassSemantic);
  -[PKPassSemantic setSemanticKey:](v23, "setSemanticKey:", v5);
  objc_msgSend(v4, "objectForKeyedSubscript:", v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  obj = v9;
  v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v30;
    v12 = MEMORY[0x1E0C809B0];
    do
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v30 != v11)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
        v15 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        *(_QWORD *)&buf = 0;
        *((_QWORD *)&buf + 1) = &buf;
        v34 = 0x2020000000;
        v35 = 1;
        v26[0] = v12;
        v26[1] = 3221225472;
        v26[2] = __PKPassSemanticDictionariesInDictionary_block_invoke;
        v26[3] = &unk_1E2AC7780;
        v16 = v15;
        v27 = v16;
        p_buf = &buf;
        objc_msgSend(v14, "enumerateKeysAndObjectsUsingBlock:", v26);
        if (*(_BYTE *)(*((_QWORD *)&buf + 1) + 24) && objc_msgSend(v16, "count"))
        {
          v17 = (void *)objc_msgSend(v16, "copy");
          objc_msgSend(v24, "addObject:", v17);

        }
        _Block_object_dispose(&buf, 8);

      }
      v10 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    }
    while (v10);
  }

  if (objc_msgSend(v24, "count"))
  {
    v18 = (void *)objc_msgSend(v24, "copy");
    -[PKPassSemantic setDictionariesValue:](v23, "setDictionariesValue:", v18);

  }
  else
  {
    -[PKPassSemantic setDictionariesValue:](v23, "setDictionariesValue:", 0);
  }
  if (-[PKPassSemantic hasValue](v23, "hasValue"))
  {
    v19 = v23;
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v5;
      _os_log_impl(&dword_18FC92000, v20, OS_LOG_TYPE_DEFAULT, "Semantic for key %{public}@ has no value, returning nil.", (uint8_t *)&buf, 0xCu);
    }

    v19 = 0;
  }

LABEL_27:
  return v19;
}

void sub_1900F074C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

id PKPassSemanticsFromDictionary(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v20[4];
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __PKPassSemanticsFromDictionary_block_invoke;
  v20[3] = &unk_1E2ACDF78;
  v21 = v7;
  v22 = v9;
  v23 = v10;
  v24 = v8;
  v12 = v11;
  v25 = v12;
  v13 = v8;
  v14 = v10;
  v15 = v9;
  v16 = v7;
  objc_msgSend(v16, "enumerateKeysAndObjectsUsingBlock:", v20);
  v17 = v25;
  v18 = v12;

  return v18;
}

id PKCreateSharingLocalChannelDescriptorTransportIdentifier(void *a1, uint64_t a2)
{
  objc_class *v3;
  id v4;
  id v5;
  const __CFString *v6;
  void *v7;

  v3 = (objc_class *)MEMORY[0x1E0CB3940];
  v4 = a1;
  v5 = [v3 alloc];
  v6 = &stru_1E2ADF4C0;
  if (a2 == 1)
    v6 = CFSTR("Destination");
  if (!a2)
    v6 = CFSTR("Source");
  v7 = (void *)objc_msgSend(v5, "initWithFormat:", CFSTR("%@-%@"), v6, v4);

  return v7;
}

Class initFKPaymentPass()
{
  Class result;

  if (qword_1ECF22570 != -1)
    dispatch_once(&qword_1ECF22570, &__block_literal_global_101);
  result = objc_getClass("FKPaymentPass");
  _MergedGlobals_232 = (uint64_t)result;
  getFKPaymentPassClass[0] = (uint64_t (*)())FKPaymentPassFunction;
  return result;
}

id FKPaymentPassFunction()
{
  return (id)_MergedGlobals_232;
}

uint64_t PKAccountPhysicalCardExpirationMessagingTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("expiringSoon"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("expiringSoon"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("expired")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("expired")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPassShareTimeConfigurationSupportToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("none");
  else
    return off_1E2ACE2D8[a1 - 1];
}

uint64_t PKPassShareTimeConfigurationSupportFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("userSetExpiration"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("userSetExpiration"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("scheduling")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("scheduling")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("advancedScheduling")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("advancedScheduling")),
          v9,
          v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKPassShareTimeScheduleFrequencyToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("none");
  else
    return off_1E2ACE2F0[a1 - 1];
}

uint64_t PKPassShareTimeScheduleFrequencyFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("day"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("day"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("week")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("week")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("month")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("month")), v9, v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

__CFString *PKAuthenticatorEvaluationStateDescription(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2ACE308[a1];
}

__CFString *PKAuthenticatorCoachingStateDescription(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E2ACE338[a1];
}

void sub_1900FE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

id initFHInsightTypeOverallSpend_0()
{
  id *v0;

  if (qword_1ECF22590 != -1)
    dispatch_once(&qword_1ECF22590, &__block_literal_global_58);
  v0 = (id *)dlsym((void *)qword_1ECF22588, "FHInsightTypeOverallSpend");
  objc_storeStrong((id *)&qword_1ECF22580, *v0);
  getFHInsightTypeOverallSpend[0] = (uint64_t (*)())FHInsightTypeOverallSpendFunction_0;
  return (id)qword_1ECF22580;
}

id FHInsightTypeOverallSpendFunction_0()
{
  return (id)qword_1ECF22580;
}

id initFHInsightTypeCategorySpend_0()
{
  id *v0;

  if (qword_1ECF22590 != -1)
    dispatch_once(&qword_1ECF22590, &__block_literal_global_58);
  v0 = (id *)dlsym((void *)qword_1ECF22588, "FHInsightTypeCategorySpend");
  objc_storeStrong((id *)&_MergedGlobals_233, *v0);
  getFHInsightTypeCategorySpend[0] = (uint64_t (*)())FHInsightTypeCategorySpendFunction_0;
  return (id)_MergedGlobals_233;
}

id FHInsightTypeCategorySpendFunction_0()
{
  return (id)_MergedGlobals_233;
}

void sub_1900FFC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void PKAnalyticsSendEventForFeature(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v5 = a3;
  v6 = a1;
  PKFeatureIdentifierToString(a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  PKStringWithValidatedFormat(v6, CFSTR("%@"), v8, v9, v10, v11, v12, v13, (uint64_t)v7);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  AnalyticsSendEvent();
}

void PKAnalyticsSendEventWithDailyLimit(void *a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t IntegerForKey;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a1;
  v5 = a2;
  if (a3 >= 1)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v18, CFSTR("lastLoggedDate"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    PKSharedCacheGetDateForKey(v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v18, CFSTR("eventCount"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    IntegerForKey = PKSharedCacheGetIntegerForKey(v8);

    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99E80], "timeZoneForSecondsFromGMT:", 0);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setTimeZone:", v11);

      if (objc_msgSend(v10, "isDateInToday:", v7))
      {
        if (IntegerForKey >= a3)
        {

          goto LABEL_10;
        }
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v12 = objc_claimAutoreleasedReturnValue();

        v13 = IntegerForKey + 1;
        v7 = (void *)v12;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0C99D68], "date");
        v14 = objc_claimAutoreleasedReturnValue();

        v13 = 1;
        v7 = (void *)v14;
      }

    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D68], "date");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = 1;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v18, CFSTR("lastLoggedDate"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    PKSharedCacheSetObjectForKey(v7, v15);

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", v13);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), v18, CFSTR("eventCount"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    PKSharedCacheSetObjectForKey(v16, v17);

    AnalyticsSendEvent();
LABEL_10:

  }
}

const __CFString *PKAnalyticsAmountCategoryForAmount(void *a1)
{
  id v1;
  const __CFString *v2;

  v1 = a1;
  if ((objc_msgSend(v1, "pk_isLessThanOrEqualToInteger:", 25) & 1) != 0)
  {
    v2 = CFSTR("$1 — $25");
  }
  else if ((objc_msgSend(v1, "pk_isLessThanOrEqualToInteger:", 50) & 1) != 0)
  {
    v2 = CFSTR("$25.01 — $50");
  }
  else if ((objc_msgSend(v1, "pk_isLessThanOrEqualToInteger:", 100) & 1) != 0)
  {
    v2 = CFSTR("$50.01 — $100");
  }
  else if (objc_msgSend(v1, "pk_isLessThanOrEqualToInteger:", 500))
  {
    v2 = CFSTR("$100.01 — $500");
  }
  else
  {
    v2 = CFSTR("$500.01 — $10,000");
  }

  return v2;
}

Class initMKLocalSearchCompleter()
{
  Class result;

  if (qword_1EE1C5600 != -1)
    dispatch_once(&qword_1EE1C5600, &__block_literal_global_243);
  result = objc_getClass("MKLocalSearchCompleter");
  _MergedGlobals_1_2 = (uint64_t)result;
  getMKLocalSearchCompleterClass[0] = (uint64_t (*)())MKLocalSearchCompleterFunction;
  return result;
}

id MKLocalSearchCompleterFunction()
{
  return (id)_MergedGlobals_1_2;
}

Class initMKLocalSearchRequest()
{
  Class result;

  if (qword_1EE1C5600 != -1)
    dispatch_once(&qword_1EE1C5600, &__block_literal_global_243);
  result = objc_getClass("MKLocalSearchRequest");
  qword_1EE1C5608 = (uint64_t)result;
  _MergedGlobals_176 = (uint64_t (*)())MKLocalSearchRequestFunction;
  return result;
}

id MKLocalSearchRequestFunction()
{
  return (id)qword_1EE1C5608;
}

Class initMKLocalSearch()
{
  Class result;

  if (qword_1EE1C5600 != -1)
    dispatch_once(&qword_1EE1C5600, &__block_literal_global_243);
  result = objc_getClass("MKLocalSearch");
  qword_1EE1C5610 = (uint64_t)result;
  off_1ECF21B70 = (uint64_t (*)())MKLocalSearchFunction;
  return result;
}

id MKLocalSearchFunction()
{
  return (id)qword_1EE1C5610;
}

BOOL PKProtobufPaymentSetupFeatureReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  int *v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 24) |= 2u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
          {
            v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__type;
            goto LABEL_38;
          }
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            break;
          v17 += 7;
          v23 = v18++ > 8;
          if (v23)
          {
            v19 = 0;
            v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__type;
            goto LABEL_41;
          }
        }
        v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__type;
LABEL_39:
        if (*(_BYTE *)(a2 + *v5))
          v19 = 0;
LABEL_41:
        *(_QWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_42:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v25 = 0;
    v26 = 0;
    v19 = 0;
    *(_BYTE *)(a1 + 24) |= 1u;
    while (1)
    {
      v27 = *v3;
      v28 = *(_QWORD *)(a2 + v27);
      if (v28 == -1 || v28 >= *(_QWORD *)(a2 + *v4))
        break;
      v29 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v28);
      *(_QWORD *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__state;
        goto LABEL_39;
      }
      v25 += 7;
      v23 = v26++ > 8;
      if (v23)
      {
        v19 = 0;
        v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__state;
        goto LABEL_41;
      }
    }
    v24 = &OBJC_IVAR___PKProtobufPaymentSetupFeature__state;
LABEL_38:
    *(_BYTE *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKAccountRewardRedemptionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("applepaycash"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("applepaycash"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("statementcredit")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("statementcredit")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("savings")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("savings")), v9, v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKAccountRewardRedemptionTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACF088[a1 - 1];
}

uint64_t PKAccountFundingSourceTypeFromStrings(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  int v9;
  __CFString *v10;
  __CFString *v11;
  int v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (!v2)
  {
    v4 = 0;
    goto LABEL_18;
  }
  v3 = v2;
  v4 = 0;
  v5 = *(_QWORD *)v16;
  do
  {
    v6 = 0;
    do
    {
      if (*(_QWORD *)v16 != v5)
        objc_enumerationMutation(v1);
      v7 = (__CFString *)*(id *)(*((_QWORD *)&v15 + 1) + 8 * v6);
      if (v7 == CFSTR("ACH"))
        goto LABEL_9;
      v8 = v7;
      if (!v7)
        goto LABEL_10;
      v9 = objc_msgSend(CFSTR("ACH"), "isEqualToString:", v7);

      if (v9)
      {
LABEL_9:
        v4 |= 1uLL;
      }
      else
      {
        v10 = v8;
        if (v10 == CFSTR("APC")
          || (v11 = v10, v12 = objc_msgSend(CFSTR("APC"), "isEqualToString:", v10), v11, v12))
        {
          v4 |= 2uLL;
        }
      }
LABEL_10:
      ++v6;
    }
    while (v3 != v6);
    v13 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    v3 = v13;
  }
  while (v13);
LABEL_18:

  return v4;
}

id PKAccountFundingSourceTypeToStrings(char a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("ACH"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("APC"));
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKAccountTransferTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("fundsIn"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("fundsIn"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("fundsOut")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("fundsOut")), v6, v7))
    {
      v4 = 3;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 2;
LABEL_9:

  return v4;
}

const __CFString *PKAccountTransferTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 3)
    v1 = CFSTR("fundsOut");
  if (a1 == 2)
    return CFSTR("fundsIn");
  else
    return v1;
}

uint64_t PKAccountTransferFrequencyFromStrings(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __CFString *v7;
  __CFString *v8;
  int v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v12 != v5)
          objc_enumerationMutation(v1);
        v7 = (__CFString *)*(id *)(*((_QWORD *)&v11 + 1) + 8 * i);
        if (v7 != CFSTR("now"))
        {
          v8 = v7;
          if (!v7)
            continue;
          v9 = objc_msgSend(CFSTR("now"), "isEqualToString:", v7);

          if (!v9)
            continue;
        }
        v4 |= 2uLL;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id PKAccountTransferFrequencyToStrings(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 2) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("now"));
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

const __CFString *PKAccountFraudEventToString(uint64_t a1)
{
  if (a1)
    return CFSTR("unknown");
  else
    return CFSTR("firstAccess");
}

uint64_t PKAccountAddBeneficiariesContactMethodFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("phone"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("phone"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("businessChat")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("businessChat")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("inApp")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("inApp")), v9, v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKAccountAddBeneficiariesContactMethodToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACF0A0[a1 - 1];
}

void PDWakePassbookInBackground(void *a1)
{
  uint64_t v1;
  void *v2;
  dispatch_source_t v3;
  void *v4;
  NSObject *v5;
  dispatch_time_t v6;
  NSObject *queue;

  queue = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_234);
  if (!qword_1ECF225A0)
  {
    v1 = PDOSTransactionCreate("PDUtilities.wake_passbook");
    v2 = (void *)qword_1ECF225A0;
    qword_1ECF225A0 = v1;

  }
  v3 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, queue);
  v4 = (void *)qword_1ECF225A8;
  qword_1ECF225A8 = (uint64_t)v3;

  v5 = qword_1ECF225A8;
  v6 = dispatch_time(0, 750000000);
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0xEE6B280uLL);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1ECF225A8, &__block_literal_global_108);
  dispatch_resume((dispatch_object_t)qword_1ECF225A8);
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_234);

}

void PDWakePassbookUIServiceInBackground(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("shoebox-service://daemon-launch"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2)
  {
    v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, *MEMORY[0x1E0D22D78]);
    v4 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(v3, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D22D28]);
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v4, *MEMORY[0x1E0D22D00]);
    SBSCreateOpenApplicationService();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0D23158], "optionsWithDictionary:", v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __PDWakePassbookUIServiceInBackground_block_invoke;
    v7[3] = &unk_1E2ACF0E8;
    v8 = v1;
    objc_msgSend(v5, "openApplication:withOptions:completion:", CFSTR("com.apple.PassbookUIService"), v6, v7);

  }
  else if (v1)
  {
    (*((void (**)(id, _QWORD, uint64_t))v1 + 2))(v1, 0, 0xFFFFFFFFLL);
  }

}

uint64_t PDOpenWalletUI(int a1, void *a2)
{
  id v3;
  _BOOL4 v4;
  char v5;
  __CFString *v6;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;

  v3 = a2;
  v4 = +[PKWalletVisibility isWalletVisible](PKWalletVisibility, "isWalletVisible");
  v5 = v4 & (a1 ^ 1);
  v6 = CFSTR("prefs:root=PASSBOOK");
  if ((v4 & (a1 ^ 1)) != 0)
    v6 = CFSTR("shoebox://");
  v7 = v6;
  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "alphanumericCharacterSet");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "stringByAddingPercentEncodingWithAllowedCharacters:", v8);
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = (void *)v9;
    if ((v5 & 1) != 0)
      objc_msgSend(CFSTR("shoebox://"), "stringByAppendingFormat:", CFSTR("%@/%@"), CFSTR("card"), v9);
    else
      objc_msgSend(CFSTR("prefs:root=PASSBOOK"), "stringByAppendingFormat:", CFSTR("&path=%@"), v9, v15);
    v7 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v7);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v11, "openSensitiveURL:withOptions:", v12, 0);

  return v13;
}

uint64_t PDOpenPaymentSetupUI(uint64_t a1, void *a2)
{
  id v3;
  __CFString **v4;
  uint64_t v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;
  void *v9;
  void *v10;
  void *v11;

  v3 = a2;
  if ((PKStoreDemoModeEnabled() & 1) != 0 || !PKSecureElementIsAvailable())
  {
    v5 = 0;
  }
  else
  {
    if (a1 == 3)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@/%@"), CFSTR("payment_setup_select_product"), v3);
      v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (a1 == 2)
        v4 = PKURLActionPaymentSetupIDMSCardOnFile;
      else
        v4 = PKURLActionPaymentSetup;
      v6 = *v4;
    }
    v7 = v6;
    if (+[PKWalletVisibility isWalletVisible](PKWalletVisibility, "isWalletVisible"))
      v8 = CFSTR("shoebox://");
    else
      v8 = CFSTR("prefs:root=PASSBOOK&path=");
    -[__CFString stringByAppendingString:](v8, "stringByAppendingString:", v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CA5878], "defaultWorkspace");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v10, "openSensitiveURL:withOptions:", v11, 0);

  }
  return v5;
}

void PDEnableAutomaticInternalLogging()
{
  uint64_t has_internal_ui;
  int v1;

  has_internal_ui = os_variant_has_internal_ui();
  if ((_DWORD)has_internal_ui)
  {
    has_internal_ui = 1;
    v1 = 0;
  }
  else
  {
    v1 = 1;
  }
  PKSetDiagnosticsEnabled(has_internal_ui, v1);
}

BOOL PDProtectedDataAvailable()
{
  return MKBGetDeviceLockState() == 3 || MKBDeviceUnlockedSinceBoot() == 1;
}

BOOL PDDeviceUILocked()
{
  return SBSGetScreenLockStatus() != 0;
}

uint64_t PDGetDeviceLockState()
{
  const __CFDictionary *v0;
  const __CFNumber *Value;
  const __CFNumber *v2;
  unsigned int v3;
  _BOOL4 v5;
  uint64_t v7;
  int valuePtr;

  valuePtr = 0;
  v0 = (const __CFDictionary *)MKBGetDeviceLockStateInfo();
  Value = (const __CFNumber *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E0D4E5D0]);
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  v7 = 0;
  v2 = (const __CFNumber *)CFDictionaryGetValue(v0, (const void *)*MEMORY[0x1E0D4E5C0]);
  CFNumberGetValue(v2, kCFNumberLongLongType, &v7);
  v3 = v7;
  CFRelease(v0);
  v5 = valuePtr != 3 && valuePtr != 0;
  return (v3 >> 2) & 2 | v5;
}

id PDGenerateRandomDeviceIdentifier()
{
  void *v1;
  void *v2;
  _BYTE bytes[16];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (SecRandomCopyBytes((SecRandomRef)*MEMORY[0x1E0CD7000], 0x10uLL, bytes))
    return 0;
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", bytes, 16);
  objc_msgSend(v1, "hexEncoding");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

id PDLocalizedAppNameForPID(uint64_t a1)
{
  int v1;
  void *v2;
  void *v3;

  v1 = a1;
  PKBundleIdentifierForPID(a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  PDLocalizedAppNameForBundleIDOrPID(v2, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

id PDLocalizedAppNameForBundleIDOrPID(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  void *v8;
  int v9;
  char *v10;
  const char *v11;
  _BYTE v13[12];
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CA5870]), "initWithBundleIdentifier:allowPlaceholder:error:", v3, 1, 0);
    objc_msgSend(v4, "localizedName");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

    if (v5)
    {
      PKLogFacilityTypeGetObject(0);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v13 = 138412546;
        *(_QWORD *)&v13[4] = v5;
        v14 = 1024;
        v15 = a2;
        v7 = "Springboard yielded localized app name '%@' for pid %d";
LABEL_14:
        _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, v7, v13, 0x12u);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
  }
  v8 = (void *)MEMORY[0x1E0CB3940];
  *(_QWORD *)v13 = 648;
  dword_1EE1B9CDC = a2;
  byte_1EE1C540B = 0;
  v9 = sysctl(getprocname_name, 4u, &getprocname_kp, (size_t *)v13, 0, 0);
  if (byte_1EE1C540B)
    v10 = &byte_1EE1C540B;
  else
    v10 = "exited?";
  if (v9)
    v11 = "?";
  else
    v11 = v10;
  objc_msgSend(v8, "stringWithUTF8String:", v11);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    PKLogFacilityTypeGetObject(0);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v13 = 138412546;
      *(_QWORD *)&v13[4] = v5;
      v14 = 1024;
      v15 = a2;
      v7 = "getprocname yielded localized app name '%@' for pid %d";
      goto LABEL_14;
    }
LABEL_15:

  }
  return v5;
}

long double _PDGetDestinationCoordinate(double a1, double a2, double a3, double a4)
{
  double v4;
  double v5;
  __double2 v6;
  __double2 v7;
  __double2 v8;
  long double v9;
  long double v10;

  v4 = a3 * 0.0174532925;
  v5 = a4 / 6378137.0;
  v6 = __sincos_stret(a1 * 0.0174532925);
  v7 = __sincos_stret(v5);
  v8 = __sincos_stret(v4);
  v9 = asin(v8.__cosval * (v6.__cosval * v7.__sinval) + v6.__sinval * v7.__cosval);
  v10 = sin(v9);
  atan2(v6.__cosval * (v8.__sinval * v7.__sinval), v7.__cosval - v6.__sinval * v10);
  return v9 / 0.0174532925;
}

double PDBoundingBoxForRegion(void *a1)
{
  id v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v1 = a1;
  objc_msgSend(v1, "center");
  v3 = v2;
  v5 = v4;
  objc_msgSend(v1, "radius");
  v7 = v6;

  v8 = vabdd_f64(_PDGetDestinationCoordinate(v3, v5, 0.0, v7), v3);
  _PDGetDestinationCoordinate(v3, v5, 90.0, v7);
  return v3 - v8;
}

BOOL PDXPCDictionaryUpdateWithDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  _QWORD v8[4];
  id v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 0;
  if (v3 && v4)
  {
    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __PDXPCDictionaryUpdateWithDictionary_block_invoke;
    v8[3] = &unk_1E2ACF110;
    v9 = v3;
    v10 = &v11;
    xpc_dictionary_apply(v5, v8);

    v6 = *((_BYTE *)v12 + 24) != 0;
  }
  _Block_object_dispose(&v11, 8);

  return v6;
}

void sub_190106444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _PostalAddressForSQLValue(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "dataUsingEncoding:", 4);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v3, 0, 0);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (v4)
      {
        objc_msgSend(MEMORY[0x1E0C973A8], "postalAddressWithDictionaryRepresentation:", v4);
        v5 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v3 = 0;
  }

  return v5;
}

void *_UUIDForSQLValue(void *result)
{
  objc_class *v1;
  id v2;
  uint64_t v3;

  if (result)
  {
    v1 = (objc_class *)MEMORY[0x1E0CB3A28];
    v2 = result;
    v3 = objc_msgSend([v1 alloc], "initWithUUIDString:", v2);

    return (void *)v3;
  }
  return result;
}

uint64_t _OSVersionRequirementRangeForSQLValue(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CB3710];
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = a1;
  v8[0] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "unarchivedObjectOfClasses:fromData:error:", v5, v3, 0);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t _HardwareVersionRangeForSQLValue(void *a1)
{
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x1E0C80C00];
  v1 = (void *)MEMORY[0x1E0CB3710];
  v2 = (void *)MEMORY[0x1E0C99E60];
  v3 = a1;
  v8[0] = objc_opt_class();
  v8[1] = objc_opt_class();
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v8, 2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "setWithArray:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "unarchivedObjectOfClasses:fromData:error:", v5, v3, 0);
  v6 = objc_claimAutoreleasedReturnValue();

  return v6;
}

uint64_t _SQLValueForURL(void *a1)
{
  if (a1)
    objc_msgSend(a1, "absoluteString");
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t _SQLValueForColor(void *a1)
{
  if (a1)
    objc_msgSend(a1, "string");
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return objc_claimAutoreleasedReturnValue();
}

id _SQLValueForString(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v3 = (id)objc_claimAutoreleasedReturnValue();
  }
  v4 = v3;

  return v4;
}

uint64_t _SQLValueForEntity(void *a1)
{
  if (a1)
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(a1, "persistentID"));
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t _SQLValueForPostalAddress(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v3 = 0;
    goto LABEL_7;
  }
  objc_msgSend(v1, "dictionaryRepresentation");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v3)
  {
LABEL_7:
    v4 = 0;
LABEL_8:
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v3, 0, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v4)
    goto LABEL_8;
  v5 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v4, 4);
  if (!v5)
    goto LABEL_8;
LABEL_9:

  return v5;
}

uint64_t _SQLValueForUUID(void *a1)
{
  if (a1)
    objc_msgSend(a1, "UUIDString");
  else
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
  return objc_claimAutoreleasedReturnValue();
}

uint64_t _SQLValueForOSVersionRequirementRange(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (!v1
    || (objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0),
        (v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v2 = objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

uint64_t _SQLValueForHardwareVersionRange(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if (!v1
    || (objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0),
        (v2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v2 = objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

id PDBasicError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  v12 = (void *)MEMORY[0x1E0CB35C8];
  v16 = *MEMORY[0x1E0CB2D50];
  v17[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("PDBasicErrorDomain"), 0, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

id PDTypecheckObjectForKey(void *a1, void *a2, void *a3, uint64_t a4, char a5, _QWORD *a6)
{
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v10 = a2;
  v11 = a3;
  objc_msgSend(a1, "objectForKey:", v11);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v19)
  {
    if ((a5 & 1) != 0)
      goto LABEL_6;
    PDBasicError(CFSTR("The %@ dictionary is missing required key: %@"), v12, v13, v14, v15, v16, v17, v18, (uint64_t)v10);
LABEL_9:
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_10;
  }
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    PDBasicError(CFSTR("Wrong type object for key %@ in %@ dictionary. Expected %@ but found %@."), v21, v22, v23, v24, v25, v26, v27, (uint64_t)v11);
    goto LABEL_9;
  }
  if (!a6)
  {
LABEL_6:
    v20 = 0;
    goto LABEL_10;
  }
  v20 = 0;
  *a6 = objc_retainAutorelease(v19);
LABEL_10:

  return v20;
}

char *PDTypecheckArrayOfObjectsForKey(void *a1, void *a2, void *a3, uint64_t a4, char a5, _QWORD *a6)
{
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  char *i;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  id v33;
  _BYTE v34[128];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  v12 = a3;
  v13 = objc_opt_class();
  v33 = 0;
  PDTypecheckObjectForKey(v10, v11, v12, v13, a5, &v33);
  v14 = (char *)objc_claimAutoreleasedReturnValue();
  v15 = v33;
  v16 = v15;
  if (!v14)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v17 = v15;
    v14 = (char *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    if (v14)
    {
      v28 = a6;
      v18 = *(_QWORD *)v30;
      while (2)
      {
        for (i = 0; i != v14; ++i)
        {
          if (*(_QWORD *)v30 != v18)
            objc_enumerationMutation(v17);
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            PDBasicError(CFSTR("Array for key %@ in %@ dictionary must contain objects of type %@. Found object of type %@."), v20, v21, v22, v23, v24, v25, v26, (uint64_t)v12);
            v14 = (char *)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        v14 = (char *)objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
        if (v14)
          continue;
        break;
      }
LABEL_12:
      a6 = v28;
    }

    if (a6 && !v14)
      *a6 = objc_retainAutorelease(v17);
  }

  return v14;
}

const __CFString *PKPayLaterDynamicContentPageTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x10)
    return CFSTR("unknown");
  else
    return off_1E2ACF208[a1 - 1];
}

void PKSetBalanceLocalizedStringIfNeeded(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a1;
  v3 = a2;
  objc_msgSend(v10, "localizedTitle");
  v4 = (id)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (!v4 || (v6 = objc_msgSend(v4, "length"), v5, !v6))
  {
    v7 = v3;
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "length");

      if (v9)
        objc_msgSend(v10, "setLocalizedTitle:", v8);
    }
  }

}

uint64_t PKProtobufPaymentInstrumentThumbnailRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  void *v26;
  uint64_t v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          if (v9++ >= 9)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 32;
              goto LABEL_29;
            case 2u:
              PBReaderReadString();
              v18 = objc_claimAutoreleasedReturnValue();
              v19 = 24;
LABEL_29:
              v26 = *(void **)(a1 + v19);
              *(_QWORD *)(a1 + v19) = v18;

              goto LABEL_35;
            case 3u:
              *(_BYTE *)(a1 + 40) |= 2u;
              v20 = *v3;
              v21 = *(_QWORD *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v21);
                *(_QWORD *)(a2 + v20) = v21 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v22 = 0;
              }
              v27 = 16;
              goto LABEL_34;
            case 4u:
              *(_BYTE *)(a1 + 40) |= 1u;
              v23 = *v3;
              v24 = *(_QWORD *)(a2 + v23);
              if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v24);
                *(_QWORD *)(a2 + v23) = v24 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v22 = 0;
              }
              v27 = 8;
LABEL_34:
              *(_QWORD *)(a1 + v27) = v22;
              goto LABEL_35;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_35:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKAccountVirtualCardStateFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("active"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("cancelled"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("blocked"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(CFSTR("disabled"), "isEqualToString:", v1))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKAccountVirtualCardStateToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("active");
  else
    return off_1E2ACF330[a1];
}

uint64_t PKAccountVirtualCardTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("primary"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(CFSTR("vpan"), "isEqualToString:", v1))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKAccountVirtualCardTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("primary");
  if (!a1)
    v1 = CFSTR("unknown");
  if (a1 == 2)
    return CFSTR("vpan");
  else
    return v1;
}

id PKIDSNormalizedAddress(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "lowercaseString");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if ((objc_msgSend(v3, "hasPrefix:", CFSTR("mailto:")) & 1) != 0
      || objc_msgSend(v3, "hasPrefix:", CFSTR("tel:")))
    {
      v2 = v3;
      v3 = v2;
    }
    else if (objc_msgSend(v3, "containsString:", CFSTR("@")))
    {
      v2 = (id)_IDSCopyIDForEmailAddress();
    }
    else
    {
      PKBestGuessNormalizedPhoneNumber(v3);
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = (id)IDSCopyIDForPhoneNumber();

    }
  }
  else
  {
    v3 = 0;
  }

  return v2;
}

uint64_t PKiMessageIsActive()
{
  id v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  NSObject *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint8_t buf[4];
  int v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc(MEMORY[0x1E0D342A0]);
  v1 = (void *)objc_msgSend(v0, "initWithService:", *MEMORY[0x1E0D34240]);
  objc_msgSend(v1, "accounts");
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (id)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v14, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v9;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * i), "isActive", (_QWORD)v8) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v14, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  PKLogFacilityTypeGetObject(0xBuLL);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v13 = v3;
    _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "iMessage Active: %i", buf, 8u);
  }

  return v3;
}

uint64_t PKIDSServiceContainsHandle(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id obj;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if ((objc_msgSend(v6, "isEqualToString:", a3) & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D34358]), "initWithService:", v5);
    if (v8)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v29 = v8;
      objc_msgSend(v8, "accounts");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v25 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
      if (v25)
      {
        v10 = *(_QWORD *)v36;
        v27 = v9;
        v28 = v5;
        v24 = *(_QWORD *)v36;
        do
        {
          v11 = 0;
          do
          {
            if (*(_QWORD *)v36 != v10)
              objc_enumerationMutation(v9);
            v26 = v11;
            v12 = *(void **)(*((_QWORD *)&v35 + 1) + 8 * v11);
            v31 = 0u;
            v32 = 0u;
            v33 = 0u;
            v34 = 0u;
            objc_msgSend(v12, "handles");
            obj = (id)objc_claimAutoreleasedReturnValue();
            v13 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
            if (v13)
            {
              v14 = v13;
              v15 = *(_QWORD *)v32;
              while (2)
              {
                for (i = 0; i != v14; ++i)
                {
                  if (*(_QWORD *)v32 != v15)
                    objc_enumerationMutation(obj);
                  objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * i), "URI");
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v17, "unprefixedURI");
                  v18 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v18, "lowercaseString");
                  v19 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v6, "_stripFZIDPrefix");
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v20, "lowercaseString");
                  v21 = (void *)objc_claimAutoreleasedReturnValue();
                  v22 = objc_msgSend(v19, "isEqualToString:", v21);

                  if ((v22 & 1) != 0)
                  {

                    v7 = 1;
                    v9 = v27;
                    v5 = v28;
                    goto LABEL_23;
                  }
                }
                v14 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v31, v39, 16);
                if (v14)
                  continue;
                break;
              }
            }

            v11 = v26 + 1;
            v9 = v27;
            v5 = v28;
            v10 = v24;
          }
          while (v26 + 1 != v25);
          v7 = 0;
          v25 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v35, v40, 16);
        }
        while (v25);
      }
      else
      {
        v7 = 0;
      }
LABEL_23:

      v8 = v29;
    }
    else
    {
      v7 = 0;
    }

  }
  return v7;
}

void sub_190116168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKApplicationMessageRegistrationComparison(void *a1, void *a2, void *a3)
{
  id *v5;
  id *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  _BOOL4 v13;
  double v14;
  _BOOL4 v15;
  _BOOL4 v16;
  double v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id *v24;
  id *v25;
  _BOOL4 v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  double v32;
  _BOOL4 v34;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    v8 = v5[3];
    v9 = v8;
    if (!v6)
    {
      v16 = v8 != 0;
      if (!v8 || (objc_msgSend(v8, "timeIntervalSinceDate:", v7), v32 <= -604800.0))
      {
        v15 = 0;
        v10 = 0;
        v20 = 0;
        v18 = v5[4];
        v19 = 1;
LABEL_20:
        if (v18 <= v20)
        {
          if (v18 < v20)
            goto LABEL_22;
          if (v16 && v15)
          {
            v22 = objc_msgSend(v10, "compare:", v9);
            if (v22)
            {
              v21 = v22;
              goto LABEL_47;
            }
          }
          if (v5)
          {
            v23 = v5[2];
            if ((v19 & 1) != 0)
            {
              v26 = 0;
              v25 = 0;
            }
            else
            {
              v24 = (id *)v6[2];
              v25 = v24;
              v26 = v24 != 0;
              if (v23 && v24)
              {
                v27 = *((_QWORD *)v23 + 1);
                v28 = v24[1];
                if (v27 >= (uint64_t)v28)
                {
                  if (v27 <= (uint64_t)v28)
                  {
                    v29 = *((id *)v23 + 2);
                    v30 = v25[2];
                    v31 = v30;
                    if (v29 && v30)
                    {
                      v21 = objc_msgSend(v29, "compare:", v30);
LABEL_41:

LABEL_62:
                      goto LABEL_47;
                    }
                    if (v29 && !v30)
                    {
                      v21 = -1;
                      goto LABEL_41;
                    }
                    if (!v29 && v30)
                    {
                      v21 = 1;
                      goto LABEL_41;
                    }

LABEL_61:
                    v21 = 0;
                    goto LABEL_62;
                  }
LABEL_57:
                  v21 = 1;
                  goto LABEL_62;
                }
LABEL_54:
                v21 = -1;
                goto LABEL_62;
              }
            }
            v34 = v23 == 0;
            if (v23 && !v26)
              goto LABEL_54;
LABEL_55:
            if (!v34 || !v26)
              goto LABEL_61;
            goto LABEL_57;
          }
          if ((v19 & 1) == 0)
          {
            v25 = (id *)v6[2];
            v23 = 0;
            LOBYTE(v26) = v25 != 0;
            v34 = 1;
            goto LABEL_55;
          }
          v23 = 0;
LABEL_60:
          v25 = 0;
          goto LABEL_61;
        }
LABEL_46:
        v21 = -1;
        goto LABEL_47;
      }
      goto LABEL_45;
    }
    v10 = v6[3];
    if (v9)
    {
      objc_msgSend(v9, "timeIntervalSinceDate:", v7);
      v12 = v11;
      if (v10)
      {
        v13 = v11 <= -604800.0;
        objc_msgSend(v10, "timeIntervalSinceDate:", v7);
        if (v13 != v14 <= -604800.0)
        {
          if (v12 > -604800.0)
            goto LABEL_46;
          goto LABEL_22;
        }
        v15 = 1;
        goto LABEL_11;
      }
      if (v11 <= -604800.0)
      {
        v15 = 0;
LABEL_11:
        v16 = 1;
        goto LABEL_18;
      }
LABEL_45:
      v10 = 0;
      goto LABEL_46;
    }
  }
  else
  {
    if (!v6)
    {
      v23 = 0;
      v10 = 0;
      v9 = 0;
      goto LABEL_60;
    }
    v10 = v6[3];
  }
  v15 = v10 != 0;
  if (!v10 || (objc_msgSend(v10, "timeIntervalSinceDate:", v7), v17 <= -604800.0))
  {
    v16 = 0;
    v9 = 0;
    if (!v5)
    {
      v18 = 0;
      goto LABEL_19;
    }
LABEL_18:
    v18 = v5[4];
LABEL_19:
    v19 = 0;
    v20 = v6[4];
    goto LABEL_20;
  }
  v9 = 0;
LABEL_22:
  v21 = 1;
LABEL_47:

  return v21;
}

void sub_190118658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL PKProtobufAutomaticReloadPaymentRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  PKProtobufPaymentSummaryItem *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_28;
      case 2u:
        v19 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (PBReaderPlaceMark() && (PKProtobufPaymentSummaryItemReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();
LABEL_29:

LABEL_30:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_28;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_28;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_28:
        v19 = *(PKProtobufPaymentSummaryItem **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;
        goto LABEL_29;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_30;
    }
  }
}

void sub_190119A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19011A988(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19011B004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19011B684(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t TransactionIsValidForSummary(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "transactionType");
  if (v2 > 0xD)
    goto LABEL_7;
  if (((1 << v2) & 0x2482) == 0)
  {
    if (!v2)
    {
      v4 = objc_msgSend(v1, "transactionStatus");
      if (v4 < 9)
      {
        v3 = (0x103u >> v4) & 1;
        goto LABEL_8;
      }
    }
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  v3 = 1;
LABEL_8:

  return v3;
}

uint64_t PKProtobufPaymentMethodReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_BYTE *)(a1 + 28) |= 1u;
        while (1)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
            break;
          v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
          *(_QWORD *)(a2 + v23) = v24 + 1;
          v22 |= (unint64_t)(v25 & 0x7F) << v20;
          if ((v25 & 0x80) == 0)
            goto LABEL_34;
          v20 += 7;
          v14 = v21++ >= 9;
          if (v14)
          {
            LODWORD(v22) = 0;
            goto LABEL_36;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_36:
        *(_DWORD *)(a1 + 24) = v22;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
        }
        else
        {
          if ((_DWORD)v17 != 1)
          {
            result = PBReaderSkipValueWithTag();
            if (!(_DWORD)result)
              return result;
            continue;
          }
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
        }
        v26 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKPeerPaymentAccountStateFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("active")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("restricted")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("locked")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("closed")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentAccountStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2ACFC48[a1 - 1];
}

uint64_t PKPeerPaymentAccountStageFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("anonymous")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("identified")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("personalized")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentAccountStageToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACFC68[a1 - 1];
}

uint64_t PKPeerPaymentAccountRoleFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("owner")) & 1) != 0)
    v2 = 0;
  else
    v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("participant"));

  return v2;
}

const __CFString *PKPeerPaymentAccountRoleToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("participant");
  if (a1)
    return v1;
  else
    return CFSTR("owner");
}

uint64_t PKPeerPaymentAccountStateReasonFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("issuingbank")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("associatedaccount")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("securitydowngrade")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("embargorecovery")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inreview")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("terminal")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("nomoidentityinuse")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("nomodormant")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentAccountStateReasonToString(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("unknown");
  else
    return off_1E2ACFC80[a1];
}

const __CFString *PKPeerPaymentAccountSendRestrictionTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACFCC0[a1];
}

uint64_t PKPeerPaymentAccountSendRestrictionTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("family")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("contacts")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentAccountReceiveRestrictionTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (!a1)
    v1 = CFSTR("none");
  if (a1 == 1)
    return CFSTR("family");
  else
    return v1;
}

uint64_t PKPeerPaymentAccountReceiveRestrictionTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("family")) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    objc_msgSend(v1, "isEqualToString:", CFSTR("none"));
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentAccountDeviceScoreEncryptedPayloadVersionToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ACFCD8[a1];
}

uint64_t PKPeerPaymentAccountDeviceScoreEncryptedPayloadVersionFromInt(uint64_t a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 != 1)
    v1 = 2;
  if (a1)
    return v1;
  else
    return 0;
}

void sub_190125DA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190125FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190126190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKDeviceRegistrationResultToString(unint64_t a1)
{
  id v2;
  int v3;
  uint64_t v4;
  const __CFString *v5;
  void *v6;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (a1)
  {
    v3 = 1;
    v4 = 1;
    do
    {
      if ((v4 & a1) != 0)
      {
        if (v4 <= 15)
        {
          v5 = CFSTR("GenericFailure");
          switch(v4)
          {
            case 1:
              goto LABEL_15;
            case 2:
              v5 = CFSTR("PreconditionsFailed");
              goto LABEL_15;
            case 4:
              v5 = CFSTR("BrokerFailed");
              goto LABEL_15;
            case 8:
              v5 = CFSTR("PeerPaymentFailed");
              goto LABEL_15;
            default:
              goto LABEL_16;
          }
          goto LABEL_16;
        }
        switch(v4)
        {
          case 16:
            v5 = CFSTR("BrokerSucceeded");
            goto LABEL_15;
          case 32:
            v5 = CFSTR("PeerPaymentSucceeded");
            goto LABEL_15;
          case 64:
            v5 = CFSTR("PeerPaymentDoNotRetry");
LABEL_15:
            objc_msgSend(v2, "addObject:", v5);
            break;
        }
      }
LABEL_16:
      v4 = 1 << v3++;
    }
    while (v4 <= a1);
  }
  objc_msgSend(v2, "description");
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

CGImageRef PKCreateApplePayButtonImage(uint64_t a1, uint64_t a2, void *a3, double a4, double a5, double a6)
{
  return PKCreateApplePayButtonImageWithCornerRadius(a1, a2, a3, a4, a5, a6, 4.0);
}

CGImageRef PKCreateApplePayButtonImageWithCornerRadius(uint64_t a1, uint64_t a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v13;
  CGColorSpace *v14;
  double v15;
  double v16;
  double v17;
  CGFloat v18;
  CGContext *v19;
  CGImageRef Image;

  v13 = a3;
  v14 = (CGColorSpace *)PKColorSpaceStandardRGB();
  v15 = a4 * a6;
  v16 = a5 * a6;
  v17 = round(a4 * a6);
  v18 = round(v16);
  v19 = CGBitmapContextCreate(0, vcvtad_u64_f64(v15), vcvtad_u64_f64(v16), 8uLL, 0, v14, 1u);
  CGContextTranslateCTM(v19, 0.0, v18);
  CGContextScaleCTM(v19, 1.0, -1.0);
  PKDrawApplePayButtonLargeWithCornerRadius(v19, a1, a2, v13, 0.0, 0.0, v17, v18, a6, a7);

  Image = CGBitmapContextCreateImage(v19);
  CGContextRelease(v19);
  return Image;
}

CGImageRef PKCreateApplePayButtonImageWithCSSValue(void *a1, void *a2, void *a3, double a4, double a5, double a6, double a7)
{
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  CGImageRef v17;

  v13 = a3;
  v14 = a2;
  v15 = _PKPaymentButtonTypeFromCSSValue(a1);
  v16 = _PKPaymentButtonStyleFromCSSValue(v14);

  v17 = PKCreateApplePayButtonImageWithCornerRadius(v15, v16, v13, a4, a5, a6, a7);
  return v17;
}

uint64_t _PKPaymentButtonTypeFromCSSValue(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;
  const __CFString *v7;
  char v8;
  uint64_t v9;
  __CFString *v11;
  char v12;
  __CFString *v13;
  char v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  char v18;
  __CFString *v19;
  char v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  char v24;
  __CFString *v25;
  char v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  char v30;
  __CFString *v31;
  char v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  char v36;
  __CFString *v37;
  char v38;
  __CFString *v39;
  char v40;
  int v41;

  v1 = a1;
  v2 = v1;
  if (!v1 || !-[__CFString length](v1, "length"))
    goto LABEL_6;
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString stringByTrimmingCharactersInSet:](v2, "stringByTrimmingCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "lowercaseString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = v5;
  v7 = CFSTR("plain");
  if (v6 == CFSTR("plain"))
    goto LABEL_37;
  v2 = v6;
  if (!v6)
    goto LABEL_6;
  v8 = objc_msgSend(CFSTR("plain"), "isEqualToString:", v6);

  if ((v8 & 1) != 0)
    goto LABEL_6;
  v11 = v2;
  v7 = CFSTR("buy");
  if (v11 == CFSTR("buy"))
  {
    v9 = 1;
    goto LABEL_38;
  }
  v2 = v11;
  v12 = objc_msgSend(CFSTR("buy"), "isEqualToString:", v11);

  if ((v12 & 1) != 0)
  {
    v9 = 1;
    goto LABEL_7;
  }
  v13 = v2;
  v7 = CFSTR("set-up");
  if (v13 == CFSTR("set-up"))
  {
    v9 = 2;
    goto LABEL_38;
  }
  v2 = v13;
  v14 = objc_msgSend(CFSTR("set-up"), "isEqualToString:", v13);

  if ((v14 & 1) != 0)
  {
    v9 = 2;
    goto LABEL_7;
  }
  v15 = v2;
  v7 = CFSTR("donate");
  if (v15 == CFSTR("donate"))
  {
    v9 = 4;
    goto LABEL_38;
  }
  v2 = v15;
  v16 = objc_msgSend(CFSTR("donate"), "isEqualToString:", v15);

  if ((v16 & 1) != 0)
  {
    v9 = 4;
    goto LABEL_7;
  }
  v17 = v2;
  v7 = CFSTR("check-out");
  if (v17 == CFSTR("check-out"))
  {
    v9 = 5;
    goto LABEL_38;
  }
  v2 = v17;
  v18 = objc_msgSend(CFSTR("check-out"), "isEqualToString:", v17);

  if ((v18 & 1) != 0)
  {
    v9 = 5;
    goto LABEL_7;
  }
  v19 = v2;
  v7 = CFSTR("book");
  if (v19 == CFSTR("book"))
  {
    v9 = 6;
    goto LABEL_38;
  }
  v2 = v19;
  v20 = objc_msgSend(CFSTR("book"), "isEqualToString:", v19);

  if ((v20 & 1) != 0)
  {
    v9 = 6;
    goto LABEL_7;
  }
  v21 = v2;
  v7 = CFSTR("subscribe");
  if (v21 == CFSTR("subscribe"))
  {
    v9 = 7;
    goto LABEL_38;
  }
  v2 = v21;
  v22 = objc_msgSend(CFSTR("subscribe"), "isEqualToString:", v21);

  if ((v22 & 1) != 0)
  {
    v9 = 7;
    goto LABEL_7;
  }
  v23 = v2;
  v7 = CFSTR("in-store");
  if (v23 == CFSTR("in-store"))
  {
LABEL_37:
    v9 = 0;
    goto LABEL_38;
  }
  v2 = v23;
  v24 = objc_msgSend(CFSTR("in-store"), "isEqualToString:", v23);

  if ((v24 & 1) == 0)
  {
    v25 = v2;
    v7 = CFSTR("reload");
    if (v25 == CFSTR("reload"))
    {
      v9 = 8;
    }
    else
    {
      v2 = v25;
      v26 = objc_msgSend(CFSTR("reload"), "isEqualToString:", v25);

      if ((v26 & 1) != 0)
      {
        v9 = 8;
        goto LABEL_7;
      }
      v27 = v2;
      v7 = CFSTR("add-money");
      if (v27 == CFSTR("add-money"))
      {
        v9 = 9;
      }
      else
      {
        v2 = v27;
        v28 = objc_msgSend(CFSTR("add-money"), "isEqualToString:", v27);

        if ((v28 & 1) != 0)
        {
          v9 = 9;
          goto LABEL_7;
        }
        v29 = v2;
        v7 = CFSTR("top-up");
        if (v29 == CFSTR("top-up"))
        {
          v9 = 10;
        }
        else
        {
          v2 = v29;
          v30 = objc_msgSend(CFSTR("top-up"), "isEqualToString:", v29);

          if ((v30 & 1) != 0)
          {
            v9 = 10;
            goto LABEL_7;
          }
          v31 = v2;
          v7 = CFSTR("order");
          if (v31 == CFSTR("order"))
          {
            v9 = 11;
          }
          else
          {
            v2 = v31;
            v32 = objc_msgSend(CFSTR("order"), "isEqualToString:", v31);

            if ((v32 & 1) != 0)
            {
              v9 = 11;
              goto LABEL_7;
            }
            v33 = v2;
            v7 = CFSTR("rent");
            if (v33 == CFSTR("rent"))
            {
              v9 = 12;
            }
            else
            {
              v2 = v33;
              v34 = objc_msgSend(CFSTR("rent"), "isEqualToString:", v33);

              if ((v34 & 1) != 0)
              {
                v9 = 12;
                goto LABEL_7;
              }
              v35 = v2;
              v7 = CFSTR("support");
              if (v35 == CFSTR("support"))
              {
                v9 = 13;
              }
              else
              {
                v2 = v35;
                v36 = objc_msgSend(CFSTR("support"), "isEqualToString:", v35);

                if ((v36 & 1) != 0)
                {
                  v9 = 13;
                  goto LABEL_7;
                }
                v37 = v2;
                v7 = CFSTR("contribute");
                if (v37 == CFSTR("contribute"))
                {
                  v9 = 14;
                }
                else
                {
                  v2 = v37;
                  v38 = objc_msgSend(CFSTR("contribute"), "isEqualToString:", v37);

                  if ((v38 & 1) != 0)
                  {
                    v9 = 14;
                    goto LABEL_7;
                  }
                  v39 = v2;
                  v7 = CFSTR("tip");
                  if (v39 != CFSTR("tip"))
                  {
                    v2 = v39;
                    v40 = objc_msgSend(CFSTR("tip"), "isEqualToString:", v39);

                    if ((v40 & 1) != 0)
                    {
                      v9 = 15;
                      goto LABEL_7;
                    }
                    v2 = v2;
                    if (v2 == CFSTR("continue")
                      || (v41 = objc_msgSend(CFSTR("continue"), "isEqualToString:", v2), v2, v41))
                    {
                      v9 = 16;
                      goto LABEL_7;
                    }
                    goto LABEL_6;
                  }
                  v9 = 15;
                }
              }
            }
          }
        }
      }
    }
LABEL_38:
    v2 = (__CFString *)v7;
    goto LABEL_7;
  }
LABEL_6:
  v9 = 0;
LABEL_7:

  return v9;
}

uint64_t _PKPaymentButtonStyleFromCSSValue(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;
  const __CFString *v7;
  char v8;
  uint64_t v9;
  __CFString *v10;
  char v11;
  __CFString *v12;
  char v13;
  int v14;

  v1 = a1;
  v2 = v1;
  if (!v1 || !-[__CFString length](v1, "length"))
    goto LABEL_18;
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  -[__CFString stringByTrimmingCharactersInSet:](v2, "stringByTrimmingCharactersInSet:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "lowercaseString");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = v5;
  v7 = CFSTR("white");
  if (v6 == CFSTR("white"))
  {
    v9 = 0;
    goto LABEL_8;
  }
  v2 = v6;
  if (!v6)
    goto LABEL_18;
  v8 = objc_msgSend(CFSTR("white"), "isEqualToString:", v6);

  if ((v8 & 1) == 0)
  {
    v10 = v2;
    v7 = CFSTR("white-outline");
    if (v10 == CFSTR("white-outline"))
    {
      v9 = 1;
    }
    else
    {
      v2 = v10;
      v11 = objc_msgSend(CFSTR("white-outline"), "isEqualToString:", v10);

      if ((v11 & 1) != 0)
      {
        v9 = 1;
        goto LABEL_19;
      }
      v12 = v2;
      v7 = CFSTR("black");
      if (v12 != CFSTR("black"))
      {
        v2 = v12;
        v13 = objc_msgSend(CFSTR("black"), "isEqualToString:", v12);

        if ((v13 & 1) == 0)
        {
          v2 = v2;
          if (v2 == CFSTR("automatic")
            || (v14 = objc_msgSend(CFSTR("automatic"), "isEqualToString:", v2), v2, v14))
          {
            v9 = 3;
            goto LABEL_19;
          }
        }
LABEL_18:
        v9 = 2;
        goto LABEL_19;
      }
      v9 = 2;
    }
LABEL_8:
    v2 = (__CFString *)v7;
    goto LABEL_19;
  }
  v9 = 0;
LABEL_19:

  return v9;
}

void PKDrawApplePayButton(CGContext *a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, double a7, double a8, double a9)
{
  PKDrawApplePayButtonLargeWithCornerRadius(a1, a2, a3, a4, a5, a6, a7, a8, a9, 4.0);
}

void PKDrawApplePayButtonLargeWithCornerRadius(CGContext *a1, uint64_t a2, uint64_t a3, void *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id v19;
  __CFString *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  int v34;
  __CFString *v35;
  __CFString *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  __CFString *v41;
  __CFString *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  __CFString *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  const __CFAttributedString *AttributedStringWithFontSize;
  const __CTLine *v62;
  double height;
  double v64;
  double v65;
  double v66;
  const __CFAttributedString *v67;
  const __CTLine *v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CGFloat width;
  id v77;
  double v78;
  double v79;
  void *v80;
  CGContext *c;
  uint64_t v82;
  _QWORD v83[2];
  CGRect BoundsWithOptions;
  CGRect v85;

  v83[1] = *MEMORY[0x1E0C80C00];
  v19 = a4;
  c = a1;
  v82 = a3;
  v79 = a5;
  _DrawBorder(a1, a3, a5, a6, a7, a8, a9, a10);
  if ((unint64_t)(a2 - 1) > 0xF)
    v20 = 0;
  else
    v20 = off_1E2ACFD18[a2 - 1];
  if (v19)
  {
    v21 = (void *)MEMORY[0x1E0CB34D0];
    PKPassKitBundle();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v22, "localizations");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v19;
    v83[0] = v19;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v83, 1);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "preferredLocalizationsFromArray:forPreferences:", v23, v25);
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "firstObject");
    v27 = (void *)objc_claimAutoreleasedReturnValue();

    if (v27)
    {
      PKPassKitBundle();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "_cfBundle");
      v29 = (void *)CFBundleCopyLocalizedStringForLocalization();

      objc_msgSend(MEMORY[0x1E0C99DC8], "localeWithLocaleIdentifier:", v27);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "languageCode");
      v31 = (void *)objc_claimAutoreleasedReturnValue();

      v32 = (uint64_t)v31;
      v19 = v24;
      if (v29)
        goto LABEL_11;
    }
    else
    {
      v31 = 0;
      v19 = v24;
    }
  }
  else
  {
    v31 = 0;
  }
  PKLocalizedPaymentString(&v20->isa, 0);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99DC8], "pk_preferredLocale");
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v33, "languageCode");
  v32 = objc_claimAutoreleasedReturnValue();

LABEL_11:
  v34 = objc_msgSend(v29, "containsString:", CFSTR("%[tt]@"));
  v35 = CFSTR("%@");
  if (v34)
    v35 = CFSTR("%[tt]@");
  v36 = v35;
  v37 = objc_msgSend(v29, "rangeOfString:", v36);
  v80 = (void *)v32;
  v38 = objc_msgSend(MEMORY[0x1E0C99DC8], "characterDirectionForLanguage:", v32);
  if (v38 == 2)
    v39 = objc_msgSend(v29, "length") - 2;
  else
    v39 = 0;
  objc_msgSend(v29, "componentsSeparatedByString:", v36);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v40, "count") == 2)
  {
    objc_msgSend(v40, "objectAtIndex:", v38 == 2);
    v41 = (__CFString *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "objectAtIndex:", v38 != 2);
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v40, "firstObject");
    v43 = objc_claimAutoreleasedReturnValue();
    if (v37 == v39)
      v42 = (__CFString *)v43;
    else
      v42 = &stru_1E2ADF4C0;
    if (v37 == v39)
      v41 = &stru_1E2ADF4C0;
    else
      v41 = (__CFString *)v43;
  }
  objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceCharacterSet");
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (-[__CFString length](v42, "length"))
  {
    -[__CFString stringByTrimmingCharactersInSet:](v42, "stringByTrimmingCharactersInSet:", v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("\u200E %@"), v45);
    v42 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  if (-[__CFString length](v41, "length"))
  {
    -[__CFString stringByTrimmingCharactersInSet:](v41, "stringByTrimmingCharactersInSet:", v44);
    v46 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@\u200E "), v46);
    v41 = (__CFString *)objc_claimAutoreleasedReturnValue();

  }
  v47 = a7 + a7 * -0.16;
  v48 = a8 * 0.51;
  v49 = 292.0;
  v50 = a8 * 0.51 / 120.0;
  if (fmin(v47 / 292.0, v50) == 1.0)
  {
    v48 = 120.0;
  }
  else if (v47 / 292.0 >= v50)
  {
    v49 = v48 * 2.43333333;
  }
  else
  {
    v48 = v47 * 0.410958904;
    v49 = a7 + a7 * -0.16;
  }
  v51 = round(v49);
  v52 = round(v48);
  -[__CFString stringByAppendingString:](v41, "stringByAppendingString:", v42);
  v53 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (-[__CFString length](v53, "length"))
  {
    v54 = PKRectRoundToPixelWithScale(0.0, 0.0, v47 - v51, v52 * 1.1, 1.0);
    v58 = _MaximumFontSizeForStringInRect(v53, v54, v55, v56, v57, a9);
    if (!a2)
      goto LABEL_41;
  }
  else
  {
    v58 = 0.0;
    if (!a2)
    {
LABEL_41:
      v52 = a8 * 0.5;
      v51 = a8 * 0.5 / 0.410022779;
      v64 = a6;
      v65 = round(v79 + (a7 - v51) * 0.5);
      v66 = round(v64 + (a8 - a8 * 0.5) * 0.5);
      goto LABEL_66;
    }
  }
  if (v52 < a8 / 2.5 || v58 == 0.0)
    goto LABEL_41;
  v78 = a6;
  v60 = *MEMORY[0x1E0C9D820];
  v59 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  if (-[__CFString length](v42, "length"))
  {
    AttributedStringWithFontSize = _CreateAttributedStringWithFontSize(v42, v82, v58);
    v62 = CTLineCreateWithAttributedString(AttributedStringWithFontSize);
    BoundsWithOptions = CTLineGetBoundsWithOptions(v62, 0);
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    CFRelease(AttributedStringWithFontSize);
  }
  else
  {
    v62 = 0;
    width = v60;
    height = v59;
  }
  v77 = v19;
  if (-[__CFString length](v41, "length"))
  {
    v67 = _CreateAttributedStringWithFontSize(v41, v82, v58);
    v68 = CTLineCreateWithAttributedString(v67);
    v85 = CTLineGetBoundsWithOptions(v68, 0);
    v60 = v85.size.width;
    v59 = v85.size.height;
    CFRelease(v67);
  }
  else
  {
    v68 = 0;
  }
  if (height <= v59)
    v69 = v59;
  else
    v69 = height;
  if (v52 * 0.94 <= v69)
  {
    v73 = v79;
    v74 = width;
  }
  else
  {
    v70 = v69 / 0.94;
    v71 = v51 / v51;
    if (v51 == 0.0)
      v71 = 1.0;
    v72 = v70 / v52;
    if (v52 == 0.0)
      v72 = 1.0;
    v73 = v79;
    if (fmin(v71, v72) == 1.0)
    {
      v70 = v52;
    }
    else if (v71 >= v72)
    {
      v51 = v51 / v52 * v70;
    }
    else
    {
      v70 = v51 * (v52 / v51);
    }
    v74 = width;
    v51 = round(v51);
    v52 = round(v70);
  }
  v75 = round(v73 + (a7 - (v74 + v60 + v51)) * 0.5);
  v66 = round(v78 + (a8 - v52) * 0.5);
  if (v68)
  {
    CGContextSetTextPosition(c, v75, round(v66 + v52 * 0.2));
    CTLineDraw(v68, c);
    CFRelease(v68);
  }
  v65 = v60 + v75;
  if (v62)
  {
    CGContextSetTextPosition(c, v51 + v65, round(v66 + v52 * 0.2));
    CTLineDraw(v62, c);
    CFRelease(v62);
  }
  v19 = v77;
LABEL_66:
  _DrawLogoPDFIntoContext(v82, c, v65, v66, v51, v52);

}

void _DrawBorder(CGContext *a1, int a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v12;
  id v13;
  const CGPath *v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGContext *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGRect v23;
  CGRect v24;

  v12 = round(a7 * 0.5);
  v23.origin.x = PKRectRoundToPixelWithScale(a3, a4, a5, a6, 1.0);
  v24 = CGRectInset(v23, v12 * 0.5, v12 * 0.5);
  +[PKRoundedPath pathWithRoundedRect:cornerRadius:](PKRoundedPath, "pathWithRoundedRect:cornerRadius:", v24.origin.x, v24.origin.y, v24.size.width, v24.size.height, a7 * a8);
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (const CGPath *)objc_msgSend(v13, "CGPath");

  CGContextBeginPath(a1);
  CGContextAddPath(a1, v14);
  CGContextClosePath(a1);
  if (a2 > 1)
  {
    if (a2 == 2)
    {
      v15 = 0.0;
      v16 = 0.0;
      v17 = 0.0;
      goto LABEL_10;
    }
    if (a2 == 100)
    {
      CGContextSetRGBFillColor(a1, 0.133333333, 0.133333333, 0.141176471, 1.0);
      v18 = 1.0;
      v19 = a1;
      v20 = 0.133333333;
      v21 = 0.133333333;
      v22 = 0.141176471;
LABEL_12:
      CGContextSetRGBStrokeColor(v19, v20, v21, v22, v18);
    }
  }
  else
  {
    if (!a2)
    {
      CGContextSetRGBFillColor(a1, 1.0, 1.0, 1.0, 1.0);
      v20 = 1.0;
      v21 = 1.0;
      v22 = 1.0;
LABEL_11:
      v18 = 1.0;
      v19 = a1;
      goto LABEL_12;
    }
    if (a2 == 1)
    {
      v15 = 1.0;
      v16 = 1.0;
      v17 = 1.0;
LABEL_10:
      CGContextSetRGBFillColor(a1, v15, v16, v17, 1.0);
      v20 = 0.0;
      v21 = 0.0;
      v22 = 0.0;
      goto LABEL_11;
    }
  }
  CGContextSetLineWidth(a1, v12);
  CGContextDrawPath(a1, kCGPathFillStroke);
}

double _MaximumFontSizeForStringInRect(const __CFString *a1, double a2, double a3, double a4, double a5, double a6)
{
  double v9;
  double v10;
  double v11;
  const __CFAttributedString *AttributedStringWithFontSize;
  const __CTLine *v13;
  double width;
  double height;
  double v17;
  CGRect BoundsWithOptions;

  v9 = a6 * 10.0;
  v10 = a6 * 10.0;
  do
  {
    v11 = v10;
    AttributedStringWithFontSize = _CreateAttributedStringWithFontSize(a1, 2, v10);
    v13 = CTLineCreateWithAttributedString(AttributedStringWithFontSize);
    BoundsWithOptions = CTLineGetBoundsWithOptions(v13, 0);
    width = BoundsWithOptions.size.width;
    height = BoundsWithOptions.size.height;
    v10 = v10 + 1.0;
    CFRelease(v13);
    CFRelease(AttributedStringWithFontSize);
  }
  while (width <= a4 && height <= a5);
  v17 = 0.0;
  if (v11 != v9)
    v17 = v11;
  return floor(v17);
}

void _DrawLogoPDFIntoContext(uint64_t a1, CGContextRef c, CGFloat a3, CGFloat a4, double a5, double a6)
{
  const __CFString *v13;
  void *v14;
  const __CFURL *v15;
  CGPDFDocument *v16;
  CGPDFDocument *v17;
  CGPDFPage *Page;
  CGPDFPage *v19;
  double v20;
  CGAffineTransform v21;
  CGRect BoxRect;

  CGContextSaveGState(c);
  if (a1 == 2 || a1 == 100)
    v13 = CFSTR("PayButtonLogoWhite");
  else
    v13 = CFSTR("PayButtonLogoBlack");
  PKPassKitBundle();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "URLForResource:withExtension:", v13, CFSTR("pdf"));
  v15 = (const __CFURL *)objc_claimAutoreleasedReturnValue();

  v16 = CGPDFDocumentCreateWithURL(v15);
  v17 = v16;
  if (v16 && CGPDFDocumentGetNumberOfPages(v16))
  {
    Page = CGPDFDocumentGetPage(v17, 1uLL);
    v19 = CGPDFPageRetain(Page);
  }
  else
  {
    v19 = 0;
  }
  BoxRect = CGPDFPageGetBoxRect(v19, kCGPDFCropBox);
  if (a5 / BoxRect.size.width >= a6 / BoxRect.size.height)
    v20 = a6 / BoxRect.size.height;
  else
    v20 = a5 / BoxRect.size.width;
  CGContextTranslateCTM(c, a3, a4);
  CGAffineTransformMakeScale(&v21, v20, v20);
  CGContextConcatCTM(c, &v21);
  CGContextDrawPDFPage(c, v19);
  CGPDFDocumentRelease(v17);
  CGPDFPageRelease(v19);
  CGContextRestoreGState(c);

}

CFAttributedStringRef _CreateAttributedStringWithFontSize(const __CFString *a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  const __CFDictionary *v11;
  const __CTFontDescriptor *v12;
  CTFontRef v13;
  CGColorSpace *v14;
  __int128 *v15;
  __int128 v16;
  CGColorRef v17;
  CGFloat v18;
  const __CFDictionary *v19;
  CFAttributedStringRef v20;
  const void *v22[2];
  CGFloat components[2];
  __int128 v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v27[0] = *MEMORY[0x1E0CA8418];
  v6 = *MEMORY[0x1E0CA8450];
  v26[0] = *MEMORY[0x1E0CA8430];
  v7 = *MEMORY[0x1E0CA84E8];
  v25[0] = v6;
  v25[1] = v7;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *MEMORY[0x1E0CA84C8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v26[1] = v8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v28[0] = v9;
  v27[1] = *MEMORY[0x1E0CA83D8];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", a3);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v28[1] = v10;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v12 = CTFontDescriptorCreateWithAttributes(v11);
  v13 = CTFontCreateWithFontDescriptor(v12, 0.0, 0);
  v14 = (CGColorSpace *)PKColorSpaceStandardRGB();
  if (a2 == 100 || a2 == 2)
    v15 = &xmmword_1904552E0;
  else
    v15 = &xmmword_190455300;
  v16 = v15[1];
  *(_OWORD *)components = *v15;
  v24 = v16;
  v17 = CGColorCreate(v14, components);
  v18 = *MEMORY[0x1E0CA8550];
  components[0] = *(CGFloat *)MEMORY[0x1E0CA8188];
  components[1] = v18;
  v22[0] = v13;
  v22[1] = v17;
  v19 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)components, v22, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v20 = CFAttributedStringCreate(0, a1, v19);
  CFRelease(v12);
  CFRelease(v19);
  CFRelease(v13);
  CGColorRelease(v17);

  return v20;
}

void PKDrawApplePayButtonRegularWithCornerRadius(CGContext *a1, double a2, double a3, double a4, double a5, double a6, double a7, uint64_t a8, uint64_t a9)
{
  double v15;
  double v16;
  CGFloat Width;
  double v18;
  CGFloat v19;
  double v20;
  double v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;

  _DrawBorder(a1, a9, a2, a3, a4, a5, a6, a7);
  v22.origin.x = a2;
  v22.origin.y = a3;
  v22.size.width = a4;
  v22.size.height = a5;
  v15 = CGRectGetHeight(v22) * 3.0 / 20.0;
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.width = a4;
  v23.size.height = a5;
  v16 = CGRectGetHeight(v23) * 13.0 / 20.0;
  v24.origin.x = a2;
  v24.origin.y = a3;
  v24.size.width = a4;
  v24.size.height = a5;
  Width = CGRectGetWidth(v24);
  v18 = PKRectRoundToPixelWithScale((Width - v16 / 0.410022779) * 0.5, v15, v16 / 0.410022779, v16, 1.0);
  _DrawLogoPDFIntoContext(a9, a1, v18, v19, v20, v21);
}

void PKDrawApplePayButtonWithCSSValue(CGContext *a1, void *a2, void *a3, void *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v22 = a4;
  v19 = a3;
  v20 = _PKPaymentButtonTypeFromCSSValue(a2);
  v21 = _PKPaymentButtonStyleFromCSSValue(v19);

  PKDrawApplePayButtonLargeWithCornerRadius(a1, v20, v21, v22, a5, a6, a7, a8, a9, a10);
}

id PKApplePayButtonAccessibilityTitleForType(unint64_t a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD v23[2];

  v23[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1 > 0x10)
  {
    v5 = 0;
    if (!v3)
    {
LABEL_7:
      PKLocalizedPaymentString(&v5->isa, 0);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      goto LABEL_8;
    }
  }
  else
  {
    v5 = off_1E2ACFD98[a1];
    if (!v3)
      goto LABEL_7;
  }
  v6 = (void *)MEMORY[0x1E0CB34D0];
  PKPassKitBundle();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizations");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v23[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "preferredLocalizationsFromArray:forPreferences:", v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "firstObject");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v11)
    goto LABEL_7;
  PKPassKitBundle();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "_cfBundle");
  v13 = (void *)CFBundleCopyLocalizedStringForLocalization();

  if (!v13)
    goto LABEL_7;
LABEL_8:
  PKLocalizedPaymentString(CFSTR("APPLE_PAY"), 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  PKStringWithValidatedFormat(v13, CFSTR("%@"), v15, v16, v17, v18, v19, v20, (uint64_t)v14);
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

uint64_t PKProtobufShareableCredentialMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  PKProtobufShareableCredential *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_46;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_48;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_46:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_48:
        *(_DWORD *)(a1 + 48) = v19;
        goto LABEL_36;
      case 2u:
        v24 = objc_alloc_init(PKProtobufShareableCredential);
        objc_msgSend((id)a1, "addShareableCredentials:", v24);
        if (PBReaderPlaceMark() && (PKProtobufShareableCredentialReadFrom((uint64_t)v24, a2) & 1) != 0)
        {
          PBReaderRecallMark();

LABEL_36:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 3u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 16;
        goto LABEL_35;
      case 4u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 8;
        goto LABEL_35;
      case 5u:
        PBReaderReadString();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 32;
        goto LABEL_35;
      case 6u:
        PBReaderReadData();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = 24;
LABEL_35:
        v27 = *(void **)(a1 + v26);
        *(_QWORD *)(a1 + v26) = v25;

        goto LABEL_36;
      case 7u:
        v28 = 0;
        v29 = 0;
        v30 = 0;
        *(_BYTE *)(a1 + 56) |= 1u;
        while (2)
        {
          v31 = *v3;
          v32 = *(_QWORD *)(a2 + v31);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v32);
            *(_QWORD *)(a2 + v31) = v32 + 1;
            v30 |= (unint64_t)(v33 & 0x7F) << v28;
            if (v33 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                v30 = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v30 = 0;
LABEL_52:
        *(_BYTE *)(a1 + 52) = v30 != 0;
        goto LABEL_36;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_36;
    }
  }
}

void sub_19012D864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19012D9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19012DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKDeepCopyDeduplicated(void *a1)
{
  return PKDeepCopyDeduplicatedWithHashTable(a1, 0);
}

uint64_t PKPaymentTransactionAwardTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("monetary"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = objc_msgSend(CFSTR("monetary"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("nonMonetary")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("nonMonetary"), "isEqualToString:", v5), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPaymentTransactionAwardTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("nonMonetary");
  if (a1 == 1)
    return CFSTR("monetary");
  else
    return v1;
}

SecAccessControlRef PKTestACLProviderDualActionACL()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  SecAccessControlRef v15;
  CFErrorRef v16;
  NSObject *v17;
  CFErrorRef error;
  uint8_t buf[4];
  CFErrorRef v21;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[4];

  v29[2] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v0, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pkofn"));
  objc_msgSend(v0, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0);
  v28[0] = CFSTR("pbioc");
  v1 = (void *)objc_opt_new();
  v28[1] = CFSTR("pbiot");
  v29[0] = v1;
  v29[1] = &unk_1E2C3EFB0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v2, CFSTR("cbio"));

  objc_msgSend(v0, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("cbtn"));
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pmuc"));
  v26[0] = CFSTR("pbioc");
  v4 = (void *)objc_opt_new();
  v26[1] = CFSTR("pbiot");
  v27[0] = v4;
  v27[1] = &unk_1E2C3EFC8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, v26, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("cbio"));

  objc_msgSend(v3, "setObject:forKeyedSubscript:", v0, CFSTR("ckon"));
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pkofn"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pmuc"));
  v24[0] = CFSTR("pbioc");
  v7 = (void *)objc_opt_new();
  v24[1] = CFSTR("pbiot");
  v25[0] = v7;
  v25[1] = &unk_1E2C3EFB0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v25, v24, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("cbio"));

  objc_msgSend(v6, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("cbtn"));
  v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v9, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pkofn"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pmoc"));
  objc_msgSend(v9, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pmuc"));
  v22[0] = CFSTR("pbioc");
  v10 = (void *)objc_opt_new();
  v22[1] = CFSTR("pbiot");
  v23[0] = v10;
  v23[1] = &unk_1E2C3EFC8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v23, v22, 2);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setObject:forKeyedSubscript:", v11, CFSTR("cbio"));

  objc_msgSend(v9, "setObject:forKeyedSubscript:", v6, CFSTR("ckon"));
  v12 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v13 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v12, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("oa"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v3, CFSTR("ock"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v13, CFSTR("odel"));
  objc_msgSend(v12, "setObject:forKeyedSubscript:", v9, CFSTR("osgn"));
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  error = 0;
  v15 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFTypeRef)*MEMORY[0x1E0CD68E8], 0x40000002uLL, &error);
  v16 = error;
  if (error)
  {
    PKLogFacilityTypeGetObject(0);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v21 = v16;
      _os_log_impl(&dword_18FC92000, v17, OS_LOG_TYPE_DEFAULT, "Error generating accessControlRef %@", buf, 0xCu);
    }

  }
  SecAccessControlSetConstraints();

  return v15;
}

SecAccessControlRef PKTestACLProviderBiometricsACL()
{
  id v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  SecAccessControlRef v15;
  CFErrorRef v16;
  NSObject *v17;
  void *v19;
  CFErrorRef error;
  uint8_t buf[4];
  CFErrorRef v22;
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[4];

  v30[2] = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v0, "setObject:forKeyedSubscript:");
  objc_msgSend(v0, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pmuc"));
  v29[0] = CFSTR("pbioc");
  v1 = (void *)objc_opt_new();
  v29[1] = CFSTR("pbiot");
  v30[0] = v1;
  v30[1] = &unk_1E2C3EFB0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 2);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setObject:forKeyedSubscript:", v2, CFSTR("cbio"));

  objc_msgSend(v0, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("cbtn"));
  v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pkofn"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pmuc"));
  v27[0] = CFSTR("pbioc");
  v4 = (void *)objc_opt_new();
  v27[1] = CFSTR("pbiot");
  v28[0] = v4;
  v28[1] = &unk_1E2C3EFC8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("cbio"));

  v19 = v0;
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v0, CFSTR("ckon"));
  v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E2C3EFB0, CFSTR("pkofn"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pmuc"));
  v25[0] = CFSTR("pbioc");
  v7 = (void *)objc_opt_new();
  v25[1] = CFSTR("pbiot");
  v26[0] = v7;
  v26[1] = &unk_1E2C3EFB0;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v8, CFSTR("cbio"));

  v9 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v6, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], CFSTR("cbtn"));
  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pkofn"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", &unk_1E2C3EFC8, CFSTR("pmuc"));
  v23[0] = CFSTR("pbioc");
  v11 = (void *)objc_opt_new();
  v23[1] = CFSTR("pbiot");
  v24[0] = v11;
  v24[1] = &unk_1E2C3EFC8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v24, v23, 2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v12, CFSTR("cbio"));

  objc_msgSend(v10, "setObject:forKeyedSubscript:", v6, CFSTR("ckon"));
  v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, CFSTR("oa"));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v3, CFSTR("ock"));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, CFSTR("odel"));
  objc_msgSend(v13, "setObject:forKeyedSubscript:", v10, CFSTR("osgn"));
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithDictionary:", v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  error = 0;
  v15 = SecAccessControlCreateWithFlags((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFTypeRef)*MEMORY[0x1E0CD68E8], 0x40000002uLL, &error);
  v16 = error;
  if (error)
  {
    PKLogFacilityTypeGetObject(0);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v22 = v16;
      _os_log_impl(&dword_18FC92000, v17, OS_LOG_TYPE_DEFAULT, "Error generating accessControlRef %@", buf, 0xCu);
    }

  }
  SecAccessControlSetConstraints();

  return v15;
}

void sub_1901309BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

__CFString *PKProvisioningAnalyticsButtonTagToString(unint64_t a1)
{
  if (a1 <= 3)
    a1 = *off_1E2ACFF90[a1];
  return (__CFString *)(id)a1;
}

__CFString *PKPaymentProvisioningControllerStateToString(unint64_t a1)
{
  if (a1 < 6)
    return off_1E2AD1110[a1];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("PKPaymentProvisioningControllerState-Unknown (%ld)"), a1);
  return (__CFString *)(id)objc_claimAutoreleasedReturnValue();
}

void sub_1901335FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_190133C48(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_190133F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 216), 8);
  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_190134940(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1901354B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1901359F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

BOOL PKShouldDisplayRemoteCredentialWithStatus(void *a1)
{
  id v1;
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;

  v1 = a1;
  v2 = objc_msgSend(v1, "status");
  if ((unint64_t)(v2 - 1) < 3)
    goto LABEL_2;
  if (v2 != 5)
  {
LABEL_7:
    v3 = 0;
    goto LABEL_8;
  }
  v4 = objc_msgSend(v1, "transferType");
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      objc_msgSend(v1, "transferableFromDevices");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v3 = objc_msgSend(v5, "count") != 0;

      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_2:
  v3 = 1;
LABEL_8:

  return v3;
}

void sub_190137A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 208), 8);
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1901381D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190138F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose(&a51, 8);
  _Unwind_Resume(a1);
}

void sub_190139AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190139FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19013AD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  _Block_object_dispose(&a58, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose((const void *)(v64 - 248), 8);
  _Block_object_dispose((const void *)(v64 - 200), 8);
  _Block_object_dispose((const void *)(v64 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_19013BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x218], 8);
  _Block_object_dispose(&STACK[0x248], 8);
  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v70 - 232), 8);
  _Block_object_dispose((const void *)(v70 - 184), 8);
  _Block_object_dispose((const void *)(v70 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_19013C0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19013C45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_19013E70C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_19013EFF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 184), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1901408C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190142838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v18 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_190142FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190143A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  _Block_object_dispose(&a24, 8);
  objc_destroyWeak((id *)(v26 - 88));
  _Unwind_Resume(a1);
}

void sub_19014521C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location)
{
  id *v26;

  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1901454D8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190146554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190146A84(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_190147A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190147C30(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190148A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initCIDVUIProofingFlowManager()
{
  Class result;

  if (qword_1ECF225E8 != -1)
    dispatch_once(&qword_1ECF225E8, &__block_literal_global_1088);
  result = objc_getClass("CIDVUIProofingFlowManager");
  _MergedGlobals_238 = (uint64_t)result;
  getCIDVUIProofingFlowManagerClass[0] = (uint64_t (*)())CIDVUIProofingFlowManagerFunction;
  return result;
}

id CIDVUIProofingFlowManagerFunction()
{
  return (id)_MergedGlobals_238;
}

Class initNPKCompanionAgentConnection_2()
{
  Class result;

  if (qword_1ECF225F8 != -1)
    dispatch_once(&qword_1ECF225F8, &__block_literal_global_1091);
  result = objc_getClass("NPKCompanionAgentConnection");
  qword_1ECF225F0 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass_2[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction_2;
  return result;
}

id NPKCompanionAgentConnectionFunction_2()
{
  return (id)qword_1ECF225F0;
}

BOOL PKPreferenceBOOLforKey(void *a1)
{
  __CFString *v1;
  _BOOL8 v2;

  v1 = a1;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (os_variant_has_internal_ui())
    v2 = CFPreferencesGetAppBooleanValue(v1, (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  else
    v2 = 0;

  return v2;
}

uint64_t PKIgnoreSignatures()
{
  uint64_t result;

  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKIgnoreSignatures"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetIgnoreSignatures(uint64_t a1)
{
  id v2;

  if (os_variant_allows_internal_security_policies())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v2, CFSTR("PKIgnoreSignatures"));

  }
}

void _PKSetGlobalValueForKey(void *a1, void *a2)
{
  uint64_t v3;
  __CFString *v4;
  id v5;
  const __CFString *v6;
  __CFNotificationCenter *DarwinNotifyCenter;

  v3 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
  v4 = a2;
  v5 = a1;
  if (v3 != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v6 = (const __CFString *)*MEMORY[0x1E0C9B228];
  CFPreferencesSetAppValue(v4, v5, (CFStringRef)*MEMORY[0x1E0C9B228]);

  CFPreferencesAppSynchronize(v6);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.passbook.globalprefschanged"), 0, 0, 1u);
}

uint64_t PKLogEnabledTopics()
{
  return -1;
}

BOOL PKAllowHTTP()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKAllowHTTP"), CFSTR("com.apple.Wallet.public"), 0) != 0;
}

void PKSetAllowHTTP(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  void *v3;
  const __CFString *v4;
  __CFNotificationCenter *v5;
  id v6;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v6 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKAllowHTTP"), v6, CFSTR("com.apple.Wallet.public"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet.public"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.public.preferenceschanged"), 0, 0, 1u);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (const __CFString *)*MEMORY[0x1E0C9B228];
  CFPreferencesSetAppValue(CFSTR("PKAllowHTTP"), v3, (CFStringRef)*MEMORY[0x1E0C9B228]);
  CFPreferencesAppSynchronize(v4);
  v5 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v5, CFSTR("com.apple.passbook.globalprefschanged"), 0, 0, 1u);

}

uint64_t PKSuppressLaunchOnFieldDetect()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSuppressLaunchOnFieldDetect"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKContactlessInterfaceHomeButtonSourceHasOccurred()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKContactlessInterfaceHomeButtonSourceHasOccuredKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetContactlessInterfaceHomeButtonSourceHasOccurred(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _PKSetGlobalValueForKey(v1, CFSTR("PKContactlessInterfaceHomeButtonSourceHasOccuredKey"));

}

uint64_t PKForcePrivateLabelSetupDisambiguation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForcePrivateLabelSetupDisambiguation"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceBrowseProductsSearchUI()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceBrowseProductsSearchUIKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceBrowseBankPartners()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceBrowseBankPartnersKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMockBrowseBankPartners()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMockBrowseBankPartnersKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKIdentityUseBioBindingForWalletTestPass()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKIdentityUseBioBindingKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKBypassCertValidation()
{
  uint64_t result;

  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKBypassCertValidation"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKIgnoreSSLPinning()
{
  uint64_t result;

  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKIgnoreSSLPinning"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKDisableNotificationPullTimeout()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableNotificationPullTimeoutKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKLogNotificationServiceResponses()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKLogNotificationServiceResponsesKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKDisableTransactionTableTruncation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableTransactionTableTruncationKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShowFakePaymentSetupFields()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowFakePaymentSetupFieldsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShowFakeMoreInfo()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowFakeMoreInfoKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShowFakeExternalDevicePicker()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowFakeExternalDevicePickerKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceCardEducation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceCardEducationKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceMakeDefaultCard()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceMakeDefaultCardKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKUseRefactoredProvisioningFlow()
{
  return 1;
}

uint64_t PKUseRefactoredProvisioningController()
{
  return 1;
}

uint64_t PKEnableDynamicSEAllocation()
{
  return PKDisableDynamicSEAllocation() ^ 1;
}

uint64_t PKDisableDynamicSEAllocation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableDynamicSEAllocationKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKEnableTapToProvision()
{
  int AppBooleanValue;
  _BOOL8 v1;
  int v2;
  NSObject *v3;
  const __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  const __CFString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  if (!os_variant_has_internal_ui())
    goto LABEL_15;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKEnableTapToProvisionKey"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  v1 = AppBooleanValue != 0;
  if (keyExistsAndHasValidFormat)
  {
    v2 = AppBooleanValue;
    PKLogFacilityTypeGetObject(0x23uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4 = CFSTR("No");
      if (v2)
        v4 = CFSTR("Yes");
      *(_DWORD *)buf = 138412290;
      v11 = v4;
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "PKEnableTapToProvision returning '%@' because key set in defaults", buf, 0xCu);
    }
    goto LABEL_18;
  }
  PKCurrentRegion();
  v5 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  if (v5 == CFSTR("US")
    || (v6 = v5) != 0
    && (v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("US")), v6, v6, v7))
  {
    PKLogFacilityTypeGetObject(0x23uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "PKEnableTapToProvision returning 'Yes' because region is US", buf, 2u);
    }
    v1 = 1;
  }
  else
  {
LABEL_15:
    PKLogFacilityTypeGetObject(0x23uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "PKEnableTapToProvision returning 'No'", buf, 2u);
    }
    v1 = 0;
  }
LABEL_18:

  return v1;
}

uint64_t PKDynamicSEAllocationFakeFullSE()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDynamicSEAllocationFakeFullSEKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKFallbackToStaticJPKITempPINAndPass()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKFallbackToStaticJPKITempPINAndPassKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKEnableUpdatedOneTimeCodeParsing()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  if (!os_variant_has_internal_ui())
    return 1;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKEnableUpdatedOneTimeCodeParsingKey"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

BOOL PKEnableBuddyBackgroundProvisioning()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  if (!os_variant_has_internal_ui())
    return 1;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKEnableBuddyBackgroundProvisioningKey"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

BOOL PKEnableBuddyBackgroundProvisioningForPaymentCards()
{
  int has_internal_ui;
  _BOOL8 result;
  int AppBooleanValue;
  BOOL v3;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  has_internal_ui = os_variant_has_internal_ui();
  result = 0;
  if (has_internal_ui)
  {
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKEnableBuddyBackgroundProvisioningKey"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
      v3 = AppBooleanValue == 0;
    else
      v3 = 1;
    return !v3;
  }
  return result;
}

uint64_t PKSimulateBuddyBackgroundProvisioningInWallet()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSimulateBuddyBackgroundProvisioningInWalletKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceSuccessfulSuperEasyProvisioningIfPossible()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceSuccessfulSuperEasyProvisioningIfPossibleKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPPTTestingEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPPTTestingEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKSimulateWalletDisabledForManagedAccount()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSimulateWalletDisabledForManagedAccountKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKSkipHasExistingCardsCheckInSetupAssistant()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSkipHasExistingCardsCheckInSetupAssistantKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShowFakeVerificationChannels()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowFakeVerificationChannels"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceLargeAmountOfProducts()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceLargeAmountOfProductsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShowFakeRemoteCredentials()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowFakeRemoteCredentialsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentSetupForceBridgeAppearance()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentSetupForceBridgeAppearance"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentSetupUseXPCProxyTargetDevice()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentSetupUseXPCProxyTargetDevice"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentPassArtDownloadDelayEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentSetupPassArtDownloadDelay"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentSetupMockInAppProvisioningDeleteUIEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentSetupMockInAppProvisioningDeleteUI"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKPaymentSetupMergeProductsPartnersAPIEnabled()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  if (!os_variant_has_internal_ui())
    return 1;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentSetupMergeProductsPartnersAPIKey"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

uint64_t PKPaymentOffersUseAuthenticationServicesEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentOffersUseAuthenticationServicesKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentOffersUseEphemeralSessionEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentOffersUseEphemeralSessionKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentOffersSuppressPayInFullEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentOffersSuppressPayInFullKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKPaymentOffersForceSuppressPayInFull()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentOffersForceSuppressPayInFullKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKShortenRemindersEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShortenRemindersEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKUIOnlyDemoModeEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKUIOnlyDemoModeEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

BOOL PKHandsOnDemoModeEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHandsOnDemoModeEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

uint64_t PKSensitiveFieldBroadcastingEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAllowSensitiveFieldBroadcasting"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKGenerateStoreDemoTransactionsDaily()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKGenerateStoreDemoTransactionsDaily"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetGenerateStoreDemoTransactionsDaily(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v1, CFSTR("PKGenerateStoreDemoTransactionsDaily"));

  }
  else
  {
    _PKSetGlobalValueForKey(0, CFSTR("PKGenerateStoreDemoTransactionsDaily"));
  }
}

uint64_t PKTransactionDebugDetailsEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKTransactionDetailsEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKTransactionDetailedLoggingEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKTransactionDetailedLoggingEnabled"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKSuppressSecureElementUIHinting()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSuppressSecureElementUIHinting"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMobileAssetEagerCatalogFetching()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMobileAssetEagerCatalogFetchingKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMockOsloSecureElementAuth()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMockOsloSecureElementAuthKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKDisablePersonalizationValidation()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDisablePersonalizationValidationKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

uint64_t PKForceLocalIDS()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceLocalIDSKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKPayStateDebugUI()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPayStateDebugUI"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

id PKMarketsURLOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKMarketsURLOverride"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKTransactionServiceURLOverrideForPassUniqueIdentifier(void *a1)
{
  id v1;
  int has_internal_ui;
  void *v3;
  void *v4;
  NSObject *v5;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  has_internal_ui = os_variant_has_internal_ui();
  v3 = 0;
  if (v1 && has_internal_ui)
  {
    v4 = (void *)CFPreferencesCopyAppValue(CFSTR("PKTransactionServiceURLOverride"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    objc_msgSend(v4, "objectForKey:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      PKLogFacilityTypeGetObject(0x17uLL);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 138412546;
        v8 = v3;
        v9 = 2112;
        v10 = v1;
        _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Using transaction service URL override %@ for pass %@", (uint8_t *)&v7, 0x16u);
      }

    }
  }

  return v3;
}

void PKSetTransactionServiceURLOverrideForPassUniqueIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  int has_internal_ui;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  has_internal_ui = os_variant_has_internal_ui();
  if (v3 && has_internal_ui)
  {
    PKLogFacilityTypeGetObject(0x17uLL);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412546;
      v11 = v4;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "Setting transaction service URL override to %@ for pass %@", (uint8_t *)&v10, 0x16u);
    }

    v7 = (void *)CFPreferencesCopyAppValue(CFSTR("PKTransactionServiceURLOverride"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    v8 = (id)objc_msgSend(v7, "mutableCopy");

    if (!v8)
      v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v4, v3);
    if (objc_msgSend(v8, "count"))
    {
      v9 = (void *)objc_msgSend(v8, "copy");
      _PKSetGlobalValueForKey(v9, CFSTR("PKTransactionServiceURLOverride"));

    }
    else
    {
      _PKSetGlobalValueForKey(0, CFSTR("PKTransactionServiceURLOverride"));
    }

  }
}

id PKTransactionServicePushTopicOverrideForPassUniqueIdentifier(void *a1)
{
  id v1;
  int has_internal_ui;
  void *v3;
  void *v4;
  NSObject *v5;
  int v7;
  void *v8;
  __int16 v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  has_internal_ui = os_variant_has_internal_ui();
  v3 = 0;
  if (v1 && has_internal_ui)
  {
    v4 = (void *)CFPreferencesCopyAppValue(CFSTR("PKTransactionServicePushTopicOverride"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    objc_msgSend(v4, "objectForKey:", v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3)
    {
      PKLogFacilityTypeGetObject(0x17uLL);
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 138412546;
        v8 = v3;
        v9 = 2112;
        v10 = v1;
        _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Using transaction service push topic override %@ for pass %@", (uint8_t *)&v7, 0x16u);
      }

    }
  }

  return v3;
}

void PKSetTransactionServicePushTopicOverrideForPassUniqueIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  int has_internal_ui;
  NSObject *v6;
  void *v7;
  id v8;
  void *v9;
  int v10;
  id v11;
  __int16 v12;
  id v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  has_internal_ui = os_variant_has_internal_ui();
  if (v3 && has_internal_ui)
  {
    PKLogFacilityTypeGetObject(0x17uLL);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412546;
      v11 = v4;
      v12 = 2112;
      v13 = v3;
      _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "Setting transaction service push topic override to %@ for pass %@", (uint8_t *)&v10, 0x16u);
    }

    v7 = (void *)CFPreferencesCopyAppValue(CFSTR("PKTransactionServicePushTopicOverride"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    v8 = (id)objc_msgSend(v7, "mutableCopy");

    if (!v8)
      v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v4, v3);
    if (objc_msgSend(v8, "count"))
    {
      v9 = (void *)objc_msgSend(v8, "copy");
      _PKSetGlobalValueForKey(v9, CFSTR("PKTransactionServicePushTopicOverride"));

    }
    else
    {
      _PKSetGlobalValueForKey(0, CFSTR("PKTransactionServicePushTopicOverride"));
    }

  }
}

uint64_t PKAuxiliaryCapabilityManagerPerformScheduledChecksOften()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAuxiliaryCapabilityManagerPerformScheduledChecksOftenKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKAuxiliaryCapabilityManagerDisabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAuxiliaryCapabilityManagerDisabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

CFIndex PKHasSeenPrivacyTermsVersion()
{
  return CFPreferencesGetAppIntegerValue(CFSTR("PKHasSeenPrivacyTermsVersion"), CFSTR("com.apple.Wallet"), 0);
}

void PKSetHasSeenDeviceAssessmentEducation(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  id v3;

  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v3 = (id)objc_claimAutoreleasedReturnValue();
    CFPreferencesSetAppValue(CFSTR("PKHasSeenDeviceAssessmentEducation"), v3, CFSTR("com.apple.Wallet"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.preferenceschanged"), 0, 0, 1u);

  }
}

void PKSetHasSeenPrivacyTermsVersion(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  id v2;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKHasSeenPrivacyTermsVersion"), v2, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.preferenceschanged"), 0, 0, 1u);

}

CFPropertyListRef PKRawRegionFeatureOverride()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKRegionFeatureOverrideKey"), CFSTR("com.apple.Wallet"));
}

id PKRegionFeatureOverride()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  unint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  uint64_t v21;
  id v22;
  const __CFString *v23;
  unint64_t v24;
  const __CFString *v25;
  void *v26;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  PKRawRegionFeatureOverride();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    v30 = 0;
    goto LABEL_31;
  }
  v1 = (void *)MEMORY[0x1E0CB36D8];
  v29 = v0;
  objc_msgSend(v0, "dataUsingEncoding:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "JSONObjectWithData:options:error:", v2, 0, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  v4 = 0x1E0C99000uLL;
  objc_opt_class();
  v28 = v3;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v5 = (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", v3, 0);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      v6 = 0;
      goto LABEL_11;
    }
    v5 = v3;
  }
  v6 = v5;
LABEL_11:
  v30 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v7 = v6;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v33;
    v11 = CFSTR("type");
    v12 = CFSTR("feature");
    do
    {
      v13 = 0;
      v31 = v9;
      do
      {
        if (*(_QWORD *)v33 != v10)
          objc_enumerationMutation(v7);
        v14 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * v13);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend(v14, "PKNumberForKey:", v11);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          if (!v15)
          {
            objc_msgSend(v14, "PKStringForKey:", v11);
            v16 = (void *)objc_claimAutoreleasedReturnValue();
            v17 = v16;
            if (v16)
            {
              objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", PKWebServiceRegionFeatureTypeFromString(v16));
              v15 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              v15 = 0;
            }

          }
          objc_msgSend(v14, "PKDictionaryForKey:", v12);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v14, "PKStringForKey:", CFSTR("region"));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          if (v15)
            v20 = v18 == 0;
          else
            v20 = 1;
          if (!v20)
          {
            v21 = v10;
            v22 = v7;
            v23 = v11;
            v24 = v4;
            v25 = v12;
            +[PKWebServiceRegionFeature regionFeatureWithType:dictionary:region:](PKWebServiceRegionFeature, "regionFeatureWithType:dictionary:region:", objc_msgSend(v15, "integerValue"), v18, v19);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "safelyAddObject:", v26);

            v12 = v25;
            v4 = v24;
            v11 = v23;
            v7 = v22;
            v10 = v21;
            v9 = v31;
          }

        }
        ++v13;
      }
      while (v9 != v13);
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v32, v36, 16);
    }
    while (v9);
  }

  v0 = v29;
LABEL_31:

  return v30;
}

void PKSetRegionFeatureOverride(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKRegionFeatureOverrideKey"));

}

uint64_t PKBypassImmoTokenCountCheck()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKBypassImmoTokenCountCheckKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKForceSignDataApplicationStateForegroundRunningCheck()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceSignDataApplicationStateForegroundRunningCheckKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKHidePlaceholderImageIniMessage()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKIncludePlaceholderImageIniMessageKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMerchantTokensDemoModeEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensDemoModeEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMerchantTokensPagedDemoEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensPagedDemoEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMerchantTokensAMPTransactionDemoEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensAMPTransactionDemoEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMerchantTokensCashDemoEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensCashDemoEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

id PKNearbyPeerPaymentEncryptionOIDValue()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKNearbyPeerPaymentEncryptionOIDValueKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

uint64_t PKMerchantTokensForceMerchantIconsEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensForceMerchantIconsEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKMerchantTokensUseAltIcon()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKMerchantTokensUseAltIconKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKSetMerchantTokensUseAltIcon(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _PKSetGlobalValueForKey(v1, CFSTR("PKMerchantTokensUseAltIconKey"));

}

BOOL PKVirtualCardFakeVirtualCardsEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKVirtualCardFakeVirtualCardsEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

BOOL PKVirtualCardFakeCredentialsEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKVirtualCardFakeCredentialsEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

CFPropertyListRef PKVirtualCardFakeCashVPANBalance()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKVirtualCardFakeCashVPANBalance"), (CFStringRef)*MEMORY[0x1E0C9B228]);
}

BOOL PKVirtualCardFakeCredentialsWithDelayEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKVirtualCardFakeCredentialsWithDelayEnabled"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

uint64_t PKSafariCredentialProvisioningConsented()
{
  int AppBooleanValue;
  uint64_t v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKSafariCredentialProvisioningConsented"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  v1 = 1;
  if (!AppBooleanValue)
    v1 = 2;
  if (keyExistsAndHasValidFormat)
    return v1;
  else
    return 0;
}

void PKSetSafariCredentialImportConsented(int a1)
{
  CFPropertyListRef *v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!a1)
    v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  CFPreferencesSetAppValue(CFSTR("PKSafariCredentialProvisioningConsented"), *v2, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.preferenceschanged"), 0, 0, 1u);
}

void PKClearSafariCredentialImportConsented()
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  CFPreferencesSetAppValue(CFSTR("PKSafariCredentialProvisioningConsented"), 0, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.preferenceschanged"), 0, 0, 1u);
}

BOOL PKSafariCredentialProvisioningRequestConsentNotified()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSafariCredentialProvisioningRequestConsentNotified"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKSetSafariCredentialImportRequestConsentNotified(int a1)
{
  CFPropertyListRef *v2;
  __CFNotificationCenter *DarwinNotifyCenter;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!a1)
    v2 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  CFPreferencesSetAppValue(CFSTR("PKSafariCredentialProvisioningRequestConsentNotified"), *v2, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.preferenceschanged"), 0, 0, 1u);
}

uint64_t PKAppleBalanceDemoAccountEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAppleBalanceDemoAccountEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKAppleBalanceBackgroundProvisionDisabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAppleBalanceBackgroundProvisionDisabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKAppleBalanceNativeTopUpEnabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAppleBalanceNativeTopUpEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKAppleBalanceInStoreSignatureVerificationDisabled()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAppleBalanceInStoreSignatureVerificationDisabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKPayLaterIgnoreLastUpdatedDate()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKPayLaterIgnoreLastUpdatedDateKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetPayLaterIgnoreLastUpdatedDateKey(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _PKSetGlobalValueForKey(v1, CFSTR("PKPayLaterIgnoreLastUpdatedDateKey"));

}

uint64_t PKPayLaterSaveFinancingPlanJSONOnUpdate()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPayLaterSaveFinancingPlanJSONOnUpdateKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetPayLaterSaveFinancingPlanJSONOnUpdateKey(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _PKSetGlobalValueForKey(v1, CFSTR("PKPayLaterSaveFinancingPlanJSONOnUpdateKey"));

}

uint64_t PKPaymentOffersForceFeatureSupport()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPaymentOffersForceFeatureSupportKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetPaymentOffersForceFeatureSupport(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  _PKSetGlobalValueForKey(v1, CFSTR("PKPaymentOffersForceFeatureSupportKey"));

}

BOOL PKSavingsDemoAccountEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSavingsDemoAccountEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

CFIndex PKSavingsGraphOverrideCurrentType()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppIntegerValue(CFSTR("PKSavingsGraphOverrideKey"), CFSTR("com.apple.stockholm"), 0);
}

void PKSetSavingsGraphOverrideType(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKSavingsGraphOverrideKey"), v1, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

CFIndex PKLastSelectedAccountGraphRange()
{
  CFIndex result;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppIntegerValue(CFSTR("PKSelectedAccountGraphRangeKey"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
    return 4;
  return result;
}

void PKSetLastSelectedAccountGraphRange(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKSelectedAccountGraphRangeKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKSavingsBusinessChatIdentifierOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKSavingsBusinessChatIdentifierOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKSetSavingsBusinessChatIdentifierOverride(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v4 = a1;
  if (os_variant_has_internal_ui())
  {
    if (objc_msgSend(v4, "length"))
      v1 = v4;
    else
      v1 = 0;
    v2 = v1;

    _PKSetGlobalValueForKey(v2, CFSTR("PKSavingsBusinessChatIdentifierOverrideKey"));
    v3 = v2;
  }
  else
  {
    v3 = v4;
  }

}

unint64_t PKDemoRewardsRedemptionType()
{
  unint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = CFPreferencesGetAppIntegerValue(CFSTR("PKDemoRewardsDestinationKey"), CFSTR("com.apple.stockholm"), 0);
  if (result <= 1)
    return 1;
  return result;
}

void PKSetDemoRewardsRedemptionType(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKDemoRewardsDestinationKey"), v1, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

BOOL PKExperimentationOverrideEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKExperimentationOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

BOOL PKExperimentationOverrideHideDoubleClickToPayEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKExperimentationOverrideHideDoubleClickToPayKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

CFPropertyListRef PKExperimentationOverrideHideDoubleClickToPaySecondsEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKExperimentationOverrideHideDoubleClickToPaySecondsKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
}

BOOL PKExperimentationOverrideShowCardSetupFromSheetEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKExperimentationOverrideShowCardSetupFromSheetKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

BOOL PKExperimentationOverrideAllowInAppPaymentFailureRetryEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKExperimentationOverrideAllowInAppPaymentFailureRetryKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

BOOL PKExperimentationOverrideShowLineItemsInMainPaymentSheetEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKExperimentationOverrideShowLineItemsInMainPaymentSheetKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

CFPropertyListRef PKLastGeneratedStoreDemoTransactionsDate()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKLastGeneratedStoreDemoTransactionsDate"), (CFStringRef)*MEMORY[0x1E0C9B228]);
}

void PKSetLastGeneratedStoreDemoTransactionsDate(void *a1)
{
  _PKSetGlobalValueForKey(a1, CFSTR("PKLastGeneratedStoreDemoTransactionsDate"));
}

uint64_t PKProvisioningForceAccessStyle()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKProvisioningForceAccessStyle"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKShouldSuppressPeerPaymentBalanceReminder()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShouldSuppressPeerPaymentBalanceReminderKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKSetShouldSuppressPeerPaymentBalanceReminder(int a1)
{
  void *v2;
  id v3;

  if (os_variant_has_internal_ui())
  {
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
    v3 = v2;
    _PKSetGlobalValueForKey(v2, CFSTR("PKShouldSuppressPeerPaymentBalanceReminderKey"));

  }
}

void PKSetOverrideDeviceName(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;

  v4 = a1;
  if (os_variant_has_internal_ui())
  {
    if (objc_msgSend(v4, "length"))
      v1 = v4;
    else
      v1 = 0;
    v2 = v1;

    _PKSetGlobalValueForKey(v2, CFSTR("PKOverrideDeviceNameKey"));
    v3 = v2;
  }
  else
  {
    v3 = v4;
  }

}

uint64_t PKForceNewInstallmentDashboardModule()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceNewInstallmentDashboardModuleKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetForceNewInstallmentDashboardModule(int a1)
{
  void *v2;
  id v3;

  if (os_variant_has_internal_ui())
  {
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
    v3 = v2;
    _PKSetGlobalValueForKey(v2, CFSTR("PKForceNewInstallmentDashboardModuleKey"));

  }
}

uint64_t PKForceNewInstallmentBillPaymentScreen()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceNewInstallmentBillPaymentScreenKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetForceNewInstallmentBillPaymentScreen(int a1)
{
  void *v2;
  id v3;

  if (os_variant_has_internal_ui())
  {
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
    v3 = v2;
    _PKSetGlobalValueForKey(v2, CFSTR("PKForceNewInstallmentBillPaymentScreenKey"));

  }
}

id PKForceAccountDueDateNumberDaysFromNow()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKSetForceAccountDueDateNumberDaysFromNowKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKSetForceAccountDueDateNumberDaysFromNow(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKSetForceAccountDueDateNumberDaysFromNowKey"));

}

void PKSetNumberInstallmentDemoPayments(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKNumberInstallmentDemoPaymentsKey"));

}

id PKNumberInstallmentDemoPayments()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKNumberInstallmentDemoPaymentsKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

BOOL PKDoubleClickAllowed()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKDoubleClickAllowed"), (CFStringRef)*MEMORY[0x1E0C9B228], &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

void PKSetDoubleClickAllowed(uint64_t a1)
{
  PKPaymentService *v2;

  if (PKRunningInPassd())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v2 = (PKPaymentService *)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v2, CFSTR("PKDoubleClickAllowed"));
  }
  else
  {
    v2 = -[PKPaymentService initWithDelegate:]([PKPaymentService alloc], "initWithDelegate:", 0);
    -[PKPaymentService setDoubleClickAllowed:](v2, "setDoubleClickAllowed:", a1);
  }

}

BOOL PKHasSeenApplePayEducation()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHasSeenApplePayEducationKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

void PKSetHasSeenApplePayEducation(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKHasSeenApplePayEducationKey"), v1, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

BOOL PKHandoffPaymentsDisabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHandoffPaymentsDisabled"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetHandoffPaymentsDisabled(int a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v2 = v1;
  _PKSetGlobalValueForKey(v1, CFSTR("PKHandoffPaymentsDisabled"));

}

BOOL PKHidePayLaterOptions()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHidePayLaterOptionsKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetHidePayLaterOptions(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(0xEuLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Updating the hide pay later option to %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKHidePayLaterOptionsKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKHideCardBenefitPayLater()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHideCardBenefitPayLaterKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetHideCardBenefitPayLater(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Updating the hide card benefit pay later option to %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKHideCardBenefitPayLaterKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKHideCardBenefitRewards()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHideCardBenefitRewardsKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetHideCardBenefitRewards(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Updating the hide card benefit rewards option to %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKHideCardBenefitRewardsKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKHasSeenCardBenefitRewardsExplanationScreen()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHasSeenCardBenefitRewardsExplanationScreenKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSetHasSeenCardBenefitRewardsExplanationScreen(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Updating the has seen card benefit rewards explanation screen to %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKHasSeenCardBenefitRewardsExplanationScreenKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKHasSeenPayLaterRegionUnsupportedAlert()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKHasSeenPayLaterRegionUnsupportedKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetHasSeenPayLaterRegionUnsupportedAlert(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKHasSeenPayLaterRegionUnsupportedKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKShouldSeePayLaterEnablementAlert()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKShouldSeePayLaterEnablementAlert"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetShouldSeePayLaterEnablementAlert(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKShouldSeePayLaterEnablementAlert"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

uint64_t PKForceHandoffPayment()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceHandoffPayment"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

BOOL PKOrderManagementDisabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKOrderManagementDisabled"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetOrderManagementDisabled(int a1)
{
  NSObject *v2;
  const __CFString *v3;
  void *v4;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(0);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if (a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Changing order management disablement to %@", (uint8_t *)&v5, 0xCu);
  }

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  _PKSetGlobalValueForKey(v4, CFSTR("PKOrderManagementDisabled"));

}

BOOL PKOrderManagementNotificationsDisabled()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKOrderManagementNotificationsDisabled"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSetOrderManagementNotificationsDisabled(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(0);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Changing order management notifications disablement to %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKOrderManagementNotificationsDisabled"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

void PKSetExpiredPassesDisabledByUser(uint64_t a1)
{
  unsigned int v1;
  void *v2;
  void *v3;
  id v4;
  PKKeychainItemWrapper *v5;
  NSObject *v6;
  id v7;
  uint8_t buf[4];
  unint64_t v9;
  uint64_t v10;

  v1 = a1;
  v10 = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = 0;
  objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, &v7);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v7;
  if (v4)
  {
    PKLogFacilityTypeGetObject(0);
    v5 = (PKKeychainItemWrapper *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v5->super, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v9 = (unint64_t)v4;
      _os_log_impl(&dword_18FC92000, &v5->super, OS_LOG_TYPE_DEFAULT, "Error writing expired passes settings to keychain: %@", buf, 0xCu);
    }
  }
  else
  {
    v5 = -[PKKeychainItemWrapper initWithIdentifier:accessGroup:serviceName:type:invisible:]([PKKeychainItemWrapper alloc], "initWithIdentifier:accessGroup:serviceName:type:invisible:", CFSTR("PKExpiredPassesDisabledKeychainKey"), CFSTR("com.apple.passd"), CFSTR("com.apple.passd.expired-passes"), 1, 0);
    -[PKKeychainItemWrapper setLabel:](v5, "setLabel:", CFSTR("com.apple.passd.expired-passes"));
    -[PKKeychainItemWrapper setObject:forKey:](v5, "setObject:forKey:", v3, *MEMORY[0x1E0CD70D8]);
    PKLogFacilityTypeGetObject(0);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v9 = v1;
      _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "Wrote expired passes settings to keychain with value PKExpiredPassesDisabledByUser: %ld", buf, 0xCu);
    }

  }
}

id PKFakeCardholderName()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeCardholderNameKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKFakeTransactionMerchant()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeTransactionMerchantKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKFakeTransactionLocality()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeTransactionLocalityKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKFakeTransactionAdministrativeArea()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeTransactionAdministrativeAreaKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKFakeTransactionCurrencyCode()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeTransactionCurrencyCodeKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKFakeTransactionAmount()
{
  void *v0;
  void *v1;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKFakeTransactionAmountKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v0)
    {
      objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", v0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v1 = 0;
    }

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void PKDisableAutomaticRegistration(uint64_t a1)
{
  id v2;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKWalletShouldAutomaticallyRegisterKey"), v2, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

BOOL PKAutomaticRegistrationDisabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKWalletShouldAutomaticallyRegisterKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

void PKDisableCloudKitEnvironmentChangeHandling(uint64_t a1)
{
  id v2;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v2 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKDisableCloudKitEnvironmentChangeHandlingKey"), v2, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

BOOL PKIsCloudKitEnvironmentChangeHandlingDisabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableCloudKitEnvironmentChangeHandlingKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKHideAddCardInOsloChooseCardsScreen()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKHideAddCardInOsloChooseCardsScreenKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetPeerPaymentServiceOverrideURL(void *a1)
{
  id value;

  value = a1;
  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    CFPreferencesSetAppValue(CFSTR("PKPeerPaymentServiceURL"), value, (CFStringRef)*MEMORY[0x1E0C9B228]);
  }

}

id PKPeerPaymentServiceForceTermsURL()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (os_variant_has_internal_ui())
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentForceTermsURL"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  else
    v0 = 0;
  if (objc_msgSend(v0, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

uint64_t PKEnableMerchantReprocessingLogging()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKEnableMerchantReprocessingLogging"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

id PKApplyServiceOverrideURL()
{
  void *v0;
  void *v1;

  if (os_variant_has_internal_ui())
  {
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKApplyServiceOverrideURL"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v0)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v1 = 0;
    }

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void PKSetApplyServiceOverrideURL(void *a1)
{
  id value;

  value = a1;
  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    CFPreferencesSetAppValue(CFSTR("PKApplyServiceOverrideURL"), value, (CFStringRef)*MEMORY[0x1E0C9B228]);
  }

}

id PKAccountServiceOverrideURL()
{
  void *v0;
  void *v1;

  if (os_variant_has_internal_ui())
  {
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKAccountServiceOverrideURL"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v0)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v1 = 0;
    }

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void PKSetAccountServiceOverrideURL(void *a1)
{
  id value;

  value = a1;
  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    CFPreferencesSetAppValue(CFSTR("PKAccountServiceOverrideURL"), value, (CFStringRef)*MEMORY[0x1E0C9B228]);
  }

}

id PKDiscoveryManifestOverrideURL()
{
  void *v0;
  void *v1;

  if (os_variant_has_internal_ui())
  {
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKDiscoveryManifestOverrideURL"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    if (v0)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v1 = 0;
    }

  }
  else
  {
    v1 = 0;
  }
  return v1;
}

void PKSetDiscoveryManifestOverrideURL(void *a1)
{
  void *v1;
  id v2;

  v2 = a1;
  if (os_variant_has_internal_ui())
  {
    if (objc_msgSend(v2, "length"))
    {
      v1 = v2;
    }
    else
    {

      v1 = 0;
    }
    v2 = v1;
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    {
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
      v1 = v2;
    }
    CFPreferencesSetAppValue(CFSTR("PKDiscoveryManifestOverrideURL"), v1, (CFStringRef)*MEMORY[0x1E0C9B228]);
  }

}

uint64_t PKIsUserPropertyOverrideEnabled()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    v1 = (void *)CFPreferencesCopyAppValue(CFSTR("PKIsUserPropertyOverrideEnabledKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    v2 = objc_msgSend(v1, "BOOLValue");

    return v2;
  }
  return result;
}

uint64_t PKIsAPNSDevelopmentEnvironmentEnabled()
{
  uint64_t result;
  void *v1;
  uint64_t v2;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    v1 = (void *)CFPreferencesCopyAppValue(CFSTR("PKIsAPNSDevelopmentEnvironmentEnabled"), CFSTR("com.apple.stockholm"));
    v2 = objc_msgSend(v1, "BOOLValue");

    return v2;
  }
  return result;
}

id PKCIPInputFile()
{
  void *v0;

  if (os_variant_has_internal_ui())
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKCIPInputFile"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  else
    v0 = 0;
  return v0;
}

void PKSetCIPInputFile(void *a1)
{
  id value;

  value = a1;
  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    CFPreferencesSetAppValue(CFSTR("PKCIPInputFile"), value, (CFStringRef)*MEMORY[0x1E0C9B228]);
  }

}

uint64_t PKCIPSaveImages()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKCIPSaveImages"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKSetCIPSaveImages(int a1)
{
  void *v2;
  uint64_t v3;
  id v4;
  const void *v5;
  id v6;

  if (os_variant_has_internal_ui())
  {
    v2 = (void *)MEMORY[0x1E0C9AAB0];
    if (!a1)
      v2 = 0;
    v3 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
    v4 = v2;
    v6 = v4;
    if (v3 == -1)
    {
      v5 = v4;
    }
    else
    {
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
      v5 = v6;
    }
    CFPreferencesSetAppValue(CFSTR("PKCIPSaveImages"), v5, (CFStringRef)*MEMORY[0x1E0C9B228]);

  }
}

uint64_t PKDisableSURFBubbleMotion()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableSURFBubbleMotion"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKEnableSURFLiveBubbleDebugMode()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKEnableSURFLiveBubbleDebugMode"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKPeerPaymentSkipFamilySharingVersionCheck()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPeerPaymentSkipFamilySharingVersionCheck"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKPeerPaymentDisableRecurringDateRestrictions()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPeerPaymentDisableRecurringDateRestrictionsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKPeerPaymentDisableInvalidQuoteEnforcement()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPeerPaymentDisableInvalidQuoteEnforcementKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKAnalyticsSessionEnabled()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKEnableAnalyticsSessionKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

BOOL PKCloudSyncingToggleDidUpgrade()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKCloudSyncingToggleDidUpgradeKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKSetCloudSyncingToggleDidUpgrade(int a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  const void *v4;
  id v5;

  v1 = (void *)MEMORY[0x1E0C9AAB0];
  if (!a1)
    v1 = 0;
  v2 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
  v3 = v1;
  v5 = v3;
  if (v2 == -1)
  {
    v4 = v3;
  }
  else
  {
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v4 = v5;
  }
  CFPreferencesSetAppValue(CFSTR("PKCloudSyncingToggleDidUpgradeKey"), v4, CFSTR("com.apple.Wallet"));

}

uint64_t PKForceCloudStoreInitializationFailure()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceCloudStoreInitializationFailureKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKSetDisableContainerChangeEvents(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKDisableContainerChangeEventsKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKDisableContainerChangeEvents()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKDisableContainerChangeEventsKey"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

uint64_t PKUserCanResetApplePayManateeView()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKUserCanResetApplePayManateeViewKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

BOOL PKUserHasDisabledPeerPayment()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKUserHasDisabledPeerPaymentKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
}

void PKSetUserHasDisabledPeerPayment(int a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v2 = v1;
  _PKSetGlobalValueForKey(v1, CFSTR("PKUserHasDisabledPeerPaymentKey"));

}

id PKRequestIDValue()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKRequestIDValueKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id PKRequestFireWireIDValue()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKRequestFireWireIDValueKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

uint64_t PKBroadwayAllowOverpaymentViaKeypadKey()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKBroadwayAllowOverpaymentViaKeypadKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetPaymentSetupProductState(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKPaymentSetupProductStateOverrideKey"));

}

id PKGetPaymentSetupProductState()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPaymentSetupProductStateOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

uint64_t PKDiscoveryForceIgnoreCEOCards()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDiscoveryForceIgnoreCEOCards"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKToggleDiscoveryForceIgnoreCEOCards()
{
  id v0;

  if (os_variant_has_internal_ui())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", PKDiscoveryForceIgnoreCEOCards() ^ 1);
    v0 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v0, CFSTR("PKDiscoveryForceIgnoreCEOCards"));

  }
}

BOOL PKDiscoveryShouldProcessLocaleChange()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDiscoveryShouldProcessLocaleChangeKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKSetDiscoveryShouldProcessLocaleChange(int a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v2 = v1;
  CFPreferencesSetAppValue(CFSTR("PKDiscoveryShouldProcessLocaleChangeKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKSearchDetailedLoggingEnabledInWallet()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSearchDetailedLoggingEnabledInWalletKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

CFIndex PKBroadwaySummaryType()
{
  CFIndex AppIntegerValue;
  _BOOL8 v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  AppIntegerValue = CFPreferencesGetAppIntegerValue(CFSTR("PKBroadwaySummaryTypeKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    return AppIntegerValue;
  v1 = CFPreferencesGetAppBooleanValue(CFSTR("PKBroadwayUseMonthlySummaryKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  PKSetBroadwaySummaryType(v1);
  return v1;
}

void PKSetBroadwaySummaryType(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKBroadwaySummaryTypeKey"), v1, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

uint64_t PKPKBroadwayBypassIDSOSCheck()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKBroadwayBypassIDSOSCheckKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKEnforceUpgradedPasscodePolicyForAllRegions()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKEnforceUpgradedPasscodePolicyForAllRegions"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

BOOL PKBarcodePassWelcomeCardDismissed()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDiscoveryDismissBarcodeWelcomeCardKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

void PKSetBarcodePassWelcomeCardDismissed(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKDiscoveryDismissBarcodeWelcomeCardKey"), v1, CFSTR("com.apple.stockholm"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

}

uint64_t PKTransitDumpStates()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKTransitDumpStates"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

id PKNumericSuggestionLastInputForPassSerialNumber(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;

  v1 = a1;
  _PKNumericSuggestionLastInput();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "objectForKey:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

CFPropertyListRef _PKNumericSuggestionLastInput()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("PKNumericSuggestionLastInputKey"), CFSTR("com.apple.Wallet"));
}

void PKSetNumericSuggestionLastInputWithPassSerialNumber(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v3 = a2;
  _PKNumericSuggestionLastInput();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");

  if (!v5)
  {
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v3)
  {
LABEL_3:
    objc_msgSend(v5, "setObject:forKey:", v6, v3);
    CFPreferencesSetAppValue(CFSTR("PKNumericSuggestionLastInputKey"), v5, CFSTR("com.apple.Wallet"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  }
LABEL_4:

}

BOOL PKDisableRateLimiting()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDisableRateLimiting"), CFSTR("com.apple.passd"), 0) == 1;
}

BOOL PKNFCPassKeyOptional()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKNFCPassKeyOptional"), CFSTR("com.apple.passd"), 0) == 1;
}

id PKLocalBrokerURL(int a1)
{
  NSObject *v2;
  _BOOL4 v3;
  const __CFString *v4;
  const char *v5;
  int v7;
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (a1)
  {
    v4 = CFSTR("https://smp-device-qa.apple.com:1443/broker");
    if (v3)
    {
      v7 = 138412290;
      v8 = CFSTR("https://smp-device-qa.apple.com:1443/broker");
      v5 = "*** Using hardcoded QA broker URL ***: %@";
LABEL_6:
      _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v7, 0xCu);
    }
  }
  else
  {
    v4 = CFSTR("https://smp-device.apple.com/broker");
    if (v3)
    {
      v7 = 138412290;
      v8 = CFSTR("https://smp-device.apple.com/broker");
      v5 = "*** Using hardcoded PROD broker URL ***: %@";
      goto LABEL_6;
    }
  }

  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

uint64_t PKFutureEnabled()
{
  if (qword_1ECF22608 != -1)
    dispatch_once(&qword_1ECF22608, &__block_literal_global_120);
  return _MergedGlobals_239;
}

uint64_t PKReaderModeDebugUIEnabled()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKReaderModeDebugUI"), CFSTR("com.apple.stockholm"), 0) != 0;
  }
  return result;
}

uint64_t PKProvisioningSecurityEnhancementsDisableDeviceScore()
{
  uint64_t result;

  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
  {
    if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKProvisioningSecurityEnhancementsDisableDeviceScore"), CFSTR("com.apple.stockholm"), 0) != 0;
  }
  return result;
}

uint64_t PKForcePeerPaymentDeviceScoreVersion()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPeerPaymentForceDeviceScoreVersionKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKGetPeerPaymentDeviceScoreVersion()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentDeviceScoreVersionKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  v1 = objc_msgSend(v0, "integerValue");

  return v1;
}

id PKGetCustomHeaders()
{
  void *v0;

  if (os_variant_allows_internal_security_policies())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKCustomHeadersKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKAddCustomHeader(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a1;
  v3 = a2;
  if (os_variant_allows_internal_security_policies()
    && objc_msgSend(v9, "length")
    && objc_msgSend(v3, "length"))
  {
    PKGetCustomHeaders();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
      v6 = (id)objc_msgSend(v4, "mutableCopy");
    else
      v6 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v7 = v6;
    objc_msgSend(v6, "setObject:forKey:", v3, v9);
    v8 = (void *)objc_msgSend(v7, "copy");
    _PKSetGlobalValueForKey(v8, CFSTR("PKCustomHeadersKey"));

  }
}

void PKRemoveCustomHeader(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = a1;
  if (os_variant_allows_internal_security_policies() && objc_msgSend(v4, "length"))
  {
    PKGetCustomHeaders();
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)objc_msgSend(v1, "mutableCopy");
    objc_msgSend(v2, "removeObjectForKey:", v4);
    v3 = (void *)objc_msgSend(v2, "copy");
    _PKSetGlobalValueForKey(v3, CFSTR("PKCustomHeadersKey"));

  }
}

id PKTrustedServiceManagerURL()
{
  void *v0;
  void *v1;

  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("TrustedServiceManagerURL"), CFSTR("com.apple.stockholm"));
  if (v0)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

id PKPaymentServicesURL()
{
  void *v0;
  void *v1;

  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PaymentServicesURL"), CFSTR("com.apple.stockholm"));
  if (v0)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

void _PKSetEnvironmentValueForKey(void *a1, void *a2)
{
  id v3;
  __CFString *v4;
  NSObject *v5;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint8_t v7[16];

  v3 = a1;
  v4 = a2;
  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  CFPreferencesSetAppValue(v4, v3, CFSTR("com.apple.stockholm"));
  if (!CFPreferencesSynchronize(CFSTR("com.apple.stockholm"), (CFStringRef)*MEMORY[0x1E0C9B240], (CFStringRef)*MEMORY[0x1E0C9B230]))
  {
    PKLogFacilityTypeGetObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Error: Could not synchronize stockholm domain", v7, 2u);
    }

  }
  _CFPreferencesSetBackupDisabled();
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.stockholm.preferenceschanged"), 0, 0, 1u);

}

CFPropertyListRef PKPassDetailsLastSelectedSegment()
{
  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKPassDetailsLastSelectedSegmentKey"), CFSTR("com.apple.stockholm"));
}

void PKSetPassDetailsLastSelectedSegment(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("PKPassDetailsLastSelectedSegmentKey"));
}

void PKSetNFRemoteAdminV2Enabled(int a1)
{
  void *v2;
  id v3;

  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
  {
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
    if (a1)
      goto LABEL_3;
LABEL_5:
    v2 = 0;
    goto LABEL_6;
  }
  if (!a1)
    goto LABEL_5;
LABEL_3:
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_6:
  v3 = v2;
  _PKSetEnvironmentValueForKey(v2, CFSTR("RemoteAdminV2"));

}

uint64_t PKMaxPaymentCards()
{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  uint8_t v5[16];

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("MaxPaymentCards"), CFSTR("com.apple.stockholm"));
  v1 = v0;
  if (v0)
  {
    v2 = objc_msgSend(v0, "unsignedIntegerValue");
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "Error: Unable to fetch max payment cards", v5, 2u);
    }

    v2 = 0;
  }

  return v2;
}

void PKSetMaxPaymentCards(uint64_t a1)
{
  id v1;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetEnvironmentValueForKey(v1, CFSTR("MaxPaymentCards"));

  }
  else
  {
    _PKSetEnvironmentValueForKey(0, CFSTR("MaxPaymentCards"));
  }
}

CFPropertyListRef PKStockholmEnvironmentDisplayName()
{
  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  return (id)CFPreferencesCopyAppValue(CFSTR("EnvironmentDisplayName"), CFSTR("com.apple.stockholm"));
}

void PKSetStockholmEnvironmentDisplayName(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("EnvironmentDisplayName"));
}

CFPropertyListRef PKStockholmEnvironmentName()
{
  if (_InstallStockholmPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallStockholmPreferencesObserverIfNecessary_onceToken, &__block_literal_global_719);
  return (id)CFPreferencesCopyAppValue(CFSTR("EnvironmentName"), CFSTR("com.apple.stockholm"));
}

void PKSetReaderModeDebugUIEnabled(char a1)
{
  id v1;

  if ((a1 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetEnvironmentValueForKey(v1, CFSTR("PKReaderModeDebugUI"));

  }
  else
  {
    _PKSetEnvironmentValueForKey(0, CFSTR("PKReaderModeDebugUI"));
  }
}

void PKSetStockholmEnvironmentName(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("EnvironmentName"));
}

uint64_t PKStockholmEnvironmentIsLikelyProduction()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  PKStockholmEnvironmentName();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  PKStockholmEnvironmentDisplayName();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "lowercaseString");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if ((objc_msgSend(v1, "containsString:", CFSTR("cert")) & 1) != 0
    || (objc_msgSend(v1, "containsString:", CFSTR("qa")) & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v4 = objc_msgSend(v3, "containsString:", CFSTR("sandbox")) ^ 1;
  }

  return v4;
}

void PKSetStockholmConfigURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("ConfigURL"));
}

void PKSetStockholmBrokerURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("BrokerURL"));
}

id PKStockholmBrokerURL()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("BrokerURL"), CFSTR("com.apple.stockholm"));
  if (objc_msgSend(v0, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

void PKSetOverrideInAppPaymentServicesURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("PKOverrideInAppPaymentServicesURL"));
}

id PKOverrideInAppPaymentServicesURL()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverrideInAppPaymentServicesURL"), CFSTR("com.apple.stockholm"));
  if (objc_msgSend(v0, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

void PKSetOverridePaymentOffersServiceURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("PKOverridePaymentOffersServiceURLKey"));
}

id PKOverridePaymentOffersServiceURL()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverridePaymentOffersServiceURLKey"), CFSTR("com.apple.stockholm"));
  if (objc_msgSend(v0, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

void PKSetProductsURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("PKProductsURLKey"));
}

id PKProductsURL()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKProductsURLKey"), CFSTR("com.apple.stockholm"));
  if (objc_msgSend(v0, "length"))
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

id PKMerchantServicesURL()
{
  __CFString *v0;
  const __CFString *v1;
  void *v2;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (__CFString *)CFPreferencesCopyAppValue(CFSTR("MerchantServicesURL"), CFSTR("com.apple.stockholm"));
  if (-[__CFString length](v0, "length"))
    v1 = v0;
  else
    v1 = CFSTR("https://smp-device.apple.com/merchantservices");
  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  return v2;
}

void PKSetMerchantServicesURL(void *a1)
{
  _PKSetEnvironmentValueForKey(a1, CFSTR("MerchantServicesURL"));
}

id PKHeroWatchSizeOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKHeroWatchSizeOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKSetHeroWatchSizeOverride(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKHeroWatchSizeOverrideKey"));

}

uint64_t PKContainerEnvironmentForContainerName(void *a1)
{
  id v1;
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  if (!os_variant_has_internal_ui())
    goto LABEL_11;
  PKCurrentCloudStoreApplePayContainerName();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "isEqualToString:", v2);

  if (!v3)
  {
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.passes")))
    {
      v4 = PKPassContainerEnvironment();
      goto LABEL_10;
    }
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.passes.sync")))
    {
      v4 = PKPassSyncContainerEnvironment();
      goto LABEL_10;
    }
    if (objc_msgSend(v1, "isEqualToString:", CFSTR("com.apple.passes.sync.secure")))
    {
      v4 = PKPassSyncSecureContainerEnvironment();
      goto LABEL_10;
    }
LABEL_11:
    v5 = 1;
    goto LABEL_12;
  }
  v4 = PKApplePayContainerEnvironment();
LABEL_10:
  v5 = v4;
LABEL_12:

  return v5;
}

id PKCurrentCloudStoreApplePayContainerName()
{
  void *v0;
  char v1;
  id *v2;

  if (!os_variant_has_internal_ui())
    goto LABEL_6;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKUseApplePayPrototypeContainerKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  v1 = objc_msgSend(v0, "BOOLValue");

  if ((v1 & 1) != 0)
    v2 = (id *)&PKCloudStoreApplePayPrototypeContainerName;
  else
LABEL_6:
    v2 = (id *)&PKCloudStoreApplePayContainerName;
  return *v2;
}

uint64_t PKApplePayContainerEnvironment()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKApplePayContainerEnvironmentKey"), CFSTR("com.apple.Wallet.public"));
  v1 = objc_msgSend(v0, "integerValue");
  if ((unint64_t)(v1 - 1) >= 2)
    v2 = 1;
  else
    v2 = v1;

  return v2;
}

uint64_t PKPassContainerEnvironment()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPassContainerEnvironmentKey"), CFSTR("com.apple.Wallet.public"));
  v1 = objc_msgSend(v0, "integerValue");
  if ((unint64_t)(v1 - 1) >= 2)
    v2 = 1;
  else
    v2 = v1;

  return v2;
}

uint64_t PKPassSyncContainerEnvironment()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPassSyncContainerEnvironmentKey"), CFSTR("com.apple.Wallet.public"));
  v1 = objc_msgSend(v0, "integerValue");
  if ((unint64_t)(v1 - 1) >= 2)
    v2 = 1;
  else
    v2 = v1;

  return v2;
}

uint64_t PKPassSyncSecureContainerEnvironment()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPassSyncSecureContainerEnvironmentKey"), CFSTR("com.apple.Wallet.public"));
  v1 = objc_msgSend(v0, "integerValue");
  if ((unint64_t)(v1 - 1) >= 2)
    v2 = 1;
  else
    v2 = v1;

  return v2;
}

void PKSetContainerEnvironmentForContainerName(void *a1, uint64_t a2)
{
  void *v3;
  char v4;
  __CFString *v5;
  void *v6;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v8;

  v8 = a1;
  if (os_variant_has_internal_ui())
  {
    PKCurrentCloudStoreApplePayContainerName();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v8, "isEqualToString:", v3);

    if ((v4 & 1) != 0)
    {
      v5 = CFSTR("PKApplePayContainerEnvironmentKey");
    }
    else if ((objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.passes")) & 1) != 0)
    {
      v5 = CFSTR("PKPassContainerEnvironmentKey");
    }
    else if ((objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.passes.sync")) & 1) != 0)
    {
      v5 = CFSTR("PKPassSyncContainerEnvironmentKey");
    }
    else
    {
      v5 = objc_msgSend(v8, "isEqualToString:", CFSTR("com.apple.passes.sync.secure"))
         ? CFSTR("PKPassSyncSecureContainerEnvironmentKey")
         : 0;
    }
    if (-[__CFString length](v5, "length"))
    {
      if ((unint64_t)(a2 - 1) > 1)
      {
        v6 = &unk_1E2C3EFE0;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
      }
      CFPreferencesSetAppValue(v5, v6, CFSTR("com.apple.Wallet.public"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet.public"));
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.Wallet.public.preferenceschanged"), 0, 0, 1u);

    }
  }

}

void PKSetFieldValueAddedServiceModeOverride(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKFieldValueAddedServiceModeOverrideKey"));

}

CFPropertyListRef PKKeychainVersion()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKKeychainVersionKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
}

void PKSetKeychainVersion(void *a1)
{
  _PKSetGlobalValueForKey(a1, CFSTR("PKKeychainVersionKey"));
}

void PKSetSecureElementAvailableFlags(uint64_t a1)
{
  const __CFString *v2;
  const __CFString *v3;
  const __CFString *v4;
  id v5;

  if (os_variant_has_internal_ui())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1);
    v5 = (id)objc_claimAutoreleasedReturnValue();
    v2 = (const __CFString *)*MEMORY[0x1E0C9B228];
    v3 = (const __CFString *)*MEMORY[0x1E0C9B260];
    v4 = (const __CFString *)*MEMORY[0x1E0C9B250];
    CFPreferencesSetValue(CFSTR("PKSecureElementAvailableFlagsByHostSome"), v5, (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
    CFPreferencesSynchronize(v2, v3, v4);

  }
}

uint64_t PKSecureElementAvailableFlags()
{
  void *v0;
  uint64_t v1;

  if (!os_variant_has_internal_ui())
    return 0;
  v0 = (void *)CFPreferencesCopyValue(CFSTR("PKSecureElementAvailableFlagsByHostSome"), (CFStringRef)*MEMORY[0x1E0C9B228], (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B250]);
  v1 = objc_msgSend(v0, "unsignedIntegerValue");

  return v1;
}

uint64_t PKDisplaysTestBarcodeCredential()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKDisplaysTestBarcodeCredentialKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKSetDisplaysTestBarcodeCredential(uint64_t a1)
{
  id v2;

  if (os_variant_has_internal_ui())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v2, CFSTR("PKDisplaysTestBarcodeCredentialKey"));

  }
}

uint64_t PKShowBarcodeForScreenshotAndBroadcasting()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowBarcodeForScreenshotAndBroadcastingKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

void PKSetShowBarcodeForScreenshotAndBroadcasting(uint64_t a1)
{
  id v2;

  if (os_variant_has_internal_ui())
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v2 = (id)objc_claimAutoreleasedReturnValue();
    _PKSetGlobalValueForKey(v2, CFSTR("PKShowBarcodeForScreenshotAndBroadcastingKey"));

  }
}

id PKClientHTTPHeaderOSPartOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    _PKGlobalStringValueForKey(CFSTR("PKClientHTTPHeaderOSPartOverride"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

id _PKGlobalStringValueForKey(void *a1)
{
  uint64_t v1;
  __CFString *v2;
  void *v3;
  void *v4;
  id v5;

  v1 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v3 = (void *)CFPreferencesCopyAppValue(v2, (CFStringRef)*MEMORY[0x1E0C9B228]);

  if (objc_msgSend(v3, "length"))
    v4 = v3;
  else
    v4 = 0;
  v5 = v4;

  return v5;
}

id PKDeviceInformationOverrideProductType()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    _PKGlobalStringValueForKey(CFSTR("PKDeviceInformationOverrideProductTypeKey"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKSetDeviceInformationOverrideProductType(void *a1)
{
  id v1;

  v1 = a1;
  if (os_variant_has_internal_ui())
    _PKSetGlobalValueForKey(v1, CFSTR("PKDeviceInformationOverrideProductTypeKey"));

}

id PKClientHTTPHeaderHardwarePlatformOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    _PKGlobalStringValueForKey(CFSTR("PKClientHTTPHeaderHardwarePlatformOverride"));
    v0 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

void PKSetPartnerIdentifierOverride(void *a1)
{
  _PKSetGlobalValueForKey(a1, CFSTR("PKPartnerIdentifierOverrideKey"));
}

id PKPartnerIdentifierOverride()
{
  void *v0;

  if (os_variant_has_internal_ui())
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPartnerIdentifierOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  }
  else
  {
    v0 = 0;
  }
  return v0;
}

CFIndex PKCredentialPairingPincodeLengthOverride()
{
  if (!os_variant_has_internal_ui())
    return 0;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppIntegerValue(CFSTR("PKCredentialPairingPincodeLengthOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0);
}

uint64_t PKPinCodeViewKeyboardOverride()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPinCodeViewKeyboardOverrideKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

CFPropertyListRef PKLastBackedUpDefaultPaymentPassSerialNumber()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKLastBackedUpDefaultPaymentPassSerialNumberKey"), CFSTR("com.apple.Wallet"));
}

uint64_t PKSetLastBackedUpDefaultPaymentPassSerialNumber(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PKLastBackedUpDefaultPaymentPassSerialNumberKey"), value, CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKLastBackupPassbookWasDeleted()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKLastBackupPassbookWasDeletedKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKSetLastBackupPassbookWasDeleted(int a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v2 = v1;
  CFPreferencesSetAppValue(CFSTR("PKLastBackupPassbookWasDeletedKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKPerformEagerTransitNotificationChecks()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKPerformEagerTransitNotificationChecksKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

void PKSetPerformEagerTransitNotificationChecks(int a1)
{
  void *v2;
  id v3;

  if (os_variant_has_internal_ui())
  {
    if (a1)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", 1);
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }
    v3 = v2;
    _PKSetGlobalValueForKey(v2, CFSTR("PKPerformEagerTransitNotificationChecksKey"));

  }
}

uint64_t PKForceEnableTransitServiceCheckIn()
{
  uint64_t result;

  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
  {
    if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
      dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceEnableTransitServiceCheckInKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  }
  return result;
}

uint64_t PKForceDefaultEmbeddedMarketStrings()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKForceDefaultEmbeddedMarketStringsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

uint64_t PKIgnoreOpenLoopExpressUpgradeLimits()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKIgnoreOpenLoopExpressUpgradeLimitsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

id PKOverrideMarketGeoExpressUpgradePromotionDuration()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (os_variant_has_internal_ui())
  {
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverrideMarketGeoExpressUpgradePromotionDurationKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    v1 = v0;
    if (v0 && objc_msgSend(v0, "length"))
    {
      v2 = (void *)MEMORY[0x1E0CB37E8];
      objc_msgSend(v1, "doubleValue");
      objc_msgSend(v2, "numberWithDouble:");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v3 = 0;
    }

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id PKOverrideMarketGeoExpressUpgradeHideDisableExpressModeAction()
{
  void *v0;
  void *v1;
  void *v2;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (os_variant_has_internal_ui())
  {
    v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverrideMarketGeoExpressUpgradeHideDisableExpressModeActionKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
    v1 = v0;
    if (v0 && objc_msgSend(v0, "length"))
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v1, "integerValue"));
      v2 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v2 = 0;
    }

  }
  else
  {
    v2 = 0;
  }
  return v2;
}

uint64_t PKAllowExpressRenotifyNotificationDefaultStrings()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKAllowExpressRenotifyNotificationDefaultStringsKey"), (CFStringRef)*MEMORY[0x1E0C9B228], 0) != 0;
  return result;
}

id PKOverrideMarketGeoRenotifyDCICampaignIdentifier()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (!os_variant_has_internal_ui())
    goto LABEL_7;
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverrideMarketGeoRenotifyDCICampaignIdentifierKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  v1 = v0;
  if (!v0 || !objc_msgSend(v0, "length"))
  {

LABEL_7:
    v1 = 0;
  }
  return v1;
}

id PKOverrideMarketGeoExpressOpenLoopNotificationIdentifier()
{
  void *v0;
  void *v1;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (!os_variant_has_internal_ui())
    goto LABEL_7;
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKOverrideMarketGeoExpressOpenLoopNotificationIdentifierKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
  v1 = v0;
  if (!v0 || !objc_msgSend(v0, "length"))
  {

LABEL_7:
    v1 = 0;
  }
  return v1;
}

void PKSetHasPromptedNotificationAuthorizationForContentType(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  _PKHasPromptedNotificationAuthorizationForContentTypeDictionary();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)objc_msgSend(v4, "mutableCopy");
  v6 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = v7;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  PKNotificationContentTypeToString(a1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "setObject:forKeyedSubscript:", v8, v9);

  v10 = (void *)objc_msgSend(v11, "copy");
  CFPreferencesSetAppValue(CFSTR("PKHasPromptedNotificationAuthorizationForContentTypeKey"), v10, CFSTR("com.apple.stockholm"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

uint64_t PKIncrementNotificationAuthorizationPromptCount()
{
  const void *v0;

  v0 = (const void *)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", CFPreferencesGetAppIntegerValue(CFSTR("PKNotificationAuthorizationPromptCountKey"), CFSTR("com.apple.stockholm"), 0)+ 1);
  CFPreferencesSetAppValue(CFSTR("PKNotificationAuthorizationPromptCountKey"), v0, CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

uint64_t PKSetNotificationAuthorizationPromptCount(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKNotificationAuthorizationPromptCountKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

void PKSetLastUserNotificationAuthorizationPromptDate(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PKLastUserNotificationAuthorizationPromptDateKey"), value, CFSTR("com.apple.stockholm"));
}

CFPropertyListRef PKLastViewedFrontOfCardDate()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("PKLastViewedFrontOfCardDateKey"), CFSTR("com.apple.Wallet"));
}

void PKSetLastViewedFrontOfCardDate(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PKLastViewedFrontOfCardDateKey"), value, CFSTR("com.apple.Wallet"));
}

CFPropertyListRef PKLastReviewPromptDate()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("PKLastReviewPromptDateKey"), CFSTR("com.apple.Wallet"));
}

void PKSetLastReviewPromptDate(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PKLastReviewPromptDateKey"), value, CFSTR("com.apple.Wallet"));
}

BOOL PKCardShouldShowVPANReissuedMessage(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKCardShowVPANReissuedMessageKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKCardSetShouldShowVPANReissuedMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKCardShowVPANReissuedMessageKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

CFPropertyListRef PKCardAltDSIDForVPANReissuedMessage()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("PKCardAltDSIDForVPANReissuedMessageKey"), CFSTR("com.apple.Wallet"));
}

uint64_t PKCardSetAltDSIDForVPANReissuedMessage(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PKCardAltDSIDForVPANReissuedMessageKey"), value, CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKAccountServiceIsNewAccountWithAccountIdentifier(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("isNewAccount"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetAccountServiceIsNewAccountWithAccountIdentifier(void *a1, uint64_t a2)
{
  void *v3;
  id v4;
  __CFString *v5;
  void *value;

  v3 = (void *)MEMORY[0x1E0CB37E8];
  v4 = a1;
  objc_msgSend(v3, "numberWithBool:", a2);
  value = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("isNewAccount"), v4);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();

  CFPreferencesSetAppValue(v5, value, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKFundingSourceIdsMigratedToSavings(uint64_t a1)
{
  __CFString *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKFundingSourceIdsMigratedToSavingsKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)CFPreferencesCopyAppValue(v1, CFSTR("com.apple.Wallet"));

  return v2;
}

void PKSetFundingSourceIdsMigratedToSavings(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  __CFString *v5;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKFundingSourceIdsMigratedToSavingsKey"), a1);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(v5, v4, CFSTR("com.apple.Wallet"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKCheckedForSavingsPresence()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKCheckedForSavingsPresenceKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSetCheckedForSavingsPresence(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKCheckedForSavingsPresenceKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKAccountServiceTransferPrefersBank()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKAccountServiceTransferPrefersBankKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSetAccountServiceTransferPrefersBank(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKAccountServiceTransferPrefersBankKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

id PKLastBankAccountIdentifierForAccountTransfer(uint64_t a1)
{
  __CFString *v1;
  void *v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKLastBankAccountIdentifierForAccountTransferKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = (void *)CFPreferencesCopyAppValue(v1, CFSTR("com.apple.Wallet"));

  return v2;
}

void PKSetLastBankAccountIdentifierForAccountTransfer(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  __CFString *v5;

  v3 = (void *)MEMORY[0x1E0CB3940];
  v4 = a2;
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKLastBankAccountIdentifierForAccountTransferKey"), a1);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(v5, v4, CFSTR("com.apple.Wallet"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

uint64_t PKExpressEducationHasDismissedMessage()
{
  int AppBooleanValue;
  uint64_t v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKExpressEducationHasDismissedMessageKey"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  v1 = 1;
  if (!AppBooleanValue)
    v1 = 2;
  if (keyExistsAndHasValidFormat)
    return v1;
  else
    return 0;
}

void PKExpressEducationSetHasDismissedMessage(void *a1)
{
  id v1;

  PKTriStateToStorageBool(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKExpressEducationHasDismissedMessageKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKTriStateToStorageBool(void *a1)
{
  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a1 == (void *)1);
    a1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return a1;
}

unint64_t PKIncrementPreArmTransactionOnExpressPassCount()
{
  unint64_t result;

  result = CFPreferencesGetAppIntegerValue(CFSTR("PKPreArmTransactionOnExpressPassCountKey"), CFSTR("com.apple.Wallet"), 0);
  if (result <= 2)
  {
    CFPreferencesSetAppValue(CFSTR("PKPreArmTransactionOnExpressPassCountKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", result + 1), CFSTR("com.apple.Wallet"));
    return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
  }
  return result;
}

CFIndex PKGetPreArmTransactionOnExpressPassCount()
{
  return CFPreferencesGetAppIntegerValue(CFSTR("PKPreArmTransactionOnExpressPassCountKey"), CFSTR("com.apple.Wallet"), 0);
}

uint64_t PKSetPreArmTransactionOnExpressPassCount(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKPreArmTransactionOnExpressPassCountKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKSavingsHasDismissedEducationInterestMessage()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSavingsHasDismissedEducationInterestMessageKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSavingsSetHasDismissedEducationInterestMessage(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKSavingsHasDismissedEducationInterestMessageKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKSavingsHasDismissedAddBeneficiaryMessage(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedAddBeneficiaryMessageKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSavingsSetHasDismissedAddBeneficiaryMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedAddBeneficiaryMessageKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKSavingsHasDismissedClosedAccountMessage()
{
  int AppBooleanValue;
  uint64_t v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKAccountHasDismissedClosedAccountMessageKey"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  v1 = 1;
  if (!AppBooleanValue)
    v1 = 2;
  if (keyExistsAndHasValidFormat)
    return v1;
  else
    return 0;
}

void PKSavingsSetHasDismissedClosedAccountMessage(void *a1)
{
  id v1;

  PKTriStateToStorageBool(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKAccountHasDismissedClosedAccountMessageKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKSavingsHasDismissedPendingApplicationMessage()
{
  int AppBooleanValue;
  uint64_t v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKAccountHasDismissedPendingApplicationMessageKey"), CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat);
  v1 = 1;
  if (!AppBooleanValue)
    v1 = 2;
  if (keyExistsAndHasValidFormat)
    return v1;
  else
    return 0;
}

void PKSavingsSetHasDismissedPendingApplicationMessage(void *a1)
{
  id v1;

  PKTriStateToStorageBool(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PKAccountHasDismissedPendingApplicationMessageKey"), v1, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKSavingsPreviousAPYForUpdateMessage()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKSavingsPreviousAPYForUpdateMessageKey"), CFSTR("com.apple.stockholm"));
  v1 = v0;
  if (v0)
  {
    PKPercentageStorageIntegerToDecimal(objc_msgSend(v0, "integerValue"));
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void PKSavingsSetPreviousAPYForUpdateMessage(void *a1)
{
  void *v1;
  id v2;

  if (a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", PKPercentageDecimalToStorageInteger(a1));
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }
  v2 = v1;
  CFPreferencesSetAppValue(CFSTR("PKSavingsPreviousAPYForUpdateMessageKey"), v1, CFSTR("com.apple.stockholm"));

}

BOOL PKSavingsHideCashTransferMessage()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSavingsHideCashTransferMessageKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSavingsSetHideCashTransferMessage(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKSavingsHideCashTransferMessageKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKSavingsHasDismissedFixRewardsMessage()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSavingsHasDismissedFixRewardsMessageKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSavingsSetHasDismissedFixRewardsMessage(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKSavingsHasDismissedFixRewardsMessageKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

uint64_t PKSavingsHasDismissedFDICMessage(void *a1)
{
  id v1;
  __CFString *v2;
  uint64_t v3;
  int AppBooleanValue;
  Boolean keyExistsAndHasValidFormat;
  Boolean v7;

  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedFDICMessage"), v1);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(v2, CFSTR("com.apple.Wallet"), &keyExistsAndHasValidFormat))
    v3 = 1;
  else
    v3 = 2;
  if (!keyExistsAndHasValidFormat)
  {
    v7 = 0;
    AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKSavingsHasDismissedFDICMessage"), CFSTR("com.apple.stockholm"), &v7);
    if (v7)
    {
      if (AppBooleanValue)
        v3 = 1;
      else
        v3 = 2;
      PKSavingsSetHasDismissedFDICMessage((uint64_t)v1, AppBooleanValue != 0);
      CFPreferencesSetAppValue(CFSTR("PKSavingsHasDismissedFDICMessage"), 0, CFSTR("com.apple.stockholm"));
      CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
    }
    else
    {
      v3 = 0;
    }
  }

  return v3;
}

void PKSavingsSetHasDismissedFDICMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedFDICMessage"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKSavingsHasDismissedAppleCardBankVerificationMessage(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedAppleCardBankVerificationMessageKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetSavingsHasDismissedAppleCardBankVerificationMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedAppleCardBankVerificationMessageKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKSavingsHasDismissedBankVerificationExpirationMessage(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedBankVerificationExpirationMessageKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetSavingsHasDismissedBankVerificationExpirationMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKSavingsHasDismissedBankVerificationExpirationMessageKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKAppleCardPhysicalCardExpiringSoonMessagingStartDate(uint64_t a1, uint64_t a2)
{
  void *v2;
  __CFString *v3;

  v2 = 0;
  if (a1 && a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardPhysicalCardExpiringSoonMessagingStartDateKey"), a1, a2);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)CFPreferencesCopyAppValue(v3, CFSTR("com.apple.Wallet"));

  }
  return v2;
}

void PKAppleCardSetPhysicalCardExpiringSoonMessagingStartDate(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  __CFString *v7;

  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = a3;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardPhysicalCardExpiringSoonMessagingStartDateKey"), a1, a2);
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(v7, v6, CFSTR("com.apple.Wallet"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

id PKAppleCardPhysicalCardExpiredMessagingStartDate(uint64_t a1, uint64_t a2)
{
  void *v2;
  __CFString *v3;

  v2 = 0;
  if (a1 && a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardPhysicalCardExpiredMessagingStartDateKey"), a1, a2);
    v3 = (__CFString *)objc_claimAutoreleasedReturnValue();
    v2 = (void *)CFPreferencesCopyAppValue(v3, CFSTR("com.apple.Wallet"));

  }
  return v2;
}

void PKAppleCardSetPhysicalCardExpiredMessagingStartDate(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  __CFString *v7;

  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = a3;
  objc_msgSend(v5, "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardPhysicalCardExpiredMessagingStartDateKey"), a1, a2);
  v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(v7, v6, CFSTR("com.apple.Wallet"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

void PKAppleCardSetHasDismissedPhysicalCardExpiringSoonMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiringSoonMessageKey"), a1, a2);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKAppleCardHasDismissedPhysicalCardExpiringSoonMessage(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  _BOOL8 v3;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiringSoonMessageKey"), a1, a2);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = CFPreferencesGetAppBooleanValue(v2, CFSTR("com.apple.Wallet"), 0) != 0;

  return v3;
}

void PKAppleCardSetHasDismissedPhysicalCardExpiredMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiredMessage"), a1, a2);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKAppleCardHasDismissedPhysicalCardExpiredMessage(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  _BOOL8 v3;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiredMessage"), a1, a2);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = CFPreferencesGetAppBooleanValue(v2, CFSTR("com.apple.Wallet"), 0) != 0;

  return v3;
}

uint64_t PKAppleCardSetDismissedBroadwayDiscoverabilityMessage(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("DismissedBroadwayDiscoverability"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKAppleCardDismissedBroadwayDiscoverabilityMessage()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("DismissedBroadwayDiscoverability"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKAppleCardSetHasDismissedPhysicalCardExpiredCardNumbersMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiredCardNumbersMessage"), a1, a2);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a3), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKAppleCardHasDismissedPhysicalCardExpiredCardNumbersMessage(uint64_t a1, uint64_t a2)
{
  __CFString *v2;
  _BOOL8 v3;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKAppleCardHasDismissedPhysicalCardExpiredCardNumbersMessage"), a1, a2);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = CFPreferencesGetAppBooleanValue(v2, CFSTR("com.apple.Wallet"), 0) != 0;

  return v3;
}

void PKAppleCardSetShouldShowVPANUpdatedMessage(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKAppleCardShowVirtualCardExpiredMessage"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKAppleCardShouldShowVPANUpdatedMessage(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKAppleCardShowVirtualCardExpiredMessage"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

uint64_t PKIdentityHasDismissedFirstTimeUseEducationMessage()
{
  int AppBooleanValue;
  uint64_t v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKIdentityHasDismissedFirstTimeUseEducationMessageKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat);
  v1 = 1;
  if (!AppBooleanValue)
    v1 = 2;
  if (keyExistsAndHasValidFormat)
    return v1;
  else
    return 0;
}

uint64_t PKIdentitySetHasDismissedFirstTimeUseEducationMessageKey(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKIdentityHasDismissedFirstTimeUseEducationMessageKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

uint64_t PKPeerPaymentRecurringPaymentHasDismissedMessageForMessageIdentifier(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (id)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentDismissedMessageIdentifiersKey"), CFSTR("com.apple.Wallet"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v8;
    while (2)
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v8 != v4)
          objc_enumerationMutation(v2);
        if ((objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * i), "isEqualToString:", v1, (_QWORD)v7) & 1) != 0)
        {
          v3 = 1;
          goto LABEL_11;
        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_11:

  return v3;
}

void PKPeerPaymentRecurringPaymentAddDismissedMessageForMessageIdentifier(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[2];

  v6[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentDismissedMessageIdentifiersKey"), CFSTR("com.apple.Wallet"));
  v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, "arrayByAddingObject:", v1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6[0] = v1;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 1);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v5 = v4;
  CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentDismissedMessageIdentifiersKey"), v4, CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKPeerPaymentRecurringPaymentRemoveAllDismissedMessageIdentifiers()
{
  CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentDismissedMessageIdentifiersKey"), 0, CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKAppleCardAutopayPromptPresented()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKAutopayPromptPresented"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKAppleCardSetAutopayPromptPresented(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKAutopayPromptPresented"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

id PKLastFraudEventDateForAccountIdentifier(void *a1, uint64_t a2)
{
  __CFString *v2;
  void *v3;

  PKKeyForEventReportWithAccountIdentifier(a1, a2);
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v3 = (void *)CFPreferencesCopyAppValue(v2, CFSTR("com.apple.stockholm"));

  return v3;
}

id PKKeyForEventReportWithAccountIdentifier(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a1;
  PKAccountFraudEventToString(a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@-%@"), CFSTR("PKLastFraudEventReportDateKey"), v4, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void PKSetLastFraudEventDateForAccountIdentifier(void *a1, uint64_t a2, void *a3)
{
  id v5;
  __CFString *v6;

  v5 = a3;
  PKKeyForEventReportWithAccountIdentifier(a1, a2);
  v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(v6, v5, CFSTR("com.apple.stockholm"));

  CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

BOOL PKHasDisabledAPYUpdateNotificationsForAccountIdentifier(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledAPYUpdateNotificationsKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetHasDisabledAPYUpdateNotificationsForAccountIdentifier(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledAPYUpdateNotificationsKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKHasDisabledInterestPaidNotificationsForAccountIdentifier(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledInterestPaidNotificationsKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetHasDisabledInterestPaidNotificationsForAccountIdentifier(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledInterestPaidNotificationsKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

BOOL PKHasDisabledTransactionsNotificationsForAccountIdentifier(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledTransactionsNotificationsKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetHasDisabledTransactionsNotificationsForAccountIdentifier(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDisabledTransactionsNotificationsKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

uint64_t PKV2SharingFlowEnabled()
{
  int AppBooleanValue;
  _BOOL8 v1;
  int v2;
  NSObject *v3;
  const __CFString *v4;
  Boolean keyExistsAndHasValidFormat;
  uint8_t buf[4];
  const __CFString *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKV2SharingFlowEnabledKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat);
  v1 = AppBooleanValue != 0;
  if (!keyExistsAndHasValidFormat)
    return 1;
  v2 = AppBooleanValue;
  PKLogFacilityTypeGetObject(0x20uLL);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = CFSTR("No");
    if (v2)
      v4 = CFSTR("Yes");
    *(_DWORD *)buf = 138412290;
    v8 = v4;
    _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "PKV2SharingFlowEnabled returning '%@' set on user default", buf, 0xCu);
  }

  return v1;
}

uint64_t PKSharingForceSilentAuth()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceSilentAuthKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKShowLocalPassShares()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKShowLocalPassSharesKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingUsePredefinedCapabilitySets()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUsePredefinedCapabilitySetsKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingAllowAdvancedCapabilitySelection()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingAllowAdvancedCapabilitySelectionKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

void PKSetSharingRelayServerOverrideURL(void *a1)
{
  void *v1;
  id v2;
  id v3;

  v2 = a1;
  if (objc_msgSend(v2, "length"))
  {
    v1 = v2;
  }
  else
  {

    v1 = 0;
  }
  v3 = v1;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
  {
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v1 = v3;
  }
  CFPreferencesSetAppValue(CFSTR("PKSharingRelayServerOverrideURLKey"), v1, CFSTR("com.apple.stockholm"));

}

id PKSharingRelayServerOverrideURL()
{
  void *v0;
  void *v1;

  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKSharingRelayServerOverrideURLKey"), CFSTR("com.apple.stockholm"));
  if (v0)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v1 = 0;
  }

  return v1;
}

BOOL PKSharingUseRelayServerForCar()
{
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (!os_variant_has_internal_ui())
    return 1;
  keyExistsAndHasValidFormat = 0;
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUseRelayServerForCarKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat)|| keyExistsAndHasValidFormat == 0;
}

BOOL PKSharingUseIMessageExtension()
{
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  if (!os_variant_has_internal_ui())
    return 1;
  keyExistsAndHasValidFormat = 0;
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUseIMessageExtensionKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat)|| keyExistsAndHasValidFormat == 0;
}

BOOL PKSharingUseCommonIMessageExtensionPayloadFormat()
{
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUseCommonIMessageExtensionPayloadFormatKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat)|| keyExistsAndHasValidFormat == 0;
}

uint64_t PKSharingCarKeyActivationOptionForceVEP()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingCarKeyActivationOptionForceVEPKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingCarKeyActivationOptionForcePinCode()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingCarKeyActivationOptionForcePinCodeKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingCarKeyActivationOptionForcePhysicalKey()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingCarKeyActivationOptionForcePhysicalKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingCarKeyProvisioningDisableActivationCodeTimeout()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingCarKeyProvisioningDisableActivationCodeTimeoutKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingDisableStatefulPushNotifications()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingDisableStatefulPushNotificationsKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingCarKeySkipSecondaryInvitation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingCarKeySkipSecondaryInvitationKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

CFPropertyListRef PKSharingRelayServerEnvironmentOverride()
{
  return (id)CFPreferencesCopyAppValue(CFSTR("PKSharingRelayServerEnvironmentOverrideKey"), CFSTR("com.apple.stockholm"));
}

uint64_t PKSharingSimulateCrossPlatformShare()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingSimulateCrossPlatformShareKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

BOOL PKSharingUseBulkRevokeAPI()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  keyExistsAndHasValidFormat = 0;
  if (!os_variant_has_internal_ui())
    return 1;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUseBulkRevokeAPIKey"), CFSTR("com.apple.stockholm"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 0;
  return !v1;
}

uint64_t PKSharingUseThirdPartyPushTopic()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingUseThirdPartyPushTopicKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterKMLStartSharingAcceptance()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterKMLStartSharingAcceptanceKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterKMLReturnsPPIDRequest()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterKMLReturnsPPIDRequestKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterBrokerReturnsVehicleManufacturerResponse()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterBrokerReturnsVehicleManufacturerResponseKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceEmptyVehicleManufacturerResponse()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceEmptyVehicleManufacturerResponseKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterKMLAcceptShare()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterKMLAcceptShareKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterKMLReturnsPreTrackRequest()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterKMLReturnsPreTrackRequestKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceErrorAfterBrokerReturnsRegisterCredentialResponse()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceErrorAfterBrokerReturnsRegisterCredentialResponseKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceNilVehicleDataInPreTrackRequest()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceNilVehicleDataInPreTrackRequestKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingForceNilPassURLInPreTrackResponse()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingForceNilPassURLInPreTrackResponseKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKSharingDelayAttestation()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKSharingDelayAttestationKey"), CFSTR("com.apple.stockholm"), 0) != 0;
  return result;
}

uint64_t PKBroadwayEnableDynamicCardInWallet()
{
  return 1;
}

uint64_t PKBroadwayEnableDynamicCardDuringPayment()
{
  return 1;
}

BOOL PKHasDismissedOrUsedAppleBalancePromotionWithIdentifier(uint64_t a1)
{
  __CFString *v1;
  _BOOL8 v2;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDismissedOrUsedAppleBalancePromotionKey"), a1);
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v2 = CFPreferencesGetAppBooleanValue(v1, CFSTR("com.apple.Wallet"), 0) != 0;

  return v2;
}

void PKSetHasDismissedOrUsedAppleBalancePromotionWithIdentifier(uint64_t a1, uint64_t a2)
{
  __CFString *key;

  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@-%@"), CFSTR("PKDismissedOrUsedAppleBalancePromotionKey"), a1);
  key = (__CFString *)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(key, (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2), CFSTR("com.apple.Wallet"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));

}

id PKPeerPaymentRecurringPaymentRecentMemoIcons()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  void *v9;
  void *v10;
  PKPeerPaymentRecurringPaymentMemo *v11;
  NSObject *v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint8_t buf[4];
  void *v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v0 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), CFSTR("com.apple.stockholm"));
  v1 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = v0;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  if (v3)
  {
    v5 = v3;
    v6 = *(_QWORD *)v17;
    *(_QWORD *)&v4 = 138412290;
    v14 = v4;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v2);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * i);
        objc_msgSend(v8, "objectAtIndexedSubscript:", 0, v14);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "objectAtIndexedSubscript:", 1);
        v10 = (void *)objc_claimAutoreleasedReturnValue();
        v11 = objc_alloc_init(PKPeerPaymentRecurringPaymentMemo);
        -[PKPeerPaymentRecurringPaymentMemo setEmoji:](v11, "setEmoji:", v9);
        v15 = 0;
        if (PKSemanticColorFromString(v10, &v15))
        {
          -[PKPeerPaymentRecurringPaymentMemo setColor:](v11, "setColor:", v15);
        }
        else
        {
          PKLogFacilityTypeGetObject(0xBuLL);
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = v14;
            v21 = v10;
            _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Failed to read color '%@'", buf, 0xCu);
          }

        }
        objc_msgSend(v1, "addObject:", v11);

      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
    }
    while (v5);
  }

  return v1;
}

void PKPeerPaymentAddRecurringPaymentRecentMemoIcon(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  _BYTE v27[128];
  _QWORD v28[2];
  uint8_t buf[4];
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), CFSTR("com.apple.stockholm"));
  objc_msgSend(v1, "emoji");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PKSemanticColorToString(objc_msgSend(v1, "color"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v21 = v1;
    v5 = __PKPeerPaymentAddRecurringPaymentRecentMemoIcon_block_invoke(v3, v4);
    v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v18 = v4;
    v19 = v3;
    v28[0] = v3;
    v28[1] = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v28, 2);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSObject addObject:](v6, "addObject:", v7);

    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = v2;
    v8 = v2;
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    if (v9)
    {
      v10 = v9;
      v11 = 0;
      v12 = *(_QWORD *)v23;
LABEL_4:
      v13 = 0;
      while (1)
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(v8);
        v14 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * v13);
        objc_msgSend(v14, "objectAtIndexedSubscript:", 0);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "objectAtIndexedSubscript:", 1);
        v16 = (void *)objc_claimAutoreleasedReturnValue();
        if (__PKPeerPaymentAddRecurringPaymentRecentMemoIcon_block_invoke(v15, v16) != v5)
        {
          v26[0] = v15;
          v26[1] = v16;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v26, 2);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject addObject:](v6, "addObject:", v17);

        }
        if (v11 + v13 == 19)
          break;
        if (v10 == ++v13)
        {
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
          v11 += v13;
          if (v10)
            goto LABEL_4;
          break;
        }
      }
    }

    CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), v6, CFSTR("com.apple.stockholm"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
    v2 = v20;
    v1 = v21;
    v4 = v18;
    v3 = v19;
  }
  else
  {
    PKLogFacilityTypeGetObject(0xBuLL);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v30 = objc_msgSend(v1, "color");
      _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "Unable to find a color matching %li", buf, 0xCu);
    }
  }

}

void PKPeerPaymentRemoveRecurringPaymentRecentMemoIcon(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), CFSTR("com.apple.stockholm"));
  PKSemanticColorToString(objc_msgSend(v1, "color"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v3)
  {
    objc_msgSend(v1, "emoji");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = __PKPeerPaymentRemoveRecurringPaymentRecentMemoIcon_block_invoke((uint64_t)v4, v4, v3);

    v8[0] = MEMORY[0x1E0C809B0];
    v8[1] = 3221225472;
    v8[2] = __PKPeerPaymentRemoveRecurringPaymentRecentMemoIcon_block_invoke_701;
    v8[3] = &unk_1E2AD1B88;
    v9 = &__block_literal_global_700;
    v10 = v5;
    objc_msgSend(v2, "pk_objectsPassingTest:", v8);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), v6, CFSTR("com.apple.stockholm"));
    CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));

  }
  else
  {
    PKLogFacilityTypeGetObject(0xBuLL);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v12 = objc_msgSend(v1, "color");
      _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "Unable to find a color matching %li", buf, 0xCu);
    }

  }
}

uint64_t PKPeerPaymentRemoveAllRecurringPaymentRecentMemoIcons()
{
  CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentRecentMemoIconsKey"), 0, CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

CFPropertyListRef PKPeerPaymentRecurringPaymentsLastUpdated()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKPeerPaymentRecurringPaymentsLastUpdatedKey"), (CFStringRef)*MEMORY[0x1E0C9B228]);
}

void PKPeerPaymentRecurringPaymentsSetLastUpdated(void *a1)
{
  _PKSetGlobalValueForKey(a1, CFSTR("PKPeerPaymentRecurringPaymentsLastUpdatedKey"));
}

BOOL PKPeerPaymentRecurringPaymentHasShownEducationMessage()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKPeerPaymentRecurringPaymentHasShownEducationMessageKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKPeerPaymentRecurringPaymentSetHasShownEducationMessage(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKPeerPaymentRecurringPaymentHasShownEducationMessageKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKDocumentDeliveryEnabled()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKDocumentDeliveryEnabled"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKRemoteNetworkPaymentDisableEntitlementCheck()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKRemoteNetworkPaymentEntitlementCheckDisabled"), CFSTR("com.apple.Wallet"), 0) != 0;
  return result;
}

void PKSetRemoteNetworkPaymentWebsocketURL(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = a1;
  v3 = v1;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
  {
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v1 = v3;
  }
  if (objc_msgSend(v1, "length"))
  {
    v2 = v3;
  }
  else
  {

    v2 = 0;
  }
  v4 = v2;
  CFPreferencesSetAppValue(CFSTR("PKRemoteNetworkPaymentWebsocketURL"), v2, CFSTR("com.apple.Wallet"));

}

id PKRemoteNetworkPaymentWebsocketURL(int a1, void *a2)
{
  __CFString *v3;
  __CFString *v4;
  NSObject *v5;
  void *v6;
  const __CFString *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  int v14;
  const __CFString *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  v4 = (__CFString *)CFPreferencesCopyAppValue(CFSTR("PKRemoteNetworkPaymentWebsocketURL"), CFSTR("com.apple.Wallet"));
  if (os_variant_has_internal_ui() && -[__CFString length](v4, "length"))
  {
    PKLogFacilityTypeGetObject(0x2DuLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v4;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Preferences: Using overriden Websocket URL: %@", (uint8_t *)&v14, 0xCu);
    }

    v6 = (void *)MEMORY[0x1E0C99E98];
    v7 = v4;
LABEL_16:
    objc_msgSend(v6, "URLWithString:", v7);
    v9 = objc_claimAutoreleasedReturnValue();
    goto LABEL_17;
  }
  if (v3)
  {
    PKLogFacilityTypeGetObject(0x2DuLL);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v3;
      _os_log_impl(&dword_18FC92000, v8, OS_LOG_TYPE_DEFAULT, "Preferences: Using config provided Websocket URL: %@", (uint8_t *)&v14, 0xCu);
    }

    v9 = -[__CFString copy](v3, "copy");
LABEL_17:
    v11 = (void *)v9;
    if (v9)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (a1)
  {
    PKLogFacilityTypeGetObject(0x2DuLL);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = CFSTR("wss://paymentrelayservice-device-qa1.apay.apple.com/web-pay/device");
      _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Preferences: Using hardcoded QA Websocket URL: %@", (uint8_t *)&v14, 0xCu);
    }

    v6 = (void *)MEMORY[0x1E0C99E98];
    v7 = CFSTR("wss://paymentrelayservice-device-qa1.apay.apple.com/web-pay/device");
    goto LABEL_16;
  }
LABEL_18:
  PKLogFacilityTypeGetObject(0x2DuLL);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 138412290;
    v15 = CFSTR("wss://paymentrelayservice-wpc-device.apple.com/web-pay/device");
    _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Preferences: Using hardcoded Production Websocket URL: %@", (uint8_t *)&v14, 0xCu);
  }

  objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("wss://paymentrelayservice-wpc-device.apple.com/web-pay/device"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_21:

  return v11;
}

uint64_t PKRemoteNetworkPaymentSkipAuthenticationHeader()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_allows_internal_security_policies();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKRemoteNetworkPaymentSkipAuthenticationHeader"), CFSTR("com.apple.Wallet"), 0) != 0;
  return result;
}

void PKSetRemoteNetworkPaymentLoadingViewDelay(void *a1)
{
  uint64_t v1;
  id v2;
  const void *v3;
  id v4;

  v1 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
  v2 = a1;
  v4 = v2;
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v3 = v4;
  }
  CFPreferencesSetAppValue(CFSTR("PKRemoteNetworkPaymentLoadingViewDelay"), v3, CFSTR("com.apple.Wallet"));

}

CFPropertyListRef PKRemoteNetworkPaymentLoadingViewDelay()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKRemoteNetworkPaymentLoadingViewDelay"), CFSTR("com.apple.Wallet"));
}

void PKSetRemoteNetworkPaymentLoadingViewHold(void *a1)
{
  uint64_t v1;
  id v2;
  const void *v3;
  id v4;

  v1 = _InstallGlobalPreferencesObserverIfNecessary_onceToken;
  v2 = a1;
  v4 = v2;
  if (v1 == -1)
  {
    v3 = v2;
  }
  else
  {
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
    v3 = v4;
  }
  CFPreferencesSetAppValue(CFSTR("PKRemoteNetworkPaymentLoadingViewHold"), v3, CFSTR("com.apple.Wallet"));

}

CFPropertyListRef PKRemoteNetworkPaymentLoadingViewHold()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return (id)CFPreferencesCopyAppValue(CFSTR("PKRemoteNetworkPaymentLoadingViewHold"), CFSTR("com.apple.Wallet"));
}

uint64_t PKHomeKitSimulatedLockCompatibilityMode()
{
  uint64_t result;

  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  result = os_variant_has_internal_ui();
  if ((_DWORD)result)
    return CFPreferencesGetAppBooleanValue(CFSTR("PKHomeKitSimulatedLockCompatibilityModeKey"), CFSTR("com.apple.Wallet"), 0) != 0;
  return result;
}

BOOL PKPrioritizeAuxiliaryCapabilityGenerationEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKPrioritizeAuxiliaryCapabilityGenerationEnabledKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

BOOL PKAuxiliaryCapabilityHydraUnifiedAccessEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKAuxiliaryCapabilityHydraUnifiedAccessEnabledKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

BOOL PKAuxiliaryCapabilityHydraAliroEnabled()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKAuxiliaryCapabilityHydraAliroEnabledKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

BOOL PKBankCredentialMigrated()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PKBankCredentialMigratedKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

uint64_t PKSetBankCredentialMigrated(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKBankCredentialMigratedKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.Wallet"));
}

BOOL PKiCloudSignoutShouldDeleteLocalData()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKiCloudSignoutShouldDeleteLocalDataKey"), CFSTR("com.apple.Wallet"), 0) != 0;
}

void PKSetiCloudSignoutShouldDeleteLocalData(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PKiCloudSignoutShouldDeleteLocalDataKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.Wallet"));
}

BOOL PKNeedsLostModeExitAuth()
{
  if (_InstallGlobalPreferencesObserverIfNecessary_onceToken != -1)
    dispatch_once(&_InstallGlobalPreferencesObserverIfNecessary_onceToken, &__block_literal_global_721);
  return CFPreferencesGetAppBooleanValue(CFSTR("PKNeedsLostModeExitAuthKey"), CFSTR("com.apple.stockholm"), 0) != 0;
}

uint64_t PKSetNeedsLostModeExitAuth(uint64_t a1)
{
  NSObject *v2;
  const __CFString *v3;
  int v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  PKLogFacilityTypeGetObject(6uLL);
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = CFSTR("NO");
    if ((_DWORD)a1)
      v3 = CFSTR("YES");
    v5 = 138412290;
    v6 = v3;
    _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_INFO, "PKSetNeedsLostModeExitAuth: %@", (uint8_t *)&v5, 0xCu);
  }

  CFPreferencesSetAppValue(CFSTR("PKNeedsLostModeExitAuthKey"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.stockholm"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

void _StockholmPrefsChangedHandler()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("com.apple.stockholm.preferenceschanged"), 0);

}

void _GlobalPreferencesChangedHandler()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("PKPreferencesDidChangeNotification"), 0);

}

void _ManagedConfigProfilesChangedHandler()
{
  id v0;

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v0 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "postNotificationName:object:", CFSTR("PKPreferencesDidChangeNotification"), 0);

}

void sub_19015AF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19015B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19015B5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

id CNAvatarViewFunction()
{
  return (id)_MergedGlobals_1_3;
}

id CNAvatarCardControllerFunction()
{
  return (id)qword_1EE1C5628;
}

id CNContactViewControllerFunction()
{
  return (id)qword_1EE1C5630;
}

uint64_t PKCredentialRegistrationRecordNameForCredentialIdentifier(uint64_t a1)
{
  return objc_msgSend(CFSTR("register_"), "stringByAppendingString:", a1);
}

id PKSubcredentialSharingInvitationSensitiveURL(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0CB3998]);
  objc_msgSend(v2, "setScheme:", CFSTR("sms-private"));
  objc_msgSend(v2, "setPath:", CFSTR("open"));
  v3 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("service"), CFSTR("iMessage"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v4);

  objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("appBundleID"), CFSTR("com.apple.SubcredentialUIService.SubcredentialInvitationMessagesExtension"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "addObject:", v5);

  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB36F8], "archivedDataWithRootObject:requiringSecureCoding:error:", v1, 1, 0);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "hexEncoding");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = CFSTR("SharingRequest");
    v16[0] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v16, &v15, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v8, 0, 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithData:encoding:", v9, 4);
    objc_msgSend(MEMORY[0x1E0CB39D8], "queryItemWithName:value:", CFSTR("appPayload"), v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "addObject:", v11);

  }
  v12 = (void *)objc_msgSend(v3, "copy");
  objc_msgSend(v2, "setQueryItems:", v12);

  objc_msgSend(v2, "URL");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

id initkACCProperties_Endpoint_NFC_DisplayP3Rgb()
{
  id *v0;

  if (qword_1EE1C5658 != -1)
    dispatch_once(&qword_1EE1C5658, &__block_literal_global_122);
  v0 = (id *)dlsym((void *)qword_1EE1C5650, "kACCProperties_Endpoint_NFC_DisplayP3Rgb");
  objc_storeStrong((id *)&qword_1EE1C5640, *v0);
  _MergedGlobals_178 = (uint64_t (*)())kACCProperties_Endpoint_NFC_DisplayP3RgbFunction;
  return (id)qword_1EE1C5640;
}

id kACCProperties_Endpoint_NFC_DisplayP3RgbFunction()
{
  return (id)qword_1EE1C5640;
}

id initkACCProperties_Endpoint_NFC_DisplayP3RgbSecondary()
{
  id *v0;

  if (qword_1EE1C5658 != -1)
    dispatch_once(&qword_1EE1C5658, &__block_literal_global_122);
  v0 = (id *)dlsym((void *)qword_1EE1C5650, "kACCProperties_Endpoint_NFC_DisplayP3RgbSecondary");
  objc_storeStrong((id *)&qword_1EE1C5648, *v0);
  off_1ECF21B98 = (uint64_t (*)())kACCProperties_Endpoint_NFC_DisplayP3RgbSecondaryFunction;
  return (id)qword_1EE1C5648;
}

id kACCProperties_Endpoint_NFC_DisplayP3RgbSecondaryFunction()
{
  return (id)qword_1EE1C5648;
}

id initkACCProperties_Endpoint_NFC_Type()
{
  id *v0;

  if (qword_1EE1C5658 != -1)
    dispatch_once(&qword_1EE1C5658, &__block_literal_global_122);
  v0 = (id *)dlsym((void *)qword_1EE1C5650, "kACCProperties_Endpoint_NFC_Type");
  objc_storeStrong((id *)&_MergedGlobals_1_4, *v0);
  off_1ECF21BA0 = (uint64_t (*)())kACCProperties_Endpoint_NFC_TypeFunction;
  return (id)_MergedGlobals_1_4;
}

id kACCProperties_Endpoint_NFC_TypeFunction()
{
  return (id)_MergedGlobals_1_4;
}

id PDInAppPaymentServiceInterface()
{
  if (qword_1ECF22628 != -1)
    dispatch_once(&qword_1ECF22628, &__block_literal_global_123);
  return (id)_MergedGlobals_241;
}

BOOL PKProtobufAutomaticReloadPaymentSummaryItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  PKProtobufCustomPrecisionAmount *v17;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v17, a2) & 1) == 0)
          goto LABEL_30;
LABEL_25:
        PBReaderRecallMark();

        goto LABEL_27;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_27:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v17 = objc_alloc_init(PKProtobufNSDecimalNumber);
    objc_storeStrong((id *)(a1 + 16), v17);
    if (!PBReaderPlaceMark() || (PKProtobufNSDecimalNumberReadFrom((uint64_t)v17, a2) & 1) == 0)
    {
LABEL_30:

      return 0;
    }
    goto LABEL_25;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Class initMKMapService()
{
  Class result;

  if (qword_1EE1DB620 != -1)
    dispatch_once(&qword_1EE1DB620, &__block_literal_global_125);
  result = objc_getClass("MKMapService");
  _MergedGlobals_3_0 = (uint64_t)result;
  getMKMapServiceClass[0] = (uint64_t (*)())MKMapServiceFunction;
  return result;
}

id MKMapServiceFunction()
{
  return (id)_MergedGlobals_3_0;
}

Class initMKLocalSearchRequest_0()
{
  Class result;

  if (qword_1EE1DB620 != -1)
    dispatch_once(&qword_1EE1DB620, &__block_literal_global_125);
  result = objc_getClass("MKLocalSearchRequest");
  qword_1EE1DB628 = (uint64_t)result;
  _MergedGlobals_179 = (uint64_t (*)())MKLocalSearchRequestFunction_0;
  return result;
}

id MKLocalSearchRequestFunction_0()
{
  return (id)qword_1EE1DB628;
}

Class initMKLocalSearch_0()
{
  Class result;

  if (qword_1EE1DB620 != -1)
    dispatch_once(&qword_1EE1DB620, &__block_literal_global_125);
  result = objc_getClass("MKLocalSearch");
  qword_1EE1DB630 = (uint64_t)result;
  off_1ECF21BB0 = (uint64_t (*)())MKLocalSearchFunction_0;
  return result;
}

id MKLocalSearchFunction_0()
{
  return (id)qword_1EE1DB630;
}

Class initMKWalletMerchantStylingInfo_0()
{
  Class result;

  if (qword_1EE1DB620 != -1)
    dispatch_once(&qword_1EE1DB620, &__block_literal_global_125);
  result = objc_getClass("MKWalletMerchantStylingInfo");
  qword_1EE1DB638 = (uint64_t)result;
  getMKWalletMerchantStylingInfoClass_0[0] = (uint64_t (*)())MKWalletMerchantStylingInfoFunction_0;
  return result;
}

id MKWalletMerchantStylingInfoFunction_0()
{
  return (id)qword_1EE1DB638;
}

uint64_t PKAccountEntityOrderingContextFromString(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  char v11;
  __CFString *v12;
  __CFString *v13;
  char v14;

  v3 = a1;
  v4 = v3;
  if (!a2)
    goto LABEL_16;
  if (a2 == 2)
    goto LABEL_11;
  if (a2 != 1)
    goto LABEL_16;
  v5 = (__CFString *)v3;
  if (v5 != CFSTR("carousel"))
  {
    v6 = v5;
    if (!v5)
      goto LABEL_15;
    v7 = objc_msgSend(CFSTR("carousel"), "isEqualToString:", v5);

    if ((v7 & 1) != 0)
      goto LABEL_7;
    v9 = v6;
    if (v9 == CFSTR("detailList")
      || (v10 = v9, v11 = objc_msgSend(CFSTR("detailList"), "isEqualToString:", v9), v10, (v11 & 1) != 0))
    {
      v8 = 2;
      goto LABEL_17;
    }
LABEL_11:
    v12 = v4;
    if (v12 == CFSTR("rewardsHubList"))
    {
LABEL_14:
      v8 = 100;
      goto LABEL_17;
    }
    v13 = v12;
    if (v12)
    {
      v14 = objc_msgSend(CFSTR("rewardsHubList"), "isEqualToString:", v12);

      if ((v14 & 1) != 0)
        goto LABEL_14;
LABEL_16:
      v8 = 0;
      goto LABEL_17;
    }
LABEL_15:

    goto LABEL_16;
  }
LABEL_7:
  v8 = 1;
LABEL_17:

  return v8;
}

id PKSearchServiceDaemonInterface()
{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;

  if (qword_1ECF22638 != -1)
    dispatch_once(&qword_1ECF22638, &__block_literal_global_127);
  v0 = (void *)_MergedGlobals_242;
  v1 = (void *)MEMORY[0x1E0C99E60];
  v2 = objc_opt_class();
  objc_msgSend(v1, "setWithObjects:", v2, objc_opt_class(), 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "setClasses:forSelector:argumentIndex:ofReply:", v3, sel_transactionsMissingRegionsWithCompletion_, 0, 1);

  v4 = (void *)_MergedGlobals_242;
  v5 = (void *)MEMORY[0x1E0C99E60];
  v6 = objc_opt_class();
  v7 = objc_opt_class();
  objc_msgSend(v5, "setWithObjects:", v6, v7, objc_opt_class(), 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "setClasses:forSelector:argumentIndex:ofReply:", v8, sel_transactionsMissingRegionsWithCompletion_, 1, 1);

  v9 = (void *)_MergedGlobals_242;
  v10 = (void *)MEMORY[0x1E0C99E60];
  v11 = objc_opt_class();
  objc_msgSend(v10, "setWithObjects:", v11, objc_opt_class(), 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "setClasses:forSelector:argumentIndex:ofReply:", v12, sel_regionsWithCompletion_, 0, 1);

  v13 = (void *)_MergedGlobals_242;
  v14 = (void *)MEMORY[0x1E0C99E60];
  v15 = objc_opt_class();
  objc_msgSend(v14, "setWithObjects:", v15, objc_opt_class(), 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setClasses:forSelector:argumentIndex:ofReply:", v16, sel_indexedTransactionsWithCompletion_, 0, 1);

  v17 = (void *)_MergedGlobals_242;
  v18 = (void *)MEMORY[0x1E0C99E60];
  v19 = objc_opt_class();
  objc_msgSend(v18, "setWithObjects:", v19, objc_opt_class(), 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "setClasses:forSelector:argumentIndex:ofReply:", v20, sel_indexedPassesWithCompletion_, 0, 1);

  return (id)_MergedGlobals_242;
}

id PKSearchServiceClientInterface()
{
  if (qword_1ECF22648 != -1)
    dispatch_once(&qword_1ECF22648, &__block_literal_global_89_0);
  return (id)qword_1ECF22640;
}

const __CFString *PKPaymentWebServiceRegistrationTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("default");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("none");
}

void sub_19017036C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_190170C34(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_190171194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *location)
{
  id *v14;
  uint64_t v15;

  objc_destroyWeak(v14);
  objc_destroyWeak(location);
  _Block_object_dispose((const void *)(v15 - 208), 8);
  _Block_object_dispose((const void *)(v15 - 160), 8);
  objc_destroyWeak((id *)(v15 - 112));
  _Unwind_Resume(a1);
}

void sub_1901720D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_190173D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  _Block_object_dispose(&a63, 8);
  _Unwind_Resume(a1);
}

void sub_190174AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x3A0], 8);
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_190177864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19017863C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_19017873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190178DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  char a66;

  _Block_object_dispose(&a47, 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose(&a66, 8);
  _Unwind_Resume(a1);
}

void sub_190179570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_190179E5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

BOOL PKProtobufPaymentTokenReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  PKProtobufPaymentMethod *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = objc_alloc_init(PKProtobufPaymentMethod);
          objc_storeStrong((id *)(a1 + 32), v17);
          if (PBReaderPlaceMark() && (PKProtobufPaymentMethodReadFrom((uint64_t)v17, a2) & 1) != 0)
          {
            PBReaderRecallMark();
            goto LABEL_31;
          }

          return 0;
        case 2u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 8;
          goto LABEL_30;
        case 3u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 16;
          goto LABEL_30;
        case 4u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 56;
          goto LABEL_30;
        case 5u:
          PBReaderReadData();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 24;
          goto LABEL_30;
        case 6u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 40;
          goto LABEL_30;
        case 7u:
          PBReaderReadString();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = 48;
LABEL_30:
          v17 = *(PKProtobufPaymentMethod **)(a1 + v19);
          *(_QWORD *)(a1 + v19) = v18;
LABEL_31:

          goto LABEL_32;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0)
            return 0;
LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          break;
      }
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PKBundleIdentifierForPID(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = (void *)MEMORY[0x1E0D87D68];
  objc_msgSend(MEMORY[0x1E0D87D70], "identifierWithPid:", a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "handleForIdentifier:error:", v2, 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (v3)
  {
    objc_msgSend(v3, "bundle");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "identifier");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = 0;
    }

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id PKPassRelevancyBundle()
{
  if (qword_1ECF22698 != -1)
    dispatch_once(&qword_1ECF22698, &__block_literal_global_15_1);
  return (id)qword_1ECF22690;
}

id PKMerchantLookupBundle()
{
  if (qword_1ECF226A8 != -1)
    dispatch_once(&qword_1ECF226A8, &__block_literal_global_18_1);
  return (id)qword_1ECF226A0;
}

id PKRTCReportingBundle()
{
  if (qword_1ECF226B8 != -1)
    dispatch_once(&qword_1ECF226B8, &__block_literal_global_21_0);
  return (id)qword_1ECF226B0;
}

uint64_t PKProtobufPaymentCancellationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  void *v18;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Class initSFSafariCreditCardStore()
{
  Class result;

  if (qword_1ECF226C8 != -1)
    dispatch_once(&qword_1ECF226C8, &__block_literal_global_134);
  result = objc_getClass("SFSafariCreditCardStore");
  _MergedGlobals_244 = (uint64_t)result;
  getSFSafariCreditCardStoreClass[0] = (uint64_t (*)())SFSafariCreditCardStoreFunction;
  return result;
}

id SFSafariCreditCardStoreFunction()
{
  return (id)_MergedGlobals_244;
}

uint64_t PKTransactionAuthenticationPINFormatFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("complex"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_7:

    v4 = 1;
    goto LABEL_8;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("complex"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 != CFSTR("sixDigits"))
      -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("sixDigits"));
    goto LABEL_7;
  }
LABEL_4:
  v4 = 2;
LABEL_8:

  return v4;
}

const __CFString *PKTransactionAuthenticationPINFormatToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("complex");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("sixDigits");
  else
    return v1;
}

id PKTransactionAuthenticationMechanismToStrings(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("PaymentPINInput"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
LABEL_9:
      objc_msgSend(v3, "addObject:", CFSTR("UserConfirmation"));
      if ((a1 & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("TransactionDetailsSignature"));
  if ((a1 & 4) != 0)
    goto LABEL_9;
LABEL_4:
  if ((a1 & 8) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("ApplicationRedirect"));
LABEL_6:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKTransactionAuthenticationMechanismFromStrings(void *a1)
{
  id v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __PKTransactionAuthenticationMechanismFromStrings_block_invoke;
  v4[3] = &unk_1E2AD2AD0;
  v4[4] = &v5;
  objc_msgSend(v1, "enumerateObjectsUsingBlock:", v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_190185D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL PKTransactionAuthenticationMechanismIsValid(unint64_t a1)
{
  if ((a1 & 8) != 0)
    return (a1 & 0xFFFFFFFFFFFFFFF7) == 0;
  else
    return ((a1 >> 2) & 1) + (a1 & 1) < 2;
}

uint64_t PKTransactionAuthenticationFailureFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("PINIncorrect"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("PINIncorrect"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("PINMaximumTriesExceeded")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("PINMaximumTriesExceeded")),
          v6,
          v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

__CFString *PKTransactionAuthenticationFailureToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AD2AF0[a1];
}

const __CFString *PKPayLaterFinancingPlanDisputeStateToString(unint64_t a1)
{
  if (a1 > 6)
    return CFSTR("unknown");
  else
    return off_1E2AD2B28[a1];
}

id PKPayLaterFinancingPlanDisputeDocumentToStrings(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "addObject:", CFSTR("receipt"));
  if ((a1 & 2) != 0)
    objc_msgSend(v3, "addObject:", CFSTR("itemPhoto"));
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKProtobufPaymentInstrumentReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  PKProtobufPaymentApplication *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  void *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      v13 = v12 + 1;
      if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
        break;
      v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v15 = v9++ >= 9;
      if (v15)
      {
        v10 = 0;
        v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v16 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 64;
        goto LABEL_87;
      case 2u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 96;
        goto LABEL_87;
      case 3u:
        v21 = objc_alloc_init(PKProtobufPaymentApplication);
        objc_msgSend((id)a1, "addPaymentApplications:", v21);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentApplicationReadFrom((uint64_t)v21, a2) & 1) == 0)
          goto LABEL_118;
        goto LABEL_70;
      case 4u:
        *(_BYTE *)(a1 + 148) |= 1u;
        v22 = *v3;
        v23 = *(_QWORD *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v24 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v24 = 0;
        }
        *(_QWORD *)(a1 + 8) = v24;
        goto LABEL_116;
      case 5u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 136;
        goto LABEL_87;
      case 6u:
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 80;
        goto LABEL_87;
      case 7u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 128;
        goto LABEL_87;
      case 8u:
        PBReaderReadString();
        v21 = (PKProtobufPaymentApplication *)objc_claimAutoreleasedReturnValue();
        if (v21)
          objc_msgSend((id)a1, "addAssociatedWebDomains:", v21);
        goto LABEL_71;
      case 9u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_BYTE *)(a1 + 148) |= 0x40u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          v30 = v29 + 1;
          if (v29 == -1 || v30 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              v15 = v26++ >= 9;
              if (v15)
              {
                v27 = 0;
                goto LABEL_91;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_91:
        v67 = v27 != 0;
        v68 = 146;
        goto LABEL_113;
      case 0xAu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 72;
        goto LABEL_87;
      case 0xBu:
        v32 = 0;
        v33 = 0;
        v34 = 0;
        *(_BYTE *)(a1 + 148) |= 0x20u;
        while (2)
        {
          v35 = *v3;
          v36 = *(_QWORD *)(a2 + v35);
          v37 = v36 + 1;
          if (v36 == -1 || v37 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v36);
            *(_QWORD *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              v15 = v33++ >= 9;
              if (v15)
              {
                v34 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v34 = 0;
LABEL_95:
        v67 = v34 != 0;
        v68 = 145;
        goto LABEL_113;
      case 0xCu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 112;
        goto LABEL_87;
      case 0xDu:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 148) |= 2u;
        while (2)
        {
          v42 = *v3;
          v43 = *(_QWORD *)(a2 + v42);
          v44 = v43 + 1;
          if (v43 == -1 || v44 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v45 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v43);
            *(_QWORD *)(a2 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              v15 = v40++ >= 9;
              if (v15)
              {
                v41 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v41 = 0;
LABEL_99:
        *(_QWORD *)(a1 + 16) = -(v41 & 1) ^ (v41 >> 1);
        goto LABEL_116;
      case 0xEu:
        v46 = 0;
        v47 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 148) |= 8u;
        while (2)
        {
          v49 = *v3;
          v50 = *(_QWORD *)(a2 + v49);
          v51 = v50 + 1;
          if (v50 == -1 || v51 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v52 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v50);
            *(_QWORD *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              v15 = v47++ >= 9;
              if (v15)
              {
                LODWORD(v48) = 0;
                goto LABEL_103;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v48) = 0;
LABEL_103:
        v69 = 120;
        goto LABEL_108;
      case 0xFu:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 88;
        goto LABEL_87;
      case 0x10u:
        v21 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 48), v21);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v21, a2) & 1) == 0)
          goto LABEL_118;
        goto LABEL_70;
      case 0x11u:
        v21 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 56), v21);
        if (PBReaderPlaceMark() && (PKProtobufNSDecimalNumberReadFrom((uint64_t)v21, a2) & 1) != 0)
        {
LABEL_70:
          PBReaderRecallMark();
LABEL_71:

LABEL_116:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_118:

        return 0;
      case 0x12u:
        v53 = 0;
        v54 = 0;
        v48 = 0;
        *(_BYTE *)(a1 + 148) |= 4u;
        while (2)
        {
          v55 = *v3;
          v56 = *(_QWORD *)(a2 + v55);
          v57 = v56 + 1;
          if (v56 == -1 || v57 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v56);
            *(_QWORD *)(a2 + v55) = v57;
            v48 |= (unint64_t)(v58 & 0x7F) << v53;
            if (v58 < 0)
            {
              v53 += 7;
              v15 = v54++ >= 9;
              if (v15)
              {
                LODWORD(v48) = 0;
                goto LABEL_107;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v48) = 0;
LABEL_107:
        v69 = 24;
LABEL_108:
        *(_DWORD *)(a1 + v69) = v48;
        goto LABEL_116;
      case 0x13u:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_BYTE *)(a1 + 148) |= 0x10u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          v64 = v63 + 1;
          if (v63 == -1 || v64 > *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v65 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v64;
            v61 |= (unint64_t)(v65 & 0x7F) << v59;
            if (v65 < 0)
            {
              v59 += 7;
              v15 = v60++ >= 9;
              if (v15)
              {
                v61 = 0;
                goto LABEL_112;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
LABEL_112:
        v67 = v61 != 0;
        v68 = 144;
LABEL_113:
        *(_BYTE *)(a1 + v68) = v67;
        goto LABEL_116;
      case 0x14u:
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 40;
LABEL_87:
        v66 = *(void **)(a1 + v19);
        *(_QWORD *)(a1 + v19) = v18;

        goto LABEL_116;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_116;
    }
  }
}

__CFString *PKPassTileTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E2AD2BF8[a1];
}

uint64_t PKPassTileTypeFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  __CFString *v13;
  __CFString *v14;
  int v15;
  __CFString *v16;
  __CFString *v17;
  int v18;
  __CFString *v19;
  __CFString *v20;
  int v21;

  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    if (a2)
      *a2 = 0;
    goto LABEL_12;
  }
  v5 = (__CFString *)v3;
  v6 = v5;
  if (v5 == CFSTR("default")
    || (v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("default")), v6, v7))
  {
    if (a2)
      *a2 = 0;

    v8 = v6;
LABEL_7:

    v9 = v6;
LABEL_8:

    v10 = v6;
LABEL_9:

LABEL_12:
    v11 = 1;
    goto LABEL_13;
  }

  v13 = v6;
  if (v13 == CFSTR("vehicleFunction")
    || (v14 = v13,
        v15 = -[__CFString isEqualToString:](v13, "isEqualToString:", CFSTR("vehicleFunction")),
        v14,
        v15))
  {
    if (a2)
      *a2 = 1;
    goto LABEL_7;
  }

  v16 = v14;
  if (v16 == CFSTR("horizontalFlowGroup")
    || (v17 = v16,
        v18 = -[__CFString isEqualToString:](v16, "isEqualToString:", CFSTR("horizontalFlowGroup")),
        v17,
        v18))
  {
    if (a2)
      *a2 = 2;
    goto LABEL_8;
  }

  v19 = v17;
  if (v19 == CFSTR("verticalFlowGroup")
    || (v20 = v19,
        v21 = -[__CFString isEqualToString:](v19, "isEqualToString:", CFSTR("verticalFlowGroup")),
        v20,
        v21))
  {
    if (a2)
      *a2 = 3;
    goto LABEL_9;
  }

  v11 = 0;
  if (a2)
    *a2 = 0;
LABEL_13:

  return v11;
}

const __CFString *PKPassTileGroupStyleToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("dashboard");
  if (a1 == 1)
    v1 = CFSTR("action");
  if (a1 == 2)
    return CFSTR("table");
  else
    return v1;
}

uint64_t PKPassTileGroupStyleFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("action")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("action")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v5 = v2;
    v6 = v5;
    v4 = 2 * (v5 == CFSTR("table"));
    if (v5 != CFSTR("table") && v2)
    {
      if (-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("table")))
        v4 = 2;
      else
        v4 = 0;
    }

  }
  return v4;
}

const __CFString *PKPassTileStyleToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("compact");
  if (a1 != 1)
    v1 = 0;
  if (a1)
    return v1;
  else
    return CFSTR("default");
}

uint64_t PKPassTileStyleFromString(void *a1)
{
  id v1;
  void *v2;
  __CFString *v3;
  __CFString *v4;
  int v5;
  __CFString *v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  unsigned int v10;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (__CFString *)v1;
    v4 = v3;
    if (v3 == CFSTR("default")
      || (v5 = -[__CFString isEqualToString:](v3, "isEqualToString:", CFSTR("default")), v4, v5))
    {

      v6 = v4;
      v7 = 0;
    }
    else
    {

      v8 = v4;
      if (v8 == CFSTR("compact"))
      {
        v7 = 1;
      }
      else
      {
        v9 = v8;
        v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("compact"));

        v7 = v10;
      }
    }

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

__CFString *PKPassTileHeightClassToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 0;
  else
    return off_1E2AD2BA8[a1 - 1];
}

uint64_t PKPassTileHeightClassFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("twoLine")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("twoLine")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("threeLine")
      || (v6 = v5, v2)
      && (v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("threeLine")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
    }
    else
    {
      v8 = v6;
      if (v8 == CFSTR("dynamic")
        || v2
        && (v9 = v8,
            v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("dynamic")),
            v9,
            v9,
            (v10 & 1) != 0))
      {
        v4 = 3;
      }
      else
      {
        v4 = 0;
      }
    }
  }

  return v4;
}

__CFString *PKPassTileContextToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return 0;
  else
    return off_1E2AD2BE0[a1 - 1];
}

uint64_t PKPassTileContextFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("dashboard")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("dashboard")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("eventGuide")
      || v2
      && (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("eventGuide")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

id PKTransactionReleasedDataVerificationTypeToLocalizedTitle(uint64_t a1)
{
  __CFString *v1;

  if (a1 == 1)
    v1 = CFSTR("VERIFICATION_TYPE_AGE");
  else
    v1 = CFSTR("VERIFICATION_TYPE_IDENTITY");
  PKLocalizedIdentityString(&v1->isa, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

BOOL PKProtobufPaymentHostUpdateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  PKProtobufShippingMethod *v19;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_23;
      case 2u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
LABEL_23:
        v19 = *(PKProtobufShippingMethod **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;
        goto LABEL_30;
      case 3u:
        v19 = objc_alloc_init(PKProtobufShippingMethod);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (!PBReaderPlaceMark() || (PKProtobufShippingMethodReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_34;
        goto LABEL_29;
      case 4u:
        v19 = objc_alloc_init(PKProtobufPaymentMethod);
        objc_storeStrong((id *)(a1 + 8), v19);
        if (PBReaderPlaceMark() && (PKProtobufPaymentMethodReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_29:
          PBReaderRecallMark();
LABEL_30:

LABEL_31:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_34:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_31;
    }
  }
}

uint64_t PKAccountTransferEligibilityFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("approved"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = objc_msgSend(CFSTR("approved"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("fccStepUpRequired")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("fccStepUpRequired"), "isEqualToString:", v5), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKAccountTransferEligibilityToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return (const __CFString *)*((_QWORD *)&off_1E2AD2D00 + a1);
}

uint64_t PKGreenTeaLogger()
{
  if (qword_1ECF226E8 != -1)
    dispatch_once(&qword_1ECF226E8, &__block_literal_global_58_0);
  return qword_1ECF226E0;
}

void PKSetDiagnosticsEnabled(uint64_t a1, int a2)
{
  const __CFString *v4;
  const __CFString *v5;
  void *v6;
  BOOL v7;
  void *v8;
  __CFNotificationCenter *DarwinNotifyCenter;
  const char *v10;
  id v11;
  id v12;

  v4 = (const __CFString *)*MEMORY[0x1E0C9B228];
  v5 = (const __CFString *)*MEMORY[0x1E0C9B230];
  v6 = (void *)CFPreferencesCopyValue(CFSTR("PKLogNotificationServiceResponsesKey"), (CFStringRef)*MEMORY[0x1E0C9B228], CFSTR("mobile"), (CFStringRef)*MEMORY[0x1E0C9B230]);
  if (!v6 || a2 && (v11 = v6, v7 = objc_msgSend(v6, "BOOLValue") == (_DWORD)a1, v6 = v11, !v7))
  {
    v12 = v6;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    CFPreferencesSetValue(CFSTR("PKLogNotificationServiceResponsesKey"), v8, v4, CFSTR("mobile"), v5);

    CFPreferencesSynchronize(v4, CFSTR("mobile"), v5);
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.passbook.globalprefschanged"), 0, 0, 1u);
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.AppSupport.loggingDefaultsChanged"), 0, 0, 0);
    if ((_DWORD)a1)
      v10 = "\n Logging Enabled ";
    else
      v10 = "\n Logging Disabled ";
    puts(v10);
    v6 = v12;
  }

}

uint64_t PKDeveloperLoggingEnabled()
{
  if (qword_1ECF226F0 != -1)
    dispatch_once(&qword_1ECF226F0, &__block_literal_global_66_0);
  return _MergedGlobals_245[0];
}

uint64_t PKWriteBadPass(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  void *v21;
  void *v22;
  void *v23;
  unint64_t v24;
  int has_internal_ui;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  char v32;
  _BOOL4 v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  char v39;
  _BOOL4 v40;
  void *v41;
  unint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  void *v58;
  void *v59;
  id v60;
  void *v61;
  id v62;
  uint8_t buf[4];
  id v64;
  __int16 v65;
  void *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  objc_msgSend(v8, "setDateFormat:", CFSTR("yyyy'-'MM'-'dd'_'HH'-'mm'-'ss'-'SSS"));
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringFromDate:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "stringByAppendingString:", CFSTR("_"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingString:", v5);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringByAppendingPathExtension:", CFSTR("pkpass"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  v14 = (void *)MEMORY[0x1E0C99E98];
  v61 = v7;
  objc_msgSend(v7, "stringByAppendingPathComponent:", v13);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "fileURLWithPath:isDirectory:", v15, 1);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v62 = 0;
  v18 = objc_msgSend(v17, "copyItemAtURL:toURL:error:", v6, v16, &v62);
  v60 = v62;

  PKLogFacilityTypeGetObject(0);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = v19;
  if (!(_DWORD)v18)
  {
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v6, "path");
      v50 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "path");
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543618;
      v64 = v50;
      v65 = 2114;
      v66 = v51;
      _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Unable to copy invalid pass from %{public}@ to %{public}@", buf, 0x16u);

    }
    v29 = v13;

    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v64 = v60;
      _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Unable to copy invalid pass: %{public}@", buf, 0xCu);
    }

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "path");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v30, "fileExistsAtPath:", v31);

    v33 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if ((v32 & 1) != 0)
    {
      if (v33)
      {
        objc_msgSend(v6, "path");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v6, "path");
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        _PKPermissionsForPath(v35);
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v34;
        v65 = 2114;
        v66 = v36;
        _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Permissions on %{public}@ are %{public}@", buf, 0x16u);

LABEL_45:
      }
    }
    else if (v33)
    {
      objc_msgSend(v6, "path");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138543362;
      v64 = v34;
      _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Attempt to move from path that doesn't exist: %{public}@", buf, 0xCu);
      goto LABEL_45;
    }

    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = objc_msgSend(v38, "fileExistsAtPath:", v61);

    v40 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    v59 = v16;
    v13 = v29;
    if ((v39 & 1) != 0)
    {
      v37 = v60;
      if (v40)
      {
        _PKPermissionsForPath(v61);
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v61;
        v65 = 2114;
        v66 = v41;
        _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Permissions on %{public}@ are %{public}@", buf, 0x16u);

        v37 = v60;
      }
    }
    else
    {
      v37 = v60;
      if (v40)
      {
        *(_DWORD *)buf = 138543362;
        v64 = v61;
        _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Attempt to move to path that doesn't exist: %{public}@", buf, 0xCu);
      }
    }

    objc_msgSend(v37, "userInfo");
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "objectForKey:", CFSTR("NSSourceFilePathErrorKey"));
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = 0;
    if (v27)
    {
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        _PKPermissionsForPath(v27);
        v57 = v23;
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138543618;
        v64 = v27;
        v65 = 2114;
        v66 = v52;
        _os_log_error_impl(&dword_18FC92000, v20, OS_LOG_TYPE_ERROR, "Permissions on error source %{public}@ are %{public}@", buf, 0x16u);

        v23 = v57;
      }

    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v64 = v37;
      _os_log_impl(&dword_18FC92000, v20, OS_LOG_TYPE_DEFAULT, "Skipping purging any passes due to previous failure: %@", buf, 0xCu);
    }

    goto LABEL_42;
  }
  v58 = v10;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v64 = v6;
    v65 = 2112;
    v66 = v16;
    _os_log_impl(&dword_18FC92000, v20, OS_LOG_TYPE_DEFAULT, "Copied invalid pass from %@ to %@", buf, 0x16u);
  }

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "contentsOfDirectoryAtPath:error:", v61, 0);
  v22 = (void *)objc_claimAutoreleasedReturnValue();

  v23 = v22;
  v24 = objc_msgSend(v22, "count");
  has_internal_ui = os_variant_has_internal_ui();
  v26 = 5;
  if (has_internal_ui)
    v26 = 20;
  if (v24 > v26)
  {
    v59 = v16;
    objc_msgSend(v22, "sortedArrayUsingSelector:", sel_compare_);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    if (os_variant_has_internal_ui())
      v28 = -20;
    else
      v28 = -5;
    if (v28 + v24)
    {
      v56 = v5;
      v53 = v13;
      v54 = v8;
      v55 = v6;
      v42 = 0;
      do
      {
        objc_msgSend(v27, "objectAtIndex:", v42);
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        v44 = (void *)MEMORY[0x1E0C99E98];
        objc_msgSend(v61, "stringByAppendingPathComponent:", v43);
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "fileURLWithPath:isDirectory:", v45, 1);
        v46 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "removeItemAtURL:error:", v46, 0);

        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          v64 = v61;
          v65 = 2112;
          v66 = v43;
          _os_log_impl(&dword_18FC92000, v20, OS_LOG_TYPE_DEFAULT, "Deleting excess bad pass from %@: %@", buf, 0x16u);
        }

        ++v42;
        if (os_variant_has_internal_ui())
          v48 = -20;
        else
          v48 = -5;
      }
      while (v48 + v24 > v42);
      v6 = v55;
      v5 = v56;
      v13 = v53;
      v8 = v54;
      v10 = v58;
    }
    else
    {
      v10 = v58;
    }
    v18 = v18;
    v37 = v60;
LABEL_42:

    v16 = v59;
    goto LABEL_43;
  }
  v10 = v58;
  v37 = v60;
LABEL_43:

  return v18;
}

__CFString *_PKPermissionsForPath(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  BOOL v5;
  NSObject *v6;
  __CFString *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  const __CFString *v11;
  const __CFString *v12;
  NSObject *v13;
  id v15;
  char __str[4];
  id v17;
  __int16 v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = 0;
  objc_msgSend(v2, "attributesOfItemAtPath:error:", v1, &v15);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v15;

  if (v3)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0CB2AA8]);
    v8 = objc_claimAutoreleasedReturnValue();
    v6 = v8;
    if (v8)
    {
      snprintf(__str, 0x10uLL, "0%03o", -[NSObject intValue](v8, "intValue"));
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s"), __str);
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        v17 = v1;
        _os_log_error_impl(&dword_18FC92000, v9, OS_LOG_TYPE_ERROR, "Unable to fetch permissions attribute of %{public}@", (uint8_t *)__str, 0xCu);
      }

      v7 = 0;
    }
    objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0CB2AD8]);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    if (v10)
    {
      v11 = &stru_1E2ADF4C0;
      if (v7)
        v12 = v7;
      else
        v12 = &stru_1E2ADF4C0;
      if (v7)
        v11 = CFSTR(" ");
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@(protection %@)"), v12, v11, v10);
      v13 = v7;
      v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      PKLogFacilityTypeGetObject(0);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__str = 138543362;
        v17 = v1;
        _os_log_error_impl(&dword_18FC92000, v13, OS_LOG_TYPE_ERROR, "Unable to fetch protection attribute of %{public}@", (uint8_t *)__str, 0xCu);
      }
    }

  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__str = 138543618;
      v17 = v1;
      v18 = 2114;
      v19 = v4;
      _os_log_error_impl(&dword_18FC92000, v6, OS_LOG_TYPE_ERROR, "Unable to fetch permissions or any attributes of %{public}@: %{public}@", (uint8_t *)__str, 0x16u);
    }
    v7 = 0;
  }

  return v7;
}

void PKLegacyStockholmLog(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint8_t buf[4];
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  PKLogFacilityTypeGetObject(6uLL);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v14 = v11;
    _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

}

const __CFString *PKPassCredentialShareTargetDeviceToString(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("universal");
  else
    return off_1E2AD2EA0[a1];
}

uint64_t PKPassCredentialShareTargetDeviceFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  char v9;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  int v19;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("phone"))
  {
    v3 = 0;
    goto LABEL_11;
  }
  if (!v1)
    goto LABEL_8;
  v3 = -[__CFString caseInsensitiveCompare:](v1, "caseInsensitiveCompare:", CFSTR("phone"));

  if (v3)
  {
    v4 = v2;
    if (v4 == CFSTR("watch")
      || (v5 = v4,
          v6 = -[__CFString caseInsensitiveCompare:](v4, "caseInsensitiveCompare:", CFSTR("watch")),
          v5,
          !v6))
    {
      v3 = 1;
      goto LABEL_11;
    }
    v7 = v5;
    if (v7 != CFSTR("universal"))
    {
      v8 = v7;
      v9 = -[__CFString isEqualToString:](v7, "isEqualToString:", CFSTR("universal"));

      if ((v9 & 1) == 0)
      {
        v11 = v8;
        if (v11 == CFSTR("current")
          || (v12 = v11,
              v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("current")),
              v12,
              (v13 & 1) != 0))
        {
          v3 = 3;
          goto LABEL_11;
        }
        v14 = v12;
        if (v14 == CFSTR("localWatch")
          || (v15 = v14,
              v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("localWatch")),
              v15,
              (v16 & 1) != 0))
        {
          v3 = 4;
          goto LABEL_11;
        }
        v17 = v15;
        if (v17 == CFSTR("local")
          || (v18 = v17,
              v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("local")),
              v18,
              v19))
        {
          v3 = 5;
          goto LABEL_11;
        }
      }
    }
LABEL_8:
    v3 = 2;
  }
LABEL_11:

  return v3;
}

BOOL PKPassCredentialShareTargetDeviceIsWatch(uint64_t a1)
{
  return a1 == 4 || a1 == 1;
}

uint64_t IntegerFromFelicaDateFormat(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = a1;
  v2 = objc_msgSend(v1, "month");
  v3 = (objc_msgSend(v1, "day") << 16) | (v2 << 24);
  v4 = objc_msgSend(v1, "year");

  return v3 | v4;
}

const __CFString *PKPrivacyEncryptionSchemeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("APPLE-HPKE-v1");
  else
    return off_1E2AD3060[a1];
}

uint64_t PKPrivacyEncryptionSchemeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("APPLE-HPKE-v1"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("APPLE-HPKE-v1"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("EC_v2")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("EC_v2")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("EC_v3")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("EC_v3")), v9, v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

BOOL PKBAAUtilitiesAvailable()
{
  int v0;

  v0 = MKBGetDeviceLockState();
  return v0 == 3 || v0 == 0;
}

void PKPersistentBAACertificateAndKey(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  SecAccessControlRef v8;
  void *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  id v13;
  id v14;
  id v15;
  CFErrorRef error;
  __int128 buf;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    error = 0;
    v8 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x1E0CD68E0], 0x40000001uLL, &error);
    if (v8)
    {
      PKBAAOptionsDictionary(0, 0, 0, (uint64_t)v8);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      CFRelease(v8);
      *(_QWORD *)&buf = 0;
      *((_QWORD *)&buf + 1) = &buf;
      v18 = 0x3032000000;
      v19 = __Block_byref_object_copy__43;
      v20 = __Block_byref_object_dispose__43;
      v21 = 0;
      if (v5)
      {
        v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC12A0]), "initWithExternalizedContext:", v5);
        v11 = *(void **)(*((_QWORD *)&buf + 1) + 40);
        *(_QWORD *)(*((_QWORD *)&buf + 1) + 40) = v10;

        objc_msgSend(v9, "setObject:forKeyedSubscript:", CFSTR("kSecUseAuthenticationUIFail"), *MEMORY[0x1E0D1D1A8]);
        objc_msgSend(v9, "setObject:forKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&buf + 1) + 40), *MEMORY[0x1E0D1D148]);
      }
      v13 = v5;
      v14 = v6;
      v15 = v7;
      DeviceIdentityIssueClientCertificateWithCompletion();

      _Block_object_dispose(&buf, 8);
    }
    else
    {
      PKLogFacilityTypeGetObject(0xEuLL);
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = error;
        _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Error: failed to create access control for BAA cert key: %@", (uint8_t *)&buf, 0xCu);
      }

      if (error)
        CFRelease(error);
    }
  }

}

void sub_190199C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKBAAOptionsDictionary(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _QWORD v21[6];

  v21[5] = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", CFSTR("com.apple.passd.virtual.card.credential.key"), *MEMORY[0x1E0D1D140]);
  v9 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(v8, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D1D1B8]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a2);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D1D130]);

  objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, *MEMORY[0x1E0D1D1C0]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0D1D1A0]);

  v12 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v13 = *MEMORY[0x1E0D1D178];
  v21[0] = *MEMORY[0x1E0D1D168];
  v21[1] = v13;
  v14 = *MEMORY[0x1E0D1D180];
  v21[2] = *MEMORY[0x1E0D1D170];
  v21[3] = v14;
  v21[4] = *MEMORY[0x1E0D1D160];
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = (void *)objc_msgSend(v12, "initWithArray:", v15);
  v17 = *MEMORY[0x1E0D1D190];
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v16, *MEMORY[0x1E0D1D190]);

  if (v7)
    v18 = v7;
  else
    v18 = &unk_1E2C3F070;
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v18, *MEMORY[0x1E0D1D1B0]);
  if ((a1 & 1) == 0)
  {
    objc_msgSend(v8, "objectForKeyedSubscript:", v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "addObject:", *MEMORY[0x1E0D1D198]);

  }
  objc_msgSend(v8, "setObject:forKeyedSubscript:", a4, *MEMORY[0x1E0D1D108]);

  return v8;
}

void sub_19019A348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKExtractBAACertificatesData(__SecKey *a1, void *a2)
{
  id v3;
  void *v4;
  __SecKey *v5;
  __SecKey *v6;
  CFDataRef v7;
  __CFError *v8;
  NSObject *v9;
  NSObject *v10;
  unint64_t v11;
  __SecCertificate *v12;
  CFDataRef v13;
  id v14;
  CFErrorRef error;
  uint8_t buf[4];
  CFDataRef v18;
  __int16 v19;
  __CFError *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (a1 && objc_msgSend(v3, "count") == 2)
  {
    v5 = SecKeyCopyPublicKey(a1);
    if (v5)
    {
      v6 = v5;
      error = 0;
      v7 = SecKeyCopyExternalRepresentation(v5, &error);
      v8 = error;
      PKLogFacilityTypeGetObject(0xEuLL);
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v18 = v7;
        v19 = 2112;
        v20 = v8;
        _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Client public key generated by BAA: %@\n error: %@", buf, 0x16u);
      }

      CFRelease(v6);
      if (error)
        CFRelease(error);

    }
    v10 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (objc_msgSend(v4, "count"))
    {
      v11 = 0;
      do
      {
        objc_msgSend(v4, "objectAtIndexedSubscript:", v11);
        v12 = (__SecCertificate *)objc_claimAutoreleasedReturnValue();
        v13 = SecCertificateCopyData(v12);

        -[NSObject addObject:](v10, "addObject:", v13);
        ++v11;
      }
      while (v11 < objc_msgSend(v4, "count"));
    }
    v14 = -[NSObject copy](v10, "copy");
  }
  else
  {
    PKLogFacilityTypeGetObject(0xEuLL);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v18 = a1;
      v19 = 2112;
      v20 = (__CFError *)v4;
      _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Error with BAA reference key: %@ or certificates: %@", buf, 0x16u);
    }
    v14 = 0;
  }

  return v14;
}

void PKForceRefreshBAACertificateAndKey(void *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  SecAccessControlRef v6;
  SecAccessControlRef v7;
  void *v8;
  id v9;
  CFErrorRef error;
  uint8_t buf[4];
  CFErrorRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  PKLogFacilityTypeGetObject(0xEuLL);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Force refresh of stored BAA (UCRT) keys and certificates", buf, 2u);
  }

  error = 0;
  v6 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x1E0CD68E0], 0x40000001uLL, &error);
  if (v6)
  {
    v7 = v6;
    PKBAAOptionsDictionary(0, 1, 0, (uint64_t)v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    CFRelease(v7);
    v9 = v4;
    DeviceIdentityIssueClientCertificateWithCompletion();

  }
  else
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v12 = error;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Error: failed to create access control for BAA (UCRT) key: %@", buf, 0xCu);
    }

    if (error)
      CFRelease(error);
  }

}

void PKGenerateOneTimeBAACertificate(int a1, void *a2, void *a3)
{
  id v5;
  id v6;
  SecAccessControlRef v7;
  SecAccessControlRef v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  CFErrorRef error;
  _QWORD v19[5];
  uint8_t buf[4];
  CFErrorRef v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  if (!v6)
    goto LABEL_11;
  if (!a1)
  {
    v8 = 0;
    goto LABEL_6;
  }
  error = 0;
  v7 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x1E0CD68E0], 0x40000001uLL, &error);
  if (v7)
  {
    v8 = v7;
LABEL_6:
    v9 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v10 = MEMORY[0x1E0C9AAA0];
    objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAA0], *MEMORY[0x1E0D1D1B8]);
    v11 = MEMORY[0x1E0C9AAB0];
    objc_msgSend(v9, "setObject:forKeyedSubscript:", MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0D1D130]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v11, *MEMORY[0x1E0D1D1C0]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", &unk_1E2C3EFF8, *MEMORY[0x1E0D1D1B0]);
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v10, *MEMORY[0x1E0D1D1A0]);
    v12 = *MEMORY[0x1E0D1D168];
    v19[0] = *MEMORY[0x1E0D1D198];
    v19[1] = v12;
    v13 = *MEMORY[0x1E0D1D170];
    v19[2] = *MEMORY[0x1E0D1D178];
    v19[3] = v13;
    v19[4] = *MEMORY[0x1E0D1D180];
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 5);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, *MEMORY[0x1E0D1D108]);
      objc_msgSend(v14, "arrayByAddingObject:", *MEMORY[0x1E0D1D160]);
      v15 = objc_claimAutoreleasedReturnValue();

      v14 = (void *)v15;
    }
    objc_msgSend(v9, "setObject:forKeyedSubscript:", v14, *MEMORY[0x1E0D1D190]);
    v17 = v6;
    DeviceIdentityIssueClientCertificateWithCompletion();
    if (v8)
      CFRelease(v8);

    goto LABEL_11;
  }
  PKLogFacilityTypeGetObject(0xEuLL);
  v16 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v21 = error;
    _os_log_impl(&dword_18FC92000, v16, OS_LOG_TYPE_DEFAULT, "Error: failed to create access control for BAA cert key: %@", buf, 0xCu);
  }

  if (error)
    CFRelease(error);
LABEL_11:

}

id PKPaymentEncryptDataWithCertChain(void *a1, void *a2, int a3, _QWORD *a4)
{
  id v7;
  int v8;
  void *v9;
  CFTypeRef cf;

  v7 = a1;
  cf = 0;
  v8 = PKPaymentCreateAndValidateTrustWithCerts(a2, (SecTrustRef *)&cf, a3);
  v9 = 0;
  if (v8)
  {
    PKEncryptDataToServerWithTrust(v7, (__SecTrust *)cf, a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (cf)
    CFRelease(cf);

  return v9;
}

id PKEncryptDataToServerWithTrust(void *a1, __SecTrust *a2, _QWORD *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  id v10;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    v8 = 0;
    if (!a3)
      goto LABEL_13;
    goto LABEL_12;
  }
  v6 = SecCopyEncryptedToServer();
  if (v6)
  {
    v7 = v6;
    -[NSObject base64EncodedDataWithOptions:](v6, "base64EncodedDataWithOptions:", 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    PKLogFacilityTypeGetObject(6uLL);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(0, "localizedDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v13 = v9;
      _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "Error encrypting data: %@", buf, 0xCu);

    }
    v8 = 0;
  }

  if (a3)
  {
    if (SecTrustGetCertificateCount(a2) > 0)
    {
      PKSecTrustGetCertificateAtIndex(a2, 0);
      v10 = objc_retainAutorelease((id)SecCertificateCopySubjectPublicKeyInfoSHA256Digest());
      *a3 = v10;

      goto LABEL_13;
    }
LABEL_12:
    *a3 = 0;
  }
LABEL_13:

  return v8;
}

id PKEncryptDataUsingPrivacyScheme(void *a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  id v14;
  uint8_t buf[4];
  id v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (id *)MEMORY[0x1E0D89730];
  switch(a2)
  {
    case 0:
      PKLogFacilityTypeGetObject(6uLL);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18FC92000, v8, OS_LOG_TYPE_DEFAULT, "Could not encrypt data, unknown scheme", buf, 2u);
      }
      v9 = 0;
      goto LABEL_14;
    case 1:
      goto LABEL_8;
    case 2:
      v7 = (id *)MEMORY[0x1E0D89720];
      goto LABEL_8;
    case 3:
      v7 = (id *)MEMORY[0x1E0D89728];
LABEL_8:
      v8 = *v7;
      break;
    default:
      v8 = 0;
      break;
  }
  objc_msgSend(MEMORY[0x1E0D89668], "sharedManager");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  objc_msgSend(v10, "encryptData:scheme:recipientPublicKey:outError:", v5, v8, v6, &v14);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v14;

  if (v11)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = v11;
      _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "Data encryption failed with error %@", buf, 0xCu);
    }

  }
LABEL_14:

  return v9;
}

id PKPeerPaymentEncryptDataWithCertChain(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  _BOOL4 v6;
  void *v7;
  CFTypeRef cf;

  v5 = a1;
  cf = 0;
  v6 = PKFeatureCreateAndValidateTrustWithCerts(a2, (SecTrustRef *)&cf, 1);
  v7 = 0;
  if (v6)
  {
    PKEncryptDataToServerWithTrust(v5, (__SecTrust *)cf, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (cf)
    CFRelease(cf);

  return v7;
}

id PKFeatureEncryptDataWithCertChain(void *a1, void *a2, _QWORD *a3, uint64_t a4)
{
  id v7;
  _BOOL4 v8;
  void *v9;
  CFTypeRef cf;

  v7 = a1;
  cf = 0;
  v8 = PKFeatureCreateAndValidateTrustWithCerts(a2, (SecTrustRef *)&cf, a4);
  v9 = 0;
  if (v8)
  {
    PKEncryptDataToServerWithTrust(v7, (__SecTrust *)cf, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (cf)
    CFRelease(cf);

  return v9;
}

id PKFeatureEncryptDataUsingPrivacySchemeWithCertChain(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  _BOOL4 v9;
  void *v10;
  void *v11;
  void *v12;
  CFTypeRef cf;

  v7 = a2;
  v8 = a4;
  cf = 0;
  v9 = PKFeatureCreateAndValidateTrustWithCerts(v8, (SecTrustRef *)&cf, a1);
  v10 = 0;
  if (v9)
  {
    objc_msgSend(v8, "firstObject");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    PKPublicKeyFromCertificate(v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    if (v12)
    {
      PKEncryptDataUsingPrivacyScheme(v7, a3, v12);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v10 = 0;
    }

  }
  if (cf)
    CFRelease(cf);

  return v10;
}

id PKECDHEncryptDataWithCertChain(void *a1, void *a2, int a3, _QWORD *a4, CFErrorRef *a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  __SecKey *v16;
  __SecKey *v17;
  __SecKey *v18;
  __SecKey *v19;
  CFDataRef v20;
  uint64_t v21;
  CFDataRef v22;
  __SecKey *v23;
  CFDataRef v24;
  void *v25;
  void *v26;
  const __CFData *v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  NSObject *v36;
  CFErrorRef v37;
  CFErrorRef v38;
  id v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  CFErrorRef v43;
  NSObject *v44;
  NSObject *v45;
  void *v46;
  void *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  void *v54;
  const __CFDictionary *v55;
  const __CFData *v56;
  const __CFDictionary *v57;
  CFDataRef v58;
  CFErrorRef error;
  SecTrustRef trust;
  _QWORD v61[2];
  _QWORD v62[2];
  uint8_t buf[4];
  CFErrorRef v64;
  _QWORD v65[4];
  _QWORD v66[6];

  v66[4] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  trust = 0;
  if (PKPaymentCreateAndValidateTrustWithCerts(a2, &trust, a3))
  {
    v10 = *MEMORY[0x1E0CD6A50];
    v11 = *MEMORY[0x1E0CD69F8];
    v65[0] = *MEMORY[0x1E0CD6A38];
    v65[1] = v11;
    v12 = *MEMORY[0x1E0CD6A00];
    v66[0] = v10;
    v66[1] = v12;
    v13 = *MEMORY[0x1E0C9AE40];
    v14 = *MEMORY[0x1E0CD6A20];
    v65[2] = *MEMORY[0x1E0CD69D8];
    v65[3] = v14;
    v66[2] = v13;
    v66[3] = &unk_1E2C3F010;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v66, v65, 4);
    v15 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    error = 0;
    v16 = SecKeyCreateRandomKey(v15, &error);
    if (v16)
    {
      v17 = v16;
      v18 = SecKeyCopyPublicKey(v16);
      v19 = SecTrustCopyKey(trust);
      v20 = SecKeyCopyExternalRepresentation(v18, &error);
      if (v18 && v19)
      {
        v58 = SecKeyCopyExternalRepresentation(v19, &error);
        if (v58)
        {
          v21 = *MEMORY[0x1E0CD6F00];
          v61[0] = *MEMORY[0x1E0CD6EF8];
          v61[1] = v21;
          v62[0] = &unk_1E2C3F028;
          v62[1] = v20;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v62, v61, 2);
          v57 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
          v22 = SecKeyCopyKeyExchangeResult(v17, (SecKeyAlgorithm)*MEMORY[0x1E0CD6D88], v19, v57, &error);
          v23 = v19;
          v24 = v22;
          CFRelease(v23);
          CFRelease(v17);
          if (v24)
          {
            v55 = v15;
            objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 16);
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", objc_msgSend(v54, "length") + objc_msgSend(v9, "length"));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 16);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            v56 = v24;
            v27 = objc_retainAutorelease(v24);
            -[__CFData bytes](v27, "bytes");
            -[__CFData length](v27, "length");
            v28 = objc_retainAutorelease(v26);
            objc_msgSend(v28, "bytes");
            v53 = v28;
            objc_msgSend(v28, "length");
            v29 = objc_retainAutorelease(v9);
            objc_msgSend(v29, "bytes");
            v30 = objc_msgSend(v29, "length");
            v31 = objc_retainAutorelease(v25);
            v32 = objc_msgSend(v31, "mutableBytes");
            v52 = objc_retainAutorelease(v31);
            v33 = objc_msgSend(v52, "mutableBytes");
            v51 = v33 + objc_msgSend(v29, "length");
            v49 = v30;
            v50 = v32;
            v34 = CCCryptorGCMOneshotEncrypt();
            if (v34)
            {
              v35 = v34;
              CFRelease(v18);
              PKLogFacilityTypeGetObject(6uLL);
              v36 = objc_claimAutoreleasedReturnValue();
              v37 = v58;
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67109120;
                LODWORD(v64) = v35;
                _os_log_impl(&dword_18FC92000, v36, OS_LOG_TYPE_DEFAULT, "CCCryptorStatus error: %d. Failed to encrypt data with shared secret", buf, 8u);
              }

              v38 = v57;
              v15 = v55;
              v24 = v56;
              if (a5)
              {
                objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.encryptionError"), 1, 0, v49, v50, v51, 16);
                v39 = 0;
                *a5 = (CFErrorRef)(id)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v39 = 0;
              }
              v47 = v53;
              v43 = (CFErrorRef)v54;
              v46 = v52;
            }
            else
            {
              PKLogFacilityTypeGetObject(6uLL);
              v45 = objc_claimAutoreleasedReturnValue();
              v37 = v58;
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18FC92000, v45, OS_LOG_TYPE_DEFAULT, "Successfully encrypted data with shared secret", buf, 2u);
              }

              *a4 = SecKeyCopyExternalRepresentation(v18, &error);
              CFRelease(v18);
              v46 = v52;
              v39 = v52;
              v38 = v57;
              v15 = v55;
              v24 = v56;
              v47 = v53;
              v43 = (CFErrorRef)v54;
            }

          }
          else
          {
            CFRelease(v18);
            v43 = error;
            PKLogFacilityTypeGetObject(6uLL);
            v44 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v64 = v43;
              _os_log_impl(&dword_18FC92000, v44, OS_LOG_TYPE_DEFAULT, "Error computing shared secret: %@", buf, 0xCu);
            }

            v38 = v57;
            v37 = v58;
            if (a5)
            {
              v43 = objc_retainAutorelease(v43);
              v39 = 0;
              *a5 = v43;
            }
            else
            {
              v39 = 0;
            }
          }

        }
        else
        {
          v38 = error;
          PKLogFacilityTypeGetObject(6uLL);
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v64 = v38;
            _os_log_impl(&dword_18FC92000, v42, OS_LOG_TYPE_DEFAULT, "Error creating key data: %@", buf, 0xCu);
          }

          v37 = 0;
          if (a5)
            *a5 = objc_retainAutorelease(v38);
          CFRelease(v19);
          CFRelease(v18);
          CFRelease(v17);
          v39 = 0;
        }

      }
      else
      {
        v37 = error;
        PKLogFacilityTypeGetObject(6uLL);
        v41 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v64 = v37;
          _os_log_impl(&dword_18FC92000, v41, OS_LOG_TYPE_DEFAULT, "Error gettting public key or certificate key: %@", buf, 0xCu);
        }

        if (a5)
          *a5 = objc_retainAutorelease(v37);
        if (v19)
          CFRelease(v19);
        if (v18)
          CFRelease(v18);
        CFRelease(v17);
        v39 = 0;
      }

    }
    else
    {
      v20 = error;
      PKLogFacilityTypeGetObject(6uLL);
      v40 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v64 = v20;
        _os_log_impl(&dword_18FC92000, v40, OS_LOG_TYPE_DEFAULT, "Error creating key pair: %@", buf, 0xCu);
      }

      if (a5)
      {
        v20 = objc_retainAutorelease(v20);
        v39 = 0;
        *a5 = v20;
      }
      else
      {
        v39 = 0;
      }
    }

  }
  else
  {
    if (trust)
      CFRelease(trust);
    v39 = 0;
  }

  return v39;
}

__CFError *PKECDHDecryptDataWithEphemeralPublicKey(void *a1, void *a2, __SecKey *a3, CFErrorRef *a4)
{
  const __CFData *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFDictionary *v12;
  SecKeyRef v13;
  __SecKey *v14;
  uint64_t v15;
  const __CFDictionary *v16;
  CFDataRef v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const __CFData *v21;
  id v22;
  id v23;
  uint64_t v24;
  CFErrorRef v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  _BOOL4 v30;
  __CFError *v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const __CFDictionary *v38;
  const __CFData *v39;
  CFErrorRef error;
  _QWORD v41[2];
  _QWORD v42[2];
  uint8_t buf[4];
  CFErrorRef v44;
  _QWORD v45[3];
  _QWORD v46[5];

  v46[3] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = *MEMORY[0x1E0CD6A50];
  v10 = *MEMORY[0x1E0CD69F8];
  v45[0] = *MEMORY[0x1E0CD6A38];
  v45[1] = v10;
  v11 = *MEMORY[0x1E0CD6A10];
  v46[0] = v9;
  v46[1] = v11;
  v45[2] = *MEMORY[0x1E0CD6A20];
  v46[2] = &unk_1E2C3F010;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v46, v45, 3);
  v12 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  error = 0;
  v13 = SecKeyCreateWithData(v7, v12, &error);
  if (v13)
  {
    v14 = v13;
    v15 = *MEMORY[0x1E0CD6F00];
    v41[0] = *MEMORY[0x1E0CD6EF8];
    v41[1] = v15;
    v42[0] = &unk_1E2C3F028;
    v42[1] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v42, v41, 2);
    v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
    v17 = SecKeyCopyKeyExchangeResult(a3, (SecKeyAlgorithm)*MEMORY[0x1E0CD6D88], v14, v16, &error);
    CFRelease(v14);
    if (v17)
    {
      v38 = v12;
      v39 = v7;
      v18 = objc_msgSend(v8, "length");
      objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", v18 - 16);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99DF0], "dataWithLength:", 16);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_retainAutorelease(v17);
      -[__CFData bytes](v21, "bytes");
      -[__CFData length](v21, "length");
      v22 = objc_retainAutorelease(v20);
      objc_msgSend(v22, "bytes");
      v37 = v22;
      objc_msgSend(v22, "length");
      v23 = objc_retainAutorelease(v8);
      objc_msgSend(v23, "bytes");
      v24 = objc_msgSend(v19, "length");
      v25 = objc_retainAutorelease(v19);
      v26 = -[__CFError mutableBytes](v25, "mutableBytes");
      v27 = objc_msgSend(objc_retainAutorelease(v23), "bytes");
      v36 = v27 + -[__CFError length](v25, "length");
      v35 = v26;
      v28 = CCCryptorGCMOneshotDecrypt();
      PKLogFacilityTypeGetObject(6uLL);
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 67109120;
          LODWORD(v44) = v28;
          _os_log_impl(&dword_18FC92000, v29, OS_LOG_TYPE_DEFAULT, "CCCryptorStatus error: %d. Failed to decrypt data with shared secret", buf, 8u);
        }

        v7 = v39;
        v12 = v38;
        if (a4)
        {
          objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.decryptionError"), 1, 0, v24, v35, v36, 16);
          v31 = 0;
          *a4 = (CFErrorRef)(id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v31 = 0;
        }
      }
      else
      {
        if (v30)
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_18FC92000, v29, OS_LOG_TYPE_DEFAULT, "Successfully decrypted data with shared secret", buf, 2u);
        }

        v31 = v25;
        v7 = v39;
        v12 = v38;
      }

    }
    else
    {
      v25 = error;
      PKLogFacilityTypeGetObject(6uLL);
      v33 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v44 = v25;
        _os_log_impl(&dword_18FC92000, v33, OS_LOG_TYPE_DEFAULT, "Error computing shared secret: %@", buf, 0xCu);
      }

      if (a4)
      {
        v25 = objc_retainAutorelease(v25);
        v31 = 0;
        *a4 = v25;
      }
      else
      {
        v31 = 0;
      }
    }

  }
  else
  {
    v16 = error;
    PKLogFacilityTypeGetObject(6uLL);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v44 = v16;
      _os_log_impl(&dword_18FC92000, v32, OS_LOG_TYPE_DEFAULT, "Error creating public key from base64 server ephemeral public key: %@", buf, 0xCu);
    }

    if (a4)
    {
      v16 = objc_retainAutorelease(v16);
      v31 = 0;
      *a4 = v16;
    }
    else
    {
      v31 = 0;
    }
  }

  return v31;
}

id PKDecryptDeviceDataWithError(void *a1, __SecKey *a2, CFErrorRef *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  uint8_t v11[16];

  v5 = a1;
  if ((objc_msgSend(v5, "hasSensitiveCredentials") & 1) != 0)
  {
    objc_msgSend(v5, "ephemeralPublicKey");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "encryptedData");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    PKECDHDecryptDataWithEphemeralPublicKey(v6, v7, a2, a3);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKAccountErrorDomain"), 5, 0);
      *a3 = (CFErrorRef)(id)objc_claimAutoreleasedReturnValue();
    }

  }
  else
  {
    PKLogFacilityTypeGetObject(6uLL);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "Error decrypting virtual card because encrypted data or ephemeral public key are missing", v11, 2u);
    }

    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKAccountErrorDomain"), 5, 0);
      v8 = 0;
      *a3 = (CFErrorRef)(id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v8 = 0;
    }
  }

  return v8;
}

id PKECCV3EncryptDataWithCertChain(void *a1, void *a2, int a3, _QWORD *a4, CFErrorRef *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  __SecKey *v17;
  __SecKey *v18;
  __SecKey *v19;
  SecKeyRef v20;
  CFDataRef v21;
  CFDataRef v22;
  CFErrorRef v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const __CFDictionary *v27;
  CFDataRef v28;
  __CFError *v29;
  CFErrorRef v30;
  CFErrorRef v31;
  NSObject *v32;
  CFErrorRef v33;
  NSObject *v34;
  CFDataRef v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  void *v39;
  CFDataRef v41;
  CFDataRef v42;
  id v43;
  CFErrorRef error;
  SecTrustRef trust;
  _QWORD v46[2];
  _QWORD v47[2];
  uint8_t buf[4];
  CFErrorRef v49;
  _QWORD v50[4];
  _QWORD v51[6];

  v51[4] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  trust = 0;
  v10 = 0;
  if (!PKPaymentCreateAndValidateTrustWithCerts(a2, &trust, a3))
    goto LABEL_43;
  v11 = *MEMORY[0x1E0CD6A50];
  v12 = *MEMORY[0x1E0CD69F8];
  v50[0] = *MEMORY[0x1E0CD6A38];
  v50[1] = v12;
  v13 = *MEMORY[0x1E0CD6A00];
  v51[0] = v11;
  v51[1] = v13;
  v14 = *MEMORY[0x1E0C9AE40];
  v15 = *MEMORY[0x1E0CD6A20];
  v50[2] = *MEMORY[0x1E0CD69D8];
  v50[3] = v15;
  v51[2] = v14;
  v51[3] = &unk_1E2C3F010;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v51, v50, 4);
  v16 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  error = 0;
  v17 = SecKeyCreateRandomKey(v16, &error);
  if (!v17)
  {
    v31 = error;
    PKLogFacilityTypeGetObject(6uLL);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v49 = v31;
      _os_log_impl(&dword_18FC92000, v32, OS_LOG_TYPE_DEFAULT, "Error creating key pair: %@", buf, 0xCu);
    }

    if (a5)
      *a5 = objc_retainAutorelease(v31);

    goto LABEL_23;
  }
  v18 = v17;
  v19 = SecKeyCopyPublicKey(v17);
  v20 = SecTrustCopyKey(trust);
  v21 = SecKeyCopyExternalRepresentation(v19, &error);
  if (!v19 || !v20)
  {
    v33 = error;
    PKLogFacilityTypeGetObject(6uLL);
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v49 = v33;
      _os_log_impl(&dword_18FC92000, v34, OS_LOG_TYPE_DEFAULT, "Error gettting public key or certificate key: %@", buf, 0xCu);
    }

    if (a5)
      *a5 = objc_retainAutorelease(v33);
    if (v20)
      CFRelease(v20);
    if (v19)
      CFRelease(v19);
    CFRelease(v18);

LABEL_23:
    v10 = 0;
LABEL_42:
    v39 = 0;
    goto LABEL_46;
  }
  v22 = SecKeyCopyExternalRepresentation(v20, &error);
  v42 = v21;
  if (v22)
  {
    v23 = (CFErrorRef)-[__CFData mutableCopy](v21, "mutableCopy");
    v41 = v22;
    -[__CFError appendData:](v23, "appendData:", v22);
    v24 = *MEMORY[0x1E0CD6EF8];
    v47[0] = &unk_1E2C3F040;
    v25 = *MEMORY[0x1E0CD6F00];
    v46[0] = v24;
    v46[1] = v25;
    v26 = (void *)-[__CFError copy](v23, "copy");
    v47[1] = v26;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v47, v46, 2);
    v27 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    v28 = SecKeyCopyKeyExchangeResult(v18, (SecKeyAlgorithm)*MEMORY[0x1E0CD6D88], v20, v27, &error);
    CFRelease(v20);
    CFRelease(v18);
    if (v28)
    {
      v43 = 0;
      PKECCV3EncryptDataWithDerivedSharedSecret(v28, v9, &v43);
      v10 = (id)objc_claimAutoreleasedReturnValue();
      v29 = (__CFError *)v43;
      if (v29)
      {
        v30 = v29;
      }
      else
      {
        *a4 = SecKeyCopyExternalRepresentation(v19, &error);
        v30 = error;
        if (error)
        {
          if (a5)
            *a5 = objc_retainAutorelease(error);

          v10 = 0;
        }
      }
      CFRelease(v19);
      v37 = 0;
    }
    else
    {
      CFRelease(v19);
      v30 = error;
      PKLogFacilityTypeGetObject(6uLL);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v49 = v30;
        _os_log_impl(&dword_18FC92000, v38, OS_LOG_TYPE_DEFAULT, "Error computing shared secret: %@", buf, 0xCu);
      }

      if (a5)
      {
        v30 = objc_retainAutorelease(v30);
        v10 = 0;
        *a5 = v30;
      }
      else
      {
        v10 = 0;
      }
      v37 = 1;
    }

    v35 = v41;
  }
  else
  {
    v35 = 0;
    v23 = error;
    PKLogFacilityTypeGetObject(6uLL);
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v49 = v23;
      _os_log_impl(&dword_18FC92000, v36, OS_LOG_TYPE_DEFAULT, "Error creating key data: %@", buf, 0xCu);
    }

    if (a5)
      *a5 = objc_retainAutorelease(v23);
    CFRelease(v20);
    CFRelease(v19);
    CFRelease(v18);
    v10 = 0;
    v37 = 1;
  }

  if (v37)
    goto LABEL_42;
LABEL_43:
  if (trust)
    CFRelease(trust);
  v10 = v10;
  v39 = v10;
LABEL_46:

  return v39;
}

id PKECCV3EncryptDataWithDerivedSharedSecret(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  int v21;
  NSObject *v22;
  id v23;
  void *v24;
  void *v25;
  NSObject *v26;
  _QWORD *v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v5, "length");
  v8 = v7;
  if (v7 >= 0x10)
    v9 = 16;
  else
    v9 = v7;
  v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", objc_msgSend(v6, "length") + 16);
  v30 = v5;
  v29 = (void *)v10;
  if (v9)
  {
    v11 = (void *)v10;
    v28 = a3;
    v12 = objc_alloc(MEMORY[0x1E0C99D50]);
    v13 = objc_retainAutorelease(v5);
    v14 = (void *)objc_msgSend(v12, "initWithBytes:length:", objc_msgSend(v13, "bytes"), v9);
    v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", objc_msgSend(objc_retainAutorelease(v13), "bytes") + v9, v8 - v9);
    v16 = objc_retainAutorelease(v14);
    objc_msgSend(v16, "bytes");
    objc_msgSend(v16, "length");
    v17 = objc_retainAutorelease(v15);
    objc_msgSend(v17, "bytes");
    objc_msgSend(v17, "length");
    v18 = objc_retainAutorelease(v6);
    objc_msgSend(v18, "bytes");
    objc_msgSend(v18, "length");
    v19 = objc_retainAutorelease(v11);
    objc_msgSend(v19, "mutableBytes");
    v20 = objc_retainAutorelease(v19);
    objc_msgSend(v20, "mutableBytes");
    objc_msgSend(v18, "length");
    v21 = CCCryptorGCMOneshotEncrypt();

    a3 = v28;
    if (!v21)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18FC92000, v22, OS_LOG_TYPE_DEFAULT, "Successfully encrypted data with shared secret", buf, 2u);
      }

      v23 = v20;
      v24 = v30;
      v25 = v29;
      goto LABEL_15;
    }
  }
  else
  {
    v21 = -4308;
  }
  PKLogFacilityTypeGetObject(6uLL);
  v26 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v32 = v21;
    _os_log_impl(&dword_18FC92000, v26, OS_LOG_TYPE_DEFAULT, "CCCryptorStatus error: %d. Failed to encrypt data with shared secret", buf, 8u);
  }

  v24 = v5;
  v25 = v29;
  if (a3)
  {
    objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.encryptionError"), 1, 0);
    v23 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v23 = 0;
  }
LABEL_15:

  return v23;
}

id PKECCV3DecryptDataWithEphemeralPublicKey(void *a1, void *a2, __SecKey *a3, _QWORD *a4)
{
  const __CFData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  __SecKey *v12;
  __SecKey *v13;
  CFDataRef v14;
  CFDataRef v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const __CFDictionary *v21;
  CFErrorRef v22;
  id v24;
  __CFError *v25;
  CFErrorRef error;
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[3];
  _QWORD v30[4];

  v30[3] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v24 = a2;
  error = 0;
  v8 = *MEMORY[0x1E0CD6A50];
  v9 = *MEMORY[0x1E0CD69F8];
  v29[0] = *MEMORY[0x1E0CD6A38];
  v29[1] = v9;
  v10 = *MEMORY[0x1E0CD6A10];
  v30[0] = v8;
  v30[1] = v10;
  v29[2] = *MEMORY[0x1E0CD6A20];
  v30[2] = &unk_1E2C3F010;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v30, v29, 3);
  v11 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  v12 = SecKeyCreateWithData(v7, v11, &error);
  v13 = SecKeyCopyPublicKey(a3);
  v14 = SecKeyCopyExternalRepresentation(v13, &error);
  v15 = 0;
  v16 = 0;
  if (error)
  {
LABEL_4:
    if (!v12)
      goto LABEL_6;
    goto LABEL_5;
  }
  v17 = (void *)-[__CFData mutableCopy](v7, "mutableCopy");
  objc_msgSend(v17, "appendData:", v14);
  v18 = *MEMORY[0x1E0CD6EF8];
  v28[0] = &unk_1E2C3F040;
  v19 = *MEMORY[0x1E0CD6F00];
  v27[0] = v18;
  v27[1] = v19;
  v20 = (void *)objc_msgSend(v17, "copy");
  v28[1] = v20;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
  v21 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  v15 = SecKeyCopyKeyExchangeResult(a3, (SecKeyAlgorithm)*MEMORY[0x1E0CD6D88], v12, v21, &error);
  if (error)
  {
    v16 = 0;
    goto LABEL_4;
  }
  v25 = 0;
  PKECCV3DecryptDataWithDerivedSharedSecret(v15, v24, &v25);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  error = v25;
  if (v12)
LABEL_5:
    CFRelease(v12);
LABEL_6:
  if (v13)
    CFRelease(v13);
  v22 = error;
  if (a4)
    *a4 = objc_retainAutorelease(error);

  return v16;
}

id PKECCV3DecryptDataWithDerivedSharedSecret(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  v5 = a1;
  v6 = a2;
  v7 = objc_msgSend(v5, "length");
  v8 = v7;
  if (v7 >= 0x10)
    v9 = 16;
  else
    v9 = v7;
  v10 = objc_msgSend(v6, "length") - 16;
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DF0]), "initWithLength:", v10);
  if (!v9)
    goto LABEL_6;
  v29 = a3;
  v12 = objc_alloc(MEMORY[0x1E0C99D50]);
  v13 = objc_retainAutorelease(v5);
  v14 = (void *)objc_msgSend(v12, "initWithBytes:length:", objc_msgSend(v13, "bytes"), v9);
  v15 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBytes:length:", objc_msgSend(objc_retainAutorelease(v13), "bytes") + v9, v8 - v9);
  v16 = objc_retainAutorelease(v14);
  objc_msgSend(v16, "bytes");
  objc_msgSend(v16, "length");
  v17 = objc_retainAutorelease(v15);
  objc_msgSend(v17, "bytes");
  objc_msgSend(v17, "length");
  v18 = objc_retainAutorelease(v6);
  objc_msgSend(v18, "bytes");
  v19 = objc_msgSend(v11, "length");
  v20 = objc_retainAutorelease(v11);
  v21 = v6;
  v22 = objc_msgSend(v20, "mutableBytes");
  v23 = objc_msgSend(objc_retainAutorelease(v18), "bytes");
  v28 = v23 + objc_msgSend(v20, "length");
  v26 = v19;
  v27 = v22;
  v6 = v21;
  a3 = v29;
  LODWORD(v19) = CCCryptorGCMOneshotDecrypt();

  if (!(_DWORD)v19)
  {
    v24 = (void *)objc_msgSend(v20, "copy", v26, v27, v28, 16);
  }
  else
  {
LABEL_6:
    if (a3)
    {
      objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.decryptionError"), 1, 0);
      v24 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v24 = 0;
    }
  }

  return v24;
}

id PKECCV3PerformKDF(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  objc_class *v6;
  id v7;
  void *v8;
  id v9;
  int AnsiX963;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (objc_class *)MEMORY[0x1E0C99DF0];
  v7 = a2;
  v8 = (void *)objc_msgSend([v6 alloc], "initWithLength:", 32);
  v9 = objc_retainAutorelease(v7);
  objc_msgSend(v9, "bytes");
  objc_msgSend(v9, "length");

  AnsiX963 = CCKDFParametersCreateAnsiX963();
  if (!AnsiX963)
  {
    v11 = objc_retainAutorelease(v5);
    objc_msgSend(v11, "bytes");
    objc_msgSend(v11, "length");
    objc_msgSend(objc_retainAutorelease(v8), "mutableBytes");
    AnsiX963 = CCDeriveKey();
  }
  if (a3 && AnsiX963)
  {
    v12 = (void *)MEMORY[0x1E0CB35C8];
    v16 = *MEMORY[0x1E0CB2938];
    v17[0] = CFSTR("EC_v3 KDF failed.");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.decryptionError"), 1, v13);
    *a3 = (id)objc_claimAutoreleasedReturnValue();

  }
  v14 = (void *)objc_msgSend(v8, "copy", 0);

  return v14;
}

PKEncryptedDataObject *PKEncryptTransactionAuthenticationPasscode(void *a1, void *a2, void *a3, _QWORD *a4)
{
  return PKEncryptTransactionAuthenticationPasscodeWithSession(a1, a2, a3, 0, a4);
}

PKEncryptedDataObject *PKEncryptTransactionAuthenticationPasscodeWithSession(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  CFAllocatorRef *v13;
  __SecCertificate *v14;
  uint64_t v15;
  __SecKey *v16;
  void *v17;
  CFDataRef v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  SecAccessControlRef v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  PKEncryptedDataObject *v45;
  _QWORD *v47;
  SecAccessControlRef cf;
  void *v49;
  void *v50;
  id v51;
  id v52;
  void *v53;
  id v54;
  id v55;
  id v56[3];
  id v57[4];
  CFErrorRef error;
  void *v59;
  const __CFString *v60;
  const __CFString *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v64[3];

  v64[1] = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v52 = a2;
  v10 = a3;
  v11 = a4;
  v12 = objc_msgSend(v10, "count");
  v13 = (CFAllocatorRef *)MEMORY[0x1E0C9AE00];
  v50 = v10;
  if (!v12)
  {
    v18 = 0;
    v15 = 0;
LABEL_9:
    v17 = 0;
    goto LABEL_10;
  }
  error = 0;
  v14 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (CFDataRef)objc_msgSend(v10, "firstObject"));
  v15 = (uint64_t)v14;
  if (!v14)
  {
    v18 = 0;
    goto LABEL_9;
  }
  v16 = SecCertificateCopyKey(v14);
  v17 = (void *)SecCertificateCopySubjectPublicKeyInfoSHA256Digest();
  CFRelease((CFTypeRef)v15);
  if (v16)
  {
    v18 = SecKeyCopyExternalRepresentation(v16, &error);
    CFRelease(v16);
    if (error)
      v15 = (uint64_t)error;
    else
      v15 = 0;
  }
  else
  {
    v18 = 0;
    v15 = 0;
  }
LABEL_10:
  if (!(v15 | (unint64_t)v18))
  {
    v19 = (void *)MEMORY[0x1E0CB35C8];
    v63 = *MEMORY[0x1E0CB2938];
    v64[0] = CFSTR("Missing certificates");
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v64, &v63, 1);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "errorWithDomain:code:userInfo:", CFSTR("com.apple.PassKit.encryptionError"), 1, v20);
    v15 = objc_claimAutoreleasedReturnValue();

  }
  v49 = v11;
  v53 = v18;
  if (v15)
  {
    v21 = v9;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v51 = 0;
    goto LABEL_42;
  }
  error = 0;
  v28 = SecAccessControlCreateWithFlags(*v13, (CFTypeRef)*MEMORY[0x1E0CD68B0], 0x40000000uLL, &error);
  v15 = (uint64_t)error;
  cf = v28;
  if (error)
  {
    v27 = 0;
LABEL_21:
    v51 = 0;
    v26 = 0;
    goto LABEL_22;
  }
  v61 = CFSTR("ock");
  v62 = MEMORY[0x1E0C9AAB0];
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v62, &v61, 1);
  v29 = (void *)objc_claimAutoreleasedReturnValue();
  SecAccessControlSetConstraints();
  if (v11)
  {
    +[PKSecureElement primarySecureElementIdentifier](PKSecureElement, "primarySecureElementIdentifier");
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    v57[3] = 0;
    SESKeyCreateWithSession();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (uint64_t)0;

  }
  else
  {
    v57[2] = 0;
    SESKeyCreate();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (uint64_t)0;
  }

  if (v15)
    goto LABEL_21;
  v57[1] = 0;
  SESKeyPublicKey();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v32 = 0;
  if (v32)
  {
    v15 = (uint64_t)v32;
    v51 = 0;
    goto LABEL_22;
  }
  v59 = &unk_1E2C3F058;
  v60 = CFSTR("Encrypt Payment PIN");
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v60, &v59, 1);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  v57[0] = 0;
  v51 = objc_alloc_init(MEMORY[0x1E0CC12A0]);
  v34 = (id)objc_msgSend(v51, "evaluateAccessControl:operation:options:error:", cf, 5, v33, v57);
  v15 = (uint64_t)v57[0];

  if (v15)
  {
LABEL_22:
    v25 = 0;
    if (!v27)
      goto LABEL_33;
    goto LABEL_23;
  }
  if (!v11)
  {
    objc_msgSend(v51, "externalizedContext");
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v56[1] = 0;
    SESKeyExchange();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (uint64_t)0;

    if (!v27)
      goto LABEL_33;
    goto LABEL_32;
  }
  +[PKSecureElement primarySecureElementIdentifier](PKSecureElement, "primarySecureElementIdentifier");
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "externalizedContext");
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v56[2] = 0;
  SESKeyExchangeWithSession();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (uint64_t)0;

  if (v27)
  {
LABEL_23:
    if (v11)
    {
      +[PKSecureElement primarySecureElementIdentifier](PKSecureElement, "primarySecureElementIdentifier");
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      SESKeyDeleteWithSession();

      goto LABEL_33;
    }
LABEL_32:
    SESKeyDelete();
  }
LABEL_33:
  if (v15)
  {
    v21 = v9;
    v24 = 0;
    v23 = 0;
    v22 = 0;
    goto LABEL_40;
  }
  v47 = a5;
  v38 = (void *)objc_msgSend(v26, "mutableCopy");
  objc_msgSend(v38, "appendData:", v53);
  v39 = (void *)objc_msgSend(v38, "copy");
  v56[0] = 0;
  PKECCV3PerformKDF(v25, v39, v56);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = (uint64_t)v56[0];

  if (v15)
  {
    v21 = v9;
    v24 = 0;
  }
  else
  {
    v40 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    v21 = v9;
    objc_msgSend(v40, "setObject:forKeyedSubscript:", v9, CFSTR("PIN"));
    objc_msgSend(v52, "authenticationContext");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "nonce");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v42, "hexEncoding");
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setObject:forKeyedSubscript:", v43, CFSTR("nonce"));

    objc_msgSend(v52, "barcodeIdentifier");
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v40, "setObject:forKeyedSubscript:", v44, CFSTR("barcodeIdentifier"));

    v55 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v40, 0, &v55);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (uint64_t)v55;

    if (!v15)
    {
      v54 = 0;
      PKECCV3EncryptDataWithDerivedSharedSecret(v23, v24, &v54);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (uint64_t)v54;
      goto LABEL_39;
    }
  }
  v22 = 0;
LABEL_39:
  a5 = v47;
LABEL_40:
  if (cf)
    CFRelease(cf);
LABEL_42:
  if (a5)
    *a5 = objc_retainAutorelease((id)v15);
  v45 = 0;
  if (v17 && v26 && v22)
  {
    v45 = objc_alloc_init(PKEncryptedDataObject);
    -[PKEncryptedDataObject setData:](v45, "setData:", v22);
    -[PKEncryptedDataObject setPublicKeyHash:](v45, "setPublicKeyHash:", v17);
    -[PKEncryptedDataObject setEphemeralPublicKey:](v45, "setEphemeralPublicKey:", v26);
    -[PKEncryptedDataObject setVersion:](v45, "setVersion:", 1);
  }

  return v45;
}

id PKAESGCMEncrypt(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint8_t buf[16];
  uint8_t __buf[24];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  if (v5 > 0x20 || ((1 << v5) & 0x101010000) == 0)
  {
    PKLogFacilityTypeGetObject(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__buf = 0;
      _os_log_impl(&dword_18FC92000, v18, OS_LOG_TYPE_DEFAULT, "Invalid AES key length", __buf, 2u);
    }

    v14 = 0;
  }
  else
  {
    arc4random_buf(__buf, 0xCuLL);
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", __buf, 12);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v4, "length");
    v9 = malloc_type_malloc(v8 + 16, 0x6E2601FDuLL);
    v10 = malloc_type_malloc(0x10uLL, 0x40EE77EFuLL);
    v11 = objc_retainAutorelease(v3);
    objc_msgSend(v11, "bytes");
    objc_msgSend(v11, "length");
    v12 = objc_retainAutorelease(v7);
    objc_msgSend(v12, "bytes");
    objc_msgSend(v12, "length");
    objc_msgSend(objc_retainAutorelease(v4), "bytes");
    if (CCCryptorGCMOneshotEncrypt())
    {
      PKLogFacilityTypeGetObject(0);
      v13 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18FC92000, v13, OS_LOG_TYPE_DEFAULT, "AES decrypt failure", buf, 2u);
      }

      free(v9);
      free(v10);
      v14 = 0;
    }
    else
    {
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v10, 16, v8, v9, v10, 16);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v9, v8);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_alloc_init(MEMORY[0x1E0C99DF0]);
      objc_msgSend(v17, "appendData:", v12);
      objc_msgSend(v17, "appendData:", v16);
      objc_msgSend(v17, "appendData:", v15);
      v14 = (void *)objc_msgSend(v17, "copy");

    }
  }

  return v14;
}

id PKAESGCMDecrypt(void *a1, void *a2)
{
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  NSObject *v18;
  void *v19;
  uint64_t v21;
  id v22;
  id v23;
  uint8_t buf[16];
  __int16 v25;
  uint8_t v26[2];

  v3 = a1;
  v4 = a2;
  v5 = objc_msgSend(v3, "length");
  if (v5 > 0x20 || ((1 << v5) & 0x101010000) == 0)
  {
    PKLogFacilityTypeGetObject(0);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v26 = 0;
      v9 = "Invalid AES key length";
      v10 = v26;
      goto LABEL_14;
    }
LABEL_15:
    v19 = 0;
    goto LABEL_18;
  }
  v7 = objc_msgSend(v4, "length");
  if (v7 <= 0x1B)
  {
    PKLogFacilityTypeGetObject(0);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v9 = "Invalid cipher text length";
      v10 = (uint8_t *)&v25;
LABEL_14:
      _os_log_impl(&dword_18FC92000, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  v11 = v7;
  objc_msgSend(v4, "subdataWithRange:", 0, 12);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "subdataWithRange:", v11 - 16, 16);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "subdataWithRange:", 12, v11 - 28);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = objc_msgSend(v13, "length");
  v15 = malloc_type_malloc(v14 + 16, 0xCDAA830DuLL);
  v16 = objc_retainAutorelease(v3);
  objc_msgSend(v16, "bytes");
  objc_msgSend(v16, "length");
  v8 = objc_retainAutorelease(v12);
  -[NSObject bytes](v8, "bytes");
  v23 = objc_retainAutorelease(v13);
  objc_msgSend(v23, "bytes");
  v17 = objc_retainAutorelease(v22);
  v21 = objc_msgSend(v17, "bytes");
  if (CCCryptorGCMOneshotDecrypt())
  {
    PKLogFacilityTypeGetObject(0);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_18FC92000, v18, OS_LOG_TYPE_DEFAULT, "AES decrypt failure", buf, 2u);
    }

    free(v15);
    v19 = 0;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytesNoCopy:length:", v15, v14, v14, v15, v21, 16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
  }

LABEL_18:
  return v19;
}

uint64_t PKApplicationMessageSourceFromString(void *a1, _QWORD *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  uint64_t v13;
  __CFString *v14;
  __CFString *v15;
  int v16;
  __CFString *v17;
  __CFString *v18;
  int v19;
  __CFString *v20;
  __CFString *v21;
  int v22;
  __CFString *v23;
  __CFString *v24;
  int v25;
  __CFString *v26;
  __CFString *v27;
  int v28;

  v3 = a1;
  v4 = v3;
  if (!v3)
    goto LABEL_34;
  v5 = (__CFString *)v3;
  v6 = v5;
  if (v5 != CFSTR("local"))
  {
    v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("local"));

    if (!v7)
    {

      v14 = v6;
      if (v14 == CFSTR("finance_kit")
        || (v15 = v14,
            v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("finance_kit")),
            v15,
            v16))
      {
        if (a2)
          *a2 = 1;
        goto LABEL_7;
      }

      v17 = v15;
      if (v17 == CFSTR("sharingManager")
        || (v18 = v17,
            v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("sharingManager")),
            v18,
            v19))
      {
        if (a2)
          *a2 = 2;
        goto LABEL_8;
      }

      v20 = v18;
      if (v20 == CFSTR("paymentService")
        || (v21 = v20,
            v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("paymentService")),
            v21,
            v22))
      {
        if (a2)
          *a2 = 3;
        goto LABEL_9;
      }

      v23 = v21;
      if (v23 == CFSTR("notificationManager")
        || (v24 = v23,
            v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("notificationManager")),
            v24,
            v25))
      {
        if (a2)
          *a2 = 4;
        goto LABEL_10;
      }

      v26 = v24;
      if (v26 == CFSTR("pendingProvisioningManager")
        || (v27 = v26,
            v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("pendingProvisioningManager")),
            v27,
            v28))
      {
        if (a2)
          *a2 = 5;
        goto LABEL_11;
      }

      if (a2)
      {
        v13 = 0;
        *a2 = 0;
        goto LABEL_35;
      }
LABEL_34:
      v13 = 0;
      goto LABEL_35;
    }
  }
  if (a2)
    *a2 = 0;

  v8 = v6;
LABEL_7:

  v9 = v6;
LABEL_8:

  v10 = v6;
LABEL_9:

  v11 = v6;
LABEL_10:

  v12 = v6;
LABEL_11:

  v13 = 1;
LABEL_35:

  return v13;
}

id PDAccountServiceInterface()
{
  if (qword_1ECF22880 != -1)
    dispatch_once(&qword_1ECF22880, &__block_literal_global_139);
  return (id)_MergedGlobals_246;
}

id PKAccountServiceInterface()
{
  if (qword_1ECF22890 != -1)
    dispatch_once(&qword_1ECF22890, &__block_literal_global_401);
  return (id)qword_1ECF22888;
}

const __CFString *PKAccountSupportTopicTransactionSubtypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("other");
  if (a1 == 1)
    v1 = CFSTR("appleRetail");
  if (a1 == 2)
    return CFSTR("appleServices");
  else
    return v1;
}

uint64_t PKAccountSupportTopicTransactionSubtypeForTransaction(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "merchant");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "mapsBrand");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "identifier");

  if (v3 == 0x8111C8FF4A86922BLL)
    return 1;
  else
    return 2 * (v3 == 0xE9C62ACBF5623F6DLL);
}

uint64_t PKDiscoveryObjectActionFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("dismiss"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(CFSTR("actOn"), "isEqualToString:", v1))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKDiscoveryPassQualifierFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("peerPayment")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("primaryCredit")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("any")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKDiscoveryPassQualifierToString(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) > 4)
    return 0;
  else
    return off_1E2AD3260[a1 + 1];
}

id PKTapToProvisionSupportedPaymentNetworks()
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", CFSTR("Visa"), CFSTR("AmEx"), CFSTR("MasterCard"), 0);
}

Class initSTSTapToProvisionParameters()
{
  Class result;

  if (qword_1ECF228A0 != -1)
    dispatch_once(&qword_1ECF228A0, &__block_literal_global_141);
  result = objc_getClass("STSTapToProvisionParameters");
  _MergedGlobals_247 = (uint64_t)result;
  getSTSTapToProvisionParametersClass[0] = (uint64_t (*)())STSTapToProvisionParametersFunction;
  return result;
}

id STSTapToProvisionParametersFunction()
{
  return (id)_MergedGlobals_247;
}

Class initSTSTapToProvisionReader()
{
  Class result;

  if (qword_1ECF228A0 != -1)
    dispatch_once(&qword_1ECF228A0, &__block_literal_global_141);
  result = objc_getClass("STSTapToProvisionReader");
  qword_1ECF228A8 = (uint64_t)result;
  getSTSTapToProvisionReaderClass[0] = (uint64_t (*)())STSTapToProvisionReaderFunction;
  return result;
}

id STSTapToProvisionReaderFunction()
{
  return (id)qword_1ECF228A8;
}

uint64_t requestTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("expressAutomaticSelectionCriteria")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("precursorPass")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPassUpgradePrecursorPassActionTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("generic_reprovision")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("proofing")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("issuer_app")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("car_key_pairing")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPassUpgradePrecursorPassActionGenericReprovisionSubTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("hsa2")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("strong_password")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("se_full")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cvv")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("terms_and_conditions")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1901AA974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;
  uint64_t v20;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose((const void *)(v20 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1901ABCE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1901AC404(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 112));
  _Unwind_Resume(a1);
}

void sub_1901AC5F4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1901AC80C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1901ACA24(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id PDTrustedDeviceEnrollmentInfoProviderExportedInterface()
{
  if (qword_1ECF228B8 != -1)
    dispatch_once(&qword_1ECF228B8, &__block_literal_global_143);
  return (id)_MergedGlobals_248;
}

void sub_1901AFAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1901AFEB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t PassEntriesValidateStructure(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  NSObject *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint8_t buf[8];
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_opt_class();
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v13 = 0u;
      v2 = v1;
      v3 = -[NSObject countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)v11;
        while (2)
        {
          for (i = 0; i != v4; ++i)
          {
            if (*(_QWORD *)v11 != v5)
              objc_enumerationMutation(v2);
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              PKLogFacilityTypeGetObject(6uLL);
              v8 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_18FC92000, v8, OS_LOG_TYPE_DEFAULT, "PKIssuerProvisioningExtensionConsumerContext: pass entries are not a valid entity class", buf, 2u);
              }

              goto LABEL_18;
            }
          }
          v4 = -[NSObject countByEnumeratingWithState:objects:count:](v2, "countByEnumeratingWithState:objects:count:", &v10, v15, 16);
          v7 = 1;
          if (v4)
            continue;
          break;
        }
      }
      else
      {
        v7 = 1;
      }
    }
    else
    {
      PKLogFacilityTypeGetObject(6uLL);
      v2 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "PKIssuerProvisioningExtensionConsumerContext: pass entries is not a valid data structure", buf, 2u);
      }
LABEL_18:
      v7 = 0;
    }

  }
  else
  {
    v7 = 1;
  }

  return v7;
}

void sub_1901B04D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1901B0B98(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Unwind_Resume(a1);
}

void sub_1901B1D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1901B1F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1901B21A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1901B25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double _interiorPointForCorner(uint64_t a1, double result, double a3, double a4)
{
  double v4;

  switch(a1)
  {
    case 1:
      v4 = a3 + a4;
      goto LABEL_6;
    case 2:
      result = a4 - result;
      break;
    case 4:
      result = result + a4;
      break;
    case 8:
      v4 = a4 - a3;
LABEL_6:
      result = v4;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1901B4CD8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t PKCanMakePaymentsForIDS()
{
  uint64_t result;

  result = PKSecureElementIsAvailable();
  if ((_DWORD)result)
    return PKInAppPaymentAllowed() != 0;
  return result;
}

BOOL PKCanMakePayments()
{
  PKInAppPaymentService *v0;
  _BOOL4 v1;

  v0 = objc_alloc_init(PKInAppPaymentService);
  v1 = -[PKInAppPaymentService secureElementStatus:](v0, "secureElementStatus:", 0);

  return v1 && PKInAppPaymentAllowed() != 0;
}

void PKCanMakePaymentsWithCompletion(void *a1)
{
  id v1;
  PKInAppPaymentService *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v1 = a1;
  v2 = objc_alloc_init(PKInAppPaymentService);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __PKCanMakePaymentsWithCompletion_block_invoke;
  v4[3] = &unk_1E2AD3870;
  v5 = v1;
  v3 = v1;
  -[PKInAppPaymentService secureElementStatusWithCompletion:](v2, "secureElementStatusWithCompletion:", v4);

}

uint64_t PKCanMakePaymentsUsingNetworks(void *a1, void *a2)
{
  return PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilitiesAndRequestType(a1, 0, 31, a2, 0);
}

uint64_t PKCanMakePaymentsUsingNetworksWithCapabilities(void *a1, uint64_t a2, void *a3)
{
  return PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilitiesAndRequestType(a1, 0, a2, a3, 0);
}

uint64_t PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilities(void *a1, void *a2, uint64_t a3, void *a4)
{
  return PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilitiesAndRequestType(a1, a2, a3, a4, 0);
}

void PKCanMakePaymentsWithMerchantIdentifierAndDomain(void *a1, void *a2, void *a3)
{
  PKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(a1, a2, 0, a3);
}

void PKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  PKInAppPaymentService *v12;
  uint64_t v13;
  id v14;
  PKInAppPaymentService *v15;
  id v16;
  id v17;
  NSObject *v18;
  NSObject *v19;
  id v20;
  id v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD v29[4];
  id v30;
  PKInAppPaymentService *v31;
  id v32;
  id v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD v37[5];
  id v38;
  _QWORD v39[3];
  char v40;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = dispatch_group_create();
  v39[0] = 0;
  v39[1] = v39;
  v39[2] = 0x2020000000;
  v40 = 0;
  v37[0] = 0;
  v37[1] = v37;
  v37[2] = 0x3032000000;
  v37[3] = __Block_byref_object_copy__48;
  v37[4] = __Block_byref_object_dispose__48;
  v38 = 0;
  v12 = objc_alloc_init(PKInAppPaymentService);
  dispatch_group_enter(v11);
  v13 = MEMORY[0x1E0C809B0];
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __PKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication_block_invoke;
  v29[3] = &unk_1E2AD3898;
  v35 = v39;
  v14 = v8;
  v30 = v14;
  v15 = v12;
  v31 = v15;
  v16 = v7;
  v32 = v16;
  v17 = v9;
  v33 = v17;
  v36 = v37;
  v18 = v11;
  v34 = v18;
  -[PKInAppPaymentService paymentHardwareStatusWithType:completion:](v15, "paymentHardwareStatusWithType:completion:", 1, v29);
  dispatch_get_global_queue(21, 0);
  v19 = objc_claimAutoreleasedReturnValue();
  v23[0] = v13;
  v23[1] = 3221225472;
  v23[2] = __PKCanMakePaymentsWithMerchantIdentifierDomainAndSourceApplication_block_invoke_2;
  v23[3] = &unk_1E2AD38C0;
  v24 = v16;
  v25 = v14;
  v26 = v10;
  v27 = v39;
  v28 = v37;
  v20 = v10;
  v21 = v14;
  v22 = v16;
  dispatch_group_notify(v18, v19, v23);

  _Block_object_dispose(v37, 8);
  _Block_object_dispose(v39, 8);

}

void sub_1901B5C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilitiesAndRequestType(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  objc_class *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v12 = a5;
  if (!PKCanMakePayments())
  {
    v16 = 0;
    goto LABEL_13;
  }
  if (!v9)
  {
    if (!objc_msgSend(v10, "count"))
      goto LABEL_9;
    goto LABEL_8;
  }
  v13 = (objc_class *)objc_opt_class();
  v14 = objc_opt_class();
  _PKAllNetworks();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = _PKPaymentValidateUnion(CFSTR("PKPaymentRequest"), v9, CFSTR("supportedNetworks"), v13, v14, v15, 0, 1, 0, 0);

  if (objc_msgSend(v10, "count"))
  {
LABEL_8:
    v17 = (objc_class *)objc_opt_class();
    v18 = objc_opt_class();
    objc_msgSend(MEMORY[0x1E0C99DC8], "ISOCountryCodes");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v18) = _PKPaymentValidateUnion(CFSTR("PKPaymentRequest"), v10, CFSTR("supportedCountries"), v17, v18, v19, 1, 0, 0, 0);

    v16 = 0;
    if ((v18 & 1) == 0)
      goto LABEL_13;
LABEL_9:
    +[PKPassLibrary sharedInstance](PKPassLibrary, "sharedInstance");
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    if (v9)
      v21 = v9;
    else
      v21 = (id)MEMORY[0x1E0C9AA60];
    objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v21);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = objc_msgSend(v20, "hasPassesWithSupportedNetworks:merchantCapabilities:issuerCountryCodes:webDomain:paymentRequestType:isMultiTokensRequest:", v22, a3, v10, v11, v12, 0);

    goto LABEL_13;
  }
  if ((_DWORD)v16)
    goto LABEL_9;
LABEL_13:
  PKLogFacilityTypeGetObject(7uLL);
  v23 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315906;
    v26 = "PKCanMakePaymentsUsingNetworksIssuerCountryCodesWithCapabilitiesAndRequestType";
    v27 = 2112;
    v28 = v9;
    v29 = 1024;
    v30 = a3;
    v31 = 1024;
    v32 = v16;
    _os_log_impl(&dword_18FC92000, v23, OS_LOG_TYPE_DEFAULT, "%s (%@, %x) returns %d", buf, 0x22u);
  }

  return v16;
}

BOOL _PKPaymentValidateUnion(void *a1, void *a2, void *a3, objc_class *a4, uint64_t a5, void *a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  int v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  _BOOL8 v30;
  int v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  objc_class *v39;
  id v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  _BYTE v48[128];
  uint64_t v49;

  v15 = a10;
  v49 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v17 = a2;
  v18 = a3;
  v19 = a6;
  if (v17 && (objc_opt_isKindOfClass() & 1) != 0)
  {
    v39 = a4;
    v40 = v16;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v20 = v17;
    v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v43;
      while (2)
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_QWORD *)v43 != v23)
            objc_enumerationMutation(v20);
          if (a7)
          {
            if ((objc_msgSend(v19, "containsObject:", *(_QWORD *)(*((_QWORD *)&v42 + 1) + 8 * i)) & 1) == 0)
              goto LABEL_20;
          }
          else if ((objc_opt_isKindOfClass() & 1) == 0)
          {
LABEL_20:
            v25 = 0;
            v26 = 0;
            goto LABEL_22;
          }
        }
        v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
        if (v22)
          continue;
        break;
      }
      v25 = 1;
      v26 = 1;
    }
    else
    {
      v26 = 0;
      v25 = 1;
    }
LABEL_22:

    v29 = 0;
    if (a8)
      v31 = v26;
    else
      v31 = v25;
    if ((unint64_t)(a9 - 1) > 1)
    {
      a4 = v39;
    }
    else
    {
      a4 = v39;
      if (!v31)
      {
        v32 = (void *)MEMORY[0x1E0CB3940];
        _PKPaymentRequestGetDescriptivePropertyName(v18, a9, 0);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "stringWithFormat:", CFSTR("\"%@\" is not a supported value for %@"), v20, v33);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

      }
    }
    v30 = v31 != 0;
    v15 = a10;
    v16 = v40;
    if (!a10)
      goto LABEL_34;
  }
  else
  {
    if ((unint64_t)(a9 - 1) > 1)
    {
      if (a10)
        goto LABEL_32;
      v30 = 0;
      v29 = 0;
      goto LABEL_34;
    }
    v27 = (void *)MEMORY[0x1E0CB3940];
    _PKPaymentRequestGetDescriptivePropertyName(v18, a9, 0);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v27, "stringWithFormat:", CFSTR("Missing %@"), v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    v30 = 0;
    if (!a10)
      goto LABEL_34;
  }
  if (!v30)
  {
    if (v29)
    {
LABEL_33:
      v36 = (void *)MEMORY[0x1E0CB35C8];
      v46 = *MEMORY[0x1E0CB2D50];
      v47 = v29;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v47, &v46, 1);
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v37);
      *v15 = (id)objc_claimAutoreleasedReturnValue();

      v30 = 0;
      goto LABEL_34;
    }
LABEL_32:
    v34 = (void *)MEMORY[0x1E0CB3940];
    NSStringFromClass(a4);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "stringWithFormat:", CFSTR("%@ must contain an %@ property '%@' of objects of type '%@' within '%@'"), v16, v35, v18, a4, v19);
    v29 = (void *)objc_claimAutoreleasedReturnValue();

    goto LABEL_33;
  }
LABEL_34:

  return v30;
}

id _PKAllNetworks()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  _QWORD v6[32];

  v6[31] = *MEMORY[0x1E0C80C00];
  v6[0] = CFSTR("AmEx");
  v6[1] = CFSTR("Bancomat");
  v6[2] = CFSTR("Bancontact");
  v6[3] = CFSTR("PagoBancomat");
  v6[4] = CFSTR("CarteBancaire");
  v6[5] = CFSTR("CarteBancaires");
  v6[6] = CFSTR("CartesBancaires");
  v6[7] = CFSTR("ChinaUnionPay");
  v6[8] = CFSTR("Dankort");
  v6[9] = CFSTR("Discover");
  v6[10] = CFSTR("Eftpos");
  v6[11] = CFSTR("Electron");
  v6[12] = CFSTR("Elo");
  v6[13] = CFSTR("girocard");
  v6[14] = CFSTR("Interac");
  v6[15] = CFSTR("iD");
  v6[16] = CFSTR("JCB");
  v6[17] = CFSTR("mada");
  v6[18] = CFSTR("Maestro");
  v6[19] = CFSTR("MasterCard");
  v6[20] = CFSTR("Meeza");
  v6[21] = CFSTR("Mir");
  v6[22] = CFSTR("NAPAS");
  v6[23] = CFSTR("BankAxept");
  v6[24] = CFSTR("PostFinanceAG");
  v6[25] = CFSTR("PrivateLabel");
  v6[26] = CFSTR("QUICPay");
  v6[27] = CFSTR("Suica");
  v6[28] = CFSTR("Visa");
  v6[29] = CFSTR("VPay");
  v6[30] = CFSTR("Barcode");
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v6, 31);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  PKAdditionalSupportedNetworks();
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "allKeys");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v0, "arrayByAddingObjectsFromArray:", v3);
    v4 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v4 = v0;
  }

  return v4;
}

uint64_t PKCanMakePaymentsWithRemoteDevices()
{
  PKContinuityPaymentService *v0;
  uint64_t v1;

  v0 = objc_alloc_init(PKContinuityPaymentService);
  v1 = -[PKContinuityPaymentService canMakePaymentsWithRemoteDevices](v0, "canMakePaymentsWithRemoteDevices");

  return v1;
}

uint64_t PKHasRemoteDevices()
{
  PKContinuityPaymentService *v0;
  uint64_t v1;

  v0 = objc_alloc_init(PKContinuityPaymentService);
  v1 = -[PKContinuityPaymentService hasRemoteDevices](v0, "hasRemoteDevices");

  return v1;
}

uint64_t _PKPaymentValidateProperty(void *a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void **v22;
  uint64_t *v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[2];

  v31[1] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  objc_msgSend(v11, "valueForKey:", v12);
  v13 = objc_claimAutoreleasedReturnValue();
  v14 = (void *)v13;
  if (!a4 || v13)
  {
    if (v13 && (objc_opt_isKindOfClass() & 1) == 0)
    {
      if (a6)
      {
        v17 = (void *)MEMORY[0x1E0CB3940];
        if ((unint64_t)(a5 - 1) > 1)
        {
          objc_msgSend((id)objc_opt_class(), "description");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "stringWithFormat:", CFSTR("%@ property '%@' must be of type '%@'"), v18, v12, a3);
        }
        else
        {
          _PKPaymentRequestGetDescriptivePropertyName(v12, a5, 0);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v17, "stringWithFormat:", CFSTR("\"%@\" is not a supported value for %@"), v14, v18, v27);
        }
        v19 = (void *)objc_claimAutoreleasedReturnValue();

        v20 = (void *)MEMORY[0x1E0CB35C8];
        v28 = *MEMORY[0x1E0CB2D50];
        v29 = v19;
        v21 = (void *)MEMORY[0x1E0C99D80];
        v22 = &v29;
        v23 = &v28;
        goto LABEL_16;
      }
    }
    else
    {
      a6 = 1;
    }
  }
  else if (a6)
  {
    v15 = (void *)MEMORY[0x1E0CB3940];
    if ((unint64_t)(a5 - 1) > 1)
    {
      objc_msgSend((id)objc_opt_class(), "description");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringWithFormat:", CFSTR("%@ must contain a property '%@' of type '%@'"), v16, v12, a3);
    }
    else
    {
      _PKPaymentRequestGetDescriptivePropertyName(v12, a5, 0);
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringWithFormat:", CFSTR("Missing %@"), v16, v26, v27);
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = (void *)MEMORY[0x1E0CB35C8];
    v30 = *MEMORY[0x1E0CB2D50];
    v31[0] = v19;
    v21 = (void *)MEMORY[0x1E0C99D80];
    v22 = (void **)v31;
    v23 = &v30;
LABEL_16:
    objc_msgSend(v21, "dictionaryWithObjects:forKeys:count:", v22, v23, 1);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v24);
    *(_QWORD *)a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
  }

  return a6;
}

uint64_t _PKPaymentIsValidCurrencyAmount(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5 && v6)
  {
    objc_msgSend(MEMORY[0x1E0CB35A0], "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", 1, (__int16)PKDefaultFractionDigitsForCurrencyCode(v6), 0, 0, 0, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "decimalNumberByRoundingAccordingToBehavior:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v5, "isEqualToNumber:", v9);
    v11 = v10;
    if (a3 && (v10 & 1) == 0)
    {
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Amount is not valid for specified currency. Amount: %@, Currency: %@"), v5, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = (void *)MEMORY[0x1E0CB35C8];
      v17 = *MEMORY[0x1E0CB2D50];
      v18 = v12;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v14);
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      v11 = 0;
    }
  }
  else
  {
    if (!a3)
    {
      v11 = 0;
      goto LABEL_9;
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Currency amounts must have an amount and currency code. Amount: %@, Currency: %@"), v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v15 = (void *)MEMORY[0x1E0CB35C8];
    v19 = *MEMORY[0x1E0CB2D50];
    v20[0] = v8;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, &v19, 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v9);
    v11 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_9:
  return v11;
}

uint64_t _PKPaymentValidatePropertyArray(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  void (**v15)(id, void *);
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  char v23;
  id v24;
  void *v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  _QWORD *v46;
  void *v47;
  id v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _QWORD v53[2];
  _QWORD v54[2];
  _BYTE v55[128];
  uint64_t v56;
  id v57;
  uint64_t v58;
  _QWORD v59[3];

  v59[1] = *MEMORY[0x1E0C80C00];
  v13 = a1;
  v14 = a2;
  v15 = a4;
  objc_msgSend(v13, "valueForKey:", v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (!a5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && objc_msgSend(v16, "count"))
  {
    if (!objc_msgSend(v16, "count") || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = v16;
      v17 = v16;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
      if (v18)
      {
        v19 = v18;
        v45 = v13;
        v46 = (_QWORD *)a7;
        v44 = v14;
        v20 = *(_QWORD *)v50;
        while (2)
        {
          for (i = 0; i != v19; ++i)
          {
            if (*(_QWORD *)v50 != v20)
              objc_enumerationMutation(v17);
            objc_msgSend(a3, "validatorWithObject:", *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * i));
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            if (v15)
              v15[2](v15, v22);
            v48 = 0;
            v23 = objc_msgSend(v22, "isValidWithAPIType:withError:", a6, &v48);
            v24 = v48;
            v25 = v24;
            if ((v23 & 1) == 0)
            {
              v14 = v44;
              v13 = v45;
              if (v46)
              {
                v29 = (void *)MEMORY[0x1E0CB3940];
                if ((unint64_t)(a6 - 1) > 1)
                {
                  objc_msgSend((id)objc_opt_class(), "description");
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v29, "stringWithFormat:", CFSTR("%@ must contain an NSArray property '%@' of valid objects of class %@"), v30, v44, objc_msgSend(a3, "validatedClass"));
                }
                else
                {
                  _PKPaymentRequestGetDescriptivePropertyName(v44, a6, 1);
                  v30 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v29, "stringWithFormat:", CFSTR("%@ must contain a sequence of valid items"), v30, v41, v42);
                }
                v35 = (void *)objc_claimAutoreleasedReturnValue();

                v36 = (void *)MEMORY[0x1E0CB35C8];
                v37 = *MEMORY[0x1E0CB3388];
                v53[0] = *MEMORY[0x1E0CB2D50];
                v53[1] = v37;
                v54[0] = v35;
                v54[1] = v25;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v54, v53, 2);
                v38 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v36, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v38);
                *v46 = (id)objc_claimAutoreleasedReturnValue();

              }
              goto LABEL_34;
            }

          }
          v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v49, v55, 16);
          a7 = 1;
          if (v19)
            continue;
          break;
        }
        v14 = v44;
        v13 = v45;
      }
      else
      {
        a7 = 1;
      }
      goto LABEL_35;
    }
    if (a7)
    {
      v47 = v16;
      v31 = (void *)MEMORY[0x1E0CB3940];
      v32 = (_QWORD *)a7;
      if ((unint64_t)(a6 - 1) > 1)
      {
        objc_msgSend((id)objc_opt_class(), "description");
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "stringWithFormat:", CFSTR("%@ must contain an NSArray property '%@' of valid objects of class %@"), v33, v14, objc_msgSend(a3, "validatedClass"));
      }
      else
      {
        _PKPaymentRequestGetDescriptivePropertyName(v14, a6, 1);
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "stringWithFormat:", CFSTR("%@ is not a valid sequence"), v33, v41, v42);
      }
      v17 = (id)objc_claimAutoreleasedReturnValue();

      v39 = (void *)MEMORY[0x1E0CB35C8];
      v56 = *MEMORY[0x1E0CB2D50];
      v57 = v17;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v39, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v22);
      *v32 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:

      a7 = 0;
LABEL_35:

      v16 = v47;
    }
  }
  else if (a7)
  {
    v47 = v16;
    v26 = (void *)MEMORY[0x1E0CB3940];
    v27 = (_QWORD *)a7;
    if ((unint64_t)(a6 - 1) > 1)
    {
      objc_msgSend((id)objc_opt_class(), "description");
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "stringWithFormat:", CFSTR("%@ must contain an NSArray property '%@' of at least %tu valid objects of class %@"), v28, v14, 1, objc_msgSend(a3, "validatedClass"));
    }
    else
    {
      _PKPaymentRequestGetDescriptivePropertyName(v14, a6, 1);
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v26, "stringWithFormat:", CFSTR("%@ must contain at least %tu items"), v28, 1, v42, v43);
    }
    v17 = (id)objc_claimAutoreleasedReturnValue();

    v34 = (void *)MEMORY[0x1E0CB35C8];
    v58 = *MEMORY[0x1E0CB2D50];
    v59[0] = v17;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v59, &v58, 1);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v34, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v22);
    *v27 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_34;
  }

  return a7;
}

uint64_t _PKPaymentValidatePropertyMembership(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6)
{
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a4;
  objc_msgSend(v11, "valueForKey:", v12);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v14 || (objc_opt_isKindOfClass() & 1) == 0)
  {
    LODWORD(v15) = 0;
    if (!a6)
    {
LABEL_13:
      v15 = 0;
      goto LABEL_14;
    }
LABEL_7:
    v16 = (void *)MEMORY[0x1E0CB3940];
    if ((unint64_t)(a5 - 1) > 1)
    {
      objc_msgSend((id)objc_opt_class(), "description");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringWithFormat:", CFSTR("%@ must contain a property '%@' of type '%@' within '%@'"), v18, v12, a3, v13);
    }
    else
    {
      _PKPaymentRequestGetDescriptivePropertyName(v12, a5, 0);
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = (void *)v17;
      if ((_DWORD)v15)
        objc_msgSend(v16, "stringWithFormat:", CFSTR("\"%@\" is not a supported value for %@"), v14, v17, v24, v25);
      else
        objc_msgSend(v16, "stringWithFormat:", CFSTR("Missing %@"), v17, v23, v24, v25);
    }
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v20 = (void *)MEMORY[0x1E0CB35C8];
    v26 = *MEMORY[0x1E0CB2D50];
    v27[0] = v19;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v27, &v26, 1);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v21);
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_13;
  }
  v15 = 1;
  if ((objc_msgSend(v13, "containsObject:", v14) & 1) == 0)
  {
    if (!a6)
      goto LABEL_13;
    goto LABEL_7;
  }
LABEL_14:

  return v15;
}

BOOL _PKPaymentValidatePropertyUnion(void *a1, void *a2, objc_class *a3, uint64_t a4, void *a5, int a6, uint64_t a7, _QWORD *a8)
{
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  _BOOL8 v20;

  v15 = a5;
  v16 = a2;
  v17 = a1;
  objc_msgSend((id)objc_opt_class(), "description");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "valueForKey:", v16);
  v19 = (void *)objc_claimAutoreleasedReturnValue();

  v20 = _PKPaymentValidateUnion(v18, v19, v16, a3, a4, v15, 1, a6, a7, a8);
  return v20;
}

uint64_t _PKPaymentValidateMerchantCapabilities(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  uint8_t buf[8];
  uint64_t v18;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  objc_msgSend(v7, "valueForKey:", CFSTR("merchantCapabilities"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend(v8, "integerValue");

  if (v9)
    v10 = (v9 & 0xFFFFFFFFFFFFFF60) == 0;
  else
    v10 = 0;
  if (v10 && (a3 == 8 || (v9 & 0x10) == 0))
  {
    if ((v9 & 3) != 2)
    {
      a4 = 1;
      goto LABEL_18;
    }
    PKLogFacilityTypeGetObject(0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18FC92000, v13, OS_LOG_TYPE_ERROR, "Payment request configured for EMV but not 3DS. Use this configuration only if requested to by your payment processor.", buf, 2u);
    }
    a4 = 1;
    goto LABEL_17;
  }
  if (a4)
  {
    v11 = (void *)MEMORY[0x1E0CB3940];
    if ((unint64_t)(a2 - 1) > 1)
    {
      objc_msgSend((id)objc_opt_class(), "description");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringWithFormat:", CFSTR("%@ must have valid merchantCapabilities"), v12);
    }
    else
    {
      _PKPaymentRequestGetDescriptivePropertyName(CFSTR("merchantCapabilities"), a2, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringWithFormat:", CFSTR("Missing %@"), v12);
    }
    v13 = objc_claimAutoreleasedReturnValue();

    v14 = (void *)MEMORY[0x1E0CB35C8];
    v18 = *MEMORY[0x1E0CB2D50];
    v19[0] = v13;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v19, &v18, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), 1, v15);
    *(_QWORD *)a4 = (id)objc_claimAutoreleasedReturnValue();

    a4 = 0;
LABEL_17:

  }
LABEL_18:

  return a4;
}

__CFString *_PKPaymentRequestGetDescriptivePropertyName(void *a1, uint64_t a2, int a3)
{
  __CFString *v5;
  __CFString *v6;
  unint64_t v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v5 = a1;
  v6 = v5;
  v7 = a2 - 1;
  v8 = v5;
  if (v7 <= 1)
  {
    if ((-[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("countryCode")) & 1) != 0)
    {
      v8 = CFSTR("country code");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("currencyCode")) & 1) != 0)
    {
      v8 = CFSTR("currency codes");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("applicationData")) & 1) != 0)
    {
      v8 = CFSTR("application data");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("paymentSummaryItems")) & 1) != 0)
    {
      v8 = CFSTR("line items");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("shippingMethods")) & 1) != 0)
    {
      v8 = CFSTR("shipping methods");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("availableShippingMethods")) & 1) != 0)
    {
      v8 = CFSTR("available shipping methods");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("supportedNetworks")) & 1) != 0)
    {
      v8 = CFSTR("supported networks");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("merchantCapabilities")) & 1) != 0)
    {
      v8 = CFSTR("merchant capabilities");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("merchantIdentifier")) & 1) != 0)
    {
      v8 = CFSTR("merchant identifier");
    }
    else if ((-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("shippingEditable")) & 1) != 0)
    {
      v8 = CFSTR("shipping editable");
    }
    else
    {
      v8 = v6;
      if (!-[__CFString isEqualToString:](v6, "isEqualToString:", CFSTR("supportedCountries")))
        goto LABEL_25;
      v8 = CFSTR("supported countries");
    }

  }
LABEL_25:
  if (a3)
  {
    -[__CFString rangeOfComposedCharacterSequenceAtIndex:](v8, "rangeOfComposedCharacterSequenceAtIndex:", 0);
    v10 = v9;
    -[__CFString substringToIndex:](v8, "substringToIndex:", v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "uppercaseString");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[__CFString substringFromIndex:](v8, "substringFromIndex:", v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "stringByAppendingString:", v13);
    v14 = objc_claimAutoreleasedReturnValue();

    v8 = (__CFString *)v14;
  }

  return v8;
}

void sub_1901C0E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1901C29C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1901C31F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1901C45B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_1901C55C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

__CFString *AnalyticsVASReferralSource(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AD3D30[a1];
}

const __CFString *AnalyticsVASErrorTypeForError(void *a1)
{
  id v1;
  void *v2;
  int v3;
  uint64_t v4;
  const __CFString *v5;

  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", CFSTR("PKIssuerBindingErrorDomain"));

  if (v3 && (v4 = objc_msgSend(v1, "code"), (unint64_t)(v4 - 1) <= 7))
    v5 = off_1E2AD3D48[v4 - 1];
  else
    v5 = CFSTR("unknown");

  return v5;
}

const __CFString *AnalyticsRelevancyTypeForPass(void *a1)
{
  void *v1;
  const __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(a1, "relevantDates");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = CFSTR("singleDay");
  if (objc_msgSend(v1, "count") != 1)
  {
    objc_msgSend(v1, "firstObject");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "effectiveStartDate");
    v4 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v1, "lastObject");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "effectiveEndDate");
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    if (!objc_msgSend(v4, "isDateEqualToDateIgnoringTime:", v6))
      v2 = CFSTR("multiDay");

  }
  return v2;
}

void sub_1901CA4F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1901CCD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t PDXPCServiceInterface()
{
  return objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE233820);
}

uint64_t PKCloudStoreZoneInvitationStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("accepted"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("accepted"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("failed")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("failed")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("failedForceReAddParticipant")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("failedForceReAddParticipant")),
          v9,
          v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKCloudStoreZoneInvitationStatusToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("accepted");
  else
    return off_1E2AD3EC8[a1];
}

id PKIdentityErrorFromDIIdentityError(void *a1)
{
  id v1;
  void *v2;
  char v3;
  unint64_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "domain");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x1E0D169A0]);

  if ((v3 & 1) == 0)
  {
    PKLogFacilityTypeGetObject(0x1DuLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v1, "domain");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = 138412546;
      v10 = (uint64_t)v6;
      v11 = 2048;
      v12 = objc_msgSend(v1, "code");
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "PKIdentityError received unexpected underlying error domain %@, code %ld", (uint8_t *)&v9, 0x16u);

    }
    goto LABEL_7;
  }
  v4 = objc_msgSend(v1, "code");
  if (v4 >= 9)
  {
    PKLogFacilityTypeGetObject(0x1DuLL);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 134217984;
      v10 = objc_msgSend(v1, "code");
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "PKIdentityError received unexpected underlying code %ld", (uint8_t *)&v9, 0xCu);
    }
LABEL_7:

    v4 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKIdentityErrorDomain"), v4, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

uint64_t PKAccountTransferStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("posted")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scheduled")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cancelled")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("failed")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("completed")))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountTransferStateStringForState(unint64_t a1)
{
  if (a1 > 6)
    return 0;
  else
    return off_1E2AD3F98[a1];
}

uint64_t PKProtobufPaymentContentItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 16;
          goto LABEL_25;
        case 2u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 8;
          goto LABEL_25;
        case 3u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 32;
          goto LABEL_25;
        case 4u:
          PBReaderReadData();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = 24;
LABEL_25:
          v20 = *(void **)(a1 + v18);
          *(_QWORD *)(a1 + v18) = v17;

          continue;
        case 5u:
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 44) |= 1u;
          break;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v24 = *v3;
        v25 = *(_QWORD *)(a2 + v24);
        if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          break;
        v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
        *(_QWORD *)(a2 + v24) = v25 + 1;
        v23 |= (unint64_t)(v26 & 0x7F) << v21;
        if ((v26 & 0x80) == 0)
          goto LABEL_34;
        v21 += 7;
        v14 = v22++ >= 9;
        if (v14)
        {
          v23 = 0;
          goto LABEL_36;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
      if (*(_BYTE *)(a2 + *v5))
        v23 = 0;
LABEL_36:
      *(_BYTE *)(a1 + 40) = v23 != 0;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

PKPaymentRequest *PKShareAuthorizationPaymentRequest(PKPartialShareInvitation *a1, NSString *a2)
{
  return _PKShareAuthorizationPaymentRequest(a1, 0);
}

PKPaymentRequest *PKShareAuthorizationPaymentRequest(PKPartialShareInvitation *a1)
{
  return _PKShareAuthorizationPaymentRequest(a1, 0);
}

PKPaymentRequest *_PKShareAuthorizationPaymentRequest(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  PKPaymentRequest *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v15;
  __CFString *v16;
  int IsAvailable;
  const __CFString *v18;
  const __CFString *v19;
  PKPaymentContentItem *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  void *v27;
  PKPaymentContentItem *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  void *v40;
  PKPaymentContentItem *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v47;
  PKPaymentRequest *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "share");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_alloc_init(PKPaymentRequest);
    -[PKPaymentRequest setSuppressTotal:](v6, "setSuppressTotal:", 1);
    -[PKPaymentRequest setRequestType:](v6, "setRequestType:", 7);
    PKLocalizedString(CFSTR("WALLET"), 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedNavigationTitle:](v6, "setLocalizedNavigationTitle:", v7);

    -[PKPaymentRequest setConfirmationStyle:](v6, "setConfirmationStyle:", 1);
    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_TITLE"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedErrorMessage:](v6, "setLocalizedErrorMessage:", v8);

    PKLocalizedPaymentString(CFSTR("IN_APP_PAYMENT_PROCESSING"), 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedAuthorizingTitle:](v6, "setLocalizedAuthorizingTitle:", v9);

    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_TITLE"), 0);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedCallbackErrorTitle:](v6, "setLocalizedCallbackErrorTitle:", v10);

    PKLocalizedCredentialString(CFSTR("CARKEY_CANNOT_SHARE_GENERIC_ERROR_BODY"), 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKPaymentRequest setLocalizedCallbackErrorMessage:](v6, "setLocalizedCallbackErrorMessage:", v11);

    v12 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    if (a2)
    {
      objc_msgSend(v5, "credentialShares");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "firstObject");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = objc_msgSend(v14, "targetDevice");

      v16 = CFSTR("CAR_KEY_SHARING_GENERAL_CONFIRMATION");
      switch(v15)
      {
        case 0:
        case 1:
        case 2:
          goto LABEL_15;
        case 3:
        case 5:
          IsAvailable = PKPearlIsAvailable();
          v18 = CFSTR("CAR_KEY_SHARING_PHONE_TOUCHID_CONFIRMATION");
          v19 = CFSTR("CAR_KEY_SHARING_PHONE_CONFIRMATION");
          goto LABEL_12;
        case 4:
          IsAvailable = PKPearlIsAvailable();
          v18 = CFSTR("CAR_KEY_SHARING_WATCH_TOUCHID_CONFIRMATION");
          v19 = CFSTR("CAR_KEY_SHARING_WATCH_CONFIRMATION");
LABEL_12:
          if (IsAvailable)
            v16 = (__CFString *)v19;
          else
            v16 = (__CFString *)v18;
LABEL_15:
          PKLocalizedCredentialString(&v16->isa, 0);
          v27 = (void *)objc_claimAutoreleasedReturnValue();
          break;
        default:
          v27 = 0;
          break;
      }
      v28 = objc_alloc_init(PKPaymentContentItem);
      v29 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v27);
      -[PKPaymentContentItem setLabel:](v28, "setLabel:", v29);

      -[PKPaymentContentItem setCentered:](v28, "setCentered:", 1);
      objc_msgSend(v12, "addObject:", v28);

    }
    else
    {
      v20 = objc_alloc_init(PKPaymentContentItem);
      PKLocalizedCredentialString(CFSTR("CAR_KEY_SHARING_RECIPIENT_TITLE"), 0);
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v4, "recipientNickname");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      if (v22)
      {
        v24 = v22;
      }
      else
      {
        objc_msgSend(v4, "recipientHandle");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = v25;
        if (v25)
        {
          v24 = v25;
        }
        else
        {
          objc_msgSend(v5, "recipientNickname");
          v30 = (void *)objc_claimAutoreleasedReturnValue();
          v31 = v30;
          if (v30)
          {
            v32 = v30;
          }
          else
          {
            objc_msgSend(v5, "recipientHandle");
            v32 = (id)objc_claimAutoreleasedReturnValue();
          }
          v24 = v32;

        }
      }
      v48 = v6;

      if (v21)
      {
        v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v21);
        -[PKPaymentContentItem setTitle:](v20, "setTitle:", v33);

      }
      if (v24)
      {
        v34 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v24);
        -[PKPaymentContentItem setLabel:](v20, "setLabel:", v34);

      }
      objc_msgSend(v12, "addObject:", v20);

      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = v5;
      objc_msgSend(v5, "displayableSharedEntitlements");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      v36 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
      if (v36)
      {
        v37 = v36;
        v38 = *(_QWORD *)v50;
        do
        {
          for (i = 0; i != v37; ++i)
          {
            if (*(_QWORD *)v50 != v38)
              objc_enumerationMutation(v35);
            v40 = *(void **)(*((_QWORD *)&v49 + 1) + 8 * i);
            v41 = objc_alloc_init(PKPaymentContentItem);
            objc_msgSend(v40, "localizedTitle");
            v42 = (void *)objc_claimAutoreleasedReturnValue();
            if (v42)
            {
              v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v42);
              -[PKPaymentContentItem setTitle:](v41, "setTitle:", v43);

              objc_msgSend(v40, "localizedSubtitle");
              v44 = (void *)objc_claimAutoreleasedReturnValue();
              if (v44)
              {
                v45 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3498]), "initWithString:", v44);
                -[PKPaymentContentItem setLabel:](v41, "setLabel:", v45);

              }
            }
            objc_msgSend(v12, "addObject:", v41);

          }
          v37 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v49, v53, 16);
        }
        while (v37);
      }

      v6 = v48;
      v5 = v47;
    }
    -[PKPaymentRequest setPaymentContentItems:](v6, "setPaymentContentItems:", v12);

  }
  else
  {
    v6 = 0;
  }

  return v6;
}

PKPaymentRequest *PKShareTransferAuthorizationPaymentRequest(void *a1)
{
  return _PKShareAuthorizationPaymentRequest(a1, 1);
}

uint64_t PKPeerPaymentQuoteItemTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("topUp"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("transfer"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("cashOut"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(CFSTR("instantCashOut"), "isEqualToString:", v1))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentQuoteItemTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD3FD0[a1 - 1];
}

uint64_t PKPeerPaymentQuoteRiskLevelFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("low"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("medium"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(CFSTR("high"), "isEqualToString:", v1))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentQuoteRiskLevelToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("none");
  else
    return off_1E2AD3FF0[a1 - 1];
}

void sub_1901D6070(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1901D62C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKApplyVerificationTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("smsOTP"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = objc_msgSend(CFSTR("smsOTP"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("trialDeposit")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("trialDeposit"), "isEqualToString:", v5), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKApplyContextTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fields")) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("coreidv")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("documents")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("terms")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("action")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("info")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("complete")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("submitallfields")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("applicationrequired")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("verification")) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("confirminfo")))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKApplyVerificationTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AD4038[a1];
}

id PKCacheDirectoryPath()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "lastObject");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "bundleIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v3, "length"))
  {
    objc_msgSend(v1, "stringByAppendingPathComponent:", v3);
    v4 = objc_claimAutoreleasedReturnValue();

    v1 = (void *)v4;
  }
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("com.apple.Passbook"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

uint64_t PKLibraryDirectoryPath()
{
  return objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("/Library/"));
}

id PKVASPassCacheDirectoryPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("VASCache"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKHomeDirectoryPath()
{
  void *v0;
  void *v1;

  objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("/Library/"));
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Passes/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKDiscoveryDirectoryPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Discovery/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKCIPDirectoryPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("CIP/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKWalletAppDataPaths()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  void *v18;
  void *v19;
  void *v20;
  NSObject *v21;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;
  void *v26;
  int v28;
  void *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("/Library/"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringByAppendingPathComponent:", CFSTR("Preferences"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  v3 = (void *)MEMORY[0x1E0C99E98];
  PKHomeDirectoryPath();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "fileURLWithPath:isDirectory:", v4, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "addObject:", v5);

  v6 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend((id)CPSharedResourcesDirectory(), "stringByAppendingPathComponent:", CFSTR("/Library/"));
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Finance"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fileURLWithPath:isDirectory:", v8, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "addObject:", v9);

  v10 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("com.apple.FinanceKit.plist"));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "fileURLWithPath:isDirectory:", v11, 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v12, "checkResourceIsReachableAndReturnError:", 0))
  {
    objc_msgSend(v0, "addObject:", v12);
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v13 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v28 = 138412290;
      v29 = v12;
      _os_log_error_impl(&dword_18FC92000, v13, OS_LOG_TYPE_ERROR, "File did not exist at: %@", (uint8_t *)&v28, 0xCu);
    }

  }
  v14 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("com.apple.Wallet.plist"));
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "fileURLWithPath:isDirectory:", v15, 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v16, "checkResourceIsReachableAndReturnError:", 0))
  {
    objc_msgSend(v0, "addObject:", v16);
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v28 = 138412290;
      v29 = v16;
      _os_log_error_impl(&dword_18FC92000, v17, OS_LOG_TYPE_ERROR, "File did not exist at: %@", (uint8_t *)&v28, 0xCu);
    }

  }
  v18 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR("com.apple.passd.plist"));
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "fileURLWithPath:isDirectory:", v19, 0);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v20, "checkResourceIsReachableAndReturnError:", 0))
  {
    objc_msgSend(v0, "addObject:", v20);
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v28 = 138412290;
      v29 = v20;
      _os_log_error_impl(&dword_18FC92000, v21, OS_LOG_TYPE_ERROR, "File did not exist at: %@", (uint8_t *)&v28, 0xCu);
    }

  }
  v22 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(v2, "stringByAppendingPathComponent:", CFSTR(".GlobalPreferences.plist"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v22, "fileURLWithPath:isDirectory:", v23, 0);
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend(v24, "checkResourceIsReachableAndReturnError:", 0))
  {
    objc_msgSend(v0, "addObject:", v24);
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      v28 = 138412290;
      v29 = v24;
      _os_log_error_impl(&dword_18FC92000, v25, OS_LOG_TYPE_ERROR, "File did not exist at: %@", (uint8_t *)&v28, 0xCu);
    }

  }
  v26 = (void *)objc_msgSend(v0, "copy");

  return v26;
}

id PKRemoteInstrumentThumbnailsCachePath()
{
  void *v0;
  void *v1;

  PKSharedCacheDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("RemoteCards"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKObjectSettingsManagerArchivePath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("ObjectSettingsManager.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKObjectSettingsManagerSafeHavenArchivePath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("ObjectSettingsManager_safehaven.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKSharedWebServiceContextPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("PaymentWebServiceContext.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKSharedPeerPaymentWebServiceContextPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("PeerPaymentWebServiceContext.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKBackgroundWebServiceContextPath()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("PaymentWebServiceBackgroundContext.archive"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

const __CFString *PKProvisioningContinuityDiscoveryRequestTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("carKey");
  else
    return 0;
}

BOOL PKProvisioningContinuityDiscoveryRequestTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("carKey"))
  {
    if (!v1 || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("carKey")), v2, !v3))
      v4 = 0;
  }

  return v4;
}

const __CFString *PKAnalyticsReportBarcodeCredentialRetrivalStatusFromError(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  const __CFString *v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "domain");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("com.apple.PassKit.decryptionError"));

    if (v4)
      v5 = CFSTR("decryptionError");
    else
      v5 = CFSTR("fetchBarcodeError");
  }
  else
  {
    v5 = CFSTR("success");
  }

  return v5;
}

const __CFString *PKBillPaymentSuggestedAmountListUnableReasonToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1E2AD4178[a1];
}

uint64_t PKPeerPaymentDeviceScoreTransactionTypeForEndpointIdentifier(void *a1, uint64_t a2)
{
  __CFString *v3;
  __CFString *v4;
  __CFString *v5;
  char v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  char v11;
  __CFString *v12;
  __CFString *v13;
  __CFString *v14;
  char v15;
  __CFString *v16;
  __CFString *v17;
  __CFString *v18;
  char v19;

  v3 = a1;
  v4 = CFSTR("requestToken");
  if (v4 == v3)
  {

    goto LABEL_7;
  }
  v5 = v4;
  if (v3 && v4)
  {
    v6 = -[__CFString isEqualToString:](v3, "isEqualToString:", v4);

    if ((v6 & 1) == 0)
      goto LABEL_9;
LABEL_7:
    v7 = 1;
    goto LABEL_33;
  }

LABEL_9:
  v8 = v3;
  v9 = CFSTR("identityVerification");
  if (v9 == v8)
  {

  }
  else
  {
    v10 = v9;
    if (!v3 || !v9)
    {

      goto LABEL_17;
    }
    v11 = -[__CFString isEqualToString:](v8, "isEqualToString:", v9);

    if ((v11 & 1) == 0)
    {
LABEL_17:
      v12 = v8;
      v13 = CFSTR("quote");
      if (v13 != v12)
      {
        v14 = v13;
        if (v3 && v13)
        {
          v15 = -[__CFString isEqualToString:](v12, "isEqualToString:", v13);

          if ((v15 & 1) != 0)
            goto LABEL_29;
        }
        else
        {

        }
        v16 = v12;
        v17 = CFSTR("performQuote");
        if (v17 != v16)
        {
          v18 = v17;
          if (!v3 || !v17)
          {

            goto LABEL_32;
          }
          v19 = -[__CFString isEqualToString:](v16, "isEqualToString:", v17);

          if ((v19 & 1) == 0)
            goto LABEL_32;
LABEL_29:
          if ((unint64_t)(a2 - 1) <= 4)
          {
            v7 = qword_190455750[a2 - 1];
            goto LABEL_33;
          }
LABEL_32:
          v7 = 0;
          goto LABEL_33;
        }
      }

      goto LABEL_29;
    }
  }
  v7 = 6;
LABEL_33:

  return v7;
}

void *PKCreateDynamicLayerOpacityBehavior(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0CD2760];
  v2 = a1;
  v3 = [v1 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithType:", *MEMORY[0x1E0CD2AE0]);
  objc_msgSend(v4, "setValue:forKey:", CFSTR("color.alpha"), CFSTR("keyPath"));
  objc_msgSend(v4, "setValue:forKey:", v2, CFSTR("values"));

  return v4;
}

void *PKCreateDynamicLayerScaleBehavior(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0CD2760];
  v2 = a1;
  v3 = [v1 alloc];
  v4 = (void *)objc_msgSend(v3, "initWithType:", *MEMORY[0x1E0CD2AE0]);
  objc_msgSend(v4, "setValue:forKey:", CFSTR("scale"), CFSTR("keyPath"));
  objc_msgSend(v4, "setValue:forKey:", v2, CFSTR("values"));

  return v4;
}

id _FieldsByKey(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t j;
  void *v13;
  void *v14;
  id obj;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  obj = v1;
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v22 != v5)
          objc_enumerationMutation(obj);
        v7 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * i);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v8 = v7;
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
        if (v9)
        {
          v10 = v9;
          v11 = *(_QWORD *)v18;
          do
          {
            for (j = 0; j != v10; ++j)
            {
              if (*(_QWORD *)v18 != v11)
                objc_enumerationMutation(v8);
              v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * j);
              objc_msgSend(v13, "key");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              if (v14)
                objc_msgSend(v2, "setObject:forKey:", v13, v14);

            }
            v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v25, 16);
          }
          while (v10);
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v26, 16);
    }
    while (v4);
  }

  return v2;
}

void PKUpdateURLRequestWithSignatureDataAndInfo(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  uint8_t v16[16];
  uint8_t v17[16];
  uint8_t buf[16];

  v5 = a1;
  v6 = a3;
  v7 = a2;
  objc_msgSend(v6, "platformIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (v8)
  {
    objc_msgSend(v5, "setValue:forHTTPHeaderField:", v8, CFSTR("x-apple-platform-identifier"));
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18FC92000, v9, OS_LOG_TYPE_ERROR, "Error: Could not set x-apple-platform-identifier header no value", buf, 2u);
    }

  }
  objc_msgSend(v6, "certificates");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v10, "certificateOfType:", 0);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
  {
    objc_msgSend(v5, "setValue:forHTTPHeaderField:", v11, CFSTR("CASD-ECC"));
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v17 = 0;
      _os_log_error_impl(&dword_18FC92000, v12, OS_LOG_TYPE_ERROR, "Error: Could not set CASD-ECC header no value", v17, 2u);
    }

  }
  objc_msgSend(v10, "certificateOfType:", 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    objc_msgSend(v5, "setValue:forHTTPHeaderField:", v13, CFSTR("CASD-RSA"));
  }
  else
  {
    PKLogFacilityTypeGetObject(0);
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v16 = 0;
      _os_log_error_impl(&dword_18FC92000, v14, OS_LOG_TYPE_ERROR, "Error: Could not set CSAD-RSA header no value", v16, 2u);
    }

  }
  objc_msgSend(v7, "hexEncoding");
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v5, "setValue:forHTTPHeaderField:", v15, CFSTR("x-apple-signature"));
}

uint64_t PKPaymentSendOwnershipTokensRequestReasonFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("securityUpgrade"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("securityUpgrade"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("embargoRecovery")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("embargoRecovery")),
          v6,
          v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPaymentSendOwnershipTokensRequestReasonToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AD4678[a1];
}

void sub_1901ECEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKPaymentSetupInputMethodToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2AD4690[a1 - 1];
}

void sub_1901F2160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id dictionaryFromSubcredentialEncryptedRequest(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v9[4];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "encryptionScheme");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "ephemeralPublicKey");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "publicKeyHash");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "data");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = 0;
  if (v1 && v2 && v3 && v4)
  {
    v9[0] = CFSTR("version");
    v9[1] = CFSTR("ephemeralPublicKey");
    v10[0] = v2;
    v10[1] = v3;
    v10[2] = v4;
    v9[2] = CFSTR("publicKeyHash");
    v9[3] = CFSTR("data");
    objc_msgSend(v5, "base64EncodedStringWithOptions:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v10[3] = v7;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v10, v9, 4);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v6;
}

id DIIdentityDocumentDescriptorFromPKIdentityDocumentDescriptor(void *a1)
{
  id v1;
  NSObject *v2;
  uint64_t v3;
  int v4;
  NSObject *v5;
  _BOOL4 v6;
  void *v7;
  objc_class *v8;
  void *v9;
  int v11;
  void *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (objc_msgSend(v1, "isMemberOfClass:", objc_opt_class()))
  {
    PKLogFacilityTypeGetObject(0x1DuLL);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Received PKIdentityDriversLicenseDescriptor", (uint8_t *)&v11, 2u);
    }

    objc_msgSend(v1, "asDIIdentityDriversLicenseDescriptor");
    v3 = objc_claimAutoreleasedReturnValue();
LABEL_9:
    v7 = (void *)v3;
    goto LABEL_13;
  }
  v4 = objc_msgSend(v1, "isMemberOfClass:", objc_opt_class());
  PKLogFacilityTypeGetObject(0x1DuLL);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Received PKIdentityNationalIDCardDescriptor", (uint8_t *)&v11, 2u);
    }

    objc_msgSend(v1, "asDIIdentityNationalIDCardDescriptor");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  if (v6)
  {
    v8 = (objc_class *)objc_opt_class();
    NSStringFromClass(v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138412290;
    v12 = v9;
    _os_log_impl(&dword_18FC92000, v5, OS_LOG_TYPE_DEFAULT, "Unknown PKIdentityDocumentDescriptor type %@", (uint8_t *)&v11, 0xCu);

  }
  v7 = 0;
LABEL_13:

  return v7;
}

uint64_t PKTransitAppletCommutePlanStatusFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ok")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("canceled")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("deactivated")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("deleted")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKTransitAppletCommutePlanStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD4700[a1 - 1];
}

void sub_1902023B8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 96));
  _Unwind_Resume(a1);
}

void sub_190206404(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_190207ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190207E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1902093F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19020A290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19020AA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19020B5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a48, 8);
  _Unwind_Resume(a1);
}

void sub_19020C24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19020C54C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19020CFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_19020E8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19020EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_19020F33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190210760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_190211FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902123B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190212698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190212AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190212E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19021317C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190213518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190213844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190217584(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1902177D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190217C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190218C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902194C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190219AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19021D368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

void sub_19021E890(_Unwind_Exception *a1)
{
  uint64_t v1;

  objc_destroyWeak((id *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_19021F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initNPKCompanionAgentConnection_3()
{
  Class result;

  if (qword_1EE1C5710 != -1)
    dispatch_once(&qword_1EE1C5710, &__block_literal_global_948);
  result = objc_getClass("NPKCompanionAgentConnection");
  qword_1EE1C5708 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass_3[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction_3;
  return result;
}

id NPKCompanionAgentConnectionFunction_3()
{
  return (id)qword_1EE1C5708;
}

void __dispatch_after_ar_block_invoke(uint64_t a1)
{
  void *v2;

  v2 = (void *)MEMORY[0x19400CFE8]();
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_autoreleasePoolPop(v2);
}

void PDSetDefaultPaymentPassUniqueIdentifier(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  __CFNotificationCenter *DarwinNotifyCenter;
  id v5;
  _QWORD block[4];
  id v7;

  v1 = a1;
  PDDefaultPassesQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDSetDefaultPaymentPassUniqueIdentifier_block_invoke;
  block[3] = &unk_1E2ABE120;
  v7 = v1;
  v5 = v1;
  dispatch_sync(v2, block);

  PDSetDefaultPaymentPassCachedIngestionDate(0);
  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("com.apple.passd.prefschanged"), 0);

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.passkit.DefaultPaymentPass.changed"), 0, 0, 1u);

}

void PDSetDefaultPaymentPassCachedIngestionDate(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  PDDefaultPassesQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDSetDefaultPaymentPassCachedIngestionDate_block_invoke;
  block[3] = &unk_1E2ABE120;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

id PDUserSpecifiedDefaultPaymentPassUniqueIdentifier()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__54;
  v8 = __Block_byref_object_dispose__54;
  v9 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDUserSpecifiedDefaultPaymentPassUniqueIdentifier_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier(void *a1)
{
  id v1;
  NSObject *v2;
  void *v3;
  id v4;
  _QWORD block[4];
  id v6;

  v1 = a1;
  PDDefaultPassesQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDSetUserSpecifiedDefaultPaymentPassUniqueIdentifier_block_invoke;
  block[3] = &unk_1E2ABE120;
  v6 = v1;
  v4 = v1;
  dispatch_sync(v2, block);

  objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "postNotificationName:object:", CFSTR("com.apple.passd.prefschanged"), 0);

}

id PDDefaultPaymentPassCachedIngestionDate()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__54;
  v8 = __Block_byref_object_dispose__54;
  v9 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDDefaultPaymentPassCachedIngestionDate_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

id PDLastPaymentPassInsertionOrRemovalDate()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__54;
  v8 = __Block_byref_object_dispose__54;
  v9 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDLastPaymentPassInsertionOrRemovalDate_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void PDSetLastPaymentPassInsertionOrRemovalDate(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  PDDefaultPassesQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDSetLastPaymentPassInsertionOrRemovalDate_block_invoke;
  block[3] = &unk_1E2ABE120;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

id PDLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier()
{
  NSObject *v0;
  id v1;
  _QWORD block[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  id v9;

  v4 = 0;
  v5 = &v4;
  v6 = 0x3032000000;
  v7 = __Block_byref_object_copy__54;
  v8 = __Block_byref_object_dispose__54;
  v9 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v4;
  dispatch_sync(v0, block);

  v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void PDSetLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD block[4];
  id v5;

  v1 = a1;
  PDDefaultPassesQueue();
  v2 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDSetLastUsedPeerPaymentAlternateFundingSourcePassUniqueIdentifier_block_invoke;
  block[3] = &unk_1E2ABE120;
  v5 = v1;
  v3 = v1;
  dispatch_sync(v2, block);

}

id PDLastUsedInAppFundingSourceForAccountIdentifier(void *a1)
{
  id v1;
  NSObject *v2;
  id v3;
  _QWORD v5[4];
  id v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v1 = a1;
  if (v1)
  {
    v8 = 0;
    v9 = &v8;
    v10 = 0x3032000000;
    v11 = __Block_byref_object_copy__54;
    v12 = __Block_byref_object_dispose__54;
    v13 = 0;
    PDDefaultPassesQueue();
    v2 = objc_claimAutoreleasedReturnValue();
    v5[0] = MEMORY[0x1E0C809B0];
    v5[1] = 3221225472;
    v5[2] = __PDLastUsedInAppFundingSourceForAccountIdentifier_block_invoke;
    v5[3] = &unk_1E2AC1F78;
    v7 = &v8;
    v6 = v1;
    dispatch_sync(v2, v5);

    v3 = (id)v9[5];
    _Block_object_dispose(&v8, 8);

  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void PDSetLastUsedInAppFundingSource(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  id v5;
  _QWORD block[4];
  id v7;
  id v8;

  v5 = a1;
  v3 = a2;
  if (v5 && v3)
  {
    PDDefaultPassesQueue();
    v4 = objc_claimAutoreleasedReturnValue();
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PDSetLastUsedInAppFundingSource_block_invoke;
    block[3] = &unk_1E2ABE0D0;
    v7 = v5;
    v8 = v3;
    dispatch_sync(v4, block);

  }
}

id PDExpressPassConfigurations()
{
  NSObject *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v12;
  _QWORD block[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__54;
  v18 = __Block_byref_object_dispose__54;
  v19 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDExpressPassConfigurations_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v14;
  dispatch_sync(v0, block);

  if (v15[5])
  {
    v1 = objc_alloc(MEMORY[0x1E0CB3710]);
    v2 = v15[5];
    v12 = 0;
    v3 = (void *)objc_msgSend(v1, "initForReadingFromData:error:", v2, &v12);
    v4 = v12;
    v5 = v4;
    if (!v3 || v4)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v5;
        _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Unable to read express pass archive: %@", buf, 0xCu);
      }

      v9 = 0;
    }
    else
    {
      v6 = objc_alloc(MEMORY[0x1E0C99E60]);
      v7 = objc_opt_class();
      v8 = (void *)objc_msgSend(v6, "initWithObjects:", v7, objc_opt_class(), 0);
      objc_msgSend(v3, "decodeObjectOfClasses:forKey:", v8, *MEMORY[0x1E0CB2CD0]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "finishDecoding");
    }

  }
  else
  {
    v9 = 0;
  }
  _Block_object_dispose(&v14, 8);

  return v9;
}

void sub_190221280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PDExpressPassesInformation()
{
  NSObject *v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  NSObject *v10;
  id v12;
  _QWORD block[5];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint8_t buf[4];
  void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v15 = &v14;
  v16 = 0x3032000000;
  v17 = __Block_byref_object_copy__54;
  v18 = __Block_byref_object_dispose__54;
  v19 = 0;
  PDDefaultPassesQueue();
  v0 = objc_claimAutoreleasedReturnValue();
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PDExpressPassesInformation_block_invoke;
  block[3] = &unk_1E2AC5078;
  block[4] = &v14;
  dispatch_sync(v0, block);

  if (v15[5])
  {
    v1 = objc_alloc(MEMORY[0x1E0CB3710]);
    v2 = v15[5];
    v12 = 0;
    v3 = (void *)objc_msgSend(v1, "initForReadingFromData:error:", v2, &v12);
    v4 = v12;
    v5 = v4;
    if (!v3 || v4)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v21 = v5;
        _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Unable to read express pass archive: %@", buf, 0xCu);
      }

      v9 = 0;
    }
    else
    {
      v6 = objc_alloc(MEMORY[0x1E0C99E60]);
      v7 = objc_opt_class();
      v8 = (void *)objc_msgSend(v6, "initWithObjects:", v7, objc_opt_class(), 0);
      objc_msgSend(v3, "decodeObjectOfClasses:forKey:", v8, *MEMORY[0x1E0CB2CD0]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v3, "finishDecoding");
    }

  }
  else
  {
    v9 = 0;
  }
  _Block_object_dispose(&v14, 8);

  return v9;
}

void sub_190221528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _PDSetExpressPassesInformation(void *a1)
{
  void *v1;

  v1 = (void *)objc_msgSend(a1, "copy");
  CFPreferencesSetAppValue(CFSTR("PDExpressPasses"), v1, CFSTR("com.apple.stockholm"));

  return CFPreferencesAppSynchronize(CFSTR("com.apple.stockholm"));
}

void PDSetExpressPassConfigurations(void *a1)
{
  id v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  id v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (void *)MEMORY[0x19400CFE8]();
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = (id)objc_msgSend(v1, "copy");
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v24;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v24 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * v7), "passInformation");
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v8, "setForceModernEncoding:", 1);

        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v5);
  }

  v9 = (void *)MEMORY[0x19400CFE8]();
  v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  v11 = *MEMORY[0x1E0CB2CD0];
  objc_msgSend(v10, "encodeObject:forKey:", v3, *MEMORY[0x1E0CB2CD0]);
  objc_msgSend(v10, "finishEncoding");
  objc_msgSend(v10, "encodedData");
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v9);
  v13 = (void *)MEMORY[0x19400CFE8]();
  v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB36F8]), "initRequiringSecureCoding:", 1);
  objc_msgSend(v3, "pk_setByApplyingBlock:", &__block_literal_global_156);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v14, "encodeObject:forKey:", v15, v11);
  objc_msgSend(v14, "finishEncoding");
  objc_msgSend(v14, "encodedData");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_autoreleasePoolPop(v13);
  objc_autoreleasePoolPop(v2);
  PDDefaultPassesQueue();
  v17 = objc_claimAutoreleasedReturnValue();
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 3221225472;
  v20[2] = __PDSetExpressPassConfigurations_block_invoke_2;
  v20[3] = &unk_1E2ABE0D0;
  v21 = v12;
  v22 = v16;
  v18 = v16;
  v19 = v12;
  dispatch_sync(v17, v20);

}

void PDSetContactlessPassesAvailable(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_msgSend((id)_MergedGlobals_254, "BOOLValue");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)_MergedGlobals_254;
  _MergedGlobals_254 = v3;

  PKSharedCacheSetBoolForKey(a1, CFSTR("ContactlessPassesAvailable"));
  if (v2 != (_DWORD)a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "postNotificationName:object:userInfo:", CFSTR("PDContactlessPassesAvailableDidChangeNotification"), 0, 0);

  }
}

uint64_t PDContactlessPassesAvailable(void)
{
  return PDContactlessPassesAvailable(1);
}

uint64_t PDContactlessPassesAvailable(int a1)
{
  void *v2;

  if (qword_1ECF22950 != -1)
    dispatch_once(&qword_1ECF22950, &__block_literal_global_81_2);
  v2 = (void *)_MergedGlobals_254;
  if (!_MergedGlobals_254)
  {
    _UpdateSharedCacheValues(a1);
    v2 = (void *)_MergedGlobals_254;
  }
  return objc_msgSend(v2, "BOOLValue");
}

void _UpdateSharedCacheValues(int a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  void *v8;
  int v9;
  void *v10;
  id v11;

  v11 = (id)_MergedGlobals_254;
  v2 = (id)qword_1ECF22938;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", PKSharedCacheGetBoolForKey(CFSTR("ContactlessPassesAvailable")));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)_MergedGlobals_254;
  _MergedGlobals_254 = v3;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", PKSharedCacheGetBoolForKey(CFSTR("ContactlessPaymentPassesAvailable")));
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)qword_1ECF22938;
  qword_1ECF22938 = v5;

  if (a1)
  {
    v7 = objc_msgSend(v11, "BOOLValue");
    if (v7 != objc_msgSend((id)_MergedGlobals_254, "BOOLValue"))
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "postNotificationName:object:userInfo:", CFSTR("PDContactlessPassesAvailableDidChangeNotification"), 0, 0);

    }
    v9 = objc_msgSend(v2, "BOOLValue");
    if (v9 != objc_msgSend((id)qword_1ECF22938, "BOOLValue"))
    {
      objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "postNotificationName:object:userInfo:", CFSTR("PDContactlessPaymentPassesAvailableDidChangeNotification"), 0, 0);

    }
  }

}

void PDSetContactlessPaymentPassesAvailable(uint64_t a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_msgSend((id)qword_1ECF22938, "BOOLValue");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = (void *)qword_1ECF22938;
  qword_1ECF22938 = v3;

  PKSharedCacheSetBoolForKey(a1, CFSTR("ContactlessPaymentPassesAvailable"));
  if (v2 != (_DWORD)a1)
  {
    objc_msgSend(MEMORY[0x1E0CB37D0], "defaultCenter");
    v5 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "postNotificationName:object:userInfo:", CFSTR("PDContactlessPaymentPassesAvailableDidChangeNotification"), 0, 0);

  }
}

uint64_t PDContactlessPaymentPassesAvailable()
{
  void *v0;

  if (qword_1ECF22950 != -1)
    dispatch_once(&qword_1ECF22950, &__block_literal_global_81_2);
  v0 = (void *)qword_1ECF22938;
  if (!qword_1ECF22938)
  {
    _UpdateSharedCacheValues(0);
    v0 = (void *)qword_1ECF22938;
  }
  return objc_msgSend(v0, "BOOLValue");
}

uint64_t PDSetSanitizedAvailableWhileLocked(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PDSanitizedAvailableWhileUnlocked"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

BOOL PDSanitizedAvailableWhileLocked()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PDSanitizedAvailableWhileUnlocked"), CFSTR("com.apple.passd"), 0) != 0;
}

uint64_t PDSetMigratedAvailableWhileLocked(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PDMigratedAvailableWhileLocked"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

BOOL PDMigratedAvailableWhileLocked()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PDMigratedAvailableWhileLocked"), CFSTR("com.apple.passd"), 0) != 0;
}

uint64_t PDSetAvailableWhileLockedPreviousSetting(uint64_t a1)
{
  CFPreferencesSetAppValue(CFSTR("PDAvailableWhileLockedPreviousSetting"), (CFPropertyListRef)objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1), CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

BOOL PDAvailableWhileLockedPreviousSetting()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PDAvailableWhileLockedPreviousSetting"), CFSTR("com.apple.passd"), 0) != 0;
}

uint64_t PDSetPaymentWebServicePushTopicsNeedingUpdate(void *a1)
{
  CFPreferencesSetAppValue(CFSTR("PDPaymentWebServicePushTopicsNeedingUpdate"), (CFPropertyListRef)objc_msgSend(a1, "allObjects"), CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

id PDPaymentWebServicePushTopicsNeedingUpdate()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = (id)CFPreferencesCopyValue(CFSTR("PDPaymentWebServicePushTopicsNeedingUpdate"), CFSTR("com.apple.passd"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = 0u;
    v10 = 0u;
    v7 = 0u;
    v8 = 0u;
    v0 = v0;
    v1 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    if (v1)
    {
      v2 = v1;
      v3 = *(_QWORD *)v8;
      while (2)
      {
        for (i = 0; i != v2; ++i)
        {
          if (*(_QWORD *)v8 != v3)
            objc_enumerationMutation(v0);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {

            goto LABEL_13;
          }
        }
        v2 = objc_msgSend(v0, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
        if (v2)
          continue;
        break;
      }
    }

    if (v0)
    {
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithArray:", v0, v7);
      v5 = (void *)objc_claimAutoreleasedReturnValue();

      return v5;
    }
  }
  else
  {
LABEL_13:

  }
  return 0;
}

BOOL PDPaymentSetupFeaturesAreDirty()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PDPaymentSetupFeaturesAreDirtyKey"), CFSTR("com.apple.passd"), 0) != 0;
}

void PDSetPaymentSetupFeaturesAreDirty(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PDPaymentSetupFeaturesAreDirtyKey"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));

}

BOOL PDSpotlighIndexNeedsIndexing()
{
  return CFPreferencesGetAppBooleanValue(CFSTR("PDSpotlightIndexNeedsIndexing"), CFSTR("com.apple.passd"), 0) != 0;
}

void PDSetSpotlightIndexNeedsIndexing(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithBool:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PDSpotlightIndexNeedsIndexing"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));

}

void PDSetUpgradePasscodeCheckedVersion(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PDUpgradePasscodeCheckedVersion"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));

}

CFIndex PDUpgradePasscodeCheckedVersion()
{
  return CFPreferencesGetAppIntegerValue(CFSTR("PDUpgradePasscodeCheckedVersion"), CFSTR("com.apple.passd"), 0);
}

void PDSetUpgradeTasksVersion(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PDUpgradeTasksVersion"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));

}

CFIndex PDUpgradeTasksVersion()
{
  return CFPreferencesGetAppIntegerValue(CFSTR("PDUpgradeTasksVersion"), CFSTR("com.apple.passd"), 0);
}

void PDSetUpgradeTasksRetryCount(uint64_t a1)
{
  id v1;

  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  CFPreferencesSetAppValue(CFSTR("PDUpgradeTasksRetryCount"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));

}

CFIndex PDUpgradeTasksRetryCount()
{
  return CFPreferencesGetAppIntegerValue(CFSTR("PDUpgradeTasksRetryCount"), CFSTR("com.apple.passd"), 0);
}

void PDSetLastUnlockedTime(double a1)
{
  CFNumberRef v1;
  double valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  CFPreferencesSetAppValue(CFSTR("PDLastUnlockedTime"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
  CFRelease(v1);
}

double PDGetLastUnlockedTime(BOOL *a1)
{
  const __CFNumber *v2;
  const __CFNumber *v3;
  CFTypeID v4;
  BOOL v5;
  double valuePtr;

  valuePtr = 0.0;
  v2 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("PDLastUnlockedTime"), CFSTR("com.apple.passd"));
  if (!v2)
  {
    v5 = 0;
    if (!a1)
      return valuePtr;
    goto LABEL_6;
  }
  v3 = v2;
  v4 = CFGetTypeID(v2);
  v5 = v4 == CFNumberGetTypeID();
  if (v5)
    CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
  CFRelease(v3);
  if (a1)
LABEL_6:
    *a1 = v5;
  return valuePtr;
}

uint64_t PDClearLastUnlockedTime()
{
  CFPreferencesSetAppValue(CFSTR("PDLastUnlockedTime"), 0, CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

uint64_t PDSetWasLocked(int a1)
{
  CFPropertyListRef *v1;

  v1 = (CFPropertyListRef *)MEMORY[0x1E0C9AE50];
  if (!a1)
    v1 = (CFPropertyListRef *)MEMORY[0x1E0C9AE40];
  CFPreferencesSetAppValue(CFSTR("PDWasLocked"), *v1, CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

BOOL PDGetWasLocked(BOOL *a1)
{
  int AppBooleanValue;
  int v3;
  BOOL v4;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PDWasLocked"), CFSTR("com.apple.passd"), &keyExistsAndHasValidFormat);
  v3 = keyExistsAndHasValidFormat;
  if (a1)
    *a1 = keyExistsAndHasValidFormat != 0;
  if (v3)
    v4 = AppBooleanValue == 0;
  else
    v4 = 0;
  return !v4;
}

uint64_t PDClearWasLocked()
{
  CFPreferencesSetAppValue(CFSTR("PDWasLocked"), 0, CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

void PDSetAuxiliaryCapabilityLastRemoteFetchTime(double a1)
{
  CFNumberRef v1;
  double valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberDoubleType, &valuePtr);
  CFPreferencesSetAppValue(CFSTR("PDAuxiliaryCapabilityLastRemoteFetchTimeKey"), v1, CFSTR("com.apple.passd"));
  CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
  CFRelease(v1);
}

double PDAuxiliaryCapabilityLastRemoteFetchTime(BOOL *a1)
{
  const __CFNumber *v2;
  const __CFNumber *v3;
  CFTypeID v4;
  BOOL v5;
  double valuePtr;

  valuePtr = 0.0;
  v2 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("PDAuxiliaryCapabilityLastRemoteFetchTimeKey"), CFSTR("com.apple.passd"));
  if (!v2)
  {
    v5 = 0;
    if (!a1)
      return valuePtr;
    goto LABEL_6;
  }
  v3 = v2;
  v4 = CFGetTypeID(v2);
  v5 = v4 == CFNumberGetTypeID();
  if (v5)
    CFNumberGetValue(v3, kCFNumberDoubleType, &valuePtr);
  CFRelease(v3);
  if (a1)
LABEL_6:
    *a1 = v5;
  return valuePtr;
}

CFPropertyListRef PDCloudStoreTransactionSourceControllerLastSync()
{
  return (id)CFPreferencesCopyValue(CFSTR("PDCloudStoreTransactionSourceControllerLastSyncKey"), CFSTR("com.apple.passd"), (CFStringRef)*MEMORY[0x1E0C9B260], (CFStringRef)*MEMORY[0x1E0C9B230]);
}

uint64_t PDSetCloudStoreTransactionSourceControllerLastSync(CFPropertyListRef value)
{
  CFPreferencesSetAppValue(CFSTR("PDCloudStoreTransactionSourceControllerLastSyncKey"), value, CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

BOOL PDDatabaseManagerHasPerformedContactlessActivationGroupingTypeRepair()
{
  int AppBooleanValue;
  BOOL v1;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PDDatabaseManagerHasPerformedContactlessActivationGroupingTypeRepairKey"), CFSTR("com.apple.passd"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 1;
  return !v1;
}

uint64_t PDSetDatabaseManagerHasPerformedContactlessActivationGroupingTypeRepair(int a1)
{
  const void *v1;

  if (a1)
    v1 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v1 = 0;
  CFPreferencesSetAppValue(CFSTR("PDDatabaseManagerHasPerformedContactlessActivationGroupingTypeRepairKey"), v1, CFSTR("com.apple.passd"));
  return CFPreferencesAppSynchronize(CFSTR("com.apple.passd"));
}

void _SharedCacheValuesChangedHandler_0()
{
  _UpdateSharedCacheValues(1);
}

uint64_t PKAccountPromotionCompletionStepProgressTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("currency"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = objc_msgSend(CFSTR("currency"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("percent")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("percent"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("integer")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("integer"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("BOOLean")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("BOOLean"), "isEqualToString:", v11), v12, v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

void sub_190225C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19022615C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Block_object_dispose((const void *)(v2 - 216), 8);
  objc_destroyWeak((id *)(v2 - 184));
  _Unwind_Resume(a1);
}

void sub_190226374(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1902266E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 192), 8);
  _Block_object_dispose((const void *)(v33 - 144), 8);
  _Unwind_Resume(a1);
}

id PDDeviceRegistrationServiceInterface()
{
  if (qword_1ECF22960 != -1)
    dispatch_once(&qword_1ECF22960, &__block_literal_global_157);
  return (id)_MergedGlobals_255;
}

id PKDeviceRegistrationServiceInterface()
{
  if (qword_1ECF22970 != -1)
    dispatch_once(&qword_1ECF22970, &__block_literal_global_63);
  return (id)qword_1ECF22968;
}

id PKAccountDisplayableError(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  __CFString *v58;
  __CFString *v59;
  uint64_t v60;
  uint64_t v61;

  v7 = a1;
  v8 = a3;
  v9 = a4;
  objc_msgSend(v7, "domain");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("PKDisplayableError"));

  if (!v11)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_19;
  }
  objc_msgSend(v7, "userInfo");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKeyedSubscript:", *MEMORY[0x1E0CB3388]);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "localizedFailureReason");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "localizedRecoverySuggestion");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
    v16 = 1;
  else
    v16 = v14 == 0;
  if (!v16)
  {
    v21 = v7;
LABEL_17:
    v20 = v14;
    v19 = v15;
    goto LABEL_18;
  }
  v21 = v13;

  if (v21)
    v17 = v14 == 0;
  else
    v17 = 1;
  if (!v17 && v15 != 0)
    goto LABEL_17;
  v19 = 0;
  v20 = 0;
LABEL_18:

  v7 = v21;
LABEL_19:
  objc_msgSend(v7, "domain");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v22, "isEqualToString:", *MEMORY[0x1E0CB32E8]))
  {
    if (objc_msgSend(v7, "code") == -1009)
    {

LABEL_24:
      PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ERROR_OFFLINE_ERROR_TITLE"), a2, 0, v23, v24, v25, v26, v27, v60);
      v29 = objc_claimAutoreleasedReturnValue();

      v35 = CFSTR("ACCOUNT_SERVICE_ERROR_OFFLINE_ERROR_MESSAGE");
LABEL_25:
      v36 = a2;
LABEL_26:
      PKLocalizedFeatureString(v35, v36, 0, v30, v31, v32, v33, v34, v61);
      v37 = objc_claimAutoreleasedReturnValue();
      goto LABEL_34;
    }
    v28 = objc_msgSend(v7, "code");

    if (v28 == -1001)
      goto LABEL_24;
  }
  else
  {

  }
  objc_msgSend(v7, "domain");
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "isEqualToString:", CFSTR("PKWebServiceErrorDomain"));

  if (v39)
  {
    if ((unint64_t)objc_msgSend(v7, "code") > 5)
      goto LABEL_36;
    objc_msgSend(v7, "localizedFailureReason");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v45)
      goto LABEL_36;
  }
  else
  {
    objc_msgSend(v7, "domain");
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v47 = objc_msgSend(v46, "isEqualToString:", CFSTR("PKPaymentWebServiceErrorDomain"));

    if (!v47)
      goto LABEL_36;
    objc_msgSend(v7, "localizedFailureReason");
    v48 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v48)
    {
      switch(objc_msgSend(v7, "code"))
      {
        case 60001:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PROVIDER_UNAVAILABLE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PROVIDER_UNAVAILABLE_ERROR_DESCRIPTION");
          goto LABEL_25;
        case 60003:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_LOCKED_RESTRICTED_ACCOUNT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_LOCKED_RESTRICTED_ACCOUNT_ERROR_DESCRIPTION");
          goto LABEL_25;
        case 60004:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_ROUTING_NUMBER_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_ROUTING_NUMBER_ERROR_MESSAGE");
          goto LABEL_25;
        case 60005:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_REDEEM_INSUFFFICIENT_BALANCE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_REDEEM_INSUFFFICIENT_BALANCE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60006:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_REDEEM_ACCOUNT_INVALID_STATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_REDEEM_ACCOUNT_INVALID_STATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60007:
          v58 = CFSTR("ACCOUNT_SERVICE_REDEEM_LIMIT_REACHED_ERROR_TITLE");
          goto LABEL_90;
        case 60008:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_REDEEM_ACCOUNT_INVALID_STATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_REDEEM_PEER_PAYMENT_ACCOUNT_INVALID_STATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60014:
          PKLocalizedFeatureString(CFSTR("APPLY_HSA2_ACCOUNT_REQUIRED_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("APPLY_HSA2_ACCOUNT_REQUIRED_ERROR_DESCRIPTION");
          goto LABEL_25;
        case 60015:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_TOO_LOW_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_TOO_LOW_ERROR_MESSAGE");
          goto LABEL_25;
        case 60016:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_TOO_HIGH_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_TOO_HIGH_ERROR_MESSAGE");
          goto LABEL_25;
        case 60017:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_AMOUNT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_AMOUNT_ERROR_MESSAGE");
          goto LABEL_25;
        case 60018:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_PAYMENT_CURRENCY_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_PAYMENT_CURRENCY_ERROR_MESSAGE");
          goto LABEL_25;
        case 60019:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_PRESET_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_PRESET_ERROR_MESSAGE");
          goto LABEL_25;
        case 60020:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_FREQUENCY_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_PAYMENT_FREQUENCY_ERROR_MESSAGE");
          goto LABEL_25;
        case 60021:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_FUNDING_SOURCE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_FUNDING_SOURCE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60022:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_UNKNOWN_PAYMENT_FUNDING_SOURCE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_UNKNOWN_PAYMENT_FUNDING_SOURCE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60023:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_ACCOUNT_NUMBER_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_ACCOUNT_NUMBER_ERROR_MESSAGE");
          goto LABEL_25;
        case 60024:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_INVALID_BANK_ACCOUNT_TYPE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_INVALID_BANK_ACCOUNT_TYPE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60025:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_INVALID_DATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_INVALID_DATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60026:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_PAST_DATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_PAST_DATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60027:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_FUTURE_DATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_UNSUPPORTED_FUTURE_DATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60028:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_DUPLICATE_PAYMENT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_DUPLICATE_PAYMENT_ERROR_MESSAGE");
          goto LABEL_25;
        case 60029:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_TOO_MANY_PAYMENTS_FOR_DATE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_TOO_MANY_PAYMENTS_FOR_DATE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60030:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_TOO_MANY_SCHEDULED_PAYMENTS_TOTAL_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_TOO_MANY_SCHEDULED_PAYMENTS_TOTAL_ERROR_MESSAGE");
          goto LABEL_25;
        case 60031:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_TERMS_AND_CONDITIONS_MISSING_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_TERMS_AND_CONDITIONS_MISSING_ERROR_MESSAGE");
          goto LABEL_25;
        case 60032:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_TERMS_AND_CONDITIONS_INVALID_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_TERMS_AND_CONDITIONS_INVALID_ERROR_MESSAGE");
          goto LABEL_25;
        case 60033:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_DOES_NOT_MATCH_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PAYMENT_AMOUNT_DOES_NOT_MATCH_ERROR_MESSAGE");
          goto LABEL_25;
        case 60034:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ERROR_SUPPORTED_FEATURE_FORBIDDEN_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_ERROR_SUPPORTED_FEATURE_FORBIDDEN_ERROR_MESSAGE");
          goto LABEL_25;
        case 60035:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ENCRYPTION_CERTIFICATE_VALIDATION_FAILED_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_ENCRYPTION_CERTIFICATE_VALIDATION_FAILED_ERROR_MESSAGE");
          goto LABEL_25;
        case 60036:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_DECRYPTION_FAILURE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_DECRYPTION_FAILURE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60037:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_NO_DATA_PROVIDED_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_NO_DATA_PROVIDED_ERROR_MESSAGE");
          goto LABEL_25;
        case 60042:
          PKLocalizedFeatureString(CFSTR("POBOX_NOT_ACCEPTABLE_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("POBOX_NOT_ACCEPTABLE_MESSAGE");
          goto LABEL_25;
        case 60043:
          PKLocalizedPaymentString(CFSTR("INVALID_STREET1_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          v59 = CFSTR("INVALID_STREET1_MESSAGE");
          goto LABEL_84;
        case 60044:
          PKLocalizedPaymentString(CFSTR("INVALID_STREET2_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          v59 = CFSTR("INVALID_STREET2_MESSAGE");
          goto LABEL_84;
        case 60050:
          PKLocalizedPaymentString(CFSTR("INVALID_POSTAL_CODE_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          v59 = CFSTR("INVALID_POSTAL_CODE_MESSAGE");
          goto LABEL_84;
        case 60051:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_FUNDING_SOURCE_USED_FOR_PAYMENT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_FUNDING_SOURCE_USED_FOR_PAYMENT_ERROR_MESSAGE");
          goto LABEL_25;
        case 60052:
          PKLocalizedPaymentString(CFSTR("INVALID_CITY_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          v59 = CFSTR("INVALID_CITY_MESSAGE");
          goto LABEL_84;
        case 60053:
          PKLocalizedPaymentString(CFSTR("INVALID_STATE_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          v59 = CFSTR("INVALID_STATE_MESSAGE");
LABEL_84:
          PKLocalizedPaymentString(&v59->isa, 0);
          v37 = objc_claimAutoreleasedReturnValue();
          goto LABEL_34;
        case 60054:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PAYMENT_CANCELLATION_FAILED_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PAYMENT_CANCELLATION_FAILED_ERROR_MESSAGE");
          goto LABEL_25;
        case 60055:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_CANNOT_DELETE_PAYMENT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_SCHEDULE_PAYMENT_CANNOT_DELETE_PAYMENT_ERROR_MESSAGE");
          goto LABEL_25;
        case 60061:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ACCOUNT_ACTION_NOT_PERMITTED_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_ACCOUNT_ACTION_NOT_PERMITTED_ERROR_MESSAGE");
          goto LABEL_25;
        case 60062:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_DUPLICATE_FUNDING_SOURCE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_DUPLICATE_FUNDING_SOURCE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60063:
          v58 = CFSTR("ACCOUNT_SERVICE_AUTOMATIC_PAYMENTS_ALREADY_SET_UP_ERROR_TITLE");
LABEL_90:
          PKLocalizedFeatureString(v58, a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();
          goto LABEL_35;
        case 60064:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_APPLE_CASH_INSUFFICIENT_FUNDS_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_APPLE_CASH_INSUFFICIENT_FUNDS_ERROR_MESSAGE");
          goto LABEL_25;
        case 60065:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_APPLE_CASH_INVALID_ACCOUNT_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_APPLE_CASH_INVALID_ACCOUNT_ERROR_MESSAGE");
          goto LABEL_25;
        case 60066:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_ACTIVATION_ERROR_TITLE"), 2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_NOT_YET_SHIPPED");
          goto LABEL_96;
        case 60067:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_ACTIVATION_ERROR_TITLE"), 2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_ALREADY_ACTIVATED");
          goto LABEL_96;
        case 60068:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_ACTIVATION_ERROR_TITLE"), 2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_PHYSICAL_CARD_INVALID_ACTIVATION_CODE");
LABEL_96:
          v36 = 2;
          goto LABEL_26;
        case 60078:
          PKLocalizedMadisonString(CFSTR("ACCOUNT_MERGE_INITIATED_ERROR_TITLE"), 0);
          v29 = objc_claimAutoreleasedReturnValue();

          PKLocalizedMadisonString(CFSTR("ACCOUNT_MERGE_INITIATED_ERROR_MESSAGE"), 0);
          v37 = objc_claimAutoreleasedReturnValue();
          goto LABEL_34;
        case 60088:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_MAXIMUM_FUNDING_SOURCE_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_MAXIMUM_FUNDING_SOURCE_ERROR_MESSAGE");
          goto LABEL_25;
        case 60090:
          PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_FUNDING_SOURCE_USED_FOR_TRANSFER_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
          v29 = objc_claimAutoreleasedReturnValue();

          v35 = CFSTR("ACCOUNT_SERVICE_FUNDING_SOURCE_USED_FOR_TRANSFER_ERROR_MESSAGE");
          goto LABEL_25;
        default:
          goto LABEL_36;
      }
    }
  }
  objc_msgSend(v7, "localizedFailureReason");
  v29 = objc_claimAutoreleasedReturnValue();

  objc_msgSend(v7, "localizedRecoverySuggestion");
  v37 = objc_claimAutoreleasedReturnValue();
LABEL_34:
  v20 = v19;
  v19 = v37;
LABEL_35:

  v20 = v29;
LABEL_36:
  if (!(v20 | v19))
  {
    if (v8)
    {
      v49 = v8;
    }
    else
    {
      PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ERROR_GENERIC_ERROR_TITLE"), a2, 0, v40, v41, v42, v43, v44, v60);
      v49 = (id)objc_claimAutoreleasedReturnValue();
    }
    v20 = (uint64_t)v49;
    if (v9)
    {
      v55 = v9;
    }
    else
    {
      PKLocalizedFeatureString(CFSTR("ACCOUNT_SERVICE_ERROR_GENERIC_ERROR_MESSAGE"), a2, 0, v50, v51, v52, v53, v54, v60);
      v55 = (id)objc_claimAutoreleasedReturnValue();
    }
    v19 = (uint64_t)v55;
  }
  PKDisplayableErrorCustomWithType(-1, (void *)v20, (void *)v19, v7, 0);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  return v56;
}

uint64_t PKAccountCredentialType(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  switch(a1)
  {
    case 4:
      v7 = 135;
      break;
    case 3:
      objc_msgSend(v3, "payLaterDetails");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v8, "cardNetwork");

      break;
    case 2:
      objc_msgSend(v3, "creditDetails");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v6 = objc_msgSend(v5, "cardType");

      if (v6)
        v7 = v6;
      else
        v7 = 3;
      break;
    default:
      v7 = 0;
      break;
  }

  return v7;
}

__CFString *PKAccountHeroImageName(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 3)
    return 0;
  else
    return off_1E2AD55E8[a1 - 2];
}

id PKLightweightAppleBalanceAccountDict(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const __CFString *v17;
  void *v18;
  _QWORD v19[2];
  _QWORD v20[2];
  _QWORD v21[5];
  _QWORD v22[6];

  v22[5] = *MEMORY[0x1E0C80C00];
  v22[0] = a1;
  v21[0] = CFSTR("accountIdentifier");
  v21[1] = CFSTR("featureIdentifier");
  v5 = a3;
  v6 = a2;
  v7 = a1;
  PKFeatureIdentifierToString(4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v22[1] = v8;
  v21[2] = CFSTR("accountType");
  PKAccountTypeToString(3uLL);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v22[2] = v9;
  v21[3] = CFSTR("accountDetails");
  v19[0] = CFSTR("currencyCode");
  objc_msgSend(v6, "currency");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v19[1] = CFSTR("accountSummary");
  v20[0] = v10;
  v17 = CFSTR("currentBalance");
  objc_msgSend(v6, "amount");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v11, "stringValue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v12;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v20[1] = v13;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v20, v19, 2);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v21[4] = CFSTR("cloudStoreZoneNames");
  v22[3] = v14;
  v22[4] = v5;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v22, v21, 5);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  return v15;
}

id PKProvisioningErrorForAppleBalanceEligibilityStatus(uint64_t a1)
{
  void *v1;
  __CFString *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v10;
  _QWORD v11[3];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1 == 1)
      return 0;
    if (a1 == 6)
    {
      PKLocalizedLynxString(CFSTR("ELIGIBILITY_ERROR_BALANCE_TOO_LOW_TITLE"), 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = CFSTR("ELIGIBILITY_ERROR_BALANCE_TOO_LOW_MESSAGE");
    }
    else
    {
      PKLocalizedLynxString(CFSTR("APPLY_GENERIC_ERROR_TITLE"), 0);
      v1 = (void *)objc_claimAutoreleasedReturnValue();
      v2 = CFSTR("APPLY_GENERIC_ERROR_MESSAGE");
    }
    PKLocalizedLynxString(&v2->isa, 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    PKDisplayableErrorCustomWithType(-1, v1, v3, 0, 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    PKLocalizedLynxString(CFSTR("ELIGIBILITY_ERROR_INELIGIBLE_TITLE"), 0);
    v1 = (void *)objc_claimAutoreleasedReturnValue();
    PKLocalizedLynxString(CFSTR("ELIGIBILITY_ERROR_INELIGIBLE_MESSAGE"), 0);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v11[0] = *MEMORY[0x1E0CB2D78];
    PKLocalizedLynxString(CFSTR("ELIGIBILITY_ERROR_INELIGIBLE_CONTACT_SUPPORT"), 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v4;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v10, 1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v12[0] = v5;
    v12[1] = MEMORY[0x1E0C9AAB0];
    v11[1] = CFSTR("PKDisplayableErrorIsPreferredActionKey");
    v11[2] = CFSTR("PKErrorRecoveryURL");
    objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", CFSTR("https://support.apple.com/"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v12[2] = v6;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v12, v11, 3);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    PKDisplayableErrorCustomWithType(-1, v1, v3, 0, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v8;
}

BOOL PKCanShowAppleBalanceTopUpOptions(void *a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2;
  v4 = objc_msgSend(a1, "state");
  v5 = objc_msgSend(v3, "effectiveContactlessPaymentApplicationState");

  return v4 == 1 && (unint64_t)(v5 - 1) < 2;
}

uint64_t PKVerifySignatureForInStoreTopUpToken(void *a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  _BOOL4 v4;
  __SecKey *v5;
  __SecKey *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v10;
  CFTypeRef cf;
  SecTrustRef trust;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  NSObject *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if ((PKAppleBalanceInStoreSignatureVerificationDisabled() & 1) != 0)
  {
    v2 = 1;
    goto LABEL_20;
  }
  cf = 0;
  trust = 0;
  objc_msgSend(v1, "certificateChain");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = PKCreateAndValidateTrustWithCertsUsingMarkerOIDs(v3, &trust);

  if (!v4)
  {
    PKLogFacilityTypeGetObject(0xEuLL);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v1;
      v8 = "Failed to validate certificate chain for Apple Balance top up token: %@";
LABEL_11:
      _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
    }
LABEL_12:
    v6 = 0;
LABEL_13:

    v2 = 0;
    goto LABEL_14;
  }
  v5 = SecTrustCopyKey(trust);
  if (!v5)
  {
    PKLogFacilityTypeGetObject(0xEuLL);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v14 = v1;
      v8 = "Failed to retrieve verification key from certificate chain trust for Apple Balance top up token: %@";
      goto LABEL_11;
    }
    goto LABEL_12;
  }
  v6 = v5;
  if (!SecKeyVerifySignature(v5, (SecKeyAlgorithm)*MEMORY[0x1E0CD6DB0], (CFDataRef)objc_msgSend(v1, "payload"), (CFDataRef)objc_msgSend(v1, "signature"), (CFErrorRef *)&cf))
  {
    v7 = CFErrorCopyDescription((CFErrorRef)cf);
    PKLogFacilityTypeGetObject(0xEuLL);
    v10 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v14 = v1;
      v15 = 2112;
      v16 = v7;
      _os_log_impl(&dword_18FC92000, v10, OS_LOG_TYPE_DEFAULT, "Failed to verify signature for Apple Balance top up token: %@, error: %@", buf, 0x16u);
    }

    goto LABEL_13;
  }
  v2 = 1;
LABEL_14:
  if (trust)
    CFRelease(trust);
  if (v6)
    CFRelease(v6);
  if (cf)
    CFRelease(cf);
LABEL_20:

  return v2;
}

id PKAccountSupportTopicURLFromActionString(void *a1)
{
  id v1;
  __CFString *v2;
  void *v3;
  __CFString **v4;
  __CFString *v5;
  __CFString *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString **v11;
  uint64_t v13;

  v1 = a1;
  if (objc_msgSend(CFSTR("savings"), "isEqualToString:", v1))
  {
    v2 = CFSTR("savings");
    goto LABEL_11;
  }
  if (objc_msgSend(CFSTR("savingsDetails"), "isEqualToString:", v1))
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = PKURLActionRouteSavingsDetails;
  }
  else if (objc_msgSend(CFSTR("savingsAddMoney"), "isEqualToString:", v1))
  {
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = PKURLActionRouteSavingsAddMoney;
  }
  else
  {
    if (!objc_msgSend(CFSTR("savingsAddMoney"), "isEqualToString:", v1))
    {
      if (objc_msgSend(CFSTR("savingsAddBankAccount"), "isEqualToString:", v1))
      {
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = PKURLActionRouteSavingsAddBankAccount;
      }
      else if (objc_msgSend(CFSTR("savingsAccountInformation"), "isEqualToString:", v1))
      {
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = PKURLActionRouteSavingsAccountInfo;
      }
      else
      {
        if (!objc_msgSend(CFSTR("savingsDocuments"), "isEqualToString:", v1))
        {
          v5 = 0;
          goto LABEL_24;
        }
        v10 = (void *)MEMORY[0x1E0CB3940];
        v11 = PKURLActionRouteSavingsDocuments;
      }
      objc_msgSend(v10, "stringWithFormat:", CFSTR("%@/%@/%@"), CFSTR("savings"), CFSTR("details"), *v11);
      goto LABEL_10;
    }
    v3 = (void *)MEMORY[0x1E0CB3940];
    v4 = PKURLActionRouteSavingsWithdrawMoney;
  }
  objc_msgSend(v3, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("savings"), *v4, v13);
LABEL_10:
  v2 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_11:
  v5 = v2;
  if (!v2)
  {
LABEL_24:
    v9 = 0;
    goto LABEL_25;
  }
  if (+[PKWalletVisibility isWalletVisible](PKWalletVisibility, "isWalletVisible"))
  {
    v6 = CFSTR("shoebox://");
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("https://%@/"), CFSTR("wallet.apple.com"));
    v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)MEMORY[0x1E0C99E98];
  -[__CFString stringByAppendingString:](v6, "stringByAppendingString:", v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "URLWithString:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_25:
  return v9;
}

uint64_t PKSavingsAccountIsThresholdExceededActive(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = a1;
  objc_msgSend(v1, "savingsDetails");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (v2 && objc_msgSend(v1, "state") != 4 && objc_msgSend(v2, "fccStepUpRequired"))
  {
    objc_msgSend(v2, "fccStepUpDetails");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = objc_msgSend(v3, "thresholdExceeded");

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

const __CFString *PKAppletSubcredentialKeyClassToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("private");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("fleet");
  else
    return v1;
}

uint64_t PKAppletSubcredentialKeyClassFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("private"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("private"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("fleet")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("fleet")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKAppletSubcredentialCredentialAuthorityTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("secure-element");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("server");
  else
    return v1;
}

uint64_t PKAppletSubcredentialCredentialAuthorityTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("secure-element"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("secure-element"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("server")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("server")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

void PKAppletSubcredentialMergeDeviceCredential(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  PKAppletSubcredentialSharingConfirguration *v12;
  PKAppletSubcredentialSharingConfirguration *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v18 = a1;
  v3 = a2;
  objc_msgSend(v3, "endpointIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setEndpointIdentifier:", v4);

  if (!objc_msgSend(v18, "credentialType"))
    objc_msgSend(v18, "setCredentialType:", objc_msgSend(v3, "credentialType"));
  objc_msgSend(v3, "pairedReaderIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setPairedReaderIdentifier:", v5);

  objc_msgSend(v3, "partnerIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setPartnerIdentifier:", v6);

  if (!objc_msgSend(v18, "allSupportedRadioTechnologies"))
    objc_msgSend(v18, "setAllSupportedRadioTechnologies:", objc_msgSend(v3, "allSupportedRadioTechnologies"));
  if (!objc_msgSend(v18, "supportedRadioTechnologies"))
    objc_msgSend(v18, "setSupportedRadioTechnologies:", objc_msgSend(v3, "supportedRadioTechnologies"));
  objc_msgSend(v3, "originatorIDSHandle");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setOriginatorIDSHandle:", v7);

  objc_msgSend(v3, "sharingSessionIdentifier");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "setSharingSessionIdentifier:", v8);

  objc_msgSend(v18, "setIsOnlineImmobilizerToken:", objc_msgSend(v3, "isOnlineImmobilizerToken"));
  objc_msgSend(v18, "setCarKeyVehicleVersion:", objc_msgSend(v3, "carKeyVehicleVersion"));
  objc_msgSend(v18, "setCarKeyServerVersion:", objc_msgSend(v3, "carKeyServerVersion"));
  objc_msgSend(v18, "setKeyClass:", objc_msgSend(v3, "keyClass"));
  objc_msgSend(v18, "setCredentialAuthorityType:", objc_msgSend(v3, "credentialAuthorityType"));
  objc_msgSend(v3, "brandIdentifier");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9)
    objc_msgSend(v18, "setBrandIdentifier:", v9);
  objc_msgSend(v18, "sharingConfiguration");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v10;
  if (v10)
    v12 = v10;
  else
    v12 = objc_alloc_init(PKAppletSubcredentialSharingConfirguration);
  v13 = v12;

  -[PKAppletSubcredentialSharingConfirguration activationOptions](v13, "activationOptions");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "sharingConfiguration");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "activationOptions");
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  +[PKPassShareActivationOptions optionsFromRemoteOptions:localOptions:](PKPassShareActivationOptions, "optionsFromRemoteOptions:localOptions:", v14, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  -[PKAppletSubcredentialSharingConfirguration setActivationOptions:](v13, "setActivationOptions:", v17);
  objc_msgSend(v18, "setSharingConfiguration:", v13);

}

Class initFairPlayPassbookProvisioningObjC()
{
  Class result;

  if (qword_1ECF22980 != -1)
    dispatch_once(&qword_1ECF22980, &__block_literal_global_159);
  result = objc_getClass("FairPlayPassbookProvisioningObjC");
  _MergedGlobals_256 = (uint64_t)result;
  getFairPlayPassbookProvisioningObjCClass[0] = (uint64_t (*)())FairPlayPassbookProvisioningObjCFunction;
  return result;
}

id FairPlayPassbookProvisioningObjCFunction()
{
  return (id)_MergedGlobals_256;
}

void sub_19022D864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_19022DD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_19022E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _zeroCurrencyAmount(void *a1)
{
  void *v1;
  NSString *v2;
  NSDecimalNumber *v3;
  void *v4;
  void *v5;

  objc_msgSend(a1, "devicePrimaryContactlessPaymentApplication");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "appletCurrencyCode");
  v2 = (NSString *)objc_claimAutoreleasedReturnValue();

  if (v2)
  {
    objc_msgSend(MEMORY[0x1E0CB3598], "zero");
    v3 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
    PKCurrencyAmountCreate(v3, v2, 0);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "formattedStringValue");
    v5 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    PKLocalizedPaymentString(CFSTR("TRANSIT_TRANSACTION_FARE_FREE"), 0);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v5;
}

PKCurrencyAmount *PKCurrencyAmountMake(NSDecimalNumber *a1, NSString *a2)
{
  return PKCurrencyAmountCreate(a1, a2, 0);
}

uint64_t PKDefaultFractionDigitsForCurrencyCode(void *a1)
{
  __CFString *v1;
  uint64_t v2;
  NSObject *v3;
  int32_t defaultFractionDigits;
  uint8_t buf[4];
  __CFString *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  defaultFractionDigits = 0;
  if (CFNumberFormatterGetDecimalInfoForCurrencyCode(v1, &defaultFractionDigits, 0))
  {
    v2 = defaultFractionDigits & ~(defaultFractionDigits >> 31);
  }
  else
  {
    PKLogFacilityTypeGetObject(6uLL);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v3, OS_LOG_TYPE_DEFAULT, "Couldn't get decimal info for currency code '%@'", buf, 0xCu);
    }

    v2 = 0;
  }

  return v2;
}

PKCurrencyAmount *PKCurrencyAmountCreate(NSDecimalNumber *a1, NSString *a2, uint64_t a3)
{
  NSString *v5;
  NSDecimalNumber *v6;
  PKCurrencyAmount *v7;

  v5 = a2;
  v6 = a1;
  v7 = -[PKCurrencyAmount initWithAmount:currency:exponent:]([PKCurrencyAmount alloc], "initWithAmount:currency:exponent:", v6, v5, a3);

  return v7;
}

id PKCurrencyAmountCreateScaled(void *a1, void *a2, uint64_t a3)
{
  id v5;
  NSDecimalNumber *v6;
  void *v7;

  v5 = a2;
  PKDecimalAmountFromAmount(a1, v5);
  v6 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  PKCurrencyAmountCreate(v6, (NSString *)v5, a3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

id PKDecimalAmountFromAmount(void *a1, void *a2)
{
  void *v3;
  id v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = 0;
  if (a1 && a2)
  {
    v4 = a2;
    v5 = objc_msgSend(a1, "longLongValue");
    v6 = PKMaximumFractionDigitsForCurrencyCode(v4);

    if (v5 >= 0)
      v7 = v5;
    else
      v7 = -v5;
    objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithMantissa:exponent:isNegative:", v7, (__int16)-v6, (unint64_t)v5 >> 63);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

uint64_t PKPayLaterFinancingPlanPaymentTypeIsTotalAmountReduction(uint64_t a1, uint64_t a2)
{
  _BOOL4 v2;

  v2 = (unint64_t)(a2 - 1) < 3;
  if (a1 != 7)
    v2 = 0;
  return (unint64_t)(a1 - 2) < 2 || v2;
}

const __CFString *PKPayLaterPaymentTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E2AD5780[a1 - 1];
}

const __CFString *PKPayLaterPaymentSubtypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD57B8[a1 - 1];
}

id PKUsageNotificationClientInterface()
{
  if (qword_1ECF229A0 != -1)
    dispatch_once(&qword_1ECF229A0, &__block_literal_global_162);
  return (id)_MergedGlobals_258;
}

uint64_t PKProtobufPaymentTokenContextReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  PKProtobufCustomPrecisionAmount *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 48;
        goto LABEL_25;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
        goto LABEL_25;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_25;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_25:
        v20 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_43;
      case 5u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        *(_BYTE *)(a1 + 64) |= 1u;
        while (2)
        {
          v24 = *v3;
          v25 = *(_QWORD *)(a2 + v24);
          if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v14 = v22++ >= 9;
              if (v14)
              {
                v23 = 0;
                goto LABEL_42;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v23 = 0;
LABEL_42:
        *(_QWORD *)(a1 + 8) = -(v23 & 1) ^ (v23 >> 1);
        goto LABEL_43;
      case 6u:
        v27 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 16), v27);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v27, a2) & 1) == 0)
          goto LABEL_45;
        goto LABEL_38;
      case 7u:
        v27 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 24), v27);
        if (PBReaderPlaceMark() && (PKProtobufNSDecimalNumberReadFrom((uint64_t)v27, a2) & 1) != 0)
        {
LABEL_38:
          PBReaderRecallMark();

LABEL_43:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_45:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_43;
    }
  }
}

id PKCredentialRoutingInformationFromPairedEntityIdentifer(void *a1, id *a2, id *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a1;
  v6 = objc_msgSend(v5, "rangeOfString:options:", CFSTR("."), 4);
  if (v6 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = v6;
    v11 = objc_msgSend(v5, "rangeOfString:options:range:", CFSTR("."), 4, 0, v6);
    v7 = 0;
    v8 = 0;
    if (v11 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v12 = v11;
      objc_msgSend(v5, "substringToIndex:", v11);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "substringWithRange:", v12 + 1, 4);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_msgSend(v5, "substringFromIndex:", v10 + 1);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
  }
  if (!objc_msgSend(v9, "length") || !objc_msgSend(v7, "length"))
  {

    v7 = 0;
    v8 = 0;
    v9 = 0;
  }
  if (a2)
    objc_storeStrong(a2, v9);
  if (v8)
    objc_storeStrong(a3, v8);

  return v7;
}

id PKVehicleInitiatedPairingLaunchURL(void *a1, char a2, void *a3, uint64_t a4)
{
  id v7;
  objc_class *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;

  v7 = a3;
  v8 = (objc_class *)MEMORY[0x1E0C99DE8];
  v9 = a1;
  v10 = objc_alloc_init(v8);
  v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB39D8]), "initWithName:value:", CFSTR("brand"), v9);

  objc_msgSend(v10, "addObject:", v11);
  v12 = objc_alloc(MEMORY[0x1E0CB39D8]);
  PKRadioTechnologiesToString(a2);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithName:value:", CFSTR("supportedRadioTechnologies"), v13);
  objc_msgSend(v10, "addObject:", v14);

  v15 = objc_alloc(MEMORY[0x1E0CB39D8]);
  if ((unint64_t)(a4 - 1) > 7)
    v16 = CFSTR("unknown");
  else
    v16 = off_1E2AD5808[a4 - 1];
  v17 = (void *)objc_msgSend(v15, "initWithName:value:", CFSTR("referralSource"), v16);
  objc_msgSend(v10, "addObject:", v17);

  if (v7)
  {
    v18 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB39D8]), "initWithName:value:", CFSTR("pti"), v7);
    objc_msgSend(v10, "addObject:", v18);

  }
  v19 = objc_alloc_init(MEMORY[0x1E0CB3998]);
  objc_msgSend(v19, "setScheme:", CFSTR("wallet"));
  objc_msgSend(v19, "setHost:", CFSTR("setup"));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("/%@"), CFSTR("carkey-pairing"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "setPath:", v20);

  objc_msgSend(v19, "setQueryItems:", v10);
  objc_msgSend(v19, "URL");
  v21 = (void *)objc_claimAutoreleasedReturnValue();

  return v21;
}

const __CFString *PKSubcredentialPairingReferralSourceToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E2AD5808[a1 - 1];
}

uint64_t PKSubcredentialPairingReferralSourceFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("oemApp")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("vehicle")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("carPlay")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("externalLink")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("walletMoreMenu")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("walletTile")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("addToRemoteDevice")) & 1) != 0)
  {
    v2 = 7;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("remoteDeviceSetup")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKLocalizedCarIssuerNameFromIssuerIdentifier(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
    goto LABEL_6;
  objc_msgSend(v4, "supportedRegionFeatureOfType:didFailOSVersionRequirements:", 2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "localizedNameForIssuerWithIdentifier:", v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v7 || !objc_msgSend(v7, "length"))
  {

LABEL_6:
    PKLocalizedCredentialString(CFSTR("GENERIC_PARTNER_NAME"), 0);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }

LABEL_7:
  return v8;
}

uint64_t PKFieldPropertiesStartSecondaryLookup(void *a1, void *a2, _BYTE *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char v16;
  NSObject *v17;
  NSObject *v18;
  id v20;
  id v21;
  uint8_t buf[4];
  NSObject *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    PKAssociatedAIDForField(v5);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (a3)
      *a3 = 0;
    if (v7)
    {
      objc_msgSend(v6, "appletWithIdentifier:", v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (v9)
      {
        v21 = 0;
        v10 = objc_msgSend(v6, "setActivePaymentApplet:error:", v9, &v21);
        v11 = v21;
        if ((v10 & 1) == 0)
        {
          PKLogFacilityTypeGetObject(6uLL);
          v12 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v23 = v11;
            _os_log_impl(&dword_18FC92000, v12, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties lookup failed to set active applet. Error: %@", buf, 0xCu);
          }

        }
        if (a3)
          *a3 = 1;

      }
      else
      {
        PKLogFacilityTypeGetObject(6uLL);
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v23 = v8;
          _os_log_impl(&dword_18FC92000, v14, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties lookup failed to find applet with aid: %@", buf, 0xCu);
        }

        objc_msgSend(v5, "setSecondaryPropertiesAcquired:", 1);
        v10 = 0;
      }

      if (!v6)
        goto LABEL_22;
    }
    else
    {
      v10 = 1;
      if (!v6)
        goto LABEL_22;
    }
    if (v10 && (objc_msgSend(v6, "setHostCards:", 0) & 1) == 0)
    {
      PKLogFacilityTypeGetObject(6uLL);
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_18FC92000, v17, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties lookup failed to clear active VAS cards.", buf, 2u);
      }
      goto LABEL_34;
    }
LABEL_22:
    if (!v10)
    {
      v13 = 0;
LABEL_36:

      goto LABEL_37;
    }
    v20 = 0;
    if (v8)
      v15 = 3;
    else
      v15 = 0;
    v16 = objc_msgSend(v6, "startCardEmulation:authorization:error:", v15, 0, &v20);
    v17 = v20;
    if ((v16 & 1) != 0)
    {
      v13 = 1;
LABEL_35:

      goto LABEL_36;
    }
    PKLogFacilityTypeGetObject(6uLL);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v23 = v17;
      _os_log_impl(&dword_18FC92000, v18, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties failed to start Card Emulation. Error: %@", buf, 0xCu);
    }

LABEL_34:
    v13 = 0;
    goto LABEL_35;
  }
  v13 = 0;
LABEL_37:

  return v13;
}

{
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int v12;
  id v13;
  NSObject *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  id v20;
  id v21;
  uint8_t buf[4];
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    PKAssociatedAIDForField(v5);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (void *)v7;
    if (a3)
      *a3 = 0;
    if (!v7)
      goto LABEL_13;
    objc_msgSend(v6, "appletWithIdentifier:", v7);
    v9 = objc_claimAutoreleasedReturnValue();
    if (v9)
    {
      v10 = (void *)v9;
      objc_msgSend(v5, "credentialIdentifier");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 0;
      v12 = objc_msgSend(v6, "setActiveApplet:key:outError:", v10, v11, &v21);
      v13 = v21;

      if ((v12 & 1) == 0)
      {
        PKLogFacilityTypeGetObject(6uLL);
        v14 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v23 = v13;
          _os_log_impl(&dword_18FC92000, v14, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties lookup failed to set active applet. Error: %@", buf, 0xCu);
        }

      }
      if (a3)
        *a3 = 1;

      if (v12)
      {
LABEL_13:
        v20 = 0;
        v15 = objc_msgSend(v6, "startCardEmulationAuthorization:deferred:error:", 0, 0, &v20);
        v16 = v20;
        if ((v15 & 1) == 0)
        {
          PKLogFacilityTypeGetObject(6uLL);
          v17 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v23 = v16;
            _os_log_impl(&dword_18FC92000, v17, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties failed to start Card Emulation. Error: %@", buf, 0xCu);
          }

        }
        goto LABEL_23;
      }
    }
    else
    {
      PKLogFacilityTypeGetObject(6uLL);
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v23 = v8;
        _os_log_impl(&dword_18FC92000, v18, OS_LOG_TYPE_DEFAULT, "PKFieldProperties: secondary properties lookup failed to find applet with aid: %@", buf, 0xCu);
      }

      objc_msgSend(v5, "setSecondaryPropertiesAcquired:", 1);
    }
    v15 = 0;
LABEL_23:

    goto LABEL_24;
  }
  v15 = 0;
LABEL_24:

  return v15;
}

__CFString *PKAssociatedAIDForField(void *a1)
{
  if (objc_msgSend(a1, "accessTerminalSubtype") == 2)
    return CFSTR("A000000809434343444B417631");
  else
    return (__CFString *)0;
}

void PKFieldPropertiesResolveSecondaryLookup(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v4, "count"));
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v6 = v4;
    v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)v14;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v14 != v9)
            objc_enumerationMutation(v6);
          objc_msgSend(*(id *)(*((_QWORD *)&v13 + 1) + 8 * v10), "merchantId", (_QWORD)v13);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          if (v11)
            objc_msgSend(v5, "addObject:", v11);

          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      }
      while (v8);
    }

    v12 = (void *)objc_msgSend(v5, "copy");
    objc_msgSend(v3, "setMerchantIdentifiers:", v12);

    objc_msgSend(v3, "setSecondaryPropertiesAcquired:", 1);
  }

}

{
  id v3;
  int v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a1;
  v3 = a2;
  if (v9)
  {
    v4 = objc_msgSend(v3, "result");
    if (v4 == 61446)
      v5 = 1;
    else
      v5 = 2;
    objc_msgSend(v9, "setPairingRequested:", v5);
    if (objc_msgSend(v3, "background"))
    {
      objc_msgSend(v9, "setBackgroundTransaction:", 1);
    }
    else if (v4 != 61445)
    {
LABEL_9:
      objc_msgSend(v9, "setSecondaryPropertiesAcquired:", 1);
      goto LABEL_10;
    }
    objc_msgSend(v3, "applet");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "identifier");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setApplicationIdentifier:", v7);

    objc_msgSend(v3, "keyIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setCredentialIdentifier:", v8);

    goto LABEL_9;
  }
LABEL_10:

}

{
  id v3;
  unsigned __int16 v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a1;
  v3 = a2;
  if (v10)
  {
    v4 = objc_msgSend(v3, "result");
    objc_msgSend(v3, "brandCode");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "setCarKeyBrandCode:", objc_msgSend(v5, "integerValue"));

    if (v4 == 61446)
      v6 = 1;
    else
      v6 = 2;
    objc_msgSend(v10, "setPairingRequested:", v6);
    if (v4 == 61445)
    {
      objc_msgSend(v3, "applet");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "identifier");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setApplicationIdentifier:", v8);

      objc_msgSend(v3, "keyIdentifier");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setCredentialIdentifier:", v9);

    }
    objc_msgSend(v10, "setSecondaryPropertiesAcquired:", 1);
  }

}

uint64_t PKFieldPropertiesStartSecondaryLookup(PKFieldProperties *a1, STSSession *a2, BOOL *a3)
{
  if (a1 && a3)
    *a3 = 0;
  return 0;
}

void sub_190239944(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190239B84(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_190239DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initSFDeviceDiscovery()
{
  Class result;

  if (qword_1ECF229B0 != -1)
    dispatch_once(&qword_1ECF229B0, &__block_literal_global_164);
  result = objc_getClass("SFDeviceDiscovery");
  _MergedGlobals_259 = (uint64_t)result;
  getSFDeviceDiscoveryClass[0] = (uint64_t (*)())SFDeviceDiscoveryFunction;
  return result;
}

id SFDeviceDiscoveryFunction()
{
  return (id)_MergedGlobals_259;
}

uint64_t PKAccountFundingSourceVerificationStatusFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("eligible")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ineligible")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sent")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("failed")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountFundingSourceVerificationStatusToString(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return off_1E2AD5990[a1];
}

uint64_t PKAccountFundingSourceVerificationFailureReasonFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("sendFailed")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("expired")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("maxVerificationAttemptsHit")) & 1) != 0)
  {
    v2 = 4;
  }
  else
  {
    v2 = v1 == 0;
  }

  return v2;
}

const __CFString *PKAccountFundingSourceVerificationFailureReasonToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return (const __CFString *)qword_1E2AD5958[a1 - 1];
}

uint64_t PKAccountFundingSourceVerificationActionTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contactSupport")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("retry")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountFundingSourceVerificationActionTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AD5978[a1];
}

id PKGEOLocationFromCLLocation(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  CLLocationCoordinate2D v5;

  v1 = a1;
  v2 = v1;
  if (v1 && (objc_msgSend(v1, "coordinate"), CLLocationCoordinate2DIsValid(v5)))
    v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D27168]), "initWithCLLocation:", v2);
  else
    v3 = 0;

  return v3;
}

Class initMKWalletMerchantLookupRequest()
{
  Class result;

  if (qword_1ECF229C0 != -1)
    dispatch_once(&qword_1ECF229C0, &__block_literal_global_166);
  result = objc_getClass("MKWalletMerchantLookupRequest");
  _MergedGlobals_260 = (uint64_t)result;
  getMKWalletMerchantLookupRequestClass[0] = (uint64_t (*)())MKWalletMerchantLookupRequestFunction;
  return result;
}

id MKWalletMerchantLookupRequestFunction()
{
  return (id)_MergedGlobals_260;
}

void sub_19023C824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufDeferredPaymentSummaryItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  int v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        v13 = v12 + 1;
        if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
          break;
        v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v16 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        *(_BYTE *)(a1 + 16) |= 1u;
        v18 = *v3;
        v19 = *(_QWORD *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(_QWORD *)(a2 + *v4))
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v19);
          *(_QWORD *)(a2 + v18) = v19 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + *v5) = 1;
          v20 = 0;
        }
        *(_QWORD *)(a1 + 8) = v20;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *PKAnalyticsReportSwitchToggleResultValue(int a1)
{
  if (a1)
    return CFSTR("true");
  else
    return CFSTR("false");
}

const __CFString *PKPaymentAuthorizationStateMachineCancelReasonToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("user");
  if (a1)
    return v1;
  else
    return CFSTR("host");
}

void sub_190243298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902436B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id ConfigurationFromV0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v13;
  void *v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  v7 = 0;
  if (a2 && v5)
  {
    +[PKPassAutomaticSelectionCriterion criterionForExpressMode:](PKPassAutomaticSelectionCriterion, "criterionForExpressMode:", a1);
    v8 = objc_claimAutoreleasedReturnValue();
    if (v8)
    {
      v9 = (void *)v8;
      v13 = v6;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v13, 1);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      v14 = v10;
      v11 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithObjects:", v9, 0);
      v15[0] = v11;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v15, &v14, 1);
      v7 = (void *)objc_claimAutoreleasedReturnValue();

    }
    else
    {
      v7 = 0;
    }
  }

  return v7;
}

id FindLockCharacteristicInAccessory(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __objc2_class_ro **p_info;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  char v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  id obj;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  objc_msgSend(a1, "services");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)v29;
    p_info = PKAddCarKeyPassConfiguration.info;
    v21 = *(_QWORD *)v29;
    do
    {
      v5 = 0;
      v22 = v2;
      do
      {
        if (*(_QWORD *)v29 != v3)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v5);
        objc_msgSend(v6, "serviceType");
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        ((void (__cdecl *)())p_info[377])();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v7, "isEqualToString:", v8);

        if (v9)
        {
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          objc_msgSend(v6, "characteristics");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v25;
LABEL_9:
            v14 = 0;
            while (1)
            {
              if (*(_QWORD *)v25 != v13)
                objc_enumerationMutation(v10);
              v15 = *(void **)(*((_QWORD *)&v24 + 1) + 8 * v14);
              objc_msgSend(v15, "characteristicType");
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              off_1ECF21BD0();
              v17 = (void *)objc_claimAutoreleasedReturnValue();
              v18 = objc_msgSend(v16, "isEqualToString:", v17);

              if ((v18 & 1) != 0)
                break;
              if (v12 == ++v14)
              {
                v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v24, v32, 16);
                if (v12)
                  goto LABEL_9;
                goto LABEL_15;
              }
            }
            v19 = v15;

            v3 = v21;
            v2 = v22;
            p_info = (__objc2_class_ro **)(PKAddCarKeyPassConfiguration + 32);
            if (v19)
              goto LABEL_20;
          }
          else
          {
LABEL_15:

            v3 = v21;
            v2 = v22;
            p_info = (__objc2_class_ro **)(PKAddCarKeyPassConfiguration + 32);
          }
        }
        ++v5;
      }
      while (v5 != v2);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v28, v33, 16);
    }
    while (v2);
  }
  v19 = 0;
LABEL_20:

  return v19;
}

Class initHMMutableHomeManagerConfiguration()
{
  Class result;

  if (qword_1EE1C5680 != -1)
    dispatch_once(&qword_1EE1C5680, &__block_literal_global_125_0);
  result = objc_getClass("HMMutableHomeManagerConfiguration");
  qword_1EE1C5670 = (uint64_t)result;
  _MergedGlobals_180 = (uint64_t (*)())HMMutableHomeManagerConfigurationFunction;
  return result;
}

id HMMutableHomeManagerConfigurationFunction()
{
  return (id)qword_1EE1C5670;
}

Class initHMHomeManager()
{
  Class result;

  if (qword_1EE1C5680 != -1)
    dispatch_once(&qword_1EE1C5680, &__block_literal_global_125_0);
  result = objc_getClass("HMHomeManager");
  qword_1EE1C5688 = (uint64_t)result;
  off_1ECF21BC0 = (uint64_t (*)())HMHomeManagerFunction;
  return result;
}

id HMHomeManagerFunction()
{
  return (id)qword_1EE1C5688;
}

id initHMServiceTypeLockMechanism()
{
  id *v0;

  if (qword_1EE1C5680 != -1)
    dispatch_once(&qword_1EE1C5680, &__block_literal_global_125_0);
  v0 = (id *)dlsym((void *)qword_1EE1C5678, "HMServiceTypeLockMechanism");
  objc_storeStrong((id *)&_MergedGlobals_1_5, *v0);
  off_1ECF21BC8 = (uint64_t (*)())HMServiceTypeLockMechanismFunction;
  return (id)_MergedGlobals_1_5;
}

id HMServiceTypeLockMechanismFunction()
{
  return (id)_MergedGlobals_1_5;
}

id initHMCharacteristicTypeTargetLockMechanismState()
{
  id *v0;

  if (qword_1EE1C5680 != -1)
    dispatch_once(&qword_1EE1C5680, &__block_literal_global_125_0);
  v0 = (id *)dlsym((void *)qword_1EE1C5678, "HMCharacteristicTypeTargetLockMechanismState");
  objc_storeStrong((id *)&qword_1EE1C5668, *v0);
  off_1ECF21BD0 = (uint64_t (*)())HMCharacteristicTypeTargetLockMechanismStateFunction;
  return (id)qword_1EE1C5668;
}

id HMCharacteristicTypeTargetLockMechanismStateFunction()
{
  return (id)qword_1EE1C5668;
}

void sub_1902478D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1902488F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id location)
{
  _Block_object_dispose(&a35, 8);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initFUFlightFactory()
{
  Class result;

  if (qword_1EE1C56A8 != -1)
    dispatch_once(&qword_1EE1C56A8, &__block_literal_global_173);
  result = objc_getClass("FUFlightFactory");
  qword_1EE1C5698 = (uint64_t)result;
  _MergedGlobals_181 = (uint64_t (*)())FUFlightFactoryFunction;
  return result;
}

id FUFlightFactoryFunction()
{
  return (id)qword_1EE1C5698;
}

id initFUFactoryProvider_Default()
{
  id *v0;

  if (qword_1EE1C56A8 != -1)
    dispatch_once(&qword_1EE1C56A8, &__block_literal_global_173);
  v0 = (id *)dlsym((void *)qword_1EE1C56A0, "FUFactoryProvider_Default");
  objc_storeStrong((id *)&_MergedGlobals_1_6, *v0);
  off_1ECF21BE0 = (uint64_t (*)())FUFactoryProvider_DefaultFunction;
  return (id)_MergedGlobals_1_6;
}

id FUFactoryProvider_DefaultFunction()
{
  return (id)_MergedGlobals_1_6;
}

void sub_190249B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_190249E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id PKConvertErrorToAddSecureElementPassProvisioningErrorDomain(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  void *v9;
  uint8_t v11[24];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  objc_msgSend(v1, "domain");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v3, "isEqualToString:", CFSTR("PKSubcredentialProvisioningErrorDomain"));

  if (!v4)
  {
    PKLogFacilityTypeGetObject(0x16uLL);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)v11 = 138412290;
      *(_QWORD *)&v11[4] = v2;
      v8 = "Unexpected error domain while converting error to access pass domain: %@";
LABEL_8:
      _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, v8, v11, 0xCu);
    }
LABEL_9:

    goto LABEL_10;
  }
  v5 = objc_msgSend(v2, "code");
  v6 = 0;
  switch(v5)
  {
    case 3:
      v6 = 3;
      break;
    case 4:
      v6 = 5;
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 25:
    case 26:
    case 27:
      PKLogFacilityTypeGetObject(0x16uLL);
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
      *(_DWORD *)v11 = 138412290;
      *(_QWORD *)&v11[4] = v2;
      v8 = "Converting unexpected error to public error domain! %@";
      goto LABEL_8;
    case 20:
    case 21:
    case 24:
      v6 = 4;
      break;
    case 22:
      v6 = 1;
      break;
    default:
      break;
  }
LABEL_11:
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKAddSecureElementPassErrorDomain"), v6, 0, *(_OWORD *)v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id PKConvertDAErrorToSubcredentialProvisioningErrorDomain(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  int v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v6 = v5;
  if (v3)
    objc_msgSend(v5, "setObject:forKey:", v3, *MEMORY[0x1E0CB3388]);
  if (v4)
    objc_msgSend(v6, "setObject:forKey:", v4, *MEMORY[0x1E0CB2938]);
  if (!v3)
    goto LABEL_14;
  objc_msgSend(v3, "domain");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "isEqualToString:", *MEMORY[0x1E0D1D360]);

  if ((v8 & 1) == 0)
  {
    PKLogFacilityTypeGetObject(0x16uLL);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 138412290;
      v15 = v3;
      _os_log_impl(&dword_18FC92000, v11, OS_LOG_TYPE_DEFAULT, "Unexpected error domain while converting error to credential provisioning domain: %@", (uint8_t *)&v14, 0xCu);
    }

LABEL_14:
    v10 = 0;
    goto LABEL_15;
  }
  v9 = objc_msgSend(v3, "code");
  if (v9 <= 100)
  {
    v10 = 22;
    switch(v9)
    {
      case 0:
      case 1:
        break;
      case 2:
      case 10:
        v10 = 3;
        break;
      case 7:
      case 13:
        v10 = 4;
        break;
      case 14:
        v10 = 18;
        break;
      default:
        goto LABEL_29;
    }
  }
  else if (v9 > 214)
  {
    switch(v9)
    {
      case 215:
        v10 = 21;
        break;
      case 218:
        v10 = 27;
        break;
      case 219:
        v10 = 26;
        break;
      default:
LABEL_29:
        v10 = 1;
        break;
    }
  }
  else
  {
    switch(v9)
    {
      case 'e':
      case 'j':
      case 'k':
        v10 = 14;
        break;
      case 'g':
        v10 = 16;
        break;
      case 'm':
        v10 = 12;
        break;
      case 'n':
        v10 = 17;
        break;
      default:
        goto LABEL_29;
    }
  }
LABEL_15:
  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKSubcredentialProvisioningErrorDomain"), v10, v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  return v12;
}

id PKSubcredentialProvisioningDisplayableDAError(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unint64_t v13;

  v1 = a1;
  objc_msgSend(v1, "userInfo");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = *MEMORY[0x1E0CB3388];
  objc_msgSend(v2, "objectForKey:", *MEMORY[0x1E0CB3388]);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)v4;
  v6 = 0;
  if (v1 && v4)
  {
    v7 = (void *)objc_msgSend(v2, "mutableCopy");
    objc_msgSend(v7, "removeObjectForKey:", v3);
    v8 = (void *)MEMORY[0x1E0CB35C8];
    objc_msgSend(v1, "domain");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "errorWithDomain:code:userInfo:", v9, objc_msgSend(v1, "code"), v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v10, "description");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    PKConvertDAErrorToSubcredentialProvisioningErrorDomain(v5, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    v13 = objc_msgSend(v12, "code");
    if (v13 > 0x1B || ((1 << v13) & 0xC200000) == 0)
      v6 = 0;
    else
      v6 = v12;

  }
  return v6;
}

id PKSubcredentialProvisioningError(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v9 = (objc_class *)MEMORY[0x1E0CB3940];
  v10 = a1;
  v11 = (void *)objc_msgSend([v9 alloc], "initWithFormat:arguments:", v10, &a9);

  v12 = objc_alloc(MEMORY[0x1E0CB35C8]);
  v16 = *MEMORY[0x1E0CB2D50];
  v17[0] = v11;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v17, &v16, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (void *)objc_msgSend(v12, "initWithDomain:code:userInfo:", CFSTR("PKSubcredentialProvisioningErrorDomain"), 0, v13);

  return v14;
}

void sub_19024BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19024C108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19024C2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19024C414(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_19024D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19024F5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19025052C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190250694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufAppletSubcredentialSharingInvitationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;
  uint64_t v42;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_60;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_62;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_60:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_62:
          v42 = 92;
          goto LABEL_75;
        case 2u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
          goto LABEL_58;
        case 3u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
          goto LABEL_58;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 64;
          goto LABEL_58;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 56;
          goto LABEL_58;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 72;
          goto LABEL_58;
        case 7u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 80;
          goto LABEL_58;
        case 8u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 96) |= 2u;
          while (2)
          {
            v28 = *v3;
            v29 = *(_QWORD *)(a2 + v28);
            if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
              *(_QWORD *)(a2 + v28) = v29 + 1;
              v19 |= (unint64_t)(v30 & 0x7F) << v26;
              if (v30 < 0)
              {
                v26 += 7;
                v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_66:
          v42 = 28;
          goto LABEL_75;
        case 9u:
          v31 = 0;
          v32 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 96) |= 1u;
          while (2)
          {
            v33 = *v3;
            v34 = *(_QWORD *)(a2 + v33);
            if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
              *(_QWORD *)(a2 + v33) = v34 + 1;
              v19 |= (unint64_t)(v35 & 0x7F) << v31;
              if (v35 < 0)
              {
                v31 += 7;
                v14 = v32++ >= 9;
                if (v14)
                {
                  LODWORD(v19) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_70:
          v42 = 24;
          goto LABEL_75;
        case 0xAu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 48;
          goto LABEL_58;
        case 0xBu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_58;
        case 0xCu:
          v36 = 0;
          v37 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 96) |= 4u;
          break;
        case 0xDu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
LABEL_58:
          v41 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v38 = *v3;
        v39 = *(_QWORD *)(a2 + v38);
        if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v4))
          break;
        v40 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v39);
        *(_QWORD *)(a2 + v38) = v39 + 1;
        v19 |= (unint64_t)(v40 & 0x7F) << v36;
        if ((v40 & 0x80) == 0)
          goto LABEL_72;
        v36 += 7;
        v14 = v37++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_74;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_72:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_74:
      v42 = 88;
LABEL_75:
      *(_DWORD *)(a1 + v42) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKInstallmentPlanStateFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("initiated"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("initiated"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("active")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("active")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("canceled")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("canceled")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("closed")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("closed")),
          v12,
          v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

Class initMKWalletMerchantLookupRequest_0()
{
  Class result;

  if (qword_1ECF22A38 != -1)
    dispatch_once(&qword_1ECF22A38, &__block_literal_global_178);
  result = objc_getClass("MKWalletMerchantLookupRequest");
  _MergedGlobals_266 = (uint64_t)result;
  getMKWalletMerchantLookupRequestClass_0[0] = (uint64_t (*)())MKWalletMerchantLookupRequestFunction_0;
  return result;
}

id MKWalletMerchantLookupRequestFunction_0()
{
  return (id)_MergedGlobals_266;
}

uint64_t PKPaymentTransactionQuestionTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("origin")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("travel")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPaymentTransactionQuestionTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2AD72E0[a1];
}

uint64_t PKProtobufPaymentClientUpdateReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  PKProtobufPaymentSummaryItem *v25;
  void *v26;
  uint64_t result;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 56;
        goto LABEL_34;
      case 2u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 92) |= 2u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_62:
        v33 = 88;
        goto LABEL_67;
      case 3u:
        v25 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        objc_msgSend((id)a1, "addPaymentSummaryItems:", v25);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentSummaryItemReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_58;
      case 4u:
        v25 = objc_alloc_init(PKProtobufShippingMethod);
        objc_msgSend((id)a1, "addShippingMethods:", v25);
        if (!PBReaderPlaceMark() || (PKProtobufShippingMethodReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_58;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
LABEL_34:
        v26 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_68;
      case 7u:
        v25 = objc_alloc_init(PKProtobufShippingMethods);
        objc_storeStrong((id *)(a1 + 16), v25);
        if (!PBReaderPlaceMark() || !PKProtobufShippingMethodsReadFrom((id *)&v25->super.super.isa, a2))
          goto LABEL_70;
        goto LABEL_58;
      case 8u:
        v28 = 0;
        v29 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 92) |= 1u;
        while (2)
        {
          v30 = *v3;
          v31 = *(_QWORD *)(a2 + v30);
          if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v31);
            *(_QWORD *)(a2 + v30) = v31 + 1;
            v21 |= (unint64_t)(v32 & 0x7F) << v28;
            if (v32 < 0)
            {
              v28 += 7;
              v14 = v29++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_66:
        v33 = 72;
LABEL_67:
        *(_DWORD *)(a1 + v33) = v21;
        goto LABEL_68;
      case 9u:
        v25 = objc_alloc_init(PKProtobufPaymentTokenContext);
        objc_msgSend((id)a1, "addMultiTokenContexts:", v25);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentTokenContextReadFrom((uint64_t)v25, a2) & 1) == 0)
          goto LABEL_70;
        goto LABEL_58;
      case 0xAu:
        v25 = objc_alloc_init(PKProtobufRecurringPaymentRequest);
        objc_storeStrong((id *)(a1 + 48), v25);
        if (!PBReaderPlaceMark() || !PKProtobufRecurringPaymentRequestReadFrom((uint64_t)v25, a2))
          goto LABEL_70;
        goto LABEL_58;
      case 0xBu:
        v25 = objc_alloc_init(PKProtobufAutomaticReloadPaymentRequest);
        objc_storeStrong((id *)(a1 + 8), v25);
        if (!PBReaderPlaceMark() || !PKProtobufAutomaticReloadPaymentRequestReadFrom((uint64_t)v25, a2))
          goto LABEL_70;
        goto LABEL_58;
      case 0xCu:
        v25 = objc_alloc_init(PKProtobufDeferredPaymentRequest);
        objc_storeStrong((id *)(a1 + 24), v25);
        if (PBReaderPlaceMark() && (PKProtobufDeferredPaymentRequestReadFrom((uint64_t)v25, a2) & 1) != 0)
        {
LABEL_58:
          PBReaderRecallMark();

LABEL_68:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_70:

        return 0;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_68;
    }
  }
}

uint64_t PKProtobufPaymentInstrumentThumbnailResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        PBReaderReadString();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 8;
      }
      else
      {
        if ((_DWORD)v17 == 2)
        {
          v21 = 0;
          v22 = 0;
          v23 = 0;
          *(_BYTE *)(a1 + 32) |= 1u;
          while (1)
          {
            v24 = *v3;
            v25 = *(_QWORD *)(a2 + v24);
            if (v25 == -1 || v25 >= *(_QWORD *)(a2 + *v4))
              break;
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v25);
            *(_QWORD *)(a2 + v24) = v25 + 1;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if ((v26 & 0x80) == 0)
              goto LABEL_34;
            v21 += 7;
            v14 = v22++ >= 9;
            if (v14)
            {
              LODWORD(v23) = 0;
              goto LABEL_36;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_34:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v23) = 0;
LABEL_36:
          *(_DWORD *)(a1 + 16) = v23;
          continue;
        }
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
        }
        PBReaderReadData();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = 24;
      }
      v20 = *(void **)(a1 + v19);
      *(_QWORD *)(a1 + v19) = v18;

    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PDCloudStoreServiceInterface()
{
  if (qword_1ECF22A48 != -1)
    dispatch_once(&qword_1ECF22A48, &__block_literal_global_179);
  return (id)_MergedGlobals_267;
}

id PKCloudStoreServiceInterface()
{
  if (qword_1ECF22A58 != -1)
    dispatch_once(&qword_1ECF22A58, &__block_literal_global_161_0);
  return (id)qword_1ECF22A50;
}

uint64_t PKProtobufPaymentMerchantSessionReadFrom(_BYTE *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  int *v8;
  int *v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  BOOL v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int *v33;
  int *v34;
  void *v35;
  void *v36;
  uint64_t v37;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = &OBJC_IVAR___PKAccountCredential__passDetailsResponse;
    v8 = &OBJC_IVAR___PKAccountCredential__passDetailsResponse;
    v9 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      while (1)
      {
        v13 = *v3;
        v14 = *(_QWORD *)(a2 + v13);
        if (v14 == -1 || v14 >= *(_QWORD *)(a2 + *v4))
          break;
        v15 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v14);
        *(_QWORD *)(a2 + v13) = v14 + 1;
        v12 |= (unint64_t)(v15 & 0x7F) << v10;
        if ((v15 & 0x80) == 0)
          goto LABEL_12;
        v10 += 7;
        v16 = v11++ >= 9;
        if (v16)
        {
          v12 = 0;
          v17 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v17 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v12 = 0;
LABEL_14:
      if (v17 || (v12 & 7) == 4)
        break;
      switch((v12 >> 3))
      {
        case 1u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = v7[781];
          goto LABEL_49;
        case 2u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = v8[782];
          goto LABEL_49;
        case 3u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 72;
          goto LABEL_49;
        case 4u:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          a1[120] |= 1u;
          while (2)
          {
            v25 = *v3;
            v26 = *(_QWORD *)(a2 + v25);
            if (v26 == -1 || v26 >= *(_QWORD *)(a2 + *v4))
            {
              *(_BYTE *)(a2 + *v5) = 1;
            }
            else
            {
              v27 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v26);
              *(_QWORD *)(a2 + v25) = v26 + 1;
              v24 |= (unint64_t)(v27 & 0x7F) << v22;
              if (v27 < 0)
              {
                v22 += 7;
                v16 = v23++ >= 9;
                if (v16)
                {
                  v24 = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v5))
            v24 = 0;
LABEL_55:
          v37 = 8;
          goto LABEL_60;
        case 5u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 40;
          goto LABEL_49;
        case 6u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 32;
          goto LABEL_49;
        case 7u:
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 104;
          goto LABEL_49;
        case 8u:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 88;
          goto LABEL_49;
        case 9u:
          v28 = 0;
          v29 = 0;
          v24 = 0;
          a1[120] |= 2u;
          break;
        case 0xAu:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 56;
          goto LABEL_49;
        case 0xBu:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 48;
          goto LABEL_49;
        case 0xCu:
          v33 = v8;
          v34 = v7;
          PBReaderReadString();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          if (v35)
            objc_msgSend(a1, "addSignedFields:", v35);

          v7 = v34;
          v8 = v33;
          continue;
        case 0xDu:
          PBReaderReadData();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 24;
          goto LABEL_49;
        case 0xEu:
          PBReaderReadString();
          v19 = objc_claimAutoreleasedReturnValue();
          v20 = 80;
LABEL_49:
          v36 = *(void **)&a1[v20];
          *(_QWORD *)&a1[v20] = v19;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v30 = *v3;
        v31 = *(_QWORD *)(a2 + v30);
        if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v4))
          break;
        v32 = *(_BYTE *)(*(_QWORD *)(a2 + *v9) + v31);
        *(_QWORD *)(a2 + v30) = v31 + 1;
        v24 |= (unint64_t)(v32 & 0x7F) << v28;
        if ((v32 & 0x80) == 0)
          goto LABEL_57;
        v28 += 7;
        v16 = v29++ >= 9;
        if (v16)
        {
          v24 = 0;
          goto LABEL_59;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
      if (*(_BYTE *)(a2 + *v5))
        v24 = 0;
LABEL_59:
      v37 = 16;
LABEL_60:
      *(_QWORD *)&a1[v37] = v24;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id PKFieldDetectorPersistentFieldDetectionReasonToString(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0CB37A0]);
  v3 = v2;
  if ((a1 & 1) != 0)
    objc_msgSend(v2, "appendString:", CFSTR("ContactlessPassesAvailable"));
  if ((a1 & 2) != 0)
  {
    if (objc_msgSend(v3, "length"))
      objc_msgSend(v3, "appendString:", CFSTR("|"));
    objc_msgSend(v3, "appendString:", CFSTR("CarKeyPairing"));
  }
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

void sub_190260C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPendingProvisioningReceiptTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("provisioned"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("provisioned"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("failed")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("failed")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPendingProvisioningReceiptTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = &stru_1E2ADF4C0;
  if (a1 == 2)
    v1 = CFSTR("failed");
  if (a1 == 1)
    return CFSTR("provisioned");
  else
    return v1;
}

id PKCreateSimulatedPaymentTransaction(uint64_t a1)
{
  void *v1;
  void *v2;
  uint32_t v3;
  void *v4;
  void *v5;

  +[PKPaymentTransaction paymentTransactionWithSource:](PKPaymentTransaction, "paymentTransactionWithSource:", a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setTransactionDate:", v2);

  v3 = objc_msgSend(v1, "setCurrencyCode:", CFSTR("USD"));
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("0000000000000000%016d"), arc4random_uniform(v3));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setPaymentHash:", v4);

  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithMantissa:exponent:isNegative:", arc4random_uniform(0x2710u), 4294967294, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "setAmount:", v5);

  objc_msgSend(v1, "setTransactionType:", 0);
  objc_msgSend(v1, "setTechnologyType:", 2);
  objc_msgSend(v1, "setOriginatedByDevice:", 1);
  return v1;
}

id PKCreateSimulatedPaymentTransactionWithRewards(uint64_t a1, uint64_t a2)
{
  void *v3;
  PKPaymentTransactionRewardsItem *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSDecimalNumber *v15;
  void *v16;
  void *v17;
  PKPaymentTransactionRewards *v18;
  void *v19;
  PKPaymentTransactionRewards *v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  PKCreateSimulatedPaymentTransaction(a1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc_init(PKPaymentTransactionRewardsItem);
  -[PKPaymentTransactionRewardsItem setType:](v4, "setType:", 2);
  -[PKPaymentTransactionRewardsItem setEligibleValueUnit:](v4, "setEligibleValueUnit:", 1);
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("2"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransactionRewardsItem setEligibleValue:](v4, "setEligibleValue:", v5);

  if (a2 == 1)
  {
    v6 = v3;
    v7 = 0;
LABEL_6:
    objc_msgSend(v6, "setTransactionStatus:", v7);
    goto LABEL_8;
  }
  if (a2 != 3)
  {
    if (a2 != 2)
      goto LABEL_8;
    v6 = v3;
    v7 = 1;
    goto LABEL_6;
  }
  objc_msgSend(v3, "amount");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("-1"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "decimalNumberByMultiplyingBy:", v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAmount:", v10);

  objc_msgSend(v3, "setTransactionStatus:", 1);
  objc_msgSend(v3, "setTransactionType:", 1);
LABEL_8:
  objc_msgSend(v3, "amount");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransactionRewardsItem eligibleValue](v4, "eligibleValue");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "decimalNumberByMultiplyingBy:", v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("100"));
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "decimalNumberByDividingBy:", v14);
  v15 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();
  PKCurrencyAmountCreate(v15, CFSTR("USD"), 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  -[PKPaymentTransactionRewardsItem setCurrencyAmount:](v4, "setCurrencyAmount:", v16);
  -[PKPaymentTransactionRewardsItem setState:](v4, "setState:", a2);
  if (a2 != 1)
  {
    objc_msgSend(v16, "amount");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "setRewardsTotalAmount:", v17);

    objc_msgSend(v3, "setRewardsTotalCurrencyCode:", CFSTR("USD"));
  }
  v18 = [PKPaymentTransactionRewards alloc];
  v22[0] = v4;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v22, 1);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v20 = -[PKPaymentTransactionRewards initWithRewardsItems:](v18, "initWithRewardsItems:", v19);
  objc_msgSend(v3, "setRewards:", v20);

  return v3;
}

id PKCreateSimulatedPaymentTransactionWithReceipt(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  PKCreateSimulatedPaymentTransaction(a1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "setReceiptIdentifier:", v12);

  objc_msgSend(v13, "setReceiptProviderIdentifier:", v11);
  objc_msgSend(v13, "setCardNumberSuffix:", v10);

  objc_msgSend(v13, "setReceiptProviderURL:", v9);
  return v13;
}

PKPaymentTransaction *PKCreateSimulatedBarcodePaymentTransaction(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v7;
  PKPaymentTransaction *v8;
  uint64_t v9;
  void *v10;
  PKMerchant *v11;
  void *v12;
  PKPaymentTransactionAmountModifier *v13;
  PKTransactionAmount *v14;
  NSDecimalNumber *v15;
  void *v16;
  PKTransactionAmount *v17;
  void *v18;
  void *v19;
  PKTransactionAuthenticationContext *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t i;
  PKPaymentTransactionAward *v29;
  __CFString *v30;
  void *v31;
  void *v32;
  PKTransactionAmount *v33;
  PKCurrencyAmount *v34;
  PKTransactionAmount *v35;
  void *v36;
  PKMerchant *v38;
  void *v39;
  void *v40;
  PKPaymentTransaction *v41;
  _QWORD v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = objc_alloc_init(PKPaymentTransaction);
  -[PKPaymentTransaction setBarcodeIdentifier:](v8, "setBarcodeIdentifier:", v7);
  v40 = v7;
  PKTransactionPaymentHashForBarcodeIdentifier(v7);
  v9 = objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setPaymentHash:](v8, "setPaymentHash:", v9);
  v39 = (void *)v9;
  -[PKPaymentTransaction setServiceIdentifier:](v8, "setServiceIdentifier:", v9);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setTransactionDate:](v8, "setTransactionDate:", v10);

  v11 = objc_alloc_init(PKMerchant);
  -[PKMerchant setName:](v11, "setName:", CFSTR("Luckin Coffee"));
  v38 = v11;
  -[PKPaymentTransaction setMerchant:](v8, "setMerchant:", v11);
  v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", CFSTR("34.99"));
  -[PKPaymentTransaction setAmount:](v8, "setAmount:", v12);

  -[PKPaymentTransaction setCurrencyCode:](v8, "setCurrencyCode:", CFSTR("CNY"));
  -[PKPaymentTransaction setTransactionStatus:](v8, "setTransactionStatus:", a2);
  -[PKPaymentTransaction setHasNotificationServiceData:](v8, "setHasNotificationServiceData:", 1);
  v13 = objc_alloc_init(PKPaymentTransactionAmountModifier);
  -[PKPaymentTransactionAmountModifier setType:](v13, "setType:", 1);
  -[PKPaymentTransactionAmountModifier setOrder:](v13, "setOrder:", 0);
  v14 = [PKTransactionAmount alloc];
  v15 = (NSDecimalNumber *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", CFSTR("-1.00"));
  PKCurrencyAmountCreate(v15, CFSTR("CNY"), 0);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = -[PKTransactionAmount initWithCurrencyAmount:label:](v14, "initWithCurrencyAmount:label:", v16, CFSTR("Huabei"));
  -[PKPaymentTransactionAmountModifier setAmount:](v13, "setAmount:", v17);

  -[PKPaymentTransactionAmountModifier setModifierDescription:](v13, "setModifierDescription:", CFSTR("Huabei"));
  v42[0] = v13;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v42, 1);
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setAmountModifiers:](v8, "setAmountModifiers:", v18);

  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithString:", CFSTR("35.99"));
  -[PKPaymentTransaction setNominalAmount:](v8, "setNominalAmount:", v19);

  if (!a2)
  {
    v20 = objc_alloc_init(PKTransactionAuthenticationContext);
    -[PKTransactionAuthenticationContext setRequestedAuthenticationMechanisms:](v20, "setRequestedAuthenticationMechanisms:", a3);
    objc_msgSend(CFSTR("nonce"), "dataUsingEncoding:", 4);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKTransactionAuthenticationContext setNonce:](v20, "setNonce:", v21);

    objc_msgSend(CFSTR("partialSignature"), "dataUsingEncoding:", 4);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKTransactionAuthenticationContext setPartialSignature:](v20, "setPartialSignature:", v22);

    objc_msgSend(CFSTR("signingKeyMaterial"), "dataUsingEncoding:", 4);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKTransactionAuthenticationContext setSigningKeyMaterial:](v20, "setSigningKeyMaterial:", v23);

    -[PKTransactionAuthenticationContext setPaymentPINFormat:](v20, "setPaymentPINFormat:", 2);
    -[PKPaymentTransaction setAuthenticationContext:](v8, "setAuthenticationContext:", v20);

  }
  v41 = v8;
  if (a4 >= 5)
    v24 = 5;
  else
    v24 = a4;
  v25 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", v24);
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("5.80"));
  v26 = objc_claimAutoreleasedReturnValue();
  v27 = (void *)v26;
  if (v24)
  {
    for (i = 0; i != v24; ++i)
    {
      v29 = objc_alloc_init(PKPaymentTransactionAward);
      -[PKPaymentTransactionAward setType:](v29, "setType:", 1);
      -[PKPaymentTransactionAward setRelevantAccountName:](v29, "setRelevantAccountName:", CFSTR("Balance"));
      if (i)
      {
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("Apple Offer %ld"), i);
        v30 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v30 = CFSTR("Apple Offer");
      }
      -[PKPaymentTransactionAward setAwardDescription:](v29, "setAwardDescription:", v30);
      objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("2.20"));
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "decimalNumberByAdding:", v31);
      v32 = (void *)objc_claimAutoreleasedReturnValue();

      v33 = [PKTransactionAmount alloc];
      v34 = -[PKCurrencyAmount initWithAmount:currency:exponent:]([PKCurrencyAmount alloc], "initWithAmount:currency:exponent:", v32, CFSTR("CNY"), 0);
      v35 = -[PKTransactionAmount initWithCurrencyAmount:](v33, "initWithCurrencyAmount:", v34);

      -[PKPaymentTransactionAward setAmount:](v29, "setAmount:", v35);
      objc_msgSend(v25, "addObject:", v29);

      v27 = v32;
    }
  }
  else
  {
    v32 = (void *)v26;
  }
  v36 = (void *)objc_msgSend(v25, "copy");
  -[PKPaymentTransaction setAwards:](v41, "setAwards:", v36);

  return v41;
}

void PKSimulatePaymentTransaction(void *a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  _QWORD block[4];
  id v16;
  id v17;
  id v18;
  id v19;
  _QWORD *v20;
  _QWORD v21[3];
  char v22;

  v7 = a1;
  v8 = a2;
  v9 = a4;
  dispatch_get_global_queue(0, 0);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  v22 = a3;
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = __PKSimulatePaymentTransaction_block_invoke;
  block[3] = &unk_1E2AC50F0;
  v16 = v8;
  v17 = v7;
  v19 = v9;
  v20 = v21;
  v18 = v10;
  v11 = v10;
  v12 = v9;
  v13 = v7;
  v14 = v8;
  dispatch_async(v11, block);

  _Block_object_dispose(v21, 8);
}

__CFString *_SimulatedPaymentTransactionMerchantName(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __CFString *v4;

  if ((unint64_t)(a1 - 1) > 3)
  {
    if (a2)
      return CFSTR("Simulated Notification Service");
    else
      return (__CFString *)0;
  }
  else
  {
    v4 = off_1E2AD7508[a1 - 1];
    if ((a2 & 1) != 0)
    {
      -[__CFString stringByAppendingString:](v4, "stringByAppendingString:", CFSTR("(NS)"), v2, v3);
      v4 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    return v4;
  }
}

void PKSimulateValueAddedServiceTransactionWithCompletion(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  PKValueAddedServiceTransaction *v5;
  void *v6;
  PKValueAddedMerchant *v7;
  void *v8;
  void *v9;
  PKPaymentService *v10;

  v1 = a1;
  v10 = objc_alloc_init(PKPaymentService);
  +[PKPassLibrary sharedInstance](PKPassLibrary, "sharedInstance");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "passesOfType:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "firstObject");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  v5 = objc_alloc_init(PKValueAddedServiceTransaction);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("lockscreen%i"), (rand() % 100));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_alloc_init(PKValueAddedMerchant);
  objc_msgSend(v6, "dataUsingEncoding:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKValueAddedMerchant setIdentifier:](v7, "setIdentifier:", v8);

  -[PKValueAddedServiceTransaction setMerchant:](v5, "setMerchant:", v7);
  -[PKValueAddedServiceTransaction setMerchantURL:](v5, "setMerchantURL:", CFSTR("http://passbot0:8000/panera.json"));
  objc_msgSend(v4, "uniqueID");
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentService insertOrUpdateValueAddedServiceTransaction:forPassUniqueIdentifier:paymentTransaction:completion:](v10, "insertOrUpdateValueAddedServiceTransaction:forPassUniqueIdentifier:paymentTransaction:completion:", v5, v9, 0, v1);

}

id PKIssuerProvisioningExtensionProviderContextExportedInterface()
{
  void *WeakRetained;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;

  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_268);
  WeakRetained = objc_loadWeakRetained(&qword_1ECF22A68);
  if (!WeakRetained)
  {
    v1 = (void *)MEMORY[0x19400CFE8]();
    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE220060);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&qword_1ECF22A68, WeakRetained);
    v2 = objc_alloc(MEMORY[0x1E0C99E60]);
    v3 = objc_opt_class();
    v4 = (void *)objc_msgSend(v2, "initWithObjects:", v3, objc_opt_class(), 0);
    v5 = objc_loadWeakRetained(&qword_1ECF22A68);
    objc_msgSend(v5, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_passEntriesWithCompletion_, 0, 1);

    v6 = objc_loadWeakRetained(&qword_1ECF22A68);
    objc_msgSend(v6, "setClasses:forSelector:argumentIndex:ofReply:", v4, sel_remotePassEntriesWithCompletion_, 0, 1);

    v7 = objc_loadWeakRetained(&qword_1ECF22A68);
    v8 = objc_alloc(MEMORY[0x1E0C99E60]);
    v9 = objc_opt_class();
    v10 = (void *)objc_msgSend(v8, "initWithObjects:", v9, objc_opt_class(), 0);
    objc_msgSend(v7, "setClasses:forSelector:argumentIndex:ofReply:", v10, sel_generateRequestWithEntryIdentifier_configuration_certificateChain_nonce_nonceSignature_completionHandler_, 2, 0);

    objc_autoreleasePoolPop(v1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_268);
  return WeakRetained;
}

id PKIssuerProvisioningExtensionConsumerContextExportedInterface()
{
  void *WeakRetained;
  void *v1;

  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_268);
  WeakRetained = objc_loadWeakRetained(&qword_1ECF22A70);
  if (!WeakRetained)
  {
    v1 = (void *)MEMORY[0x19400CFE8]();
    objc_msgSend(MEMORY[0x1E0CB3B50], "interfaceWithProtocol:", &unk_1EE245408);
    WeakRetained = (void *)objc_claimAutoreleasedReturnValue();
    objc_storeWeak(&qword_1ECF22A70, WeakRetained);
    objc_autoreleasePoolPop(v1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_268);
  return WeakRetained;
}

void sub_190264A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190264E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190265D74(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_190265EC8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1902660B8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190266304(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1902665B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void *DateIsWithinThresholdForCooldownLevel(void *result, uint64_t a2, void *a3)
{
  id v5;
  double v6;
  double v7;
  void *v8;
  double v9;
  double v10;

  if (result)
  {
    v5 = result;
    objc_msgSend(a3, "cooldownPeriodForLevel:", a2);
    v7 = v6;
    objc_msgSend(MEMORY[0x1E0C99D68], "now");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "timeIntervalSinceDate:", v5);
    v10 = v9;

    return (void *)(v10 <= v7);
  }
  return result;
}

id PKISO_ViewableElements()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  id v6;

  v6 = objc_alloc(MEMORY[0x1E0C99D80]);
  v0 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("portrait"), CFSTR("given_name"), CFSTR("family_name"), CFSTR("birth_date"), CFSTR("sex"), CFSTR("eye_colour"), CFSTR("hair_colour"), CFSTR("height"), CFSTR("document_number"), CFSTR("issue_date"), CFSTR("expiry_date"), CFSTR("issuing_authority"), CFSTR("driving_privileges"), CFSTR("resident_address"), CFSTR("resident_city"), CFSTR("resident_state"), CFSTR("resident_postal_code"),
                 CFSTR("resident_country"),
                 CFSTR("age_in_years"),
                 0);
  v1 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("DHS_compliance"), CFSTR("domestic_driving_privileges"), CFSTR("sex"), CFSTR("veteran"), 0);
  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("portrait"), CFSTR("family_name"), CFSTR("given_name"), CFSTR("birth_date"), CFSTR("sex"), CFSTR("document_number"), CFSTR("issue_date"), CFSTR("expiry_date"), CFSTR("issuing_authority"), CFSTR("resident_address"), CFSTR("resident_city"), CFSTR("resident_state"), CFSTR("resident_postal_code"), CFSTR("resident_country"), CFSTR("age_in_years"), 0);
  v3 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithObjects:", CFSTR("full_name_unicode"), CFSTR("resident_address_unicode"), CFSTR("sex_unicode"), CFSTR("local_gov_code_unicode"), CFSTR("individual_number_unicode"), CFSTR("portrait"), CFSTR("birth_date_unicode"), 0);
  v4 = (void *)objc_msgSend(v6, "initWithObjectsAndKeys:", v0, CFSTR("org.iso.18013.5.1"), v1, CFSTR("org.iso.18013.5.1.aamva"), v2, CFSTR("org.iso.23220.1"), v3, CFSTR("org.iso.23220.1.jp"), 0);

  return v4;
}

uint64_t PKISO_CategoryFromField(void *a1, void *a2)
{
  id v3;
  id v4;
  __CFString *v5;
  __CFString *v6;
  int v7;
  __CFString *v8;
  uint64_t v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  char v37;
  __CFString *v38;
  __CFString *v39;
  char v40;
  __CFString *v41;
  __CFString *v42;
  char v43;
  __CFString *v44;
  __CFString *v45;
  char v46;
  __CFString *v47;
  __CFString *v48;
  char v49;
  __CFString *v50;
  __CFString *v51;
  char v52;
  __CFString *v53;
  __CFString *v54;
  char v55;
  __CFString *v56;
  __CFString *v57;
  const __CFString *v58;
  char v59;
  __CFString *v60;
  __CFString *v61;
  const __CFString *v62;
  __CFString *v63;
  __CFString *v64;
  int v65;
  __CFString *v66;
  char v67;
  __CFString *v68;
  __CFString *v69;
  int v70;
  __CFString *v71;
  char v72;
  __CFString *v73;
  __CFString *v74;
  char v75;
  __CFString *v76;
  __CFString *v77;
  char v78;
  __CFString *v79;
  __CFString *v80;
  char v81;
  __CFString *v82;
  __CFString *v83;
  char v84;
  __CFString *v85;
  __CFString *v86;
  char v87;
  __CFString *v88;
  __CFString *v89;
  char v90;
  __CFString *v91;
  __CFString *v92;
  char v93;
  __CFString *v94;
  __CFString *v95;
  char v96;
  __CFString *v97;
  __CFString *v98;
  char v99;
  __CFString *v100;
  __CFString *v101;
  char v102;
  __CFString *v103;
  __CFString *v104;
  char v105;
  __CFString *v106;
  __CFString *v107;
  char v108;
  __CFString *v109;
  __CFString *v110;
  char v111;
  __CFString *v112;
  __CFString *v113;
  char v114;
  __CFString *v115;
  __CFString *v116;
  char v117;
  __CFString *v118;
  __CFString *v119;
  char v120;
  __CFString *v121;
  __CFString *v122;
  char v123;
  __CFString *v124;
  __CFString *v125;
  char v126;
  __CFString *v127;
  __CFString *v128;
  char v129;
  __CFString *v130;
  __CFString *v131;
  char v132;
  __CFString *v133;
  __CFString *v134;
  char v135;
  __CFString *v136;
  __CFString *v137;
  char v138;
  __CFString *v139;
  __CFString *v140;
  __CFString *v141;
  char v142;
  __CFString *v143;
  __CFString *v144;
  char v145;
  __CFString *v146;
  int v147;
  __CFString *v148;
  __CFString *v149;
  int v150;
  __CFString *v151;
  char v152;
  __CFString *v153;
  __CFString *v154;
  char v155;
  __CFString *v156;
  __CFString *v157;
  char v158;
  __CFString *v159;
  __CFString *v160;
  char v161;
  __CFString *v162;
  __CFString *v163;
  char v164;
  __CFString *v165;
  __CFString *v166;
  int v167;

  v3 = a1;
  v4 = a2;
  v5 = (__CFString *)v3;
  v6 = v5;
  if (v5 == CFSTR("org.iso.18013.5.1"))
    goto LABEL_4;
  if (!v5)
    goto LABEL_125;
  v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("org.iso.18013.5.1"));

  if (v7)
  {
LABEL_4:
    v8 = (__CFString *)v4;
    if (v8 == CFSTR("given_name"))
      goto LABEL_122;
    v9 = (uint64_t)v8;
    if (v8)
    {
      v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("given_name"));

      if ((v10 & 1) == 0)
      {
        v11 = (__CFString *)(id)v9;
        if (v11 != CFSTR("family_name"))
        {
          v12 = v11;
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("family_name"));

          if ((v13 & 1) == 0)
          {
            v14 = v12;
            if (v14 != CFSTR("resident_address"))
            {
              v15 = v14;
              v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("resident_address"));

              if ((v16 & 1) == 0)
              {
                v17 = v15;
                if (v17 != CFSTR("resident_city"))
                {
                  v18 = v17;
                  v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("resident_city"));

                  if ((v19 & 1) == 0)
                  {
                    v20 = v18;
                    if (v20 != CFSTR("resident_state"))
                    {
                      v21 = v20;
                      v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("resident_state"));

                      if ((v22 & 1) == 0)
                      {
                        v23 = v21;
                        if (v23 != CFSTR("resident_postal_code"))
                        {
                          v24 = v23;
                          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("resident_postal_code"));

                          if ((v25 & 1) == 0)
                          {
                            v26 = v24;
                            if (v26 != CFSTR("resident_country"))
                            {
                              v27 = v26;
                              v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("resident_country"));

                              if ((v28 & 1) == 0)
                              {
                                v29 = v27;
                                if (v29 != CFSTR("birth_date"))
                                {
                                  v30 = v29;
                                  v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("birth_date"));

                                  if ((v31 & 1) == 0)
                                  {
                                    v32 = v30;
                                    if (v32 != CFSTR("portrait"))
                                    {
                                      v33 = v32;
                                      v34 = -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("portrait"));

                                      if ((v34 & 1) == 0)
                                      {
                                        v35 = v33;
                                        if (v35 != CFSTR("eye_colour"))
                                        {
                                          v36 = v35;
                                          v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("eye_colour"));

                                          if ((v37 & 1) == 0)
                                          {
                                            v38 = v36;
                                            if (v38 != CFSTR("hair_colour"))
                                            {
                                              v39 = v38;
                                              v40 = -[__CFString isEqualToString:](v38, "isEqualToString:", CFSTR("hair_colour"));

                                              if ((v40 & 1) == 0)
                                              {
                                                v41 = v39;
                                                if (v41 != CFSTR("sex"))
                                                {
                                                  v42 = v41;
                                                  v43 = -[__CFString isEqualToString:](v41, "isEqualToString:", CFSTR("sex"));

                                                  if ((v43 & 1) == 0)
                                                  {
                                                    v44 = v42;
                                                    if (v44 != CFSTR("height"))
                                                    {
                                                      v45 = v44;
                                                      v46 = -[__CFString isEqualToString:](v44, "isEqualToString:", CFSTR("height"));

                                                      if ((v46 & 1) == 0)
                                                      {
                                                        v47 = v45;
                                                        if (v47 != CFSTR("document_number"))
                                                        {
                                                          v48 = v47;
                                                          v49 = -[__CFString isEqualToString:](v47, "isEqualToString:", CFSTR("document_number"));

                                                          if ((v49 & 1) == 0)
                                                          {
                                                            v50 = v48;
                                                            if (v50 != CFSTR("expiry_date"))
                                                            {
                                                              v51 = v50;
                                                              v52 = -[__CFString isEqualToString:](v50, "isEqualToString:", CFSTR("expiry_date"));

                                                              if ((v52 & 1) == 0)
                                                              {
                                                                v53 = v51;
                                                                if (v53 != CFSTR("issue_date"))
                                                                {
                                                                  v54 = v53;
                                                                  v55 = -[__CFString isEqualToString:](v53, "isEqualToString:", CFSTR("issue_date"));

                                                                  if ((v55 & 1) == 0)
                                                                  {
                                                                    v56 = v54;
                                                                    if (v56 != CFSTR("issuing_authority"))
                                                                    {
                                                                      v57 = v56;
                                                                      v58 = CFSTR("issuing_authority");
                                                                      goto LABEL_39;
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                        goto LABEL_47;
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      goto LABEL_122;
    }
  }
  else
  {
    v63 = v6;
    if (v63 != CFSTR("org.iso.18013.5.1.aamva"))
    {
      v64 = v63;
      v65 = -[__CFString isEqualToString:](v63, "isEqualToString:", CFSTR("org.iso.18013.5.1.aamva"));

      if (!v65)
      {
        v68 = v64;
        if (v68 == CFSTR("org.iso.23220.1")
          || (v69 = v68,
              v70 = -[__CFString isEqualToString:](v68, "isEqualToString:", CFSTR("org.iso.23220.1")),
              v69,
              v70))
        {
          v71 = (__CFString *)v4;
          if (v71 != CFSTR("family_name"))
          {
            v9 = (uint64_t)v71;
            if (!v71)
              goto LABEL_126;
            v72 = -[__CFString isEqualToString:](v71, "isEqualToString:", CFSTR("family_name"));

            if ((v72 & 1) == 0)
            {
              v73 = (__CFString *)(id)v9;
              if (v73 != CFSTR("family_name_latin_character"))
              {
                v74 = v73;
                v75 = -[__CFString isEqualToString:](v73, "isEqualToString:", CFSTR("family_name_latin_character"));

                if ((v75 & 1) == 0)
                {
                  v76 = v74;
                  if (v76 != CFSTR("given_name"))
                  {
                    v77 = v76;
                    v78 = -[__CFString isEqualToString:](v76, "isEqualToString:", CFSTR("given_name"));

                    if ((v78 & 1) == 0)
                    {
                      v79 = v77;
                      if (v79 != CFSTR("given_name_latin_character"))
                      {
                        v80 = v79;
                        v81 = -[__CFString isEqualToString:](v79, "isEqualToString:", CFSTR("given_name_latin_character"));

                        if ((v81 & 1) == 0)
                        {
                          v82 = v80;
                          if (v82 != CFSTR("birth_date"))
                          {
                            v83 = v82;
                            v84 = -[__CFString isEqualToString:](v82, "isEqualToString:", CFSTR("birth_date"));

                            if ((v84 & 1) == 0)
                            {
                              v85 = v83;
                              if (v85 != CFSTR("resident_postal_code"))
                              {
                                v86 = v85;
                                v87 = -[__CFString isEqualToString:](v85, "isEqualToString:", CFSTR("resident_postal_code"));

                                if ((v87 & 1) == 0)
                                {
                                  v88 = v86;
                                  if (v88 != CFSTR("document_number"))
                                  {
                                    v89 = v88;
                                    v90 = -[__CFString isEqualToString:](v88, "isEqualToString:", CFSTR("document_number"));

                                    if ((v90 & 1) == 0)
                                    {
                                      v91 = v89;
                                      if (v91 != CFSTR("sex"))
                                      {
                                        v92 = v91;
                                        v93 = -[__CFString isEqualToString:](v91, "isEqualToString:", CFSTR("sex"));

                                        if ((v93 & 1) == 0)
                                        {
                                          v94 = v92;
                                          if (v94 != CFSTR("nationality"))
                                          {
                                            v95 = v94;
                                            v96 = -[__CFString isEqualToString:](v94, "isEqualToString:", CFSTR("nationality"));

                                            if ((v96 & 1) == 0)
                                            {
                                              v97 = v95;
                                              if (v97 != CFSTR("portrait"))
                                              {
                                                v98 = v97;
                                                v99 = -[__CFString isEqualToString:](v97, "isEqualToString:", CFSTR("portrait"));

                                                if ((v99 & 1) == 0)
                                                {
                                                  v100 = v98;
                                                  if (v100 != CFSTR("resident_address"))
                                                  {
                                                    v101 = v100;
                                                    v102 = -[__CFString isEqualToString:](v100, "isEqualToString:", CFSTR("resident_address"));

                                                    if ((v102 & 1) == 0)
                                                    {
                                                      v103 = v101;
                                                      if (v103 != CFSTR("resident_address_latin_character"))
                                                      {
                                                        v104 = v103;
                                                        v105 = -[__CFString isEqualToString:](v103, "isEqualToString:", CFSTR("resident_address_latin_character"));

                                                        if ((v105 & 1) == 0)
                                                        {
                                                          v106 = v104;
                                                          if (v106 != CFSTR("resident_city"))
                                                          {
                                                            v107 = v106;
                                                            v108 = -[__CFString isEqualToString:](v106, "isEqualToString:", CFSTR("resident_city"));

                                                            if ((v108 & 1) == 0)
                                                            {
                                                              v109 = v107;
                                                              if (v109 != CFSTR("resident_city_latin_character"))
                                                              {
                                                                v110 = v109;
                                                                v111 = -[__CFString isEqualToString:](v109, "isEqualToString:", CFSTR("resident_city_latin_character"));

                                                                if ((v111 & 1) == 0
                                                                  && (-[__CFString isEqualToString:](v110, "isEqualToString:", CFSTR("resident_postal_code")) & 1) == 0)
                                                                {
                                                                  v112 = v110;
                                                                  if (v112 != CFSTR("resident_postal_code_latin_character"))
                                                                  {
                                                                    v113 = v112;
                                                                    v114 = -[__CFString isEqualToString:](v112, "isEqualToString:", CFSTR("resident_postal_code_latin_character"));

                                                                    if ((v114 & 1) == 0)
                                                                    {
                                                                      v115 = v113;
                                                                      if (v115 != CFSTR("resident_state"))
                                                                      {
                                                                        v116 = v115;
                                                                        v117 = -[__CFString isEqualToString:](v115, "isEqualToString:", CFSTR("resident_state"));

                                                                        if ((v117 & 1) == 0)
                                                                        {
                                                                          v118 = v116;
                                                                          if (v118 != CFSTR("resident_state_latin_character"))
                                                                          {
                                                                            v119 = v118;
                                                                            v120 = -[__CFString isEqualToString:](v118, "isEqualToString:", CFSTR("resident_state_latin_character"));

                                                                            if ((v120 & 1) == 0)
                                                                            {
                                                                              v121 = v119;
                                                                              if (v121 != CFSTR("resident_country"))
                                                                              {
                                                                                v122 = v121;
                                                                                v123 = -[__CFString isEqualToString:](v121, "isEqualToString:", CFSTR("resident_country"));

                                                                                if ((v123 & 1) == 0)
                                                                                {
                                                                                  if ((-[__CFString isEqualToString:](v122, "isEqualToString:", CFSTR("document_number")) & 1) == 0)
                                                                                  {
                                                                                    v124 = v122;
                                                                                    if (v124 != CFSTR("expiry_date"))
                                                                                    {
                                                                                      v125 = v124;
                                                                                      v126 = -[__CFString isEqualToString:](v124, "isEqualToString:", CFSTR("expiry_date"));

                                                                                      if ((v126 & 1) == 0)
                                                                                      {
                                                                                        v127 = v125;
                                                                                        if (v127 != CFSTR("issue_date"))
                                                                                        {
                                                                                          v128 = v127;
                                                                                          v129 = -[__CFString isEqualToString:](v127, "isEqualToString:", CFSTR("issue_date"));

                                                                                          if ((v129 & 1) == 0)
                                                                                          {
                                                                                            v130 = v128;
                                                                                            if (v130 != CFSTR("issuing_country"))
                                                                                            {
                                                                                              v131 = v130;
                                                                                              v132 = -[__CFString isEqualToString:](v130, "isEqualToString:", CFSTR("issuing_country"));

                                                                                              if ((v132 & 1) == 0)
                                                                                              {
                                                                                                v133 = v131;
                                                                                                if (v133 != CFSTR("issuing_authority"))
                                                                                                {
                                                                                                  v134 = v133;
                                                                                                  v135 = -[__CFString isEqualToString:](v133, "isEqualToString:", CFSTR("issuing_authority"));

                                                                                                  if ((v135 & 1) == 0)
                                                                                                  {
                                                                                                    v136 = v134;
                                                                                                    if (v136 != CFSTR("issuing_authority_latin_character"))
                                                                                                    {
                                                                                                      v137 = v136;
                                                                                                      v138 = -[__CFString isEqualToString:](v136, "isEqualToString:", CFSTR("issuing_authority_latin_character"));

                                                                                                      if ((v138 & 1) == 0)
                                                                                                      {
                                                                                                        v139 = v137;
                                                                                                        if (v139 != CFSTR("issuing_subdivision"))
                                                                                                        {
                                                                                                          v57 = v139;
                                                                                                          v58 = CFSTR("issuing_subdivision");
LABEL_39:
                                                                                                          v59 = -[__CFString isEqualToString:](v57, "isEqualToString:", v58);

                                                                                                          if ((v59 & 1) == 0)
                                                                                                          {
                                                                                                            v60 = v57;
                                                                                                            if (v60 != CFSTR("driving_privileges"))
                                                                                                            {
                                                                                                              v61 = v60;
                                                                                                              v62 = CFSTR("driving_privileges");
                                                                                                              goto LABEL_107;
                                                                                                            }
                                                                                                            goto LABEL_108;
                                                                                                          }
                                                                                                        }
                                                                                                      }
                                                                                                    }
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
LABEL_47:
                                                                                  v9 = 2;
                                                                                  goto LABEL_126;
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v148 = v69;
          if (v148 != CFSTR("org.iso.23220.1.jp"))
          {
            v149 = v148;
            v150 = -[__CFString isEqualToString:](v148, "isEqualToString:", CFSTR("org.iso.23220.1.jp"));

            if (!v150)
              goto LABEL_125;
          }
          v151 = (__CFString *)v4;
          if (v151 != CFSTR("full_name_unicode"))
          {
            v9 = (uint64_t)v151;
            if (!v151)
              goto LABEL_126;
            v152 = -[__CFString isEqualToString:](v151, "isEqualToString:", CFSTR("full_name_unicode"));

            if ((v152 & 1) == 0)
            {
              v153 = (__CFString *)(id)v9;
              if (v153 != CFSTR("resident_address_unicode"))
              {
                v154 = v153;
                v155 = -[__CFString isEqualToString:](v153, "isEqualToString:", CFSTR("resident_address_unicode"));

                if ((v155 & 1) == 0)
                {
                  v156 = v154;
                  if (v156 != CFSTR("sex_unicode"))
                  {
                    v157 = v156;
                    v158 = -[__CFString isEqualToString:](v156, "isEqualToString:", CFSTR("sex_unicode"));

                    if ((v158 & 1) == 0)
                    {
                      v159 = v157;
                      if (v159 != CFSTR("local_gov_code_unicode"))
                      {
                        v160 = v159;
                        v161 = -[__CFString isEqualToString:](v159, "isEqualToString:", CFSTR("local_gov_code_unicode"));

                        if ((v161 & 1) == 0)
                        {
                          v162 = v160;
                          if (v162 != CFSTR("portrait"))
                          {
                            v163 = v162;
                            v164 = -[__CFString isEqualToString:](v162, "isEqualToString:", CFSTR("portrait"));

                            if ((v164 & 1) == 0)
                            {
                              v165 = v163;
                              if (v165 != CFSTR("individual_number_unicode"))
                              {
                                v166 = v165;
                                v167 = -[__CFString isEqualToString:](v165, "isEqualToString:", CFSTR("individual_number_unicode"));

                                if (!v167)
                                  goto LABEL_125;
                              }
                              goto LABEL_47;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_122:
        v9 = 1;
        goto LABEL_126;
      }
    }
    v66 = (__CFString *)v4;
    if (v66 == CFSTR("DHS_compliance"))
      goto LABEL_47;
    v9 = (uint64_t)v66;
    if (v66)
    {
      v67 = -[__CFString isEqualToString:](v66, "isEqualToString:", CFSTR("DHS_compliance"));

      if ((v67 & 1) != 0)
        goto LABEL_47;
      v140 = (__CFString *)(id)v9;
      if (v140 != CFSTR("sex"))
      {
        v141 = v140;
        v142 = -[__CFString isEqualToString:](v140, "isEqualToString:", CFSTR("sex"));

        if ((v142 & 1) == 0)
        {
          v143 = v141;
          if (v143 != CFSTR("veteran"))
          {
            v144 = v143;
            v145 = -[__CFString isEqualToString:](v143, "isEqualToString:", CFSTR("veteran"));

            if ((v145 & 1) == 0)
            {
              v146 = v144;
              if (v146 != CFSTR("domestic_driving_privileges"))
              {
                v61 = v146;
                v62 = CFSTR("domestic_driving_privileges");
LABEL_107:
                v147 = -[__CFString isEqualToString:](v61, "isEqualToString:", v62);

                if (v147)
                  goto LABEL_108;
LABEL_125:
                v9 = 0;
                goto LABEL_126;
              }
LABEL_108:
              v9 = 3;
              goto LABEL_126;
            }
          }
        }
      }
      goto LABEL_122;
    }
  }
LABEL_126:

  return v9;
}

BOOL PKPaymentTransactionAmountModifierTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("discount"))
  {
    if (!v1 || (v3 = objc_msgSend(CFSTR("discount"), "isEqualToString:", v1), v2, !v3))
      v4 = 0;
  }

  return v4;
}

const __CFString *PKPaymentTransactionAmountModifierTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("discount");
  else
    return CFSTR("unknown");
}

uint64_t PKPeerPaymentRecipientStatusFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("valid"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(CFSTR("invalid"), "isEqualToString:", v1))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPeerPaymentRecipientStatusToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("invalid");
  if (a1 == 1)
    return CFSTR("valid");
  else
    return v1;
}

uint64_t PKPeerPaymentRecipientStatusReasonFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("none"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(CFSTR("notinfamily"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else
  {
    v2 = objc_msgSend(CFSTR("accountclosed"), "isEqualToString:", v1);
  }

  return v2;
}

const __CFString *PKPeerPaymentRecipientStatusReasonToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 == 2)
    v1 = CFSTR("notInFamily");
  if (a1 == 1)
    return CFSTR("accountClosed");
  else
    return v1;
}

uint64_t PKPeerPaymentRecipientReceiveMethodFromString(uint64_t a1)
{
  return objc_msgSend(CFSTR("iMessage"), "isEqualToString:", a1);
}

const __CFString *PKPeerPaymentRecipientReceiveMethodToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("iMessage");
  else
    return CFSTR("unknown");
}

unint64_t PKWalletTransactionTypeForPKFieldTerminalType(unint64_t result)
{
  if (result < 6)
    return dword_190455B20[result];
  __break(1u);
  return result;
}

unint64_t PKWalletTransactionTypeForSTSTerminalType(unint64_t result)
{
  if (result < 0xB)
    return dword_190455B38[result];
  __break(1u);
  return result;
}

uint64_t PKWalletTransactionTypeForNFFieldNotificationType(uint64_t result)
{
  if ((unint64_t)(result - 1) < 3)
    return dword_190455B64[result - 1];
  __break(1u);
  return result;
}

const __CFString *PKPassEntitlementDisplayStyleToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("toggle");
  if (a1 == 2)
    return CFSTR("checkmark");
  else
    return v1;
}

uint64_t PKPassEntitlementDisplayStyleFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("toggle"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("toggle"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("checkmark")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("checkmark")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKAccountPaymentStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("posted")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("scheduled")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cancelled")) & 1) != 0)
  {
    v2 = 3;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("failed")))
  {
    v2 = 4;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKAccountPaymentStateStringForState(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD7AA0[a1 - 1];
}

uint64_t PKAccountPaymentFundingSourceTypeFromString(void *a1)
{
  void *v1;
  void *v2;
  char v3;
  uint64_t v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  int v12;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(CFSTR("ACH"), "lowercaseString");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v1, "isEqualToString:", v2);

  if ((v3 & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    objc_msgSend(CFSTR("APC"), "lowercaseString");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v1, "isEqualToString:", v5);

    if ((v6 & 1) != 0)
    {
      v4 = 2;
    }
    else
    {
      objc_msgSend(CFSTR("offline"), "lowercaseString");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = objc_msgSend(v1, "isEqualToString:", v7);

      if ((v8 & 1) != 0)
      {
        v4 = 3;
      }
      else
      {
        objc_msgSend(CFSTR("savings"), "lowercaseString");
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = objc_msgSend(v1, "isEqualToString:", v9);

        if ((v10 & 1) != 0)
        {
          v4 = 4;
        }
        else
        {
          objc_msgSend(CFSTR("RDFI"), "lowercaseString");
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v1, "isEqualToString:", v11);

          if (v12)
            v4 = 5;
          else
            v4 = 0;
        }
      }
    }
  }

  return v4;
}

__CFString *PKAccountPaymentFundingSourceTypeToString(uint64_t a1)
{
  uint64_t v1;
  __CFString *v2;

  v1 = a1 - 1;
  if ((unint64_t)(a1 - 1) <= 4 && ((0x17u >> v1) & 1) != 0)
    v2 = *off_1E2AD7AC0[v1];
  else
    v2 = 0;
  return v2;
}

uint64_t PKAccountPaymentFrequencyFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("now")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("once")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("daily")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("weekly")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("biweekly")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("monthly")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("paymentduedate")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountPaymentFrequencyToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return (__CFString *)0;
  else
    return *off_1E2AD7AE8[a1 - 1];
}

uint64_t PKAccountPaymentPresetFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("fixedamount")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("minimumdue")) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("statementbalance")))
  {
    v2 = 3;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountPaymentPresetToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return (__CFString *)0;
  else
    return *off_1E2AD7B20[a1 - 1];
}

uint64_t PKAccountPaymentFundingSourceStatusFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("available")) & 1) != 0)
  {
    v2 = 1;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("unavailable")))
  {
    v2 = 2;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

__CFString *PKAccountPaymentFundingSourceStatusToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AD7B38[a1];
}

const __CFString *PKPaymentOfferInstallmentAssessmentEligibilityToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E2AD7B98[a1 - 1];
}

void sub_190274ECC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose(&STACK[0x268], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose(&STACK[0x2C8], 8);
  _Block_object_dispose(&STACK[0x2F8], 8);
  _Block_object_dispose((const void *)(v1 - 248), 8);
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_190277AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&a55, 8);
  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

void sub_190278DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v10 - 152), 8);
  _Block_object_dispose((const void *)(v10 - 120), 8);
  _Unwind_Resume(a1);
}

id PKLocalizedBillPaymentStringFromMerchantCategory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFString *v8;
  uint64_t vars0;

  if ((unint64_t)(a1 - 1) > 6)
    v8 = CFSTR("ACCOUNT_SERVICE_BILL_PAYMENT_MERCHANT_CATEGORY_OTHER");
  else
    v8 = off_1E2AD7D38[a1 - 1];
  PKLocalizedFeatureString(v8, 2, 0, a4, a5, a6, a7, a8, vars0);
  return (id)objc_claimAutoreleasedReturnValue();
}

Class initFHPaymentRingSuggestionController()
{
  Class result;

  if (qword_1EE1DB6C0 != -1)
    dispatch_once(&qword_1EE1DB6C0, &__block_literal_global_447);
  result = objc_getClass("FHPaymentRingSuggestionController");
  qword_1EE1DB6B8 = (uint64_t)result;
  getFHPaymentRingSuggestionControllerClass[0] = (uint64_t (*)())FHPaymentRingSuggestionControllerFunction;
  return result;
}

id FHPaymentRingSuggestionControllerFunction()
{
  return (id)qword_1EE1DB6B8;
}

id initFHPaymentRingInstrumentationRecordKeyLastPaymentCategory()
{
  id *v0;

  if (qword_1EE1DB6D0 != -1)
    dispatch_once(&qword_1EE1DB6D0, &__block_literal_global_450_0);
  v0 = (id *)dlsym((void *)qword_1EE1DB6C8, "FHPaymentRingInstrumentationRecordKeyLastPaymentCategory");
  objc_storeStrong((id *)&qword_1EE1DB6A8, *v0);
  _MergedGlobals_182 = (uint64_t (*)())FHPaymentRingInstrumentationRecordKeyLastPaymentCategoryFunction;
  return (id)qword_1EE1DB6A8;
}

id FHPaymentRingInstrumentationRecordKeyLastPaymentCategoryFunction()
{
  return (id)qword_1EE1DB6A8;
}

id initFHPaymentRingInstrumentationRecordKeyPaymentAction()
{
  id *v0;

  if (qword_1EE1DB6D0 != -1)
    dispatch_once(&qword_1EE1DB6D0, &__block_literal_global_450_0);
  v0 = (id *)dlsym((void *)qword_1EE1DB6C8, "FHPaymentRingInstrumentationRecordKeyPaymentAction");
  objc_storeStrong((id *)&qword_1EE1DB6B0, *v0);
  off_1ECF21BF0 = (uint64_t (*)())FHPaymentRingInstrumentationRecordKeyPaymentActionFunction;
  return (id)qword_1EE1DB6B0;
}

id FHPaymentRingInstrumentationRecordKeyPaymentActionFunction()
{
  return (id)qword_1EE1DB6B0;
}

id initFHPaymentRingInstrumentationRecordKeyAccountState()
{
  id *v0;

  if (qword_1EE1DB6D0 != -1)
    dispatch_once(&qword_1EE1DB6D0, &__block_literal_global_450_0);
  v0 = (id *)dlsym((void *)qword_1EE1DB6C8, "FHPaymentRingInstrumentationRecordKeyAccountState");
  objc_storeStrong((id *)&_MergedGlobals_11_1, *v0);
  off_1ECF21BF8 = (uint64_t (*)())FHPaymentRingInstrumentationRecordKeyAccountStateFunction;
  return (id)_MergedGlobals_11_1;
}

id FHPaymentRingInstrumentationRecordKeyAccountStateFunction()
{
  return (id)_MergedGlobals_11_1;
}

id initFHPaymentRingInstrumentationRecordKeyPaidUsingRing()
{
  id *v0;

  if (qword_1EE1DB6D0 != -1)
    dispatch_once(&qword_1EE1DB6D0, &__block_literal_global_450_0);
  v0 = (id *)dlsym((void *)qword_1EE1DB6C8, "FHPaymentRingInstrumentationRecordKeyPaidUsingRing");
  objc_storeStrong((id *)&qword_1EE1DB6A0, *v0);
  off_1ECF21C00 = (uint64_t (*)())FHPaymentRingInstrumentationRecordKeyPaidUsingRingFunction;
  return (id)qword_1EE1DB6A0;
}

id FHPaymentRingInstrumentationRecordKeyPaidUsingRingFunction()
{
  return (id)qword_1EE1DB6A0;
}

const __CFString *PKPayLaterAccountProductTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("bnpl");
  else
    return CFSTR("unknown");
}

uint64_t PKPayLaterAccountProductTypeFromString(void *a1)
{
  return objc_msgSend(a1, "isEqualToString:", CFSTR("bnpl"));
}

const __CFString *PKPaymentOfferDynamicContentPageTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E2AD7DD8[a1 - 1];
}

uint64_t PKProtobufPromptDetailsForVirtualCardReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  void *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
            break;
          v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
          *(_QWORD *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0)
            goto LABEL_31;
          v19 += 7;
          v14 = v20++ >= 9;
          if (v14)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          v21 = 0;
LABEL_33:
        *(_BYTE *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v17;

      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_190282294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t PKPaymentTransactionFeeItemTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("creditCard"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("foreignTransaction"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("serviceCharge"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("instantWithdrawal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(CFSTR("other"), "isEqualToString:", v1))
  {
    v2 = 100;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

void sub_1902853E4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1902857E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

Class initIMOneTimeCodeAccelerator()
{
  Class result;

  if (qword_1EE1C56E0 != -1)
    dispatch_once(&qword_1EE1C56E0, &__block_literal_global_185);
  result = objc_getClass("IMOneTimeCodeAccelerator");
  qword_1EE1C56D0 = (uint64_t)result;
  getIMOneTimeCodeAcceleratorClass[0] = (uint64_t (*)())IMOneTimeCodeAcceleratorFunction;
  return result;
}

id IMOneTimeCodeAcceleratorFunction()
{
  return (id)qword_1EE1C56D0;
}

id initIMOneTimeCodeMachineReadableCodeKey()
{
  id *v0;

  if (qword_1EE1C56E0 != -1)
    dispatch_once(&qword_1EE1C56E0, &__block_literal_global_185);
  v0 = (id *)dlsym((void *)qword_1EE1C56D8, "IMOneTimeCodeMachineReadableCodeKey");
  objc_storeStrong((id *)&_MergedGlobals_1_7, *v0);
  _MergedGlobals_183 = (uint64_t (*)())IMOneTimeCodeMachineReadableCodeKeyFunction;
  return (id)_MergedGlobals_1_7;
}

id IMOneTimeCodeMachineReadableCodeKeyFunction()
{
  return (id)_MergedGlobals_1_7;
}

id initIMOneTimeCodeKey()
{
  id *v0;

  if (qword_1EE1C56E0 != -1)
    dispatch_once(&qword_1EE1C56E0, &__block_literal_global_185);
  v0 = (id *)dlsym((void *)qword_1EE1C56D8, "IMOneTimeCodeKey");
  objc_storeStrong((id *)&qword_1EE1C56B8, *v0);
  off_1ECF21C10 = (uint64_t (*)())IMOneTimeCodeKeyFunction;
  return (id)qword_1EE1C56B8;
}

id IMOneTimeCodeKeyFunction()
{
  return (id)qword_1EE1C56B8;
}

id initIMOneTimeCodeHandleKey()
{
  id *v0;

  if (qword_1EE1C56E0 != -1)
    dispatch_once(&qword_1EE1C56E0, &__block_literal_global_185);
  v0 = (id *)dlsym((void *)qword_1EE1C56D8, "IMOneTimeCodeHandleKey");
  objc_storeStrong((id *)&qword_1EE1C56C0, *v0);
  off_1ECF21C18 = (uint64_t (*)())IMOneTimeCodeHandleKeyFunction;
  return (id)qword_1EE1C56C0;
}

id IMOneTimeCodeHandleKeyFunction()
{
  return (id)qword_1EE1C56C0;
}

id initIMOneTimeCodeGuidKey()
{
  id *v0;

  if (qword_1EE1C56E0 != -1)
    dispatch_once(&qword_1EE1C56E0, &__block_literal_global_185);
  v0 = (id *)dlsym((void *)qword_1EE1C56D8, "IMOneTimeCodeGuidKey");
  objc_storeStrong((id *)&qword_1EE1C56C8, *v0);
  off_1ECF21C20 = (uint64_t (*)())IMOneTimeCodeGuidKeyFunction;
  return (id)qword_1EE1C56C8;
}

id IMOneTimeCodeGuidKeyFunction()
{
  return (id)qword_1EE1C56C8;
}

uint64_t PKAccountPromotionStateFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("upcoming"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = objc_msgSend(CFSTR("upcoming"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("inProgress")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("inProgress"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("redeemed")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("redeemed"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("expired")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("expired"), "isEqualToString:", v11), v12, v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

const __CFString *PKAccountPromotionStateToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1E2AD8090[a1];
}

uint64_t PKAccountPromotionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  int v16;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("spendGet"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_17:
    v4 = 0;
    goto LABEL_18;
  }
  v3 = objc_msgSend(CFSTR("spendGet"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("acceleratedDailyCash")
      || (v6 = v5,
          v7 = objc_msgSend(CFSTR("acceleratedDailyCash"), "isEqualToString:", v5),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_18;
    }
    v8 = v6;
    if (v8 == CFSTR("frequencyBased")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("frequencyBased"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_18;
    }
    v11 = v9;
    if (v11 == CFSTR("genericOneTime")
      || (v12 = v11,
          v13 = objc_msgSend(CFSTR("genericOneTime"), "isEqualToString:", v11),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_18;
    }
    v14 = v12;
    if (v14 == CFSTR("genericIncremental")
      || (v15 = v14, v16 = objc_msgSend(CFSTR("genericIncremental"), "isEqualToString:", v14), v15, v16))
    {
      v4 = 5;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_4:
  v4 = 1;
LABEL_18:

  return v4;
}

double PKEventTicketV2PassScaleFactor(double a1)
{
  return a1 / 358.0;
}

double PKPaymentPassScaleFactor(double a1)
{
  return a1 / 375.0;
}

double PKPaymentPassPANSuffixFontSize()
{
  double v0;

  PKGetMaxPassWidth();
  return round(v0 / 375.0 * 17.0 + v0 / 375.0 * 17.0) * 0.5;
}

double PKPaymentPassContentInsets()
{
  double v0;
  double (**v1)(double);
  double v2;
  _QWORD aBlock[5];

  PKGetMaxPassWidth();
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = __PKPaymentPassContentInsets_block_invoke;
  aBlock[3] = &__block_descriptor_40_e8_d16__0d8l;
  *(double *)&aBlock[4] = v0 / 375.0;
  v1 = (double (**)(double))_Block_copy(aBlock);
  v2 = v1[2](14.0);
  ((void (*)(double (**)(double), double))v1[2])(v1, 20.0);
  ((void (*)(double (**)(double), double))v1[2])(v1, 14.0);
  ((void (*)(double (**)(double), double))v1[2])(v1, 20.0);

  return v2;
}

double PKPassMaxFrontSize()
{
  double v0;
  double v1;

  PKGetMaxPassWidth();
  v1 = v0;
  PKGetMaxPassHeight();
  return v1;
}

double PKPassHeightAdjustmentForStyle(unint64_t a1)
{
  double v2;
  double v3;
  double result;

  v3 = PKScreenSize();
  result = 0.0;
  if (a1 > 9 || ((1 << a1) & 0x2C0) == 0)
  {
    if (v3 <= 320.0)
    {
      if (v2 > 480.0)
        return 118.0;
    }
    else if (v3 >= 414.0)
    {
      result = 188.0;
      if (v2 > 736.0)
        return 108.0;
    }
    else
    {
      return dbl_190455CD0[v2 > 667.0];
    }
  }
  return result;
}

double _FrontFacePartialBlurRect(unint64_t a1)
{
  double result;

  if (a1 < 9 || a1 == 12)
    return *MEMORY[0x1E0C9D648];
  if (a1 == 9)
  {
    PKGetMaxPassWidth();
    return 0.0;
  }
  return result;
}

double PKPassFaceNotificationThumbnailPaddingInsets()
{
  return 0.0;
}

BOOL PKPassFrontFaceAllowsStrip(void *a1)
{
  CGRect v2;

  v2.origin.x = PKPassFaceStripImageFrame(a1);
  return !CGRectIsNull(v2);
}

uint64_t PKPassFaceAllowsBackground(void *a1)
{
  unint64_t v1;

  v1 = objc_msgSend(a1, "passStyle");
  return (v1 < 0xD) & (0x244u >> v1);
}

id PKPassFrontFaceShadowImage(void *a1)
{
  id v1;
  double v2;
  CGFloat v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGColorSpace *DeviceGray;
  size_t AlignedBytesPerRow;
  CGContext *v12;
  CGColor *v13;
  id v14;
  CGImage *v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  void *v25;
  CGFloat components[3];
  uint64_t v28;
  CGSize v29;
  CGRect v30;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "scale");
  v3 = v2 * 0.25;
  objc_msgSend(v1, "size");
  v5 = v4;
  v7 = v6;
  v8 = v6 + 30.0;
  v9 = v3 * (v6 + 30.0);
  DeviceGray = CGColorSpaceCreateDeviceGray();
  AlignedBytesPerRow = CGBitmapGetAlignedBytesPerRow();
  v12 = CGBitmapContextCreate(0, vcvtpd_u64_f64(v3 * (v5 + 30.0)), vcvtpd_u64_f64(v9), 8uLL, AlignedBytesPerRow, DeviceGray, 7u);
  CGContextScaleCTM(v12, v3, v3);
  *(_OWORD *)components = __const_PKPassFrontFaceShadowImage_components;
  v13 = CGColorCreate(DeviceGray, components);
  v29.width = -((v5 + 15.0) * v3);
  v29.height = -((v7 + 15.0) * v3);
  CGContextSetShadowWithColor(v12, v29, v3 * 20.0, v13);
  v14 = objc_retainAutorelease(v1);
  v15 = (CGImage *)objc_msgSend(v14, "imageRef");
  v30.origin.x = v5 + 30.0;
  v30.origin.y = v8;
  v30.size.width = v5;
  v30.size.height = v7;
  CGContextDrawImage(v12, v30, v15);
  PKGetImageFromBitmapContext(v12, v3);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  CGColorSpaceRelease(DeviceGray);
  CGContextRelease(v12);
  CGColorRelease(v13);
  objc_msgSend(v14, "capInsets");
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;

  objc_msgSend(v16, "resizableImageByTilingWithCapInsets:", ceil(v18 + 15.0), v20, ceil(v22 + 15.0), v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  return v25;
}

id PKPassFrontFaceImage(void *a1, void *a2, CGFloat *a3, double *a4, CGFloat *a5, uint64_t a6, void *a7, double a8)
{
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  unint64_t v21;
  void (*v22)(uint64_t);
  id v23;
  uint64_t (**v24)(void *, const __CFString *);
  int v25;
  void *v26;
  int v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  double v42;
  void *v43;
  double v44;
  double v45;
  char v46;
  void *v47;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  BOOL IsNull;
  void *v53;
  double v54;
  void *v55;
  void *v56;
  CGFloat v57;
  double v58;
  void *v59;
  char v60;
  void *v61;
  uint64_t v62;
  double v63;
  double v64;
  void *v65;
  double v66;
  double v67;
  double v68;
  double v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  double v83;
  double v84;
  double v85;
  _BOOL4 v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  id result;
  void *v100;
  id v101;
  id v102;
  void (*v103)(uint64_t);
  id v104;
  id v105;
  id v106;
  id v107;
  void *v108;
  double v109;
  void *v110;
  id v111;
  uint64_t v112;
  double v113;
  double v114;
  uint64_t v115;
  double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double v126;
  double v127;
  double v128;
  char v129;
  void *v130;
  char v131;
  BOOL v132;
  void *v133;
  char v134;
  double *v136;
  CGFloat *v137;
  uint64_t v138;
  void *context;
  char *contexta;
  uint64_t v142;
  void *v143;
  id v144;
  double v145;
  double v146;
  double v147;
  CGFloat v148;
  CGFloat rect;
  double v150;
  double v151;
  double v152;
  CGFloat v153;
  CGFloat v154;
  CGFloat v155;
  CGFloat v156;
  CGFloat v157;
  CGFloat v158;
  double v159;
  _QWORD v160[6];
  _QWORD v161[4];
  id v162;
  id v163;
  id v164;
  void (*v165)(uint64_t);
  id v166;
  id v167;
  id v168;
  _QWORD *v169;
  _QWORD *v170;
  uint64_t *v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  __int128 v177;
  double v178;
  double v179;
  unint64_t v180;
  CGPDFDocument *v181;
  double v182;
  double v183;
  double v184;
  double v185;
  __int128 v186;
  __int128 v187;
  double v188;
  double v189;
  CGFloat v190;
  double v191;
  CGFloat v192;
  CGFloat v193;
  CGFloat v194;
  CGFloat v195;
  CGFloat v196;
  CGFloat v197;
  double v198;
  double v199;
  uint64_t v200;
  double v201;
  CGFloat v202;
  double v203;
  double v204;
  double v205;
  double v206;
  double v207;
  double v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  BOOL v216;
  BOOL v217;
  char v218;
  char v219;
  char v220;
  _QWORD v221[4];
  _QWORD v222[3];
  char v223;
  uint64_t v224;
  id *v225;
  uint64_t v226;
  uint64_t (*v227)(uint64_t, uint64_t);
  void (*v228)(uint64_t);
  id v229;
  uint64_t aBlock;
  uint64_t p_aBlock;
  uint64_t v232;
  uint64_t (*v233)(uint64_t, uint64_t);
  void (*v234)(uint64_t);
  id v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t *v238;
  double v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  char v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t (*v251)(uint64_t, uint64_t);
  void (*v252)(uint64_t);
  id v253;
  CGRect v254;
  CGRect v255;
  CGRect v256;
  CGRect v257;
  CGRect v258;
  CGRect v259;
  CGRect v260;
  CGRect v261;
  CGRect v262;

  v13 = a1;
  v14 = a2;
  v15 = a7;
  if (a8 == 0.0)
    a8 = PKScreenScale();
  v136 = a4;
  v137 = a5;
  v159 = a8;
  v16 = objc_msgSend(v13, "passStyle");
  v224 = 0;
  v225 = (id *)&v224;
  v17 = v16 == 5;
  v226 = 0x3032000000;
  if (v16 == 7)
    v17 = 2;
  v138 = v17;
  v227 = __Block_byref_object_copy__66;
  v228 = __Block_byref_object_dispose__66;
  v229 = 0;
  v222[0] = 0;
  v222[1] = v222;
  v222[2] = 0x2020000000;
  v223 = 0;
  v221[0] = 0;
  v221[1] = v221;
  v221[2] = 0x2020000000;
  v221[3] = 0;
  v18 = v13;
  v19 = v14;
  v20 = v15;
  v143 = v18;
  v21 = objc_msgSend(v18, "passStyle");
  v248 = 0;
  v249 = &v248;
  v250 = 0x3032000000;
  v251 = __Block_byref_object_copy__66;
  v252 = __Block_byref_object_dispose__66;
  v253 = 0;
  v244 = 0;
  v245 = &v244;
  v246 = 0x2020000000;
  v247 = 0;
  v240 = 0;
  v241 = &v240;
  v242 = 0x2020000000;
  v243 = 0;
  aBlock = MEMORY[0x1E0C809B0];
  p_aBlock = 3221225472;
  v232 = (uint64_t)___ExtractBackgroundFromBundle_block_invoke;
  v233 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E2AD8308;
  v236 = &v240;
  v22 = (void (*)(uint64_t))v19;
  v234 = v22;
  v237 = &v244;
  v238 = &v248;
  v239 = a8;
  v23 = v20;
  v235 = v23;
  v24 = (uint64_t (**)(void *, const __CFString *))_Block_copy(&aBlock);
  v25 = 0;
  v26 = (void *)MEMORY[0x19400CFE8]();
  if (v21 <= 0xC && ((0x1DBBu >> v21) & 1) == 0)
  {
    if (v21 == 6 && (v24[2](v24, CFSTR("cardBackgroundCombined")) & 1) == 0)
      v25 = v24[2](v24, CFSTR("cardBackground"));
    else
      v25 = 0;
    if (!*((_BYTE *)v241 + 24))
      v24[2](v24, CFSTR("background"));
    if (v21 == 9 && !*((_BYTE *)v241 + 24))
      v24[2](v24, CFSTR("artwork"));
  }
  if (v21 == 6 && *((_BYTE *)v241 + 24) == 0)
    v28 = 1;
  else
    v28 = v25;
  v29 = v245[3];
  v30 = (unint64_t)(id)v249[5];
  objc_autoreleasePoolPop(v26);

  _Block_object_dispose(&v240, 8);
  _Block_object_dispose(&v244, 8);
  _Block_object_dispose(&v248, 8);

  v133 = (void *)v30;
  v132 = (v29 | v30) != 0;
  v134 = v28;
  if (v29 | v30)
    v31 = 1;
  else
    v31 = v28;
  v142 = PKColorSpaceStandardRGB();
  v32 = *MEMORY[0x1E0C9D628];
  v33 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v34 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v35 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  context = (void *)MEMORY[0x19400CFE8]();
  v156 = v33;
  v157 = v32;
  v155 = v34;
  v158 = v35;
  if (v16 == 6)
    goto LABEL_35;
  if (v16 == 9)
  {
    v36 = a8;
    if (a8 == 0.0)
      v36 = PKScreenScale();
    v37 = v36 == 0.0 ? 9.0 : ceil(v36 * 9.0) / v36;
    v38 = 14.0;
    v39 = 36.0;
    v40 = 0x405F800000000000;
  }
  else
  {
    v37 = 5.0;
    v38 = 13.0;
    v39 = 50.0;
    v40 = 0x4071E00000000000;
  }
  v154 = v38;
  v41 = v37;
  v42 = v39;
  if (CGRectIsNull(*(CGRect *)&v38))
  {
LABEL_35:
    v43 = 0;
LABEL_36:
    v148 = v35;
    rect = v34;
    v147 = v33;
    v154 = v32;
    goto LABEL_37;
  }
  +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", CFSTR("logo"), v22, v23, a8);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v43)
    goto LABEL_36;
  v54 = 30.0;
  if (v16 != 9)
    v54 = 50.0;
  +[PKImageResizingConstraints constraintsWithMaxSize:](PKImageResizingConstraints, "constraintsWithMaxSize:", dbl_190455CF0[v16 == 9], v54);
  v55 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v43, "scale");
  objc_msgSend(v55, "setOutputScale:");
  objc_msgSend(v43, "resizedImageWithConstraints:", v55);
  v56 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v56, "size");
  rect = v57;
  v43 = v56;
  v148 = v58;
  *(float *)&v57 = v37 + (v39 - v58) * 0.5;
  v147 = roundf(*(float *)&v57);

LABEL_37:
  v45 = *MEMORY[0x1E0C9D820];
  v44 = *(double *)(MEMORY[0x1E0C9D820] + 8);
  v152 = *MEMORY[0x1E0C9D648];
  v153 = *(double *)(MEMORY[0x1E0C9D648] + 8);
  v150 = *(double *)(MEMORY[0x1E0C9D648] + 24);
  v151 = *(double *)(MEMORY[0x1E0C9D648] + 16);
  if (v16 == 7)
    v46 = 0;
  else
    v46 = v31;
  if ((v46 & 1) != 0)
  {
    v131 = 0;
  }
  else
  {
    v47 = v43;
    v254.origin.x = PKPassFaceStripImageFrame(v143);
    x = v254.origin.x;
    y = v254.origin.y;
    width = v254.size.width;
    height = v254.size.height;
    IsNull = CGRectIsNull(v254);
    if (IsNull)
    {
      v53 = 0;
    }
    else
    {
      +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", CFSTR("strip"), v22, v23, a8);
      v53 = (void *)objc_claimAutoreleasedReturnValue();
    }
    objc_storeStrong(v225 + 5, v53);
    if (!IsNull)

    if (v225[5])
    {
      v131 = 1;
      v43 = v47;
      if (v16 != 7)
      {
        v59 = 0;
        v60 = 0;
        v156 = y;
        v157 = x;
        v155 = width;
        v158 = height;
LABEL_71:
        v145 = v44;
        v146 = v45;
        goto LABEL_72;
      }
      v156 = y;
      v157 = x;
      v155 = width;
      v158 = height;
    }
    else
    {
      v131 = 0;
      v43 = v47;
    }
  }
  +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", CFSTR("thumbnail"), v22, v23, a8);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v61)
  {
    v59 = 0;
LABEL_70:

    v59 = 0;
    v60 = 0;
    goto LABEL_71;
  }
  v62 = objc_msgSend(v143, "passStyle");
  if (v62 == 2)
  {
    v63 = 1.0;
    v64 = 90.0;
  }
  else
  {
    if (v62 != 5)
      goto LABEL_64;
    v63 = 1.5;
    v64 = 80.0;
  }
  +[PKImageResizingConstraints constraintsWithMaxSize:minAspectRatio:maxAspectRatio:](PKImageResizingConstraints, "constraintsWithMaxSize:minAspectRatio:maxAspectRatio:", 80.0, v64, 0.766666667, v63);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  if (v65)
  {
    objc_msgSend(v61, "scale");
    objc_msgSend(v65, "setOutputScale:");
    objc_msgSend(v61, "resizedImageWithConstraints:", v65);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v59, "size");
    v145 = v67;
    v146 = v66;

    goto LABEL_67;
  }
LABEL_64:
  if (v16 == 7)
  {
    objc_msgSend(v61, "size");
    v145 = v69;
    v146 = v68;
    v59 = v61;
  }
  else
  {
    v59 = v61;
    v145 = v44;
    v146 = v45;
  }
LABEL_67:
  if (v146 == v45 && v145 == v44)
  {
    v44 = v145;
    v45 = v146;
    goto LABEL_70;
  }
  if (!v59)
  {
    v60 = 0;
    goto LABEL_72;
  }
  v111 = v143;
  v112 = objc_msgSend(v111, "passStyle");
  v113 = PKPassFrontFaceContentSize(v112);
  if (v112 == 2)
  {
    v114 = 15.0;
    v153 = 68.0;
  }
  else
  {
    if (v112 == 5)
    {
      v119 = 5.0;
      v118 = 6.0;
      v114 = 15.0;
      v153 = 72.0;
      goto LABEL_129;
    }
    v114 = 0.0;
    v153 = 0.0;
    if (v112 == 7)
    {
      v115 = objc_msgSend(v111, "layoutMode", 0.0);
      if (v115)
        v116 = 80.0;
      else
        v116 = 105.0;
      v261.origin.x = v157;
      v261.origin.y = v156;
      v261.size.width = v155;
      v261.size.height = v158;
      if (CGRectIsNull(v261))
      {
        v117 = dbl_190455D00[v115 == 0];
      }
      else if (v115)
      {
        v117 = 98.0;
      }
      else
      {
        v262.origin.x = v157;
        v262.origin.y = v156;
        v262.size.width = v155;
        v262.size.height = v158;
        v117 = CGRectGetMaxY(v262) + -52.5;
      }
      v152 = PKRectRoundToPixelWithScale((v113 - v116) * 0.5, v117, v116, v116, a8);
      v153 = v120;
      v150 = v122;
      v151 = v121;
      goto LABEL_134;
    }
  }
  v118 = 0.0;
  v119 = 0.0;
LABEL_129:
  v151 = v119 + v146 + v119;
  v152 = v113 - v114 - v119 - v119 - v146;
  v150 = v118 + v145 + v119;
LABEL_134:

  v60 = 1;
LABEL_72:
  objc_autoreleasePoolPop(context);
  v70 = objc_msgSend(v143, "passStyle");
  if (v70 > 9)
  {
    v71 = 1;
    if (!v31)
      goto LABEL_74;
LABEL_84:
    v75 = PKPassFrontFaceContentSize(v70);
    goto LABEL_85;
  }
  v71 = qword_190455E70[v70];
  if (v31)
    goto LABEL_84;
LABEL_74:
  v72 = v71 - 1;
  v73 = 0.0;
  v74 = 0.0;
  if (v72 <= 5)
  {
    v73 = dbl_190455DE0[v72];
    v74 = dbl_190455E10[v72];
  }
  v75 = PKPassFrontFaceContentSize(v70);
  v255.origin.x = v154;
  v255.origin.y = v147;
  v255.size.height = v148;
  v255.size.width = rect;
  if (!CGRectIsNull(v255))
  {
    v256.origin.x = v154;
    v256.origin.y = v147;
    v256.size.height = v148;
    v256.size.width = rect;
    v74 = fmax(CGRectGetMaxY(v256), v74);
  }
  v257.origin.x = v157;
  v257.origin.y = v156;
  v257.size.width = v155;
  v257.size.height = v158;
  if (!CGRectIsNull(v257))
  {
    v258.origin.x = v157;
    v258.origin.y = v156;
    v258.size.width = v155;
    v258.size.height = v158;
    v74 = fmax(CGRectGetMaxY(v258), v74);
  }
  v259.origin.x = v152;
  v259.origin.y = v153;
  v259.size.height = v150;
  v259.size.width = v151;
  if (!CGRectIsEmpty(v259))
  {
    v260.origin.x = v152;
    v260.origin.y = v153;
    v260.size.height = v150;
    v260.size.width = v151;
    v74 = fmax(CGRectGetMaxY(v260), v74);
  }
  v76 = v73 + v74;
LABEL_85:
  v77 = PKSizeRoundToPixelWithScale(v75, v76, 0.0);
  v79 = v77;
  v80 = v78;
  if (v16 > 9)
    v81 = 1;
  else
    v81 = qword_190455E70[v16];
  contexta = (char *)v81;
  v82 = *MEMORY[0x1E0C9D538];
  v83 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  v84 = v77 + 24.0;
  v85 = v78 + 8.0;
  v86 = v159 != 1.0 && v159 > 0.0;
  v130 = v59;
  v129 = v60;
  if (v86)
  {
    v123 = v159 * v82;
    v124 = v159 * v83;
    v87 = v159 * v84;
    v88 = v159 * v85;
    v89 = v159 * 12.0;
    v90 = v159 * 4.0;
    v125 = v159 * v80;
    v126 = v159 * v79;
    v91 = v159 * v85;
    v92 = v159 * v84;
    v127 = v159 * 12.0;
    v128 = v159 * 4.0;
  }
  else
  {
    v87 = v159 * v84;
    v88 = v159 * v85;
    v90 = v159 * 4.0;
    v91 = v80 + 8.0;
    v92 = v79 + 24.0;
    v127 = 12.0;
    v128 = 4.0;
    v89 = v159 * 12.0;
    v123 = *MEMORY[0x1E0C9D538];
    v124 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    v125 = v80;
    v126 = v79;
  }
  v93 = ceil(v87);
  if (!v86)
    v93 = v79 + 24.0;
  v94 = ceil(v88);
  if (!v86)
    v94 = v80 + 8.0;
  v95 = vcvtpd_u64_f64(v90);
  if (v86)
    v96 = v95;
  else
    v96 = 4;
  v97 = vcvtpd_u64_f64(v89);
  if (v86)
    v98 = v97;
  else
    v98 = 12;
  result = +[PKBitmapContext create16FloatWithSize:configuration:](PKBitmapContext, "create16FloatWithSize:configuration:", (unint64_t)v93, (unint64_t)v94, 65538);
  v100 = result;
  if (result)
  {
    v161[0] = MEMORY[0x1E0C809B0];
    v161[1] = 3221225472;
    v161[2] = __PKPassFrontFaceImage_block_invoke;
    v161[3] = &unk_1E2AD8298;
    v216 = v86;
    v172 = v159;
    v144 = v143;
    v162 = v144;
    v173 = v82;
    v174 = v83;
    v175 = v79 + 24.0;
    v176 = v80 + 8.0;
    v217 = v132;
    v101 = v133;
    v163 = v101;
    v177 = xmmword_190455D10;
    v178 = v79;
    v179 = v80;
    v180 = v16;
    v181 = (CGPDFDocument *)v29;
    v102 = v100;
    v182 = v123;
    v183 = v124;
    v184 = v92;
    v185 = v91;
    v164 = v102;
    v169 = v222;
    v170 = v221;
    v186 = xmmword_190455D20;
    v187 = xmmword_190455D20;
    v188 = v79;
    v189 = v80;
    v103 = v22;
    v165 = v103;
    v218 = v134;
    v104 = v23;
    v166 = v104;
    v105 = v43;
    v190 = v154;
    v191 = v147;
    v192 = rect;
    v193 = v148;
    v219 = v131;
    v167 = v105;
    v171 = &v224;
    v194 = v157;
    v195 = v156;
    v196 = v155;
    v197 = v158;
    v220 = v129;
    v198 = v146;
    v199 = v145;
    v200 = v138;
    v201 = v152;
    v202 = v153;
    v203 = v151;
    v204 = v150;
    v106 = v130;
    v168 = v106;
    v205 = v127;
    v206 = v128;
    v207 = v126;
    v208 = v125;
    v209 = v96;
    v210 = v98;
    v211 = v96;
    v212 = v98;
    v213 = v142;
    v214 = contexta;
    v215 = a6;
    objc_msgSend(v102, "accessContext:", v161);
    if (v29)
      CGPDFDocumentRelease((CGPDFDocumentRef)v29);
    if (a3)
    {
      *a3 = v154;
      a3[1] = v147;
      a3[2] = rect;
      a3[3] = v148;
    }
    if (v136)
    {
      *v136 = v152;
      v136[1] = v153;
      v136[2] = v151;
      v136[3] = v150;
    }
    if (v137)
    {
      *v137 = v157;
      v137[1] = v156;
      v137[2] = v155;
      v137[3] = v158;
    }
    v107 = +[PKBitmapConversionDescriptor create8Uint](PKBitmapConversionDescriptor, "create8Uint");
    objc_msgSend(v107, "setColorSpace:withPolicy:", v142, &__block_literal_global_82_1);
    v108 = (void *)objc_msgSend(v107, "convertFromContext:", v102);
    aBlock = 0;
    p_aBlock = (uint64_t)&aBlock;
    v232 = 0x3032000000;
    v233 = __Block_byref_object_copy__66;
    v234 = __Block_byref_object_dispose__66;
    v235 = 0;
    v160[0] = MEMORY[0x1E0C809B0];
    v160[1] = 3221225472;
    v160[2] = __PKPassFrontFaceImage_block_invoke_8_83;
    v160[3] = &unk_1E2AD82E0;
    v160[4] = &aBlock;
    *(double *)&v160[5] = v159;
    objc_msgSend(v108, "accessContext:", v160);
    v109 = 0.0;
    if ((unint64_t)(contexta - 1) <= 5)
      v109 = dbl_190455DE0[(_QWORD)(contexta - 1)];
    objc_msgSend(*(id *)(p_aBlock + 40), "resizableImageByTilingWithCapInsets:", v85 - v109, 0.0, v109, 0.0);
    v110 = (void *)objc_claimAutoreleasedReturnValue();
    _Block_object_dispose(&aBlock, 8);

    _Block_object_dispose(v221, 8);
    _Block_object_dispose(v222, 8);

    _Block_object_dispose(&v224, 8);
    return v110;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1902894C0(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x348], 8);
  _Block_object_dispose(&STACK[0x368], 8);
  _Block_object_dispose(&STACK[0x388], 8);
  _Unwind_Resume(a1);
}

void sub_19028BAA4(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x8F0], 8);
  _Unwind_Resume(a1);
}

void _DrawPDFPageInRect(CGContext *a1, CGPDFPage *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  CGFloat MaxY;
  double width;
  double height;
  double v15;
  double v16;
  CGAffineTransform v17;
  CGRect v18;
  CGRect v19;
  CGRect BoxRect;
  CGRect v21;

  if (a1)
  {
    CGContextSaveGState(a1);
    v18.origin.x = a3;
    v18.origin.y = a4;
    v18.size.width = a5;
    v18.size.height = a6;
    CGContextClipToRect(a1, v18);
    v19.origin.x = a3;
    v19.origin.y = a4;
    v19.size.width = a5;
    v19.size.height = a6;
    MaxY = CGRectGetMaxY(v19);
    CGContextTranslateCTM(a1, a3, MaxY);
    CGContextScaleCTM(a1, 1.0, -1.0);
    BoxRect = CGPDFPageGetBoxRect(a2, kCGPDFMediaBox);
    width = BoxRect.size.width;
    height = BoxRect.size.height;
    v15 = a5 / BoxRect.size.width;
    if (width == 0.0)
      v15 = 1.0;
    v16 = a6 / BoxRect.size.height;
    if (height == 0.0)
      v16 = 1.0;
    if (fmax(v15, v16) != 1.0)
    {
      if (v15 <= v16)
      {
        width = a6 * (width / height);
        height = a6;
      }
      else
      {
        height = a5 * (height / width);
        width = a5;
      }
    }
    v21.origin.x = PKSizeAlignedInRectWithScale(0x100000001uLL, width, height, *MEMORY[0x1E0C9D538], *(CGFloat *)(MEMORY[0x1E0C9D538] + 8), a5, a6, 0.0);
    CGPDFPageGetDrawingTransform(&v17, a2, kCGPDFMediaBox, v21, 0, 1);
    CGContextConcatCTM(a1, &v17);
    CGContextDrawPDFPage(a1, a2);
    CGContextRestoreGState(a1);
  }
}

void vImageGaussianBlur_ARGB16F(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64x2_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double v16;
  double v17;
  float v18;
  BOOL v19;
  id v20;
  int8x16_t v21;
  uint64x2_t v27;
  id v28;
  double v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  unint64_t v34;
  double v35;
  double v36;
  id v37;
  uint64x2_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  id v42;
  int64x2_t v43;
  BOOL v44;
  double v45;
  id v46;
  _QWORD v47[4];
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  int8x16_t v53;
  uint64_t v54;
  float v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  _QWORD v59[11];
  float v60;

  if (!a1
    || !a2
    || !a3
    || (v10 = *(uint64x2_t *)(a2 + 8), (v11 = *(_QWORD *)(a2 + 8)) == 0)
    || !v10.i64[1]
    || (v12 = *(_QWORD *)(a3 + 8), v12 > v11)
    || (v13 = *(_QWORD *)(a3 + 16), v13 > v10.i64[1]))
  {
LABEL_38:
    __break(1u);
    return;
  }
  if (v12 && v13)
  {
    if (v13 + a4 <= v10.i64[1] && v12 + a5 <= v11)
    {
      v16 = fabs(a7);
      v17 = fabs(a6);
      v18 = v17 * v16;
      v19 = a7 < 0.0;
      if (a7 >= 0.0 && v16 == 1.0)
      {
        v20 = +[PKBitmapContext createWithSize:origin:format:](PKBitmapContext, "createWithSize:origin:format:");
        if (v20)
        {
          v59[0] = MEMORY[0x1E0C809B0];
          v59[1] = 3221225472;
          v59[2] = __vImageGaussianBlur_ARGB16F_block_invoke;
          v59[3] = &__block_descriptor_92_e79_v24__0r__vImage_CGImageFormat_II__CGColorSpace_II_di_8r__vImage_Buffer__vQQQ_16l;
          *(double *)&v59[4] = v17;
          v60 = v18;
          v59[5] = a2;
          v59[6] = a3;
          v59[7] = a4;
          v59[8] = a5;
          v59[9] = v12;
          v59[10] = v13;
          v46 = v20;
          objc_msgSend(v20, "accessData:", v59);
LABEL_37:

          return;
        }
      }
      else
      {
        v44 = v16 != 1.0;
        v45 = v16;
        v21 = (int8x16_t)vrndaq_f64(vmulq_n_f64(vcvtq_f64_u64(v10), v16));
        __asm { FMOV            V1.2D, #1.0 }
        v27 = vcvtq_u64_f64(vmaxnmq_f64((float64x2_t)vextq_s8(v21, v21, 8uLL), _Q1));
        v28 = +[PKBitmapContext createWithSize:origin:format:](PKBitmapContext, "createWithSize:origin:format:", *(_OWORD *)&v27, 2, a1, *(_OWORD *)&v27);
        if (v28)
        {
          v46 = v28;
          v29 = round(v45 * (double)v13);
          if (v27.i64[0] <= 1uLL)
            v30 = 1;
          else
            v30 = v27.i64[0];
          v31 = 1.0;
          if (v29 <= 1.0)
            v32 = 1.0;
          else
            v32 = v29;
          if (v29 < (double)v27.u64[0])
            v33 = v32;
          else
            v33 = (double)v30;
          if (v27.i64[1] <= 1uLL)
            v34 = 1;
          else
            v34 = v27.u64[1];
          v35 = round(v45 * (double)v12);
          if (v35 > 1.0)
            v31 = v35;
          v36 = v35 < (double)v27.u64[1] ? v31 : (double)v34;
          v37 = +[PKBitmapContext createWithSize:origin:format:](PKBitmapContext, "createWithSize:origin:format:", *(_OWORD *)&v27, 2, a1);
          if (v37)
          {
            v38.i64[0] = a4;
            v38.i64[1] = a5;
            v47[0] = MEMORY[0x1E0C809B0];
            v47[1] = 3221225472;
            v47[2] = __vImageGaussianBlur_ARGB16F_block_invoke_2;
            v47[3] = &unk_1E2AD83E8;
            v56 = v44;
            v48 = v37;
            v49 = a2;
            v57 = v19;
            v58 = v18 > 0.0;
            v55 = v18;
            v50 = a1;
            v51 = (unint64_t)v33;
            v52 = (unint64_t)v36;
            v39.i64[0] = (unint64_t)v33;
            v39.i64[1] = (unint64_t)v36;
            v40 = (int8x16_t)vcvtq_u64_f64(vrndaq_f64(vmulq_n_f64(vcvtq_f64_u64(v38), v45)));
            v41 = (int8x16_t)vsubq_s64(v43, v39);
            v53 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v40, (uint64x2_t)v41), v41, v40);
            v54 = a3;
            v42 = v37;
            objc_msgSend(v46, "accessData:", v47);

            goto LABEL_37;
          }
        }
      }
    }
    goto LABEL_38;
  }
}

id _PKPassDictionaryFromBundle(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "URLForResource:withExtension:", CFSTR("pass"), CFSTR("json"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if (v3
      && (objc_msgSend(MEMORY[0x1E0C99D50], "dataWithContentsOfURL:", v3),
          (v4 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      v5 = (void *)v4;
      objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v4, 0, 0);
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      if (v6)
        goto LABEL_10;
    }
    else
    {

    }
  }
  PKLogFacilityTypeGetObject(6uLL);
  v7 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(MEMORY[0x1E0CB34D0], "mainBundle");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "bundleIdentifier");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = 138412546;
    v12 = v9;
    v13 = 2112;
    v14 = v2;
    _os_log_impl(&dword_18FC92000, v7, OS_LOG_TYPE_DEFAULT, "Invalid pass bundle for process(%@): %@", (uint8_t *)&v11, 0x16u);

  }
  v6 = 0;
LABEL_10:

  return v6;
}

id _FetchImageNamed(void *a1, void *a2, void *a3, double a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  const __CFURL *v11;
  const __CFURL *v12;
  CGPDFDocument *v13;
  CGPDFDocument *v14;
  CGPDFPageRef Page;
  void *v16;
  void *v17;

  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = (void *)MEMORY[0x19400CFE8]();
  objc_msgSend(v8, "URLForResource:withExtension:", v7, CFSTR("pdf"));
  v11 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v12 = v11;
  if (v11)
  {
    v13 = CGPDFDocumentCreateWithURL(v11);
    v14 = v13;
    if (v13)
    {
      if (CGPDFDocumentGetNumberOfPages(v13))
      {
        Page = CGPDFDocumentGetPage(v14, 1uLL);
        if (Page)
        {
          +[_PKPassImageConstruction_ImageRepresentation representationFromDocument:page:](_PKPassImageConstruction_ImageRepresentation, "representationFromDocument:page:", v14, Page);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          goto LABEL_11;
        }
      }
    }
  }
  else
  {
    v14 = 0;
  }
  +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", v7, v8, v9, a4);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    +[_PKPassImageConstruction_ImageRepresentation representationFromImage:](_PKPassImageConstruction_ImageRepresentation, "representationFromImage:", v17);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v16 = 0;
  }

LABEL_11:
  CGPDFDocumentRelease(v14);

  objc_autoreleasePoolPop(v10);
  return v16;
}

void _DrawImageInRect(CGContext *a1, void *a2, unint64_t a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8)
{
  id v15;
  CGPDFPage *v16;
  CGPDFPage *v17;
  double width;
  double height;
  double v20;
  double v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  CGFloat v33;
  CGFloat v34;
  CGFloat v35;
  id v36;
  CGRect BoxRect;

  v15 = a2;
  if (a1 && v15)
  {
    v36 = objc_retainAutorelease(v15);
    v16 = (CGPDFPage *)objc_msgSend(v36, "pageRef");
    if (v16)
    {
      v17 = v16;
      BoxRect = CGPDFPageGetBoxRect(v16, kCGPDFMediaBox);
      width = BoxRect.size.width;
      height = BoxRect.size.height;
      v20 = a6 / BoxRect.size.width;
      if (width == 0.0)
        v20 = 1.0;
      v21 = a7 / BoxRect.size.height;
      if (height == 0.0)
        v21 = 1.0;
      if (fmin(v20, v21) != 1.0)
      {
        if (v20 >= v21)
        {
          width = a7 * (width / height);
          height = a7;
        }
        else
        {
          height = a6 * (height / width);
          width = a6;
        }
      }
      v30 = PKSizeRoundToPixelWithScale(width, height, a8);
      v32 = PKSizeAlignedInRectWithScale(a3, v30, v31, a4, a5, a6, a7, a8);
      _DrawPDFPageInRect(a1, v17, v32, v33, v34, v35);
    }
    else
    {
      objc_msgSend(v36, "image");
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      v23 = v22;
      if (v22)
      {
        objc_msgSend(v22, "downscaleSizeMatchingScale:", a8);
        v26 = PKSizeAspectFit(v24, v25, a6, a7);
        v28 = PKSizeRoundToPixelWithScale(v26, v27, a8);
        objc_msgSend(v23, "drawInRect:inContext:", a1, PKSizeAlignedInRectWithScale(a3, v28, v29, a4, a5, a6, a7, a8));
      }

    }
  }
  else
  {
    __break(1u);
  }
}

id _PKPaymentPassNetworkIdentifierFromDictionary(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("paymentApplications"));
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v1 = (id)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v10;
    while (2)
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v10 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v5), "objectForKeyedSubscript:", CFSTR("paymentNetworkIdentifier"), (_QWORD)v9);
        v6 = objc_claimAutoreleasedReturnValue();
        if (v6)
        {
          v7 = (void *)v6;
          goto LABEL_11;
        }
        ++v5;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (v3)
        continue;
      break;
    }
  }
  v7 = 0;
LABEL_11:

  return v7;
}

void _DrawTextInRectWithFramesetter(CGContext *a1, void *a2, unint64_t a3, const __CTFramesetter *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  id v15;
  CGSize v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat MaxY;
  const CGPath *v27;
  CFIndex v28;
  const __CTFrame *Frame;
  CFRange v30;
  CFRange v31;
  CGSize v32;
  CGRect v33;
  CGRect v34;

  if (a2)
  {
    v15 = a2;
    v30.length = objc_msgSend(v15, "length");
    v30.location = 0;
    v32.width = a7;
    v32.height = a8;
    v16 = CTFramesetterSuggestFrameSizeWithConstraints(a4, v30, 0, v32, 0);
    v17 = PKSizeCeilToPixelWithScale(v16.width, v16.height, 0.0);
    v19 = PKSizeAlignedInRectWithScale(a3, v17, v18, a5, a6, a7, a8, 0.0);
    v21 = v20;
    v23 = v22;
    v25 = v24;
    CGContextSaveGState(a1);
    v33.origin.x = v19;
    v33.origin.y = v21;
    v33.size.width = v23;
    v33.size.height = v25;
    MaxY = CGRectGetMaxY(v33);
    CGContextTranslateCTM(a1, v19, MaxY);
    CGContextScaleCTM(a1, 1.0, -1.0);
    v34.origin.x = *(CGFloat *)MEMORY[0x1E0C9D538];
    v34.origin.y = *(CGFloat *)(MEMORY[0x1E0C9D538] + 8);
    v34.size.width = v23;
    v34.size.height = v25;
    v27 = CGPathCreateWithRect(v34, 0);
    v28 = objc_msgSend(v15, "length");

    v31.location = 0;
    v31.length = v28;
    Frame = CTFramesetterCreateFrame(a4, v31, v27, 0);
    CTFrameDraw(Frame, a1);
    CGContextRestoreGState(a1);
    CFRelease(Frame);
    CFRelease(v27);
  }
}

size_t pk_vImageCopyAverageColor_ARGB16F(size_t result, __int16 **a2, unint64_t a3, CFTypeRef *a4)
{
  CGColorSpaceRef *v4;
  int v5;
  unint64_t v9;
  int v10;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int16 *v16;
  unint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t i;
  unint64_t v32;
  __int16 *v33;
  char v37;
  __int16 *v38;
  double *v39;
  double *v40;
  size_t v41;
  CGFloat *v46;
  double v47;
  size_t v48;
  double *v49;
  double *j;
  CGColorRef v51;
  double v52;
  size_t v53;
  double *v54;
  double *k;
  CGColorRef v56;
  unint64_t v57;
  size_t v58;
  uint64_t v59;
  CFTypeRef *v60;
  uint64_t size;

  if (!a2)
    goto LABEL_94;
  v4 = (CGColorSpaceRef *)result;
  if (*(_DWORD *)result != 16 || (v5 = *(_DWORD *)(result + 16), (v5 & 0x100) == 0))
  {
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    goto LABEL_97;
  }
  v9 = (unint64_t)a2[3];
  result = *(_QWORD *)(result + 8);
  v10 = v5 & 0x1F;
  if (v10 == 7 || result == 0)
  {
    v12 = v10 != 0;
  }
  else
  {
    result = CGColorSpaceGetNumberOfComponents((CGColorSpaceRef)result);
    if (result >= 0x100)
      goto LABEL_101;
    v12 = result;
    if (v10)
    {
      if (result == 255)
      {
LABEL_104:
        __break(1u);
        return result;
      }
      v12 = result + 1;
    }
  }
  v13 = *((unsigned int *)v4 + 1);
  if (v12 * *(unsigned int *)v4 > v13)
    goto LABEL_95;
  if ((v13 & 7) != 0)
    goto LABEL_95;
  if (v13 >= 0x800)
    goto LABEL_95;
  v14 = v13 >> 3;
  v15 = (unint64_t)a2[2];
  if (!is_mul_ok(v13 >> 3, v15) || v14 * v15 > (unint64_t)a2[3])
    goto LABEL_95;
  if (((_DWORD)v4[2] & 0x1F) == 2)
  {
    v58 = 0;
    v59 = 1;
  }
  else
  {
    if (((_DWORD)v4[2] & 0x1F) != 1)
    {
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }
    v58 = v12 - 1;
    v59 = 0;
  }
  v16 = *a2;
  v17 = (unint64_t)a2[1];
  size = 8 * v12;
  result = (size_t)malloc_type_aligned_alloc(8uLL, 8 * v12, 0x100004000313F17uLL);
  if (!result)
    goto LABEL_96;
  v18 = (_QWORD *)result;
  v57 = a3;
  v60 = a4;
  if (a3)
    v19 = a4 == 0;
  else
    v19 = 1;
  v20 = v19;
  if (v19)
  {
    v21 = 0;
  }
  else
  {
    result = (size_t)malloc_type_aligned_alloc(8uLL, size, 0x100004000313F17uLL);
    v21 = (_QWORD *)result;
    if (!result)
      goto LABEL_103;
  }
  if (v12)
  {
    v22 = v18;
    v23 = v21;
    v24 = v12;
    do
    {
      *v22 = 0;
      if ((v20 & 1) == 0)
        *v23 = 0;
      ++v23;
      ++v22;
      --v24;
    }
    while (v24);
  }
  if (v17)
  {
    if (!is_mul_ok(v9, v17 - 1))
    {
LABEL_99:
      __break(1u);
      goto LABEL_100;
    }
    v25 = v9 * (v17 - 1);
    if (v15)
      goto LABEL_42;
LABEL_45:
    v26 = 0;
    goto LABEL_46;
  }
  v25 = 0;
  if (!v15)
    goto LABEL_45;
LABEL_42:
  if (!is_mul_ok(v14, v15 - 1))
  {
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  v26 = v14 * (v15 - 1);
LABEL_46:
  if (__CFADD__(v25, v26))
  {
LABEL_97:
    __break(1u);
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  v27 = v15;
  v28 = v15;
  v29 = v17;
  v30 = v17;
  if ((v20 & 1) == 0)
  {
    v29 = v57;
    v28 = v15 - v57;
    if (v15 < v57)
      v28 = 0;
    if (v17 >= v57)
      v30 = v17 - v57;
    else
      v30 = 0;
    v27 = v57;
  }
  if (v17)
  {
    for (i = 0; i != v17; ++i)
    {
      if (v15)
      {
        v32 = 0;
        v33 = v16;
        do
        {
          if (v12)
          {
            if (v32 < v27 || v32 >= v28 || i < v29 || i >= v30)
              v37 = v20;
            else
              v37 = 1;
            v38 = v33;
            v39 = (double *)v18;
            v40 = (double *)v21;
            v41 = v12;
            do
            {
              _H0 = *v38;
              __asm { FCVT            D0, H0 }
              *v39 = *v39 + _D0;
              if ((v37 & 1) == 0)
                *v40 = *v40 + _D0;
              ++v40;
              ++v39;
              ++v38;
              --v41;
            }
            while (v41);
          }
          ++v32;
          v33 = (__int16 *)((char *)v33 + v14);
        }
        while (v32 != v15);
      }
      v16 = (__int16 *)((char *)v16 + v9);
    }
  }
  result = (size_t)malloc_type_aligned_alloc(8uLL, size, 0x100004000313F17uLL);
  if (!result)
    goto LABEL_98;
  v46 = (CGFloat *)result;
  *(_QWORD *)(result + 8 * (v12 - 1)) = 0x3FF0000000000000;
  if ((v20 & 1) == 0)
  {
    if (v12 != 1)
    {
      v47 = *(double *)&v21[v58];
      v48 = v12 - 2;
      v49 = (double *)result;
      for (j = (double *)&v21[v59]; ; ++j)
      {
        *v49 = *j / v47;
        if (!v48)
          break;
        --v48;
        ++v49;
      }
    }
    v51 = CGColorCreate(v4[1], (const CGFloat *)result);
    if (*v60)
      CFRelease(*v60);
    *v60 = v51;
  }
  if (v12 != 1)
  {
    v52 = *(double *)&v18[v58];
    v53 = v12 - 2;
    v54 = v46;
    for (k = (double *)&v18[v59]; ; ++k)
    {
      *v54 = *k / v52;
      if (!v53)
        break;
      --v53;
      ++v54;
    }
  }
  v56 = CGColorCreate(v4[1], v46);
  free(v46);
  free(v18);
  if ((v20 & 1) == 0)
    free(v21);
  return (size_t)v56;
}

id PKPassFrontFaceDynamicLayerImage(void *a1, void *a2, void *a3, int a4, void *a5, double a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  const __CFURL *v17;
  const __CFURL *v18;
  CGPDFDocument *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  void *v24;
  void *v25;
  double v26;
  double v27;
  CGContext *BitmapContext;
  CGFloat v29;
  CGFloat v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  CGPDFPage *Page;
  double v37;
  double v38;

  v11 = a1;
  v12 = a2;
  v13 = a3;
  v14 = a5;
  if (a6 == 0.0)
    a6 = PKScreenScale();
  v15 = objc_msgSend(v11, "passStyle");
  _PKPassDictionaryFromBundle(v13);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "URLForResource:withExtension:", v12, CFSTR("pdf"));
  v17 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    v19 = CGPDFDocumentCreateWithURL(v17);
    v20 = 0;
  }
  else
  {
    +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", v12, v13, v14, a6);
    v20 = objc_claimAutoreleasedReturnValue();
    v19 = 0;
  }
  if ((unint64_t)v19 | v20)
  {
    v21 = PKPassFrontFaceContentSize(v15);
    v23 = v22;
    objc_msgSend(v16, "PKDictionaryForKey:", CFSTR("dynamicLayerConfiguration"));
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v24;
    if (a4 && objc_msgSend(v24, "PKBoolForKey:", CFSTR("parallaxEnabled")))
    {
      objc_msgSend((id)v20, "scale");
      v21 = PKSizeRoundToPixelWithScale(v21 * 1.1, v23 * 1.1, v26);
      v23 = v27;
    }
    BitmapContext = _CreateBitmapContext(0, 1, 0, v21, v23, a6);
    v30 = *MEMORY[0x1E0C9D538];
    v29 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    if (v20)
    {
      objc_msgSend((id)v20, "size");
      v33 = v21 / v31;
      if (v31 == 0.0)
        v33 = 1.0;
      v34 = v23 / v32;
      if (v32 == 0.0)
        v34 = 1.0;
      if (fmax(v33, v34) != 1.0)
      {
        if (v33 <= v34)
        {
          v31 = v23 * (v31 / v32);
          v32 = v23;
        }
        else
        {
          v32 = v21 * (v32 / v31);
          v31 = v21;
        }
      }
      v37 = PKSizeCeilToPixelWithScale(v31, v32, a6);
      objc_msgSend((id)v20, "drawInRect:inContext:", BitmapContext, PKSizeAlignedInRectWithScale(0x100000001uLL, v37, v38, v30, v29, v21, v23, a6));
    }
    else if (v19)
    {
      if (CGPDFDocumentGetNumberOfPages(v19))
      {
        Page = CGPDFDocumentGetPage(v19, 1uLL);
        if (Page)
          _DrawPDFPageInRect(BitmapContext, Page, v30, v29, v21, v23);
      }
      CGPDFDocumentRelease(v19);
    }
    PKGetImageFromBitmapContext(BitmapContext, a6);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    CGContextRelease(BitmapContext);

  }
  else
  {
    v35 = 0;
  }

  return v35;
}

id PKPassFrontFaceDynamicLayerEmitterImage(void *a1, void *a2, void *a3, void *a4, double a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  const __CFURL *v14;
  const __CFURL *v15;
  CGPDFDocument *v16;
  uint64_t v17;
  double v18;
  double v19;
  CGFloat v20;
  CGFloat v21;
  CGContext *BitmapContext;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  CGPDFPage *Page;
  CGPDFPage *v29;
  double width;
  double height;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGRect BoxRect;

  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  if (a5 == 0.0)
    a5 = PKScreenScale();
  v13 = objc_msgSend(v9, "passStyle");
  objc_msgSend(v11, "URLForResource:withExtension:", v10, CFSTR("pdf"));
  v14 = (const __CFURL *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    v16 = CGPDFDocumentCreateWithURL(v14);
    v17 = 0;
  }
  else
  {
    +[PKImage imageNamed:inBundle:screenScale:suffix:](PKImage, "imageNamed:inBundle:screenScale:suffix:", v10, v11, v12, a5);
    v17 = objc_claimAutoreleasedReturnValue();
    v16 = 0;
  }
  if ((unint64_t)v16 | v17)
  {
    if (v13 == 6)
      v18 = 85.0;
    else
      v18 = *(double *)(MEMORY[0x1E0C9D820] + 8);
    if (v13 == 6)
      v19 = 85.0;
    else
      v19 = *MEMORY[0x1E0C9D820];
    v21 = *MEMORY[0x1E0C9D538];
    v20 = *(double *)(MEMORY[0x1E0C9D538] + 8);
    BitmapContext = _CreateBitmapContext(0, 1, 0, v19, v18, a5);
    if (v17)
    {
      objc_msgSend((id)v17, "size");
      v25 = v19 / v23;
      if (v23 == 0.0)
        v25 = 1.0;
      v26 = v18 / v24;
      if (v24 == 0.0)
        v26 = 1.0;
      if (fmin(v25, v26) != 1.0)
      {
        if (v25 >= v26)
        {
          v23 = v18 * (v23 / v24);
          v24 = v18;
        }
        else
        {
          v24 = v19 * (v24 / v23);
          v23 = v19;
        }
      }
      v34 = PKSizeCeilToPixelWithScale(v23, v24, a5);
      objc_msgSend((id)v17, "drawInRect:inContext:", BitmapContext, PKSizeAlignedInRectWithScale(0x100000001uLL, v34, v35, v21, v20, v19, v18, a5));
    }
    else if (v16)
    {
      if (CGPDFDocumentGetNumberOfPages(v16))
      {
        Page = CGPDFDocumentGetPage(v16, 1uLL);
        if (Page)
        {
          v29 = Page;
          BoxRect = CGPDFPageGetBoxRect(Page, kCGPDFMediaBox);
          width = BoxRect.size.width;
          height = BoxRect.size.height;
          v32 = v19 / BoxRect.size.width;
          if (width == 0.0)
            v32 = 1.0;
          v33 = v18 / BoxRect.size.height;
          if (height == 0.0)
            v33 = 1.0;
          if (fmin(v32, v33) != 1.0)
          {
            if (v32 >= v33)
            {
              width = v18 * (width / height);
              height = v18;
            }
            else
            {
              height = v19 * (height / width);
              width = v19;
            }
          }
          v36 = PKSizeCeilToPixelWithScale(width, height, a5);
          v38 = PKSizeAlignedInRectWithScale(0x100000001uLL, v36, v37, v21, v20, v19, v18, a5);
          _DrawPDFPageInRect(BitmapContext, v29, v38, v39, v40, v41);
        }
      }
      CGPDFDocumentRelease(v16);
    }
    PKGetImageFromBitmapContext(BitmapContext, a5);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    CGContextRelease(BitmapContext);
  }
  else
  {
    v27 = 0;
  }

  return v27;
}

PKImage *PKPassPartialFrontFaceImage(void *a1, void *a2)
{
  id v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  void *v12;
  id v13;
  CGImage *v14;
  CGImageRef v15;
  CGImageRef v16;
  PKImage *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  CGRect v30;
  CGRect v31;

  v3 = a1;
  v4 = a2;
  objc_msgSend(v4, "passStyle");
  objc_msgSend(v3, "size");
  v6 = v5;
  v8 = v7;
  v9 = objc_msgSend(v3, "scale");
  v11 = v10;
  v12 = (void *)MEMORY[0x19400CFE8](v9);
  v13 = objc_retainAutorelease(v3);
  v14 = (CGImage *)objc_msgSend(v13, "imageRef");
  v30.origin.x = v11 * 0.0;
  v30.size.width = v6 * v11;
  v30.size.height = v11 * 84.0;
  v30.origin.y = v11 * 0.0;
  v15 = CGImageCreateWithImageInRect(v14, v30);
  if (v15)
  {
    v16 = v15;
    v17 = -[PKImage initWithCGImage:scale:orientation:]([PKImage alloc], "initWithCGImage:scale:orientation:", v15, objc_msgSend(v13, "orientation"), v11);
    objc_msgSend(v13, "capInsets");
    v21 = v18;
    v23 = v22;
    v24 = v19;
    v25 = v20;
    if (v22 != 0.0 || v18 != 0.0 || v20 != 0.0 || v19 != 0.0)
    {
      v31.origin.x = 0.0;
      v31.origin.y = 0.0;
      v31.size.width = v6;
      v31.size.height = 84.0;
      v26 = v8 - CGRectGetMaxY(v31);
      if (v26 >= v24)
        v27 = 0.0;
      else
        v27 = v24 - v26;
      -[PKImage resizableImageByTilingWithCapInsets:](v17, "resizableImageByTilingWithCapInsets:", v21, v23, v27, v25);
      v28 = objc_claimAutoreleasedReturnValue();

      v17 = (PKImage *)v28;
    }
    CFRelease(v16);
  }
  else
  {
    v17 = 0;
  }
  objc_autoreleasePoolPop(v12);

  return v17;
}

id PKPassMaskImageForPassStyle(unint64_t a1)
{
  unint64_t v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  void *v7;

  if (a1 > 9)
  {
    v5 = 24.0;
    v3 = 17.0;
    v4 = 80.0;
    v2 = 1;
  }
  else
  {
    v2 = qword_190455E70[a1];
    v3 = dbl_190455EC0[a1];
    v4 = dbl_190455F10[a1];
    v5 = dbl_190455F60[a1];
  }
  _MaskImageForEdgeStyle(v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "resizableImageByTilingWithCapInsets:", v4, v5, v3, v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

double PKPaymentStyleCornerRadius()
{
  return 11.0;
}

double PKPaymentStyleScaledCornerRadius(double a1)
{
  double v2;

  PKGetMaxPassWidth();
  if (v2 <= 0.0)
    v2 = a1;
  return a1 / v2 * 11.0;
}

id _PANStringAttributes(uint64_t a1, int a2, CGFloat a3)
{
  CTParagraphStyleRef v6;
  CTFontRef UIFontForLanguage;
  id v8;
  char v10;
  CTParagraphStyleSetting settings;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = 4;
  settings.spec = kCTParagraphStyleSpecifierLineBreakMode;
  settings.valueSize = 1;
  settings.value = &v10;
  v6 = CTParagraphStyleCreate(&settings, 1uLL);
  UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontSystem, a3, 0);
  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", v6, *MEMORY[0x1E0CA85A0]);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", a1, *MEMORY[0x1E0CA8550]);
  objc_msgSend(v8, "setObject:forKeyedSubscript:", UIFontForLanguage, *MEMORY[0x1E0CA8188]);
  if (a2)
    objc_msgSend(v8, "setObject:forKeyedSubscript:", &unk_1E2C3F4A8, *MEMORY[0x1E0CA8588]);
  CFRelease(UIFontForLanguage);
  CFRelease(v6);
  return v8;
}

__CFString *_PKPaymentPassDefaultSuffixFromDictionary(void *a1)
{
  void *v1;
  void *v2;
  __CFString *v3;
  __CFString *v4;

  _PKPaymentPassNetworkIdentifierFromDictionary(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  v3 = CFSTR("●●●●");
  if (v1 && objc_msgSend(v1, "integerValue") == 1)
    v3 = CFSTR("●●●●●");
  v4 = v3;

  return v4;
}

void CGContextDrawSubimage(CGContext *a1, CGImageRef image, int a3, int a4, int a5, int a6, int a7, int a8, double a9, double a10, double a11, double a12, CGFloat a13, CGFloat a14, CGFloat a15, CGFloat a16, uint64_t a17)
{
  CGImageRef v25;
  CGImage *v26;
  CGFloat MaxY;
  uint64_t v28;
  CGFloat v29;
  double v30;
  double v31;
  CGFloat v32;
  CGFloat v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v34.origin.x = a9 * *(double *)&a17;
  v34.origin.y = a10 * *(double *)&a17;
  v34.size.width = a11 * *(double *)&a17;
  v34.size.height = a12 * *(double *)&a17;
  v25 = CGImageCreateWithImageInRect(image, v34);
  if (v25)
  {
    v26 = v25;
    CGContextSaveGState(a1);
    v35.origin.x = a13;
    v35.origin.y = a14;
    v35.size.width = a15;
    v35.size.height = a16;
    CGContextClipToRect(a1, v35);
    v36.origin.x = a13;
    v36.origin.y = a14;
    v36.size.width = a15;
    v36.size.height = a16;
    MaxY = CGRectGetMaxY(v36);
    CGContextTranslateCTM(a1, 0.0, MaxY);
    CGContextScaleCTM(a1, 1.0, -1.0);
    v28 = 0;
    v29 = a13;
    if (a3)
    {
      v30 = a11;
      v31 = a12;
      CGContextDrawTiledImage(a1, *(CGRect *)&v29, v26);
    }
    else
    {
      v32 = a15;
      v33 = a16;
      CGContextDrawImage(a1, *(CGRect *)&v29, v26);
    }
    CGContextRestoreGState(a1);
    CGImageRelease(v26);
  }
}

void make1DGaussianKernel(unint64_t a1, float *a2, float a3)
{
  unint64_t v3;
  float *v4;
  unint64_t v5;
  double v6;
  double v7;
  long double v8;
  float v9;
  float v10;

  v3 = a1;
  if ((a1 & 1) != 0)
  {
    v4 = a2;
    if (a1 == 1)
    {
      *a2 = 1.0;
    }
    else
    {
      v5 = 0;
      v6 = (float)((float)(a3 * a3) + (float)(a3 * a3));
      v7 = 0.0;
      do
      {
        v8 = exp((float)-(float)((float)((float)v5 - (float)(v3 >> 1)) * (float)((float)v5 - (float)(v3 >> 1))) / v6);
        v9 = v8;
        v4[v5] = v9;
        v7 = v7 + v8;
        ++v5;
      }
      while (v3 != v5);
      do
      {
        v10 = *v4 / v7;
        *v4++ = v10;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    __break(1u);
  }
}

__CFString *PKFamilyMemberTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2AD85F8[a1];
}

uint64_t PKFamilyMemberTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  uint64_t v3;
  __CFString *v4;
  __CFString *v5;
  uint64_t v6;
  __CFString *v7;
  __CFString *v8;
  uint64_t v9;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("adult"))
  {
    v3 = 0;
    goto LABEL_12;
  }
  if (!v1)
    goto LABEL_8;
  v3 = -[__CFString caseInsensitiveCompare:](v1, "caseInsensitiveCompare:", CFSTR("adult"));

  if (v3)
  {
    v4 = v2;
    if (v4 == CFSTR("teen")
      || (v5 = v4,
          v6 = -[__CFString caseInsensitiveCompare:](v4, "caseInsensitiveCompare:", CFSTR("teen")),
          v5,
          !v6))
    {
      v3 = 1;
      goto LABEL_12;
    }
    v7 = v5;
    if (v7 == CFSTR("child")
      || (v8 = v7,
          v9 = -[__CFString caseInsensitiveCompare:](v7, "caseInsensitiveCompare:", CFSTR("child")),
          v8,
          !v9))
    {
      v3 = 2;
      goto LABEL_12;
    }
LABEL_8:
    v3 = -1;
  }
LABEL_12:

  return v3;
}

unint64_t PKFamilyMemberTypeFromFAMemberType(unint64_t result)
{
  if (result >= 3)
    return -1;
  return result;
}

void sub_1902943A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 128), 8);
  _Unwind_Resume(a1);
}

PKCatalog *_CatalogFromDictionaries(void *a1, void *a2)
{
  id v3;
  id v4;
  PKCatalog *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  PKCatalog *v14;
  PKCatalog *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t j;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  uint64_t v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = objc_alloc_init(PKCatalog);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v3, "PKDictionaryForKey:", CFSTR("v1"));
    v6 = objc_claimAutoreleasedReturnValue();
    objc_msgSend(v4, "PKDictionaryForKey:", CFSTR("v1"));
    v7 = objc_claimAutoreleasedReturnValue();
    if (v6 | v7)
    {
      v29 = (void *)v6;
      -[PKCatalog groups](v5, "groups");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v28 = v7;
      objc_msgSend((id)v7, "PKArrayContaining:forKey:", objc_opt_class(), CFSTR("groups"));
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v39 = 0u;
      v9 = (id)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
      if (v10)
      {
        v11 = v10;
        v12 = *(_QWORD *)v37;
        while (2)
        {
          for (i = 0; i != v11; ++i)
          {
            if (*(_QWORD *)v37 != v12)
              objc_enumerationMutation(v9);
            _GroupFromDictionary(*(void **)(*((_QWORD *)&v36 + 1) + 8 * i));
            v14 = (PKCatalog *)objc_claimAutoreleasedReturnValue();
            v15 = v14;
            if (!v14)
            {
              v17 = v9;
              v7 = v28;
              v6 = (uint64_t)v29;
              goto LABEL_32;
            }
            -[PKCatalog setIsUbiquitous:](v14, "setIsUbiquitous:", 0);
            objc_msgSend(v8, "addObject:", v15);

          }
          v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
          if (v11)
            continue;
          break;
        }
      }

      v6 = (uint64_t)v29;
      objc_msgSend(v29, "PKArrayContaining:forKey:", objc_opt_class(), CFSTR("groups"));
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      if (v16)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v17 = v16;
        v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
        if (v18)
        {
          v19 = v18;
          v20 = *(_QWORD *)v33;
          while (2)
          {
            for (j = 0; j != v19; ++j)
            {
              if (*(_QWORD *)v33 != v20)
                objc_enumerationMutation(v17);
              _GroupFromDictionary(*(void **)(*((_QWORD *)&v32 + 1) + 8 * j));
              v22 = (void *)objc_claimAutoreleasedReturnValue();
              if (!v22)
              {
                v15 = 0;
                v25 = v17;
                v7 = v28;
                v6 = (uint64_t)v29;
                goto LABEL_31;
              }
              v23 = v22;
              objc_msgSend(v22, "setIsUbiquitous:", 1);
              v30[0] = MEMORY[0x1E0C809B0];
              v30[1] = 3221225472;
              v30[2] = ___CatalogFromDictionaries_block_invoke;
              v30[3] = &unk_1E2AD8640;
              v24 = v23;
              v31 = v24;
              if (objc_msgSend(v8, "indexOfObjectPassingTest:", v30) == 0x7FFFFFFFFFFFFFFFLL)
                objc_msgSend(v8, "addObject:", v24);

            }
            v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v32, v40, 16);
            if (v19)
              continue;
            break;
          }
        }

        v6 = (uint64_t)v29;
        objc_msgSend(v29, "PKDateForKey:", CFSTR("timestamp"));
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        if (v25)
        {
          -[PKCatalog setTimestamp:](v5, "setTimestamp:", v25);
        }
        else
        {
          objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
          v26 = (void *)objc_claimAutoreleasedReturnValue();
          -[PKCatalog setTimestamp:](v5, "setTimestamp:", v26);

        }
        v7 = v28;
        v15 = v5;
LABEL_31:

      }
      else
      {
        v17 = 0;
        v15 = 0;
        v7 = v28;
      }
LABEL_32:

    }
    else
    {
      v15 = 0;
    }

  }
  else
  {
    v15 = 0;
  }

  return v15;
}

id _DictionaryFromCatalogForUbiquity(void *a1, int a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  _QWORD v28[2];
  const __CFString *v29;
  void *v30;
  _BYTE v31[128];
  const __CFString *v32;
  _QWORD v33[3];

  v33[1] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = objc_alloc(MEMORY[0x1E0C99DE8]);
  objc_msgSend(v3, "groups");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithCapacity:", objc_msgSend(v5, "count"));

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = v3;
  objc_msgSend(v3, "groups");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v9; ++i)
      {
        if (*(_QWORD *)v24 != v10)
          objc_enumerationMutation(v7);
        v12 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * i);
        if (objc_msgSend(v12, "isUbiquitous") == a2)
        {
          v32 = CFSTR("uniqueIDs");
          objc_msgSend(v12, "uniqueIDs");
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          v33[0] = v13;
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v33, &v32, 1);
          v14 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v6, "addObject:", v14);
        }
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v9);
  }

  objc_msgSend(v22, "timestamp");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v15;
  if (v15)
  {
    v17 = v15;
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0C99D68], "distantPast");
    v17 = (id)objc_claimAutoreleasedReturnValue();
  }
  v18 = v17;

  v28[1] = v18;
  v29 = CFSTR("v1");
  v27[0] = CFSTR("groups");
  v27[1] = CFSTR("timestamp");
  v28[0] = v6;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 2);
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = v19;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v30, &v29, 1);
  v20 = (void *)objc_claimAutoreleasedReturnValue();

  return v20;
}

PKCatalogGroup *_GroupFromDictionary(void *a1)
{
  id v1;
  PKCatalogGroup *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  void *v10;
  PKCatalogGroup *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc_init(PKCatalogGroup);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend(v1, "PKArrayContaining:forKey:", objc_opt_class(), CFSTR("uniqueIDs"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = v3;
    if (v3)
    {
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)v14;
        do
        {
          for (i = 0; i != v6; ++i)
          {
            if (*(_QWORD *)v14 != v7)
              objc_enumerationMutation(v4);
            v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * i);
            -[PKCatalogGroup uniqueIDs](v2, "uniqueIDs");
            v10 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v10, "addObject:", v9);

          }
          v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        }
        while (v6);
      }
      v11 = v2;
    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

BOOL PKShareableCredentialsSupportsHarmony()
{
  return PKSecureElementIsAvailable() != 0;
}

uint64_t PKAggregateSharingStatusForShareableCredentials(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _BOOL4 v23;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _QWORD v30[5];
  _QWORD v31[7];

  v31[5] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = objc_alloc(MEMORY[0x1E0C99E08]);
  v30[0] = &unk_1E2C3F508;
  v30[1] = &unk_1E2C3F538;
  v31[0] = &unk_1E2C3F520;
  v31[1] = &unk_1E2C3F520;
  v30[2] = &unk_1E2C3F550;
  v30[3] = &unk_1E2C3F568;
  v31[2] = &unk_1E2C3F520;
  v31[3] = &unk_1E2C3F520;
  v30[4] = &unk_1E2C3F580;
  v31[4] = &unk_1E2C3F520;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v31, v30, 5);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v2, "initWithDictionary:", v3);

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = v1;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v26;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v10, "status", (_QWORD)v25));
        v11 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectForKey:", v11);
        v12 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", objc_msgSend(v12, "integerValue") + 1);
        v13 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", objc_msgSend(v10, "status"));
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "setObject:forKey:", v13, v14);

      }
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v25, v29, 16);
    }
    while (v7);
  }

  objc_msgSend(v4, "objectForKey:", &unk_1E2C3F538);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = objc_msgSend(v15, "integerValue");

  if (v16 <= 0)
  {
    objc_msgSend(v4, "objectForKey:", &unk_1E2C3F568);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "integerValue");

    if (v19 <= 0)
    {
      objc_msgSend(v4, "objectForKey:", &unk_1E2C3F580);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "integerValue");

      if (v21 <= 0)
      {
        objc_msgSend(v4, "objectForKey:", &unk_1E2C3F550);
        v22 = (void *)objc_claimAutoreleasedReturnValue();
        v23 = objc_msgSend(v22, "integerValue") > 0;

        v17 = 4 * v23;
      }
      else
      {
        v17 = 3;
      }
    }
    else
    {
      v17 = 2;
    }
  }
  else
  {
    v17 = 1;
  }

  return v17;
}

void sub_190296C30(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

const __CFString *PKCloudStoreContainerChangeEventTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x38)
    return CFSTR("unknown");
  else
    return off_1E2AD8730[a1 - 1];
}

__CFString *PKConsistencyCheckCleanupActionsToString(uint64_t a1)
{
  char v1;
  id v2;
  void *v3;
  __CFString *v4;

  if (!a1)
  {
    v4 = CFSTR("No Actions Needed");
    return v4;
  }
  v1 = a1;
  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((v1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("Sync With TSM"));
    if ((v1 & 2) == 0)
    {
LABEL_4:
      if ((v1 & 4) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  else if ((v1 & 2) == 0)
  {
    goto LABEL_4;
  }
  objc_msgSend(v3, "addObject:", CFSTR("Sync With Broker"));
  if ((v1 & 4) == 0)
  {
LABEL_5:
    if ((v1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_16;
  }
LABEL_15:
  objc_msgSend(v3, "addObject:", CFSTR("Register Credential"));
  if ((v1 & 8) == 0)
  {
LABEL_6:
    if ((v1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_17;
  }
LABEL_16:
  objc_msgSend(v3, "addObject:", CFSTR("Delete"));
  if ((v1 & 0x10) == 0)
  {
LABEL_7:
    if ((v1 & 0x20) == 0)
      goto LABEL_8;
LABEL_18:
    objc_msgSend(v3, "addObject:", CFSTR("suspend"));
    if ((v1 & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_17:
  objc_msgSend(v3, "addObject:", CFSTR("activate"));
  if ((v1 & 0x20) != 0)
    goto LABEL_18;
LABEL_8:
  if ((v1 & 0x40) != 0)
LABEL_9:
    objc_msgSend(v3, "addObject:", CFSTR("upload key material"));
LABEL_10:
  objc_msgSend(v3, "componentsJoinedByString:", CFSTR(", "));
  v4 = (__CFString *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void EndTrackingConsistencyCheck(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  uint8_t v7[16];
  uint8_t buf[16];

  v1 = a1;
  if (!v1)
    goto LABEL_12;
  os_unfair_lock_lock((os_unfair_lock_t)&_MergedGlobals_274);
  objc_msgSend((id)qword_1ECF22AE8, "objectForKeyedSubscript:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "unsignedIntegerValue");

  if (!v3)
  {
    PKLogFacilityTypeGetObject(0);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_18FC92000, v5, OS_LOG_TYPE_ERROR, "PKSecureElementConsistencyChecker: Consistency Check Count Unbalanced", buf, 2u);
    }

    goto LABEL_8;
  }
  if (v3 == 1)
  {
LABEL_8:
    objc_msgSend((id)qword_1ECF22AE8, "setObject:forKeyedSubscript:", 0, v1);
    goto LABEL_9;
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v3 - 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)qword_1ECF22AE8, "setObject:forKeyedSubscript:", v4, v1);

LABEL_9:
  PKLogFacilityTypeGetObject(6uLL);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_18FC92000, v6, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: Ending consistency check...", v7, 2u);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&_MergedGlobals_274);
LABEL_12:

}

PKSecureElementConsistencyCheckResult *CheckConsistencyWithDeviceState(void *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  PKSECredentialAddress *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  PKSEConsistencyCheckPassCredential *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  PKSEConsistencyCheckPassCredential *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  PKSECredentialAddress *v43;
  void *v44;
  PKSECredentialAddress *v45;
  PKSEConsistencyCheckPassCredential *v46;
  void *v47;
  PKSEConsistencyCheckResultCollector *v48;
  PKSecureElementConsistencyCheckResult *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  PKSecureElementConsistencyCheckResult *v53;
  void *v55;
  PKSEConsistencyCheckResultCollector *v56;
  void *v57;
  NSObject *v58;
  id v59;
  id v60;
  id obj;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  _QWORD *v68;
  _QWORD v69[4];
  PKSEConsistencyCheckResultCollector *v70;
  _QWORD v71[2];
  void (*v72)(uint64_t, void *, uint64_t);
  void *v73;
  PKSEConsistencyCheckResultCollector *v74;
  id v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[128];
  void *v89;
  void *v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  id v94;
  _BYTE v95[24];
  void *v96;
  id v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v59 = a2;
  objc_msgSend(v3, "deviceCredentials");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  objc_msgSend(v4, "pk_groupDictionaryByApplyingBlock:", &__block_literal_global_191_0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = MEMORY[0x1E0C809B0];
  *(_QWORD *)v95 = MEMORY[0x1E0C809B0];
  *(_QWORD *)&v95[8] = 3221225472;
  *(_QWORD *)&v95[16] = __CreateDeviceCredentialMap_block_invoke_2;
  v96 = &unk_1E2AD8BA0;
  v8 = v5;
  v97 = v8;
  objc_msgSend(v6, "enumerateKeysAndObjectsUsingBlock:", v95);

  PKLogFacilityTypeGetObject(6uLL);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218242;
    v92 = objc_msgSend(v4, "count");
    v93 = 2112;
    v94 = v8;
    _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: created mapping of %lu device credentials.\n %@", buf, 0x16u);
  }

  v71[0] = v7;
  v71[1] = 3221225472;
  v72 = __CheckConsistencyWithDeviceState_block_invoke;
  v73 = &unk_1E2AD8AC8;
  v56 = objc_alloc_init(PKSEConsistencyCheckResultCollector);
  v74 = v56;
  v60 = v8;
  v75 = v60;
  v10 = v3;
  v68 = v71;
  objc_msgSend(v10, "devicePaymentApplications");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "passCredentials");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "passIsoBlobHashForCredentialIdentifier");
  v66 = (void *)objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v13 = objc_msgSend(v11, "count");
    v14 = objc_msgSend(v12, "count");
    *(_DWORD *)v95 = 134218240;
    *(_QWORD *)&v95[4] = v13;
    *(_WORD *)&v95[12] = 2048;
    *(_QWORD *)&v95[14] = v14;
    _os_log_impl(&dword_18FC92000, v9, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: Evaluating %lu local payment applications and %lu subcredentials against the device credentials.", v95, 0x16u);
  }
  v55 = v12;
  v57 = v10;
  v58 = v9;

  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  obj = v11;
  v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v95, 16);
  if (v63)
  {
    v62 = *(_QWORD *)v85;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v85 != v62)
          objc_enumerationMutation(obj);
        v64 = v15;
        v16 = *(void **)(*((_QWORD *)&v84 + 1) + 8 * v15);
        v17 = [PKSECredentialAddress alloc];
        objc_msgSend(v16, "applicationIdentifier");
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = -[PKSECredentialAddress initWithType:identifier:](v17, "initWithType:identifier:", 0, v18);

        v20 = objc_msgSend(v16, "paymentType");
        v21 = objc_msgSend(v16, "paymentNetworkIdentifier");
        v67 = (void *)v19;
        v22 = v20;
        v23 = -[PKSEConsistencyCheckPassCredential initWithPassCredential:address:paymentMethod:]([PKSEConsistencyCheckPassCredential alloc], "initWithPassCredential:address:paymentMethod:", v16, v19, v20);
        v72((uint64_t)v68, v23, v21 != 133);
        v24 = objc_msgSend(v16, "paymentNetworkIdentifier");
        objc_msgSend(v16, "subcredentials");
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v80 = 0u;
        v81 = 0u;
        v82 = 0u;
        v83 = 0u;
        v65 = v25;
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v80, buf, 16);
        if (v26)
        {
          v27 = v26;
          v28 = *(_QWORD *)v81;
          do
          {
            v29 = 0;
            v30 = v23;
            do
            {
              if (*(_QWORD *)v81 != v28)
                objc_enumerationMutation(v65);
              v31 = *(void **)(*((_QWORD *)&v80 + 1) + 8 * v29);
              objc_msgSend(v31, "setCredentialType:", v24);
              objc_msgSend(v31, "identifier");
              v32 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v67, "addressByAppendingType:identifier:", 1, v32);
              v33 = (void *)objc_claimAutoreleasedReturnValue();

              v23 = -[PKSEConsistencyCheckPassCredential initWithPassCredential:address:paymentMethod:]([PKSEConsistencyCheckPassCredential alloc], "initWithPassCredential:address:paymentMethod:", v31, v33, v22);
              objc_msgSend(v31, "identifier");
              v34 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v66, "objectForKeyedSubscript:", v34);
              v35 = (void *)objc_claimAutoreleasedReturnValue();

              if (v35)
              {
                v89 = &unk_1E2C3F598;
                v90 = v35;
                objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v90, &v89, 1);
                v36 = (void *)objc_claimAutoreleasedReturnValue();
                -[PKSEConsistencyCheckPassCredential setKeyMaterialHashForDeviceCredentialType:](v23, "setKeyMaterialHashForDeviceCredentialType:", v36);

              }
              v72((uint64_t)v68, v23, v21 != 133);

              ++v29;
              v30 = v23;
            }
            while (v27 != v29);
            v27 = objc_msgSend(v65, "countByEnumeratingWithState:objects:count:", &v80, buf, 16);
          }
          while (v27);
        }

        v15 = v64 + 1;
      }
      while (v64 + 1 != v63);
      v63 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v84, v95, 16);
    }
    while (v63);
  }

  v79 = 0u;
  v77 = 0u;
  v78 = 0u;
  v76 = 0u;
  v37 = v55;
  v38 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
  if (v38)
  {
    v39 = v38;
    v40 = *(_QWORD *)v77;
    do
    {
      for (i = 0; i != v39; ++i)
      {
        if (*(_QWORD *)v77 != v40)
          objc_enumerationMutation(v37);
        v42 = *(void **)(*((_QWORD *)&v76 + 1) + 8 * i);
        v43 = [PKSECredentialAddress alloc];
        objc_msgSend(v42, "identifier");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        v45 = -[PKSECredentialAddress initWithType:identifier:](v43, "initWithType:identifier:", 1, v44);

        v46 = -[PKSEConsistencyCheckPassCredential initWithPassCredential:address:paymentMethod:]([PKSEConsistencyCheckPassCredential alloc], "initWithPassCredential:address:paymentMethod:", v42, v45, 0);
        v72((uint64_t)v68, v46, 0);

      }
      v39 = objc_msgSend(v37, "countByEnumeratingWithState:objects:count:", &v76, v88, 16);
    }
    while (v39);
  }

  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v95 = 138412290;
    *(_QWORD *)&v95[4] = v60;
    _os_log_impl(&dword_18FC92000, v58, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: evaluating orphaned device credentials.\n %@", v95, 0xCu);
  }

  objc_msgSend(v60, "allValues");
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v69[0] = MEMORY[0x1E0C809B0];
  v69[1] = 3221225472;
  v69[2] = __CheckConsistencyWithDeviceState_block_invoke_186;
  v69[3] = &unk_1E2AD8B18;
  v48 = v56;
  v70 = v48;
  objc_msgSend(v47, "enumerateObjectsUsingBlock:", v69);

  v49 = [PKSecureElementConsistencyCheckResult alloc];
  v50 = -[PKSEConsistencyCheckResultCollector cleanupActions](v48, "cleanupActions");
  -[PKSEConsistencyCheckResultCollector resultsSummary](v48, "resultsSummary");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKSEConsistencyCheckResultCollector requestedActions](v48, "requestedActions");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = -[PKSecureElementConsistencyCheckResult initWithCleanupActions:resultsSummary:requestedActions:registeredRegions:](v49, "initWithCleanupActions:resultsSummary:requestedActions:registeredRegions:", v50, v51, v52, v59);

  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v95 = 138412290;
    *(_QWORD *)&v95[4] = v53;
    _os_log_impl(&dword_18FC92000, v58, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: returning result: %@", v95, 0xCu);
  }

  return v53;
}

void sub_19029D650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t CleanupActionsForCredentialPair(void *a1, void *a2, uint64_t a3, _QWORD *a4)
{
  __CFString *v7;
  __CFString *v8;
  void *v9;
  int v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  const __CFString *v30;
  const __CFString *v31;
  const __CFString *v32;
  __CFString *v33;
  NSObject *v34;
  _BOOL4 v35;
  __CFString *v36;
  id v37;
  void *v38;
  _QWORD *v40;
  uint8_t buf[4];
  __CFString *v42;
  __int16 v43;
  __CFString *v44;
  __int16 v45;
  __CFString *v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if ((-[__CFString containsSubkeys](v7, "containsSubkeys") & 1) != 0
    || (-[__CFString appletProperties](v8, "appletProperties"),
        v9 = (void *)objc_claimAutoreleasedReturnValue(),
        v10 = objc_msgSend(v9, "isContainer"),
        v9,
        v10))
  {
    PKLogFacilityTypeGetObject(6uLL);
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v42 = v7;
      v43 = 2112;
      v44 = v8;
      _os_log_impl(&dword_18FC92000, (os_log_t)v11, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: Skipping consistency check credential because credential is a container (local: %@, device: %@)", buf, 0x16u);
    }
    v12 = 0;
    goto LABEL_86;
  }
  v40 = a4;
  if (a3 == 2)
    v12 = 8;
  else
    v12 = 1;
  if (a3 == 2)
    v13 = 16;
  else
    v13 = 3;
  if (a3 == 2)
    v14 = 64;
  else
    v14 = 1;
  if (a3 == 2)
    v15 = 64;
  else
    v15 = 3;
  v16 = -[__CFString state](v7, "state");
  v17 = -[__CFString state](v8, "state");
  v18 = v17;
  if (v7 && v8)
  {
    v12 = 0;
    v11 = &stru_1E2ADF4C0;
    switch(v16)
    {
      case 0uLL:
      case 5uLL:
      case 0xAuLL:
        -[__CFString appletProperties](v8, "appletProperties");
        v19 = (void *)objc_claimAutoreleasedReturnValue();
        v20 = objc_msgSend(v19, "isLocked");

        if ((v20 & 1) != 0)
        {
          v11 = CFSTR("removed pass and locked applet");
          goto LABEL_65;
        }
        switch(v18)
        {
          case 0:
          case 1:
            v11 = CFSTR("removed pass and active device credential");
            goto LABEL_65;
          case 2:
            v12 = 8 * (a3 == 2);
            v11 = CFSTR("removed pass and suspended device credential");
            break;
          case 3:
          case 4:
            v11 = CFSTR("removed pass and incomplete device credential");
            goto LABEL_65;
          case 5:
            v12 = 0;
            v11 = CFSTR("removed pass and empty device credential");
            break;
          case 6:
            v11 = CFSTR("removed pass and frozen device credential");
            goto LABEL_98;
          default:
            goto LABEL_48;
        }
        break;
      case 1uLL:
      case 4uLL:
      case 0xFuLL:
        switch(v17)
        {
          case 0:
            goto LABEL_42;
          case 1:
            -[__CFString keyMaterialHashForDeviceCredentialType](v7, "keyMaterialHashForDeviceCredentialType");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", a3);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v21, "objectForKeyedSubscript:", v22);
            v23 = (void *)objc_claimAutoreleasedReturnValue();

            -[__CFString keyMaterialHash](v8, "keyMaterialHash");
            v24 = objc_claimAutoreleasedReturnValue();
            v25 = (void *)v24;
            if (v23 && v24 && !objc_msgSend(v23, "isEqual:", v24))
            {
              v11 = CFSTR("key material hashes don't match");
              v12 = 2;
            }
            else
            {
              v12 = 0;
              v11 = CFSTR("active pass state and active credential state");
            }

            goto LABEL_66;
          case 2:
          case 5:
          case 6:
            goto LABEL_39;
          case 3:
            v11 = CFSTR("active pass but invalid device credential");
            goto LABEL_29;
          case 4:
            if ((-[__CFString shouldRegister](v8, "shouldRegister") & 1) == 0)
            {
LABEL_39:
              v11 = CFSTR("active pass state, but non active credential state");
              goto LABEL_40;
            }
            v11 = CFSTR("active pass and untracked device credential");
            break;
          default:
            goto LABEL_49;
        }
LABEL_92:
        v12 = 4;
        break;
      case 2uLL:
      case 3uLL:
        switch(v17)
        {
          case 0:
            goto LABEL_42;
          case 1:
            v11 = CFSTR("personalizing pass but active device credential");
            v12 = 2;
            goto LABEL_66;
          case 2:
            v11 = CFSTR("personalizing pass but suspended device credential");
LABEL_40:
            v12 = v13;
            goto LABEL_66;
          case 3:
            v11 = CFSTR("personalizing pass but invalid device credential");
            v12 = v14;
            goto LABEL_66;
          case 4:
            if ((-[__CFString shouldRegister](v8, "shouldRegister") & 1) == 0)
              goto LABEL_93;
            v11 = CFSTR("personalizing pass and untracked device credential");
            goto LABEL_92;
          case 5:
LABEL_93:
            v11 = CFSTR("personalizing pass but incomplete device credential");
            goto LABEL_98;
          case 6:
            v11 = CFSTR("personalizing pass but suspended device credential");
LABEL_98:
            v12 = 1;
            break;
          default:
            goto LABEL_49;
        }
        break;
      case 6uLL:
      case 7uLL:
      case 8uLL:
      case 9uLL:
        switch(v17)
        {
          case 0:
LABEL_42:
            v11 = CFSTR("device credential should not be in an unknown state");
            goto LABEL_65;
          case 1:
            v12 = 32 * (a3 == 2);
            v11 = CFSTR("suspended pass state and active credential state");
            goto LABEL_66;
          case 2:
          case 3:
          case 5:
          case 6:
            goto LABEL_22;
          case 4:
            if ((-[__CFString shouldRegister](v8, "shouldRegister") & 1) != 0)
            {
              v11 = CFSTR("suspended pass and untracked device credential");
              goto LABEL_92;
            }
LABEL_22:
            if (a3 == 2)
              v12 = 0;
            else
              v12 = 3;
            v11 = CFSTR("suspended pass state, but non active credential state");
            break;
          default:
LABEL_49:
            v12 = 0;
            goto LABEL_66;
        }
        break;
      default:
        goto LABEL_66;
    }
    goto LABEL_66;
  }
  if (v7)
  {
    if (v16 < 0xA)
      goto LABEL_28;
    if (v16 == 10)
    {
      v12 = 0;
      v11 = CFSTR("removed pass and no device credential");
      goto LABEL_66;
    }
    if (v16 == 15)
    {
LABEL_28:
      v11 = CFSTR("active pass but no device credential");
LABEL_29:
      v12 = v15;
      goto LABEL_66;
    }
  }
  else if (v8)
  {
    switch(v17)
    {
      case 0:
      case 1:
        v11 = CFSTR("no pass and active device credential");
LABEL_65:
        v12 = 8;
        break;
      case 2:
      case 3:
      case 5:
        if (a3 == 2)
          v12 = 8;
        else
          v12 = a3 == 1;
        v11 = CFSTR("no pass and non active device credential");
        break;
      case 4:
        v12 = 8 * (a3 == 1);
        v11 = CFSTR("no pass and incomplete device credential");
        break;
      case 6:
        v11 = CFSTR("no pass and frozen credential");
        break;
      default:
        goto LABEL_48;
    }
    goto LABEL_66;
  }
LABEL_48:
  v12 = 0;
  v11 = &stru_1E2ADF4C0;
LABEL_66:
  -[__CFString isoProperties](v8, "isoProperties");
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v26)
  {
    v28 = v40;
    if ((objc_msgSend(v26, "hasKeyMeterial") & 1) == 0)
    {
      v12 |= 0x40uLL;
      -[__CFString stringByAppendingString:](v11, "stringByAppendingString:", CFSTR(", and missing iso key material"));
      v11 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v28 = v40;
  }
  v29 = objc_alloc(MEMORY[0x1E0CB3940]);
  v30 = CFSTR("N");
  if (a3 == 2)
    v31 = CFSTR("Y");
  else
    v31 = CFSTR("N");
  if (a3 == 2)
    v32 = CFSTR("N");
  else
    v32 = CFSTR("Y");
  if (a3 == 1)
    v30 = CFSTR("Y");
  v33 = (__CFString *)objc_msgSend(v29, "initWithFormat:", CFSTR("(canUpdateDeviceCredential: %@, shouldKeepActiveDeviceCredentialWithSuspendedPass: %@, shouldSyncForOrphanedSuspendedDeviceCredentials: %@, passCredential: %@, deviceCredential: %@)"), v31, v32, v30, v7, v8);
  PKLogFacilityTypeGetObject(6uLL);
  v34 = objc_claimAutoreleasedReturnValue();
  v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
  if (v12)
  {
    if (v35)
    {
      PKConsistencyCheckCleanupActionsToString(v12);
      v36 = (__CFString *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412802;
      v42 = v36;
      v43 = 2112;
      v44 = v11;
      v45 = 2112;
      v46 = v33;
      _os_log_impl(&dword_18FC92000, v34, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: Requesting %@ cleanup actions because \"%@\". %@", buf, 0x20u);

    }
  }
  else if (v35)
  {
    *(_DWORD *)buf = 138412546;
    v42 = v11;
    v43 = 2112;
    v44 = v33;
    _os_log_impl(&dword_18FC92000, v34, OS_LOG_TYPE_DEFAULT, "PKSecureElementConsistencyChecker: Requesting no cleanup actions because \"%@\". %@", buf, 0x16u);
  }

  if (v28)
  {
    v37 = objc_alloc(MEMORY[0x1E0CB3940]);
    PKConsistencyCheckCleanupActionsToString(v12);
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *v28 = (id)objc_msgSend(v37, "initWithFormat:", CFSTR("%@. performing: %@"), v11, v38);

  }
LABEL_86:

  return v12;
}

id ErrorWithCodeAndDescription(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0CB35C8];
  v9 = *MEMORY[0x1E0CB2D50];
  v10[0] = a2;
  v4 = (void *)MEMORY[0x1E0C99D80];
  v5 = a2;
  objc_msgSend(v4, "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), a1, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_1902A25D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 104), 8);
  _Unwind_Resume(a1);
}

void sub_1902A364C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  uint64_t v12;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 248));
  _Block_object_dispose((const void *)(v12 - 176), 8);
  _Block_object_dispose((const void *)(v12 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_1902A5268(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

Class initNPKCompanionAgentConnection_4()
{
  Class result;

  if (qword_1EE1DB700 != -1)
    dispatch_once(&qword_1EE1DB700, &__block_literal_global_188);
  result = objc_getClass("NPKCompanionAgentConnection");
  qword_1EE1DB6F8 = (uint64_t)result;
  getNPKCompanionAgentConnectionClass_4[0] = (uint64_t (*)())NPKCompanionAgentConnectionFunction_4;
  return result;
}

id NPKCompanionAgentConnectionFunction_4()
{
  return (id)qword_1EE1DB6F8;
}

Class initBYFlowSkipController()
{
  Class result;

  if (qword_1EE1DB718 != -1)
    dispatch_once(&qword_1EE1DB718, &__block_literal_global_191_1);
  result = objc_getClass("BYFlowSkipController");
  qword_1EE1DB708 = (uint64_t)result;
  _MergedGlobals_184 = (uint64_t (*)())BYFlowSkipControllerFunction;
  return result;
}

id BYFlowSkipControllerFunction()
{
  return (id)qword_1EE1DB708;
}

id initBYFlowSkipIdentifierApplePay()
{
  id *v0;

  if (qword_1EE1DB718 != -1)
    dispatch_once(&qword_1EE1DB718, &__block_literal_global_191_1);
  v0 = (id *)dlsym((void *)qword_1EE1DB710, "BYFlowSkipIdentifierApplePay");
  objc_storeStrong((id *)&qword_1EE1DB6F0, *v0);
  off_1ECF21C30 = (uint64_t (*)())BYFlowSkipIdentifierApplePayFunction;
  return (id)qword_1EE1DB6F0;
}

id BYFlowSkipIdentifierApplePayFunction()
{
  return (id)qword_1EE1DB6F0;
}

void sub_1902A6088(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 buf)
{
  void *v17;
  id v18;
  NSObject *v19;
  void *v20;

  if (a2 == 1)
  {
    v18 = objc_begin_catch(a1);
    PKLogFacilityTypeGetObject(0);
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v18, "description");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138543362;
      *(_QWORD *)((char *)&buf + 4) = v20;
      _os_log_error_impl(&dword_18FC92000, v19, OS_LOG_TYPE_ERROR, "Failed to decode verification record with exception: %{public}@", (uint8_t *)&buf, 0xCu);

    }
    objc_msgSend(v17, "setVerificationStatus:", 0);
    objc_msgSend(v17, "setAllChannels:", 0);
    objc_msgSend(v17, "setRequiredFieldData:", 0);
    objc_msgSend(v17, "setChannel:", 0);
    objc_msgSend(v17, "setCurrentStepIdentifier:", 0);
    objc_msgSend(v17, "setPreviousStepIdentifier:", 0);

    objc_end_catch();
    JUMPOUT(0x1902A6044);
  }
  _Unwind_Resume(a1);
}

const __CFString *PKAccountWebServicePayLaterContentRequestTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xE)
    return CFSTR("unknown");
  else
    return off_1E2AD8E88[a1 - 1];
}

void sub_1902AB0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKAccountEventTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x19)
    return CFSTR("unknown");
  else
    return off_1E2AD90A8[a1 - 1];
}

uint64_t PKAccountEventTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  char v31;
  __CFString *v32;
  __CFString *v33;
  char v34;
  __CFString *v35;
  __CFString *v36;
  char v37;
  __CFString *v38;
  __CFString *v39;
  char v40;
  __CFString *v41;
  __CFString *v42;
  char v43;
  __CFString *v44;
  __CFString *v45;
  char v46;
  __CFString *v47;
  __CFString *v48;
  char v49;
  __CFString *v50;
  __CFString *v51;
  char v52;
  __CFString *v53;
  __CFString *v54;
  char v55;
  __CFString *v56;
  __CFString *v57;
  char v58;
  __CFString *v59;
  __CFString *v60;
  char v61;
  __CFString *v62;
  __CFString *v63;
  char v64;
  __CFString *v65;
  __CFString *v66;
  char v67;
  __CFString *v68;
  __CFString *v69;
  char v70;
  __CFString *v71;
  __CFString *v72;
  char v73;
  __CFString *v74;
  __CFString *v75;
  char v76;
  __CFString *v77;
  __CFString *v78;
  int v79;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("rewardsadded"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_80:
    v4 = 0;
    goto LABEL_81;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("rewardsadded"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("rewardsredeemed")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("rewardsredeemed")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 1;
      goto LABEL_81;
    }
    v8 = v6;
    if (v8 == CFSTR("statementavailable")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("statementavailable")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_81;
    }
    v11 = v9;
    if (v11 == CFSTR("dispute")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("dispute")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_81;
    }
    v14 = v12;
    if (v14 == CFSTR("paymentscheduled")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("paymentscheduled")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_81;
    }
    v17 = v15;
    if (v17 == CFSTR("paymentcancelled")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("paymentcancelled")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 8;
      goto LABEL_81;
    }
    v20 = v18;
    if (v20 == CFSTR("paymentposted")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("paymentposted")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_81;
    }
    v23 = v21;
    if (v23 == CFSTR("paymentfailed")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("paymentfailed")),
          v24,
          (v25 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_81;
    }
    v26 = v24;
    if (v26 == CFSTR("transferscheduled")
      || (v27 = v26,
          v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("transferscheduled")),
          v27,
          (v28 & 1) != 0))
    {
      v4 = 19;
      goto LABEL_81;
    }
    v29 = v27;
    if (v29 == CFSTR("transfercancelled")
      || (v30 = v29,
          v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("transfercancelled")),
          v30,
          (v31 & 1) != 0))
    {
      v4 = 22;
      goto LABEL_81;
    }
    v32 = v30;
    if (v32 == CFSTR("transferposted")
      || (v33 = v32,
          v34 = -[__CFString isEqualToString:](v32, "isEqualToString:", CFSTR("transferposted")),
          v33,
          (v34 & 1) != 0))
    {
      v4 = 20;
      goto LABEL_81;
    }
    v35 = v33;
    if (v35 == CFSTR("transferfailed")
      || (v36 = v35,
          v37 = -[__CFString isEqualToString:](v35, "isEqualToString:", CFSTR("transferfailed")),
          v36,
          (v37 & 1) != 0))
    {
      v4 = 21;
      goto LABEL_81;
    }
    v38 = v36;
    if (v38 == CFSTR("transferpending")
      || (v39 = v38,
          v40 = -[__CFString isEqualToString:](v38, "isEqualToString:", CFSTR("transferpending")),
          v39,
          (v40 & 1) != 0))
    {
      v4 = 23;
      goto LABEL_81;
    }
    v41 = v39;
    if (v41 == CFSTR("transfercompleted")
      || (v42 = v41,
          v43 = -[__CFString isEqualToString:](v41, "isEqualToString:", CFSTR("transfercompleted")),
          v42,
          (v43 & 1) != 0))
    {
      v4 = 24;
      goto LABEL_81;
    }
    v44 = v42;
    if (v44 == CFSTR("holdplaced")
      || (v45 = v44,
          v46 = -[__CFString isEqualToString:](v44, "isEqualToString:", CFSTR("holdplaced")),
          v45,
          (v46 & 1) != 0))
    {
      v4 = 25;
      goto LABEL_81;
    }
    v47 = v45;
    if (v47 == CFSTR("holdremoval")
      || (v48 = v47,
          v49 = -[__CFString isEqualToString:](v47, "isEqualToString:", CFSTR("holdremoval")),
          v48,
          (v49 & 1) != 0))
    {
      v4 = 26;
      goto LABEL_81;
    }
    v50 = v48;
    if (v50 == CFSTR("paymentreminder")
      || (v51 = v50,
          v52 = -[__CFString isEqualToString:](v50, "isEqualToString:", CFSTR("paymentreminder")),
          v51,
          (v52 & 1) != 0))
    {
      v4 = 9;
      goto LABEL_81;
    }
    v53 = v51;
    if (v53 == CFSTR("credittermsupdated")
      || (v54 = v53,
          v55 = -[__CFString isEqualToString:](v53, "isEqualToString:", CFSTR("credittermsupdated")),
          v54,
          (v55 & 1) != 0))
    {
      v4 = 10;
      goto LABEL_81;
    }
    v56 = v54;
    if (v56 == CFSTR("physicalcardstatusupdate")
      || (v57 = v56,
          v58 = -[__CFString isEqualToString:](v56, "isEqualToString:", CFSTR("physicalcardstatusupdate")),
          v57,
          (v58 & 1) != 0))
    {
      v4 = 11;
      goto LABEL_81;
    }
    v59 = v57;
    if (v59 == CFSTR("physicalcardshippingupdate")
      || (v60 = v59,
          v61 = -[__CFString isEqualToString:](v59, "isEqualToString:", CFSTR("physicalcardshippingupdate")),
          v60,
          (v61 & 1) != 0))
    {
      v4 = 12;
      goto LABEL_81;
    }
    v62 = v60;
    if (v62 == CFSTR("virtualcardstatusupdate")
      || (v63 = v62,
          v64 = -[__CFString isEqualToString:](v62, "isEqualToString:", CFSTR("virtualcardstatusupdate")),
          v63,
          (v64 & 1) != 0))
    {
      v4 = 13;
      goto LABEL_81;
    }
    v65 = v63;
    if (v65 == CFSTR("billpaymentselectedsuggestedamountdata")
      || (v66 = v65,
          v67 = -[__CFString isEqualToString:](v65, "isEqualToString:", CFSTR("billpaymentselectedsuggestedamountdata")),
          v66,
          (v67 & 1) != 0))
    {
      v4 = 14;
      goto LABEL_81;
    }
    v68 = v66;
    if (v68 == CFSTR("userinfoupdated")
      || (v69 = v68,
          v70 = -[__CFString isEqualToString:](v68, "isEqualToString:", CFSTR("userinfoupdated")),
          v69,
          (v70 & 1) != 0))
    {
      v4 = 15;
      goto LABEL_81;
    }
    v71 = v69;
    if (v71 == CFSTR("missedpayment")
      || (v72 = v71,
          v73 = -[__CFString isEqualToString:](v71, "isEqualToString:", CFSTR("missedpayment")),
          v72,
          (v73 & 1) != 0))
    {
      v4 = 16;
      goto LABEL_81;
    }
    v74 = v72;
    if (v74 == CFSTR("creditbureauwarning")
      || (v75 = v74,
          v76 = -[__CFString isEqualToString:](v74, "isEqualToString:", CFSTR("creditbureauwarning")),
          v75,
          (v76 & 1) != 0))
    {
      v4 = 17;
      goto LABEL_81;
    }
    v77 = v75;
    if (v77 == CFSTR("chargeoffprevention")
      || (v78 = v77,
          v79 = -[__CFString isEqualToString:](v77, "isEqualToString:", CFSTR("chargeoffprevention")),
          v78,
          v79))
    {
      v4 = 18;
      goto LABEL_81;
    }
    goto LABEL_80;
  }
LABEL_4:
  v4 = 2;
LABEL_81:

  return v4;
}

uint64_t PKProtobufCloudStoreZoneInvitationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  int v16;
  BOOL v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          v13 = v12 + 1;
          if (v12 == -1 || v13 > *(_QWORD *)(a2 + *v4))
            break;
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v15 = v9++ >= 9;
          if (v15)
          {
            v10 = 0;
            v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v16)
          v17 = 1;
        else
          v17 = (v10 & 7) == 4;
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v18 = 0;
              v19 = 0;
              v20 = 0;
              break;
            case 2u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 32;
              goto LABEL_32;
            case 3u:
              PBReaderReadData();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 24;
              goto LABEL_32;
            case 4u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 16;
              goto LABEL_32;
            case 5u:
              PBReaderReadString();
              v26 = objc_claimAutoreleasedReturnValue();
              v27 = 48;
LABEL_32:
              v28 = *(void **)(a1 + v27);
              *(_QWORD *)(a1 + v27) = v26;

              goto LABEL_42;
            case 6u:
              *(_BYTE *)(a1 + 56) |= 1u;
              v29 = *v3;
              v30 = *(_QWORD *)(a2 + v29);
              if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(_QWORD *)(a2 + *v4))
              {
                v31 = *(_QWORD *)(*(_QWORD *)(a2 + *v7) + v30);
                *(_QWORD *)(a2 + v29) = v30 + 8;
              }
              else
              {
                *(_BYTE *)(a2 + *v5) = 1;
                v31 = 0;
              }
              *(_QWORD *)(a1 + 8) = v31;
              goto LABEL_42;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_42:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v21 = *v3;
            v22 = *(_QWORD *)(a2 + v21);
            v23 = v22 + 1;
            if (v22 == -1 || v23 > *(_QWORD *)(a2 + *v4))
              break;
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
            *(_QWORD *)(a2 + v21) = v23;
            v20 |= (unint64_t)(v24 & 0x7F) << v18;
            if ((v24 & 0x80) == 0)
              goto LABEL_37;
            v18 += 7;
            v15 = v19++ >= 9;
            if (v15)
            {
              LODWORD(v20) = 0;
              goto LABEL_39;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v20) = 0;
LABEL_39:
          *(_DWORD *)(a1 + 40) = v20;
          goto LABEL_42;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

void sub_1902AF0B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  uint64_t v17;

  objc_destroyWeak(v16);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1902AF1A0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1902AF2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  id *v17;

  objc_destroyWeak(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1902AFAFC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

void sub_1902B0EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902B24F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__125(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__126(uint64_t a1)
{

}

void PKPassPersonalizationRequestToken(void *a1, void *a2)
{
  id v3;
  id v4;
  dispatch_time_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD block[4];
  id v13;
  _QWORD v14[4];
  id v15;

  v3 = a1;
  v4 = a2;
  if (PKDisablePersonalizationValidation())
  {
    v5 = dispatch_time(0, 1000000000);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PKPassPersonalizationRequestToken_block_invoke_18;
    block[3] = &unk_1E2ABD9A0;
    v13 = v4;
    dispatch_after(v5, MEMORY[0x1E0C80D38], block);

  }
  else if (v3)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("v2/%@/token/"), v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    PKMerchantServicesURL();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "URLByAppendingPathComponent:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C92C28], "requestWithURL:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "setHTTPMethod:", CFSTR("GET"));

    objc_msgSend(MEMORY[0x1E0C92C98], "sharedSession");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __PKPassPersonalizationRequestToken_block_invoke;
    v14[3] = &unk_1E2AC5308;
    v15 = v4;
    objc_msgSend(v10, "dataTaskWithRequest:completionHandler:", v9, v14);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v11, "resume");

  }
  else if (v4)
  {
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
  }

}

void PKPassPersonalizationReport(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  const __CFString *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v20 = a1;
  v7 = a2;
  v8 = a3;
  if (!PKDisablePersonalizationValidation())
  {
    v9 = (void *)MEMORY[0x1E0CB3940];
    v10 = v8;
    objc_msgSend(v9, "stringWithFormat:", CFSTR("v2/%@/token/%@/"), v20, v7);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    PKMerchantServicesURL();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "URLByAppendingPathComponent:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C92C28], "requestWithURL:", v13);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v10, CFSTR("signatureData"));

    if (a4 == 1)
      v16 = CFSTR("VAS");
    else
      v16 = 0;
    objc_msgSend(v15, "setObject:forKeyedSubscript:", v16, CFSTR("source"));
    objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v15, 1, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setHTTPBody:", v17);
    objc_msgSend(v14, "setHTTPMethod:", CFSTR("POST"));

    objc_msgSend(MEMORY[0x1E0C92C98], "sharedSession");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "dataTaskWithRequest:completionHandler:", v14, &__block_literal_global_193);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v19, "resume");

  }
}

id PKPassSecurePreviewContextCreateMessagesPreview(NSURL *a1, NSURL *a2)
{
  NSURL *v3;
  NSURL *v4;
  NSURL *v5;
  id MessagesPreview;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  PKSerializedDataAccessor *v11;
  PKPass *v12;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  MessagesPreview = 0;
  if (v3 && v4)
  {
    v7 = (void *)MEMORY[0x19400CFE8]();
    v8 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithContentsOfURL:options:error:", v3, 1, 0);
    v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:", CFSTR("pass.%@"), CFSTR("pkpass"));
    -[NSURL URLByAppendingPathComponent:isDirectory:](v5, "URLByAppendingPathComponent:isDirectory:", v9, 1);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = -[PKSerializedDataAccessor initWithData:error:outputURL:]([PKSerializedDataAccessor alloc], "initWithData:error:outputURL:", v8, 0, v10);

    v12 = +[PKObject createWithValidatedFileDataAccessor:](PKPass, "createWithValidatedFileDataAccessor:", v11);
    MessagesPreview = PKPassSecurePreviewContextCreateMessagesPreview(v12);

    objc_autoreleasePoolPop(v7);
  }

  return MessagesPreview;
}

id PKPassSecurePreviewContextCreateMessagesPreview(PKPass *a1)
{
  PKPass *v1;
  NSObject *v2;
  void *v3;
  PKPass *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  CGColor *v10;
  double v11;
  double v12;
  id v13;
  PKPass *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  _BOOL4 v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t (**v27)(void *, id);
  uint64_t (**v28)(_QWORD);
  void *v29;
  uint64_t v30;
  PKPass *v31;
  uint64_t v32;
  id v33;
  char v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  PKPassSecurePreviewContext *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unint64_t v53;
  id v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  int v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  id v65;
  int v66;
  id v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  PKPass *v84;
  PKPass *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD v97[7];
  _QWORD aBlock[7];
  uint8_t buf[4];
  void *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    PKLogFacilityTypeGetObject(0);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      -[PKObject uniqueID](v1, "uniqueID");
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v100 = v3;
      _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "PKPassSecurePreviewContext: generating preview information for pass %@.", buf, 0xCu);

    }
    -[PKObject displayProfile](v1, "displayProfile");
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend(v89, "passStyle") == 9)
    {
      v84 = v1;
      v4 = v1;
      -[PKObject displayProfile](v4, "displayProfile");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "backgroundColor");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "foregroundColor");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v5, "labelColor");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_retainAutorelease(v6);
      v10 = (CGColor *)objc_msgSend(v9, "CGColor");
      if (v10)
      {
        v11 = PKColorGetRelativeLuminance(v10) / 100.0;
        if (v11 <= 0.00885645168)
          v12 = v11 * 7.78703704 + 0.137931034;
        else
          v12 = pow(v11, 0.333333333);
        v19 = (v12 * 116.0 + -16.0) / 100.0 > 0.9;
      }
      else
      {
        v19 = 0;
      }
      if (objc_msgSend(v5, "supportsAutomaticForegroundVibrancy"))
      {
        v35 = 1.0;
        if (v19)
          v35 = 0.0;
        +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", v35, v35, v35, 1.0);
        v36 = objc_claimAutoreleasedReturnValue();

        v7 = (void *)v36;
      }
      else if (!v7)
      {
        +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", 0.0, 0.0, 0.0, 1.0);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
      }
      if (objc_msgSend(v5, "supportsAutomaticLabelVibrancy"))
      {
        v37 = 0.333;
        if (!v19)
          v37 = 1.0;
        +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", v37, v37, v37, 1.0);
        v38 = objc_claimAutoreleasedReturnValue();

        v8 = (void *)v38;
      }
      else if (!v8)
      {
        +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", 0.462745098, 0.462745098, 0.462745098, 1.0);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v39 = [PKPassSecurePreviewContext alloc];
      objc_msgSend(v9, "string");
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "string");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v7, "string");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "string");
      v87 = v9;
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = -[PKPassSecurePreviewContext _initWithBackgroundColor:primaryColor:secondaryColor:tertiaryColor:](v39, "_initWithBackgroundColor:primaryColor:secondaryColor:tertiaryColor:", v40, v41, v42, v43);

      -[PKPass stringForSemanticKey:](v4, "stringForSemanticKey:", CFSTR("eventName"));
      v44 = (void *)objc_claimAutoreleasedReturnValue();
      PKLocalizedTicketingString(CFSTR("SHARE_PREVIEW_SUBTITLE_EVENT_TICKET"), 0);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "setPrimaryText:", v44);
      objc_msgSend(v13, "setSecondaryText:", 0);
      objc_msgSend(v13, "setTertiaryText:", v45);
      -[PKPass iconImage](v4, "iconImage");
      v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      objc_msgSend(v13, "setIcon:", objc_msgSend(v46, "imageRef"));

      -[PKPass logoImage](v4, "logoImage");
      v47 = (void *)objc_claimAutoreleasedReturnValue();

      v48 = objc_retainAutorelease(v47);
      objc_msgSend(v13, "setImage:", objc_msgSend(v48, "imageRef"));

      v1 = v84;
      v49 = v89;
      goto LABEL_74;
    }
    v91 = 0;
    v92 = 0;
    v90 = 0;
    v14 = v1;
    -[PKPass frontFieldBuckets](v14, "frontFieldBuckets");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "objectAtIndexedSubscript:", 1);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "pk_objectsPassingTest:", &__block_literal_global_194);
      v18 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = 0;
    }

    objc_msgSend(v15, "objectAtIndexedSubscript:", 2);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20;
    if (v20)
    {
      objc_msgSend(v20, "pk_objectsPassingTest:", &__block_literal_global_194);
      v83 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v83 = 0;
    }

    objc_msgSend(v15, "objectAtIndexedSubscript:", 3);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    v23 = v22;
    v86 = (void *)v18;
    if (v22)
    {
      objc_msgSend(v22, "pk_objectsPassingTest:", &__block_literal_global_194);
      v82 = (void *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v82 = 0;
    }

    -[PKPass organizationName](v14, "organizationName");
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    v25 = v90;
    v90 = v24;

    v26 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __MessagePreviewExtractFields_block_invoke;
    aBlock[3] = &__block_descriptor_56_e18_B16__0__NSString_8l;
    aBlock[4] = &v92;
    aBlock[5] = &v91;
    aBlock[6] = &v90;
    v27 = (uint64_t (**)(void *, id))_Block_copy(aBlock);
    v97[0] = v26;
    v97[1] = 3221225472;
    v97[2] = __MessagePreviewExtractFields_block_invoke_2;
    v97[3] = &__block_descriptor_56_e5_B8__0l;
    v97[4] = &v92;
    v97[5] = &v91;
    v97[6] = &v90;
    v28 = (uint64_t (**)(_QWORD))_Block_copy(v97);
    if (-[PKPass style](v14, "style") != 4)
    {
      v34 = 0;
      v29 = v86;
      goto LABEL_52;
    }
    v29 = v86;
    v30 = objc_msgSend(v86, "count");
    if (!v30)
    {
      v34 = 0;
      goto LABEL_52;
    }
    v31 = v1;
    if (v30 == 1)
    {
      objc_msgSend(v86, "objectAtIndexedSubscript:", 0);
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = StringFromField((void *)v32);
LABEL_51:

      v34 = v27[2](v27, v33);
      v29 = 0;
      v1 = v31;
LABEL_52:
      -[PKPass localizedDescription](v14, "localizedDescription");
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v27[2](v27, v56);

      if ((v28[2](v28) & 1) != 0)
        goto LABEL_70;
      v81 = v15;
      objc_msgSend(v29, "firstObject");
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      v58 = StringFromField(v57);
      v59 = v27[2](v27, v58);

      if (v59)
      {
        v15 = v81;
        if ((v28[2](v28) & 1) != 0)
          goto LABEL_70;
        v34 = 1;
      }
      v85 = v1;
      v88 = v29;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v60 = v83;
      v61 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v93, buf, 16);
      if (v61)
      {
        v62 = v61;
        v63 = *(_QWORD *)v94;
        while (2)
        {
          for (i = 0; i != v62; ++i)
          {
            if (*(_QWORD *)v94 != v63)
              objc_enumerationMutation(v60);
            v65 = StringFromField(*(void **)(*((_QWORD *)&v93 + 1) + 8 * i));
            v66 = v27[2](v27, v65);

            if (v66)
            {
              if ((v28[2](v28) & 1) != 0)
              {
                v15 = v81;
                v29 = v88;
                goto LABEL_69;
              }
              v34 = 1;
            }
          }
          v62 = objc_msgSend(v60, "countByEnumeratingWithState:objects:count:", &v93, buf, 16);
          if (v62)
            continue;
          break;
        }
      }

      v1 = v85;
      v29 = v88;
      v15 = v81;
      if ((v34 & 1) == 0)
      {
        objc_msgSend(v82, "firstObject");
        v60 = (id)objc_claimAutoreleasedReturnValue();
        v67 = StringFromField(v60);
        v27[2](v27, v67);

LABEL_69:
        v1 = v85;
      }
LABEL_70:

      v49 = v89;
      objc_msgSend(v89, "backgroundColor");
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v68, "string");
      v69 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v89, "foregroundColor");
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v70, "string");
      v71 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v89, "labelColor");
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v72, "string");
      v73 = (void *)objc_claimAutoreleasedReturnValue();

      if (v69)
      {
        if (v71)
          goto LABEL_72;
      }
      else
      {
        +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", 0.91372549, 0.91372549, 0.91372549, 1.0);
        v78 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "string");
        v69 = (void *)objc_claimAutoreleasedReturnValue();

        if (v71)
        {
LABEL_72:
          if (v73)
          {
LABEL_73:
            v13 = -[PKPassSecurePreviewContext _initWithBackgroundColor:primaryColor:secondaryColor:tertiaryColor:]([PKPassSecurePreviewContext alloc], "_initWithBackgroundColor:primaryColor:secondaryColor:tertiaryColor:", v69, v71, v71, v73);
            objc_msgSend(v13, "setPrimaryText:", v92);
            objc_msgSend(v13, "setSecondaryText:", v91);
            objc_msgSend(v13, "setTertiaryText:", v90);
            -[PKPass iconImage](v14, "iconImage");
            v74 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            objc_msgSend(v13, "setIcon:", objc_msgSend(v74, "imageRef"));

            -[PKPass logoImage](v14, "logoImage");
            v75 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            objc_msgSend(v13, "setImage:", objc_msgSend(v75, "imageRef"));

            -[PKPass backgroundImage](v14, "backgroundImage");
            v76 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            objc_msgSend(v13, "setBackgroundImage:", objc_msgSend(v76, "imageRef"));

LABEL_74:
            goto LABEL_75;
          }
LABEL_78:
          +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", 0.462745098, 0.462745098, 0.462745098, 1.0);
          v80 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v80, "string");
          v73 = (void *)objc_claimAutoreleasedReturnValue();

          goto LABEL_73;
        }
      }
      +[PKColor colorWithR:G:B:A:](PKColor, "colorWithR:G:B:A:", 0.0, 0.0, 0.0, 1.0);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v79, "string");
      v71 = (void *)objc_claimAutoreleasedReturnValue();

      if (v73)
        goto LABEL_73;
      goto LABEL_78;
    }
    v50 = v15;
    objc_msgSend(v86, "objectAtIndexedSubscript:", 0);
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = (uint64_t)StringFromField(v51);

    objc_msgSend(v86, "objectAtIndexedSubscript:", 1);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v53 = (unint64_t)StringFromField(v52);

    if (v32 && v53)
    {
      PKCoreLocalizedString(CFSTR("BOARDING_PASS_PRIMARY_FIELD_JOINER"), CFSTR("%1$@%2$@"), v32, v53);
      v54 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (!(v32 | v53))
      {
        v33 = 0;
        goto LABEL_50;
      }
      if (v32)
        v55 = (void *)v32;
      else
        v55 = (void *)v53;
      v54 = v55;
    }
    v33 = v54;
LABEL_50:

    v15 = v50;
    v29 = v86;
    goto LABEL_51;
  }
  v13 = 0;
LABEL_75:

  return v13;
}

uint64_t PKPassesSecurePreviewContextCreateMessagesPreview(NSURL *a1, NSURL *a2)
{
  NSURL *v3;
  NSURL *v4;
  NSURL *v5;
  uint64_t v6;
  id v7;
  void *v8;
  PKPassesXPCContainer *v9;
  PKPassesXPCContainer *v10;
  id v11;
  _QWORD v13[4];
  id v14;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v8 = (void *)MEMORY[0x19400CFE8]();
    v9 = -[PKPassesXPCContainer initWithFileURL:]([PKPassesXPCContainer alloc], "initWithFileURL:", v3);
    v10 = v9;
    if (v9)
    {
      -[PKPassesXPCContainer setTemporaryOutputDirectory:](v9, "setTemporaryOutputDirectory:", v5);
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___Z49PKPassesSecurePreviewContextCreateMessagesPreviewP5NSURLS0__block_invoke;
      v13[3] = &unk_1E2AD9308;
      v11 = v7;
      v14 = v11;
      if (-[PKPassesXPCContainer unarchivePassesWithOptions:usingBlock:](v10, "unarchivePassesWithOptions:usingBlock:", 0, v13))
      {
        objc_msgSend(v11, "removeAllObjects");
      }

    }
    objc_autoreleasePoolPop(v8);
    if (objc_msgSend(v7, "count"))
      v6 = objc_msgSend(v7, "copy");
    else
      v6 = 0;

  }
  return v6;
}

void ___Z49PKPassesSecurePreviewContextCreateMessagesPreviewP5NSURLS0__block_invoke(uint64_t a1, PKPass *a2)
{
  id MessagesPreview;
  id v4;

  MessagesPreview = PKPassSecurePreviewContextCreateMessagesPreview(a2);
  if (MessagesPreview)
  {
    v4 = MessagesPreview;
    objc_msgSend(*(id *)(a1 + 32), "addObject:", MessagesPreview);
    MessagesPreview = v4;
  }

}

id StringFromField(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = a1;
  if (v1)
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "value");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v4 = TrimmedString(v3, v2);

    if (!v4)
    {
      objc_msgSend(v1, "label");
      v5 = (void *)objc_claimAutoreleasedReturnValue();
      v4 = TrimmedString(v5, v2);

    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

id TrimmedString(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      objc_msgSend(v3, "stringByTrimmingCharactersInSet:", v4);
      v6 = objc_claimAutoreleasedReturnValue();

      v3 = (id)v6;
    }
    if (!objc_msgSend(v3, "length"))
    {

      v3 = 0;
    }
  }

  return v3;
}

uint64_t PKPeerPaymentDocumentSubmissionStatusFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("success"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(CFSTR("unreadable"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("invalid"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if (objc_msgSend(CFSTR("unavailable"), "isEqualToString:", v1))
  {
    v2 = 3;
  }
  else
  {
    v2 = 4;
  }

  return v2;
}

void sub_1902B94B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902B95F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902B97A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *PKDemoPersonToString(unint64_t a1)
{
  if (a1 > 9)
    return 0;
  else
    return off_1E2AD97E0[a1];
}

__CFString *PKDemoMerchantToString(unint64_t a1)
{
  if (a1 > 0x11)
    return 0;
  else
    return off_1E2AD95A8[a1];
}

id _demoDirectory()
{
  void *v0;
  void *v1;

  PKHomeDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("Demo"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id _demoMerchantToDictionary(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFString *v6;
  id v7;
  const __CFString *v8;
  const __CFString *v9;
  id v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFString *v13;
  void *v14;
  const __CFString *v15;
  const __CFString *v16;

  switch(a1)
  {
    case 0:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Peet's Coffee"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Jose"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("2"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("33"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F5F8, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("food.coffee"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media3.fl.yelpcdn.com/bphoto/MvTju6357spmcvSg7WEJYw/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("12523575549507233739"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41680, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41690, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Peet's Coffee"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 256-4584"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://locations.peets.com/ll/US/CA/San%20Jose/1110-Blossom-Hill-Rd_*-Suite-20"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("food.coffee"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("8699818702873385130"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Peet's Coffee"), CFSTR("name"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("https://www.peets.com"), CFSTR("url"));
      v4 = CFSTR("https://is2-ssl.mzstatic.com/image/thumb/Purple113/v4/bb/b0/29/bbb0298c-c522-d1d4-dd5c-850e3ff6718c/AppIcon-0-1x_U007emarketing-0-0-GLES2_U002c0-512MB-sRGB-0-0-0-85-220-0-0-0-6.png/258x258.png");
      goto LABEL_13;
    case 1:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Whole Foods Market"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Jose"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("45"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("325"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("food.grocery"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media1.fl.yelpcdn.com/bphoto/M5xWlUAsdqCfl11jlG8etw/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("7107539818895359605"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416A0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416B0, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Whole Foods Market"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 266-3700"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.wholefoodsmarket.com/stores/blossomhill"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("food.grocery"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("6434975174002562436"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("http://is3.mzstatic.com/image/thumb/PjQoyHYEsy9smuX4TuBlqg/258x258.png"), CFSTR("logoURL"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Whole Foods Market"), CFSTR("name"));
      v4 = CFSTR("https://www.wholefoodsmarket.com");
      goto LABEL_20;
    case 2:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Chevron"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("transport"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("physical"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Cupertino"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("other"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("20"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("75"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F628, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("transport"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("auto.servicestations.gasstations"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media3.fl.yelpcdn.com/bphoto/ocrS3xTiwLw0K9rBxgINmw/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("5052521753504112381"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416C0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416D0, CFSTR("locationLongitude"));
      v5 = CFSTR("Chevron");
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Chevron"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 773-9135"), CFSTR("phoneNumber"));
      v6 = CFSTR("https://www.chevronwithtechron.com");
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.chevronwithtechron.com"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("transport"), CFSTR("category"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("auto.servicestations.gasstations"), CFSTR("detailedCategory"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("8388699129838932645"), CFSTR("identifier"));
      v8 = CFSTR("http://is5.mzstatic.com/image/thumb/mkwRWC6j4lvL-OtJ2SficQ/258x258.png");
      goto LABEL_7;
    case 3:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Nike"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Francisco"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("75"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("150"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F640, CFSTR("weight"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Nike Welcome Offer"), CFSTR("promotionName"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping.sportgoods.sportswear"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media1.fl.yelpcdn.com/bphoto/PKY8lr10v6UM2xkFDvJLeA/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("13850976901029022184"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416E0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C416F0, CFSTR("locationLongitude"));
      v5 = CFSTR("Nike");
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Nike"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 392-6453"), CFSTR("phoneNumber"));
      v6 = CFSTR("https://www.nike.com/us/en_us/retail/en/nike-san-francisco");
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.nike.com/us/en_us/retail/en/nike-san-francisco"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("shopping.sportgoods.sportswear"), CFSTR("detailedCategory"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", CFSTR("18052478740434780013"), CFSTR("identifier"));
      v8 = CFSTR("http://is4.mzstatic.com/image/thumb/uiZuRrog_gNY3v3gBe5lng/258x258.png");
LABEL_7:
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v8, CFSTR("logoURL"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("name"));
      objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v7, CFSTR("brand"));

      goto LABEL_29;
    case 4:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v9 = CFSTR("Apple");
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Apple"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Cupertino"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("appleProperty"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("500"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("2000"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media2.fl.yelpcdn.com/bphoto/WUo5Cci0WPeoxVcfXCss1A/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("1958998683143492575"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41700, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41710, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 551-2150"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Apple Store"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.apple.com"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("shopping.electronics"), CFSTR("detailedCategory"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("9300435704289333803"), CFSTR("identifier"));
      v11 = CFSTR("http://is4.mzstatic.com/image/thumb/K49ahzkGx-YwYXtz5aTCmg/258x258.png");
      goto LABEL_24;
    case 5:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Emerald Hills Golfland"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("physical"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Emerald Hills"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("other"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("30"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("64"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F670, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("active.mini_golf"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media4.fl.yelpcdn.com/bphoto/bGurp77hGWMUuf6n6fFy3Q/ls.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("13841128588646925096"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41740, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41750, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Emerald Hills Golfland"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 225-1533"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.golfland.com"), CFSTR("url"));
      v12 = CFSTR("merchant");
      goto LABEL_28;
    case 6:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Office Depot"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Jose"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("60"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("200"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F658, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping.officeequipment"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media1.fl.yelpcdn.com/bphoto/wIBZ8Ey6BrdSGLWk9kUzcQ/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("13177365867137550586"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41720, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41730, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Office Depot"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 978-1129"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.officedepot.com/"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("shopping.officeequipment"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("641873487358131409"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Office Depot"), CFSTR("name"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("https://www.officedepot.com"), CFSTR("url"));
      v4 = CFSTR("https://is1-ssl.mzstatic.com/image/thumb/Purple123/v4/42/10/b3/4210b318-44f3-d1cd-8a3e-818564739479/AppIcon-0-1x_U007emarketing-0-0-85-220-0-5.png/258x258.png");
      goto LABEL_13;
    case 7:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Pinkberry"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Jose"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("6"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("30"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("food.icecream"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media2.fl.yelpcdn.com/bphoto/U5J9IBnR5Wy92f0-clFMtA/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("16323079565812879485"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41760, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41770, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Pinkberry"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 979-0566"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.pinkberry.com/store-detail/?id=150"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("food.icecream"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("9233233224678842766"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Pinkberry"), CFSTR("name"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("https://is2-ssl.mzstatic.com/image/thumb/Purple128/v4/73/d5/2e/73d52ea3-56b6-4434-19f4-742bd56e7c96/AppIcon-1x_U007emarketing-85-220-0-4.png/258x258.png"), CFSTR("logoURL"));
      v4 = CFSTR("https://www.pinkberry.com");
      goto LABEL_20;
    case 8:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Walgreens"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Cupertino"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("9"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("77"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F5F8, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("health.pharmacy"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media3.fl.yelpcdn.com/bphoto/J_Agicvd7XNALYMgCrIz3g/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("2409139575249846953"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41780, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41790, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Walgreens"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 973-8402"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.walgreens.com/locator/Walgreens-20011+BOLLINGER+RD-CUPERTINO-CA-95014/id=4416"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("health.pharmacy"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("8800788010572972211"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Walgreens"), CFSTR("name"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("https://www.walgreens.com"), CFSTR("url"));
      v4 = CFSTR("https://is5-ssl.mzstatic.com/image/thumb/Purple123/v4/39/ef/d6/39efd6c3-635a-7fe1-a76a-f0d56f8c5177/AppIcon-0-1x_U007emarketing-0-0-GLES2_U002c0-512MB-sRGB-0-0-0-85-220-0-0-0-10.png/258x258.png");
LABEL_13:
      v13 = CFSTR("logoURL");
      v14 = v3;
      goto LABEL_21;
    case 9:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Pizza My Heart"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("physical"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Jose"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("other"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("10"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("40"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("restaurants.pizza"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media1.fl.yelpcdn.com/bphoto/SvLGvBzWQWhoU4kCEcV8SA/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("3549532470965725063"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417A0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417B0, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Pizza My Heart"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (408) 238-6000"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.pizzamyheart.com"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("restaurants.pizza"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("16865611693206952470"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Pizza My Heart"), CFSTR("name"));
      v4 = CFSTR("https://www.pizzamyheart.com");
      goto LABEL_20;
    case 10:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Century Theaters"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("physical"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Mountain View"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("other"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("10"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("65"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("arts.movietheaters"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media2.fl.yelpcdn.com/bphoto/kBRUvU83ge7wJ9h58j8heg/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("1698195371786223970"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417C0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417D0, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Century Cinema 16"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (650) 961-3828"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.cinemark.com/california-bay-area/century-cinema-16#theatreInfo"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("arts.movietheaters"), CFSTR("detailedCategory"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("2148123788736123850"), CFSTR("identifier"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("Cinemark"), CFSTR("name"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("https://is1-ssl.mzstatic.com/image/thumb/Purple113/v4/dd/3c/04/dd3c047c-fe85-6b79-441b-73bbf107b09d/AppIcon-0-1x_U007emarketing-0-0-GLES2_U002c0-512MB-sRGB-0-0-0-85-220-0-0-0-7.png/258x258.png"), CFSTR("logoURL"));
      v15 = CFSTR("http://www.cinemark.com");
      goto LABEL_25;
    case 11:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Uber"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("transport"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("inApp"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("appleProperty"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("10"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("130"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F628, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("transport"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("hotelstravel.transport.taxis"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("5687913007838781136"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://is3.mzstatic.com/image/thumb/tNsnko4LBpi_ggPTUMaYHA/258x258.png"), CFSTR("logoURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Uber"), CFSTR("name"));
      v16 = CFSTR("https://www.uber.com");
      goto LABEL_27;
    case 12:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Target"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Francisco"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("80"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("300"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media1.fl.yelpcdn.com/bphoto/LJZSfXfjUiUePmmV_vimow/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("6109895895934163460"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417E0, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C417F0, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Target"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 343-6272"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("http://www.target.com/sl/san-francisco-central/2766"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("category"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("shopping"), CFSTR("detailedCategory"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("13819248678283629176"), CFSTR("identifier"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("Target"), CFSTR("name"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("http://is3.mzstatic.com/image/thumb/tvs32psbmkjVzpHV329qiA/258x258.png"), CFSTR("logoURL"));
      v15 = CFSTR("https://www.target.com");
      goto LABEL_25;
    case 13:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CVS Pharmacy"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Francisco"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("2"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("25"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F610, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("health.pharmacy"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media4.fl.yelpcdn.com/bphoto/Y2Pi_hsmiyoo8zKSe5Klqw/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("1580462163505354756"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41800, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41810, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("CVS Pharmacy"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 777-1654"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.cvs.com/store-locator/cvs-pharmacy-address/map/581+Market+Street-San+Francisco-CA-94105/storeid=10035"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("health"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("health.pharmacy"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("4281817736107171455"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("http://is3.mzstatic.com/image/thumb/jn4Z3GeMK1r3fMOJW0ef0Q/258x258.png"), CFSTR("logoURL"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("CVS Pharmacy"), CFSTR("name"));
      v4 = CFSTR("https://www.cvs.com");
      goto LABEL_20;
    case 14:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Starbucks"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Francisco"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("6"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("25"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F5F8, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("food.coffee"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media3.fl.yelpcdn.com/bphoto/kvPAZ4exiLtlrIoErd6pgg/o.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("1914599672845470212"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41820, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41830, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Starbucks"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 677-4493"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://www.starbucks.com/store-locator/store/13347/4th-market-s-f-780-market-street-san-francisco-ca-941022514-us"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v3 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("food.coffee"), CFSTR("detailedCategory"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("3856448028047449189"), CFSTR("identifier"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("Starbucks"), CFSTR("name"));
      objc_msgSend(v3, "setObject:forKeyedSubscript:", CFSTR("http://is2.mzstatic.com/image/thumb/d0QFCu6-S6Ob689quo6-ZQ/258x258.png"), CFSTR("logoURL"));
      v4 = CFSTR("https://www.starbucks.com");
LABEL_20:
      v14 = v3;
      v13 = CFSTR("url");
LABEL_21:
      objc_msgSend(v14, "setObject:forKeyedSubscript:", v4, v13);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v3, CFSTR("brand"));

      goto LABEL_29;
    case 15:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Apple Services"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("inApp"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("appleProperty"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("6.93"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("14.99"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F628, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("arts"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("16845198511709503341"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://is3-ssl.mzstatic.com/image/thumb/K49ahzkGx-YwYXtz5aTCmg/258x258.png"), CFSTR("logoURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Apple Services"), CFSTR("name"));
      v16 = CFSTR("https://www.apple.com");
      goto LABEL_27;
    case 16:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v9 = CFSTR("Safeway");
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Safeway"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("contactless"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("San Francisco"), CFSTR("city"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("CA"), CFSTR("state"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("40"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("120"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F640, CFSTR("weight"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://s3-media2.fl.yelpcdn.com/bphoto/nxjPpnOIgeiY4dz3gFIs3Q/ls.jpg"), CFSTR("heroImageURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("6657540014897774705"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Yelp"), CFSTR("heroImageProvider"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41840, CFSTR("locationLatitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", &unk_1E2C41850, CFSTR("locationLongitude"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("+1 (415) 861-7660"), CFSTR("phoneNumber"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Safeway"), CFSTR("name"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://local.safeway.com/safeway/ca/san-francisco/2020-market-st.html"), CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, CFSTR("merchant"));
      v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("fooddrinks"), CFSTR("category"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("food.grocery"), CFSTR("detailedCategory"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("7225859074585575614"), CFSTR("identifier"));
      v11 = CFSTR("http://is3.mzstatic.com/image/thumb/I7FQ1qzEyzGdT4fXopFtqg/258x258.png");
LABEL_24:
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v11, CFSTR("logoURL"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v9, CFSTR("name"));
      objc_msgSend(v10, "setObject:forKeyedSubscript:", CFSTR("+1 (800) 692-7753"), CFSTR("phoneNumber"));
      v15 = CFSTR("https://www.apple.com");
LABEL_25:
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v15, CFSTR("url"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v10, CFSTR("brand"));

      goto LABEL_29;
    case 17:
      v1 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("Netflix"), CFSTR("name"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("inApp"), CFSTR("source"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("applePay"), CFSTR("rewardsType"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("14.99"), CFSTR("minAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("14.99"), CFSTR("maxAmount"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", &unk_1E2C3F628, CFSTR("weight"));
      objc_msgSend(v1, "setObject:forKeyedSubscript:", CFSTR("b9a617c9-67e7-4e9b-8176-839700ec85b0"), CFSTR("panIdentifier"));
      v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("fun"), CFSTR("category"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("arts"), CFSTR("detailedCategory"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("16845198511709503342"), CFSTR("identifier"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("https://is3-ssl.mzstatic.com/image/thumb/Purple124/v4/82/04/9e/82049e66-32c2-52a3-8c38-c7ea5ca8a676/AppIcon-1x_U007emarketing-0-10-0-0-85-220-0.png/258x258.png"), CFSTR("logoURL"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", CFSTR("Netflix"), CFSTR("name"));
      v16 = CFSTR("https://www.netflix.com");
LABEL_27:
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("url"));
      v12 = CFSTR("brand");
LABEL_28:
      objc_msgSend(v1, "setObject:forKeyedSubscript:", v2, v12);
LABEL_29:

      break;
    default:
      v1 = 0;
      break;
  }
  return v1;
}

id _demoPersonToDictionary(unint64_t a1)
{
  id v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  __CFString *v7;
  __CFString *v8;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v3 = v2;
  if (a1 <= 9)
  {
    v4 = off_1E2AD9638[a1];
    v5 = off_1E2AD9688[a1];
    v6 = off_1E2AD96D8[a1];
    v7 = off_1E2AD9728[a1];
    v8 = off_1E2AD9778[a1];
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("counterpartHandle"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v5, CFSTR("memo"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, CFSTR("type"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v7, CFSTR("minAmount"));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v8, CFSTR("maxAmount"));
  }
  return v3;
}

id _demoTransactionArrayForItemIdentifier(void *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint32_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  uint64_t j;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  __CFString *v41;
  id v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v58;
  unint64_t v59;
  uint64_t v60;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  id v71;
  void *v72;
  void *v73;

  v71 = a1;
  v70 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  objc_msgSend(MEMORY[0x1E0C99D68], "date");
  v2 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
  v62 = (void *)objc_claimAutoreleasedReturnValue();
  v63 = (void *)v2;
  objc_msgSend(v62, "components:fromDate:", 112, v2);
  v58 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v58, "day");
  v68 = 0;
  for (i = 0; i != 18; ++i)
  {
    _weightForMerchant(i);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB3598], "notANumber");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = objc_msgSend(v5, "isEqual:", v6);

      if ((v7 & 1) == 0)
        v68 += objc_msgSend(v5, "integerValue");
    }

  }
  v8 = 0;
  v9 = (uint64_t)((double)v3 * 1.5);
  if (v9 <= 2)
    v9 = 2;
  if (v3 <= 1)
    v10 = 1;
  else
    v10 = v3;
  v59 = v9 - 1;
  v60 = v10;
  do
  {
    v11 = arc4random();
    v13 = v59;
    v12 = v60;
    if (v8)
    {
      v12 = 30;
      v13 = 39;
    }
    v14 = v11 % v13 + v12;
    v15 = (uint64_t)((double)v14 * 0.75);
    if (!a2)
      v15 = v14;
    v69 = v15;
    v16 = objc_alloc_init(MEMORY[0x1E0C99D78]);
    objc_msgSend(v16, "setMonth:", -v8);
    objc_msgSend(v62, "dateByAddingComponents:toDate:options:", v16, v63, 0);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    PKStartOfMonth(v17);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = v16;
    v67 = v8;
    v64 = v14;
    v65 = v17;
    if (v8)
    {
      PKEndOfMonth(v17);
      v18 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v18 = v17;
    }
    v72 = v18;
    if (v69)
    {
      for (j = 0; j != v69; ++j)
      {
        v20 = 0;
        v21 = arc4random() % v68;
        while (1)
        {
          _weightForMerchant(v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v23 = objc_msgSend(v22, "integerValue");

          v24 = v21 < v23;
          v21 -= v23;
          if (v24)
            break;
          if (++v20 == 18)
            goto LABEL_26;
        }
        if (v20)
          goto LABEL_27;
LABEL_26:
        v20 = arc4random() % 0x12;
LABEL_27:
        PKDemoMerchantToString(v20);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        v26 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v26, "setObject:forKeyedSubscript:", v71, CFSTR("itemIdentifier"));
        objc_msgSend(v26, "setObject:forKeyedSubscript:", v25, CFSTR("merchantIdentifier"));
        _demoMerchantToDictionary(v20);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectForKey:", CFSTR("minAmount"));
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v27, "objectForKey:", CFSTR("maxAmount"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v28, "length") && objc_msgSend(v29, "length"))
        {
          objc_msgSend(v28, "floatValue");
          v31 = v30;
          objc_msgSend(v29, "floatValue");
          v33 = v32;
          v34 = v31;
        }
        else
        {
          v33 = 500.0;
          v34 = 5.0;
        }
        _randomAmount(v34, v33);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "stringValue");
        v36 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "setObject:forKeyedSubscript:", v36, CFSTR("amount"));

        objc_msgSend(v26, "setObject:forKeyedSubscript:", CFSTR("USD"), CFSTR("currencyCode"));
        objc_msgSend(v26, "setObject:forKeyedSubscript:", CFSTR("USD"), CFSTR("source"));
        _dateFormatter();
        v37 = (void *)objc_claimAutoreleasedReturnValue();
        _randomDateBetweenDates(v73, v72);
        v38 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v37, "stringFromDate:", v38);
        v39 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "setObject:forKeyedSubscript:", v39, CFSTR("date"));

        objc_msgSend(v70, "addObject:", v26);
      }
    }
    if (v64 - v69 >= 1)
    {
      v40 = 0;
      do
      {
        v41 = off_1E2AD97E0[arc4random() % 0xA];
        v42 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v71, CFSTR("itemIdentifier"));
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v41, CFSTR("counterpartIdentifier"));
        if ((objc_msgSend(CFSTR("JonHerlihy"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 0;
        }
        else if ((objc_msgSend(CFSTR("KatieAbeles"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 1;
        }
        else if ((objc_msgSend(CFSTR("NancyNi"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 2;
        }
        else if ((objc_msgSend(CFSTR("BrianCarey"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 3;
        }
        else if ((objc_msgSend(CFSTR("RobertFabian"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 4;
        }
        else if ((objc_msgSend(CFSTR("RobynGlennon"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 5;
        }
        else if ((objc_msgSend(CFSTR("DaveKnox"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 6;
        }
        else if ((objc_msgSend(CFSTR("MelissaHouse"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 7;
        }
        else if ((objc_msgSend(CFSTR("LillySevilla"), "isEqualToString:", v41) & 1) != 0)
        {
          v43 = 8;
        }
        else if (objc_msgSend(CFSTR("GrayMcCarty"), "isEqualToString:", v41))
        {
          v43 = 9;
        }
        else
        {
          v43 = 0;
        }
        _demoPersonToDictionary(v43);
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "objectForKey:", CFSTR("minAmount"));
        v45 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v44, "objectForKey:", CFSTR("maxAmount"));
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v45, "length") && objc_msgSend(v46, "length"))
        {
          objc_msgSend(v45, "floatValue");
          v48 = v47;
          objc_msgSend(v46, "floatValue");
          v50 = v49;
          v51 = v48;
        }
        else
        {
          v50 = 500.0;
          v51 = 5.0;
        }
        _randomAmount(v51, v50);
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v52, "stringValue");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v53, CFSTR("amount"));

        objc_msgSend(v42, "setObject:forKeyedSubscript:", CFSTR("USD"), CFSTR("currencyCode"));
        _dateFormatter();
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        _randomDateBetweenDates(v73, v72);
        v55 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v54, "stringFromDate:", v55);
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v42, "setObject:forKeyedSubscript:", v56, CFSTR("date"));

        objc_msgSend(v70, "addObject:", v42);
        ++v40;
      }
      while (v40 < v64 - v69);
    }

    v8 = v67 + 1;
  }
  while (v67 != 2);

  return v70;
}

PKMerchant *_merchantFromDictionary(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  PKMapsMerchant *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  void *v19;
  void *v20;
  PKMapsBrand *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  PKMerchant *v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  v1 = a1;
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("brand"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("merchant"));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("name"));
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("city"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("state"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKey:", CFSTR("identifier"));
  v4 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("category"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = PKMerchantCategoryFromString(v5);

  objc_msgSend(v3, "objectForKey:", CFSTR("phoneNumber"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("merchantURL"));
  v7 = objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("locationLatitude"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("locationLongitude"));
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("detailedCategory"));
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("heroImageURL"));
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("heroImageProvider"));
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectForKey:", CFSTR("name"));
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("identifier"));
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("category"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = PKMerchantCategoryFromString(v9);

  objc_msgSend(v2, "objectForKey:", CFSTR("detailedCategory"));
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("logoURL"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "objectForKey:", CFSTR("url"));
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v2;
  objc_msgSend(v2, "objectForKey:", CFSTR("name"));
  v33 = (void *)v4;
  v34 = objc_claimAutoreleasedReturnValue();
  if (v4)
  {
    v10 = objc_alloc_init(PKMapsMerchant);
    objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", v4);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKMapsMerchant setIdentifier:](v10, "setIdentifier:", objc_msgSend(v11, "unsignedIntegerValue"));

    -[PKMapsMerchant setPhoneNumber:](v10, "setPhoneNumber:", v6);
    v12 = (void *)v7;
    if (v7)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v7);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKMapsMerchant setURL:](v10, "setURL:", v13);

    }
    v14 = v32;
    if (v32 && v8)
    {
      v15 = objc_alloc(MEMORY[0x1E0C9E3B8]);
      objc_msgSend(v32, "doubleValue");
      v17 = v16;
      objc_msgSend(v8, "doubleValue");
      v19 = (void *)objc_msgSend(v15, "initWithLatitude:longitude:", v17, v18);
      -[PKMapsMerchant setLocation:](v10, "setLocation:", v19);

    }
    -[PKMapsMerchant setCategory:](v10, "setCategory:", v30);
    -[PKMapsMerchant setDetailedCategory:](v10, "setDetailedCategory:", v46);
    if (v45)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v45);
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKMapsMerchant setHeroImageURL:](v10, "setHeroImageURL:", v20);

      -[PKMapsMerchant setHeroImageAttributionName:](v10, "setHeroImageAttributionName:", v40);
    }
    -[PKMapsMerchant setName:](v10, "setName:", v44);
  }
  else
  {
    v10 = 0;
    v14 = v32;
    v12 = (void *)v7;
  }
  v36 = v12;
  if (v47)
  {
    v21 = objc_alloc_init(PKMapsBrand);
    objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", v47);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    -[PKMapsBrand setIdentifier:](v21, "setIdentifier:", objc_msgSend(v22, "unsignedIntegerValue"));

    if (v41)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKMapsBrand setURL:](v21, "setURL:", v23);

    }
    -[PKMapsBrand setCategory:](v21, "setCategory:", v31);
    -[PKMapsBrand setDetailedCategory:](v21, "setDetailedCategory:", v43);
    if (v42)
    {
      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:");
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKMapsBrand setLogoURL:](v21, "setLogoURL:", v24);

    }
    v25 = v14;
    v27 = v33;
    v26 = (void *)v34;
    -[PKMapsBrand setName:](v21, "setName:", v34);
  }
  else
  {
    v25 = v14;
    v27 = v33;
    v26 = (void *)v34;
    v21 = 0;
  }
  v28 = objc_alloc_init(PKMerchant);
  -[PKMerchant setName:](v28, "setName:", v39);
  -[PKMerchant setRawName:](v28, "setRawName:", v39);
  -[PKMerchant setMapsMerchant:](v28, "setMapsMerchant:", v10);
  -[PKMerchant setMapsBrand:](v28, "setMapsBrand:", v21);
  -[PKMerchant setCity:](v28, "setCity:", v38);
  -[PKMerchant setState:](v28, "setState:", v37);

  return v28;
}

id _dateFormatter()
{
  if (qword_1ECF22AF8 != -1)
    dispatch_once(&qword_1ECF22AF8, &__block_literal_global_195);
  return (id)_MergedGlobals_275;
}

PKPaymentTransaction *_commonTransactionForAmount(void *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  __CFString *v9;
  id v10;
  PKPaymentTransaction *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  void *v15;
  uint32_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = a1;
  v11 = objc_alloc_init(PKPaymentTransaction);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "UUIDString");
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setIdentifier:](v11, "setIdentifier:", v13);

  -[PKPaymentTransaction setAmount:](v11, "setAmount:", v10);
  if (v9)
    v14 = v9;
  else
    v14 = CFSTR("USD");
  -[PKPaymentTransaction setCurrencyCode:](v11, "setCurrencyCode:", v14);

  -[PKPaymentTransaction setTransactionDate:](v11, "setTransactionDate:", v8);
  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeInterval:sinceDate:", v8, 20.0);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  -[PKPaymentTransaction setTransactionStatusChangedDate:](v11, "setTransactionStatusChangedDate:", v15);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("0000000000000000%016d"), arc4random_uniform(v16));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setPaymentHash:](v11, "setPaymentHash:", v17);

  -[PKPaymentTransaction setTransactionStatus:](v11, "setTransactionStatus:", 1);
  -[PKPaymentTransaction setHasNotificationServiceData:](v11, "setHasNotificationServiceData:", 1);
  objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v18, "UUIDString");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setServiceIdentifier:](v11, "setServiceIdentifier:", v19);

  -[PKPaymentTransaction setProcessedForLocation:](v11, "setProcessedForLocation:", 1);
  -[PKPaymentTransaction setProcessedForStations:](v11, "setProcessedForStations:", 1);
  -[PKPaymentTransaction setProcessedForMerchantCleanup:](v11, "setProcessedForMerchantCleanup:", 1);
  v20 = objc_msgSend(v7, "accountType");
  if (v20)
    v21 = v20;
  else
    v21 = 2;
  -[PKPaymentTransaction setAccountType:](v11, "setAccountType:", v21);
  -[PKPaymentTransaction setOriginatedByDevice:](v11, "setOriginatedByDevice:", 1);
  -[PKPaymentTransaction setTechnologyType:](v11, "setTechnologyType:", 2);
  objc_msgSend(v7, "accountIdentifier");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setAccountIdentifier:](v11, "setAccountIdentifier:", v22);

  -[PKPaymentTransaction addUpdateReasons:](v11, "addUpdateReasons:", 64);
  objc_msgSend(v7, "transactionSourceIdentifier");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  -[PKPaymentTransaction setTransactionSourceIdentifier:](v11, "setTransactionSourceIdentifier:", v23);

  objc_msgSend(v7, "altDSID");
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  -[PKPaymentTransaction setAltDSID:](v11, "setAltDSID:", v24);
  return v11;
}

void _updateTransactionWithCounterpartData(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  if (a2)
  {
    v3 = a2;
    v4 = a1;
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("counterpartHandle"));
    v8 = (id)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("memo"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("type"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v7 = PKPaymentTransactionPeerPaymentSubtypeFromString(v6);
    objc_msgSend(v4, "setTransactionType:", 3);
    objc_msgSend(v4, "setPeerPaymentType:", v7);
    objc_msgSend(v4, "setPeerPaymentStatus:", 1);
    objc_msgSend(v4, "setPeerPaymentMemo:", v5);
    objc_msgSend(v4, "setPeerPaymentCounterpartHandle:", v8);

  }
}

void _updateTransactionWithMerchantData(void *a1, void *a2, void *a3, void *a4, _QWORD *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  unint64_t v25;
  PKPaymentTransactionRewardsItem *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  NSDecimalNumber *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  NSDecimalNumber *v38;
  void *v39;
  PKPaymentTransactionRewardsItem *v40;
  NSDecimalNumber *v41;
  void *v42;
  void *v43;
  void *v44;
  PKPaymentTransactionRewards *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  PKAccountEvent *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  PKAccountRewards *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  _QWORD *v66;
  id v67;
  id v68;

  v68 = a1;
  v9 = a2;
  v10 = a4;
  v11 = a3;
  objc_msgSend(v9, "objectForKey:", CFSTR("source"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = PKPaymentTransactionSourceFromString(v12);

  objc_msgSend(v68, "setTransactionSource:", v13);
  objc_msgSend(v68, "setTransactionType:", 0);
  objc_msgSend(v11, "city");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "setLocality:", v14);

  objc_msgSend(v11, "state");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "setAdministrativeArea:", v15);

  objc_msgSend(v68, "setMerchant:", v11);
  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("panIdentifier"));
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v68, "setPANIdentifier:", v16);

  objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("rewardsType"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = PKPaymentTransactionRewardsItemTypeFromString(v17);

  v19 = objc_msgSend(v10, "accountType");
  objc_msgSend(v10, "accountIdentifier");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v20, "length") && v19 == 2)
  {
    objc_msgSend(v68, "setAccountIdentifier:", v20);
    objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("promotionName"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v10, "redemptionType");
    v23 = v68;
    v24 = v21;
    v25 = 0x1E0CB3000;
    if (v18)
    {
      v66 = a5;
      v26 = objc_alloc_init(PKPaymentTransactionRewardsItem);
      -[PKPaymentTransactionRewardsItem setType:](v26, "setType:", v18);
      objc_msgSend(MEMORY[0x1E0CB3598], "zero");
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = (void *)v27;
      v64 = v22;
      v65 = v20;
      if (v18 > 3)
      {
        v29 = (void *)v27;
      }
      else
      {
        objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", off_1E2AD97C8[v18 - 1]);
        v29 = (void *)objc_claimAutoreleasedReturnValue();

      }
      objc_msgSend(v23, "amount");
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v30, "decimalNumberByMultiplyingBy:", v29);
      v31 = (NSDecimalNumber *)objc_claimAutoreleasedReturnValue();

      PKCurrencyAmountCreate(v31, CFSTR("USD"), 0);
      v32 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentTransactionRewardsItem setCurrencyAmount:](v26, "setCurrencyAmount:", v32);

      -[PKPaymentTransactionRewardsItem setEligibleValueUnit:](v26, "setEligibleValueUnit:", 1);
      objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("100"));
      v33 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = v29;
      objc_msgSend(v29, "decimalNumberByMultiplyingBy:", v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentTransactionRewardsItem setEligibleValue:](v26, "setEligibleValue:", v34);

      objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v35, "UUIDString");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentTransactionRewardsItem setIdentifier:](v26, "setIdentifier:", v36);

      -[PKPaymentTransactionRewardsItem setState:](v26, "setState:", 2);
      objc_msgSend(MEMORY[0x1E0C99DE8], "array");
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v37, "addObject:", v26);
      v38 = v31;
      v39 = v38;
      v67 = v24;
      if (v24)
      {
        v40 = objc_alloc_init(PKPaymentTransactionRewardsItem);
        -[PKPaymentTransactionRewardsItem setType:](v40, "setType:", 5);
        v41 = (NSDecimalNumber *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3598]), "initWithInt:", 75);
        PKCurrencyAmountCreate(v41, CFSTR("USD"), 0);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKPaymentTransactionRewardsItem setCurrencyAmount:](v40, "setCurrencyAmount:", v42);

        -[PKPaymentTransactionRewardsItem setEligibleValueUnit:](v40, "setEligibleValueUnit:", 2);
        -[PKPaymentTransactionRewardsItem setEligibleValue:](v40, "setEligibleValue:", v41);
        objc_msgSend(MEMORY[0x1E0CB3A28], "UUID");
        v43 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v43, "UUIDString");
        v44 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKPaymentTransactionRewardsItem setIdentifier:](v40, "setIdentifier:", v44);

        -[PKPaymentTransactionRewardsItem setState:](v40, "setState:", 2);
        -[PKPaymentTransactionRewardsItem setPromotionName:](v40, "setPromotionName:", v67);
        objc_msgSend(v37, "addObject:", v40);
        -[NSDecimalNumber decimalNumberByAdding:](v38, "decimalNumberByAdding:", v41);
        v39 = (void *)objc_claimAutoreleasedReturnValue();

      }
      v45 = objc_alloc_init(PKPaymentTransactionRewards);
      v46 = (void *)objc_msgSend(v37, "copy");
      -[PKPaymentTransactionRewards setRewardsItems:](v45, "setRewardsItems:", v46);

      objc_msgSend(v23, "setRewards:", v45);
      objc_msgSend(v23, "setRewardsTotalAmount:", v39);
      objc_msgSend(v23, "setRewardsTotalCurrencyCode:", CFSTR("USD"));
      objc_msgSend(v23, "setRedemptionType:", v64);

      v20 = v65;
      a5 = v66;
      v25 = 0x1E0CB3000uLL;
      v24 = v67;
    }

    objc_msgSend(v23, "rewards");
    v47 = objc_claimAutoreleasedReturnValue();
    if (v47)
    {
      v48 = (void *)v47;
      v49 = objc_msgSend(v23, "redemptionType");

      if (v49)
      {
        v50 = objc_alloc_init(PKAccountEvent);
        objc_msgSend(*(id *)(v25 + 2600), "UUID");
        v51 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v51, "UUIDString");
        v52 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountEvent setIdentifier:](v50, "setIdentifier:", v52);

        -[PKAccountEvent setAccountIdentifier:](v50, "setAccountIdentifier:", v20);
        objc_msgSend(v10, "altDSID");
        v53 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountEvent setAltDSID:](v50, "setAltDSID:", v53);

        objc_msgSend(v23, "transactionDate");
        v54 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountEvent setDate:](v50, "setDate:", v54);

        -[PKAccountEvent setType:](v50, "setType:", 1);
        v55 = objc_alloc_init(PKAccountRewards);
        objc_msgSend(v23, "serviceIdentifier");
        v56 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountRewards setIdentifier:](v55, "setIdentifier:", v56);

        v57 = (void *)MEMORY[0x1E0C99E60];
        objc_msgSend(v23, "serviceIdentifier");
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v57, "setWithObject:", v58);
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountRewards setTransactionIdentifiers:](v55, "setTransactionIdentifiers:", v59);

        -[PKAccountRewards setStatus:](v55, "setStatus:", CFSTR("success"));
        objc_msgSend(v23, "rewards");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountRewards setRewards:](v55, "setRewards:", v60);

        -[PKAccountRewards setType:](v55, "setType:", objc_msgSend(v23, "redemptionType"));
        objc_msgSend(v23, "rewardsTotalCurrencyAmount");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountRewards setCurrencyAmount:](v55, "setCurrencyAmount:", v61);

        objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v55);
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKAccountEvent setItems:](v50, "setItems:", v62);

        if (a5)
          *a5 = objc_retainAutorelease(v50);

      }
    }
  }

}

id _removeFutureTransactionsFromTransaction(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  _QWORD v7[4];
  id v8;

  v1 = (void *)MEMORY[0x1E0C99D68];
  v2 = a1;
  objc_msgSend(v1, "date");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___removeFutureTransactionsFromTransaction_block_invoke;
  v7[3] = &unk_1E2ACFA48;
  v8 = v3;
  v4 = v3;
  objc_msgSend(v2, "pk_objectsPassingTest:", v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

BOOL ___removeFutureTransactionsFromTransaction_block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  _BOOL8 v4;

  v2 = *(void **)(a1 + 32);
  objc_msgSend(a2, "transactionDate");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(v2, "compare:", v3) != -1;

  return v4;
}

uint64_t ___dateFormatter_block_invoke()
{
  id v0;
  void *v1;

  v0 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  v1 = (void *)_MergedGlobals_275;
  _MergedGlobals_275 = (uint64_t)v0;

  return objc_msgSend((id)_MergedGlobals_275, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mmZZZ"));
}

id _randomAmount(float a1, float a2)
{
  double v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v11[2];
  int v12;

  *(float *)&v2 = a1 + (float)((float)((float)(arc4random() & 0x7FFFFFFF) * 4.6566e-10) * (float)(a2 - a1));
  v3 = (void *)MEMORY[0x1E0CB3598];
  objc_msgSend(MEMORY[0x1E0CB3598], "numberWithFloat:", v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = v4;
  if (v4)
  {
    objc_msgSend(v4, "decimalValue");
  }
  else
  {
    v11[0] = 0;
    v11[1] = 0;
    v12 = 0;
  }
  objc_msgSend(v3, "decimalNumberWithDecimal:", v11);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x1E0CB35A0], "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", 0, 2, 0, 0, 0, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "decimalNumberByRoundingAccordingToBehavior:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v8, "pk_absoluteValue");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  return v9;
}

id _randomDateBetweenDates(void *a1, void *a2)
{
  id v3;
  double v4;
  void *v5;

  v3 = a1;
  objc_msgSend(a2, "timeIntervalSinceDate:", v3);
  objc_msgSend(v3, "dateByAddingTimeInterval:", v4 * ((double)arc4random() / 4294967300.0));
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

id _weightForMerchant(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  int v4;
  uint64_t v5;

  _demoMerchantToDictionary(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("weight"));
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v2
    || (objc_msgSend(MEMORY[0x1E0CB3598], "notANumber"),
        v3 = (void *)objc_claimAutoreleasedReturnValue(),
        v4 = objc_msgSend(v2, "isEqual:", v3),
        v3,
        v4))
  {
    objc_msgSend(MEMORY[0x1E0CB3598], "zero");
    v5 = objc_claimAutoreleasedReturnValue();

    v2 = (void *)v5;
  }

  return v2;
}

uint64_t PKProtobufPaymentApplicationReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  void *v76;
  char v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  uint64_t result;
  PKProtobufCustomPrecisionAmount *v84;
  char v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char v90;
  char v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 80;
        goto LABEL_99;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_99;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_99;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
        goto LABEL_99;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 120;
        goto LABEL_99;
      case 6u:
        v19 = 0;
        v20 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 152) |= 0x20u;
        while (2)
        {
          v22 = *v3;
          v23 = *(_QWORD *)(a2 + v22);
          if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v23);
            *(_QWORD *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if (v24 < 0)
            {
              v19 += 7;
              v14 = v20++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_132:
        v97 = 128;
        goto LABEL_170;
      case 7u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_99;
      case 8u:
        v25 = 0;
        v26 = 0;
        v27 = 0;
        *(_WORD *)(a1 + 152) |= 0x100u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              v14 = v26++ >= 9;
              if (v14)
              {
                v27 = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v27 = 0;
LABEL_136:
        v98 = v27 != 0;
        v99 = 146;
        goto LABEL_183;
      case 9u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_WORD *)(a1 + 152) |= 0x200u;
        while (2)
        {
          v34 = *v3;
          v35 = *(_QWORD *)(a2 + v34);
          if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v35);
            *(_QWORD *)(a2 + v34) = v35 + 1;
            v33 |= (unint64_t)(v36 & 0x7F) << v31;
            if (v36 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                v33 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v33 = 0;
LABEL_140:
        v98 = v33 != 0;
        v99 = 147;
        goto LABEL_183;
      case 0xAu:
        v37 = 0;
        v38 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 152) |= 8u;
        while (2)
        {
          v39 = *v3;
          v40 = *(_QWORD *)(a2 + v39);
          if (v40 == -1 || v40 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v41 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v40);
            *(_QWORD *)(a2 + v39) = v40 + 1;
            v21 |= (unint64_t)(v41 & 0x7F) << v37;
            if (v41 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_144:
        v97 = 104;
        goto LABEL_170;
      case 0xBu:
        v42 = 0;
        v43 = 0;
        v44 = 0;
        *(_WORD *)(a1 + 152) |= 0x80u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v44 |= (unint64_t)(v47 & 0x7F) << v42;
            if (v47 < 0)
            {
              v42 += 7;
              v14 = v43++ >= 9;
              if (v14)
              {
                v44 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v44 = 0;
LABEL_148:
        v98 = v44 != 0;
        v99 = 145;
        goto LABEL_183;
      case 0xCu:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_WORD *)(a1 + 152) |= 1u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 1;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                v50 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
LABEL_152:
        v100 = -(v50 & 1) ^ (v50 >> 1);
        v101 = 8;
        goto LABEL_165;
      case 0xDu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_99;
      case 0xEu:
        v54 = 0;
        v55 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 152) |= 0x10u;
        while (2)
        {
          v56 = *v3;
          v57 = *(_QWORD *)(a2 + v56);
          if (v57 == -1 || v57 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v58 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v57);
            *(_QWORD *)(a2 + v56) = v57 + 1;
            v21 |= (unint64_t)(v58 & 0x7F) << v54;
            if (v58 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_156:
        v97 = 108;
        goto LABEL_170;
      case 0xFu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_99;
      case 0x10u:
        v59 = 0;
        v60 = 0;
        v61 = 0;
        *(_WORD *)(a1 + 152) |= 0x40u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v61 |= (unint64_t)(v64 & 0x7F) << v59;
            if (v64 < 0)
            {
              v59 += 7;
              v14 = v60++ >= 9;
              if (v14)
              {
                v61 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v61 = 0;
LABEL_160:
        v98 = v61 != 0;
        v99 = 144;
        goto LABEL_183;
      case 0x11u:
        v65 = 0;
        v66 = 0;
        v67 = 0;
        *(_WORD *)(a1 + 152) |= 2u;
        while (2)
        {
          v68 = *v3;
          v69 = *(_QWORD *)(a2 + v68);
          if (v69 == -1 || v69 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v70 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v69);
            *(_QWORD *)(a2 + v68) = v69 + 1;
            v67 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              v14 = v66++ >= 9;
              if (v14)
              {
                v67 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v67 = 0;
LABEL_164:
        v100 = -(v67 & 1) ^ (v67 >> 1);
        v101 = 16;
LABEL_165:
        *(_QWORD *)(a1 + v101) = v100;
        goto LABEL_184;
      case 0x12u:
        v71 = 0;
        v72 = 0;
        v21 = 0;
        *(_WORD *)(a1 + 152) |= 4u;
        while (2)
        {
          v73 = *v3;
          v74 = *(_QWORD *)(a2 + v73);
          if (v74 == -1 || v74 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v75 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v74);
            *(_QWORD *)(a2 + v73) = v74 + 1;
            v21 |= (unint64_t)(v75 & 0x7F) << v71;
            if (v75 < 0)
            {
              v71 += 7;
              v14 = v72++ >= 9;
              if (v14)
              {
                LODWORD(v21) = 0;
                goto LABEL_169;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v21) = 0;
LABEL_169:
        v97 = 48;
LABEL_170:
        *(_DWORD *)(a1 + v97) = v21;
        goto LABEL_184;
      case 0x13u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_99;
      case 0x14u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 32;
LABEL_99:
        v76 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_184;
      case 0x15u:
        v77 = 0;
        v78 = 0;
        v79 = 0;
        *(_WORD *)(a1 + 152) |= 0x800u;
        while (2)
        {
          v80 = *v3;
          v81 = *(_QWORD *)(a2 + v80);
          if (v81 == -1 || v81 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v82 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v81);
            *(_QWORD *)(a2 + v80) = v81 + 1;
            v79 |= (unint64_t)(v82 & 0x7F) << v77;
            if (v82 < 0)
            {
              v77 += 7;
              v14 = v78++ >= 9;
              if (v14)
              {
                v79 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v79 = 0;
LABEL_174:
        v98 = v79 != 0;
        v99 = 149;
        goto LABEL_183;
      case 0x17u:
        v84 = objc_alloc_init(PKProtobufCustomPrecisionAmount);
        objc_storeStrong((id *)(a1 + 64), v84);
        if (!PBReaderPlaceMark() || (PKProtobufCustomPrecisionAmountReadFrom((uint64_t)v84, a2) & 1) == 0)
          goto LABEL_186;
        goto LABEL_121;
      case 0x18u:
        v85 = 0;
        v86 = 0;
        v87 = 0;
        *(_WORD *)(a1 + 152) |= 0x1000u;
        while (2)
        {
          v88 = *v3;
          v89 = *(_QWORD *)(a2 + v88);
          if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v90 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v89);
            *(_QWORD *)(a2 + v88) = v89 + 1;
            v87 |= (unint64_t)(v90 & 0x7F) << v85;
            if (v90 < 0)
            {
              v85 += 7;
              v14 = v86++ >= 9;
              if (v14)
              {
                v87 = 0;
                goto LABEL_178;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v87 = 0;
LABEL_178:
        v98 = v87 != 0;
        v99 = 150;
        goto LABEL_183;
      case 0x19u:
        v84 = objc_alloc_init(PKProtobufNSDecimalNumber);
        objc_storeStrong((id *)(a1 + 56), v84);
        if (PBReaderPlaceMark() && (PKProtobufNSDecimalNumberReadFrom((uint64_t)v84, a2) & 1) != 0)
        {
LABEL_121:
          PBReaderRecallMark();

LABEL_184:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_186:

        return 0;
      case 0x1Au:
        v91 = 0;
        v92 = 0;
        v93 = 0;
        *(_WORD *)(a1 + 152) |= 0x400u;
        while (2)
        {
          v94 = *v3;
          v95 = *(_QWORD *)(a2 + v94);
          if (v95 == -1 || v95 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v96 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v95);
            *(_QWORD *)(a2 + v94) = v95 + 1;
            v93 |= (unint64_t)(v96 & 0x7F) << v91;
            if (v96 < 0)
            {
              v91 += 7;
              v14 = v92++ >= 9;
              if (v14)
              {
                v93 = 0;
                goto LABEL_182;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v93 = 0;
LABEL_182:
        v98 = v93 != 0;
        v99 = 148;
LABEL_183:
        *(_BYTE *)(a1 + v99) = v98;
        goto LABEL_184;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_184;
    }
  }
}

const __CFString *PKStringFromAccountVirtualCardStatusUpdateReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD9870[a1 - 1];
}

uint64_t PKAccountVirtualCardStatusUpdateReasonFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("expiration"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("expiration"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("fraud")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("fraud")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("stolen")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("stolen")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("other")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("other")),
          v12,
          v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

const __CFString *PKPeerPaymentEncryptionCertificateDestinationToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("recipientData");
  else
    return CFSTR("unknown");
}

BOOL PKPeerPaymentEncryptionCertificateDestinationFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("recipientData"))
  {
    if (!v1
      || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("recipientData")), v2, !v3))
    {
      v4 = 0;
    }
  }

  return v4;
}

const __CFString *PKFeatureApplicationOfferDetailsInfoLayoutToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("text");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("table");
  else
    return v1;
}

uint64_t PKFeatureApplicationStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("new")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("prescreened")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("preapproved")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("open")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("decisioning")) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("approved")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("declined")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("withdrawn")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("accepted")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("booked")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rejected")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("expired")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("closed")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("cancelled")) & 1) != 0)
  {
    v2 = 13;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("removed")))
  {
    v2 = 15;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKFeatureApplicationStateToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF)
    return CFSTR("unknown");
  else
    return off_1E2AD98C8[a1 - 1];
}

uint64_t PKFeatureApplicationStateIsTerminal(unint64_t a1)
{
  return (a1 < 0x11) & (0xFE81u >> a1);
}

BOOL PKFeatureApplicationStateIsPendingInvitation(unint64_t a1)
{
  return (((0xFE81u >> a1) & 1) == 0 || a1 > 0x10) && a1 != 1 && a1 != 4;
}

uint64_t PKFeatureApplicationStateIsValidToPresent(unint64_t a1)
{
  return (a1 < 0x11) & (0x101F0u >> a1);
}

uint64_t PKFeatureApplicationStateReasonFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inProcess")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("manualReview")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("outOfBandIDV")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("factaPhoneMatch")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("factaExtendedAlert")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("creditFreeze")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("duplicateApplication")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("manualIDVReview")) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("invitationAcceptance")) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("mergePending")) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("otherOwnerPendingAcceptance")) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rejectedByOriginator")) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rejectedByAccountUser")) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("ineligible")) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pathToOfferCompleted")) & 1) != 0)
  {
    v2 = 15;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("counterOffer")))
  {
    v2 = 16;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKFeatureApplicationStateReasonToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xF)
    return CFSTR("none");
  else
    return off_1E2AD9948[a1 - 1];
}

uint64_t PKFeatureApplicationTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("primary"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_22:
    v4 = v2 == 0;
    goto LABEL_23;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("primary"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("accountUser")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("accountUser")),
          v6,
          (v7 & 1) != 0)
      || (v8 = v6, v8 == CFSTR("invite"))
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("invite")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_23;
    }
    v11 = v9;
    if (v11 == CFSTR("joint")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("joint")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_23;
    }
    v14 = v12;
    if (v14 == CFSTR("updateUserInfo")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("updateUserInfo")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_23;
    }
    v17 = v15;
    if (v17 == CFSTR("fccStepUp")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("fccStepUp")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_23;
    }
    v20 = v18;
    if (v20 == CFSTR("verification")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("verification")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_4:
  v4 = 1;
LABEL_23:

  return v4;
}

const __CFString *PKFeatureApplicationTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E2AD99C8[a1 - 1];
}

const __CFString *PKFeatureApplicationChannelToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("paymentSheet");
  if (a1 != 2)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("wallet");
  else
    return v1;
}

uint64_t PKFeatureApplicationChannelFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("wallet"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("wallet"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("paymentSheet")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("paymentSheet")),
          v6,
          v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKFeatureApplicationUpdateUserInfoSubTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("updatePhoneNumber"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("updatePhoneNumber"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("updateAddress")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("updateAddress")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("updateIncome")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("updateIncome")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("addBeneficiary")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("addBeneficiary")),
          v12,
          v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

const __CFString *PKFeatureApplicationUpdateUserInfoSubTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD99F8[a1 - 1];
}

BOOL PKFeatureApplicationAssociatedIntentFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("changeRewardsDestination"))
  {
    if (!v1
      || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("changeRewardsDestination")),
          v2,
          !v3))
    {
      v4 = 0;
    }
  }

  return v4;
}

const __CFString *PKFeatureApplicationAssociatedIntentToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("changeRewardsDestination");
  else
    return CFSTR("unknown");
}

BOOL PKProtobufRecurringPaymentRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  uint64_t v17;
  uint64_t v18;
  PKProtobufPaymentSummaryItem *v19;
  uint64_t v20;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 24;
        goto LABEL_30;
      case 2u:
        v19 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        v20 = 32;
        goto LABEL_24;
      case 3u:
        v19 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        v20 = 48;
LABEL_24:
        objc_storeStrong((id *)(a1 + v20), v19);
        if (PBReaderPlaceMark() && (PKProtobufPaymentSummaryItemReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
          PBReaderRecallMark();
LABEL_31:

LABEL_32:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }

        return 0;
      case 4u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 8;
        goto LABEL_30;
      case 5u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_30;
      case 6u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
LABEL_30:
        v19 = *(PKProtobufPaymentSummaryItem **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;
        goto LABEL_31;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0)
          return 0;
        goto LABEL_32;
    }
  }
}

id PKPaymentTransactionTagTypeToLocalizedString(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = a1 - 1;
  if ((unint64_t)(a1 - 1) <= 0x12 && ((0x607FFu >> v3) & 1) != 0)
  {
    PKLocalizedString(&off_1E2AD9BC0[v3]->isa, 0, v1, v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v4 = 0;
  }
  return v4;
}

id PKPaymentAuthorizationHostInterface()
{
  if (qword_1ECF22B18 != -1)
    dispatch_once(&qword_1ECF22B18, &__block_literal_global_199);
  return (id)_MergedGlobals_277;
}

const __CFString *PKPaymentSetupFeatureStateToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD9C90[a1];
}

const __CFString *PKPaymentSetupFeatureTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2AD9C70[a1];
}

void sub_1902D21C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  id *v40;
  uint64_t v41;

  objc_destroyWeak(v40);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v41 - 216), 8);
  _Block_object_dispose((const void *)(v41 - 160), 8);
  objc_destroyWeak((id *)(v41 - 168));
  _Unwind_Resume(a1);
}

void sub_1902D2D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1902D2FD0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

const __CFString *PKPassTileForeignReferenceTypeToString(uint64_t a1)
{
  if (a1 == 1)
    return CFSTR("balance");
  else
    return 0;
}

BOOL PKPassTileForeignReferenceTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("balance"))
  {
    if (!v1
      || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("balance")),
          v2,
          v2,
          (v3 & 1) == 0))
    {
      v4 = 0;
    }
  }

  return v4;
}

void sub_1902D5720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902D8278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902DC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKTransactionSourceTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2ADA118[a1];
}

unsigned __int8 *PKXPCForwarderIsInvalidated(void *a1)
{
  unsigned __int8 *result;
  unsigned __int8 v2;
  uint64_t v3;

  result = a1;
  if (result)
  {
    v2 = atomic_load(result + 12);
    v3 = v2 & 1;

    return (unsigned __int8 *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PKProtobufPaymentRequestReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  PKProtobufPaymentSummaryItem *v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t result;
  char v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  char v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  char v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  char v81;
  unsigned int v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  void *v86;
  char v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) >= *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
    return *(_BYTE *)(a2 + *v5) == 0;
  v7 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    if (*(_BYTE *)(a2 + *v5))
      return *(_BYTE *)(a2 + *v5) == 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      v14 = v9++ >= 9;
      if (v14)
      {
        v10 = 0;
        v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      v10 = 0;
LABEL_14:
    if (v15 || (v10 & 7) == 4)
      return *(_BYTE *)(a2 + *v5) == 0;
    switch((v10 >> 3))
    {
      case 1u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 112;
        goto LABEL_153;
      case 2u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 64;
        goto LABEL_153;
      case 3u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 72;
        goto LABEL_153;
      case 4u:
        PBReaderReadString();
        v19 = (PKProtobufPaymentSummaryItem *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend((id)a1, "addSupportedNetworks:", v19);
        goto LABEL_151;
      case 5u:
        v20 = 0;
        v21 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 4u;
        while (2)
        {
          v23 = *v3;
          v24 = *(_QWORD *)(a2 + v23);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v24);
            *(_QWORD *)(a2 + v23) = v24 + 1;
            v22 |= (unint64_t)(v25 & 0x7F) << v20;
            if (v25 < 0)
            {
              v20 += 7;
              v14 = v21++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_164:
        v93 = 104;
        goto LABEL_210;
      case 6u:
        v26 = 0;
        v27 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 0x80u;
        while (2)
        {
          v28 = *v3;
          v29 = *(_QWORD *)(a2 + v28);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
            *(_QWORD *)(a2 + v28) = v29 + 1;
            v22 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v14 = v27++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_168;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_168:
        v93 = 164;
        goto LABEL_210;
      case 7u:
        v31 = 0;
        v32 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 0x100u;
        while (2)
        {
          v33 = *v3;
          v34 = *(_QWORD *)(a2 + v33);
          if (v34 == -1 || v34 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v34);
            *(_QWORD *)(a2 + v33) = v34 + 1;
            v22 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_172;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_172:
        v93 = 176;
        goto LABEL_210;
      case 8u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 40;
        goto LABEL_153;
      case 9u:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 192;
        goto LABEL_153;
      case 0xAu:
        v19 = objc_alloc_init(PKProtobufPaymentSummaryItem);
        objc_msgSend((id)a1, "addSummaryItems:", v19);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentSummaryItemReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_218;
        goto LABEL_150;
      case 0xBu:
        v19 = objc_alloc_init(PKProtobufShippingMethod);
        objc_msgSend((id)a1, "addShippingMethods:", v19);
        if (!PBReaderPlaceMark() || (PKProtobufShippingMethodReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_218;
        goto LABEL_150;
      case 0xCu:
        PBReaderReadData();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 16;
        goto LABEL_153;
      case 0xDu:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 136;
        goto LABEL_153;
      case 0xFu:
        v19 = objc_alloc_init(PKProtobufPaymentMerchantSession);
        objc_storeStrong((id *)(a1 + 120), v19);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentMerchantSessionReadFrom(v19, a2) & 1) == 0)
          goto LABEL_218;
        goto LABEL_150;
      case 0x10u:
        PBReaderReadString();
        v19 = (PKProtobufPaymentSummaryItem *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend((id)a1, "addThumbnailURLs:", v19);
        goto LABEL_151;
      case 0x11u:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        *(_WORD *)(a1 + 252) |= 0x200u;
        while (2)
        {
          v40 = *v3;
          v41 = *(_QWORD *)(a2 + v40);
          if (v41 == -1 || v41 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v41);
            *(_QWORD *)(a2 + v40) = v41 + 1;
            v39 |= (unint64_t)(v42 & 0x7F) << v37;
            if (v42 < 0)
            {
              v37 += 7;
              v14 = v38++ >= 9;
              if (v14)
              {
                v39 = 0;
                goto LABEL_176;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v39 = 0;
LABEL_176:
        v94 = v39 != 0;
        v95 = 248;
        goto LABEL_205;
      case 0x12u:
        PBReaderReadString();
        v19 = (PKProtobufPaymentSummaryItem *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend((id)a1, "addRequiredShippingContactFields:", v19);
        goto LABEL_151;
      case 0x13u:
        PBReaderReadString();
        v19 = (PKProtobufPaymentSummaryItem *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend((id)a1, "addRequiredBillingContactFields:", v19);
        goto LABEL_151;
      case 0x14u:
        PBReaderReadString();
        v19 = (PKProtobufPaymentSummaryItem *)objc_claimAutoreleasedReturnValue();
        if (v19)
          objc_msgSend((id)a1, "addSupportedCountries:", v19);
        goto LABEL_151;
      case 0x15u:
        v43 = 0;
        v44 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 1u;
        while (2)
        {
          v45 = *v3;
          v46 = *(_QWORD *)(a2 + v45);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v46);
            *(_QWORD *)(a2 + v45) = v46 + 1;
            v22 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              v14 = v44++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_180;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_180:
        v93 = 8;
        goto LABEL_210;
      case 0x18u:
        v19 = objc_alloc_init(PKProtobufPaymentContentItem);
        objc_msgSend((id)a1, "addContentItems:", v19);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentContentItemReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_218;
        goto LABEL_150;
      case 0x19u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 88;
        goto LABEL_153;
      case 0x1Au:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 96;
        goto LABEL_153;
      case 0x1Bu:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_WORD *)(a1 + 252) |= 0x1000u;
        while (2)
        {
          v51 = *v3;
          v52 = *(_QWORD *)(a2 + v51);
          if (v52 == -1 || v52 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v53 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v52);
            *(_QWORD *)(a2 + v51) = v52 + 1;
            v50 |= (unint64_t)(v53 & 0x7F) << v48;
            if (v53 < 0)
            {
              v48 += 7;
              v14 = v49++ >= 9;
              if (v14)
              {
                v50 = 0;
                goto LABEL_184;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v50 = 0;
LABEL_184:
        v94 = v50 != 0;
        v95 = 251;
        goto LABEL_205;
      case 0x1Cu:
        v54 = 0;
        v55 = 0;
        v56 = 0;
        *(_WORD *)(a1 + 252) |= 0x800u;
        while (2)
        {
          v57 = *v3;
          v58 = *(_QWORD *)(a2 + v57);
          if (v58 == -1 || v58 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v59 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v58);
            *(_QWORD *)(a2 + v57) = v58 + 1;
            v56 |= (unint64_t)(v59 & 0x7F) << v54;
            if (v59 < 0)
            {
              v54 += 7;
              v14 = v55++ >= 9;
              if (v14)
              {
                v56 = 0;
                goto LABEL_188;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v56 = 0;
LABEL_188:
        v94 = v56 != 0;
        v95 = 250;
        goto LABEL_205;
      case 0x1Du:
        v60 = 0;
        v61 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 0x20u;
        while (2)
        {
          v62 = *v3;
          v63 = *(_QWORD *)(a2 + v62);
          if (v63 == -1 || v63 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v64 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v63);
            *(_QWORD *)(a2 + v62) = v63 + 1;
            v22 |= (unint64_t)(v64 & 0x7F) << v60;
            if (v64 < 0)
            {
              v60 += 7;
              v14 = v61++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_192;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_192:
        v93 = 156;
        goto LABEL_210;
      case 0x1Eu:
        v65 = 0;
        v66 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 2u;
        while (2)
        {
          v67 = *v3;
          v68 = *(_QWORD *)(a2 + v67);
          if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v69 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v68);
            *(_QWORD *)(a2 + v67) = v68 + 1;
            v22 |= (unint64_t)(v69 & 0x7F) << v65;
            if (v69 < 0)
            {
              v65 += 7;
              v14 = v66++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_196;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_196:
        v93 = 48;
        goto LABEL_210;
      case 0x1Fu:
        v70 = 0;
        v71 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 0x10u;
        while (2)
        {
          v72 = *v3;
          v73 = *(_QWORD *)(a2 + v72);
          if (v73 == -1 || v73 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v74 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v73);
            *(_QWORD *)(a2 + v72) = v73 + 1;
            v22 |= (unint64_t)(v74 & 0x7F) << v70;
            if (v74 < 0)
            {
              v70 += 7;
              v14 = v71++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_200;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_200:
        v93 = 152;
        goto LABEL_210;
      case 0x20u:
        v19 = objc_alloc_init(PKProtobufShippingMethods);
        objc_storeStrong((id *)(a1 + 32), v19);
        if (!PBReaderPlaceMark() || !PKProtobufShippingMethodsReadFrom((id *)&v19->super.super.isa, a2))
          goto LABEL_218;
        goto LABEL_150;
      case 0x21u:
        v19 = objc_alloc_init(PKProtobufRecurringPaymentRequest);
        objc_storeStrong((id *)(a1 + 144), v19);
        if (!PBReaderPlaceMark() || !PKProtobufRecurringPaymentRequestReadFrom((uint64_t)v19, a2))
          goto LABEL_218;
        goto LABEL_150;
      case 0x22u:
        v19 = objc_alloc_init(PKProtobufPaymentTokenContext);
        objc_msgSend((id)a1, "addMultiTokenContexts:", v19);
        if (!PBReaderPlaceMark() || (PKProtobufPaymentTokenContextReadFrom((uint64_t)v19, a2) & 1) == 0)
          goto LABEL_218;
        goto LABEL_150;
      case 0x23u:
        v75 = 0;
        v76 = 0;
        v77 = 0;
        *(_WORD *)(a1 + 252) |= 0x400u;
        while (2)
        {
          v78 = *v3;
          v79 = *(_QWORD *)(a2 + v78);
          if (v79 == -1 || v79 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v79);
            *(_QWORD *)(a2 + v78) = v79 + 1;
            v77 |= (unint64_t)(v80 & 0x7F) << v75;
            if (v80 < 0)
            {
              v75 += 7;
              v14 = v76++ >= 9;
              if (v14)
              {
                v77 = 0;
                goto LABEL_204;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          v77 = 0;
LABEL_204:
        v94 = v77 != 0;
        v95 = 249;
LABEL_205:
        *(_BYTE *)(a1 + v95) = v94;
        goto LABEL_211;
      case 0x24u:
        v19 = objc_alloc_init(PKProtobufAutomaticReloadPaymentRequest);
        objc_storeStrong((id *)(a1 + 24), v19);
        if (!PBReaderPlaceMark() || !PKProtobufAutomaticReloadPaymentRequestReadFrom((uint64_t)v19, a2))
          goto LABEL_218;
        goto LABEL_150;
      case 0x25u:
        v81 = 0;
        v82 = 0;
        v22 = 0;
        *(_WORD *)(a1 + 252) |= 0x40u;
        while (2)
        {
          v83 = *v3;
          v84 = *(_QWORD *)(a2 + v83);
          if (v84 == -1 || v84 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v85 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v84);
            *(_QWORD *)(a2 + v83) = v84 + 1;
            v22 |= (unint64_t)(v85 & 0x7F) << v81;
            if (v85 < 0)
            {
              v81 += 7;
              v14 = v82++ >= 9;
              if (v14)
              {
                LODWORD(v22) = 0;
                goto LABEL_209;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v22) = 0;
LABEL_209:
        v93 = 160;
LABEL_210:
        *(_DWORD *)(a1 + v93) = v22;
        goto LABEL_211;
      case 0x26u:
        v19 = objc_alloc_init(PKProtobufDeferredPaymentRequest);
        objc_storeStrong((id *)(a1 + 80), v19);
        if (PBReaderPlaceMark() && (PKProtobufDeferredPaymentRequestReadFrom((uint64_t)v19, a2) & 1) != 0)
        {
LABEL_150:
          PBReaderRecallMark();
LABEL_151:

LABEL_211:
          if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
            return *(_BYTE *)(a2 + *v5) == 0;
          continue;
        }
LABEL_218:

        return 0;
      case 0x27u:
        PBReaderReadString();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = 240;
LABEL_153:
        v86 = *(void **)(a1 + v18);
        *(_QWORD *)(a1 + v18) = v17;

        goto LABEL_211;
      case 0x28u:
        v87 = 0;
        v88 = 0;
        v89 = 0;
        *(_WORD *)(a1 + 252) |= 8u;
        while (2)
        {
          v90 = *v3;
          v91 = *(_QWORD *)(a2 + v90);
          if (v91 == -1 || v91 >= *(_QWORD *)(a2 + *v4))
          {
            *(_BYTE *)(a2 + *v5) = 1;
          }
          else
          {
            v92 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v91);
            *(_QWORD *)(a2 + v90) = v91 + 1;
            v89 |= (unint64_t)(v92 & 0x7F) << v87;
            if (v92 < 0)
            {
              v87 += 7;
              v14 = v88++ >= 9;
              if (v14)
              {
                LODWORD(v89) = 0;
                goto LABEL_216;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v89) = 0;
LABEL_216:
        *(_DWORD *)(a1 + 108) = -(v89 & 1) ^ ((int)v89 >> 1);
        goto LABEL_211;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_211;
    }
  }
}

void sub_1902EDB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKACAccountChangeTypeDescription(const __CFString *result)
{
  if (!result)
    return CFSTR("appleaccount");
  if (result == (const __CFString *)1)
    return CFSTR("itunesstore");
  __break(1u);
  return result;
}

__CFString *PKACAccountChangeOperationDescription(__CFString *result)
{
  if ((unint64_t)result < 4)
    return off_1E2ADA400[(_QWORD)result];
  __break(1u);
  return result;
}

__CFString *PKACAccountChangeEventDescription(__CFString *result)
{
  if ((unint64_t)result < 3)
    return off_1E2ADA420[(_QWORD)result];
  __break(1u);
  return result;
}

BOOL PKRemoteImageDimensionIsAutomatic(double a1)
{
  return a1 == -1.79769313e308;
}

BOOL PKRemoteImageDimensionIsMaximum(double a1)
{
  return a1 == 1.79769313e308;
}

uint64_t PKRemoteImageScaleFactorFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("1x"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = objc_msgSend(CFSTR("1x"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("2x")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("2x"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("3x") || (v9 = v8, v10 = objc_msgSend(CFSTR("3x"), "isEqualToString:", v8), v9, v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

double PKRemoteImageDimensionFromValue(void *a1)
{
  id v1;
  void *v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((objc_msgSend(v1, "pk_isZeroNumber") & 1) == 0)
    {
      objc_msgSend(v2, "doubleValue");
      v4 = v5;
      goto LABEL_7;
    }
    *(double *)&v3 = 1.79769313e308;
  }
  else
  {
    *(double *)&v3 = -1.79769313e308;
  }
  v4 = *(double *)&v3;
LABEL_7:

  return v4;
}

CFTypeRef PKPassIconImage(PKImage *a1, double *a2)
{
  PKImage *v3;
  void *v4;
  double v5;
  double v6;
  void *v7;
  CFTypeRef v8;

  v3 = a1;
  if (!v3)
  {
    PKPassKitCoreBundle();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[PKImage imageNamed:inBundle:](PKImage, "imageNamed:inBundle:", CFSTR("GenericIcon"), v4);
    v3 = (PKImage *)objc_claimAutoreleasedReturnValue();

  }
  -[PKImage scale](v3, "scale");
  v6 = v5;
  objc_msgSend(MEMORY[0x1E0D3A830], "imageDescriptorNamed:", *MEMORY[0x1E0D3A890]);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setScale:", v6);
  v8 = IconImageFromImage(v3, v7, a2);

  return v8;
}

CFTypeRef IconImageFromImage(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  double v8;
  double v9;
  id v10;
  CFTypeRef v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  CFTypeRef v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v5 = a2;
  if (a1)
  {
    v6 = objc_retainAutorelease(a1);
    v7 = objc_msgSend(v6, "imageRef");
    objc_msgSend(v6, "scale");
    v9 = v8;

    v10 = v5;
    v11 = 0;
    if (v10 && v7)
    {
      v12 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D3A7C0]), "initWithCGImage:scale:", v7, v9);
      v13 = objc_alloc(MEMORY[0x1E0D3A820]);
      v19[0] = v12;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 1);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v15 = (void *)objc_msgSend(v13, "initWithImages:", v14);

      v11 = (CFTypeRef)objc_msgSend(v15, "CGImageForDescriptor:", v10);
      if (a3)
      {
        objc_msgSend(v10, "scale");
        *a3 = v16;
      }
      if (v11)
      {
        v17 = CFRetain(v11);
        v11 = CFAutorelease(v17);
      }

    }
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

CFTypeRef PKPassNotificationIconImage(PKImage *a1, double *a2)
{
  PKImage *v3;
  void *v4;
  double v5;
  void *v6;
  CFTypeRef v7;

  v3 = a1;
  if (!v3)
  {
    PKPassKitCoreBundle();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[PKImage imageNamed:inBundle:](PKImage, "imageNamed:inBundle:", CFSTR("GenericIcon"), v4);
    v3 = (PKImage *)objc_claimAutoreleasedReturnValue();

  }
  -[PKImage scale](v3, "scale");
  DefaultNotificationIconDescriptor(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = IconImageFromImage(v3, v6, a2);

  return v7;
}

id DefaultNotificationIconDescriptor(double a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0D3A830]), "initWithSize:scale:", 76.0, 76.0, 2.0);
  objc_msgSend(v2, "setScale:", a1);
  return v2;
}

CFTypeRef PKPassMailAttachmentIconImage(PKImage *a1, double *a2)
{
  PKImage *v3;
  void *v4;
  double v5;
  double v6;
  const __CFString *v7;
  void *v8;
  CFTypeRef v9;

  v3 = a1;
  if (!v3)
  {
    PKPassKitCoreBundle();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    +[PKImage imageNamed:inBundle:](PKImage, "imageNamed:inBundle:", CFSTR("GenericIcon"), v4);
    v3 = (PKImage *)objc_claimAutoreleasedReturnValue();

  }
  -[PKImage scale](v3, "scale");
  v6 = v5;
  if ((PKIsPad() & 1) != 0)
    v7 = CFSTR("com.apple.IconServices.ImageDescriptor.LargeHomeScreen");
  else
    v7 = (const __CFString *)*MEMORY[0x1E0D3A870];
  objc_msgSend(MEMORY[0x1E0D3A830], "imageDescriptorNamed:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setScale:", v6);
  v9 = IconImageFromImage(v3, v8, a2);

  return v9;
}

void sub_1902F4888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKPayLaterFundingSourceCardTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("debit"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("debit"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("credit")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("credit")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

const __CFString *PKPayLaterFundingSourceCardTypeToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADA5E0[a1];
}

void sub_1902F87C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902F99A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1902FA540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKPayLaterFundingSourceTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("paymentPass"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("paymentPass"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("ach")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("ach")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("unavailablePaymentPass")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("unavailablePaymentPass")),
          v9,
          v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKPayLaterFundingSourceTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return CFSTR("unknown");
  else
    return off_1E2ADA6B0[a1];
}

void sub_1902FE4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1902FE9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  uint64_t v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Block_object_dispose((const void *)(v21 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_1902FF05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1902FF188(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1902FF320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190300694(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t PKProtobufCommonSharingMessageTypeCheckerReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 15)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

const __CFString *PKPassTileValueTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("text");
  else
    return off_1E2ADAA48[a1 - 1];
}

uint64_t PKPassTileValueTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("text")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("text")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 0;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("date")
      || (v6 = v5, v2)
      && (v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("date")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 1;
    }
    else
    {
      v8 = v6;
      if (v8 == CFSTR("number")
        || (v9 = v8, v2)
        && (v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("number")),
            v9,
            v9,
            (v10 & 1) != 0))
      {
        v4 = 2;
      }
      else
      {
        v11 = v9;
        v12 = v11;
        if (v11 == CFSTR("foreignReference"))
          v4 = 3;
        else
          v4 = 0;
        if (v11 != CFSTR("foreignReference") && v2)
        {
          if (-[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("foreignReference")))
            v4 = 3;
          else
            v4 = 0;
        }

      }
    }
  }

  return v4;
}

const __CFString *PKPaymentTransactionAccountTypeToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1E2ADADF0[a1];
}

uint64_t PKPaymentTransactionAccountTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("ccs"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("ccs"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("peerpayment")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("peerpayment")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 1;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("savings")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("savings")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("asp")
      || (v12 = v11, v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("asp")), v12, v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 2;
LABEL_15:

  return v4;
}

uint64_t PKPaymentTransactionAccountTypeFromAccountType(unint64_t a1)
{
  if (a1 > 4)
    return 2;
  else
    return qword_1904562D8[a1];
}

uint64_t PKPaymentTransactionTransitSubtypeFromString(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (!objc_msgSend(v1, "caseInsensitiveCompare:", CFSTR("metro")))
    {
      v3 = 2;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("metroUpgrade")))
    {
      v3 = 1026;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("lightrail")))
    {
      v3 = 7;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("cableCar")))
    {
      v3 = 8;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("renewal")))
    {
      v3 = 518;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("bus")))
    {
      v3 = 3;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("train")))
    {
      v3 = 4;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("ferry")))
    {
      v3 = 260;
      goto LABEL_44;
    }
    if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("transit")))
    {
      v3 = 1;
      goto LABEL_44;
    }
    if (objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("unknown")))
    {
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("cardRead")))
      {
        v3 = 517;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("deposit")))
      {
        v3 = 513;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("withdrawal")))
      {
        v3 = 516;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("refund")))
      {
        v3 = 514;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("other")))
      {
        v3 = 5;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("special")))
      {
        v3 = 6;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("bike")))
      {
        v3 = 261;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("taxi")))
      {
        v3 = 259;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("maglev")))
      {
        v3 = 258;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("shinkansen")))
      {
        v3 = 257;
        goto LABEL_44;
      }
      if (!objc_msgSend(v2, "caseInsensitiveCompare:", CFSTR("greenCar")))
      {
        v3 = 1025;
        goto LABEL_44;
      }
    }
  }
  v3 = 0;
LABEL_44:

  return v3;
}

id PKPaymentTransactionTransitSubtypeToLocalizedTitle(uint64_t a1)
{
  void *v2;
  __CFString *v3;
  __CFString *v4;

  v2 = 0;
  if (a1 <= 512)
  {
    switch(a1)
    {
      case 1:
      case 5:
      case 6:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_TRANSIT");
        goto LABEL_21;
      case 2:
        v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_METRO");
        goto LABEL_27;
      case 3:
        v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_BUS");
        goto LABEL_27;
      case 4:
        v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_TRAIN");
        goto LABEL_27;
      case 7:
        v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_LIGHT_RAIL");
        goto LABEL_27;
      case 8:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_CABLE_CAR");
LABEL_21:
        PKLocalizedPaymentString(&v3->isa, 0);
        v2 = (void *)objc_claimAutoreleasedReturnValue();
        break;
      default:
        switch(a1)
        {
          case 257:
            v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_SHINKANSEN");
            goto LABEL_21;
          case 258:
            v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_MAGLEV");
            goto LABEL_27;
          case 259:
            v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_TAXI");
            goto LABEL_27;
          case 260:
            v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_FERRY");
            goto LABEL_27;
          case 261:
            v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_BIKE");
            goto LABEL_27;
          default:
            return v2;
        }
    }
  }
  else
  {
    switch(a1)
    {
      case 513:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_DEPOSIT");
        goto LABEL_21;
      case 514:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_REFUND");
        goto LABEL_21;
      case 515:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_PURCHASE");
        goto LABEL_21;
      case 516:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_WITHDRAWAL");
        goto LABEL_21;
      case 517:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_CARD_READ");
        goto LABEL_21;
      case 518:
        v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_RENEWAL");
        goto LABEL_21;
      default:
        if (a1 == 1025)
        {
          v3 = CFSTR("TRANSIT_TRANSACTION_TITLE_GREEN_CAR");
          goto LABEL_21;
        }
        if (a1 != 1026)
          return v2;
        v4 = CFSTR("TRANSIT_TRANSACTION_TITLE_METRO_UPGRADE");
        break;
    }
LABEL_27:
    PKLocalizedTransitString(&v4->isa, 0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v2;
}

BOOL PKPaymentTransactionTransitSubtypeHasAmountPriority(uint64_t a1)
{
  return a1 > 512 && (unint64_t)(a1 - 513) < 6;
}

uint64_t PKPaymentTransactionTransitSubtypeIsPaymentActivity(uint64_t a1)
{
  uint64_t result;

  result = 0;
  if (a1 <= 256)
  {
    if ((unint64_t)(a1 - 1) >= 8)
      return result;
    return 1;
  }
  if ((unint64_t)(a1 - 257) < 5 || a1 == 1025 || a1 == 515)
    return 1;
  return result;
}

uint64_t PKPaymentTransactionPeerPaymentSubtypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("send"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("receive"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("request"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("upcomingPayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("recurringPayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if (objc_msgSend(CFSTR("thresholdTopUp"), "isEqualToString:", v1))
  {
    v2 = 6;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPaymentTransactionTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("purchase"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 0;
  }
  else if ((objc_msgSend(CFSTR("refund"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("peerpayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("fee"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("withdrawal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("topup"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(CFSTR("disbursement"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(CFSTR("adjustment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(CFSTR("transit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("rewards"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(CFSTR("billpayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(CFSTR("interest"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(CFSTR("installmentPayment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 13;
  }
  else if (objc_msgSend(CFSTR("installment"), "isEqualToString:", v1))
  {
    v2 = 14;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPaymentTransactionTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0x15)
    return CFSTR("purchase");
  else
    return off_1E2ADAC08[a1 - 1];
}

uint64_t PKPaymentTransactionAdjustmentSubtypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(CFSTR("provisionaldispute"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("provisionaldisputereversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("disputefinal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("chargebackcredit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("merchantadjustment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("balancewriteoff"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(CFSTR("courtesy"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(CFSTR("forfeiture"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(CFSTR("withdrawalreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 9;
  }
  else if ((objc_msgSend(CFSTR("checkissued"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 10;
  }
  else if ((objc_msgSend(CFSTR("credit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 13;
  }
  else if ((objc_msgSend(CFSTR("creditreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 14;
  }
  else if ((objc_msgSend(CFSTR("feereversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 11;
  }
  else if ((objc_msgSend(CFSTR("interestreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 12;
  }
  else if ((objc_msgSend(CFSTR("refund"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 15;
  }
  else if ((objc_msgSend(CFSTR("refundreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 16;
  }
  else if ((objc_msgSend(CFSTR("debitreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 18;
  }
  else if ((objc_msgSend(CFSTR("redemptionreversal"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 19;
  }
  else if ((objc_msgSend(CFSTR("debit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 20;
  }
  else if (objc_msgSend(CFSTR("other"), "isEqualToString:", v1))
  {
    v2 = 17;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKLocalizedTitleForTransactionWithAdjustment(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = a1;
  switch(objc_msgSend(v1, "adjustmentTypeReason"))
  {
    case 3:
      v8 = CFSTR("TRANSACTION_DETAIL_REWARDS_ADJUSTMENT_TITLE");
      goto LABEL_8;
    case 6:
      v8 = CFSTR("TRANSACTION_DETAIL_REWARDS_STATEMENT_CREDIT_TITLE");
LABEL_8:
      v9 = 2;
      goto LABEL_11;
    case 7:
    case 8:
      objc_msgSend(v1, "merchantProvidedTitle");
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v7, "length"))
        goto LABEL_13;

LABEL_4:
      if (objc_msgSend(v1, "featureIdentifier") == 5)
      {
        v8 = CFSTR("TRANSACTION_TYPE_ADJUSTMENT");
        v9 = 5;
LABEL_11:
        PKLocalizedFeatureString(v8, v9, 0, v2, v3, v4, v5, v6, v12);
        v10 = objc_claimAutoreleasedReturnValue();
      }
      else
      {
        PKLocalizedPaymentString(CFSTR("TRANSACTION_TYPE_ADJUSTMENT"), 0);
        v10 = objc_claimAutoreleasedReturnValue();
      }
      v7 = (void *)v10;
LABEL_13:

      return v7;
    case 9:
      v9 = objc_msgSend(v1, "featureIdentifier");
      v8 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_CHECK_DEPOSIT");
      goto LABEL_11;
    case 10:
      v9 = objc_msgSend(v1, "featureIdentifier");
      v8 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_FDIC");
      goto LABEL_11;
    default:
      goto LABEL_4;
  }
}

id PKLocalizedSubtitleForTransactionWithAdjustment(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  int v10;
  __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v23;

  v1 = a1;
  v2 = objc_msgSend(v1, "featureIdentifier");
  switch(objc_msgSend(v1, "adjustmentTypeReason"))
  {
    case 3:
      objc_msgSend(v1, "amount");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v10 = objc_msgSend(v9, "pk_isNegativeNumber");

      if (v10)
        v11 = CFSTR("TRANSACTION_DETAIL_REWARDS_ADJUSTMENT_CREDIT_SUBTITLE");
      else
        v11 = CFSTR("TRANSACTION_DETAIL_REWARDS_ADJUSTMENT_SUBTITLE");
      goto LABEL_10;
    case 6:
      v11 = CFSTR("TRANSACTION_DETAIL_REWARDS_STATEMENT_CREDIT_SUBTITLE");
LABEL_10:
      v12 = 2;
      goto LABEL_14;
    case 7:
    case 8:
      objc_msgSend(v1, "merchantProvidedDescription");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v8, "length"))
        goto LABEL_46;

      goto LABEL_15;
    case 10:
      if (objc_msgSend(v1, "adjustmentType") == 13)
      {
        v11 = CFSTR("TRANSACTION_TYPE_TOP_UP");
LABEL_13:
        v12 = v2;
        goto LABEL_14;
      }
      if (objc_msgSend(v1, "adjustmentType") == 17)
      {
        v11 = CFSTR("TRANSACTION_TYPE_WITHDRAWAL_CASH");
        goto LABEL_13;
      }
LABEL_15:
      switch(objc_msgSend(v1, "adjustmentType"))
      {
        case 1:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_PROVISIONAL_DISPUTE");
          goto LABEL_44;
        case 2:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_PROVISISIONAL_DISPUTE_REVERSAL");
          goto LABEL_19;
        case 3:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_DISPUTE_FINAL");
LABEL_19:
          if (v2 != 5)
            goto LABEL_44;
          goto LABEL_36;
        case 4:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_CHARGEBACK_CREDIT");
          goto LABEL_44;
        case 5:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_MERCHANT_ADJUSTMENT");
          goto LABEL_44;
        case 6:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_BALANCE_WRITEOFF");
          goto LABEL_44;
        case 7:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_COURTESY");
          goto LABEL_44;
        case 8:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_FORFEITURE");
          goto LABEL_44;
        case 9:
          if (v2 == 5)
          {
            objc_msgSend(v1, "transfers");
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            v15 = objc_msgSend(v14, "count");

            if (v15)
              goto LABEL_35;
          }
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_WITHDRAWAL_REVERSAL");
          goto LABEL_44;
        case 10:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_CHECK_ISSUED");
          goto LABEL_44;
        case 11:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_FEE_REVERSAL");
          goto LABEL_10;
        case 12:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_INTEREST_REVERSAL");
          goto LABEL_10;
        case 13:
          v12 = objc_msgSend(v1, "featureIdentifier");
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_CREDIT");
          break;
        case 14:
          if (v2 != 5
            || (objc_msgSend(v1, "transfers"),
                v16 = (void *)objc_claimAutoreleasedReturnValue(),
                v17 = objc_msgSend(v16, "count"),
                v16,
                !v17))
          {
            v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_CREDIT_REVERSAL");
            goto LABEL_10;
          }
LABEL_35:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_ACH_RETURN");
LABEL_36:
          v12 = 5;
          break;
        case 15:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_REFUND");
          goto LABEL_44;
        case 16:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_REFUND_REVERSAL");
          goto LABEL_44;
        case 18:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_DEBIT_REVERSAL");
          goto LABEL_44;
        case 19:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_REDEMPTION_REVERSAL");
          goto LABEL_44;
        case 20:
          v11 = CFSTR("TRANSACTION_ADJUSTMENT_SUBTYPE_DEBIT");
LABEL_44:
          PKLocalizedPaymentString(&v11->isa, 0);
          v13 = objc_claimAutoreleasedReturnValue();
          goto LABEL_45;
        default:
          objc_msgSend(v1, "merchant");
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v18, "displayName");
          v19 = (void *)objc_claimAutoreleasedReturnValue();

          if (objc_msgSend(v19, "length"))
          {
            objc_msgSend(v1, "merchant");
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v20, "displayName");
            v21 = (void *)objc_claimAutoreleasedReturnValue();
            PKLocalizedPeerPaymentString(CFSTR("TRANSACTION_DETAIL_STATUS_SUBTITLE_ADJUSTED_BY_FORMAT"), CFSTR("%@"), v21);
            v8 = (void *)objc_claimAutoreleasedReturnValue();

          }
          else
          {
            v8 = 0;
          }

          goto LABEL_46;
      }
LABEL_14:
      PKLocalizedFeatureString(v11, v12, 0, v3, v4, v5, v6, v7, v23);
      v13 = objc_claimAutoreleasedReturnValue();
LABEL_45:
      v8 = (void *)v13;
LABEL_46:

      return v8;
    default:
      goto LABEL_15;
  }
}

uint64_t PKPaymentTransactionAdjustmentSubtypeReasonFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("other"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("goodwill"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("negativeRewards"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("balanceAdjustment"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("smallBalanceCredit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("statementCreditRewards"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(CFSTR("accountClosed"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(CFSTR("accountGraduated"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(CFSTR("checkDeposit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(CFSTR("FDIC"), "isEqualToString:", v1))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPaymentTransactionSourceFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("contactless")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("inapp")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("web")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("physical")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("virtual")) & 1) != 0)
  {
    v2 = 6;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("digital")) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("serviceprovider")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("account")))
  {
    v2 = 8;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKPaymentTransactionSourceToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 7)
    return CFSTR("unknown");
  else
    return off_1E2ADAD18[a1 - 1];
}

const __CFString *PKPaymentTransactionSuppressBehaviorToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADACB8[a1];
}

const __CFString *PKPaymentTransactionRewardsEligibilityReasonToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADACD0[a1];
}

BOOL PKPaymentTransactionShouldAuthenticateForMechanism(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  _BOOL8 ShouldAuthenticateForMechanismWithTransactionStatus;

  v3 = a1;
  v4 = objc_msgSend(v3, "transactionStatus");
  objc_msgSend(v3, "authenticationContext");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  ShouldAuthenticateForMechanismWithTransactionStatus = PKPaymentTransactionShouldAuthenticateForMechanismWithTransactionStatus(v4, v5, a2);
  return ShouldAuthenticateForMechanismWithTransactionStatus;
}

BOOL PKPaymentTransactionShouldAuthenticateForMechanismWithTransactionStatus(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;

  v5 = a2;
  v6 = v5;
  v7 = !a1
    && (objc_msgSend(v5, "complete") & 1) == 0
    && (objc_msgSend(v6, "requestedAuthenticationMechanisms") & a3) != 0;

  return v7;
}

BOOL PKPaymentTransactionHasAuthenticationRequest(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if (objc_msgSend(v1, "transactionStatus"))
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(v1, "authenticationContext");
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = objc_msgSend(v3, "requestedAuthenticationMechanisms") != 0;

  }
  return v2;
}

id PKTransactionPaymentHashForBarcodeIdentifier(void *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_msgSend(a1, "dataUsingEncoding:", 4);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "SHA256Hash");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "hexEncoding");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

const __CFString *PKPeerPaymentIdentityVerificationContextToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADAF18[a1];
}

void sub_190310F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  _Block_object_dispose(&a36, 8);
  _Block_object_dispose((const void *)(v36 - 200), 8);
  _Block_object_dispose((const void *)(v36 - 152), 8);
  _Unwind_Resume(a1);
}

id PKPassFromPlaceholderConfiguration(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  PKPlaceholderPassGenerator *v7;
  id v8;
  void *v9;
  BOOL v10;
  NSObject *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  PKPaymentApplication *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  void *v27;
  void *v28;
  void *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  _BYTE v35[128];
  void *v36;
  uint8_t buf[4];
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = 0;
  if (v3 && v4)
  {
    v34 = 0;
    v7 = -[PKPlaceholderPassGenerator initWithPassTemplate:error:]([PKPlaceholderPassGenerator alloc], "initWithPassTemplate:error:", v4, &v34);
    v8 = v34;
    v9 = v8;
    if (v7)
      v10 = v8 == 0;
    else
      v10 = 0;
    if (v10)
    {
      objc_msgSend(v3, "subcredential");
      v11 = objc_claimAutoreleasedReturnValue();
      objc_msgSend(v3, "automaticSelectionCriterion");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      -[NSObject identifier](v11, "identifier");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      v29 = v9;
      if ((unint64_t)objc_msgSend(v13, "length") < 5)
      {
        v14 = v13;
      }
      else
      {
        objc_msgSend(v13, "substringFromIndex:", objc_msgSend(v13, "length") - 4);
        v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      v15 = v14;
      -[PKPlaceholderPassGenerator setSerialNumber:](v7, "setSerialNumber:", v13);
      -[PKPlaceholderPassGenerator setPrimaryAccountIdentifier:](v7, "setPrimaryAccountIdentifier:", v13);
      v16 = objc_alloc_init(PKPaymentApplication);
      -[PKPaymentApplication setDPANIdentifier:](v16, "setDPANIdentifier:", v13);
      -[PKPaymentApplication setDPANSuffix:](v16, "setDPANSuffix:", v15);
      -[PKPaymentApplication setApplicationIdentifier:](v16, "setApplicationIdentifier:", CFSTR("A000000809434343444B417631"));
      +[PKSecureElement primarySecureElementIdentifier](PKSecureElement, "primarySecureElementIdentifier");
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentApplication setSecureElementIdentifier:](v16, "setSecureElementIdentifier:", v17);

      -[PKPaymentApplication setState:](v16, "setState:", objc_msgSend(v3, "paymentApplicationState"));
      -[PKPaymentApplication setSupportsContactlessPayment:](v16, "setSupportsContactlessPayment:", 1);
      -[PKPaymentApplication setSupportsInAppPayment:](v16, "setSupportsInAppPayment:", 0);
      -[PKPaymentApplication setSupportsOptionalAuthentication:](v16, "setSupportsOptionalAuthentication:", objc_msgSend(v12, "supportsExpress"));
      v27 = v15;
      v28 = v12;
      if (v12)
      {
        v36 = v12;
        objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v36, 1);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        -[PKPaymentApplication setAutomaticSelectionCriteria:](v16, "setAutomaticSelectionCriteria:", v18);

      }
      else
      {
        -[PKPaymentApplication setAutomaticSelectionCriteria:](v16, "setAutomaticSelectionCriteria:", 0);
      }
      objc_msgSend(MEMORY[0x1E0C99E60], "setWithObject:", v11);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPaymentApplication setSubcredentials:](v16, "setSubcredentials:", v19);

      -[PKPlaceholderPassGenerator insertPaymentApplication:](v7, "insertPaymentApplication:", v16);
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      objc_msgSend(v3, "passFields");
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v31;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v31 != v23)
              objc_enumerationMutation(v20);
            -[PKPlaceholderPassGenerator insertPassField:](v7, "insertPassField:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * i));
          }
          v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
        }
        while (v22);
      }

      objc_msgSend(v3, "associatedApplicationIdentifiers");
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      -[PKPlaceholderPassGenerator setAssociatedApplicationIdentifiers:](v7, "setAssociatedApplicationIdentifiers:", v25);

      -[PKPlaceholderPassGenerator generatePass](v7, "generatePass");
      v6 = (void *)objc_claimAutoreleasedReturnValue();

      v9 = v29;
    }
    else
    {
      PKLogFacilityTypeGetObject(6uLL);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v38 = v9;
        _os_log_impl(&dword_18FC92000, v11, OS_LOG_TYPE_DEFAULT, "Failed to create placeholder pass generator: %@", buf, 0xCu);
      }
      v6 = 0;
    }

  }
  return v6;
}

BOOL PKProtobufRemotePaymentResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  PKProtobufPayment *v17;
  uint64_t v18;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      if ((v10 >> 3) == 2)
        break;
      if ((v10 >> 3) == 1)
      {
        v17 = objc_alloc_init(PKProtobufPayment);
        objc_storeStrong((id *)(a1 + 8), v17);
        if (!PBReaderPlaceMark() || !PKProtobufPaymentReadFrom((uint64_t)v17, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0)
        return 0;
LABEL_26:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    PBReaderReadString();
    v18 = objc_claimAutoreleasedReturnValue();
    v17 = *(PKProtobufPayment **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v18;
LABEL_24:

    goto LABEL_26;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

PKOSVersionRequirementRange *PKOSVersionRequirementRangeFromLayoutAssetDictionary(void *a1)
{
  void *v1;
  PKOSVersionRequirementRange *v2;

  objc_msgSend(a1, "PKDictionaryForKey:", CFSTR("osVersionRange"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
    v2 = -[PKOSVersionRequirementRange initWithDictionary:]([PKOSVersionRequirementRange alloc], "initWithDictionary:", v1);
  else
    v2 = 0;

  return v2;
}

id PKValidatePaymentOfferCollection(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  __CFString *v6;

  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    v6 = CFSTR("There is no payment offer collection");
LABEL_6:
    _PKPaymentOffersMalformedError(v6);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    goto LABEL_7;
  }
  objc_msgSend(v1, "sessionIdentifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v3)
  {
    v6 = CFSTR("There is no session identifier set on the payment offer collection");
    goto LABEL_6;
  }
  objc_msgSend(v2, "installmentAssessment");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  _PKValidatePaymentOfferInstallmentAssessment(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_7:
  return v5;
}

id _PKValidatePaymentOfferInstallmentAssessment(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  __CFString *v5;
  void *v6;
  void *v7;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "identifier");
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    if (v3)
    {
      if (objc_msgSend(v2, "offerEligibility") != 1)
      {
LABEL_10:
        v6 = 0;
        goto LABEL_11;
      }
      objc_msgSend(v2, "offers");
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v4, "count"))
      {

        goto LABEL_10;
      }
      objc_msgSend(v2, "action");
      v7 = (void *)objc_claimAutoreleasedReturnValue();

      if (v7)
        goto LABEL_10;
      v5 = CFSTR("There is no installment offers or action defined on the payment offer collection");
    }
    else
    {
      v5 = CFSTR("There is no identifier on the installment assessment");
    }
  }
  else
  {
    v5 = CFSTR("There is no installment assessment on the payment offer collection");
  }
  _PKPaymentOffersMalformedError(v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_11:

  return v6;
}

id _PKPaymentOffersMalformedError(void *a1)
{
  objc_class *v1;
  id v2;
  id v3;
  void *v4;

  v1 = (objc_class *)MEMORY[0x1E0C99E08];
  v2 = a1;
  v3 = objc_alloc_init(v1);
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, *MEMORY[0x1E0CB2D50]);

  objc_msgSend(MEMORY[0x1E0CB35C8], "errorWithDomain:code:userInfo:", CFSTR("PKPassKitErrorDomain"), -9000, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

const __CFString *PKMerchantCategoryToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 6)
    return CFSTR("unknown");
  else
    return off_1E2ADB170[a1 - 1];
}

uint64_t PKMerchantCategoryFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  int v22;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("fooddrinks"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_23:
    v4 = 0;
    goto LABEL_24;
  }
  v3 = objc_msgSend(CFSTR("fooddrinks"), "isEqualToString:", v1);

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("shopping")
      || (v6 = v5, v7 = objc_msgSend(CFSTR("shopping"), "isEqualToString:", v5), v6, (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_24;
    }
    v8 = v6;
    if (v8 == CFSTR("travel")
      || (v9 = v8, v10 = objc_msgSend(CFSTR("travel"), "isEqualToString:", v8), v9, (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_24;
    }
    v11 = v9;
    if (v11 == CFSTR("services")
      || (v12 = v11, v13 = objc_msgSend(CFSTR("services"), "isEqualToString:", v11), v12, (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_24;
    }
    v14 = v12;
    if (v14 == CFSTR("fun")
      || (v15 = v14, v16 = objc_msgSend(CFSTR("fun"), "isEqualToString:", v14), v15, (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_24;
    }
    v17 = v15;
    if (v17 == CFSTR("health")
      || (v18 = v17, v19 = objc_msgSend(CFSTR("health"), "isEqualToString:", v17), v18, (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_24;
    }
    v20 = v18;
    if (v20 == CFSTR("transport")
      || (v21 = v20, v22 = objc_msgSend(CFSTR("transport"), "isEqualToString:", v20), v21, v22))
    {
      v4 = 7;
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_4:
  v4 = 1;
LABEL_24:

  return v4;
}

id PKLocalizedStringFromMerchantCategory(uint64_t a1)
{
  __CFString *v1;

  if ((unint64_t)(a1 - 1) > 6)
    v1 = CFSTR("TRANSACTIONS_CATEGORY_OTHER");
  else
    v1 = off_1E2ADB138[a1 - 1];
  PKLocalizedPaymentString(&v1->isa, 0);
  return (id)objc_claimAutoreleasedReturnValue();
}

id PKMerchantFormattedDisplayName(void *a1)
{
  id v1;
  void *v2;
  _BOOL4 v3;
  void *v4;
  _BOOL4 v5;
  int v6;
  id v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  __CFString *v17;
  __CFString *v18;
  void *v19;
  void *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  __CFString *v35;
  uint64_t v36;
  int v37;
  const __CFString *v38;
  char v39;
  __CFString *v40;
  void *v41;
  unint64_t v42;
  void *v43;
  int v45;
  void *v46;
  id v47;
  void *v48;
  __CFString *v49;

  v1 = a1;
  if (objc_msgSend(v1, "length"))
  {
    objc_msgSend(MEMORY[0x1E0CB3500], "uppercaseLetterCharacterSet");
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    v3 = objc_msgSend(v1, "rangeOfCharacterFromSet:", v2) != 0x7FFFFFFFFFFFFFFFLL;

    objc_msgSend(MEMORY[0x1E0CB3500], "lowercaseLetterCharacterSet");
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(v1, "rangeOfCharacterFromSet:", v4) != 0x7FFFFFFFFFFFFFFFLL;

    v6 = objc_msgSend(v1, "canBeConvertedToEncoding:", 5);
    objc_msgSend(MEMORY[0x1E0CB37A0], "string");
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = v1;
    objc_msgSend(v7, "lowercaseString");
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "hasPrefix:", CFSTR("apl*"));

    if (v9)
    {
      objc_msgSend(v7, "substringFromIndex:", 4);
      v10 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v10;
    }
    v47 = v1;
    if (objc_msgSend(v7, "rangeOfString:", CFSTR("*")) == 3)
    {
      objc_msgSend(v7, "substringToIndex:", 4);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "pk_uppercaseStringForPreferredLocale");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "appendString:", v12);

      objc_msgSend(v48, "appendString:", CFSTR(" "));
      objc_msgSend(v7, "substringFromIndex:", 4);
      v13 = objc_claimAutoreleasedReturnValue();

      v7 = (id)v13;
    }
    v46 = v7;
    v14 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CB3900]), "initWithString:", v7);
    objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "setCharactersToBeSkipped:", v15);
    v49 = 0;
    v16 = objc_msgSend(v14, "scanUpToCharactersFromSet:intoString:", v15, &v49);
    v17 = v49;
    v18 = v17;
    if (v16)
    {
      v45 = (v3 ^ v5) & v6;
      v19 = v48;
      while (!-[__CFString length](v18, "length"))
      {
LABEL_39:
        v49 = v18;
        v39 = objc_msgSend(v14, "scanUpToCharactersFromSet:intoString:", v15, &v49);
        v40 = v49;

        v18 = v40;
        if ((v39 & 1) == 0)
          goto LABEL_49;
      }
      if (-[__CFString length](v18, "length") == 3)
      {
        -[__CFString substringWithRange:](v18, "substringWithRange:", 1, 1);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        v21 = objc_msgSend(v20, "isEqual:", CFSTR("&"));

      }
      else
      {
        v21 = 0;
      }
      if (!-[__CFString containsString:](v18, "containsString:", CFSTR("."))
        || (-[__CFString hasPrefix:](v18, "hasPrefix:", CFSTR(".")) & 1) != 0
        || (-[__CFString hasSuffix:](v18, "hasSuffix:", CFSTR(".")) & 1) != 0)
      {
        if (((v45 ^ 1 | v21) & 1) != 0)
        {
          v22 = v18;
          goto LABEL_26;
        }
        -[__CFString pk_lowercaseStringForPreferredLocale](v18, "pk_lowercaseStringForPreferredLocale");
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "componentsSeparatedByString:", CFSTR("-"));
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = (void *)objc_msgSend(v24, "mutableCopy");

        if (objc_msgSend(v22, "count"))
        {
          v25 = 0;
          do
          {
            objc_msgSend(v22, "objectAtIndex:", v25);
            v26 = (void *)objc_claimAutoreleasedReturnValue();
            if ((unint64_t)objc_msgSend(v22, "count") < 2
              || (objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet"),
                  v27 = (void *)objc_claimAutoreleasedReturnValue(),
                  v28 = objc_msgSend(v26, "rangeOfCharacterFromSet:", v27),
                  v27,
                  v28 == 0x7FFFFFFFFFFFFFFFLL))
            {
              objc_msgSend(v26, "pk_uppercaseFirstStringForPreferredLocale");
              v29 = objc_claimAutoreleasedReturnValue();
            }
            else
            {
              objc_msgSend(v26, "pk_uppercaseStringForPreferredLocale");
              v29 = objc_claimAutoreleasedReturnValue();
            }
            v30 = (void *)v29;
            objc_msgSend(v22, "replaceObjectAtIndex:withObject:", v25, v29);

            ++v25;
          }
          while (objc_msgSend(v22, "count") > v25);
        }
        objc_msgSend(v22, "componentsJoinedByString:", CFSTR("-"));
        v31 = objc_claimAutoreleasedReturnValue();

        v19 = v48;
      }
      else
      {
        -[__CFString componentsSeparatedByString:](v18, "componentsSeparatedByString:", CFSTR("."));
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = objc_msgSend(v41, "count");

        if (v45)
        {
          -[__CFString pk_lowercaseStringForPreferredLocale](v18, "pk_lowercaseStringForPreferredLocale");
          v22 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          v22 = v18;
        }
        if (!objc_msgSend(v22, "hasPrefix:", CFSTR("www.")) || v42 < 3)
        {
LABEL_26:
          v32 = v22;
          v33 = v32;
          if (v32 == CFSTR("atm"))
          {
            v18 = CFSTR("ATM");
          }
          else
          {
            if (!v32)
            {
              v18 = 0;
LABEL_36:
              v37 = objc_msgSend(v14, "isAtEnd");
              v38 = CFSTR(" ");
              if (v37)
                v38 = &stru_1E2ADF4C0;
              objc_msgSend(v19, "appendFormat:", CFSTR("%@%@"), v18, v38);
              goto LABEL_39;
            }
            v34 = -[__CFString caseInsensitiveCompare:](v32, "caseInsensitiveCompare:", CFSTR("atm"));

            if (v34)
            {
              v35 = v33;
              if (v35 != CFSTR("plc"))
              {
                v18 = v35;
                v36 = -[__CFString caseInsensitiveCompare:](v35, "caseInsensitiveCompare:");

                if (v36)
                  goto LABEL_36;
              }
              v18 = CFSTR("PLC");
            }
            else
            {
              v18 = CFSTR("ATM");
            }
          }

          goto LABEL_36;
        }
        objc_msgSend(v22, "substringFromIndex:", 4);
        v31 = objc_claimAutoreleasedReturnValue();
      }

      v22 = (void *)v31;
      goto LABEL_26;
    }
    v40 = v17;
    v19 = v48;
LABEL_49:
    objc_msgSend(v19, "replaceOccurrencesOfString:withString:options:range:", CFSTR("itunes"), CFSTR("iTunes"), 1, 0, objc_msgSend(v19, "length"));
    v43 = (void *)objc_msgSend(v19, "copy");

    v1 = v47;
  }
  else
  {
    v43 = 0;
  }

  return v43;
}

const __CFString *PKTransactionCommutePlanUnitTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown plan");
  if (a1 == 1)
    v1 = CFSTR("count plan");
  if (a1)
    return v1;
  else
    return CFSTR("timed plan");
}

uint64_t PKRemoteAssetManifestItemEncryptionSourceFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("kml"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 1;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("kml"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("sesd")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("sesd")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("none")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("none")), v9, v10))
    {
      v4 = 0;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 2;
LABEL_12:

  return v4;
}

uint64_t encryptionSourceFromManifestItemDictionary(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "objectForKey:", CFSTR("encryptionSource"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v2 = PKRemoteAssetManifestItemEncryptionSourceFromString(v1);
    else
      v2 = 1;
  }
  else
  {
    v2 = 2;
  }

  return v2;
}

void sub_190321C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_190322510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190322C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190322FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKProtobufPaymentStatusReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 2)
      {
        PBReaderReadString();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = *(void **)(a1 + 8);
        *(_QWORD *)(a1 + 8) = v23;

      }
      else if ((v10 >> 3) == 1)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 20) |= 1u;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_31;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_33;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_31:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_33:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

__CFString *PKPhysicalCardShippingStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 3)
    return 0;
  else
    return off_1E2ADB3C8[a1 - 1];
}

uint64_t PKPhysicalCardShippingStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  int v13;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("shipped"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_14:
    v4 = 0;
    goto LABEL_15;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("shipped"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("outForDelivery")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("outForDelivery")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_15;
    }
    v8 = v6;
    if (v8 == CFSTR("delivered")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("delivered")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_15;
    }
    v11 = v9;
    if (v11 == CFSTR("deliveryException")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("deliveryException")),
          v12,
          v13))
    {
      v4 = 4;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_4:
  v4 = 1;
LABEL_15:

  return v4;
}

void sub_190328340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19032A54C(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x710], 8);
  _Unwind_Resume(a1);
}

void sub_19032C2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKSelectedPaymentOfferTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 1)
    v1 = CFSTR("installment");
  if (a1 == 2)
    return CFSTR("rewards");
  else
    return v1;
}

BOOL PKPaymentAuthorizationStateIsTerminal(uint64_t a1)
{
  return a1 == 16 || (a1 & 0xFFFFFFFFFFFFFFFDLL) == 13;
}

BOOL PKPaymentAuthorizationStateIsAuthentication(uint64_t a1)
{
  return a1 == 5;
}

uint64_t PKPaymentAuthorizationStateIsAuthorizing(unint64_t a1)
{
  return (a1 < 0x13) & (0x41E00u >> a1);
}

id PKAddressFieldsToContactKeys(char a1)
{
  id v2;
  void *v3;
  void *v4;

  v2 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v3 = v2;
  if ((a1 & 4) != 0)
  {
    objc_msgSend(v2, "addObject:", *MEMORY[0x1E0C966A8]);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      objc_msgSend(v3, "addObject:", *MEMORY[0x1E0C967F0]);
      if ((a1 & 8) == 0)
        goto LABEL_6;
      goto LABEL_5;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", *MEMORY[0x1E0C967C0]);
  if ((a1 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((a1 & 8) != 0)
  {
LABEL_5:
    objc_msgSend(v3, "addObject:", *MEMORY[0x1E0C966C0]);
    objc_msgSend(v3, "addObject:", *MEMORY[0x1E0C966D0]);
  }
LABEL_6:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKProtobufCustomPrecisionAmountReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      if ((v10 >> 3) == 1)
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (1)
        {
          v26 = *v3;
          v27 = *(_QWORD *)(a2 + v26);
          if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
            break;
          v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
          *(_QWORD *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0)
            goto LABEL_41;
          v23 += 7;
          v14 = v24++ >= 9;
          if (v14)
          {
            v25 = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          v25 = 0;
LABEL_43:
        *(_QWORD *)(a1 + 8) = -(v25 & 1) ^ (v25 >> 1);
      }
      else if ((v10 >> 3) == 2)
      {
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (1)
        {
          v20 = *v3;
          v21 = *(_QWORD *)(a2 + v20);
          if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
            break;
          v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
          *(_QWORD *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0)
            goto LABEL_37;
          v17 += 7;
          v14 = v18++ >= 9;
          if (v14)
          {
            LODWORD(v19) = 0;
            goto LABEL_39;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_37:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v19) = 0;
LABEL_39:
        *(_DWORD *)(a1 + 16) = v19;
      }
      else
      {
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
      }
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKProtobufRelaySharingMessageReadFrom(_DWORD *a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  BOOL v16;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      if (!*(_BYTE *)(a2 + *v5))
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        while (1)
        {
          v11 = *v3;
          v12 = *(_QWORD *)(a2 + v11);
          if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
            break;
          v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
          *(_QWORD *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0)
            goto LABEL_12;
          v8 += 7;
          v14 = v9++ >= 9;
          if (v14)
          {
            v10 = 0;
            v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
        v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(_BYTE *)(a2 + *v5))
          v10 = 0;
LABEL_14:
        if (v15)
          v16 = 1;
        else
          v16 = (v10 & 7) == 4;
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              v17 = 0;
              v18 = 0;
              v19 = 0;
              break;
            case 2u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 16;
              goto LABEL_38;
            case 3u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 12;
              goto LABEL_38;
            case 4u:
              PBReaderReadData();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 14;
              goto LABEL_38;
            case 5u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 10;
              goto LABEL_38;
            case 6u:
              PBReaderReadString();
              v26 = (void *)objc_claimAutoreleasedReturnValue();
              if (v26)
                objc_msgSend(a1, "addMailboxURLs:", v26);

              goto LABEL_39;
            case 7u:
              PBReaderReadData();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 4;
              goto LABEL_38;
            case 8u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 8;
              goto LABEL_38;
            case 9u:
              PBReaderReadString();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = 2;
LABEL_38:
              v27 = *(void **)&a1[v25];
              *(_QWORD *)&a1[v25] = v24;

              goto LABEL_39;
            default:
              result = PBReaderSkipValueWithTag();
              if (!(_DWORD)result)
                return result;
LABEL_39:
              if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
                return *(_BYTE *)(a2 + *v5) == 0;
              continue;
          }
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_42;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_44;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_42:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_44:
          a1[18] = v19;
          goto LABEL_39;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

uint64_t PKProtobufCommonSharingMessageReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  void *v31;
  uint64_t v32;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    do
    {
      if (*(_BYTE *)(a2 + *v5))
        break;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        break;
      switch((v10 >> 3))
      {
        case 1u:
          v17 = 0;
          v18 = 0;
          v19 = 0;
          while (1)
          {
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 == -1 || v21 >= *(_QWORD *)(a2 + *v4))
              break;
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v21);
            *(_QWORD *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0)
              goto LABEL_53;
            v17 += 7;
            v14 = v18++ >= 9;
            if (v14)
            {
              LODWORD(v19) = 0;
              goto LABEL_55;
            }
          }
          *(_BYTE *)(a2 + *v5) = 1;
LABEL_53:
          if (*(_BYTE *)(a2 + *v5))
            LODWORD(v19) = 0;
LABEL_55:
          v32 = 120;
          goto LABEL_60;
        case 2u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 56;
          goto LABEL_49;
        case 3u:
          v26 = 0;
          v27 = 0;
          v19 = 0;
          *(_BYTE *)(a1 + 136) |= 1u;
          break;
        case 4u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 24;
          goto LABEL_49;
        case 5u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 128;
          goto LABEL_49;
        case 6u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 112;
          goto LABEL_49;
        case 7u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 48;
          goto LABEL_49;
        case 8u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 88;
          goto LABEL_49;
        case 9u:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 96;
          goto LABEL_49;
        case 0xAu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 104;
          goto LABEL_49;
        case 0xBu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 72;
          goto LABEL_49;
        case 0xCu:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 80;
          goto LABEL_49;
        case 0xDu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 8;
          goto LABEL_49;
        case 0xEu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 16;
          goto LABEL_49;
        case 0xFu:
          PBReaderReadString();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 40;
          goto LABEL_49;
        case 0x10u:
          PBReaderReadData();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = 32;
LABEL_49:
          v31 = *(void **)(a1 + v25);
          *(_QWORD *)(a1 + v25) = v24;

          continue;
        default:
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v28 = *v3;
        v29 = *(_QWORD *)(a2 + v28);
        if (v29 == -1 || v29 >= *(_QWORD *)(a2 + *v4))
          break;
        v30 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v29);
        *(_QWORD *)(a2 + v28) = v29 + 1;
        v19 |= (unint64_t)(v30 & 0x7F) << v26;
        if ((v30 & 0x80) == 0)
          goto LABEL_57;
        v26 += 7;
        v14 = v27++ >= 9;
        if (v14)
        {
          LODWORD(v19) = 0;
          goto LABEL_59;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_57:
      if (*(_BYTE *)(a2 + *v5))
        LODWORD(v19) = 0;
LABEL_59:
      v32 = 64;
LABEL_60:
      *(_DWORD *)(a1 + v32) = v19;
    }
    while (*(_QWORD *)(a2 + *v3) < *(_QWORD *)(a2 + *v4));
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

id _Queue()
{
  if (qword_1ECF22B68 != -1)
    dispatch_once(&qword_1ECF22B68, &__block_literal_global_208);
  return (id)_MergedGlobals_282;
}

id _NotificationHandlerMap()
{
  if (qword_1ECF22B78 != -1)
    dispatch_once(&qword_1ECF22B78, &__block_literal_global_5);
  return (id)qword_1ECF22B70;
}

void _NotificationResponseHandler(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v7[6];
  _QWORD block[4];
  id v9;

  _Queue();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___NotificationResponseHandler_block_invoke;
  v7[3] = &__block_descriptor_48_e5_v8__0l;
  v7[4] = a1;
  v7[5] = a2;
  v6 = v7;
  block[0] = v5;
  block[1] = 3221225472;
  block[2] = __dispatch_async_ar_block_invoke_22;
  block[3] = &unk_1E2ABD9A0;
  v9 = v6;
  dispatch_async(v4, block);

}

void sub_190334728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19033D2E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t PKLoadNearField()
{
  if (PKLoadNearField_loadPredicate != -1)
    dispatch_once(&PKLoadNearField_loadPredicate, &__block_literal_global_210);
  return PKLoadNearField_frameworkLibrary;
}

id PKGetClassNFSession()
{
  if (PKGetClassNFSession_onceToken != -1)
    dispatch_once(&PKGetClassNFSession_onceToken, &__block_literal_global_9_2);
  return (id)PKGetClassNFSession_cls;
}

id PKGetClassNFRemoteAdminManager()
{
  if (PKGetClassNFRemoteAdminManager_onceToken != -1)
    dispatch_once(&PKGetClassNFRemoteAdminManager_onceToken, &__block_literal_global_13);
  return (id)PKGetClassNFRemoteAdminManager_cls;
}

id PKGetClassNFRemoteAdminCardIngestionRequest()
{
  if (PKGetClassNFRemoteAdminCardIngestionRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFRemoteAdminCardIngestionRequest_onceToken, &__block_literal_global_15_2);
  return (id)PKGetClassNFRemoteAdminCardIngestionRequest_cls;
}

void PKRegisterNFRemoteAdminManagerListener(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(PKGetClassNFRemoteAdminManager(), "sharedRemoteAdminManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "registerEventListener:", v1);

}

void PKUnregisterNFRemoteAdminManagerListener(void *a1)
{
  id v1;
  id v2;

  v1 = a1;
  objc_msgSend(PKGetClassNFRemoteAdminManager(), "sharedRemoteAdminManager");
  v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "unregisterEventListener:", v1);

}

id PKGetClassNFFieldNotificationECP1_0()
{
  if (qword_1ECF22B98 != -1)
    dispatch_once(&qword_1ECF22B98, &__block_literal_global_21_1);
  return (id)qword_1ECF22B90;
}

id PKGetClassNFFieldNotificationECP2_0()
{
  if (qword_1ECF22BA8 != -1)
    dispatch_once(&qword_1ECF22BA8, &__block_literal_global_23_0);
  return (id)qword_1ECF22BA0;
}

id PKGetClassNFECommercePaymentSession()
{
  if (PKGetClassNFECommercePaymentSession_onceToken != -1)
    dispatch_once(&PKGetClassNFECommercePaymentSession_onceToken, &__block_literal_global_25_0);
  return (id)PKGetClassNFECommercePaymentSession_cls;
}

id PKGetClassNFECommercePaymentRequest()
{
  if (PKGetClassNFECommercePaymentRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFECommercePaymentRequest_onceToken, &__block_literal_global_27);
  return (id)PKGetClassNFECommercePaymentRequest_cls;
}

id PKGetClassNFLoyaltyAndPaymentSession()
{
  if (PKGetClassNFLoyaltyAndPaymentSession_onceToken != -1)
    dispatch_once(&PKGetClassNFLoyaltyAndPaymentSession_onceToken, &__block_literal_global_29_2);
  return (id)PKGetClassNFLoyaltyAndPaymentSession_cls;
}

id PKGetClassNFDigitalCarKeySession()
{
  if (PKGetClassNFDigitalCarKeySession_onceToken != -1)
    dispatch_once(&PKGetClassNFDigitalCarKeySession_onceToken, &__block_literal_global_31_0);
  return (id)PKGetClassNFDigitalCarKeySession_cls;
}

id PKGetClassNFValueAddedServiceCard()
{
  if (PKGetClassNFValueAddedServiceCard_onceToken != -1)
    dispatch_once(&PKGetClassNFValueAddedServiceCard_onceToken, &__block_literal_global_33_0);
  return (id)PKGetClassNFValueAddedServiceCard_cls;
}

id PKGetClassNFReaderSession()
{
  if (PKGetClassNFReaderSession_onceToken != -1)
    dispatch_once(&PKGetClassNFReaderSession_onceToken, &__block_literal_global_35_1);
  return (id)PKGetClassNFReaderSession_cls;
}

id PKGetConstantStringNFSecureElementManagerSessionECDSACertificateKey()
{
  if (PKGetConstantStringNFSecureElementManagerSessionECDSACertificateKey_onceToken != -1)
    dispatch_once(&PKGetConstantStringNFSecureElementManagerSessionECDSACertificateKey_onceToken, &__block_literal_global_37_4);
  return (id)PKGetConstantStringNFSecureElementManagerSessionECDSACertificateKey_constant;
}

id PKGetConstantStringNFSecureElementManagerSessionRSAACertificateKey()
{
  if (PKGetConstantStringNFSecureElementManagerSessionRSAACertificateKey_onceToken != -1)
    dispatch_once(&PKGetConstantStringNFSecureElementManagerSessionRSAACertificateKey_onceToken, &__block_literal_global_41_0);
  return (id)PKGetConstantStringNFSecureElementManagerSessionRSAACertificateKey_constant;
}

id PKGetConstantStringNFSignedPlatformData()
{
  if (PKGetConstantStringNFSignedPlatformData_onceToken != -1)
    dispatch_once(&PKGetConstantStringNFSignedPlatformData_onceToken, &__block_literal_global_45_0);
  return (id)PKGetConstantStringNFSignedPlatformData_constant;
}

id PKGetConstantStringNFSignedPlatformSignatureBlob()
{
  if (PKGetConstantStringNFSignedPlatformSignatureBlob_onceToken != -1)
    dispatch_once(&PKGetConstantStringNFSignedPlatformSignatureBlob_onceToken, &__block_literal_global_47_0);
  return (id)PKGetConstantStringNFSignedPlatformSignatureBlob_constant;
}

id PKGetClassNFPeerPaymentEnrollmentRequest()
{
  if (PKGetClassNFPeerPaymentEnrollmentRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFPeerPaymentEnrollmentRequest_onceToken, &__block_literal_global_49);
  return (id)PKGetClassNFPeerPaymentEnrollmentRequest_cls;
}

id PKGetClassNFPeerPaymentEnrollmentResponse()
{
  if (qword_1ECF22BB8 != -1)
    dispatch_once(&qword_1ECF22BB8, &__block_literal_global_51_2);
  return (id)qword_1ECF22BB0;
}

id PKGetClassNFPeerPaymentRequest()
{
  if (PKGetClassNFPeerPaymentRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFPeerPaymentRequest_onceToken, &__block_literal_global_53_1);
  return (id)PKGetClassNFPeerPaymentRequest_cls;
}

id PKGetClassNFPeerPaymentResponse()
{
  if (qword_1ECF22BC8 != -1)
    dispatch_once(&qword_1ECF22BC8, &__block_literal_global_55);
  return (id)qword_1ECF22BC0;
}

id PKGetClassNFPeerPaymentSession()
{
  if (PKGetClassNFPeerPaymentSession_onceToken != -1)
    dispatch_once(&PKGetClassNFPeerPaymentSession_onceToken, &__block_literal_global_57_2);
  return (id)PKGetClassNFPeerPaymentSession_cls;
}

id PKGetClassNFPeerPaymentTransferRequest()
{
  if (PKGetClassNFPeerPaymentTransferRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFPeerPaymentTransferRequest_onceToken, &__block_literal_global_59);
  return (id)PKGetClassNFPeerPaymentTransferRequest_cls;
}

id PKGetClassNFTrustSession()
{
  if (PKGetClassNFTrustSession_onceToken != -1)
    dispatch_once(&PKGetClassNFTrustSession_onceToken, &__block_literal_global_61_0);
  return (id)PKGetClassNFTrustSession_cls;
}

id PKGetClassNFTrustLocalValidation()
{
  if (PKGetClassNFTrustLocalValidation_onceToken != -1)
    dispatch_once(&PKGetClassNFTrustLocalValidation_onceToken, &__block_literal_global_63_0);
  return (id)PKGetClassNFTrustLocalValidation_cls;
}

id PKGetClassNFTrustKeyRequest()
{
  if (PKGetClassNFTrustKeyRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFTrustKeyRequest_onceToken, &__block_literal_global_65);
  return (id)PKGetClassNFTrustKeyRequest_cls;
}

id PKGetClassNFTrustSignRequest()
{
  if (PKGetClassNFTrustSignRequest_onceToken != -1)
    dispatch_once(&PKGetClassNFTrustSignRequest_onceToken, &__block_literal_global_67_2);
  return (id)PKGetClassNFTrustSignRequest_cls;
}

id PKGetClassNFTrustSignResponse()
{
  if (qword_1ECF22BD8 != -1)
    dispatch_once(&qword_1ECF22BD8, &__block_literal_global_69_0);
  return (id)qword_1ECF22BD0;
}

uint64_t PKGetConstantStringNF_SECURE_XPC_EVENT_KEY_EVENT_SIMPLE_STRING()
{
  if (qword_1ECF22BE8 != -1)
    dispatch_once(&qword_1ECF22BE8, &__block_literal_global_73);
  return qword_1ECF22BE0;
}

uint64_t PKGetConstantStringNF_SECURE_XPC_EVENT_KEY_EVENT_SIMPLE_NUMBER()
{
  if (qword_1ECF22BF8 != -1)
    dispatch_once(&qword_1ECF22BF8, &__block_literal_global_75_1);
  return qword_1ECF22BF0;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_APPLET_IDENTIFIER()
{
  if (PKGetConstantStringNF_DCK_EVENT_KEY_APPLET_IDENTIFIER_onceToken != -1)
    dispatch_once(&PKGetConstantStringNF_DCK_EVENT_KEY_APPLET_IDENTIFIER_onceToken, &__block_literal_global_77);
  return (id)PKGetConstantStringNF_DCK_EVENT_KEY_APPLET_IDENTIFIER_constant;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_NAME()
{
  if (qword_1ECF22C08 != -1)
    dispatch_once(&qword_1ECF22C08, &__block_literal_global_79_1);
  return (id)qword_1ECF22C00;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_KEY_IDENTIFIER()
{
  if (PKGetConstantStringNF_DCK_EVENT_KEY_KEY_IDENTIFIER_onceToken != -1)
    dispatch_once(&PKGetConstantStringNF_DCK_EVENT_KEY_KEY_IDENTIFIER_onceToken, &__block_literal_global_81_4);
  return (id)PKGetConstantStringNF_DCK_EVENT_KEY_KEY_IDENTIFIER_constant;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_ERROR()
{
  if (qword_1ECF22C18 != -1)
    dispatch_once(&qword_1ECF22C18, &__block_literal_global_83);
  return (id)qword_1ECF22C10;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_RKE_ACTIONS()
{
  if (qword_1ECF22C28 != -1)
    dispatch_once(&qword_1ECF22C28, &__block_literal_global_85_2);
  return (id)qword_1ECF22C20;
}

id PKGetConstantStringNF_DCK_EVENT_KEY_RANGING_SUSPENSION_REASONS()
{
  if (qword_1ECF22C38 != -1)
    dispatch_once(&qword_1ECF22C38, &__block_literal_global_87);
  return (id)qword_1ECF22C30;
}

const __CFString *PKExternalProvisioningAuthorizationTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("none");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("dpan");
  else
    return v1;
}

uint64_t PKExternalProvisioningAuthorizationTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("none"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("none"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("dpan")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("dpan")), v6, v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

uint64_t PKSharedAccountParticpantCloudStoreZoneName(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;

  v3 = &PKSharedAccountCloudStoreParticipantJointZoneNameRoot;
  if (!a3)
    v3 = &PKSharedAccountCloudStoreParticipantIndividualZoneNameRoot;
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@%@%@%@"), CFSTR("card-participant-"), *v3, a1, CFSTR("-altDSID-"), a2);
}

uint64_t PKSharedAccountMergedCloudStoreZoneName(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("card-joint-"), a1);
}

uint64_t PKSharedAccountCardCloudStoreZoneName(uint64_t a1)
{
  return objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@"), CFSTR("card-"), a1);
}

uint64_t PKFieldTechnologyForNFTechnology(char a1)
{
  return a1 & 0xF;
}

uint64_t PKFieldValueAddedServiceModeForNFValueAddedServiceMode(unsigned int a1)
{
  if (a1 >= 4)
    return 0;
  else
    return 4 - a1;
}

uint64_t PKFieldAccessTerminalSubtypeNFTerminalSubtype(unint64_t a1)
{
  if (a1 > 0xB)
    return 0;
  else
    return qword_190456408[a1];
}

id PKFieldTechnologyDescriptions(char a1)
{
  void *v2;
  void *v3;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("A"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("B"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_6;
    goto LABEL_5;
  }
LABEL_11:
  objc_msgSend(v3, "addObject:", CFSTR("F"));
  if ((a1 & 8) != 0)
LABEL_5:
    objc_msgSend(v3, "addObject:", CFSTR("ECP"));
LABEL_6:
  if (!objc_msgSend(v3, "count"))
    objc_msgSend(v3, "addObject:", CFSTR("Unknown"));
  return v3;
}

uint64_t PKLinkNearField()
{
  if (PKLoadNearField_loadPredicate != -1)
    dispatch_once(&PKLoadNearField_loadPredicate, &__block_literal_global_210);
  PKNearFieldRadioIsAvailable();
  return PKSecureElementIsAvailable();
}

BOOL PKNearFieldRadioIsEnabled()
{
  void *v0;
  void *v1;
  NSObject *v2;
  _BOOL8 v3;
  uint64_t v5;
  uint8_t buf[4];
  void *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if (!PKNearFieldRadioIsAvailable())
    return 0;
  v5 = 0;
  objc_msgSend(PKGetClassNFHardwareManager(), "sharedHardwareManagerWithNoUI");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "getRadioEnabledState:", &v5);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if (v1)
  {
    PKLogFacilityTypeGetObject(6uLL);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v7 = v1;
      _os_log_impl(&dword_18FC92000, v2, OS_LOG_TYPE_DEFAULT, "Retrieving the NFC radio enabled state failed with an error: %@", buf, 0xCu);
    }

    v3 = 0;
    v5 = 0;
  }
  else
  {
    v3 = v5 == 1;
  }

  return v3;
}

uint64_t PKNearFieldLowPowerSupportIsAvailable()
{
  if (qword_1ECF22C50 != -1)
    dispatch_once(&qword_1ECF22C50, &__block_literal_global_26_1);
  return byte_1ECF22C41;
}

id PKAPRFromAPY(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  double v14;
  long double v15;
  long double v16;
  long double v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v27[2];
  int v28;
  _QWORD v29[2];
  int v30;

  v3 = a1;
  objc_msgSend(MEMORY[0x1E0CB3598], "decimalNumberWithString:", CFSTR("100"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "decimalNumberByDividingBy:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (a2 >= 1 && v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3598], "one");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v7 = (void *)MEMORY[0x1E0CB3598];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", a2);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = v8;
    if (v8)
    {
      objc_msgSend(v8, "decimalValue");
    }
    else
    {
      v29[0] = 0;
      v29[1] = 0;
      v30 = 0;
    }
    objc_msgSend(v7, "decimalNumberWithDecimal:", v29);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v5, "decimalNumberByAdding:", v6);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "decimalNumberByDividingBy:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "doubleValue");
    v15 = v14;
    objc_msgSend(v13, "doubleValue");
    v17 = pow(v15, v16);
    v18 = (void *)MEMORY[0x1E0CB3598];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", (double)v17);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19;
    if (v19)
    {
      objc_msgSend(v19, "decimalValue");
    }
    else
    {
      v27[0] = 0;
      v27[1] = 0;
      v28 = 0;
    }
    objc_msgSend(v18, "decimalNumberWithDecimal:", v27);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v21, "decimalNumberBySubtracting:", v6);
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v22, "decimalNumberByMultiplyingBy:", v11);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v23, "decimalNumberByMultiplyingByPowerOf10:", 2);
    v24 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0CB35A0], "decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:", 0, 2, 0, 0, 0, 0);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v24, "decimalNumberByRoundingAccordingToBehavior:", v25);
    v10 = (id)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v10 = v3;
  }

  return v10;
}

BOOL PKPaymentSetupContextIsiOSSetupAssistant(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

BOOL PKPaymentSetupContextIsSetupAssistant(uint64_t a1)
{
  return ((a1 - 1) & 0xFFFFFFFFFFFFFFFALL) == 0;
}

BOOL PKPaymentSetupContextIsExpressSetupAssistant(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFBLL) == 2;
}

BOOL PKPaymentSetupContextIsNonExpressSetupAssistant(uint64_t a1)
{
  return ((a1 - 1) & 0xFFFFFFFFFFFFFFFALL) == 0 && (a1 & 0xFFFFFFFFFFFFFFFBLL) != 2;
}

BOOL PKPaymentSetupContextIsBridge(uint64_t a1)
{
  return a1 == 6 || (a1 & 0xFFFFFFFFFFFFFFFELL) == 4;
}

BOOL PKPaymentSetupContextIsIssuerApp(uint64_t a1)
{
  return a1 == 7;
}

BOOL PKPaymentSetupContextIsMerchantApp(uint64_t a1)
{
  return a1 == 8;
}

BOOL PKPaymentSetupContextIsApprovedToRequestTCC(uint64_t a1)
{
  return (a1 & 0xFFFFFFFFFFFFFFFBLL) == 0 || a1 == 3;
}

BOOL PKPaymentSetupContextIsSystemOverlay(uint64_t a1)
{
  return a1 == 10;
}

void sub_19034557C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1903456A0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_19034584C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190345AA4(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_190346674(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

const __CFString *PKAccountStatementMetadataItemStatusToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("missing");
  if (a1 == 1)
    return CFSTR("onDevice");
  else
    return v1;
}

const __CFString *PKAccountStatementMetadataItemErrorToString(unint64_t a1)
{
  if (a1 > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADBDD8[a1];
}

const __CFString *PKAccountStatementMetadataItemTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1 == 2)
    v1 = CFSTR("accountEvent");
  if (a1 == 1)
    return CFSTR("transaction");
  else
    return v1;
}

uint64_t PKAccountStatementMetadataItemTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("transaction"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("transaction"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("accountEvent")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("accountEvent")),
          v6,
          v7))
    {
      v4 = 2;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 1;
LABEL_9:

  return v4;
}

void sub_19034DBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_19034DDD8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

Class initFKAmount()
{
  Class result;

  if (qword_1ECF22C60 != -1)
    dispatch_once(&qword_1ECF22C60, &__block_literal_global_215);
  result = objc_getClass("FKAmount");
  _MergedGlobals_285 = (uint64_t)result;
  getFKAmountClass[0] = (uint64_t (*)())FKAmountFunction;
  return result;
}

id FKAmountFunction()
{
  return (id)_MergedGlobals_285;
}

const __CFString *PKPassTileWidthClassHorizontalFlowToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("default");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("compact");
  else
    return v1;
}

uint64_t PKPassTileWidthClassHorizontalFlowFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("default")
    || v1
    && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("default")),
        v2,
        v2,
        (v3 & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v5 = v2;
    if (v5 == CFSTR("compact")
      || v2
      && (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("compact")),
          v6,
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

unint64_t PDAccountEndpointBackOffAccountTypeFromFeatureIdentifier(unint64_t result)
{
  if (result >= 6)
    return 2;
  return result;
}

id PDErrorDescription(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  v1 = a1;
  objc_msgSend(v1, "localizedDescription");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "userInfo");
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v3, "objectForKey:", *MEMORY[0x1E0CB3388]);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "localizedDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@ (%@)"), v2, v5);
    v6 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v6 = v2;
  }
  v7 = v6;

  return v7;
}

const __CFString *PKStringFromAccountPhysicalCardStatusUpdateReason(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 9)
    return CFSTR("unknown");
  else
    return off_1E2ADBFC8[a1 - 1];
}

uint64_t PKAccountPhysicalCardStatusUpdateReasonFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  char v22;
  __CFString *v23;
  __CFString *v24;
  char v25;
  __CFString *v26;
  __CFString *v27;
  char v28;
  __CFString *v29;
  __CFString *v30;
  int v31;

  objc_msgSend(a1, "lowercaseString");
  v1 = (__CFString *)(id)objc_claimAutoreleasedReturnValue();
  v2 = v1;
  if (v1 == CFSTR("expiration"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_32:
    v4 = 0;
    goto LABEL_33;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("expiration"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("fraud")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("fraud")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_33;
    }
    v8 = v6;
    if (v8 == CFSTR("lost")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("lost")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_33;
    }
    v11 = v9;
    if (v11 == CFSTR("damaged")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("damaged")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_33;
    }
    v14 = v12;
    if (v14 == CFSTR("stolen")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("stolen")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_33;
    }
    v17 = v15;
    if (v17 == CFSTR("returned")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("returned")),
          v18,
          (v19 & 1) != 0))
    {
      v4 = 6;
      goto LABEL_33;
    }
    v20 = v18;
    if (v20 == CFSTR("orderactivity")
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("orderactivity")),
          v21,
          (v22 & 1) != 0))
    {
      v4 = 7;
      goto LABEL_33;
    }
    v23 = v21;
    if (v23 == CFSTR("neveractivated")
      || (v24 = v23,
          v25 = -[__CFString isEqualToString:](v23, "isEqualToString:", CFSTR("neveractivated")),
          v24,
          (v25 & 1) != 0))
    {
      v4 = 8;
      goto LABEL_33;
    }
    v26 = v24;
    if (v26 == CFSTR("activationlimit")
      || (v27 = v26,
          v28 = -[__CFString isEqualToString:](v26, "isEqualToString:", CFSTR("activationlimit")),
          v27,
          (v28 & 1) != 0))
    {
      v4 = 9;
      goto LABEL_33;
    }
    v29 = v27;
    if (v29 == CFSTR("other")
      || (v30 = v29,
          v31 = -[__CFString isEqualToString:](v29, "isEqualToString:", CFSTR("other")),
          v30,
          v31))
    {
      v4 = 10;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_4:
  v4 = 1;
LABEL_33:

  return v4;
}

const __CFString *PKPaymentRewardsBalanceTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADC018[a1 - 1];
}

uint64_t PKPaymentRewardsBalanceTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("points"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("points"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("miles")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("miles")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("cashback")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("cashback")),
                   v9,
                   v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 1;
LABEL_12:

  return v4;
}

const __CFString *PKPaymentRewardsBalanceRoundingStrategyToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("undefined");
  else
    return off_1E2ADC030[a1 - 1];
}

uint64_t PKPaymentRewardsBalanceRoundingStrategyFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("up"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("up"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("down")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("down")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 1;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("halfEven")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("halfEven")),
                   v9,
                   v10))
    {
      v4 = 3;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 2;
LABEL_12:

  return v4;
}

const __CFString *PKPeerPaymentQuoteRequestDestinationTypeToString(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_1E2ADC110[a1];
}

const __CFString *PKPeerPaymentQuoteRequestSourceTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 2)
    return CFSTR("unknown");
  else
    return off_1E2ADC140[a1 - 1];
}

void sub_19036576C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CFString *PKPaymentRequestorToString(unint64_t a1)
{
  if (a1 > 5)
    return 0;
  else
    return off_1E2ADC580[a1];
}

__CFString *PKPaymentRequestTypeToString(unint64_t a1)
{
  if (a1 > 0xE)
    return 0;
  else
    return off_1E2ADC508[a1];
}

__CFString *PKShippingTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return off_1E2ADC5B0[a1];
}

__CFString *PKApplePayLaterAvailabilityToString(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return off_1E2ADC5D0[a1];
}

id PKMerchantCapabilityToStrings(char a1)
{
  void *v2;
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = v2;
  if ((a1 & 1) != 0)
  {
    objc_msgSend(v2, "addObject:", CFSTR("3DS"));
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  objc_msgSend(v3, "addObject:", CFSTR("EMV"));
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0)
      goto LABEL_5;
LABEL_11:
    objc_msgSend(v3, "addObject:", CFSTR("Debit"));
    if ((a1 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_6;
  }
LABEL_10:
  objc_msgSend(v3, "addObject:", CFSTR("Credit"));
  if ((a1 & 8) != 0)
    goto LABEL_11;
LABEL_5:
  if ((a1 & 0x10) != 0)
LABEL_6:
    objc_msgSend(v3, "addObject:", CFSTR("eWallet"));
LABEL_7:
  v4 = (void *)objc_msgSend(v3, "copy");

  return v4;
}

uint64_t PKMerchantCapabilityFromStrings(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "pk_arrayByApplyingBlock:", &__block_literal_global_219);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = objc_msgSend(v1, "containsObject:", CFSTR("3DS"));
  if (objc_msgSend(v1, "containsObject:", CFSTR("EMV")))
    v2 |= 2uLL;
  if (objc_msgSend(v1, "containsObject:", CFSTR("CREDIT")))
    v2 |= 4uLL;
  if (objc_msgSend(v1, "containsObject:", CFSTR("DEBIT")))
    v2 |= 8uLL;
  if (objc_msgSend(v1, "containsObject:", CFSTR("EWALLET")))
    v2 |= 0x10uLL;
  if (objc_msgSend(v1, "containsObject:", CFSTR("PSD2")))
    v2 |= 0x40uLL;

  return v2;
}

uint64_t PKCreateNFECapabilitiesFromPKCapabilities(char a1)
{
  return a1 & 0x43;
}

uint64_t PKIsPaymentRequestTypeEligibleForDocumentDelivery(unint64_t a1)
{
  return (a1 > 0xE) | (0x801u >> a1) & 1;
}

void sub_190367D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t PKAccountServicingEventStatusFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("new")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("open")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("pending")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("approved")) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("rejected")) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("withdrawn")) & 1) != 0)
  {
    v2 = 6;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("unavailable")))
  {
    v2 = 7;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

const __CFString *PKAccountServicingEventStatusToString(unint64_t a1)
{
  if (a1 > 7)
    return CFSTR("unknown");
  else
    return off_1E2ADC5E8[a1];
}

const __CFString *PKAccountServicingEventActivityTypeToString(unint64_t a1)
{
  if (a1 > 5)
    return CFSTR("unknown");
  else
    return off_1E2ADC628[a1];
}

uint64_t PKAccountServicingEventActivityTypeFromString(void *a1)
{
  void *v1;
  uint64_t v2;

  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v1, "isEqualToString:", CFSTR("transaction")) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("payment")) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("statement")) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(v1, "isEqualToString:", CFSTR("creditbureau")) & 1) != 0)
  {
    v2 = 4;
  }
  else if (objc_msgSend(v1, "isEqualToString:", CFSTR("rewards")))
  {
    v2 = 5;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKPeerPaymentRecipientCacheArchivePath()
{
  void *v0;
  void *v1;

  PKPeerPaymentRecipientCacheDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("cache.data"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

id PKPeerPaymentRecipientCacheDirectoryPath()
{
  void *v0;
  void *v1;

  PKSharedCacheDirectoryPath();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "stringByAppendingPathComponent:", CFSTR("RecipientCache"));
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  return v1;
}

void sub_19037CA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

const __CFString *PKAccountWebServiceDocumentTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("statement");
  if (a1 != 1)
    v1 = 0;
  if (a1 == 2)
    return CFSTR("taxForm");
  else
    return v1;
}

Class initMKWalletMerchantStylingInfo_1()
{
  Class result;

  if (qword_1ECF22CA0 != -1)
    dispatch_once(&qword_1ECF22CA0, &__block_literal_global_221);
  result = objc_getClass("MKWalletMerchantStylingInfo");
  _MergedGlobals_288 = (uint64_t)result;
  getMKWalletMerchantStylingInfoClass_1[0] = (uint64_t (*)())MKWalletMerchantStylingInfoFunction_1;
  return result;
}

id MKWalletMerchantStylingInfoFunction_1()
{
  return (id)_MergedGlobals_288;
}

const __CFString *PKPaymentSetupProductTypeToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xA)
    return CFSTR("unknown");
  else
    return off_1E2ADD138[a1 - 1];
}

uint64_t PKPaymentSetupProductTypeFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("bank"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("bankApp"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 5;
  }
  else if ((objc_msgSend(CFSTR("store"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("transit"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("eMoney"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else if ((objc_msgSend(CFSTR("feature"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 7;
  }
  else if ((objc_msgSend(CFSTR("default"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 8;
  }
  else if ((objc_msgSend(CFSTR("eWallet"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 9;
  }
  else if (objc_msgSend(CFSTR("identity"), "isEqualToString:", v1))
  {
    v2 = 10;
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

uint64_t PKPaymentSetupProductSupportedProvisioningMethodsFromArray(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  __CFString *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v11;
    v9 = CFSTR("cameraCapture");
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v11 != v5)
          objc_enumerationMutation(v1);
        v7 = *(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * i);
        if (objc_msgSend(CFSTR("readerMode"), "isEqualToString:", v7, v9)
          && +[PKContactlessCardIngester isSupported](PKContactlessCardIngester, "isSupported"))
        {
          v4 |= 1uLL;
        }
        else if (objc_msgSend(CFSTR("digitalIssuance"), "isEqualToString:", v7))
        {
          v4 |= 2uLL;
        }
        else if (objc_msgSend(CFSTR("inApp"), "isEqualToString:", v7))
        {
          v4 |= 0x10uLL;
        }
        else if (objc_msgSend(CFSTR("appClip"), "isEqualToString:", v7))
        {
          v4 |= 0x20uLL;
        }
        else if (-[__CFString isEqualToString:](v9, "isEqualToString:", v7))
        {
          v4 |= 0x40uLL;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

__CFString *PKPaymentSupportedProvisioningMethodToString(uint64_t a1)
{
  __CFString *v2;
  __CFString **v3;

  v2 = CFSTR("unknown");
  if (a1 <= 15)
  {
    if (a1 == 1)
    {
      v3 = PKPaymentProvisioningMethodReaderMode;
      goto LABEL_12;
    }
    if (a1 == 2)
    {
      v3 = PKPaymentProvisioningMethodDigitalIssuance;
      goto LABEL_12;
    }
  }
  else
  {
    switch(a1)
    {
      case 16:
        v3 = PKPaymentProvisioningMethodInApp;
        goto LABEL_12;
      case 32:
        v3 = PKPaymentProvisioningMethodAppClip;
        goto LABEL_12;
      case 64:
        v3 = PKPaymentProvisioningMethodCameraCapture;
LABEL_12:
        v2 = *v3;
        break;
    }
  }
  return v2;
}

uint64_t PKPaymentProductFlagsFromArray(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = 0;
    v5 = *(_QWORD *)v9;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v1);
        if (objc_msgSend(CFSTR("eMoneyDisabled"), "isEqualToString:", *(_QWORD *)(*((_QWORD *)&v8 + 1) + 8 * i)))v4 = 1;
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t PKPaymentSetupHSA2RequirementFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("required"), "isEqualToString:", v1) & 1) != 0)
    v2 = 2;
  else
    v2 = objc_msgSend(CFSTR("recommended"), "isEqualToString:", v1);

  return v2;
}

const __CFString *PKPaymentSetupProductStateToString(unint64_t a1)
{
  if (a1 > 4)
    return CFSTR("unknown");
  else
    return off_1E2ADD190[a1];
}

uint64_t PKPaymentSetupProductStateFromString(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  if ((objc_msgSend(CFSTR("available"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 1;
  }
  else if ((objc_msgSend(CFSTR("unavailable"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 2;
  }
  else if ((objc_msgSend(CFSTR("notify"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 3;
  }
  else if ((objc_msgSend(CFSTR("notifyRequested"), "isEqualToString:", v1) & 1) != 0)
  {
    v2 = 4;
  }
  else
  {
    objc_msgSend(CFSTR("unknown"), "isEqualToString:", v1);
    v2 = 0;
  }

  return v2;
}

uint64_t PKComparePaymentSetupProductRegionPriority(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 == 2 && a2 != 2)
    return -1;
  if (a1 != 2 && a2 == 2 || a1 == 1 && a2 != 1)
    return 1;
  v4 = a1 != 1 && a2 == 1;
  return v4 << 63 >> 63;
}

unint64_t PKAppletSubcredentialEntitlementTypeFromValue(unint64_t result)
{
  if (result >= 6)
    return 6;
  return result;
}

uint64_t PKObjectHash(const void *a1)
{
  return SipHash();
}

id PKObjectDescription(void *a1)
{
  id v1;
  uint64_t v2;
  unint64_t v3;
  objc_class *v4;
  id v5;
  void *v6;
  __objc2_class **v7;
  void *v8;
  void *v9;
  objc_property_t *v10;
  objc_property_t *v11;
  uint64_t v12;
  __objc2_class **v13;
  objc_property *v14;
  id v15;
  BOOL v16;
  objc_class *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  char *v27;
  void *v28;
  NSString *v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  id v33;
  int v34;
  void *v35;
  const __CFString *v36;
  unint64_t v37;
  void *v38;
  int v39;
  void *v40;
  int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  _QWORD v53[4];
  id v54;
  unsigned int outCount;
  objc_super v56;

  v1 = a1;
  v2 = objc_opt_class();
  v3 = 0x1E0CB3000uLL;
  if (v2)
  {
    v4 = (objc_class *)v2;
    v5 = objc_alloc_init(MEMORY[0x1E0C99E08]);
    objc_msgSend(MEMORY[0x1E0C99DE8], "array");
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    if (-[objc_class superclass](v4, "superclass"))
    {
      v7 = off_1E2A9E000;
      v49 = v5;
      v50 = v1;
      v48 = v6;
      do
      {
        NSStringFromClass(v4);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v5, "objectForKeyedSubscript:", v8);
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        if (!v9)
        {
          v51 = v8;
          objc_msgSend(MEMORY[0x1E0C99DE8], "array");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          outCount = 0;
          v10 = class_copyPropertyList(v4, &outCount);
          v11 = v10;
          if (outCount)
          {
            v12 = 0;
            v13 = &classRef_PKAccountPaymentFundingDetailsBankAccount;
            while (1)
            {
              v14 = v11[v12];
              v15 = objc_alloc(v7[479]);
              if (v15)
                v16 = v14 == 0;
              else
                v16 = 1;
              if (v16)
              {

              }
              else
              {
                v17 = (objc_class *)v13[320];
                v56.receiver = v15;
                v56.super_class = v17;
                v18 = objc_msgSendSuper2(&v56, sel_init);
                if (v18)
                {
                  v19 = v18;
                  objc_msgSend(*(id *)(v3 + 2368), "stringWithUTF8String:", property_getName(v14));
                  v20 = objc_claimAutoreleasedReturnValue();
                  v21 = (void *)v19[1];
                  v19[1] = v20;

                  v22 = property_copyAttributeValue(v14, "V");
                  if (v22)
                  {
                    v23 = v22;
                    objc_msgSend(*(id *)(v3 + 2368), "stringWithUTF8String:", v22);
                    v24 = objc_claimAutoreleasedReturnValue();
                    v25 = (void *)v19[2];
                    v19[2] = v24;

                    free(v23);
                  }
                  v26 = property_copyAttributeValue(v14, "T");
                  if (v26)
                  {
                    v27 = v26;
                    objc_msgSend(*(id *)(v3 + 2368), "stringWithUTF8String:", v26);
                    v28 = (void *)objc_claimAutoreleasedReturnValue();
                    free(v27);
                    if (objc_msgSend(v28, "hasPrefix:", CFSTR("@"))
                      && (unint64_t)objc_msgSend(v28, "length") >= 4)
                    {
                      objc_msgSend(v28, "substringWithRange:", 2, objc_msgSend(v28, "length") - 3);
                      v29 = (NSString *)objc_claimAutoreleasedReturnValue();
                      v19[4] = 1;
                      NSClassFromString(v29);
                      v30 = objc_claimAutoreleasedReturnValue();
                      v31 = (void *)v19[3];
                      v19[3] = v30;

                      goto LABEL_48;
                    }
                    v33 = objc_retainAutorelease(v28);
                    v34 = *(char *)objc_msgSend(v33, "UTF8String");
                    if (v34 <= 99)
                    {
                      if (v34 <= 75)
                      {
                        if (v34 == 66)
                        {
                          v35 = (void *)v19[5];
                          v19[4] = 14;
                          v36 = CFSTR("BOOLValue");
                          goto LABEL_43;
                        }
                        if (v34 == 73)
                        {
                          v35 = (void *)v19[5];
                          v19[4] = 8;
                          v36 = CFSTR("unsignedIntValue");
                          goto LABEL_43;
                        }
                      }
                      else
                      {
                        switch(v34)
                        {
                          case 'L':
                            v35 = (void *)v19[5];
                            v19[4] = 10;
                            v36 = CFSTR("unsignedLongValue");
                            goto LABEL_43;
                          case 'Q':
                            v35 = (void *)v19[5];
                            v19[4] = 11;
                            v36 = CFSTR("unsignedLongLongValue");
                            goto LABEL_43;
                          case 'S':
                            v35 = (void *)v19[5];
                            v19[4] = 9;
                            v36 = CFSTR("unsignedShortValue");
                            goto LABEL_43;
                        }
                      }
LABEL_38:
                      v19[4] = 0;
                    }
                    else
                    {
                      switch(v34)
                      {
                        case 'd':
                          v35 = (void *)v19[5];
                          v19[4] = 13;
                          v36 = CFSTR("doubleValue");
                          break;
                        case 'e':
                        case 'g':
                        case 'h':
                        case 'j':
                        case 'k':
                          goto LABEL_38;
                        case 'f':
                          v35 = (void *)v19[5];
                          v19[4] = 12;
                          v36 = CFSTR("floatValue");
                          break;
                        case 'i':
                          v35 = (void *)v19[5];
                          v19[4] = 4;
                          v36 = CFSTR("intValue");
                          break;
                        case 'l':
                          v35 = (void *)v19[5];
                          v19[4] = 6;
                          v36 = CFSTR("longValue");
                          break;
                        default:
                          if (v34 == 113)
                          {
                            v35 = (void *)v19[5];
                            v19[4] = 7;
                            v36 = CFSTR("longLongValue");
                          }
                          else
                          {
                            if (v34 != 115)
                              goto LABEL_38;
                            v35 = (void *)v19[5];
                            v19[4] = 5;
                            v36 = CFSTR("shortValue");
                          }
                          break;
                      }
LABEL_43:
                      v19[5] = v36;

                    }
                    objc_msgSend(*(id *)(v3 + 2368), "stringWithUTF8String:", "q");
                    v37 = v3;
                    v38 = (void *)objc_claimAutoreleasedReturnValue();
                    v39 = objc_msgSend(v38, "isEqualToString:", v33);

                    if (v39)
                    {
                      v29 = (NSString *)v19[5];
                      v19[4] = 2;
                      v19[5] = CFSTR("integerValue");
                      v3 = v37;
                      v7 = off_1E2A9E000;
                      v13 = &classRef_PKAccountPaymentFundingDetailsBankAccount;
                      goto LABEL_48;
                    }
                    objc_msgSend(*(id *)(v37 + 2368), "stringWithUTF8String:", "Q");
                    v40 = (void *)objc_claimAutoreleasedReturnValue();
                    v41 = objc_msgSend(v40, "isEqualToString:", v33);

                    v3 = v37;
                    v7 = off_1E2A9E000;
                    v13 = &classRef_PKAccountPaymentFundingDetailsBankAccount;
                    if (v41)
                    {
                      v29 = (NSString *)v19[5];
                      v19[4] = 3;
                      v19[5] = CFSTR("unsignedIntegerValue");
LABEL_48:

                    }
                  }
                  v32 = v19;

                  objc_msgSend(v52, "addObject:", v32);
                  goto LABEL_51;
                }
              }
              v32 = 0;
LABEL_51:

              if (++v12 >= (unint64_t)outCount)
                goto LABEL_54;
            }
          }
          if (v10)
LABEL_54:
            free(v11);
          objc_msgSend(v52, "removeObjectsInArray:", &unk_1E2C3E800);
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v52);
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          v5 = v49;
          v8 = v51;
          objc_msgSend(v49, "setObject:forKeyedSubscript:", v9, v51);

          v1 = v50;
          v6 = v48;
        }
        objc_msgSend(v6, "addObjectsFromArray:", v9);
        v4 = (objc_class *)-[objc_class superclass](v4, "superclass");

      }
      while (-[objc_class superclass](v4, "superclass"));
    }
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v6);
    v42 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    v42 = 0;
  }
  objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithFormat:", CFSTR("<%@: %p"), objc_opt_class(), v1);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  if (v42)
  {
    objc_msgSend(v42, "valueForKey:", CFSTR("name"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v1, "dictionaryWithValuesForKeys:", v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    v53[0] = MEMORY[0x1E0C809B0];
    v53[1] = 3221225472;
    v53[2] = __PKObjectDescription_block_invoke;
    v53[3] = &unk_1E2AC3218;
    v54 = v43;
    objc_msgSend(v45, "enumerateKeysAndObjectsUsingBlock:", v53);

  }
  objc_msgSend(v43, "appendFormat:", CFSTR(">"));
  objc_msgSend(*(id *)(v3 + 2368), "stringWithString:", v43);
  v46 = (void *)objc_claimAutoreleasedReturnValue();

  return v46;
}

id _PKJSONCompliantRepresentationForObject(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  objc_class *v5;
  Ivar *v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  NSString *v17;
  uint64_t v18;
  void *v19;
  unsigned int outCount;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1 && objc_msgSend(v1, "superclass"))
  {
    v3 = _PKPropertyTypeForObject(v2);
    if ((unint64_t)(v3 - 3) > 6)
    {
      outCount = 0;
      v5 = (objc_class *)objc_opt_class();
      v6 = class_copyIvarList(v5, &outCount);
      if (outCount)
      {
        v7 = 0;
        v8 = 0;
        do
        {
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", ivar_getName(v6[v7]));
          v9 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v9, "hasPrefix:", CFSTR("_")))
          {
            objc_msgSend(v9, "substringFromIndex:", 1);
            v10 = objc_claimAutoreleasedReturnValue();

            v9 = (void *)v10;
          }
          if ((objc_msgSend(&unk_1E2C3E7E8, "containsObject:", v9) & 1) == 0)
          {
            NSSelectorFromString((NSString *)v9);
            if ((objc_opt_respondsToSelector() & 1) != 0)
            {
              objc_msgSend(v2, "valueForKey:", v9);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              objc_msgSend(v9, "substringToIndex:", 1);
              v12 = (void *)objc_claimAutoreleasedReturnValue();
              v13 = (void *)MEMORY[0x1E0CB3940];
              objc_msgSend(v12, "uppercaseString");
              v14 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v9, "substringFromIndex:", 1);
              v15 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v14, "stringByAppendingString:", v15);
              v16 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v13, "stringWithFormat:", CFSTR("is%@"), v16);
              v17 = (NSString *)objc_claimAutoreleasedReturnValue();

              NSSelectorFromString(v17);
              if ((objc_opt_respondsToSelector() & 1) != 0)
              {
                objc_msgSend(v2, "valueForKey:", v9);
                v11 = (void *)objc_claimAutoreleasedReturnValue();
              }
              else
              {
                v11 = 0;
              }

            }
            if (v11)
            {
              v18 = _PKPropertyTypeForObject(v11);
              _PKResultingValueForProperty(v11, v18);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              if (v19)
              {
                if (!v8)
                  v8 = objc_alloc_init(MEMORY[0x1E0C99E08]);
                objc_msgSend(v8, "setObject:forKey:", v19, v9);

              }
            }

          }
          ++v7;
        }
        while (v7 < outCount);
      }
      else
      {
        v8 = 0;
      }
      if (objc_msgSend(v8, "count"))
        v4 = (void *)objc_msgSend(v8, "copy");
      else
        v4 = 0;

      free(v6);
    }
    else
    {
      _PKResultingValueForProperty(v2, v3);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

uint64_t _PKPropertyTypeForObject(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v2 = 3;
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v2 = 4;
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v2 = 5;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v2 = 6;
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v2 = 7;
          }
          else
          {
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0)
            {
              v2 = 8;
            }
            else
            {
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0)
                v2 = 9;
              else
                v2 = 2;
            }
          }
        }
      }
    }
  }

  return v2;
}

id _PKResultingValueForProperty(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t k;
  void *v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  _BYTE v40[128];
  _BYTE v41[128];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  switch(a2)
  {
    case 1:
    case 3:
    case 6:
      v5 = v3;
      goto LABEL_7;
    case 2:
      _PKJSONCompliantRepresentationForObject(v3);
      v5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 4:
      objc_msgSend(v3, "absoluteString");
      v5 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_7;
    case 5:
      PKW3CDateStringFromDate(v3);
      v5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_7:
      v6 = v5;
      break;
    case 7:
      v7 = objc_alloc_init(MEMORY[0x1E0C99E08]);
      v8 = v4;
      v35 = 0u;
      v36 = 0u;
      v37 = 0u;
      v38 = 0u;
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v36;
        do
        {
          for (i = 0; i != v10; ++i)
          {
            if (*(_QWORD *)v36 != v11)
              objc_enumerationMutation(v8);
            v13 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
            objc_msgSend(v8, "objectForKeyedSubscript:", v13);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if (v14)
              objc_msgSend(v7, "setObject:forKey:", v14, v13);

          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v35, v41, 16);
        }
        while (v10);
      }
      if (objc_msgSend(v7, "count"))
        v6 = (void *)objc_msgSend(v7, "copy");
      else
        v6 = 0;

      goto LABEL_39;
    case 8:
      v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v15 = v4;
      v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v32;
        do
        {
          for (j = 0; j != v17; ++j)
          {
            if (*(_QWORD *)v32 != v18)
              objc_enumerationMutation(v15);
            _PKJSONCompliantRepresentationForObject(*(_QWORD *)(*((_QWORD *)&v31 + 1) + 8 * j));
            v20 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "safelyAddObject:", v20);

          }
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v31, v40, 16);
        }
        while (v17);
      }
      goto LABEL_34;
    case 9:
      v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v15 = v4;
      v21 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
      if (v21)
      {
        v22 = v21;
        v23 = *(_QWORD *)v28;
        do
        {
          for (k = 0; k != v22; ++k)
          {
            if (*(_QWORD *)v28 != v23)
              objc_enumerationMutation(v15);
            _PKJSONCompliantRepresentationForObject(*(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * k));
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v7, "safelyAddObject:", v25, (_QWORD)v27);

          }
          v22 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v27, v39, 16);
        }
        while (v22);
      }
LABEL_34:

      if (objc_msgSend(v7, "count"))
        v6 = (void *)objc_msgSend(v7, "copy");
      else
        v6 = 0;
LABEL_39:

      break;
    default:
      v6 = 0;
      break;
  }

  return v6;
}

void sub_19039DD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_19039FC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a42, 8);
  _Block_object_dispose(&a64, 8);
  _Block_object_dispose((const void *)(v64 - 248), 8);
  _Block_object_dispose((const void *)(v64 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_1903A0D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1903AD084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1903AD538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1903B1010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1903B116C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1903B5C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class initCIDVUIProofingFlowManager_0()
{
  Class result;

  if (qword_1ECF22CE0 != -1)
    dispatch_once(&qword_1ECF22CE0, &__block_literal_global_228);
  result = objc_getClass("CIDVUIProofingFlowManager");
  _MergedGlobals_292 = (uint64_t)result;
  getCIDVUIProofingFlowManagerClass_0[0] = (uint64_t (*)())CIDVUIProofingFlowManagerFunction_0;
  return result;
}

id CIDVUIProofingFlowManagerFunction_0()
{
  return (id)_MergedGlobals_292;
}

__CFString *PKStringForSubcredentialProvisioningState(unint64_t a1)
{
  if (a1 > 0x10)
    return 0;
  else
    return off_1E2ADDAA8[a1];
}

uint64_t PKProtobufCloudStoreZoneInvitationResponseReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v14;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  PKProtobufCloudStoreZoneInvitation *v29;
  uint64_t result;
  uint64_t v31;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  if (*(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BF0]) < *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]))
  {
    v7 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      if (*(_BYTE *)(a2 + *v5))
        return *(_BYTE *)(a2 + *v5) == 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(_QWORD *)(a2 + v11);
        if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
          break;
        v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v12);
        *(_QWORD *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0)
          goto LABEL_12;
        v8 += 7;
        v14 = v9++ >= 9;
        if (v14)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(_BYTE *)(a2 + *v5))
        v10 = 0;
LABEL_14:
      if (v15 || (v10 & 7) == 4)
        return *(_BYTE *)(a2 + *v5) == 0;
      v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
        break;
      if ((_DWORD)v17 != 2)
      {
        if ((_DWORD)v17 != 1)
        {
          result = PBReaderSkipValueWithTag();
          if (!(_DWORD)result)
            return result;
          goto LABEL_49;
        }
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = *v3;
          v22 = *(_QWORD *)(a2 + v21);
          if (v22 == -1 || v22 >= *(_QWORD *)(a2 + *v4))
            break;
          v23 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v22);
          *(_QWORD *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0)
            goto LABEL_41;
          v18 += 7;
          v14 = v19++ >= 9;
          if (v14)
          {
            LODWORD(v20) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + *v5) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + *v5))
          LODWORD(v20) = 0;
LABEL_43:
        v31 = 20;
        goto LABEL_48;
      }
      v29 = objc_alloc_init(PKProtobufCloudStoreZoneInvitation);
      objc_storeStrong((id *)(a1 + 8), v29);
      if (!PBReaderPlaceMark() || (PKProtobufCloudStoreZoneInvitationReadFrom((uint64_t)v29, a2) & 1) == 0)
      {

        return 0;
      }
      PBReaderRecallMark();

LABEL_49:
      if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
        return *(_BYTE *)(a2 + *v5) == 0;
    }
    v24 = 0;
    v25 = 0;
    v20 = 0;
    *(_BYTE *)(a1 + 24) |= 1u;
    while (1)
    {
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v4))
        break;
      v28 = *(_BYTE *)(*(_QWORD *)(a2 + *v7) + v27);
      *(_QWORD *)(a2 + v26) = v27 + 1;
      v20 |= (unint64_t)(v28 & 0x7F) << v24;
      if ((v28 & 0x80) == 0)
        goto LABEL_45;
      v24 += 7;
      v14 = v25++ >= 9;
      if (v14)
      {
        LODWORD(v20) = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + *v5))
      LODWORD(v20) = 0;
LABEL_47:
    v31 = 16;
LABEL_48:
    *(_DWORD *)(a1 + v31) = v20;
    goto LABEL_49;
  }
  return *(_BYTE *)(a2 + *v5) == 0;
}

Class initFKPaymentTransaction()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKPaymentTransaction");
  _MergedGlobals_3_1 = (uint64_t)result;
  getFKPaymentTransactionClass[0] = (uint64_t (*)())FKPaymentTransactionFunction;
  return result;
}

id FKPaymentTransactionFunction()
{
  return (id)_MergedGlobals_3_1;
}

Class initFKAmount_0()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKAmount");
  qword_1EE1DB768 = (uint64_t)result;
  getFKAmountClass_0[0] = (uint64_t (*)())FKAmountFunction_0;
  return result;
}

id FKAmountFunction_0()
{
  return (id)qword_1EE1DB768;
}

Class initFKActions()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKActions");
  qword_1EE1DB770 = (uint64_t)result;
  getFKActionsClass[0] = (uint64_t (*)())FKActionsFunction;
  return result;
}

id FKActionsFunction()
{
  return (id)qword_1EE1DB770;
}

Class initFKMapsMerchant()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKMapsMerchant");
  qword_1EE1DB778 = (uint64_t)result;
  _MergedGlobals_185 = (uint64_t (*)())FKMapsMerchantFunction;
  return result;
}

id FKMapsMerchantFunction()
{
  return (id)qword_1EE1DB778;
}

Class initFKMapsBrand()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKMapsBrand");
  qword_1EE1DB780 = (uint64_t)result;
  off_1ECF21C40 = (uint64_t (*)())FKMapsBrandFunction;
  return result;
}

id FKMapsBrandFunction()
{
  return (id)qword_1EE1DB780;
}

Class initFKMapsTransactionInsight()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKMapsTransactionInsight");
  qword_1EE1DB788 = (uint64_t)result;
  off_1ECF21C48 = (uint64_t (*)())FKMapsTransactionInsightFunction;
  return result;
}

id FKMapsTransactionInsightFunction()
{
  return (id)qword_1EE1DB788;
}

Class initFKPaymentTransactionInsights()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKPaymentTransactionInsights");
  qword_1EE1DB790 = (uint64_t)result;
  getFKPaymentTransactionInsightsClass[0] = (uint64_t (*)())FKPaymentTransactionInsightsFunction;
  return result;
}

id FKPaymentTransactionInsightsFunction()
{
  return (id)qword_1EE1DB790;
}

Class initFKApplePayTransactionInsight()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKApplePayTransactionInsight");
  qword_1EE1DB798 = (uint64_t)result;
  getFKApplePayTransactionInsightClass[0] = (uint64_t (*)())FKApplePayTransactionInsightFunction;
  return result;
}

id FKApplePayTransactionInsightFunction()
{
  return (id)qword_1EE1DB798;
}

Class initFKContactTransactionInsight()
{
  Class result;

  if (qword_1EE1DB760 != -1)
    dispatch_once(&qword_1EE1DB760, &__block_literal_global_229);
  result = objc_getClass("FKContactTransactionInsight");
  qword_1EE1DB7A0 = (uint64_t)result;
  getFKContactTransactionInsightClass = (uint64_t (*)())FKContactTransactionInsightFunction;
  return result;
}

id FKContactTransactionInsightFunction()
{
  return (id)qword_1EE1DB7A0;
}

const __CFString *PKPaymentRewardsRedemptionStatusToString(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 5)
    return CFSTR("unknown");
  else
    return off_1E2ADDB88[a1 - 1];
}

uint64_t PKPaymentRewardsRedemptionStatusFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  char v10;
  __CFString *v11;
  __CFString *v12;
  char v13;
  __CFString *v14;
  __CFString *v15;
  char v16;
  __CFString *v17;
  __CFString *v18;
  char v19;
  __CFString *v20;
  __CFString *v21;
  int v22;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("accepted"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("accepted"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("pending")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("pending")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 2;
      goto LABEL_23;
    }
    v8 = v6;
    if (v8 == CFSTR("complete")
      || (v9 = v8,
          v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("complete")),
          v9,
          (v10 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_23;
    }
    v11 = v9;
    if (v11 == CFSTR("failed")
      || (v12 = v11,
          v13 = -[__CFString isEqualToString:](v11, "isEqualToString:", CFSTR("failed")),
          v12,
          (v13 & 1) != 0))
    {
      v4 = 4;
      goto LABEL_23;
    }
    v14 = v12;
    if (v14 == CFSTR("expired")
      || (v15 = v14,
          v16 = -[__CFString isEqualToString:](v14, "isEqualToString:", CFSTR("expired")),
          v15,
          (v16 & 1) != 0))
    {
      v4 = 5;
      goto LABEL_23;
    }
    v17 = v15;
    if (v17 == CFSTR("canceled")
      || (v18 = v17,
          v19 = -[__CFString isEqualToString:](v17, "isEqualToString:", CFSTR("canceled")),
          v18,
          (v19 & 1) != 0)
      || (v20 = v18, v20 == CFSTR("cancelled"))
      || (v21 = v20,
          v22 = -[__CFString isEqualToString:](v20, "isEqualToString:", CFSTR("cancelled")),
          v21,
          v22))
    {
      v4 = 6;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_4:
  v4 = 1;
LABEL_23:

  return v4;
}

id PKPassStyleDictionaryKeyForCardDictionary(void *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;

  objc_msgSend(a1, "allKeys");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  v2 = 0;
  while (1)
  {
    PKPassStyleToString(__const_PKPassStyleDictionaryKeyForCardDictionary_orderOfStyles[v2]);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    if ((objc_msgSend(v1, "containsObject:", v3) & 1) != 0)
      break;

    if (++v2 == 8)
    {
      v3 = 0;
      break;
    }
  }

  return v3;
}

unint64_t PKPassStyleForCardDictionary(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFString *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  NSObject *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v80;
  id v81;
  void *v82;
  id obj;
  id obja;
  void *v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  id v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[128];
  _QWORD v100[3];
  const __CFString *v101;
  _OWORD buf[8];
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  objc_msgSend(v3, "PKArrayForKey:", CFSTR("preferredStyleSchemes"));
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v90, v99, 16);
  if (!v6)
    goto LABEL_54;
  v7 = v6;
  v8 = *(_QWORD *)v91;
  v86 = *MEMORY[0x1E0CB3388];
  v87 = v5;
  v88 = *(_QWORD *)v91;
  do
  {
    v9 = 0;
    v89 = v7;
    do
    {
      if (*(_QWORD *)v91 != v8)
        objc_enumerationMutation(v5);
      v10 = *(void **)(*((_QWORD *)&v90 + 1) + 8 * v9);
      if (!objc_msgSend(v10, "isEqualToString:", CFSTR("posterEventTicket")))
      {
        v26 = PKPassStyleFromString(v10);
        PKPassStyleToString(v26);
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v3, "objectForKey:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v28)
          goto LABEL_27;
        goto LABEL_26;
      }
      v11 = v3;
      v12 = v3;
      v13 = v4;
      objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("semantics"));
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      PKPassSemanticsFromDictionary(v14, 0, v13, 0);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      +[PKImage URLForImageNamed:inBundle:scale:](PKImage, "URLForImageNamed:inBundle:scale:", CFSTR("background"), v13, 0);
      v16 = objc_claimAutoreleasedReturnValue();

      +[PKImage URLForImageNamed:inBundle:scale:](PKImage, "URLForImageNamed:inBundle:scale:", CFSTR("artwork"), v13, 0);
      v17 = objc_claimAutoreleasedReturnValue();

      if (v16 | v17)
      {
        objc_msgSend(v12, "objectForKey:", CFSTR("nfc"));
        v29 = (void *)objc_claimAutoreleasedReturnValue();

        if (!v29)
        {
          v25 = CFSTR("Pass does not contain VAS information");
          goto LABEL_17;
        }
        if (!objc_msgSend(v15, "count"))
        {
          v25 = CFSTR("posterEventTicket pass lacks valid semantic tags.");
          goto LABEL_17;
        }
        v94 = 0;
        PKValidateRequiredSemanticTag(v15, CFSTR("eventType"), &v94);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        v31 = v94;
        v85 = v31;
        if (v30)
        {
          v32 = v30;
          v33 = v32;
LABEL_52:

          goto LABEL_18;
        }
        objc_msgSend(v31, "stringValue");
        v82 = (void *)objc_claimAutoreleasedReturnValue();
        if (v82)
        {
          v101 = CFSTR("eventName");
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v101, 1);
          v45 = (void *)objc_claimAutoreleasedReturnValue();
          PKValidateAllRequiredSemanticTags(v15, v45);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

          if (v46)
          {
            v47 = v46;
            goto LABEL_50;
          }
          v81 = v4;
          v100[0] = CFSTR("venueName");
          v100[1] = CFSTR("venueRegionName");
          v100[2] = CFSTR("venueRoom");
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v100, 3);
          v48 = (void *)objc_claimAutoreleasedReturnValue();
          v49 = v15;
          v50 = v48;
          v95 = 0u;
          v96 = 0u;
          v97 = 0u;
          v98 = 0u;
          v51 = v50;
          v52 = objc_msgSend(v51, "countByEnumeratingWithState:objects:count:", &v95, buf, 16);
          if (v52)
          {
            v53 = v52;
            v54 = *(_QWORD *)v96;
            obj = v51;
            while (2)
            {
              for (i = 0; i != v53; ++i)
              {
                if (*(_QWORD *)v96 != v54)
                  objc_enumerationMutation(obj);
                v56 = v49;
                PKValidateRequiredSemanticTag(v49, *(void **)(*((_QWORD *)&v95 + 1) + 8 * i), 0);
                v57 = (void *)objc_claimAutoreleasedReturnValue();

                if (!v57)
                {
                  v51 = obj;

                  v65 = 0;
                  v49 = v56;
                  goto LABEL_43;
                }
                v49 = v56;
              }
              v51 = obj;
              v53 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v95, buf, 16);
              if (v53)
                continue;
              break;
            }
          }

          PKValidationErrorWithReason(CFSTR("Semantics dictionary must contain one of '%@'"), v58, v59, v60, v61, v62, v63, v64, (uint64_t)v51);
          v65 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_43:

          v66 = v49;
          v4 = v81;
          if (!v65)
          {
            obja = v66;
            v67 = (void *)MEMORY[0x1E0CB37E8];
            v68 = v82;
            objc_msgSend(v67, "numberWithInt:", 0);
            v69 = (void *)objc_claimAutoreleasedReturnValue();
            v74 = _PKEnumValueFromString(v68, v69, (uint64_t)CFSTR("PKEventType"), CFSTR("PKEventTypeGeneric, PKEventTypeLivePerformance, PKEventTypeMovie, PKEventTypeSports, PKEventTypeConference, PKEventTypeConvention, PKEventTypeWorkshop, PKEventTypeSocialGathering"), v70, v71, v72, v73, 0);

            v75 = v74;
            if (v74 == 1)
            {
              *(_QWORD *)&buf[0] = CFSTR("performerNames");
              objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 1);
              v76 = (void *)objc_claimAutoreleasedReturnValue();
              v4 = v81;
LABEL_48:
              PKValidateAllRequiredSemanticTags(obja, v76);
              v65 = (void *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v65 = 0;
              v4 = v81;
              if (v75 == 3)
              {
                *(_QWORD *)&buf[0] = CFSTR("awayTeamAbbreviation");
                *((_QWORD *)&buf[0] + 1) = CFSTR("homeTeamAbbreviation");
                objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", buf, 2);
                v76 = (void *)objc_claimAutoreleasedReturnValue();
                goto LABEL_48;
              }
            }
          }
          v47 = v65;
LABEL_50:
          v32 = v47;
          v33 = v47;
        }
        else
        {
          PKValidationErrorWithReason(CFSTR("Value required for eventType tag."), v38, v39, v40, v41, v42, v43, v44, v80);
          v33 = (void *)objc_claimAutoreleasedReturnValue();
          v32 = 0;
        }

        goto LABEL_52;
      }
      v25 = CFSTR("Pass does not contain artwork.png/artwork@2x.png/artwork@3x.png or background.png/background@2x.png/background@3x.png");
LABEL_17:
      PKValidationErrorWithReason(v25, v18, v19, v20, v21, v22, v23, v24, v80);
      v33 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_18:

      if (v33)
      {
        objc_msgSend(v33, "userInfo");
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v34, "objectForKeyedSubscript:", v86);
        v35 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v35, "localizedDescription");
        v36 = objc_claimAutoreleasedReturnValue();

        PKLogFacilityTypeGetObject(0);
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf[0]) = 138543362;
          *(_QWORD *)((char *)buf + 4) = v36;
          _os_log_error_impl(&dword_18FC92000, v37, OS_LOG_TYPE_ERROR, "Failed to validate \"posterEventTicket\" scheme for pass: %{public}@.", (uint8_t *)buf, 0xCu);
        }

        v26 = 12;
      }
      else
      {
        PKLogFacilityTypeGetObject(5uLL);
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf[0]) = 0;
          _os_log_impl(&dword_18FC92000, v36, OS_LOG_TYPE_DEFAULT, "Met requirements for \"posterEventTicket\" scheme.", (uint8_t *)buf, 2u);
        }
        v26 = 9;
      }

      v5 = v87;
      v3 = v11;
      v8 = v88;
      v7 = v89;
LABEL_26:
      if (v26 != 12)
      {
        v78 = v5;
        goto LABEL_56;
      }
LABEL_27:
      ++v9;
    }
    while (v9 != v7);
    v77 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v90, v99, 16);
    v7 = v77;
  }
  while (v77);
LABEL_54:

  PKPassStyleDictionaryKeyForCardDictionary(v3);
  v78 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = PKPassStyleFromString(v78);
LABEL_56:

  return v26;
}

id PKValidateRequiredSemanticTag(void *a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;

  v5 = a2;
  objc_msgSend(a1, "objectForKeyedSubscript:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = v6;
  if (v6)
  {
    v15 = 0;
    if (a3)
      *a3 = objc_retainAutorelease(v6);
  }
  else
  {
    PKValidationErrorWithReason(CFSTR("Semantics dictionary must contain tag '%@'"), v7, v8, v9, v10, v11, v12, v13, (uint64_t)v5);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v15;
}

id PKValidateAllRequiredSemanticTags(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = a2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v13;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v13 != v7)
          objc_enumerationMutation(v4);
        PKValidateRequiredSemanticTag(v3, *(void **)(*((_QWORD *)&v12 + 1) + 8 * v8), 0);
        v9 = objc_claimAutoreleasedReturnValue();
        if (v9)
        {
          v10 = (void *)v9;
          goto LABEL_11;
        }
        ++v8;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v6)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_11:

  return v10;
}

void sub_1903C6CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

Class initFHSearchSuggestionController()
{
  Class result;

  if (qword_1EE1DB7C8 != -1)
    dispatch_once(&qword_1EE1DB7C8, &__block_literal_global_82_2);
  result = objc_getClass("FHSearchSuggestionController");
  qword_1EE1DB7C0 = (uint64_t)result;
  getFHSearchSuggestionControllerClass[0] = (uint64_t (*)())FHSearchSuggestionControllerFunction;
  return result;
}

id FHSearchSuggestionControllerFunction()
{
  return (id)qword_1EE1DB7C0;
}

id initFHInsightTypeOverallSpend_1()
{
  id *v0;

  if (qword_1EE1DB7D8 != -1)
    dispatch_once(&qword_1EE1DB7D8, &__block_literal_global_85_3);
  v0 = (id *)dlsym((void *)qword_1EE1DB7D0, "FHInsightTypeOverallSpend");
  objc_storeStrong((id *)&qword_1EE1DB7B8, *v0);
  _MergedGlobals_186 = (uint64_t (*)())FHInsightTypeOverallSpendFunction_1;
  return (id)qword_1EE1DB7B8;
}

id FHInsightTypeOverallSpendFunction_1()
{
  return (id)qword_1EE1DB7B8;
}

id initFHInsightTypeCategorySpend_1()
{
  id *v0;

  if (qword_1EE1DB7D8 != -1)
    dispatch_once(&qword_1EE1DB7D8, &__block_literal_global_85_3);
  v0 = (id *)dlsym((void *)qword_1EE1DB7D0, "FHInsightTypeCategorySpend");
  objc_storeStrong((id *)&_MergedGlobals_4, *v0);
  off_1ECF21C58 = (uint64_t (*)())FHInsightTypeCategorySpendFunction_1;
  return (id)_MergedGlobals_4;
}

id FHInsightTypeCategorySpendFunction_1()
{
  return (id)_MergedGlobals_4;
}

uint64_t PKAppletSubcredentialVersionTypeToKMLType(uint64_t a1)
{
  return 2 * (a1 != 1);
}

uint64_t PKAppletSubcredentialVersionTypeFromKMLType(unint64_t a1)
{
  if (a1 > 2)
    return 0;
  else
    return qword_190456560[a1];
}

uint64_t PKAppletSubcredentialCarKeyVehicleVersionFromInteger(uint64_t a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 == 257)
    v1 = 2;
  if (a1 == 768)
    return 3;
  else
    return v1;
}

uint64_t PKAppletSubcredentialCarKeyVehicleVersionFromKMLVersion(uint64_t a1)
{
  uint64_t v1;

  v1 = 1;
  if (a1 == 257)
    v1 = 2;
  if (a1 == 768)
    return 3;
  else
    return v1;
}

uint64_t PKAppletSubcredentialCarKeyVehicleVersionToKMLVersion(uint64_t a1)
{
  uint64_t v1;

  v1 = 256;
  if (a1 == 2)
    v1 = 257;
  if (a1 == 3)
    return 768;
  else
    return v1;
}

uint64_t PKAppletSubcredentialCarKeyVehicleVersionFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("1.1"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 1;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("1.1"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("3.0")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("3.0")), v6, v7))
    {
      v4 = 3;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 2;
LABEL_9:

  return v4;
}

const __CFString *PKAppletSubcredentialCarKeyVehicleVersionToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("1.0");
  if (a1 == 2)
    v1 = CFSTR("1.1");
  if (a1 == 3)
    return CFSTR("3.0");
  else
    return v1;
}

uint64_t PKAppletSubcredentialCarKeyServerVersionFromInteger(uint64_t a1)
{
  if (a1 == 768)
    return 2;
  else
    return 1;
}

uint64_t PKAppletSubcredentialCarKeyServerVersionFromKMLVersion(uint64_t a1)
{
  if (a1 == 768)
    return 2;
  else
    return 1;
}

uint64_t PKAppletSubcredentialCarKeyServerVersionToKMLVersion(uint64_t a1)
{
  if (a1 == 2)
    return 768;
  else
    return 256;
}

uint64_t PKAppletSubcredentialCarKeyServerVersionFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("3.0")
    || v1 && (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("3.0")), v2, v3))
  {
    v4 = 2;
  }
  else
  {
    v4 = 1;
  }

  return v4;
}

const __CFString *PKAppletSubcredentialCarKeyServerVersionToString(uint64_t a1)
{
  if (a1 == 2)
    return CFSTR("3.0");
  else
    return CFSTR("1.0");
}

__n128 PKCarKeyAvailableVersionUpgradeFromKMLAvailableVersionUpgrade@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  __n128 result;

  if (a1->n128_u64[0] > 2)
    v2 = 0;
  else
    v2 = qword_190456560[a1->n128_u64[0]];
  a2->n128_u64[0] = v2;
  a2->n128_u8[8] = a1->n128_u8[8];
  result = a1[1];
  a2[1] = result;
  return result;
}

uint64_t PKCarKeyAvailableVersionUpgradeNoneForType@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  a2[2] = 0;
  a2[3] = 0;
  *a2 = result;
  a2[1] = 0;
  return result;
}

BOOL PKAppletSubcredentialSupportsSharingInAChain(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  v2 = (unint64_t)objc_msgSend(v1, "carKeyServerVersion") >= 2
    && (unint64_t)objc_msgSend(v1, "carKeyVehicleVersion") > 2;

  return v2;
}

uint64_t _PKSecondsFromRetryAfterHeader(void *a1)
{
  uint64_t v1;

  v1 = objc_msgSend(a1, "integerValue");
  return v1 & ~(v1 >> 63);
}

id _PKDateFromRetryAfterHeader(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v1 = qword_1ECF22D00;
  v2 = a1;
  if (v1 != -1)
    dispatch_once(&qword_1ECF22D00, &__block_literal_global_231);
  objc_msgSend((id)_MergedGlobals_294, "dateFromString:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

uint64_t PKRetryAfterSecondsFromDate(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = a2;
  _PKDateFromRetryAfterHeader(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    objc_msgSend(v5, "timeIntervalSinceDate:", v3);
    if (v7 < 0.0)
      v7 = 0.0;
    v8 = (unint64_t)v7;
  }
  else
  {
    v9 = objc_msgSend(v4, "integerValue");
    v8 = v9 & ~(v9 >> 63);
  }

  return v8;
}

uint64_t PKRetryAfterSecondsFromNow(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;

  v1 = (void *)MEMORY[0x1E0C99D68];
  v2 = a1;
  objc_msgSend(v1, "date");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = PKRetryAfterSecondsFromDate(v3, v2);

  return v4;
}

id PDPaymentServiceInterface()
{
  if (qword_1ECF22D10 != -1)
    dispatch_once(&qword_1ECF22D10, &__block_literal_global_232);
  return (id)_MergedGlobals_295;
}

CFDataRef PKCreatePublicKeyFromDER(const __CFData *a1)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v4;
  CFDataRef v5;
  void *v7;
  size_t size;

  if (!a1)
    return 0;
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  v4 = (uint64_t)&BytePtr[Length];
  size = 0;
  v5 = 0;
  if (pkcc_x509_import_pub((uint64_t)BytePtr, (uint64_t)&BytePtr[Length], &size, 0) && size)
  {
    v7 = malloc_type_malloc(size, 0x71D8160BuLL);
    pkcc_x509_import_pub((uint64_t)BytePtr, v4, &size, (uint64_t *)&v7);
    v5 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v7, size);
    free(v7);
  }
  return v5;
}

uint64_t pkcc_x509_import_pub(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  result = ccder_decode_sequence_tl();
  if (result)
  {
    result = ccder_decode_sequence_tl();
    if (result)
    {
      result = ccder_decode_oid();
      if (result)
      {
        if (!ccoid_equal())
          return 0;
        result = ccder_decode_oid();
        if (!result)
          return result;
        v10 = result;
        if (!ccoid_equal())
          return 0;
        result = ccder_decode_bitstring();
        if (!result)
          return result;
        if (result - v10 == 33)
        {
          if (a4)
          {
            v7 = *a4;
            v8 = *(_OWORD *)v10;
            v9 = *(_OWORD *)(v10 + 16);
            *(_BYTE *)(v7 + 32) = *(_BYTE *)(v10 + 32);
            *(_OWORD *)v7 = v8;
            *(_OWORD *)(v7 + 16) = v9;
          }
          if (a3)
            *a3 = 33;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

CFDataRef PKCreateDecryptedPassPayload(const __CFData *a1, const __CFData *a2, const __CFData *a3, _DWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t Length;
  CFDataRef v12;
  CFIndex v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const UInt8 *v17;
  const UInt8 *BytePtr;
  char *v19;
  void *v20;
  __int128 v21;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v8 = MEMORY[0x19400CB14]();
  v9 = cczp_bitlen();
  if (!a1)
    return 0;
  v10 = v9;
  Length = CFDataGetLength(a1);
  v12 = 0;
  if (a2)
  {
    if (Length >= (unint64_t)(v10 + 7) >> 3)
    {
      v13 = CFDataGetLength(a2);
      v12 = 0;
      if (a3)
      {
        if (v13 >= 5)
        {
          v27 = 0;
          v25 = 0u;
          v26 = 0u;
          ccsha256_di();
          ccaes_gcm_decrypt_mode();
          v14 = ccecies_decrypt_gcm_setup();
          MEMORY[0x1E0C80A78](v14);
          *(uint64_t *)((char *)&v23 - v15) = v8;
          CFDataGetBytePtr(a1);
          CFDataGetLength(a1);
          v12 = 0;
          if (!ccec_der_import_priv())
          {
            CFDataGetBytePtr(a2);
            CFDataGetLength(a2);
            v16 = ccecies_decrypt_gcm_plaintext_size();
            v24 = v16;
            if (v16 < 5)
            {
              v12 = 0;
            }
            else
            {
              v17 = (const UInt8 *)&v23 - ((MEMORY[0x1E0C80A78](v16) + 15) & 0xFFFFFFFFFFFFFFF0);
              BytePtr = CFDataGetBytePtr(a3);
              v19 = (char *)malloc_type_malloc(0x49uLL, 0x1FE65B11uLL);
              if (v19)
              {
                v20 = v19;
                qmemcpy(v19, "\rid-aes256-GCMApplePay encrypted VAS data", 41);
                v21 = *((_OWORD *)BytePtr + 1);
                *(_OWORD *)(v19 + 41) = *(_OWORD *)BytePtr;
                *(_OWORD *)(v19 + 57) = v21;
                v12 = 0;
                if (!ccecies_decrypt_gcm())
                {
                  if (a4)
                    *a4 = bswap32(*(_DWORD *)v17);
                  v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v17 + 4, v24 - 4);
                }
                free(v20);
              }
              else
              {
                v12 = 0;
              }
            }
          }
          cc_clear();
        }
      }
    }
  }
  return v12;
}

uint64_t PKCreateEncryptedPassPayload(const __CFData *a1, const __CFData *a2, const __CFData *a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t Length;
  uint64_t v11;
  unsigned int Current;
  CFIndex v13;
  _DWORD *v14;
  const UInt8 *BytePtr;
  size_t v16;
  void *v17;
  const UInt8 *v18;
  char *v19;
  void *v20;
  __int128 v21;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  UInt8 bytes[128];
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  MEMORY[0x19400CB14]();
  v8 = cczp_bitlen();
  if (!a1)
    return 0;
  v9 = v8;
  Length = CFDataGetLength(a1);
  v11 = 0;
  if (!a3 || !a2 || Length < (unint64_t)(v9 + 7) >> 3)
    return v11;
  if (CFDataGetLength(a2) > 64)
    return 0;
  v11 = ccrng();
  v27 = 0;
  v26 = 0u;
  v25 = 0u;
  if (v11)
  {
    ccsha256_di();
    ccaes_gcm_encrypt_mode();
    ccecies_encrypt_gcm_setup();
    Current = CFAbsoluteTimeGetCurrent();
    v13 = CFDataGetLength(a2);
    v23 = (uint64_t)&v23;
    v14 = (_DWORD *)((char *)&v23 - ((MEMORY[0x1E0C80A78](v13) + 19) & 0xFFFFFFFFFFFFFFF0));
    *v14 = bswap32(Current);
    BytePtr = CFDataGetBytePtr(a2);
    v16 = CFDataGetLength(a2);
    v17 = memmove(v14 + 1, BytePtr, v16);
    MEMORY[0x1E0C80A78](v17);
    CFDataGetBytePtr(a1);
    CFDataGetLength(a1);
    if (ccec_compact_import_pub()
      || (v24 = ccecies_encrypt_gcm_ciphertext_size(), v24 > 0x7C)
      || (ccsha256_di(),
          ccdigest(),
          *(_DWORD *)bytes = v29,
          v18 = CFDataGetBytePtr(a3),
          (v19 = (char *)malloc_type_malloc(0x49uLL, 0x1FE65B11uLL)) == 0))
    {
      v11 = 0;
    }
    else
    {
      v20 = v19;
      qmemcpy(v19, "\rid-aes256-GCMApplePay encrypted VAS data", 41);
      v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)(v19 + 41) = *(_OWORD *)v18;
      *(_OWORD *)(v19 + 57) = v21;
      v11 = 0;
      if (!ccecies_encrypt_gcm())
      {
        v11 = (uint64_t)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, v24 + 4);
        if (a4)
          *a4 = Current;
      }
      free(v20);
    }
    cc_clear();
  }
  return v11;
}

id _PKAccountHash(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;
  const char *v5;
  size_t v6;
  id v7;
  void *v8;
  uint8_t derivedKey[32];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  objc_msgSend(a1, "lowercaseString");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "dataUsingEncoding:", 4);
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v2, "SHA256Hash");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_retainAutorelease(v2);
  v5 = (const char *)objc_msgSend(v4, "bytes");
  v6 = objc_msgSend(v4, "length");
  v7 = objc_retainAutorelease(v3);
  CCKeyDerivationPBKDF(2u, v5, v6, (const uint8_t *)objc_msgSend(v7, "bytes"), objc_msgSend(v7, "length"), 3u, 0xAu, derivedKey, 0x20uLL);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", derivedKey, 32);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

id PKAccountDSIDHash()
{
  void *v0;
  void *v1;
  void *v2;

  PKCurrentUserAltDSID();
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = v0;
  if (v0)
  {
    _PKAccountHash(v0);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v2 = 0;
  }

  return v2;
}

id PKAccountHash()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  +[PKAppleAccountManager sharedInstance](PKAppleAccountManager, "sharedInstance");
  v0 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v0, "accountStore");
  v1 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v1, "aa_primaryAppleAccount");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v2, "username");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v2)
  {
    _PKAccountHash(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id PKPostalAddressHash(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  size_t v11;
  id v12;
  void *v13;
  uint8_t derivedKey[32];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = (void *)MEMORY[0x1E0C973B0];
  v4 = a2;
  objc_msgSend(v3, "singleLineStringFromPostalAddress:addCountryName:", a1, 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "lowercaseString");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "dataUsingEncoding:", 4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "dataUsingEncoding:", 4);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v9 = objc_retainAutorelease(v7);
  v10 = (const char *)objc_msgSend(v9, "bytes");
  v11 = objc_msgSend(v9, "length");
  v12 = objc_retainAutorelease(v8);
  CCKeyDerivationPBKDF(2u, v10, v11, (const uint8_t *)objc_msgSend(v12, "bytes"), objc_msgSend(v12, "length"), 3u, 0xAu, derivedKey, 0x20uLL);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", derivedKey, 32);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  return v13;
}

CFDataRef PKPublicKeyFromCertificate(void *a1)
{
  const __CFData *v1;
  __SecCertificate *v2;
  __SecCertificate *v3;
  __SecKey *v4;
  __SecKey *v5;
  CFDataRef v6;

  v1 = a1;
  if (v1 && (v2 = SecCertificateCreateWithData((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v1)) != 0)
  {
    v3 = v2;
    v4 = SecCertificateCopyKey(v2);
    if (v4)
    {
      v5 = v4;
      v6 = SecKeyCopyExternalRepresentation(v4, 0);
      CFRelease(v3);
      v3 = v5;
    }
    else
    {
      v6 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

uint64_t PKFelicaAppletTypeFromSPID(void *a1)
{
  id v1;
  void *v2;
  unsigned int v3;
  uint64_t v4;

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = objc_msgSend(v1, "unsignedCharValue") - 1, v3 <= 2))
    v4 = qword_190456578[(char)v3];
  else
    v4 = 0;

  return v4;
}

uint64_t PKPeerPaymentPreferencesSendRestrictionTypeToString(unint64_t a1)
{
  if (a1 > 4)
    return 0;
  else
    return (uint64_t)*(&off_1E2ADDCC0 + a1);
}

uint64_t PKPeerPaymentPreferencesSendRestrictionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  char v7;
  __CFString *v8;
  __CFString *v9;
  int v10;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("contacts"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_11:
    v4 = 0;
    goto LABEL_12;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("contacts"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("family")
      || (v6 = v5,
          v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("family")),
          v6,
          (v7 & 1) != 0))
    {
      v4 = 3;
      goto LABEL_12;
    }
    v8 = v6;
    if (v8 == CFSTR("anyone")
      || (v9 = v8, v10 = -[__CFString isEqualToString:](v8, "isEqualToString:", CFSTR("anyone")), v9, v10))
    {
      v4 = 1;
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_4:
  v4 = 2;
LABEL_12:

  return v4;
}

uint64_t PKPeerPaymentPreferencesReceiveRestrictionTypeToString(unint64_t a1)
{
  if (a1 > 3)
    return 0;
  else
    return (uint64_t)*(&off_1E2ADDCE8 + a1);
}

uint64_t PKPeerPaymentPreferencesReceiveRestrictionTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  char v3;
  uint64_t v4;
  __CFString *v5;
  __CFString *v6;
  int v7;

  v1 = a1;
  v2 = v1;
  if (v1 == CFSTR("family"))
    goto LABEL_4;
  if (!v1)
  {
LABEL_8:
    v4 = 0;
    goto LABEL_9;
  }
  v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("family"));

  if ((v3 & 1) == 0)
  {
    v5 = v2;
    if (v5 == CFSTR("anyone")
      || (v6 = v5, v7 = -[__CFString isEqualToString:](v5, "isEqualToString:", CFSTR("anyone")), v6, v7))
    {
      v4 = 1;
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_4:
  v4 = 2;
LABEL_9:

  return v4;
}

const __CFString *PKPeerPaymentPreferencesNotificationTypeToString(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unknown");
  if (a1)
    v1 = 0;
  if (a1 == 1)
    return CFSTR("purchases");
  else
    return v1;
}

BOOL PKPeerPaymentPreferencesNotificationTypeFromString(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  int v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  v4 = 1;
  if (v1 != CFSTR("purchases"))
  {
    if (!v1 || (v3 = -[__CFString isEqualToString:](v1, "isEqualToString:", CFSTR("purchases")), v2, !v3))
      v4 = 0;
  }

  return v4;
}

BOOL PKProtobufDisbursementSummaryItemReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int v7;
  char v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  BOOL v15;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int *)MEMORY[0x1E0D82BD8];
  v5 = (int *)MEMORY[0x1E0D82BC8];
  v6 = (int *)MEMORY[0x1E0D82BB8];
  while (1)
  {
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_QWORD *)(a2 + *v3) >= *(_QWORD *)(a2 + *v4))
      return v7 == 0;
    if (*(_BYTE *)(a2 + *v5))
    {
      v7 = 1;
      return v7 == 0;
    }
    v8 = 0;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = *v3;
      v12 = *(_QWORD *)(a2 + v11);
      if (v12 == -1 || v12 >= *(_QWORD *)(a2 + *v4))
        break;
      v13 = *(_BYTE *)(*(_QWORD *)(a2 + *v6) + v12);
      *(_QWORD *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0)
        goto LABEL_12;
      v8 += 7;
      if (v9++ >= 9)
      {
        LOBYTE(v10) = 0;
        v7 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(_BYTE *)(a2 + *v5) = 1;
LABEL_12:
    v7 = *(unsigned __int8 *)(a2 + *v5);
    if (*(_BYTE *)(a2 + *v5))
      LOBYTE(v10) = 0;
LABEL_14:
    if (v7)
      v15 = 1;
    else
      v15 = (v10 & 7) == 4;
    if (v15)
      return v7 == 0;
    if ((PBReaderSkipValueWithTag() & 1) == 0)
      return 0;
  }
}

uint64_t sub_1903CFE3C()
{
  return MEMORY[0x1E0C90418]();
}

uint64_t sub_1903CFE48()
{
  return MEMORY[0x1E0C90430]();
}

uint64_t sub_1903CFE54()
{
  return MEMORY[0x1E0C90440]();
}

uint64_t sub_1903CFE60()
{
  return MEMORY[0x1E0CADEE8]();
}

uint64_t sub_1903CFE6C()
{
  return MEMORY[0x1E0CADEF0]();
}

uint64_t sub_1903CFE78()
{
  return MEMORY[0x1E0CADEF8]();
}

uint64_t sub_1903CFE84()
{
  return MEMORY[0x1E0CADF10]();
}

uint64_t sub_1903CFE90()
{
  return MEMORY[0x1E0CADF50]();
}

uint64_t sub_1903CFE9C()
{
  return MEMORY[0x1E0CAE048]();
}

uint64_t sub_1903CFEA8()
{
  return MEMORY[0x1E0CAE060]();
}

uint64_t sub_1903CFEB4()
{
  return MEMORY[0x1E0CAE070]();
}

uint64_t sub_1903CFEC0()
{
  return MEMORY[0x1E0CAE0A8]();
}

uint64_t sub_1903CFECC()
{
  return MEMORY[0x1E0CAE0B8]();
}

uint64_t sub_1903CFED8()
{
  return MEMORY[0x1E0CAE0D8]();
}

uint64_t sub_1903CFEE4()
{
  return MEMORY[0x1E0CAE0E0]();
}

uint64_t sub_1903CFEF0()
{
  return MEMORY[0x1E0CAE108]();
}

uint64_t sub_1903CFEFC()
{
  return MEMORY[0x1E0CAE1A0]();
}

uint64_t sub_1903CFF08()
{
  return MEMORY[0x1E0CAE1D8]();
}

uint64_t sub_1903CFF14()
{
  return MEMORY[0x1E0CAE1E8]();
}

uint64_t sub_1903CFF20()
{
  return MEMORY[0x1E0CAE3A0]();
}

uint64_t sub_1903CFF2C()
{
  return MEMORY[0x1E0CAE4B8]();
}

uint64_t sub_1903CFF38()
{
  return MEMORY[0x1E0CAE578]();
}

uint64_t sub_1903CFF44()
{
  return MEMORY[0x1E0CAE5B0]();
}

uint64_t sub_1903CFF50()
{
  return MEMORY[0x1E0CAE5D0]();
}

uint64_t sub_1903CFF5C()
{
  return MEMORY[0x1E0CAE670]();
}

uint64_t sub_1903CFF68()
{
  return MEMORY[0x1E0CAE678]();
}

uint64_t sub_1903CFF74()
{
  return MEMORY[0x1E0CAE690]();
}

uint64_t sub_1903CFF80()
{
  return MEMORY[0x1E0CAE768]();
}

uint64_t sub_1903CFF8C()
{
  return MEMORY[0x1E0CAE7C8]();
}

uint64_t sub_1903CFF98()
{
  return MEMORY[0x1E0CAE7E0]();
}

uint64_t sub_1903CFFA4()
{
  return MEMORY[0x1E0CAE800]();
}

uint64_t sub_1903CFFB0()
{
  return MEMORY[0x1E0CAE890]();
}

uint64_t sub_1903CFFBC()
{
  return MEMORY[0x1E0CAE8D0]();
}

uint64_t sub_1903CFFC8()
{
  return MEMORY[0x1E0CAE8F0]();
}

uint64_t sub_1903CFFD4()
{
  return MEMORY[0x1E0CAE8F8]();
}

uint64_t sub_1903CFFE0()
{
  return MEMORY[0x1E0CAE9A0]();
}

uint64_t sub_1903CFFEC()
{
  return MEMORY[0x1E0CAE9B8]();
}

uint64_t sub_1903CFFF8()
{
  return MEMORY[0x1E0CAE9C8]();
}

uint64_t sub_1903D0004()
{
  return MEMORY[0x1E0CAE9F8]();
}

uint64_t sub_1903D0010()
{
  return MEMORY[0x1E0CAEA10]();
}

uint64_t sub_1903D001C()
{
  return MEMORY[0x1E0CAEA20]();
}

uint64_t sub_1903D0028()
{
  return MEMORY[0x1E0CAEA80]();
}

uint64_t sub_1903D0034()
{
  return MEMORY[0x1E0CAEAB0]();
}

uint64_t sub_1903D0040()
{
  return MEMORY[0x1E0CAEB20]();
}

uint64_t sub_1903D004C()
{
  return MEMORY[0x1E0CAEB38]();
}

uint64_t sub_1903D0058()
{
  return MEMORY[0x1E0CAF6F0]();
}

uint64_t sub_1903D0064()
{
  return MEMORY[0x1E0CAF6F8]();
}

uint64_t sub_1903D0070()
{
  return MEMORY[0x1E0CAF700]();
}

uint64_t sub_1903D007C()
{
  return MEMORY[0x1E0CAF708]();
}

uint64_t sub_1903D0088()
{
  return MEMORY[0x1E0CAF750]();
}

uint64_t sub_1903D0094()
{
  return MEMORY[0x1E0CAF758]();
}

uint64_t sub_1903D00A0()
{
  return MEMORY[0x1E0CAF760]();
}

uint64_t sub_1903D00AC()
{
  return MEMORY[0x1E0CAF768]();
}

uint64_t sub_1903D00B8()
{
  return MEMORY[0x1E0CAF788]();
}

uint64_t sub_1903D00C4()
{
  return MEMORY[0x1E0CAF790]();
}

uint64_t sub_1903D00D0()
{
  return MEMORY[0x1E0CAF8D8]();
}

uint64_t sub_1903D00DC()
{
  return MEMORY[0x1E0CAF8E8]();
}

uint64_t sub_1903D00E8()
{
  return MEMORY[0x1E0CAF8F8]();
}

uint64_t sub_1903D00F4()
{
  return MEMORY[0x1E0CAF900]();
}

uint64_t sub_1903D0100()
{
  return MEMORY[0x1E0CAF910]();
}

uint64_t sub_1903D010C()
{
  return MEMORY[0x1E0CAF920]();
}

uint64_t sub_1903D0118()
{
  return MEMORY[0x1E0CAF930]();
}

uint64_t sub_1903D0124()
{
  return MEMORY[0x1E0CAF980]();
}

uint64_t sub_1903D0130()
{
  return MEMORY[0x1E0CAF990]();
}

uint64_t sub_1903D013C()
{
  return MEMORY[0x1E0CAFDA0]();
}

uint64_t sub_1903D0148()
{
  return MEMORY[0x1E0CAFE38]();
}

uint64_t sub_1903D0154()
{
  return MEMORY[0x1E0CAFED8]();
}

uint64_t sub_1903D0160()
{
  return MEMORY[0x1E0CAFF00]();
}

uint64_t sub_1903D016C()
{
  return MEMORY[0x1E0CAFF90]();
}

uint64_t sub_1903D0178()
{
  return MEMORY[0x1E0CAFFF8]();
}

uint64_t sub_1903D0184()
{
  return MEMORY[0x1E0CB0128]();
}

uint64_t sub_1903D0190()
{
  return MEMORY[0x1E0CB0138]();
}

uint64_t sub_1903D019C()
{
  return MEMORY[0x1E0CF0EF8]();
}

uint64_t sub_1903D01A8()
{
  return MEMORY[0x1E0CB01F0]();
}

uint64_t sub_1903D01B4()
{
  return MEMORY[0x1E0CB0228]();
}

uint64_t sub_1903D01C0()
{
  return MEMORY[0x1E0CB02C0]();
}

uint64_t sub_1903D01CC()
{
  return MEMORY[0x1E0CB06B8]();
}

uint64_t sub_1903D01D8()
{
  return MEMORY[0x1E0CB06D0]();
}

uint64_t sub_1903D01E4()
{
  return MEMORY[0x1E0CB07C0]();
}

uint64_t sub_1903D01F0()
{
  return MEMORY[0x1E0CB07E8]();
}

uint64_t sub_1903D01FC()
{
  return MEMORY[0x1E0CB07F8]();
}

uint64_t sub_1903D0208()
{
  return MEMORY[0x1E0CB0860]();
}

uint64_t sub_1903D0214()
{
  return MEMORY[0x1E0CB0870]();
}

uint64_t sub_1903D0220()
{
  return MEMORY[0x1E0CB0900]();
}

uint64_t sub_1903D022C()
{
  return MEMORY[0x1E0CB0910]();
}

uint64_t sub_1903D0238()
{
  return MEMORY[0x1E0CB0958]();
}

uint64_t sub_1903D0244()
{
  return MEMORY[0x1E0CB0988]();
}

uint64_t sub_1903D0250()
{
  return MEMORY[0x1E0CB0998]();
}

uint64_t sub_1903D025C()
{
  return MEMORY[0x1E0CB0A80]();
}

uint64_t sub_1903D0268()
{
  return MEMORY[0x1E0CB0B80]();
}

uint64_t sub_1903D0274()
{
  return MEMORY[0x1E0CB0E38]();
}

uint64_t sub_1903D0280()
{
  return MEMORY[0x1E0CB0F00]();
}

uint64_t sub_1903D028C()
{
  return MEMORY[0x1E0CB0F20]();
}

uint64_t sub_1903D0298()
{
  return MEMORY[0x1E0CB1098]();
}

uint64_t sub_1903D02A4()
{
  return MEMORY[0x1E0CB10C8]();
}

uint64_t sub_1903D02B0()
{
  return MEMORY[0x1E0CB11F0]();
}

uint64_t sub_1903D02BC()
{
  return MEMORY[0x1E0CB1400]();
}

uint64_t sub_1903D02C8()
{
  return MEMORY[0x1E0CB1440]();
}

uint64_t sub_1903D02D4()
{
  return MEMORY[0x1E0CB1470]();
}

uint64_t sub_1903D02E0()
{
  return MEMORY[0x1E0CB1530]();
}

uint64_t sub_1903D02EC()
{
  return MEMORY[0x1E0CB1578]();
}

uint64_t sub_1903D02F8()
{
  return MEMORY[0x1E0CB15C0]();
}

uint64_t sub_1903D0304()
{
  return MEMORY[0x1E0DF1EB8]();
}

uint64_t sub_1903D0310()
{
  return MEMORY[0x1E0DF2158]();
}

uint64_t sub_1903D031C()
{
  return MEMORY[0x1E0DF2170]();
}

uint64_t sub_1903D0328()
{
  return MEMORY[0x1E0DF2240]();
}

uint64_t sub_1903D0334()
{
  return MEMORY[0x1E0DF2248]();
}

uint64_t sub_1903D0340()
{
  return MEMORY[0x1E0DF2258]();
}

uint64_t sub_1903D034C()
{
  return MEMORY[0x1E0D96E70]();
}

uint64_t sub_1903D0358()
{
  return MEMORY[0x1E0D96E78]();
}

uint64_t sub_1903D0364()
{
  return MEMORY[0x1E0D96E80]();
}

uint64_t sub_1903D0370()
{
  return MEMORY[0x1E0D96E98]();
}

uint64_t sub_1903D037C()
{
  return MEMORY[0x1E0D96EF8]();
}

uint64_t sub_1903D0388()
{
  return MEMORY[0x1E0D96F08]();
}

uint64_t sub_1903D0394()
{
  return MEMORY[0x1E0D97108]();
}

uint64_t sub_1903D03A0()
{
  return MEMORY[0x1E0D97118]();
}

uint64_t sub_1903D03AC()
{
  return MEMORY[0x1E0DEF4A8]();
}

uint64_t sub_1903D03B8()
{
  return MEMORY[0x1E0DEF4F8]();
}

uint64_t sub_1903D03C4()
{
  return MEMORY[0x1E0DEF578]();
}

uint64_t sub_1903D03D0()
{
  return MEMORY[0x1E0DEF5B0]();
}

uint64_t sub_1903D03DC()
{
  return MEMORY[0x1E0DEF698]();
}

uint64_t sub_1903D03E8()
{
  return MEMORY[0x1E0DEF6B8]();
}

uint64_t sub_1903D03F4()
{
  return MEMORY[0x1E0DEF758]();
}

uint64_t sub_1903D0400()
{
  return MEMORY[0x1E0D89498]();
}

uint64_t sub_1903D040C()
{
  return MEMORY[0x1E0D894A0]();
}

uint64_t sub_1903D0418()
{
  return MEMORY[0x1E0D894B8]();
}

uint64_t sub_1903D0424()
{
  return MEMORY[0x1E0D894C0]();
}

uint64_t sub_1903D0430()
{
  return MEMORY[0x1E0D894C8]();
}

uint64_t sub_1903D043C()
{
  return MEMORY[0x1E0D894D0]();
}

uint64_t sub_1903D0448()
{
  return MEMORY[0x1E0D894E0]();
}

uint64_t sub_1903D0454()
{
  return MEMORY[0x1E0D894F0]();
}

uint64_t sub_1903D0460()
{
  return MEMORY[0x1E0D89500]();
}

uint64_t sub_1903D046C()
{
  return MEMORY[0x1E0D89510]();
}

uint64_t sub_1903D0478()
{
  return MEMORY[0x1E0D89528]();
}

uint64_t sub_1903D0484()
{
  return MEMORY[0x1E0D89530]();
}

uint64_t sub_1903D0490()
{
  return MEMORY[0x1E0D89540]();
}

uint64_t sub_1903D049C()
{
  return MEMORY[0x1E0D89548]();
}

uint64_t sub_1903D04A8()
{
  return MEMORY[0x1E0D89620]();
}

uint64_t sub_1903D04B4()
{
  return MEMORY[0x1E0DE9D60]();
}

uint64_t sub_1903D04C0()
{
  return MEMORY[0x1E0DE9D70]();
}

uint64_t sub_1903D04CC()
{
  return MEMORY[0x1E0CB17D8]();
}

uint64_t sub_1903D04D8()
{
  return MEMORY[0x1E0CB17F8]();
}

uint64_t sub_1903D04E4()
{
  return MEMORY[0x1E0CB1808]();
}

uint64_t sub_1903D04F0()
{
  return MEMORY[0x1E0DE9E38]();
}

uint64_t sub_1903D04FC()
{
  return MEMORY[0x1E0DEA048]();
}

uint64_t sub_1903D0508()
{
  return MEMORY[0x1E0DEA0A0]();
}

uint64_t sub_1903D0514()
{
  return MEMORY[0x1E0DEA0A8]();
}

uint64_t sub_1903D0520()
{
  return MEMORY[0x1E0DEA1B8]();
}

uint64_t sub_1903D052C()
{
  return MEMORY[0x1E0DEA1C0]();
}

uint64_t sub_1903D0538()
{
  return MEMORY[0x1E0DF1F70]();
}

uint64_t sub_1903D0544()
{
  return MEMORY[0x1E0DEA3B0]();
}

uint64_t sub_1903D0550()
{
  return MEMORY[0x1E0DEA3C0]();
}

uint64_t sub_1903D055C()
{
  return MEMORY[0x1E0DEA3C8]();
}

uint64_t sub_1903D0568()
{
  return MEMORY[0x1E0DEA3E0]();
}

uint64_t sub_1903D0574()
{
  return MEMORY[0x1E0DEA3E8]();
}

uint64_t sub_1903D0580()
{
  return MEMORY[0x1E0DEA3F0]();
}

uint64_t sub_1903D058C()
{
  return MEMORY[0x1E0DEA510]();
}

uint64_t sub_1903D0598()
{
  return MEMORY[0x1E0DEA568]();
}

uint64_t sub_1903D05A4()
{
  return MEMORY[0x1E0CB1940]();
}

uint64_t sub_1903D05B0()
{
  return MEMORY[0x1E0CB1960]();
}

uint64_t sub_1903D05BC()
{
  return MEMORY[0x1E0CB1970]();
}

uint64_t sub_1903D05C8()
{
  return MEMORY[0x1E0CB1980]();
}

uint64_t sub_1903D05D4()
{
  return MEMORY[0x1E0CB1988]();
}

uint64_t sub_1903D05E0()
{
  return MEMORY[0x1E0CB1990]();
}

uint64_t sub_1903D05EC()
{
  return MEMORY[0x1E0CB19C0]();
}

uint64_t sub_1903D05F8()
{
  return MEMORY[0x1E0CB19E8]();
}

uint64_t sub_1903D0604()
{
  return MEMORY[0x1E0CB19F8]();
}

uint64_t sub_1903D0610()
{
  return MEMORY[0x1E0CB1A18]();
}

uint64_t sub_1903D061C()
{
  return MEMORY[0x1E0DEA5F8]();
}

uint64_t sub_1903D0628()
{
  return MEMORY[0x1E0DEA658]();
}

uint64_t sub_1903D0634()
{
  return MEMORY[0x1E0DEA6F0]();
}

uint64_t sub_1903D0640()
{
  return MEMORY[0x1E0DEA6F8]();
}

uint64_t sub_1903D064C()
{
  return MEMORY[0x1E0DEA758]();
}

uint64_t sub_1903D0658()
{
  return MEMORY[0x1E0DEA7B8]();
}

uint64_t sub_1903D0664()
{
  return MEMORY[0x1E0DEA7C0]();
}

uint64_t sub_1903D0670()
{
  return MEMORY[0x1E0DEA7D0]();
}

uint64_t sub_1903D067C()
{
  return MEMORY[0x1E0DEA800]();
}

uint64_t sub_1903D0688()
{
  return MEMORY[0x1E0DEA850]();
}

uint64_t sub_1903D0694()
{
  return MEMORY[0x1E0DEA858]();
}

uint64_t sub_1903D06A0()
{
  return MEMORY[0x1E0DEA870]();
}

uint64_t sub_1903D06AC()
{
  return MEMORY[0x1E0DEA878]();
}

uint64_t sub_1903D06B8()
{
  return MEMORY[0x1E0DEA880]();
}

uint64_t sub_1903D06C4()
{
  return MEMORY[0x1E0DEA908]();
}

uint64_t sub_1903D06D0()
{
  return MEMORY[0x1E0DEA940]();
}

uint64_t sub_1903D06DC()
{
  return MEMORY[0x1E0DEAA08]();
}

uint64_t sub_1903D06E8()
{
  return MEMORY[0x1E0DEAA40]();
}

uint64_t sub_1903D06F4()
{
  return MEMORY[0x1E0DEAA50]();
}

uint64_t sub_1903D0700()
{
  return MEMORY[0x1E0DEAA58]();
}

uint64_t sub_1903D070C()
{
  return MEMORY[0x1E0DEAB00]();
}

uint64_t sub_1903D0718()
{
  return MEMORY[0x1E0DEAB20]();
}

uint64_t sub_1903D0724()
{
  return MEMORY[0x1E0DEABB0]();
}

uint64_t sub_1903D0730()
{
  return MEMORY[0x1E0DEAC88]();
}

uint64_t sub_1903D073C()
{
  return MEMORY[0x1E0DEACA0]();
}

uint64_t sub_1903D0748()
{
  return MEMORY[0x1E0DEACE8]();
}

uint64_t sub_1903D0754()
{
  return MEMORY[0x1E0DEAD18]();
}

uint64_t sub_1903D0760()
{
  return MEMORY[0x1E0DEAD60]();
}

uint64_t sub_1903D076C()
{
  return MEMORY[0x1E0DEADA0]();
}

uint64_t sub_1903D0778()
{
  return MEMORY[0x1E0CB1AC0]();
}

uint64_t sub_1903D0784()
{
  return MEMORY[0x1E0CB1AE8]();
}

uint64_t sub_1903D0790()
{
  return MEMORY[0x1E0DEADB0]();
}

uint64_t sub_1903D079C()
{
  return MEMORY[0x1E0DEADB8]();
}

uint64_t sub_1903D07A8()
{
  return MEMORY[0x1E0DEADC8]();
}

uint64_t sub_1903D07B4()
{
  return MEMORY[0x1E0DEADE8]();
}

uint64_t sub_1903D07C0()
{
  return MEMORY[0x1E0DEAE28]();
}

uint64_t sub_1903D07CC()
{
  return MEMORY[0x1E0DEAE38]();
}

uint64_t sub_1903D07D8()
{
  return MEMORY[0x1E0DEAE58]();
}

uint64_t sub_1903D07E4()
{
  return MEMORY[0x1E0DEAE80]();
}

uint64_t sub_1903D07F0()
{
  return MEMORY[0x1E0DEAE98]();
}

uint64_t sub_1903D07FC()
{
  return MEMORY[0x1E0DEAEC8]();
}

uint64_t sub_1903D0808()
{
  return MEMORY[0x1E0DEAF78]();
}

uint64_t sub_1903D0814()
{
  return MEMORY[0x1E0DF05B8]();
}

uint64_t sub_1903D0820()
{
  return MEMORY[0x1E0DF05C8]();
}

uint64_t sub_1903D082C()
{
  return MEMORY[0x1E0DF05D0]();
}

uint64_t sub_1903D0838()
{
  return MEMORY[0x1E0DF06D8]();
}

uint64_t sub_1903D0844()
{
  return MEMORY[0x1E0DF06E0]();
}

uint64_t sub_1903D0850()
{
  return MEMORY[0x1E0DF0748]();
}

uint64_t sub_1903D085C()
{
  return MEMORY[0x1E0DF0750]();
}

uint64_t sub_1903D0868()
{
  return MEMORY[0x1E0DF0850]();
}

uint64_t sub_1903D0874()
{
  return MEMORY[0x1E0DF0878]();
}

uint64_t sub_1903D0880()
{
  return MEMORY[0x1E0DF0890]();
}

uint64_t sub_1903D088C()
{
  return MEMORY[0x1E0DEB030]();
}

uint64_t sub_1903D0898()
{
  return MEMORY[0x1E0CB1BB0]();
}

uint64_t sub_1903D08A4()
{
  return MEMORY[0x1E0CB1BD8]();
}

uint64_t sub_1903D08B0()
{
  return MEMORY[0x1E0DEB220]();
}

uint64_t sub_1903D08BC()
{
  return MEMORY[0x1E0DEB258]();
}

uint64_t sub_1903D08C8()
{
  return MEMORY[0x1E0DEB310]();
}

uint64_t sub_1903D08D4()
{
  return MEMORY[0x1E0DEB528]();
}

uint64_t sub_1903D08E0()
{
  return MEMORY[0x1E0DEB5A8]();
}

uint64_t sub_1903D08EC()
{
  return MEMORY[0x1E0DEB5C8]();
}

uint64_t sub_1903D08F8()
{
  return MEMORY[0x1E0DEB5D0]();
}

uint64_t sub_1903D0904()
{
  return MEMORY[0x1E0DEB660]();
}

uint64_t sub_1903D0910()
{
  return MEMORY[0x1E0DEB6D0]();
}

uint64_t sub_1903D091C()
{
  return MEMORY[0x1E0DF2270]();
}

uint64_t sub_1903D0928()
{
  return MEMORY[0x1E0DF2278]();
}

uint64_t sub_1903D0934()
{
  return MEMORY[0x1E0DF2280]();
}

uint64_t sub_1903D0940()
{
  return MEMORY[0x1E0DF2290]();
}

uint64_t sub_1903D094C()
{
  return MEMORY[0x1E0CB1E68]();
}

uint64_t sub_1903D0958()
{
  return MEMORY[0x1E0CB1E90]();
}

uint64_t sub_1903D0964()
{
  return MEMORY[0x1E0DEF7E8]();
}

uint64_t sub_1903D0970()
{
  return MEMORY[0x1E0DEF840]();
}

uint64_t sub_1903D097C()
{
  return MEMORY[0x1E0DEF8E8]();
}

uint64_t sub_1903D0988()
{
  return MEMORY[0x1E0DEF900]();
}

uint64_t sub_1903D0994()
{
  return MEMORY[0x1E0DEF938]();
}

uint64_t sub_1903D09A0()
{
  return MEMORY[0x1E0DEF978]();
}

uint64_t sub_1903D09AC()
{
  return MEMORY[0x1E0DEF9E8]();
}

uint64_t sub_1903D09B8()
{
  return MEMORY[0x1E0DEF9F0]();
}

uint64_t sub_1903D09C4()
{
  return MEMORY[0x1E0DEFA18]();
}

uint64_t sub_1903D09D0()
{
  return MEMORY[0x1E0DEFA20]();
}

uint64_t sub_1903D09DC()
{
  return MEMORY[0x1E0DEFAA8]();
}

uint64_t sub_1903D09E8()
{
  return MEMORY[0x1E0CB1F60]();
}

uint64_t sub_1903D09F4()
{
  return MEMORY[0x1E0CB1F78]();
}

uint64_t sub_1903D0A00()
{
  return MEMORY[0x1E0CB1F88]();
}

uint64_t sub_1903D0A0C()
{
  return MEMORY[0x1E0C91D50]();
}

uint64_t sub_1903D0A18()
{
  return MEMORY[0x1E0CB2020]();
}

uint64_t sub_1903D0A24()
{
  return MEMORY[0x1E0CB2028]();
}

uint64_t sub_1903D0A30()
{
  return MEMORY[0x1E0CB2040]();
}

uint64_t sub_1903D0A3C()
{
  return MEMORY[0x1E0CB2050]();
}

uint64_t sub_1903D0A48()
{
  return MEMORY[0x1E0DEFCD8]();
}

uint64_t sub_1903D0A54()
{
  return MEMORY[0x1E0DEFCE0]();
}

uint64_t sub_1903D0A60()
{
  return MEMORY[0x1E0DEFCF0]();
}

uint64_t sub_1903D0A6C()
{
  return MEMORY[0x1E0CB2220]();
}

uint64_t sub_1903D0A78()
{
  return MEMORY[0x1E0CB2270]();
}

uint64_t sub_1903D0A84()
{
  return MEMORY[0x1E0DEB940]();
}

uint64_t sub_1903D0A90()
{
  return MEMORY[0x1E0DEB958]();
}

uint64_t sub_1903D0A9C()
{
  return MEMORY[0x1E0DEBA80]();
}

uint64_t sub_1903D0AA8()
{
  return MEMORY[0x1E0DEBB50]();
}

uint64_t sub_1903D0AB4()
{
  return MEMORY[0x1E0DEBB58]();
}

uint64_t sub_1903D0AC0()
{
  return MEMORY[0x1E0DEBB68]();
}

uint64_t sub_1903D0ACC()
{
  return MEMORY[0x1E0DEBC20]();
}

uint64_t sub_1903D0AD8()
{
  return MEMORY[0x1E0DEBC90]();
}

uint64_t sub_1903D0AE4()
{
  return MEMORY[0x1E0CB2480]();
}

uint64_t sub_1903D0AF0()
{
  return MEMORY[0x1E0CB24A8]();
}

uint64_t sub_1903D0AFC()
{
  return MEMORY[0x1E0CB24B8]();
}

uint64_t sub_1903D0B08()
{
  return MEMORY[0x1E0DEBE50]();
}

uint64_t sub_1903D0B14()
{
  return MEMORY[0x1E0DEBF30]();
}

uint64_t sub_1903D0B20()
{
  return MEMORY[0x1E0DEBF58]();
}

uint64_t sub_1903D0B2C()
{
  return MEMORY[0x1E0DEC050]();
}

uint64_t sub_1903D0B38()
{
  return MEMORY[0x1E0DEC060]();
}

uint64_t sub_1903D0B44()
{
  return MEMORY[0x1E0DEC068]();
}

uint64_t sub_1903D0B50()
{
  return MEMORY[0x1E0DEC0A8]();
}

uint64_t sub_1903D0B5C()
{
  return MEMORY[0x1E0DEC0B0]();
}

uint64_t sub_1903D0B68()
{
  return MEMORY[0x1E0DEC0C8]();
}

uint64_t sub_1903D0B74()
{
  return MEMORY[0x1E0DEC0D0]();
}

uint64_t sub_1903D0B80()
{
  return MEMORY[0x1E0DEC0D8]();
}

uint64_t sub_1903D0B8C()
{
  return MEMORY[0x1E0DEC0E0]();
}

uint64_t sub_1903D0B98()
{
  return MEMORY[0x1E0DEC100]();
}

uint64_t sub_1903D0BA4()
{
  return MEMORY[0x1E0DEC110]();
}

uint64_t sub_1903D0BB0()
{
  return MEMORY[0x1E0DEC120]();
}

uint64_t sub_1903D0BBC()
{
  return MEMORY[0x1E0DEC168]();
}

uint64_t sub_1903D0BC8()
{
  return MEMORY[0x1E0DEC178]();
}

uint64_t sub_1903D0BD4()
{
  return MEMORY[0x1E0DEC1B0]();
}

uint64_t sub_1903D0BE0()
{
  return MEMORY[0x1E0DEC248]();
}

uint64_t sub_1903D0BEC()
{
  return MEMORY[0x1E0DEC250]();
}

uint64_t sub_1903D0BF8()
{
  return MEMORY[0x1E0DEC2A8]();
}

uint64_t sub_1903D0C04()
{
  return MEMORY[0x1E0DEC2B0]();
}

uint64_t sub_1903D0C10()
{
  return MEMORY[0x1E0DEC3D8]();
}

uint64_t sub_1903D0C1C()
{
  return MEMORY[0x1E0DEC3E0]();
}

uint64_t sub_1903D0C28()
{
  return MEMORY[0x1E0DEC3E8]();
}

uint64_t sub_1903D0C34()
{
  return MEMORY[0x1E0DEC470]();
}

uint64_t sub_1903D0C40()
{
  return MEMORY[0x1E0DEC498]();
}

uint64_t sub_1903D0C4C()
{
  return MEMORY[0x1E0DEC508]();
}

uint64_t sub_1903D0C58()
{
  return MEMORY[0x1E0DEC518]();
}

uint64_t sub_1903D0C64()
{
  return MEMORY[0x1E0DEC588]();
}

uint64_t sub_1903D0C70()
{
  return MEMORY[0x1E0DEC660]();
}

uint64_t sub_1903D0C7C()
{
  return MEMORY[0x1E0DEC670]();
}

uint64_t sub_1903D0C88()
{
  return MEMORY[0x1E0DEC688]();
}

uint64_t sub_1903D0C94()
{
  return MEMORY[0x1E0DEC6C0]();
}

uint64_t sub_1903D0CA0()
{
  return MEMORY[0x1E0DEC6C8]();
}

uint64_t sub_1903D0CAC()
{
  return MEMORY[0x1E0DEC8C0]();
}

uint64_t sub_1903D0CB8()
{
  return MEMORY[0x1E0DEC8C8]();
}

uint64_t sub_1903D0CC4()
{
  return MEMORY[0x1E0DEC8D0]();
}

uint64_t sub_1903D0CD0()
{
  return MEMORY[0x1E0DEC8E0]();
}

uint64_t sub_1903D0CDC()
{
  return MEMORY[0x1E0DECBE0]();
}

uint64_t sub_1903D0CE8()
{
  return MEMORY[0x1E0DECBE8]();
}

uint64_t sub_1903D0CF4()
{
  return MEMORY[0x1E0DECBF8]();
}

uint64_t sub_1903D0D00()
{
  return MEMORY[0x1E0DECD18]();
}

uint64_t sub_1903D0D0C()
{
  return MEMORY[0x1E0DECD38]();
}

uint64_t sub_1903D0D18()
{
  return MEMORY[0x1E0DECD40]();
}

uint64_t sub_1903D0D24()
{
  return MEMORY[0x1E0DECD50]();
}

uint64_t sub_1903D0D30()
{
  return MEMORY[0x1E0DECD70]();
}

uint64_t sub_1903D0D3C()
{
  return MEMORY[0x1E0DECDA0]();
}

uint64_t sub_1903D0D48()
{
  return MEMORY[0x1E0DECDA8]();
}

uint64_t sub_1903D0D54()
{
  return MEMORY[0x1E0DECE70]();
}

uint64_t sub_1903D0D60()
{
  return MEMORY[0x1E0DECEF8]();
}

uint64_t sub_1903D0D6C()
{
  return MEMORY[0x1E0DECF28]();
}

uint64_t sub_1903D0D78()
{
  return MEMORY[0x1E0DECF38]();
}

uint64_t sub_1903D0D84()
{
  return MEMORY[0x1E0DECF40]();
}

uint64_t sub_1903D0D90()
{
  return MEMORY[0x1E0DECF58]();
}

uint64_t sub_1903D0D9C()
{
  return MEMORY[0x1E0DECF60]();
}

uint64_t sub_1903D0DA8()
{
  return MEMORY[0x1E0DECF78]();
}

uint64_t sub_1903D0DB4()
{
  return MEMORY[0x1E0DECF80]();
}

uint64_t sub_1903D0DC0()
{
  return MEMORY[0x1E0DECF88]();
}

uint64_t sub_1903D0DCC()
{
  return MEMORY[0x1E0DECFC0]();
}

uint64_t sub_1903D0DD8()
{
  return MEMORY[0x1E0DECFC8]();
}

uint64_t sub_1903D0DE4()
{
  return MEMORY[0x1E0DECFE0]();
}

uint64_t sub_1903D0DF0()
{
  return MEMORY[0x1E0DECFE8]();
}

uint64_t sub_1903D0DFC()
{
  return MEMORY[0x1E0DECFF0]();
}

uint64_t sub_1903D0E08()
{
  return MEMORY[0x1E0DED038]();
}

uint64_t sub_1903D0E14()
{
  return MEMORY[0x1E0DED048]();
}

uint64_t sub_1903D0E20()
{
  return MEMORY[0x1E0DED070]();
}

uint64_t sub_1903D0E2C()
{
  return MEMORY[0x1E0DED090]();
}

uint64_t sub_1903D0E38()
{
  return MEMORY[0x1E0DED098]();
}

uint64_t sub_1903D0E44()
{
  return MEMORY[0x1E0DED0B0]();
}

uint64_t sub_1903D0E50()
{
  return MEMORY[0x1E0DED0B8]();
}

uint64_t sub_1903D0E5C()
{
  return MEMORY[0x1E0DED0C0]();
}

uint64_t sub_1903D0E68()
{
  return MEMORY[0x1E0DED0F0]();
}

uint64_t sub_1903D0E74()
{
  return MEMORY[0x1E0DED0F8]();
}

uint64_t sub_1903D0E80()
{
  return MEMORY[0x1E0DED110]();
}

uint64_t sub_1903D0E8C()
{
  return MEMORY[0x1E0DED118]();
}

uint64_t sub_1903D0E98()
{
  return MEMORY[0x1E0DED120]();
}

uint64_t sub_1903D0EA4()
{
  return MEMORY[0x1E0DED170]();
}

uint64_t sub_1903D0EB0()
{
  return MEMORY[0x1E0DED1D0]();
}

uint64_t sub_1903D0EBC()
{
  return MEMORY[0x1E0DED4A0]();
}

uint64_t sub_1903D0EC8()
{
  return MEMORY[0x1E0DED550]();
}

uint64_t sub_1903D0ED4()
{
  return MEMORY[0x1E0DED600]();
}

uint64_t sub_1903D0EE0()
{
  return MEMORY[0x1E0DED628]();
}

uint64_t sub_1903D0EEC()
{
  return MEMORY[0x1E0DED768]();
}

uint64_t sub_1903D0EF8()
{
  return MEMORY[0x1E0DED998]();
}

uint64_t sub_1903D0F04()
{
  return MEMORY[0x1E0DF0EC0]();
}

uint64_t sub_1903D0F10()
{
  return MEMORY[0x1E0DEDAE0]();
}

uint64_t sub_1903D0F1C()
{
  return MEMORY[0x1E0DEDAE8]();
}

uint64_t sub_1903D0F28()
{
  return MEMORY[0x1E0CB2628]();
}

uint64_t sub_1903D0F34()
{
  return MEMORY[0x1E0CB2640]();
}

uint64_t sub_1903D0F40()
{
  return MEMORY[0x1E0CB2650]();
}

uint64_t sub_1903D0F4C()
{
  return MEMORY[0x1E0DEDB10]();
}

uint64_t sub_1903D0F58()
{
  return MEMORY[0x1E0DEDB18]();
}

uint64_t sub_1903D0F64()
{
  return MEMORY[0x1E0DEDB20]();
}

uint64_t sub_1903D0F70()
{
  return MEMORY[0x1E0DEDB28]();
}

uint64_t sub_1903D0F7C()
{
  return MEMORY[0x1E0DEDB30]();
}

uint64_t sub_1903D0F88()
{
  return MEMORY[0x1E0DEDEF0]();
}

uint64_t sub_1903D0F94()
{
  return MEMORY[0x1E0DEDEF8]();
}

uint64_t sub_1903D0FA0()
{
  return MEMORY[0x1E0DEDF10]();
}

uint64_t sub_1903D0FAC()
{
  return MEMORY[0x1E0DEDF18]();
}

uint64_t sub_1903D0FB8()
{
  return MEMORY[0x1E0DEDF20]();
}

uint64_t sub_1903D0FC4()
{
  return MEMORY[0x1E0DEDF40]();
}

uint64_t sub_1903D0FD0()
{
  return MEMORY[0x1E0DEE030]();
}

uint64_t sub_1903D0FDC()
{
  return MEMORY[0x1E0DEE210]();
}

uint64_t sub_1903D0FE8()
{
  return MEMORY[0x1E0DEE220]();
}

uint64_t sub_1903D0FF4()
{
  return MEMORY[0x1E0DEE230]();
}

uint64_t sub_1903D1000()
{
  return MEMORY[0x1E0DEE240]();
}

uint64_t sub_1903D100C()
{
  return MEMORY[0x1E0DEE270]();
}

uint64_t sub_1903D1018()
{
  return MEMORY[0x1E0DEE8E0]();
}

uint64_t sub_1903D1024()
{
  return MEMORY[0x1E0DEE8E8]();
}

uint64_t sub_1903D1030()
{
  return MEMORY[0x1E0DEE978]();
}

ABRecordRef ABPersonCreate(void)
{
  return (ABRecordRef)MEMORY[0x1E0C902A8]();
}

uint64_t AMSLogKey()
{
  return MEMORY[0x1E0CFD858]();
}

uint64_t APGetAuditTokenForSelf()
{
  return MEMORY[0x1E0CF9650]();
}

uint64_t AnalyticsSendEvent()
{
  return MEMORY[0x1E0D15420]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x1E0D01E18]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x1E0CD2388]();
  return result;
}

CATransform3D *__cdecl CATransform3DConcat(CATransform3D *__return_ptr retstr, CATransform3D *a, CATransform3D *b)
{
  return (CATransform3D *)MEMORY[0x1E0CD25F0](retstr, a, b);
}

BOOL CATransform3DEqualToTransform(CATransform3D *a, CATransform3D *b)
{
  return MEMORY[0x1E0CD25F8](a, b);
}

CATransform3D *__cdecl CATransform3DInvert(CATransform3D *__return_ptr retstr, CATransform3D *t)
{
  return (CATransform3D *)MEMORY[0x1E0CD2618](retstr, t);
}

CATransform3D *__cdecl CATransform3DMakeScale(CATransform3D *__return_ptr retstr, CGFloat sx, CGFloat sy, CGFloat sz)
{
  return (CATransform3D *)MEMORY[0x1E0CD2640](retstr, sx, sy, sz);
}

uint64_t CCCryptorGCMOneshotDecrypt()
{
  return MEMORY[0x1E0C800D8]();
}

uint64_t CCCryptorGCMOneshotEncrypt()
{
  return MEMORY[0x1E0C800E0]();
}

uint64_t CCDeriveKey()
{
  return MEMORY[0x1E0C80120]();
}

uint64_t CCKDFParametersCreateAnsiX963()
{
  return MEMORY[0x1E0C80220]();
}

uint64_t CCKDFParametersDestroy()
{
  return MEMORY[0x1E0C80230]();
}

int CCKeyDerivationPBKDF(CCPBKDFAlgorithm algorithm, const char *password, size_t passwordLen, const uint8_t *salt, size_t saltLen, CCPseudoRandomAlgorithm prf, unsigned int rounds, uint8_t *derivedKey, size_t derivedKeyLen)
{
  return MEMORY[0x1E0C80240](*(_QWORD *)&algorithm, password, passwordLen, salt, saltLen, *(_QWORD *)&prf, *(_QWORD *)&rounds, derivedKey);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80330](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1E0C80338](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80340](c, data, *(_QWORD *)&len);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80368](data, *(_QWORD *)&len, md);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80370](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1E0C80378](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1E0C80380](c, data, *(_QWORD *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  CFAbsoluteTime result;

  MEMORY[0x1E0C97C58]();
  return result;
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1E0C97DF0](alloc, str, attributes);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1E0C97E90](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

uint64_t CFBundleCopyLocalizedStringForLocalization()
{
  return MEMORY[0x1E0C98060]();
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

CFDateFormatterRef CFDateFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFDateFormatterStyle dateStyle, CFDateFormatterStyle timeStyle)
{
  return (CFDateFormatterRef)MEMORY[0x1E0C98460](allocator, locale, dateStyle, timeStyle);
}

CFStringRef CFDateFormatterGetFormat(CFDateFormatterRef formatter)
{
  return (CFStringRef)MEMORY[0x1E0C984A8](formatter);
}

CFLocaleRef CFDateFormatterGetLocale(CFDateFormatterRef formatter)
{
  return (CFLocaleRef)MEMORY[0x1E0C984B0](formatter);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

uint64_t CFHTTPCookieStorageCreateFromFile()
{
  return MEMORY[0x1E0C92788]();
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x1E0C988B0](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1E0C988B8]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
  MEMORY[0x1E0C988E0](center, name, object, userInfo, deliverImmediately);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

Boolean CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef currencyCode, int32_t *defaultFractionDigits, double *roundingIncrement)
{
  return MEMORY[0x1E0C98958](currencyCode, defaultFractionDigits, roundingIncrement);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x1E0C98A30](applicationID);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFArrayRef)MEMORY[0x1E0C98A50](applicationID, userName, hostName);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A60](key, applicationID, userName, hostName);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A70](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1E0C98A78](key, applicationID, keyExistsAndHasValidFormat);
}

void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID)
{
  MEMORY[0x1E0C98A80](key, value, applicationID);
}

void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A88](keysToSet, keysToRemove, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  MEMORY[0x1E0C98A90](key, value, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1E0C98A98](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C40]();
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

unint64_t CFStringConvertEncodingToNSStringEncoding(CFStringEncoding encoding)
{
  return MEMORY[0x1E0C98F30](*(_QWORD *)&encoding);
}

CFStringEncoding CFStringConvertIANACharSetNameToEncoding(CFStringRef theString)
{
  return MEMORY[0x1E0C98F40](theString);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

void CFStringTrimWhitespace(CFMutableStringRef theString)
{
  MEMORY[0x1E0C99258](theString);
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1E0C99518](alloc);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1E0C99538](alloc, uuid);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1;
  uint64_t v2;
  CFUUIDBytes result;

  v1 = MEMORY[0x1E0C99568](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

CFUserNotificationRef CFUserNotificationCreate(CFAllocatorRef allocator, CFTimeInterval timeout, CFOptionFlags flags, SInt32 *error, CFDictionaryRef dictionary)
{
  return (CFUserNotificationRef)MEMORY[0x1E0C995A8](allocator, flags, error, dictionary, timeout);
}

CFRunLoopSourceRef CFUserNotificationCreateRunLoopSource(CFAllocatorRef allocator, CFUserNotificationRef userNotification, CFUserNotificationCallBack callout, CFIndex order)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0C995B8](allocator, userNotification, callout, order);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAB0](retstr, t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAD8](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9BAE0](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGContextRef CGBitmapContextCreateWithData(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo, CGBitmapContextReleaseDataCallback releaseCallback, void *releaseInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB38](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo, releaseCallback);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return MEMORY[0x1E0C9BB48](context);
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  return MEMORY[0x1E0C9BB50](context);
}

size_t CGBitmapContextGetBitsPerPixel(CGContextRef context)
{
  return MEMORY[0x1E0C9BB58](context);
}

size_t CGBitmapContextGetBytesPerRow(CGContextRef context)
{
  return MEMORY[0x1E0C9BB60](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BB68](context);
}

void *__cdecl CGBitmapContextGetData(CGContextRef context)
{
  return (void *)MEMORY[0x1E0C9BB70](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1E0C9BB78](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1E0C9BB80](context);
}

uint64_t CGBitmapGetAlignedBytesPerRow()
{
  return MEMORY[0x1E0C9BB98]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1E0C9BC78](space, components);
}

CGColorRef CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef a1, CGColorRenderingIntent intent, CGColorRef color, CFDictionaryRef options)
{
  return (CGColorRef)MEMORY[0x1E0C9BC88](a1, *(_QWORD *)&intent, color, options);
}

CGColorRef CGColorCreateCopyWithAlpha(CGColorRef color, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BC90](color, alpha);
}

CGColorRef CGColorCreateGenericGray(CGFloat gray, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1E0C9BCA0](gray, alpha);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1E0C9BCD8](color1, color2);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BD00](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1E0C9BD08](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1E0C9BD20](color);
}

void CGColorRelease(CGColorRef color)
{
  MEMORY[0x1E0C9BD60](color);
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1E0C9BD68](color);
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BDB8](space);
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDE8]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BE50](name);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1E0C9BED0](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1E0C9BED8](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BF38](space);
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
  MEMORY[0x1E0C9BFD8](c, path);
}

void CGContextAddRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9BFE8](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextBeginPath(CGContextRef c)
{
  MEMORY[0x1E0C9C000](c);
}

void CGContextBeginTransparencyLayer(CGContextRef c, CFDictionaryRef auxiliaryInfo)
{
  MEMORY[0x1E0C9C008](c, auxiliaryInfo);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C020](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClip(CGContextRef c)
{
  MEMORY[0x1E0C9C028](c);
}

void CGContextClipToRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C038](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextClosePath(CGContextRef c)
{
  MEMORY[0x1E0C9C048](c);
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
  MEMORY[0x1E0C9C050](c, transform);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextDrawLinearGradient(CGContextRef c, CGGradientRef gradient, CGPoint startPoint, CGPoint endPoint, CGGradientDrawingOptions options)
{
  MEMORY[0x1E0C9C198](c, gradient, *(_QWORD *)&options, (__n128)startPoint, *(__n128 *)&startPoint.y, (__n128)endPoint, *(__n128 *)&endPoint.y);
}

void CGContextDrawPDFPage(CGContextRef c, CGPDFPageRef page)
{
  MEMORY[0x1E0C9C1A0](c, page);
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
  MEMORY[0x1E0C9C1B8](c, *(_QWORD *)&mode);
}

void CGContextDrawTiledImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C1E0](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextEndTransparencyLayer(CGContextRef c)
{
  MEMORY[0x1E0C9C200](c);
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x1E0C9C220](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGContextGetBaseCTM()
{
  return MEMORY[0x1E0C9C240]();
}

CGAffineTransform *__cdecl CGContextGetCTM(CGAffineTransform *__return_ptr retstr, CGContextRef c)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9C250](retstr, c);
}

uint64_t CGContextGetRenderingIntent()
{
  return MEMORY[0x1E0C9C2E0]();
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextRestoreGState(CGContextRef c)
{
  MEMORY[0x1E0C9C370](c);
}

void CGContextSaveGState(CGContextRef c)
{
  MEMORY[0x1E0C9C388](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
  MEMORY[0x1E0C9C390](c, sx, sy);
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
  MEMORY[0x1E0C9C3B8](c, alpha);
}

uint64_t CGContextSetBaseCTM()
{
  return MEMORY[0x1E0C9C3C0]();
}

void CGContextSetBlendMode(CGContextRef c, CGBlendMode mode)
{
  MEMORY[0x1E0C9C3C8](c, *(_QWORD *)&mode);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x1E0C9C408](c, color);
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
  MEMORY[0x1E0C9C448](c, gray, alpha);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
  MEMORY[0x1E0C9C480](c, width);
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A0](c, red, green, blue, alpha);
}

void CGContextSetRGBStrokeColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  MEMORY[0x1E0C9C4A8](c, red, green, blue, alpha);
}

void CGContextSetShadowWithColor(CGContextRef c, CGSize offset, CGFloat blur, CGColorRef color)
{
  MEMORY[0x1E0C9C4C0](c, color, (__n128)offset, *(__n128 *)&offset.height, blur);
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9C538](c, x, y);
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
  MEMORY[0x1E0C9C588](c, tx, ty);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1E0C9C5F0](data);
}

CGGradientRef CGGradientCreateWithColorComponents(CGColorSpaceRef space, const CGFloat *components, const CGFloat *locations, size_t count)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA80](space, components, locations, count);
}

CGGradientRef CGGradientCreateWithColors(CGColorSpaceRef space, CFArrayRef colors, const CGFloat *locations)
{
  return (CGGradientRef)MEMORY[0x1E0C9CA90](space, colors, locations);
}

void CGGradientRelease(CGGradientRef gradient)
{
  MEMORY[0x1E0C9CAC0](gradient);
}

CGImageRef CGImageCreateCopy(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CB88](image);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1E0C9CBA8](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1E0C9CBD0](source, decode, shouldInterpolate, *(_QWORD *)&intent);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
  MEMORY[0x1E0CBC308](idst, image, properties);
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC338](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1E0CBC348](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1E0CBC358](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF0](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1E0C9CBF8](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1E0C9CC00](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1E0C9CC08](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9CC20](image);
}

const CGFloat *__cdecl CGImageGetDecode(CGImageRef image)
{
  return (const CGFloat *)MEMORY[0x1E0C9CC40](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
{
  return MEMORY[0x1E0C9CCA0](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1E0C9CDA8](image);
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBC530](isrc, index, options);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1E0CBC568](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC590](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1E0CBC5C0](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x1E0CBC5F0](isrc);
}

CGPDFDocumentRef CGPDFDocumentCreateWithURL(CFURLRef url)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CF60](url);
}

size_t CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef document)
{
  return MEMORY[0x1E0C9CF98](document);
}

CGPDFPageRef CGPDFDocumentGetPage(CGPDFDocumentRef document, size_t pageNumber)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9CFA0](document, pageNumber);
}

void CGPDFDocumentRelease(CGPDFDocumentRef document)
{
  MEMORY[0x1E0C9CFC8](document);
}

CGPDFDocumentRef CGPDFDocumentRetain(CGPDFDocumentRef document)
{
  return (CGPDFDocumentRef)MEMORY[0x1E0C9CFD0](document);
}

CGRect CGPDFPageGetBoxRect(CGPDFPageRef page, CGPDFBox box)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D090](page, *(_QWORD *)&box);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGAffineTransform *__cdecl CGPDFPageGetDrawingTransform(CGAffineTransform *__return_ptr retstr, CGPDFPageRef page, CGPDFBox box, CGRect rect, int rotate, BOOL preserveAspectRatio)
{
  return (CGAffineTransform *)MEMORY[0x1E0C9D0A8](retstr, page, *(_QWORD *)&box, *(_QWORD *)&rotate, preserveAspectRatio, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPDFPageRelease(CGPDFPageRef page)
{
  MEMORY[0x1E0C9D0E0](page);
}

CGPDFPageRef CGPDFPageRetain(CGPDFPageRef page)
{
  return (CGPDFPageRef)MEMORY[0x1E0C9D0F8](page);
}

void CGPathAddArc(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y, CGFloat radius, CGFloat startAngle, CGFloat endAngle, BOOL clockwise)
{
  MEMORY[0x1E0C9D280](path, m, clockwise, x, y, radius, startAngle, endAngle);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D298](path, m, cp1x, cp1y, cp2x, cp2y, x, y);
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D2A8](path, m, x, y);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D388]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x1E0C9D398](path, transform);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1E0C9D3C8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
  MEMORY[0x1E0C9D490](path, m, x, y);
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x1E0C9D498](path);
}

void CGRectDivide(CGRect rect, CGRect *slice, CGRect *remainder, CGFloat amount, CGRectEdge edge)
{
  MEMORY[0x1E0C9D568](slice, remainder, *(_QWORD *)&edge, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, amount);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D570]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D580]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D588]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5B0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5C8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x1E0C9D5D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D5E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x1E0C9D5F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0C9D5F8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1E0C9D600]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1E0C9D608]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1E0C9D618]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x1E0C9D630]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

uint64_t CGSVGDocumentCreateFromData()
{
  return MEMORY[0x1E0D18850]();
}

uint64_t CGSVGDocumentGetCanvasSize()
{
  return MEMORY[0x1E0D18858]();
}

uint64_t CGSVGDocumentGetRootNode()
{
  return MEMORY[0x1E0D18860]();
}

uint64_t CGSVGNodeGetChildAtIndex()
{
  return MEMORY[0x1E0D18880]();
}

uint64_t CGSVGPathCreateCGPath()
{
  return MEMORY[0x1E0D18888]();
}

uint64_t CGSVGShapeNodeGetPath()
{
  return MEMORY[0x1E0D18890]();
}

uint64_t CKDatabaseScopeString()
{
  return MEMORY[0x1E0C94778]();
}

uint64_t CKErrorCodeForInternalErrorCode()
{
  return MEMORY[0x1E0C947C0]();
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x1E0C9E300]((__n128)coord, *(__n128 *)&coord.longitude);
}

CLLocationCoordinate2D CLLocationCoordinate2DMake(CLLocationDegrees latitude, CLLocationDegrees longitude)
{
  double v2;
  double v3;
  CLLocationCoordinate2D result;

  MEMORY[0x1E0C9E308](latitude, longitude);
  result.longitude = v3;
  result.latitude = v2;
  return result;
}

uint64_t CLPassKitNotifyPayment()
{
  return MEMORY[0x1E0C9E328]();
}

uint64_t CNIsChineseJapaneseKoreanString()
{
  return MEMORY[0x1E0D13808]();
}

uint64_t CNStringContainsKoreanCharacters()
{
  return MEMORY[0x1E0D13930]();
}

uint64_t CPCopySharedResourcesPreferencesDomainForDomain()
{
  return MEMORY[0x1E0CFA250]();
}

uint64_t CPPhoneNumberCopyHomeCountryCode()
{
  return MEMORY[0x1E0CFA360]();
}

uint64_t CPPhoneNumberCopyLastKnownNetworkCountryCode()
{
  return MEMORY[0x1E0CFA368]();
}

uint64_t CPPhoneNumberCopyNetworkCountryCode()
{
  return MEMORY[0x1E0CFA370]();
}

uint64_t CPSharedResourcesDirectory()
{
  return MEMORY[0x1E0CFA6C0]();
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1E0CA7A68](*(_QWORD *)&uiType, language, size);
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1E0CA7A70](descriptor, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateWithAttributes(CFDictionaryRef attributes)
{
  return (CTFontDescriptorRef)MEMORY[0x1E0CA7B00](attributes);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
  MEMORY[0x1E0CA7DA0](frame, context);
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1E0CA7DD8](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1E0CA7DE0](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  double v5;
  double v6;
  CGSize result;

  MEMORY[0x1E0CA7DF8](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.height = v6;
  result.width = v5;
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1E0CA7E88](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
  MEMORY[0x1E0CA7EA8](line, context);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x1E0CA7EC0](line, options);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return (CTParagraphStyleRef)MEMORY[0x1E0CA7F60](settings, settingCount);
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return MEMORY[0x1E0D1D0F8]();
}

uint64_t GEOErrorDomain()
{
  return MEMORY[0x1E0D26578]();
}

uint64_t GSMainScreenScaleFactor()
{
  return MEMORY[0x1E0D27C58]();
}

uint64_t HSAAuthenticationRegisterIncomingAuthenticationTokenBlockWithIdentifier()
{
  return MEMORY[0x1E0D28760]();
}

uint64_t HSAAuthenticationUnregisterIncomingAuthenticationTokenBlockWithIdentifier()
{
  return MEMORY[0x1E0D28768]();
}

uint64_t IDSCopyAddressDestinationForDestination()
{
  return MEMORY[0x1E0D33DC0]();
}

uint64_t IDSCopyIDForDevice()
{
  return MEMORY[0x1E0D33DE0]();
}

uint64_t IDSCopyIDForEmailAddress()
{
  return MEMORY[0x1E0D33DF0]();
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return MEMORY[0x1E0D33DF8]();
}

uint64_t IDSCopyLocalDeviceUniqueID()
{
  return MEMORY[0x1E0D33E20]();
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD90](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1E0CBB698](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x1E0CBB6A0](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
  MEMORY[0x1E0CBB6B8](notify, queue);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1E0CBB718](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1E0CBB738](*(_QWORD *)&AssertionID);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1E0CBB918](*(_QWORD *)&mainPort, path);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1E0CBB9C0](notifyPort, *(_QWORD *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

uint64_t LevenshteinDistance()
{
  return MEMORY[0x1E0D1B030]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1E0DE2B20]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1E0DE2B70]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1E0DE2B80]();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return MEMORY[0x1E0D4E4A0]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1E0D4E4D0]();
}

uint64_t MKBGetDeviceLockStateInfo()
{
  return MEMORY[0x1E0D4E4D8]();
}

uint64_t NFSecureElementSerialNumberToString()
{
  return MEMORY[0x1E0D51940]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1E0CB28A0](aClassName);
}

NSComparisonResult NSDecimalCompare(const NSDecimal *leftOperand, const NSDecimal *rightOperand)
{
  return MEMORY[0x1E0CB2940](leftOperand, rightOperand);
}

void NSDecimalRound(NSDecimal *result, const NSDecimal *number, NSInteger scale, NSRoundingMode roundingMode)
{
  MEMORY[0x1E0CB2948](result, number, scale, roundingMode);
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSUInteger NSPageSize(void)
{
  return MEMORY[0x1E0CB2FE8]();
}

NSRect NSRectFromString(NSString *aString)
{
  double v1;
  double v2;
  double v3;
  double v4;
  NSRect result;

  MEMORY[0x1E0CB3150](aString);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1E0CB3178](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1E0CB3190](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromRect(NSRect aRect)
{
  return (NSString *)MEMORY[0x1E0CB3228]((__n128)aRect.origin, *(__n128 *)&aRect.origin.y, (__n128)aRect.size, *(__n128 *)&aRect.size.height);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1E0CB3250]();
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x1E0D82C10]();
}

uint64_t PBDataWriterWriteDataField()
{
  return MEMORY[0x1E0D82C28]();
}

uint64_t PBDataWriterWriteDoubleField()
{
  return MEMORY[0x1E0D82C38]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x1E0D82C58]();
}

uint64_t PBDataWriterWriteSint32Field()
{
  return MEMORY[0x1E0D82C88]();
}

uint64_t PBDataWriterWriteSint64Field()
{
  return MEMORY[0x1E0D82C90]();
}

uint64_t PBDataWriterWriteStringField()
{
  return MEMORY[0x1E0D82C98]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x1E0D82CB0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x1E0D82CB8]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x1E0D82CC0]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x1E0D82CE0]();
}

uint64_t PBReaderReadData()
{
  return MEMORY[0x1E0D82CF0]();
}

uint64_t PBReaderReadString()
{
  return MEMORY[0x1E0D82D00]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x1E0D82D10]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x1E0D82D28]();
}

uint64_t PNCopyBestGuessCountryCodeForNumber()
{
  return MEMORY[0x1E0D17860]();
}

uint64_t PNCopyBestGuessNormalizedNumberForCountry()
{
  return MEMORY[0x1E0D17868]();
}

uint64_t PNIsValidPhoneNumberForCountry()
{
  return MEMORY[0x1E0D17888]();
}

uint64_t SBSCreateOpenApplicationService()
{
  return MEMORY[0x1E0DAB620]();
}

uint64_t SBSGetScreenLockStatus()
{
  return MEMORY[0x1E0DAB728]();
}

uint64_t SBSIsSystemApertureAvailable()
{
  return MEMORY[0x1E0DAB778]();
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddress(CFAllocatorRef allocator, const sockaddr *address)
{
  return (SCNetworkReachabilityRef)MEMORY[0x1E0CE88B8](allocator, address);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return MEMORY[0x1E0CE88D8](target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return MEMORY[0x1E0CE88F0](target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return MEMORY[0x1E0CE88F8](target, queue);
}

uint64_t SESEndPointListContainers()
{
  return MEMORY[0x1E0D89688]();
}

uint64_t SESEndPointPrivacyDecryption()
{
  return MEMORY[0x1E0D89690]();
}

uint64_t SESKeyCreate()
{
  return MEMORY[0x1E0D896A0]();
}

uint64_t SESKeyCreateWithSession()
{
  return MEMORY[0x1E0D896B0]();
}

uint64_t SESKeyDelete()
{
  return MEMORY[0x1E0D896B8]();
}

uint64_t SESKeyDeleteWithSession()
{
  return MEMORY[0x1E0D896C0]();
}

uint64_t SESKeyExchange()
{
  return MEMORY[0x1E0D896D0]();
}

uint64_t SESKeyExchangeWithSession()
{
  return MEMORY[0x1E0D896D8]();
}

uint64_t SESKeyPublicKey()
{
  return MEMORY[0x1E0D896F8]();
}

uint64_t SecAccessControlCopyData()
{
  return MEMORY[0x1E0CD5E90]();
}

uint64_t SecAccessControlCreateFromData()
{
  return MEMORY[0x1E0CD5EA0]();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x1E0CD5EA8](allocator, protection, flags, error);
}

uint64_t SecAccessControlSetConstraints()
{
  return MEMORY[0x1E0CD5EE8]();
}

uint64_t SecCMSCreateSignedData()
{
  return MEMORY[0x1E0CD5F10]();
}

uint64_t SecCMSVerify()
{
  return MEMORY[0x1E0CD5F20]();
}

uint64_t SecCMSVerifyCopyDataAndAttributes()
{
  return MEMORY[0x1E0CD5F28]();
}

uint64_t SecCMSVerifySignedData()
{
  return MEMORY[0x1E0CD5F30]();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x1E0CD5F60](certificate);
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x1E0CD5F98](certificate);
}

uint64_t SecCertificateCopyProperties()
{
  return MEMORY[0x1E0CD5FC0]();
}

uint64_t SecCertificateCopySubjectPublicKeyInfoSHA256Digest()
{
  return MEMORY[0x1E0CD5FF0]();
}

uint64_t SecCertificateCreateWithBytes()
{
  return MEMORY[0x1E0CD6008]();
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x1E0CD6010](allocator, data);
}

uint64_t SecCertificateNotValidBefore()
{
  return MEMORY[0x1E0CD6078]();
}

uint64_t SecCopyEncryptedToServer()
{
  return MEMORY[0x1E0CD6210]();
}

CFStringRef SecCopyErrorMessageString(OSStatus status, void *reserved)
{
  return (CFStringRef)MEMORY[0x1E0CD6218](*(_QWORD *)&status, reserved);
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6290](attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return MEMORY[0x1E0CD6298](query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return MEMORY[0x1E0CD62A0](query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return MEMORY[0x1E0CD62D8](query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD62F8](key, error);
}

CFDataRef SecKeyCopyKeyExchangeResult(SecKeyRef privateKey, SecKeyAlgorithm algorithm, SecKeyRef publicKey, CFDictionaryRef parameters, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1E0CD6300](privateKey, algorithm, publicKey, parameters, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1E0CD6318](key);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD6388](parameters, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1E0CD63A0](keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return MEMORY[0x1E0CD6418](key, algorithm, signedData, signature, error);
}

OSStatus SecPKCS12Import(CFDataRef pkcs12_data, CFDictionaryRef options, CFArrayRef *items)
{
  return MEMORY[0x1E0CD6420](pkcs12_data, options, items);
}

uint64_t SecPolicyCreateApplePayIssuerEncryption()
{
  return MEMORY[0x1E0CD64A8]();
}

uint64_t SecPolicyCreateApplePinned()
{
  return MEMORY[0x1E0CD64B8]();
}

uint64_t SecPolicyCreateAppleSMPEncryption()
{
  return MEMORY[0x1E0CD64C0]();
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return (SecPolicyRef)MEMORY[0x1E0CD64D8]();
}

uint64_t SecPolicyCreatePassbookCardSigner()
{
  return MEMORY[0x1E0CD6500]();
}

SecPolicyRef SecPolicyCreateRevocation(CFOptionFlags revocationFlags)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6510](revocationFlags);
}

SecPolicyRef SecPolicyCreateSSL(Boolean server, CFStringRef hostname)
{
  return (SecPolicyRef)MEMORY[0x1E0CD6520](server, hostname);
}

uint64_t SecPolicyCreateTestAppleSMPEncryption()
{
  return MEMORY[0x1E0CD6538]();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return MEMORY[0x1E0CD65A0](rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1E0CD65F0](task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return (SecTaskRef)MEMORY[0x1E0CD6620](allocator, token);
}

CFArrayRef SecTrustCopyCertificateChain(SecTrustRef trust)
{
  return (CFArrayRef)MEMORY[0x1E0CD6648](trust);
}

uint64_t SecTrustCopyFailureDescription()
{
  return MEMORY[0x1E0CD6660]();
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return (SecKeyRef)MEMORY[0x1E0CD6670](trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x1E0CD6698](certificates, policies, trust);
}

OSStatus SecTrustEvaluateAsyncWithError(SecTrustRef trust, dispatch_queue_t queue, SecTrustWithErrorCallback result)
{
  return MEMORY[0x1E0CD66B8](trust, queue, result);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x1E0CD66C8](trust, error);
}

CFIndex SecTrustGetCertificateCount(SecTrustRef trust)
{
  return MEMORY[0x1E0CD66E0](trust);
}

OSStatus SecTrustGetTrustResult(SecTrustRef trust, SecTrustResultType *result)
{
  return MEMORY[0x1E0CD66E8](trust, result);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x1E0CD6710](trust, anchorCertificates);
}

OSStatus SecTrustSetNetworkFetchAllowed(SecTrustRef trust, Boolean allowFetch)
{
  return MEMORY[0x1E0CD6730](trust, allowFetch);
}

OSStatus SecTrustSetPolicies(SecTrustRef trust, CFTypeRef policies)
{
  return MEMORY[0x1E0CD6748](trust, policies);
}

OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
{
  return MEMORY[0x1E0CD6760](trust, verifyDate);
}

uint64_t SipHash()
{
  return MEMORY[0x1E0D1B658]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1E0C80928](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x1E0C80958](aBlock);
}

uint64_t _CFBundleFlushBundleCaches()
{
  return MEMORY[0x1E0C9A008]();
}

uint64_t _CFPreferencesSetBackupDisabled()
{
  return MEMORY[0x1E0C9A380]();
}

uint64_t _IDSCopyIDForEmailAddress()
{
  return MEMORY[0x1E0D34EF8]();
}

uint64_t _IDSCopyIDForPhoneNumberWithOptions()
{
  return MEMORY[0x1E0D34F00]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x1E0C80BC8](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

void _os_activity_initiate(void *dso, const char *description, os_activity_flag_t flags, os_block_t activity_block)
{
  MEMORY[0x1E0C80FD0](dso, description, *(_QWORD *)&flags, activity_block);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1E0C81010]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C810D0](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1E0DEEA28]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1E0DEEA40]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1E0C81570]();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
  MEMORY[0x1E0C81580](__buf, __nbytes);
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x1E0C81588](*(_QWORD *)&__upper_bound);
}

uint64_t archive_entry_filetype()
{
  return MEMORY[0x1E0DE3DC0]();
}

uint64_t archive_entry_pathname_utf8()
{
  return MEMORY[0x1E0DE3DE0]();
}

uint64_t archive_entry_perm()
{
  return MEMORY[0x1E0DE3DE8]();
}

uint64_t archive_entry_set_perm()
{
  return MEMORY[0x1E0DE3E20]();
}

uint64_t archive_entry_size()
{
  return MEMORY[0x1E0DE3E38]();
}

uint64_t archive_entry_size_is_set()
{
  return MEMORY[0x1E0DE3E40]();
}

uint64_t archive_entry_sourcepath()
{
  return MEMORY[0x1E0DE3E48]();
}

uint64_t archive_entry_update_pathname_utf8()
{
  return MEMORY[0x1E0DE3E50]();
}

uint64_t archive_error_string()
{
  return MEMORY[0x1E0DE3E60]();
}

uint64_t archive_read_close()
{
  return MEMORY[0x1E0DE3E78]();
}

uint64_t archive_read_data_block()
{
  return MEMORY[0x1E0DE3E88]();
}

uint64_t archive_read_disk_descend()
{
  return MEMORY[0x1E0DE3EA8]();
}

uint64_t archive_read_disk_new()
{
  return MEMORY[0x1E0DE3EB8]();
}

uint64_t archive_read_disk_open()
{
  return MEMORY[0x1E0DE3EC0]();
}

uint64_t archive_read_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3ED0]();
}

uint64_t archive_read_disk_set_symlink_physical()
{
  return MEMORY[0x1E0DE3ED8]();
}

uint64_t archive_read_free()
{
  return MEMORY[0x1E0DE3EF8]();
}

uint64_t archive_read_new()
{
  return MEMORY[0x1E0DE3F00]();
}

uint64_t archive_read_next_header()
{
  return MEMORY[0x1E0DE3F08]();
}

uint64_t archive_read_open_fd()
{
  return MEMORY[0x1E0DE3F20]();
}

uint64_t archive_read_open_memory()
{
  return MEMORY[0x1E0DE3F30]();
}

uint64_t archive_read_support_filter_all()
{
  return MEMORY[0x1E0DE3F48]();
}

uint64_t archive_read_support_format_zip()
{
  return MEMORY[0x1E0DE3F90]();
}

uint64_t archive_write_close()
{
  return MEMORY[0x1E0DE3FC0]();
}

uint64_t archive_write_data()
{
  return MEMORY[0x1E0DE3FC8]();
}

uint64_t archive_write_data_block()
{
  return MEMORY[0x1E0DE3FD0]();
}

uint64_t archive_write_disk_new()
{
  return MEMORY[0x1E0DE3FD8]();
}

uint64_t archive_write_disk_set_options()
{
  return MEMORY[0x1E0DE3FE0]();
}

uint64_t archive_write_disk_set_standard_lookup()
{
  return MEMORY[0x1E0DE3FE8]();
}

uint64_t archive_write_finish_entry()
{
  return MEMORY[0x1E0DE3FF8]();
}

uint64_t archive_write_free()
{
  return MEMORY[0x1E0DE4000]();
}

uint64_t archive_write_header()
{
  return MEMORY[0x1E0DE4008]();
}

uint64_t archive_write_new()
{
  return MEMORY[0x1E0DE4010]();
}

uint64_t archive_write_open_fd()
{
  return MEMORY[0x1E0DE4020]();
}

uint64_t archive_write_set_format_option()
{
  return MEMORY[0x1E0DE4048]();
}

uint64_t archive_write_set_format_zip()
{
  return MEMORY[0x1E0DE4068]();
}

long double asin(long double __x)
{
  long double result;

  MEMORY[0x1E0C81598](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x1E0C81620](__y, __x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t cc_clear()
{
  return MEMORY[0x1E0C81868]();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return MEMORY[0x1E0C818B0]();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return MEMORY[0x1E0C818B8]();
}

uint64_t ccder_decode_bitstring()
{
  return MEMORY[0x1E0C81A50]();
}

uint64_t ccder_decode_oid()
{
  return MEMORY[0x1E0C81A78]();
}

uint64_t ccder_decode_sequence_tl()
{
  return MEMORY[0x1E0C81A98]();
}

uint64_t ccdigest()
{
  return MEMORY[0x1E0C81BD0]();
}

uint64_t ccec_compact_import_pub()
{
  return MEMORY[0x1E0C81C18]();
}

uint64_t ccec_cp_256()
{
  return MEMORY[0x1E0C81C60]();
}

uint64_t ccec_der_import_priv()
{
  return MEMORY[0x1E0C81CA8]();
}

uint64_t ccecies_decrypt_gcm()
{
  return MEMORY[0x1E0C81E28]();
}

uint64_t ccecies_decrypt_gcm_plaintext_size()
{
  return MEMORY[0x1E0C81E38]();
}

uint64_t ccecies_decrypt_gcm_setup()
{
  return MEMORY[0x1E0C81E40]();
}

uint64_t ccecies_encrypt_gcm()
{
  return MEMORY[0x1E0C81E48]();
}

uint64_t ccecies_encrypt_gcm_ciphertext_size()
{
  return MEMORY[0x1E0C81E50]();
}

uint64_t ccecies_encrypt_gcm_setup()
{
  return MEMORY[0x1E0C81E60]();
}

uint64_t ccoid_equal()
{
  return MEMORY[0x1E0C82280]();
}

uint64_t ccrng()
{
  return MEMORY[0x1E0C822A8]();
}

uint64_t ccsha256_di()
{
  return MEMORY[0x1E0C823E0]();
}

uint64_t cczp_bitlen()
{
  return MEMORY[0x1E0C825C8]();
}

int chmod(const char *a1, mode_t a2)
{
  return MEMORY[0x1E0C82638](a1, a2);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1E0DE7A70](cls, outCount);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1E0DE7A80](cls, outCount);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1E0DE7AA8](cls, name);
}

const char *__cdecl class_getName(Class cls)
{
  return (const char *)MEMORY[0x1E0DE7AC8](cls);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t ct_green_tea_logger_create()
{
  return MEMORY[0x1E0DDFE88]();
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82BC8](when, queue, block);
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
  MEMORY[0x1E0C82BE8](queue);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1E0C82D08](key);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D38](group, queue, block);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E28](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
  MEMORY[0x1E0C82E80](queue, key, context, destructor);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x1E0C82EA0](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
  MEMORY[0x1E0C82F08](object, queue);
}

void dispatch_source_cancel(dispatch_source_t source)
{
  MEMORY[0x1E0C82F10](source);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1E0C82F20](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F48](source, handler);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x1E0C82F58](source, handler);
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
  MEMORY[0x1E0C82F78](source, start, interval, leeway);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1E0C82FB8](when, delta);
}

dispatch_time_t dispatch_walltime(const timespec *when, int64_t delta)
{
  return MEMORY[0x1E0C82FC8](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1E0C83580](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

const char *getprogname(void)
{
  return (const char *)MEMORY[0x1E0C83778]();
}

passwd *__cdecl getpwuuid(uuid_t a1)
{
  return (passwd *)MEMORY[0x1E0C837B0](a1);
}

uid_t getuid(void)
{
  return MEMORY[0x1E0C83828]();
}

const char *__cdecl ivar_getName(Ivar v)
{
  return (const char *)MEMORY[0x1E0DE7B28](v);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1E0C83A20]();
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1E0C83BA8](a1);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1E0C83C50]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1E0C83CB0](msg, *(_QWORD *)&option, *(_QWORD *)&send_size, *(_QWORD *)&rcv_size, *(_QWORD *)&rcv_name, *(_QWORD *)&timeout, *(_QWORD *)&notify);
}

void mach_msg_destroy(mach_msg_header_t *a1)
{
  MEMORY[0x1E0C83CC0](a1);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1E0C83DB8](info);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1E0C83EE0](ptr);
}

void *__cdecl malloc_type_aligned_alloc(size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF0](alignment, size, type_id);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int mbr_uid_to_uuid(uid_t uid, uuid_t uu)
{
  return MEMORY[0x1E0C84020](*(_QWORD *)&uid, uu);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

objc_method_description *__cdecl method_getDescription(Method m)
{
  return (objc_method_description *)MEMORY[0x1E0DE7B60](m);
}

void mig_dealloc_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C840E8](*(_QWORD *)&reply_port);
}

mach_port_t mig_get_reply_port(void)
{
  return MEMORY[0x1E0C84100]();
}

void mig_put_reply_port(mach_port_t reply_port)
{
  MEMORY[0x1E0C84110](*(_QWORD *)&reply_port);
}

time_t mktime(tm *a1)
{
  return MEMORY[0x1E0C841C8](a1);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

uint64_t mobileactivationErrorHasDomainAndErrorCode()
{
  return MEMORY[0x1E0D1D1C8]();
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x1E0C843D8](*(_QWORD *)&token);
}

uint32_t notify_get_state(int token, uint64_t *state64)
{
  return MEMORY[0x1E0C843E8](*(_QWORD *)&token, state64);
}

uint32_t notify_post(const char *name)
{
  return MEMORY[0x1E0C843F8](name);
}

uint32_t notify_register_check(const char *name, int *out_token)
{
  return MEMORY[0x1E0C84400](name, out_token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x1E0C84408](name, out_token, queue, handler);
}

uint32_t notify_set_state(int token, uint64_t state64)
{
  return MEMORY[0x1E0C84428](*(_QWORD *)&token, state64);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1E0DE7BB0](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

const char **__cdecl objc_copyClassNamesForImage(const char *image, unsigned int *outCount)
{
  return (const char **)MEMORY[0x1E0DE7C10](image, outCount);
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x1E0DE7C38](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_rethrow(void)
{
  MEMORY[0x1E0DE7C98]();
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1E0DE7CA8](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1E0DE7CE0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D20](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1E0DE7D50]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x1E0DE7D58]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x1E0DE7F40](object, key, value, policy);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F88](self, _cmd, newValue, offset);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7F90](self, _cmd, newValue, offset);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x1E0DE7FA0](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

void objc_terminate(void)
{
  MEMORY[0x1E0DE7FD8]();
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7FE0](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1E0C84920](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1E0C84928](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1E0C84930](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1E0C84970]();
}

void os_unfair_lock_assert_not_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84988](lock);
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
  MEMORY[0x1E0C84990](lock);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x1E0C849D8]();
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x1E0C84A00]();
}

int posix_spawn(pid_t *a1, const char *a2, const posix_spawn_file_actions_t *a3, const posix_spawnattr_t *a4, char *const __argv[], char *const __envp[])
{
  return MEMORY[0x1E0C84B38](a1, a2, a3, a4, __argv, __envp);
}

int posix_spawnattr_destroy(posix_spawnattr_t *a1)
{
  return MEMORY[0x1E0C84B70](a1);
}

int posix_spawnattr_init(posix_spawnattr_t *a1)
{
  return MEMORY[0x1E0C84B78](a1);
}

int posix_spawnattr_setflags(posix_spawnattr_t *a1, __int16 a2)
{
  return MEMORY[0x1E0C84B90](a1, a2);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1E0C84BD0](a1);
}

char *__cdecl property_copyAttributeValue(objc_property_t property, const char *attributeName)
{
  return (char *)MEMORY[0x1E0DE8060](property, attributeName);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1E0DE8070](property);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl realpath_DARWIN_EXTSN(const char *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C85040](a1, a2);
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x1E0C85418](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1E0C85558](a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strptime_l(const char *a1, const char *a2, tm *a3, locale_t a4)
{
  return (char *)MEMORY[0x1E0C855E0](a1, a2, a3, a4);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return (char *)MEMORY[0x1E0C85650](__str, __sep, __lasts);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85698](__str, __endptr, *(_QWORD *)&__base);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1E0DEEA98]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1E0DEEAA8]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1E0DEEAB0]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x1E0DEEAB8]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x1E0DEEAC0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1E0DEEAD8]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1E0DEEAE0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1E0DEEAE8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1E0DEEAF0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1E0DEEAF8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1E0DEEB08]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1E0DEEB10]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1E0DEEB18]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1E0DEEB20]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1E0DEEB28]();
}

uint64_t swift_continuation_await()
{
  return MEMORY[0x1E0DF0F88]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1E0DF0F90]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1E0DF0F98]();
}

uint64_t swift_continuation_throwingResume()
{
  return MEMORY[0x1E0DF0FA0]();
}

uint64_t swift_continuation_throwingResumeWithError()
{
  return MEMORY[0x1E0DF0FA8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1E0DEEB50]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x1E0DEEB60]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1E0DEEB68]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1E0DEEB80]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1E0DEEBA8]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1E0DEEBB8]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1E0DEEBE0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1E0DEEBF0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1E0DEEBF8]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1E0DEEC00]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1E0DEEC08]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1E0DEEC18]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1E0DEEC40]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEC48]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1E0DEEC50]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1E0DEEC78]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1E0DEECB0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1E0DEECB8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1E0DEECC8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1E0DEECD8]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1E0DEECE0]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1E0DEECF8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1E0DEED08]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1E0DEED20]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1E0DEED38]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1E0DEED40]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1E0DEED50]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1E0DEED58]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1E0DEED60]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1E0DEED70]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1E0DEED78]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1E0DEED88]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1E0DEEDC8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1E0DEEDD0]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x1E0DEEDE0]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1E0DEEDE8]();
}

uint64_t swift_once()
{
  return MEMORY[0x1E0DEEE00]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x1E0DEEE08]();
}

uint64_t swift_release()
{
  return MEMORY[0x1E0DEEE30]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1E0DEEE38]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1E0DEEE48]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1E0DEEE50]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1E0DEEE70]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1E0DEEE78]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1E0DEEE80]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1E0DEEE90]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1E0DEEE98]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x1E0DEEEA0]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1E0DF1000]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1E0DF1008]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1E0DF1010]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x1E0DF1050]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1E0DEEEC0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1E0DEEEC8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1E0DEEED0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1E0DEEED8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1E0DEEF20]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1E0DEEF38]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1E0DEEF40]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1E0DEEF48]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1E0DEEF78]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1E0DEEF98]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1E0DEEFA0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1E0DEEFA8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1E0DEEFC0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1E0DEEFC8]();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1E0C85798](a1, *(_QWORD *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int uuid_compare(const uuid_t uu1, const uuid_t uu2)
{
  return MEMORY[0x1E0C85A08](uu1, uu2);
}

void uuid_copy(uuid_t dst, const uuid_t src)
{
  MEMORY[0x1E0C85A10](dst, src);
}

void uuid_generate_random(uuid_t out)
{
  MEMORY[0x1E0C85A20](out);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1E0C85A38](in, uu);
}

void uuid_unparse_upper(const uuid_t uu, uuid_string_t out)
{
  MEMORY[0x1E0C85A50](uu, out);
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CC00](buf, height, width, *(_QWORD *)&pixelBits, *(_QWORD *)&flags);
}

vImage_Error vImageBuffer_InitWithCGImage(vImage_Buffer *buf, vImage_CGImageFormat *format, const CGFloat *backgroundColor, CGImageRef image, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CC28](buf, format, backgroundColor, image, *(_QWORD *)&flags);
}

vImage_Error vImageConvert_AnyToAny(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8CEF0](converter, srcs, dests, tempBuffer, *(_QWORD *)&flags);
}

vImageConverterRef vImageConverter_CreateWithCGImageFormat(const vImage_CGImageFormat *srcFormat, const vImage_CGImageFormat *destFormat, const CGFloat *backgroundColor, vImage_Flags flags, vImage_Error *error)
{
  return (vImageConverterRef)MEMORY[0x1E0C8D120](srcFormat, destFormat, backgroundColor, *(_QWORD *)&flags, error);
}

unint64_t vImageConverter_GetNumberOfDestinationBuffers(const vImageConverterRef converter)
{
  return MEMORY[0x1E0C8D138](converter);
}

unint64_t vImageConverter_GetNumberOfSourceBuffers(const vImageConverterRef converter)
{
  return MEMORY[0x1E0C8D140](converter);
}

vImage_Error vImageConverter_MustOperateOutOfPlace(const vImageConverterRef converter, const vImage_Buffer *srcs, const vImage_Buffer *dests, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D150](converter, srcs, dests, *(_QWORD *)&flags);
}

void vImageConverter_Release(vImageConverterRef converter)
{
  MEMORY[0x1E0C8D160](converter);
}

vImage_Error vImageConvolve_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, const float *kernel, uint32_t kernel_height, uint32_t kernel_width, const Pixel_ARGB_16F backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1A8](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, kernel, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D1E0](src, dest, pixelSize, *(_QWORD *)&flags);
}

vImage_Error vImageMatrixMultiply_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, const float matrix[16], const float *pre_bias, const float *post_bias, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D420](src, dest, matrix, pre_bias, post_bias, *(_QWORD *)&flags);
}

vImage_Error vImageRotate90_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16F backColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D648](src, dest, rotationConstant, backColor, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6D8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

vImage_Error vImageTentConvolve_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImagePixelCount srcOffsetToROI_X, vImagePixelCount srcOffsetToROI_Y, uint32_t kernel_height, uint32_t kernel_width, const Pixel_8888 backgroundColor, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D790](src, dest, tempBuffer, srcOffsetToROI_X, srcOffsetToROI_Y, *(_QWORD *)&kernel_height, *(_QWORD *)&kernel_width, backgroundColor);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1E0C85A80](*(_QWORD *)&target_task, address, size, *(_QWORD *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1E0C85A98](*(_QWORD *)&target_task, address, size);
}

BOOLean_t voucher_mach_msg_set(mach_msg_header_t *msg)
{
  return MEMORY[0x1E0C85B60](msg);
}

pid_t waitpid(pid_t a1, int *a2, int a3)
{
  return MEMORY[0x1E0C85BD0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

xpc_object_t xpc_activity_copy_criteria(xpc_activity_t activity)
{
  return (xpc_object_t)MEMORY[0x1E0C85D80](activity);
}

xpc_activity_state_t xpc_activity_get_state(xpc_activity_t activity)
{
  return MEMORY[0x1E0C85D90](activity);
}

void xpc_activity_register(const char *identifier, xpc_object_t criteria, xpc_activity_handler_t handler)
{
  MEMORY[0x1E0C85D98](identifier, criteria, handler);
}

void xpc_activity_set_criteria(xpc_activity_t activity, xpc_object_t criteria)
{
  MEMORY[0x1E0C85DB0](activity, criteria);
}

BOOL xpc_activity_set_state(xpc_activity_t activity, xpc_activity_state_t state)
{
  return MEMORY[0x1E0C85DB8](activity, state);
}

void xpc_activity_unregister(const char *identifier)
{
  MEMORY[0x1E0C85DD0](identifier);
}

uint64_t xpc_connection_set_non_launching()
{
  return MEMORY[0x1E0C860A0]();
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1E0C86178](bytes, length);
}

const void *__cdecl xpc_data_get_bytes_ptr(xpc_object_t xdata)
{
  return (const void *)MEMORY[0x1E0C86198](xdata);
}

size_t xpc_data_get_length(xpc_object_t xdata)
{
  return MEMORY[0x1E0C861A8](xdata);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1E0C861F0](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1E0C86208](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1E0C862E0](xdict, key);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
  MEMORY[0x1E0C86310](xdict, key, value);
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
  MEMORY[0x1E0C86360](xdict, key, value);
}

void xpc_dictionary_set_string(xpc_object_t xdict, const char *key, const char *string)
{
  MEMORY[0x1E0C86390](xdict, key, string);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
  MEMORY[0x1E0C863B8](xdict, key, value);
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1E0C86420](object1, object2);
}

xpc_object_t xpc_fd_create(int fd)
{
  return (xpc_object_t)MEMORY[0x1E0C864A0](*(_QWORD *)&fd);
}

int xpc_fd_dup(xpc_object_t xfd)
{
  return MEMORY[0x1E0C864B0](xfd);
}

uint64_t xpc_shmem_create_readonly()
{
  return MEMORY[0x1E0C866F8]();
}

size_t xpc_shmem_map(xpc_object_t xshmem, void **region)
{
  return MEMORY[0x1E0C86700](xshmem, region);
}

