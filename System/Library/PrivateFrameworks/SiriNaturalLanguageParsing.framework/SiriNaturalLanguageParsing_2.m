void sub_1C22743A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v37;
  void *v38;
  void **v39;

  v39 = (void **)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v39);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&v38);
  _Unwind_Resume(a1);
}

void sub_1C22744C0()
{
  JUMPOUT(0x1C22744FCLL);
}

void sub_1C22744C8(_Unwind_Exception *a1)
{
  uint64_t v2;

  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((snlp::ssu::matcher::SSUAppInfo *)&v2);
  _Unwind_Resume(a1);
}

void sub_1C22744D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  void **v25;

  while (1)
  {
    if (*((char *)v25 - 1) < 0)
      operator delete(*(v25 - 3));
    v25 -= 3;
    if (v25 == (void **)&a25)
      JUMPOUT(0x1C22744F4);
  }
}

void nlv4_inference_orchestrator::trees::split(std::string *a1, std::string *__str, const void **a3)
{
  const void **v3;
  std::string *v5;
  int64_t v6;
  char v7;
  const std::string::value_type *v8;
  std::string *v9;
  std::string::size_type size;
  int64_t v11;
  std::string::size_type v12;
  int64_t v13;
  int64_t v14;
  std::string *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  std::string *v19;
  const void *v20;
  char *v21;
  int v22;
  int64_t v23;
  int64_t v24;
  char *v25;
  char *v26;
  std::string *v27;
  char *v28;
  int v29;
  std::string *v30;
  int64_t v31;
  char *v32;
  std::string *v33;
  char *v34;
  char *v35;
  std::string *__s;
  std::string v39;
  const char *v40;
  std::string v41;
  std::string v42;
  char v43;

  v3 = a3;
  v5 = a1;
  v6 = (int64_t)a3[1];
  v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v8 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];
  if (v7 >= 0)
    v9 = __str;
  else
    v9 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if (v6)
  {
    __s = v9;
    size = __str->__r_.__value_.__l.__size_;
    if (v7 >= 0)
      v11 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    else
      v11 = __str->__r_.__value_.__l.__size_;
    if (v11 >= v6)
    {
      v19 = v9;
      v20 = *a3;
      v21 = (char *)v9 + v11;
      v22 = *(char *)*a3;
      v23 = v11;
      do
      {
        v24 = v23 - v6;
        if (v24 == -1)
          break;
        v25 = (char *)memchr(v19, v22, v24 + 1);
        if (!v25)
          break;
        v26 = v25;
        if (!memcmp(v25, v20, v6))
        {
          if (v26 == v21 || v26 - (char *)__s == -1)
            break;
          v33 = __s;
          do
          {
            if (v11 - v6 == -1)
              break;
            v34 = (char *)memchr(v33, v22, v11 - v6 + 1);
            if (!v34)
              break;
            v35 = v34;
            if (!memcmp(v34, v20, v6))
              goto LABEL_60;
            v33 = (std::string *)(v35 + 1);
            v11 = v21 - (v35 + 1);
          }
          while (v11 >= v6);
          v35 = v21;
LABEL_60:
          if (v35 == v21)
            v12 = -1;
          else
            v12 = v35 - (char *)__s;
          v5 = a1;
          v3 = a3;
          goto LABEL_12;
        }
        v19 = (std::string *)(v26 + 1);
        v23 = v21 - (v26 + 1);
      }
      while (v23 >= v6);
    }
    if (v7 < 0)
      std::string::__init_copy_ctor_external(&v39, v8, size);
    else
      v39 = *__str;
    *a1 = v39;
    memset(&v39, 0, sizeof(v39));
    v40 = "";
    std::string::basic_string[abi:ne180100]<0>(a1[1].__r_.__value_.__r.__words, "");
  }
  else
  {
    v12 = 0;
LABEL_12:
    std::string::basic_string(&v42, __str, 0, v12, (std::allocator<char> *)&v41);
    nlv4_inference_orchestrator::trees::trimWhitespace(&v39, &v42);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v13 = (int64_t)v3[1];
    v14 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((v14 & 0x80u) == 0)
      v15 = __str;
    else
      v15 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if (v13)
    {
      if ((v14 & 0x80u) != 0)
        v14 = __str->__r_.__value_.__l.__size_;
      v16 = (char *)v15 + v14;
      if (v14 >= v13)
      {
        v28 = (char *)*v3;
        v29 = *v28;
        v30 = v15;
        do
        {
          v31 = v14 - v13;
          if (v31 == -1)
            break;
          v32 = (char *)memchr(v30, v29, v31 + 1);
          if (!v32)
            break;
          v17 = v32;
          if (!memcmp(v32, v28, v13))
            goto LABEL_22;
          v30 = (std::string *)(v17 + 1);
          v14 = v16 - (v17 + 1);
        }
        while (v14 >= v13);
      }
      v17 = v16;
LABEL_22:
      v18 = v17 - (char *)v15;
      if (v17 == v16)
        v18 = -1;
    }
    else
    {
      v18 = 0;
    }
    std::string::basic_string(&v41, __str, v13 + v18, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    nlv4_inference_orchestrator::trees::trimWhitespace(&v42, &v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(v5, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    else
      *v5 = v39;
    v27 = v5 + 1;
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v27, v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
    }
    else
    {
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
      v5[1].__r_.__value_.__r.__words[2] = v42.__r_.__value_.__r.__words[2];
    }
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1C2274824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 + 23) < 0)
    operator delete(*(void **)v32);
  if (a32 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)a1 = &off_1E7BE9D38;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  v8 = operator new();
  MEMORY[0x1C3BB9154](v8, a1 + 24);
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 1065353216;
  v9 = *(_QWORD *)(v8 + 88);
  v10 = operator new(0x10uLL);
  *(_DWORD *)v10 = -1;
  v10[1] = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v10 + 2;
  *(_QWORD *)(a1 + 104) = v10 + 2;
  return a1;
}

{
  return snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser(a1, a2, a3, a4);
}

void sub_1C2274990(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v5;

  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v2 + 112);
  v5 = *(void **)(v2 + 88);
  if (v5)
  {
    *(_QWORD *)(v2 + 96) = v5;
    operator delete(v5);
  }
  if (*(_BYTE *)(v2 + 72))
  {
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
  }
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::releaseGraph@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 40);
  *(_QWORD *)(this + 40) = 0;
  *a2 = v2;
  return this;
}

uint64_t snlp::common::text_uso_graph::UsoGraphTextTreeParser::getAliasMap(snlp::common::text_uso_graph::UsoGraphTextTreeParser *this)
{
  return (uint64_t)this + 112;
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  std::string::size_type v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  int v25;
  std::runtime_error *exception;
  unint64_t v27;
  std::runtime_error *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string::size_type size;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  __int128 v38;
  std::runtime_error *v39;
  std::string __p;
  uint64_t v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  char *v47;
  _QWORD *v48;

  v4 = *(unsigned int *)(a3 + 72);
  v3 = *(unsigned int *)(a3 + 76);
  if (v3 > v4
    || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3) < v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v27 = v3;
    v28 = exception;
    std::to_string(&v43, v27);
    v29 = std::string::insert(&v43, 0, "Token indices out of range: [");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v44, ", ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v42, v4);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v33 = &v42;
    else
      v33 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      size = v42.__r_.__value_.__l.__size_;
    v35 = std::string::append(&v45, (const std::string::value_type *)v33, size);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    v37 = std::string::append(&__p, ")");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v28, &v46);
    v28->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 40), (unsigned __int8 *)a2))
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v41 = a3;
    v9 = v8 + 24 * v3;
    v12 = *(_QWORD *)(v9 + 8);
    v11 = (uint64_t *)(v9 + 8);
    v10 = v12;
    v13 = v11[1];
    if (v12 >= v13)
    {
      v15 = (uint64_t *)(v8 + 24 * v3);
      v16 = (uint64_t)(v10 - *v15) >> 5;
      v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v18 = v13 - *v15;
      if (v18 >> 4 > v17)
        v17 = v18 >> 4;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v17;
      v48 = v11 + 1;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v19);
      v21 = (std::string::size_type)&v20[32 * v16];
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
      v46.__r_.__value_.__l.__size_ = v21;
      v47 = &v20[32 * v22];
      v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v21 = v23;
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)(v21 + 24) = v41;
      v46.__r_.__value_.__r.__words[2] = v21 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v15, &v46);
      v24 = *v11;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v46);
      v25 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *v11 = v24;
      if (v25 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v10 = v14;
      *(_QWORD *)(v10 + 24) = v41;
      *v11 = v10 + 32;
    }
  }
  else if ((_DWORD)v3 != (_DWORD)v4)
  {
    if (*(_DWORD *)a1 == 1)
    {
      nlv4_inference_orchestrator::span_matching::TagBucketList::addBILOUTags(a1, a2, v3, v4, a3);
    }
    else
    {
      if (*(_DWORD *)a1)
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v46, "Unknown LabelScheme observed");
        std::runtime_error::runtime_error(v39, &v46);
        v39->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
      }
      nlv4_inference_orchestrator::span_matching::TagBucketList::addBIOTags(a1, a2, v3, v4, a3);
    }
  }
}

void sub_1C2274DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  int v41;
  uint64_t v42;

  if (*(char *)(v42 - 73) < 0)
    operator delete(*(void **)(v42 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
  {
    operator delete(a22);
    if ((v41 & 1) == 0)
LABEL_16:
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v40);
  goto LABEL_16;
}

uint64_t std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        v4 = *(void ***)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addBIOTags(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  const void **v56;
  std::string v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  unint64_t *v63;
  _QWORD v64[3];

  v64[2] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a1 + 16);
  v56 = (const void **)(a1 + 200);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v58, (const void **)(a1 + 80), (const void **)(a1 + 200));
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = (const std::string::value_type *)a2;
  else
    v11 = *(const std::string::value_type **)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  v13 = std::string::append(&v58, v11, v12);
  v14 = v13->__r_.__value_.__r.__words[0];
  v64[0] = v13->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
  v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v16 = v9 + 24 * a3;
  v19 = *(_QWORD *)(v16 + 16);
  v17 = (unint64_t *)(v16 + 16);
  v18 = v19;
  v21 = (uint64_t *)(v17 - 1);
  v20 = *(v17 - 1);
  if (v20 >= v19)
  {
    v24 = (uint64_t *)(v9 + 24 * a3);
    v25 = (uint64_t)(v20 - *v24) >> 5;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v27 = v18 - *v24;
    if (v27 >> 4 > v26)
      v26 = v27 >> 4;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
      v28 = 0x7FFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    v63 = v17;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v28);
    v30 = &v29[32 * v25];
    v59 = v29;
    v60 = v30;
    v62 = &v29[32 * v31];
    v32 = v64[0];
    *(_QWORD *)v30 = v14;
    *((_QWORD *)v30 + 1) = v32;
    *(_QWORD *)(v30 + 15) = *(_QWORD *)((char *)v64 + 7);
    v30[23] = v15;
    *((_QWORD *)v30 + 3) = a5;
    v61 = v30 + 32;
    std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v24, &v59);
    v23 = *v21;
    std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v59);
  }
  else
  {
    v22 = v64[0];
    *(_QWORD *)v20 = v14;
    *(_QWORD *)(v20 + 8) = v22;
    *(_QWORD *)(v20 + 15) = *(_QWORD *)((char *)v64 + 7);
    *(_BYTE *)(v20 + 23) = v15;
    *(_QWORD *)(v20 + 24) = a5;
    v23 = v20 + 32;
    *v21 = v20 + 32;
  }
  *v21 = v23;
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (a3 + 1 < a4)
  {
    v33 = ~a3 + a4;
    v34 = 24 * a3;
    do
    {
      v35 = *(_QWORD *)(a1 + 16);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v58, (const void **)(a1 + 104), v56);
      v36 = *(char *)(a2 + 23);
      if (v36 >= 0)
        v37 = (const std::string::value_type *)a2;
      else
        v37 = *(const std::string::value_type **)a2;
      if (v36 >= 0)
        v38 = *(unsigned __int8 *)(a2 + 23);
      else
        v38 = *(_QWORD *)(a2 + 8);
      v39 = std::string::append(&v58, v37, v38);
      v40 = v39->__r_.__value_.__r.__words[0];
      v64[0] = v39->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v64 + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
      v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      v42 = v35 + v34;
      v43 = *(_QWORD *)(v35 + v34 + 32);
      v44 = (unint64_t *)(v35 + v34 + 40);
      if (v43 >= *v44)
      {
        v47 = (uint64_t *)(v35 + v34 + 24);
        v48 = (uint64_t)(v43 - *v47) >> 5;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 59)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v50 = *v44 - *v47;
        if (v50 >> 4 > v49)
          v49 = v50 >> 4;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFE0)
          v51 = 0x7FFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        v63 = v44;
        v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v51);
        v53 = &v52[32 * v48];
        v59 = v52;
        v60 = v53;
        v62 = &v52[32 * v54];
        v55 = v64[0];
        *(_QWORD *)v53 = v40;
        *((_QWORD *)v53 + 1) = v55;
        *(_QWORD *)(v53 + 15) = *(_QWORD *)((char *)v64 + 7);
        v53[23] = v41;
        *((_QWORD *)v53 + 3) = a5;
        v61 = v53 + 32;
        std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v47, &v59);
        v46 = *(_QWORD *)(v42 + 32);
        std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v59);
      }
      else
      {
        v45 = v64[0];
        *(_QWORD *)v43 = v40;
        *(_QWORD *)(v43 + 8) = v45;
        *(_QWORD *)(v43 + 15) = *(_QWORD *)((char *)v64 + 7);
        *(_BYTE *)(v43 + 23) = v41;
        *(_QWORD *)(v43 + 24) = a5;
        v46 = v43 + 32;
        *(_QWORD *)(v42 + 32) = v43 + 32;
      }
      *(_QWORD *)(v42 + 32) = v46;
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v58.__r_.__value_.__l.__data_);
      v34 += 24;
      --v33;
    }
    while (v33);
  }
}

void sub_1C22752AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  int v18;

  if (v18 < 0)
    operator delete(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::addBILOUTags(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const void **v11;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  int v27;
  const std::string::value_type *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  char v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  const void **v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  const std::string::value_type *v62;
  std::string::size_type v63;
  std::string *v64;
  std::string::size_type v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const std::string::value_type *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string::size_type v86;
  char v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  std::string v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  unint64_t *v114;
  _QWORD v115[3];

  v115[2] = *MEMORY[0x1E0C80C00];
  v8 = a4 - a3;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (uint64_t *)(v9 + 24 * a3);
  v11 = (const void **)(a1 + 200);
  if (a4 - a3 == 1)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(a1 + 176), v11);
    v12 = *(char *)(a2 + 23);
    if (v12 >= 0)
      v13 = (const std::string::value_type *)a2;
    else
      v13 = *(const std::string::value_type **)a2;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a2 + 23);
    else
      v14 = *(_QWORD *)(a2 + 8);
    v15 = std::string::append(&v109, v13, v14);
    v16 = v15->__r_.__value_.__r.__words[0];
    v115[0] = v15->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
    v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v18 = v9 + 24 * a3;
    v21 = *(_QWORD *)(v18 + 16);
    v19 = (unint64_t *)(v18 + 16);
    v20 = v21;
    v23 = (uint64_t *)(v19 - 1);
    v22 = *(v19 - 1);
    if (v22 >= v21)
    {
      v42 = (uint64_t)(v22 - *v10) >> 5;
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v44 = v20 - *v10;
      if (v44 >> 4 > v43)
        v43 = v44 >> 4;
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFE0)
        v45 = 0x7FFFFFFFFFFFFFFLL;
      else
        v45 = v43;
      v114 = v19;
      v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v45);
      v47 = &v46[32 * v42];
      v110 = v46;
      v111 = v47;
      v113 = &v46[32 * v48];
      v49 = v115[0];
      *(_QWORD *)v47 = v16;
      *((_QWORD *)v47 + 1) = v49;
      *(_QWORD *)(v47 + 15) = *(_QWORD *)((char *)v115 + 7);
      v47[23] = v17;
      *((_QWORD *)v47 + 3) = a5;
      v112 = v47 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v10, &v110);
      v25 = *v23;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      v24 = v115[0];
      *(_QWORD *)v22 = v16;
      *(_QWORD *)(v22 + 8) = v24;
      *(_QWORD *)(v22 + 15) = *(_QWORD *)((char *)v115 + 7);
      *(_BYTE *)(v22 + 23) = v17;
      *(_QWORD *)(v22 + 24) = a5;
      v25 = v22 + 32;
      *v23 = v22 + 32;
    }
    *v23 = v25;
  }
  else
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(a1 + 80), v11);
    v107 = v10;
    v27 = *(char *)(a2 + 23);
    if (v27 >= 0)
      v28 = (const std::string::value_type *)a2;
    else
      v28 = *(const std::string::value_type **)a2;
    if (v27 >= 0)
      v29 = *(unsigned __int8 *)(a2 + 23);
    else
      v29 = *(_QWORD *)(a2 + 8);
    v30 = std::string::append(&v109, v28, v29);
    v31 = v30->__r_.__value_.__r.__words[0];
    v115[0] = v30->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
    v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v33 = v9 + 24 * a3;
    v36 = *(_QWORD *)(v33 + 16);
    v34 = (unint64_t *)(v33 + 16);
    v35 = v36;
    v38 = (uint64_t *)(v34 - 1);
    v37 = *(v34 - 1);
    v106 = a1;
    if (v37 >= v36)
    {
      v50 = (uint64_t)(v37 - *v107) >> 5;
      v51 = v50 + 1;
      if ((unint64_t)(v50 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v39 = v11;
      v52 = v35 - *v107;
      if (v52 >> 4 > v51)
        v51 = v52 >> 4;
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0)
        v53 = 0x7FFFFFFFFFFFFFFLL;
      else
        v53 = v51;
      v114 = v34;
      v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v53);
      v55 = &v54[32 * v50];
      v110 = v54;
      v111 = v55;
      v113 = &v54[32 * v56];
      v57 = v115[0];
      *(_QWORD *)v55 = v31;
      *((_QWORD *)v55 + 1) = v57;
      *(_QWORD *)(v55 + 15) = *(_QWORD *)((char *)v115 + 7);
      v55[23] = v32;
      *((_QWORD *)v55 + 3) = a5;
      v112 = v55 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v107, &v110);
      v41 = *v38;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      v39 = v11;
      v40 = v115[0];
      *(_QWORD *)v37 = v31;
      *(_QWORD *)(v37 + 8) = v40;
      *(_QWORD *)(v37 + 15) = *(_QWORD *)((char *)v115 + 7);
      *(_BYTE *)(v37 + 23) = v32;
      *(_QWORD *)(v37 + 24) = a5;
      v41 = v37 + 32;
      *v38 = v37 + 32;
    }
    *v38 = v41;
    if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__r_.__value_.__l.__data_);
    v105 = a4 - 1;
    if (a3 + 1 < (unint64_t)(a4 - 1))
    {
      v58 = v8 - 2;
      v59 = 24 * a3;
      do
      {
        v60 = *(_QWORD *)(v106 + 16);
        std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(v106 + 104), v39);
        v61 = *(char *)(a2 + 23);
        if (v61 >= 0)
          v62 = (const std::string::value_type *)a2;
        else
          v62 = *(const std::string::value_type **)a2;
        if (v61 >= 0)
          v63 = *(unsigned __int8 *)(a2 + 23);
        else
          v63 = *(_QWORD *)(a2 + 8);
        v64 = std::string::append(&v109, v62, v63);
        v65 = v64->__r_.__value_.__r.__words[0];
        v115[0] = v64->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
        v66 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
        v64->__r_.__value_.__l.__size_ = 0;
        v64->__r_.__value_.__r.__words[2] = 0;
        v64->__r_.__value_.__r.__words[0] = 0;
        v67 = v60 + v59;
        v68 = *(_QWORD *)(v60 + v59 + 32);
        v69 = (unint64_t *)(v60 + v59 + 40);
        if (v68 >= *v69)
        {
          v72 = (uint64_t *)(v60 + v59 + 24);
          v73 = (uint64_t)(v68 - *v72) >> 5;
          v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 59)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v75 = *v69 - *v72;
          if (v75 >> 4 > v74)
            v74 = v75 >> 4;
          if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFE0)
            v76 = 0x7FFFFFFFFFFFFFFLL;
          else
            v76 = v74;
          v114 = v69;
          v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v76);
          v78 = &v77[32 * v73];
          v110 = v77;
          v111 = v78;
          v113 = &v77[32 * v79];
          v80 = v115[0];
          *(_QWORD *)v78 = v65;
          *((_QWORD *)v78 + 1) = v80;
          *(_QWORD *)(v78 + 15) = *(_QWORD *)((char *)v115 + 7);
          v78[23] = v66;
          *((_QWORD *)v78 + 3) = a5;
          v112 = v78 + 32;
          std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v72, &v110);
          v71 = *(_QWORD *)(v67 + 32);
          std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
        }
        else
        {
          v70 = v115[0];
          *(_QWORD *)v68 = v65;
          *(_QWORD *)(v68 + 8) = v70;
          *(_QWORD *)(v68 + 15) = *(_QWORD *)((char *)v115 + 7);
          *(_BYTE *)(v68 + 23) = v66;
          *(_QWORD *)(v68 + 24) = a5;
          v71 = v68 + 32;
          *(_QWORD *)(v67 + 32) = v68 + 32;
        }
        *(_QWORD *)(v67 + 32) = v71;
        if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v109.__r_.__value_.__l.__data_);
        v59 += 24;
        --v58;
      }
      while (v58);
    }
    v81 = *(_QWORD *)(v106 + 16);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v109, (const void **)(v106 + 128), v39);
    v82 = *(char *)(a2 + 23);
    if (v82 >= 0)
      v83 = (const std::string::value_type *)a2;
    else
      v83 = *(const std::string::value_type **)a2;
    if (v82 >= 0)
      v84 = *(unsigned __int8 *)(a2 + 23);
    else
      v84 = *(_QWORD *)(a2 + 8);
    v85 = std::string::append(&v109, v83, v84);
    v86 = v85->__r_.__value_.__r.__words[0];
    v115[0] = v85->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v115 + 7) = *(std::string::size_type *)((char *)&v85->__r_.__value_.__r.__words[1] + 7);
    v87 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
    v85->__r_.__value_.__l.__size_ = 0;
    v85->__r_.__value_.__r.__words[2] = 0;
    v85->__r_.__value_.__r.__words[0] = 0;
    v88 = v81 + 24 * v105;
    v91 = *(_QWORD *)(v88 + 16);
    v89 = (unint64_t *)(v88 + 16);
    v90 = v91;
    v93 = (uint64_t *)(v89 - 1);
    v92 = *(v89 - 1);
    if (v92 >= v91)
    {
      v96 = (uint64_t *)(v81 + 24 * v105);
      v97 = (uint64_t)(v92 - *v96) >> 5;
      v98 = v97 + 1;
      if ((unint64_t)(v97 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v99 = v90 - *v96;
      if (v99 >> 4 > v98)
        v98 = v99 >> 4;
      if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFE0)
        v100 = 0x7FFFFFFFFFFFFFFLL;
      else
        v100 = v98;
      v114 = v89;
      v101 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v100);
      v102 = &v101[32 * v97];
      v110 = v101;
      v111 = v102;
      v113 = &v101[32 * v103];
      v104 = v115[0];
      *(_QWORD *)v102 = v86;
      *((_QWORD *)v102 + 1) = v104;
      *(_QWORD *)(v102 + 15) = *(_QWORD *)((char *)v115 + 7);
      v102[23] = v87;
      *((_QWORD *)v102 + 3) = a5;
      v112 = v102 + 32;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(v96, &v110);
      v95 = *v93;
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      v94 = v115[0];
      *(_QWORD *)v92 = v86;
      *(_QWORD *)(v92 + 8) = v94;
      *(_QWORD *)(v92 + 15) = *(_QWORD *)((char *)v115 + 7);
      *(_BYTE *)(v92 + 23) = v87;
      *(_QWORD *)(v92 + 24) = a5;
      v95 = v92 + 32;
      *v93 = v92 + 32;
    }
    *v93 = v95;
  }
  if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v109.__r_.__value_.__l.__data_);
}

void sub_1C22758CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  int v20;

  if (v20 < 0)
    operator delete(v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;

  for (result = a7; a3 != a5; a3 -= 32)
  {
    v8 = *(_OWORD *)(a3 - 32);
    *(_QWORD *)(result - 16) = *(_QWORD *)(a3 - 16);
    *(_OWORD *)(result - 32) = v8;
    *(_QWORD *)(a3 - 24) = 0;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 32) = 0;
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    result -= 32;
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  __int128 **v3;
  __int128 **v4;
  std::string *v5;
  _QWORD v6[3];
  char v7;
  std::string *v8;
  std::string *v9;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(__int128 ***)(this + 16);
  v4 = *(__int128 ***)(this + 24);
  if (v4 != v3)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](a2, 0xAAAAAAAAAAAAAAABLL * (v4 - v3));
    v8 = (std::string *)a2[1];
    v9 = v8;
    v6[0] = a2 + 2;
    v6[1] = &v8;
    v6[2] = &v9;
    v7 = 0;
    v5 = v8;
    do
    {
      v5->__r_.__value_.__r.__words[0] = 0;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(v5, *v3, v3[1], ((char *)v3[1] - (char *)*v3) >> 5);
      v5 = ++v9;
      v3 += 3;
    }
    while (v3 != v4);
    v7 = 1;
    this = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
    a2[1] = v5;
  }
  return this;
}

void sub_1C2275A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  char *result;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v3 = 3 * a2;
  result = (char *)operator new(24 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v3];
  return result;
}

void std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *words;
  std::string *v7;
  uint64_t v8;

  if (a4)
  {
    if (a4 >> 59)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    words = result->__r_.__value_.__r.__words;
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(a4);
    *words = v7;
    words[1] = v7;
    words[2] = (char *)v7 + 32 * v8;
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((uint64_t)(words + 2), a2, a3, v7);
    words[1] = result;
  }
  return result;
}

void sub_1C2275BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1C2275D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAD10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAD10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(uint64_t result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = (void **)result;
    v2 = (void **)(result + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    v2 = v1;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x1C3BB9B44](v1, 0x20C40A759441BLL);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAE00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAE00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAEF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAEF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, std::vector<std::string> *a3)
{
  unsigned __int16 v5;
  int v6;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)this + 5);
  }
  std::vector<std::string>::reserve(a3, 0);
  std::vector<std::string>::resize(a3, 0);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::string>>(void **result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = result;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x1C3BB9B44](v1, 0x20C40960023A9);
  }
  return result;
}

_QWORD *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>()
{
  _QWORD *result;
  _BYTE v1[144];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  result = (_QWORD *)MEMORY[0x1C3BB979C]();
  if ((*((_BYTE *)result + *(_QWORD *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v1, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v1);
  }
  return result;
}

void sub_1C2276124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAAB0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAAB0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<std::string>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA6C0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAF40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAF40;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  unsigned __int16 v5;
  int v6;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)this + 5);
  }
  std::vector<std::vector<unsigned long>>::reserve(a3, 0);
  std::vector<std::vector<unsigned long>>::resize(a3, 0);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(void **result)
{
  void **v1;

  if (result)
  {
    v1 = result;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

_QWORD *std::vector<std::vector<unsigned long>>::reserve(_QWORD *result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[2] - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 24 * v4;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(v2, v5);
    return (_QWORD *)std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<std::vector<unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  _QWORD v20[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 24 * a2;
      if (v4 != v15)
      {
        v16 = a1[1];
        do
        {
          v18 = *(void **)(v16 - 24);
          v16 -= 24;
          v17 = v18;
          if (v18)
          {
            *(_QWORD *)(v4 - 16) = v17;
            operator delete(v17);
          }
          v4 = v16;
        }
        while (v16 != v15);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3) >= v6)
    {
      v19 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v19);
      a1[1] = v4 + v19;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v20[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v10);
      v12 = &v11[24 * v5];
      v20[0] = v11;
      v20[1] = v12;
      v20[3] = &v11[24 * v13];
      v14 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v14);
      v20[2] = &v12[v14];
      std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v20);
      std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v20);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAFE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAFE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, void **a3)
{
  _QWORD *v5;
  unsigned __int16 v6;
  int v7;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v6);
  v5 = (_QWORD *)((char *)this + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v6 >= 4u)
  {
    v7 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v5);
  }
  std::vector<unsigned long>::reserve(a3, 0);
  std::vector<unsigned long>::resize((uint64_t)a3, 0);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

void **boost::serialization::access::destroy<std::vector<unsigned long>>(void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAB88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAB88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA798;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAAF8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAAF8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA708;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<std::vector<unsigned long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA9D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA9D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA5E8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA900;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA900;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA510;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectDebugInformation>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB170;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB170;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB260;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB260;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectDebugInformation>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB350;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB350;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, std::vector<std::string> *a3)
{
  std::vector<std::string>::size_type v5;
  std::string *begin;
  _QWORD *v7;
  std::string *v8;
  std::vector<std::string>::size_type __n;
  int v10;
  unsigned __int16 v11;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v11);
  v10 = 0;
  __n = 0;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &__n);
  if (v11 >= 4u)
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v10);
  std::vector<std::string>::reserve(a3, __n);
  v5 = __n;
  std::vector<std::string>::resize(a3, __n);
  if (v5)
  {
    begin = a3->__begin_;
    v7 = (_QWORD *)((char *)this + 40);
    do
    {
      --v5;
      v8 = begin + 1;
      boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(v7, begin);
      begin = v8;
    }
    while (v5);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB3A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB3A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::load_object_data(int a1, boost::archive::detail::basic_iarchive_impl **this, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int16 v9;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v9);
  v8 = 0;
  v7 = 0;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v7);
  if (v9 >= 4u)
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v8);
  std::vector<std::vector<unsigned long>>::reserve(a3, v7);
  v5 = v7;
  std::vector<std::vector<unsigned long>>::resize(a3, v7);
  if (v5)
  {
    v6 = *a3;
    do
    {
      --v5;
      boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
      boost::archive::detail::basic_iarchive::load_object(this, v6, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
      v6 += 24;
    }
    while (v5);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<std::vector<unsigned long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::vector<unsigned long>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB440;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB440;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::load_object_data(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  unint64_t v10;
  _WORD v11[72];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = (a3[1] - *a3) >> 3;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(a2, &v10);
  std::vector<unsigned long>::resize((uint64_t)a3, v10);
  v9 = 0;
  boost::archive::detail::basic_iarchive::get_library_version(a2, v11);
  if (v11[0] == 4 || (result = boost::archive::detail::basic_iarchive::get_library_version(a2, &v8), v8 == 5))
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>((_QWORD *)(a2 + 40), (uint64_t)&v9);
  v6 = *a3;
  if (*a3 != a3[1])
  {
    v7 = 8 * v10;
    result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a2 + 40) + 64))(*(_QWORD *)(a2 + 40), v6, 8 * v10);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v11, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v11);
    }
  }
  return result;
}

void sub_1C2277060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<unsigned long>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEADB0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEADB0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 48, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 48);
    if (v2)
    {
      *(_QWORD *)(v1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(_QWORD *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAF90;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAF90;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, void **a3)
{
  _QWORD *v5;
  unsigned __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v6);
  v5 = (_QWORD *)((char *)this + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v6 >= 4u)
  {
    v7 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v5);
  }
  std::vector<float>::reserve(a3, 0);
  std::vector<float>::resize(a3, 0);
}

void sub_1C2277384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

void **boost::serialization::access::destroy<std::vector<float>>(void **result)
{
  void **v1;
  void *v2;

  if (result)
  {
    v1 = result;
    v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::vector<float>::resize(_QWORD *a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;

  v3 = (char *)*a1;
  v4 = (char *)a1[1];
  v5 = (uint64_t)&v4[-*a1] >> 2;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v20 = &v3[4 * a2];
    goto LABEL_15;
  }
  v6 = a2 - v5;
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2];
  if (a2 - v5 <= (v8 - (uint64_t)v4) >> 2)
  {
    bzero(v4, 4 * v6);
    v20 = &v4[4 * v6];
LABEL_15:
    a1[1] = v20;
    return;
  }
  if (a2 >> 62)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v9 = v8 - (_QWORD)v3;
  v10 = v9 >> 1;
  if (v9 >> 1 <= a2)
    v10 = a2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
    v11 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7, v11);
  v13 = (char *)*a1;
  v14 = (char *)a1[1];
  v15 = &v12[4 * v5];
  v17 = &v12[4 * v16];
  bzero(v15, 4 * v6);
  v18 = &v15[4 * v6];
  while (v14 != v13)
  {
    v19 = *((_DWORD *)v14 - 1);
    v14 -= 4;
    *((_DWORD *)v15 - 1) = v19;
    v15 -= 4;
  }
  *a1 = v15;
  a1[1] = v18;
  a1[2] = v17;
  if (v13)
    operator delete(v13);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAB40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAB40;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<float>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA750;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<float>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA990;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA990;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA5A0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB210;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB210;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 48, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB3F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB3F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::load_object_data(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  int v9;
  unint64_t v10;
  _WORD v11[72];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = (a3[1] - *a3) >> 2;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override(a2, &v10);
  std::vector<float>::resize(a3, v10);
  v9 = 0;
  boost::archive::detail::basic_iarchive::get_library_version(a2, v11);
  if (v11[0] == 4 || (result = boost::archive::detail::basic_iarchive::get_library_version(a2, &v8), v8 == 5))
    result = boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned int>((_QWORD *)(a2 + 40), (uint64_t)&v9);
  v6 = *a3;
  if (*a3 != a3[1])
  {
    v7 = 4 * v10;
    result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(a2 + 40) + 64))(*(_QWORD *)(a2 + 40), v6, 4 * v10);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v11, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v11);
    }
  }
  return result;
}

void sub_1C2277948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<float>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAD60;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAD60;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<float>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 24);
    if (v2)
    {
      *(_QWORD *)(v1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA948;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA948;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA558;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB1C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB1C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3 + 24, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<float>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEACC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEACC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void **boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(void **result)
{
  void **v1;

  if (result)
  {
    v1 = result;
    std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAE50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAE50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  unsigned __int16 v5;
  int v6;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)this + 5);
  }
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(a3, 0);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::resize(a3, 0);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD v17[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 48 * a2;
      while (v4 != v15)
      {
        v4 -= 48;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](v4);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
    {
      v16 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero((void *)a1[1], v16);
      a1[1] = v4 + v16;
    }
    else
    {
      if (a2 > 0x555555555555555)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v17[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x2AAAAAAAAAAAAAALL)
        v10 = 0x555555555555555;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v10);
      v12 = &v11[48 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[48 * v13];
      v14 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<snlp::ssu::cache::SSUCacheObjectIntent>::~__split_buffer((uint64_t)v17);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAC20;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAC20;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, std::string *a3)
{
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load((uint64_t)a2, a3);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, (unint64_t)&a3[1], (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(uint64_t result)
{
  uint64_t v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = (void **)(result + 24);
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAEA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAEA0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::load_object_data(int a1, boost::archive::detail::basic_iarchive *this, uint64_t *a3)
{
  unsigned __int16 v5;
  int v6;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>();
  if (v5 >= 4u)
  {
    v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((_QWORD *)this + 5);
  }
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::reserve(a3, 0);
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::resize(a3, 0);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

void **boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(void **result)
{
  void **v1;

  if (result)
  {
    v1 = result;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t *std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::reserve(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  if (0xAAAAAAAAAAAAAAABLL * ((result[2] - *result) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v2 = result;
    v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
    v5[1] = v5[0] + v3;
    v5[2] = v5[0] + v3;
    v5[3] = v5[0] + 48 * v4;
    std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

void std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD v17[5];

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4);
  v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v15 = v3 + 48 * a2;
      while (v4 != v15)
      {
        v4 -= 48;
        std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v4);
      }
      a1[1] = v15;
    }
  }
  else
  {
    v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 4) >= v6)
    {
      v16 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero((void *)a1[1], v16);
      a1[1] = v4 + v16;
    }
    else
    {
      if (a2 > 0x555555555555555)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v17[4] = a1 + 2;
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 4);
      v9 = 2 * v8;
      if (2 * v8 <= a2)
        v9 = a2;
      if (v8 >= 0x2AAAAAAAAAAAAAALL)
        v10 = 0x555555555555555;
      else
        v10 = v9;
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v10);
      v12 = &v11[48 * v5];
      v17[0] = v11;
      v17[1] = v12;
      v17[3] = &v11[48 * v13];
      v14 = 48 * ((48 * v6 - 48) / 0x30) + 48;
      bzero(v12, v14);
      v17[2] = &v12[v14];
      std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::__swap_out_circular_buffer(a1, v17);
      std::__split_buffer<snlp::ssu::cache::SSUCacheObjectParameter>::~__split_buffer((uint64_t)v17);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEAC70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEAC70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::load_object_data(uint64_t a1, uint64_t a2, std::string *a3)
{
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a2, a3);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(a2, a3 + 1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

uint64_t boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA870;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA870;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA480;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectParameter>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAA68;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAA68;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA678;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA828;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA828;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::construct()
{
  return 0;
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA438;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntent>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEAA20;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEAA20;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA630;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA8B8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA8B8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::construct()
{
  return 0;
}

void **boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA4C8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectIntentList>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB120;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB120;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::load_object_data(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2, unint64_t a3)
{
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB2B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB2B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::load_object_data(int a1, boost::archive::detail::basic_iarchive_impl **this, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int16 v9;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v9);
  v8 = 0;
  v7 = 0;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v7);
  if (v9 >= 4u)
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v8);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::reserve(a3, v7);
  v5 = v7;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::resize(a3, v7);
  if (v5)
  {
    v6 = *a3;
    do
    {
      --v5;
      boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      boost::archive::detail::basic_iarchive::load_object(this, v6, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
      v6 += 48;
    }
    while (v5);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntentList>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB080;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB080;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::load_object_data(uint64_t a1, uint64_t a2, std::string *a3)
{
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load((_QWORD *)(a2 + 40), a3);
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object((boost::archive::detail::basic_iarchive_impl **)a2, (unint64_t)&a3[1], (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntent>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectIntent>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB300;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB300;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::load_object_data(int a1, boost::archive::detail::basic_iarchive_impl **this, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned __int16 v9;

  boost::archive::detail::basic_iarchive::get_library_version((uint64_t)this, &v9);
  v8 = 0;
  v7 = 0;
  boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v7);
  if (v9 >= 4u)
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::load_override((uint64_t)this, &v8);
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::reserve(a3, v7);
  v5 = v7;
  std::vector<snlp::ssu::cache::SSUCacheObjectParameter>::resize(a3, v7);
  if (v5)
  {
    v6 = *a3;
    do
    {
      --v5;
      boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      boost::archive::detail::basic_iarchive::load_object(this, v6, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
      v6 += 48;
    }
    while (v5);
  }
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::binary_iarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB0D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB0D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::load_object_data(uint64_t a1, uint64_t a2, std::string *a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a2 + 40);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load((_QWORD *)(a2 + 40), a3);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load(v4, a3 + 1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectParameter>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<snlp::ssu::cache::SSUCacheObjectParameter>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEABD0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEABD0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::load_object_data(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a2 + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a2 + 40));
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v2);
  return boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v2);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA7E0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
}

{
  *(_QWORD *)a1 = off_1E7BEA7E0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::construct()
{
  return 0;
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(_QWORD *)a1 = off_1E7BEA3F0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  boost::serialization::extended_type_info_typeid<snlp::ssu::cache::SSUCacheObjectHeader>::~extended_type_info_typeid(a1);
  JUMPOUT(0x1C3BB9B44);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB030;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB030;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::load_object_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;

  v4 = (_QWORD *)(a2 + 40);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>((_QWORD *)(a2 + 40), a3);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(v4, a3 + 8);
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>(v4, a3 + 16);
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2)
    JUMPOUT(0x1C3BB9B44);
}

snlp::ssu::cache::SSUCacheFileReadStream *snlp::ssu::cache::SSUCacheFileReadStream::SSUCacheFileReadStream(snlp::ssu::cache::SSUCacheFileReadStream *this, const std::__fs::filesystem::path *a2, int a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  std::runtime_error *exception;
  std::string *v13;
  __int128 v14;
  std::string v15;
  std::string v16;
  unint64_t __val;
  __int128 v18;
  std::string *p_val;

  std::ifstream::basic_ifstream(this);
  snlp::ssu::cache::SSUCacheFileReadStream::buildArchive((uint64_t *)this, a3, (uint64_t)this + 576);
  v5 = (void **)((char *)this + 704);
  *((_QWORD *)this + 90) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_BYTE *)this + 768) = 0;
  __val = 0;
  v18 = 0uLL;
  p_val = (std::string *)&__val;
  v6 = *((unsigned int *)this + 174);
  if ((_DWORD)v6 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_val;
  ((void (*)(std::string *, char *))off_1E7BED420[v6])(&v15, (char *)this + 576);
  if (__val >= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v15, __val);
    v13 = std::string::insert(&v15, 0, "Cannot read SSU cache file with unrecognized version: ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  *((_QWORD *)this + 91) = __val;
  *((_OWORD *)this + 46) = v18;
  memset(&v16, 0, sizeof(v16));
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  v7 = *((unsigned int *)this + 174);
  if ((_DWORD)v7 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  p_val = &v15;
  ((void (*)(std::string **, char *))off_1E7BED430[v7])(&p_val, (char *)this + 576);
  v8 = *v5;
  if (*v5)
  {
    v9 = *((_QWORD *)this + 89);
    v10 = *v5;
    if ((void *)v9 != v8)
    {
      do
      {
        v9 -= 48;
        std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::destroy[abi:ne180100](v9);
      }
      while ((void *)v9 != v8);
      v10 = *v5;
    }
    *((_QWORD *)this + 89) = v8;
    operator delete(v10);
    *v5 = 0;
    *((_QWORD *)this + 89) = 0;
    *((_QWORD *)this + 90) = 0;
  }
  *(std::string *)((char *)this + 704) = v16;
  memset(&v16, 0, sizeof(v16));
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return this;
}

void sub_1C2279488(_Unwind_Exception *a1, void *a2, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *__p, uint64_t a9, void *a10, uint64_t a11, std::string *a12, void *__pa, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, __int128 a20,std::string::size_type a21)
{
  _QWORD *v21;
  unsigned int *v22;
  void *v23;
  int v24;
  int v25;
  void *v27;
  std::runtime_error *exception;
  const std::string::value_type *v29;
  std::string *v30;
  __int128 v31;
  void *v32;
  std::runtime_error *v33;
  const std::string::value_type *v34;
  std::string *v35;
  __int128 v36;

  v25 = (int)a2;
  if (a18 < 0)
    operator delete(__pa);
  if (SHIBYTE(a12) < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<boost::archive::binary_iarchive,boost::archive::text_iarchive>,(std::__variant_detail::_Trait)1>::~__dtor(v22);
      std::ifstream::~ifstream(v21);
      if (v25 == 2)
      {
        v27 = __cxa_begin_catch(a1);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__pa, "I/O stream exception: ");
        v29 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        v30 = std::string::append((std::string *)&__pa, v29);
        v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        a21 = v30->__r_.__value_.__r.__words[2];
        a20 = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)&a20);
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
      }
      if (v25 == 1)
      {
        v32 = __cxa_begin_catch(a1);
        v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&__pa, "Boost serialization exception: ");
        v34 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
        v35 = std::string::append((std::string *)&__pa, v34);
        v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        a21 = v35->__r_.__value_.__r.__words[2];
        a20 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v33, (const std::string *)&a20);
        v33->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_1C2279688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_1C227971C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  if (a18 < 0)
    operator delete(__p);
  __cxa_free_exception(v18);
  __cxa_end_catch();
  JUMPOUT(0x1C2279744);
}

void snlp::ssu::cache::SSUCacheFileReadStream::buildArchive(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  boost::archive::detail::basic_iarchive *v4;
  int v5;
  std::locale *v6;

  if (a2)
  {
    v4 = boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl((boost::archive::detail::basic_iarchive *)a3, a1, 0);
    *(_QWORD *)a3 = off_1E7BEBF08;
    boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::init((uint64_t)v4);
    v5 = 1;
  }
  else
  {
    v6 = boost::archive::binary_iarchive_impl<boost::archive::binary_iarchive,char,std::char_traits<char>>::binary_iarchive_impl((std::locale *)a3, a1, 0);
    *(_QWORD *)a3 = off_1E7BEBFB8;
    boost::archive::basic_binary_iarchive<boost::archive::binary_iarchive>::init((uint64_t)v6);
    boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::init((_QWORD *)(a3 + 40));
    v5 = 0;
  }
  *(_DWORD *)(a3 + 120) = v5;
}

void sub_1C22797C8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iarchive *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(v1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive((uint64_t)v1 + 40);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::CacheFileException::~CacheFileException(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE5040] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E88], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectIntentList snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectIntentList>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectIntentList snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectIntentList>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectHeader snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectHeader>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectHeader snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectHeader>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

void boost::archive::binary_iarchive::~binary_iarchive(boost::archive::binary_iarchive *this)
{
  std::locale *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(v1 + 5);
}

{
  std::locale *v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::~basic_binary_iprimitive(v1 + 5);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::text_iarchive::~text_iarchive(boost::archive::text_iarchive *this)
{
  uint64_t v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1 + 40);
}

{
  uint64_t v1;

  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(v1 + 40);
  JUMPOUT(0x1C3BB9B44);
}

BOOL snlp::ssu::cache::SSUCacheFileReadStream::isAtEnd(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;

  if (*((_QWORD *)this + 94) != *((_QWORD *)this + 92))
    return 0;
  v1 = *((_QWORD *)this + 95);
  v2 = *((_QWORD *)this + 93);
  v3 = *((_QWORD *)this + 91);
  if (v3)
    v4 = 0;
  else
    v4 = v1 == v2;
  v5 = v4;
  if (v3)
    v6 = v1 == v2;
  else
    v6 = 0;
  if (v6)
    return *((_BYTE *)this + 768) != 0;
  return v5;
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getNumNegativeBatches(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return *((_QWORD *)this + 92);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getNumPositiveBatches(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return *((_QWORD *)this + 93);
}

double snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchNegative@<D0>(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  double result;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::runtime_error *exception;
  __int128 v10;
  __int128 v11;
  double v12[6];
  __int128 *v13;
  __int128 **v14;

  if (*((_QWORD *)this + 94) == *((_QWORD *)this + 92))
  {
    v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, "Client tried to read the next negative cached encodings batch when there are none remaining", (uint8_t *)&v10, 2u);
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
  else
  {
    v11 = 0u;
    *(_OWORD *)v12 = 0u;
    v10 = 0u;
    v13 = &v10;
    v6 = *((unsigned int *)this + 174);
    if ((_DWORD)v6 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v14 = &v13;
    ((void (*)(__int128 ***, char *))off_1E7BED440[v6])(&v14, (char *)this + 576);
    v7 = *((_QWORD *)this + 94) + 1;
    *((_QWORD *)this + 94) = v7;
    if (v7 == *((_QWORD *)this + 92)
      && snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>((uint64_t)this) != 4660)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Corrupted SSU cache file: invalid terminator after last negative batch");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
    }
    v8 = v11;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v8;
    result = v12[0];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)v12;
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void sub_1C2279BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::string *a16)
{
  void *v16;
  uint64_t v17;
  void *v20;
  std::runtime_error *exception;
  const std::string::value_type *v22;
  std::string *v23;
  __int128 v24;
  void *v25;
  std::runtime_error *v26;
  const std::string::value_type *v27;
  std::string *v28;
  __int128 v29;

  __cxa_free_exception(v16);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  if (a2 == 2)
  {
    v20 = __cxa_begin_catch(a1);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a16, "I/O stream exception: ");
    v22 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
    v23 = std::string::append((std::string *)&a16, v22);
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 - 48) = *((_QWORD *)&v23->__r_.__value_.__l + 2);
    *(_OWORD *)(v17 - 64) = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)(v17 - 64));
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
  }
  if (a2 == 1)
  {
    v25 = __cxa_begin_catch(a1);
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a16, "Boost serialization exception: ");
    v27 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v25 + 16))(v25);
    v28 = std::string::append((std::string *)&a16, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 - 48) = *((_QWORD *)&v28->__r_.__value_.__l + 2);
    *(_OWORD *)(v17 - 64) = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, (const std::string *)(v17 - 64));
    v26->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
  }
  _Unwind_Resume(a1);
}

void sub_1C2279D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C2279DC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  if (a21 < 0)
    operator delete(__p);
  __cxa_free_exception(v21);
  __cxa_end_catch();
  JUMPOUT(0x1C2279DECLL);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;

  v3 = &v4;
  v4 = 0;
  v1 = *(unsigned int *)(a1 + 696);
  if ((_DWORD)v1 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v5 = &v3;
  ((void (*)(uint64_t ***, uint64_t))off_1E7BED450[v1])(&v5, a1 + 576);
  return v4;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(void)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(uint64_t **a1, uint64_t a2)
{
  return boost::archive::basic_binary_iprimitive<boost::archive::binary_iarchive,char,std::char_traits<char>>::load<unsigned long>((_QWORD *)(a2 + 40), **a1);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<unsigned long snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>(void)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(uint64_t a1, uint64_t a2)
{
  return boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((_QWORD *)(a2 + 40));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

double snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchPositive@<D0>(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  double result;
  const char *v5;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  std::runtime_error *exception;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  std::string v17;
  std::string *v18;

  if (*((_QWORD *)this + 94) < *((_QWORD *)this + 92))
  {
    v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      v5 = "Client tried to read a positive cached encodings batch when there are still negative batches to be read";
LABEL_7:
      _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v12, 2u);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  if (*((_QWORD *)this + 95) == *((_QWORD *)this + 93))
  {
    v3 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      v5 = "Client tried to read the next positive cached encodings batch when there are none remaining";
      goto LABEL_7;
    }
LABEL_8:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 72) = 0;
    return result;
  }
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  v7 = *((unsigned int *)this + 174);
  if ((_DWORD)v7 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v18 = &v17;
  ((void (*)(std::string **, char *))off_1E7BED460[v7])(&v18, (char *)this + 576);
  v8 = *((_QWORD *)this + 95) + 1;
  *((_QWORD *)this + 95) = v8;
  if (v8 == *((_QWORD *)this + 93)
    && snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<unsigned long>((uint64_t)this) != 22136)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v17, "Corrupted SSU cache file: invalid terminator after last positive batch");
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v9 = v13;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v9;
  result = *(double *)&v14;
  v10 = v15;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 64) = v16;
  *(_BYTE *)(a2 + 72) = 1;
  return result;
}

void sub_1C227A0A0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::string *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  int v19;
  uint64_t v20;
  void *v23;
  std::runtime_error *exception;
  const std::string::value_type *v25;
  std::string *v26;
  __int128 v27;
  void *v28;
  std::runtime_error *v29;
  const std::string::value_type *v30;
  std::string *v31;
  __int128 v32;

  if (*(char *)(v20 - 41) < 0)
  {
    operator delete(*(void **)(v20 - 64));
    if ((v19 & 1) == 0)
    {
LABEL_6:
      snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive::~SSUCacheObjectEncodingsBatchPositive((snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive *)&a9);
      if (a2 == 2)
      {
        v23 = __cxa_begin_catch(a1);
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&a18, "I/O stream exception: ");
        v25 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 16))(v23);
        v26 = std::string::append((std::string *)&a18, v25);
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        *(_QWORD *)(v20 - 48) = *((_QWORD *)&v26->__r_.__value_.__l + 2);
        *(_OWORD *)(v20 - 64) = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, (const std::string *)(v20 - 64));
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
      }
      if (a2 == 1)
      {
        v28 = __cxa_begin_catch(a1);
        v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&a18, "Boost serialization exception: ");
        v30 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        v31 = std::string::append((std::string *)&a18, v30);
        v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        *(_QWORD *)(v20 - 48) = *((_QWORD *)&v31->__r_.__value_.__l + 2);
        *(_OWORD *)(v20 - 64) = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v29, (const std::string *)(v20 - 64));
        v29->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void sub_1C227A230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;

  if (*(char *)(v25 - 41) < 0)
    operator delete(*(void **)(v25 - 64));
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_1C227A2C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;

  if (a23 < 0)
    operator delete(__p);
  __cxa_free_exception(v23);
  __cxa_end_catch();
  JUMPOUT(0x1C227A2ECLL);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

void snlp::ssu::cache::SSUCacheFileReadStream::readDebugInformation(snlp::ssu::cache::SSUCacheFileReadStream *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _OWORD v5[4];
  void **v6[3];
  void ***v7;

  if (*((_QWORD *)this + 91))
  {
    *((_BYTE *)this + 768) = 1;
    v4 = 0u;
    memset(v5, 0, 32);
    v6[0] = (void **)&v4;
    v3 = *((unsigned int *)this + 174);
    if ((_DWORD)v3 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v7 = v6;
    ((void (*)(void ****, char *))off_1E7BED470[v3])(&v7, (char *)this + 576);
    *(_OWORD *)a2 = v4;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v5[0];
    v4 = 0uLL;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)v5 + 8);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)&v5[1] + 1);
    memset(v5, 0, 32);
    *(_BYTE *)(a2 + 48) = 1;
    v6[0] = (void **)v5 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v6);
    v6[0] = (void **)&v4;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v6);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 48) = 0;
  }
}

void sub_1C227A448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::string *a8)
{
  __break(1u);
}

void sub_1C227A59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C227A5FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (*(char *)(v23 - 41) < 0)
    operator delete(*(void **)(v23 - 64));
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v22)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C227A658);
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectDebugInformation snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::binary_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<snlp::ssu::cache::SSUCacheObjectDebugInformation snlp::ssu::cache::SSUCacheFileReadStream::readObjectFromStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(void)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_iarchive,std::__variant_detail::_Trait::text_iarchive> &>(unint64_t **a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, v3, (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t snlp::ssu::cache::SSUCacheFileReadStream::getIntentList(snlp::ssu::cache::SSUCacheFileReadStream *this)
{
  return (uint64_t)this + 704;
}

void snlp::ssu::trigger::SSUTriggerAlways::~SSUTriggerAlways(snlp::ssu::trigger::SSUTriggerAlways *this)
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::trigger::SSUTriggerAlways::isTriggered(snlp::ssu::trigger::SSUTriggerAlways *this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  return 0x100000003;
}

void itfm_inference_orchestrator::inference_engine::EspressoITFMModel::~EspressoITFMModel(void **this)
{
  itfm_inference_orchestrator::inference_engine::EspressoITFMModel::~EspressoITFMModel(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  void *v2;

  *this = &off_1E7BE9538;
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  v2 = this[1];
  this[1] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
}

void itfm_inference_orchestrator::inference_engine::EspressoITFMModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t NetworkConfig;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  _BYTE *v11;
  void *__p;
  _BYTE *v13;
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  void *v21[3];
  void *v22;
  _BYTE *v23;
  void *v24;
  _BYTE *v25;
  void *v26[3];
  void *v27;
  void *v28;
  void *v29;
  _BYTE *v30;
  void *v31;
  _BYTE *v32;
  void *v33[3];
  void *v34;
  void *v35;
  __int128 v36;
  void *v37;
  _BYTE *v38;
  void *v39[3];
  void *v40;
  void *v41;
  _BYTE *v42;
  _BYTE *v43;
  void *v44;
  _BYTE *v45;
  void *v46[3];
  void *v47;
  void *v48;

  NetworkConfig = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 48));
  v7 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 72));
  v8 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 144));
  v9 = snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*(_QWORD *)(a1 + 8), (unsigned __int8 *)(a1 + 96));
  nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2, v46);
  nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor((uint64_t)v46, NetworkConfig, v7, (uint64_t *)(a1 + 16), &v42, *(float *)(a1 + 40));
  if (v42 == v43)
  {
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  else
  {
    nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 48, v39);
    nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor((uint64_t)v39, NetworkConfig, v9, (uint64_t *)(a1 + 16), &v36, *(float *)(a1 + 40));
    if ((_QWORD)v36 == *((_QWORD *)&v36 + 1))
    {
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
    }
    else
    {
      nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 96, v33);
      nlv4_inference_orchestrator::inference_engine::utils::padContextTensor((uint64_t)v33, v8, (uint64_t *)(a1 + 16), &v29, *(float *)(a1 + 40));
      if (v29 == v30)
      {
        *(_OWORD *)(a3 + 16) = 0u;
        *(_OWORD *)(a3 + 32) = 0u;
        *(_OWORD *)a3 = 0u;
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor(a2 + 144, v26);
        nlv4_inference_orchestrator::inference_engine::utils::padITFMMaskTensor((uint64_t)v26, NetworkConfig, (uint64_t *)(a1 + 16), &v22, *(float *)(a1 + 40));
        if (v22 == v23)
        {
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
        }
        else
        {
          memset(v14, 0, sizeof(v14));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, v42, (uint64_t)v43, (v43 - v42) >> 3);
          memset(v15, 0, sizeof(v15));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 2);
          memset(v16, 0, sizeof(v16));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, (const void *)v36, *((uint64_t *)&v36 + 1), (uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3);
          memset(v17, 0, sizeof(v17));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, v37, (uint64_t)v38, (v38 - (_BYTE *)v37) >> 2);
          memset(v18, 0, sizeof(v18));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, v29, (uint64_t)v30, (v30 - (_BYTE *)v29) >> 3);
          memset(v19, 0, sizeof(v19));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, v31, (uint64_t)v32, (v32 - (_BYTE *)v31) >> 2);
          memset(v20, 0, sizeof(v20));
          std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20, v22, (uint64_t)v23, (v23 - (_BYTE *)v22) >> 3);
          memset(v21, 0, sizeof(v21));
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21, v24, (uint64_t)v25, (v25 - (_BYTE *)v24) >> 2);
          itfm_inference_orchestrator::inference_engine::ITFMModule::forward(*(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 8), (uint64_t)v14, (uint64_t)&v10);
          *(_OWORD *)(a3 + 16) = 0u;
          *(_OWORD *)(a3 + 32) = 0u;
          *(_OWORD *)a3 = 0u;
          if (&v10 != (void **)a3)
          {
            std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((char *)a3, (char *)v10, (uint64_t)v11, (v11 - (_BYTE *)v10) >> 3);
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a3 + 24), (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
          }
          if (__p)
          {
            v13 = __p;
            operator delete(__p);
          }
          if (v10)
          {
            v11 = v10;
            operator delete(v10);
          }
          nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v14);
        }
        if (v24)
        {
          v25 = v24;
          operator delete(v24);
        }
        if (v22)
        {
          v23 = v22;
          operator delete(v22);
        }
        if (v27)
        {
          v28 = v27;
          operator delete(v27);
        }
        if (v26[0])
        {
          v26[1] = v26[0];
          operator delete(v26[0]);
        }
      }
      if (v31)
      {
        v32 = v31;
        operator delete(v31);
      }
      if (v29)
      {
        v30 = v29;
        operator delete(v29);
      }
      if (v34)
      {
        v35 = v34;
        operator delete(v34);
      }
      if (v33[0])
      {
        v33[1] = v33[0];
        operator delete(v33[0]);
      }
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    if ((_QWORD)v36)
    {
      *((_QWORD *)&v36 + 1) = v36;
      operator delete((void *)v36);
    }
    if (v40)
    {
      v41 = v40;
      operator delete(v40);
    }
    if (v39[0])
    {
      v39[1] = v39[0];
      operator delete(v39[0]);
    }
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
}

void sub_1C227AB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&a15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a39);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a45);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a51);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a57);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a63);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 224));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 176));
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v63 - 128));
  _Unwind_Resume(a1);
}

void sub_1C227AC34()
{
  JUMPOUT(0x1C227ABF4);
}

void sub_1C227AC3C()
{
  JUMPOUT(0x1C227ABFCLL);
}

void sub_1C227AC44()
{
  JUMPOUT(0x1C227AC04);
}

void sub_1C227AC4C()
{
  JUMPOUT(0x1C227AC0CLL);
}

void sub_1C227AC54()
{
  JUMPOUT(0x1C227AC14);
}

void sub_1C227AC5C()
{
  JUMPOUT(0x1C227AC1CLL);
}

void sub_1C227AC64()
{
  JUMPOUT(0x1C227AC24);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getBatchSize(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 168);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumUtteranceEmbeddings(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 48);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumContextTokens(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 144);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getMaxNumSpansTokens(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 96);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::getUtteranceEmbeddingsSize(itfm_inference_orchestrator::inference_engine::EspressoITFMModel *this)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(*((_QWORD *)this + 1), (unsigned __int8 *)this + 72);
}

uint64_t itfm_inference_orchestrator::inference_engine::EspressoITFMModel::EspressoITFMModel(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  __int128 v7;
  snlp::common::espresso_inference::pre_e5ml::EspressoModule *v8;
  uint64_t v9;
  void *__p[2];
  char v12;

  *(_QWORD *)a1 = &off_1E7BE9538;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  if (v6 && *((_DWORD *)v6 + 16) == 4)
  {
    if ((char)v6[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
    }
    else
    {
      v7 = *(_OWORD *)(v6 + 40);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v6 + 7);
      *(_OWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "UNDEFINED_COMPONENT");
  }
  if (v12 < 0)
    operator delete(__p[0]);
  *(_DWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "max_num_utterance_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 72), "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 96), "max_num_spans_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 120), "spans_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 144), "max_num_context_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 168), "batch_size");
  v8 = (snlp::common::espresso_inference::pre_e5ml::EspressoModule *)operator new();
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(v8, a2, (uint64_t)a3);
  *(_QWORD *)v8 = off_1E7BE9518;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 10, "source_tokens_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 13, "matched_spans");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 16, "context");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 19, "source_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v8 + 22, "class_probabilities");
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v8 = *(snlp::common::espresso_inference::pre_e5ml::EspressoModule **)(a1 + 8);
  }
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(v8);
  return a1;
}

void sub_1C227AF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  if (a19 < 0)
    operator delete(__p);
  v20 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

void sub_1C227B0DC()
{
  JUMPOUT(0x1C227B060);
}

void sub_1C227B0E4()
{
  JUMPOUT(0x1C227B070);
}

void sub_1C227B0EC()
{
  JUMPOUT(0x1C227B080);
}

void sub_1C227B0F4()
{
  JUMPOUT(0x1C227B094);
}

void sub_1C227B0FC()
{
  JUMPOUT(0x1C227B0A8);
}

void sub_1C227B104()
{
  JUMPOUT(0x1C227B0BCLL);
}

void itfm_inference_orchestrator::inference_engine::ITFMModule::~ITFMModule(void **this)
{
  *this = off_1E7BE9518;
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)this);
}

{
  *this = off_1E7BE9518;
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::TransformerDecoderE5MLModule(uint64_t a1, char *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;

  v12 = 0;
  v5 = (_QWORD *)(snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, a3, &v12, (unsigned __int8 *)a1, a4)+ 352);
  std::string::basic_string[abi:ne180100]<0>(v5, "old_prediction");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 376), "hidden");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 400), "memory");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 424), "encodings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 448), "num_of_utterance_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 472), "attention_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 496), "out_predictions");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 520), "out_new_hidden");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 544), "out_new_memory");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 568), "out_new_attention_index");
  v6 = *(std::__shared_weak_count **)(a1 + 184);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  _os_feature_enabled_impl();
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C227B3B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, char a12)
{
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void **v20;

  if (v12[591] < 0)
    operator delete(*v13);
  if (v12[567] < 0)
    operator delete(*v18);
  if (v12[543] < 0)
    operator delete(*v20);
  if (v12[519] < 0)
    operator delete(*v19);
  if (v12[495] < 0)
    operator delete(*v17);
  if (v12[471] < 0)
    operator delete(*v16);
  if (v12[447] < 0)
    operator delete(*v15);
  if (v12[423] < 0)
    operator delete(*v14);
  if (v12[399] < 0)
    operator delete(*a10);
  if (v12[375] < 0)
    operator delete(*a11);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v12);
  _Unwind_Resume(a1);
}

void sub_1C227B4BC()
{
  JUMPOUT(0x1C227B484);
}

void sub_1C227B4C4()
{
  JUMPOUT(0x1C227B498);
}

void sub_1C227B4CC()
{
  JUMPOUT(0x1C227B4ACLL);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(E5RT::ExecutionStreamOperation **this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::setInputs((nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *)this, a2);
  v6 = (std::__shared_weak_count *)this[23];
  v11 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v11)
  {
    v9 = (unint64_t *)&v11->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[3]);
  E5RT::ExecutionStream::ResetStream(this[3]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::getOutputs((nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *)this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this);
}

void sub_1C227B5A4(_Unwind_Exception *a1)
{
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *v1;

  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::setInputs(nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 400, (uint64_t)a2 + 96);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 424, (uint64_t)a2 + 144);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 448, (uint64_t)a2 + 240);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 472, (uint64_t)a2 + 192);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::getOutputs(nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule *this@<X0>, _QWORD *a2@<X8>)
{
  std::string v4;
  void *__p;
  _BYTE *v6;
  std::string v7;
  void *v8;
  _BYTE *v9;
  std::string v10;
  void *v11;
  _BYTE *v12;
  std::string v13;
  void *v14;
  _BYTE *v15;

  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 496, &v13);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 520, &v10);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 544, &v7);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 568, &v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_, (uint64_t)(v13.__r_.__value_.__l.__size_ - v13.__r_.__value_.__r.__words[0]) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v14, (uint64_t)v15, (v15 - (_BYTE *)v14) >> 2);
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_, (uint64_t)(v10.__r_.__value_.__l.__size_ - v10.__r_.__value_.__r.__words[0]) >> 3);
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 9, v11, (uint64_t)v12, (v12 - (_BYTE *)v11) >> 2);
  a2[12] = 0;
  a2[13] = 0;
  a2[14] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 12, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_, (uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3);
  a2[15] = 0;
  a2[16] = 0;
  a2[17] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 15, v8, (uint64_t)v9, (v9 - (_BYTE *)v8) >> 2);
  a2[18] = 0;
  a2[19] = 0;
  a2[20] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 18, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_, (uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3);
  a2[21] = 0;
  a2[22] = 0;
  a2[23] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 21, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4.__r_.__value_.__r.__words[0])
  {
    v4.__r_.__value_.__l.__size_ = v4.__r_.__value_.__r.__words[0];
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v7.__r_.__value_.__r.__words[0])
  {
    v7.__r_.__value_.__l.__size_ = v7.__r_.__value_.__r.__words[0];
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  if (v10.__r_.__value_.__r.__words[0])
  {
    v10.__r_.__value_.__l.__size_ = v10.__r_.__value_.__r.__words[0];
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v13.__r_.__value_.__r.__words[0])
  {
    v13.__r_.__value_.__l.__size_ = v13.__r_.__value_.__r.__words[0];
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_1C227B818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v21;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v22;
  void **v23;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v24;
  uint64_t v25;
  void **v26;
  void *v28;

  v26 = v23;
  v28 = *v26;
  if (*v26)
  {
    *((_QWORD *)v21 + 19) = v28;
    operator delete(v28);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v24);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v22);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a21);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v25 - 80));
  _Unwind_Resume(a1);
}

void sub_1C227B8B8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)v0;
  if (*(_QWORD *)v0)
  {
    *(_QWORD *)(v0 + 8) = v1;
    operator delete(v1);
  }
  JUMPOUT(0x1C227B890);
}

void sub_1C227B8D0()
{
  JUMPOUT(0x1C227B890);
}

void sub_1C227B8D8()
{
  JUMPOUT(0x1C227B898);
}

void sub_1C227B8E0()
{
  JUMPOUT(0x1C227B8A0);
}

void sub_1C227B8E8()
{
  JUMPOUT(0x1C227B8A8);
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  *(_QWORD *)this = &off_1E7BE9DB0;
  espresso_plan_destroy();
  espresso_context_destroy();
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 40);
}

_QWORD *snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &off_1E7BE9DB0;
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map((uint64_t)(a1 + 5), a3);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::deserialiseModule(a1);
  return a1;
}

void sub_1C227B9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::deserialiseModule(_QWORD *a1)
{
  uint64_t context;
  uint64_t plan;
  int v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  NSObject *v9;
  std::string *p_p;
  std::string *v11;
  std::runtime_error *exception;
  int v13;
  std::runtime_error *v14;
  std::string *v15;
  __int128 v16;
  std::string __p;
  std::string v18;
  std::string v19;
  std::string buf;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  context = espresso_create_context();
  a1[1] = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not deserialise espresso context.");
    goto LABEL_33;
  }
  plan = espresso_create_plan();
  a1[2] = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not create espresso plan.");
LABEL_33:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = espresso_plan_add_network();
  if (v4)
  {
    v13 = v4;
    v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, v13);
    v15 = std::string::insert(&v19, 0, "Could not set up espresso network. Got error status: ");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v14, &buf);
    __cxa_throw(v14, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v19, "bolt_task_id");
  std::string::basic_string[abi:ne180100]<0>(&v18, "not_found");
  v5 = a1 + 5;
  if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19))
  {
    v6 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (*((_DWORD *)v6 + 16) == 4)
    {
      v7 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (unsigned __int8 *)&v19);
      if (!v7)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      if (*((_DWORD *)v7 + 16) != 4)
        std::__throw_bad_variant_access[abi:ne180100]();
      std::string::operator=(&v18, (const std::string *)(v7 + 40));
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v8 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v5, (unsigned __int8 *)&buf);
  if (v8 && *((_DWORD *)v8 + 16) == 4)
  {
    if ((char)v8[63] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v8 + 5), *((_QWORD *)v8 + 6));
    else
      __p = *(std::string *)(v8 + 40);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  v9 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v11 = &v18;
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v18.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] [model_task_id=%s]", (uint8_t *)&buf, 0x16u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1C227BCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_build();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to build espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C227BE18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to execute espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C227BE80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::cleanPlan(snlp::common::espresso_inference::pre_e5ml::EspressoModule *this)
{
  uint64_t result;
  std::runtime_error *exception;

  result = espresso_plan_build_clean();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to clean up espresso plan.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C227BEE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  std::string *v13;
  void **v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  int64_t v18;
  std::string v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 40);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 40), a2))
  {
    v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
    if (!v4)
      goto LABEL_31;
    if (*((_DWORD *)v4 + 16) == 1)
    {
      v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
      if (v5)
      {
        if (*((_DWORD *)v5 + 16) != 1)
          std::__throw_bad_variant_access[abi:ne180100]();
        return *((unsigned int *)v5 + 10);
      }
LABEL_31:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, (unsigned __int8 *)__p);
  if (v7 && *((_DWORD *)v7 + 16) == 4)
  {
    if ((char)v7[63] < 0)
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
    else
      v16 = *(std::string *)(v7 + 40);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  std::operator+<char>();
  v8 = std::string::append(&v15, ".\n");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v19, "Note that only parameters of unsigned integer type are currently expected by SiriNaturalLanguageParsing.  This issue will likely cause SiriNaturalLanguageParsing to fail.");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v14 = __p;
    if (v18 < 0)
      v14 = (void **)__p[0];
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v19, 0x16u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1C227C150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string v5;
  uint64_t v6;
  int v7;

  v6 = *(_QWORD *)(a3 + 24);
  espresso_buffer_pack_tensor_shape();
  v7 = 65568;
  result = espresso_network_bind_buffer();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1C227C290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(uint64_t a1@<X8>)
{
  void *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  std::runtime_error *exception;
  void *__p;
  __int128 v11;
  unint64_t v12;
  void *v13;
  int v14;
  std::string v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 65568;
  if (espresso_network_bind_buffer())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v15);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = 0;
  espresso_buffer_unpack_tensor_shape();
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v11 = 0uLL;
  __p = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, &v15, (uint64_t)&v15 + 8 * v12, v12);
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = (char *)__p;
  *(_QWORD *)a1 = __p;
  v4 = (char *)v11;
  *(_OWORD *)(a1 + 8) = v11;
  if (v4 == v3)
  {
    v8 = 1;
  }
  else
  {
    if ((unint64_t)((v4 - v3) >> 3) <= 1)
      v5 = 1;
    else
      v5 = (v4 - v3) >> 3;
    v6 = 1;
    do
    {
      v7 = *(_DWORD *)v3;
      v3 += 8;
      v6 *= v7;
      --v5;
    }
    while (v5);
    v8 = v6;
  }
  __p = 0;
  v11 = 0uLL;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v13, (uint64_t)v13 + 4 * v8, v8);
  if ((void **)(a1 + 24) != &__p)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)(a1 + 24), (char *)__p, v11, (uint64_t)(v11 - (_QWORD)__p) >> 2);
  free(v13);
  if (__p)
  {
    *(_QWORD *)&v11 = __p;
    operator delete(__p);
  }
}

void sub_1C227C4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;
  int v11;
  uint64_t v12;

  if (*(char *)(v12 - 97) < 0)
  {
    operator delete(*(void **)(v12 - 120));
    if ((v11 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v11)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v10);
  goto LABEL_6;
}

id snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(uint64_t a1)
{
  PB::Writer *v2;
  void *v3;

  v2 = (PB::Writer *)operator new();
  PB::Writer::Writer(v2);
  (*(void (**)(uint64_t, PB::Writer *))(*(_QWORD *)a1 + 24))(a1, v2);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", *((_QWORD *)v2 + 1), *(_QWORD *)v2 - *((_QWORD *)v2 + 1));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  PB::Writer::~Writer(v2);
  MEMORY[0x1C3BB9B44]();
  return v3;
}

void sub_1C227C5A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertNLv4SpanResponseToFeatureStore(uint64_t a1, uint64_t *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 v9;

  v4 = objc_alloc(MEMORY[0x1E0D9FA80]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithData:", v5);

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithNLv4SpanResponse:interactionIdentifier:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithNLv4SpanResponse:interactionIdentifier:", v6, v8);

  return v9;
}

void sub_1C227C680(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertNLv4ContextResponseToFeatureStore(uint64_t a1, uint64_t *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 v9;

  v4 = objc_alloc(MEMORY[0x1E0D9FA70]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithData:", v5);

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithNLv4ContextResponse:interactionIdentifier:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithNLv4ContextResponse:interactionIdentifier:", v6, v8);

  return v9;
}

void sub_1C227C74C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertNLv4AssetVersionToFeatureStore(uint64_t a1, uint64_t *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 v9;

  v4 = objc_alloc(MEMORY[0x1E0D9FA68]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithData:", v5);

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithNLv4AssertVersion:interactionIdentifier:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithNLv4AssertVersion:interactionIdentifier:", v6, v8);

  return v9;
}

void sub_1C227C818(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertNLv4ExecutedHandcraftedRulesToFeatureStore(uint64_t a1, uint64_t *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 v9;

  v4 = objc_alloc(MEMORY[0x1E0D9FA78]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithData:", v5);

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithNLv4ExecutedHandcraftedRules:interactionIdentifier:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithNLv4ExecutedHandcraftedRules:interactionIdentifier:", v6, v8);

  return v9;
}

void sub_1C227C8E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertITFMSpanResponseToFeatureStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  _BOOL8 v12;

  v6 = objc_alloc(MEMORY[0x1E0D9FA60]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithData:", v7);

  v9 = +[SNLPFeatureStoreUtilities itfmModelTypeForSNLPComponent:](SNLPFeatureStoreUtilities, "itfmModelTypeForSNLPComponent:", a3);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithITFMSpanResponse:interactionIdentifier:itfmModelType:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithITFMSpanResponse:interactionIdentifier:itfmModelType:", v8, v11, v9);

  return v12;
}

void sub_1C227C9D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertITFMContextResponseToFeatureStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  _BOOL8 v12;

  v6 = objc_alloc(MEMORY[0x1E0D9FA50]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithData:", v7);

  v9 = +[SNLPFeatureStoreUtilities itfmModelTypeForSNLPComponent:](SNLPFeatureStoreUtilities, "itfmModelTypeForSNLPComponent:", a3);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithITFMContextResponse:interactionIdentifier:itfmModelType:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithITFMContextResponse:interactionIdentifier:itfmModelType:", v8, v11, v9);

  return v12;
}

void sub_1C227CAC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertITFMAssetVersionToFeatureStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  _BOOL8 v12;

  v6 = objc_alloc(MEMORY[0x1E0D9FA48]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithData:", v7);

  v9 = +[SNLPFeatureStoreUtilities itfmModelTypeForSNLPComponent:](SNLPFeatureStoreUtilities, "itfmModelTypeForSNLPComponent:", a3);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithITFMAssertVersion:interactionIdentifier:itfmModelType:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithITFMAssertVersion:interactionIdentifier:itfmModelType:", v8, v11, v9);

  return v12;
}

void sub_1C227CBB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertITFMExecutedHandcraftedRulesToFeatureStore(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v6;
  void *v7;
  void *v8;
  unint64_t v9;
  uint64_t *v10;
  void *v11;
  _BOOL8 v12;

  v6 = objc_alloc(MEMORY[0x1E0D9FA58]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (void *)objc_msgSend(v6, "initWithData:", v7);

  v9 = +[SNLPFeatureStoreUtilities itfmModelTypeForSNLPComponent:](SNLPFeatureStoreUtilities, "itfmModelTypeForSNLPComponent:", a3);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithITFMExecutedHandcraftedRules:interactionIdentifier:itfmModelType:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithITFMExecutedHandcraftedRules:interactionIdentifier:itfmModelType:", v8, v11, v9);

  return v12;
}

void sub_1C227CCA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL snlp::common::logging::feature_store_utilities::insertSSUEncodingResultToFeatureStore(uint64_t a1, uint64_t *a2)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t *v7;
  void *v8;
  _BOOL8 v9;

  v4 = objc_alloc(MEMORY[0x1E0D9FA88]);
  snlp::common::logging::feature_store_utilities::getNSDataForCppProtobuf(a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)objc_msgSend(v4, "initWithData:", v5);

  if (*((char *)a2 + 23) >= 0)
    v7 = a2;
  else
    v7 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = +[SNLPFeatureStoreUtilities insertToFeatureStoreWithSSUEncodingResult:interactionIdentifier:](SNLPFeatureStoreUtilities, "insertToFeatureStoreWithSSUEncodingResult:interactionIdentifier:", v6, v8);

  return v9;
}

void sub_1C227CD70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C227D0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  uint64_t v10;

  _Unwind_Resume(a1);
}

void sub_1C227D1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getNLv4SupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("NLv4SupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getSSUSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("SSUSupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getPSCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("PSCSupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getSNLCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("SNLCSupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *SNLPAssetVersionChecks::getLVCSupportedGenerationNumbers(SNLPAssetVersionChecks *this)
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("LVCSupportedGenerationList"));
}

uint64_t SNLPAssetVersionChecks::getITFMSupportedGenerationNumbers(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C227D284 + 4 * byte_1C230B96A[a1]))();
}

double sub_1C227D284@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *sub_1C227D298()
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("PSCSupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *sub_1C227D2AC()
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("LVCSupportedGenerationList"));
}

unordered_set<unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<unsigned int>> *sub_1C227D2C0()
{
  return +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("SNLCSupportedGenerationList"));
}

uint64_t SNLPAssetVersionChecks::getNLv4SupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[6];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3[2] = xmmword_1C230EEC8;
  v3[3] = unk_1C230EED8;
  v3[4] = xmmword_1C230EEE8;
  v3[5] = unk_1C230EEF8;
  v3[0] = xmmword_1C230EEA8;
  v3[1] = unk_1C230EEB8;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)v3, 24);
}

uint64_t std::unordered_set<unsigned int>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1C227D3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t SNLPAssetVersionChecks::getSSUSupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  __int128 v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v3 = xmmword_1C230B560;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)&v3, 4);
}

uint64_t SNLPAssetVersionChecks::getITFMSupportedNCVNumbers@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[4];
  _OWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v3[2] = xmmword_1C230EF28;
  v3[3] = unk_1C230EF38;
  v4[0] = xmmword_1C230EF48;
  *(_OWORD *)((char *)v4 + 12) = *(__int128 *)((char *)&xmmword_1C230EF48 + 12);
  v3[0] = xmmword_1C230EF08;
  v3[1] = unk_1C230EF18;
  return std::unordered_set<unsigned int>::unordered_set(a1, (unsigned int *)v3, 23);
}

uint64_t SNLPAssetVersionChecks::isAssetVersionValid(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  NSObject *v12;
  uint64_t *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *p_p;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  __int128 *v40;
  std::string __p;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int128 v53;
  int64_t v54;
  std::string v55;
  uint8_t buf[4];
  uint64_t *v57;
  __int16 v58;
  __int128 *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 *)(a2 + 4);
  if (*(_BYTE *)(a2 + 4)
    && std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(*(_QWORD *)a4, *(_QWORD *)(a4 + 8), *(_DWORD *)a2)|| std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(*(_QWORD *)a5, *(_QWORD *)(a5 + 8), *(_DWORD *)(a3 + 16)))
  {
    return 1;
  }
  if (v10)
    std::to_string(&v55, *(_DWORD *)a2);
  else
    std::string::basic_string[abi:ne180100]<0>(&v55, "unknown");
  SNLPOSLoggerForCategory(4);
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = a1;
    if (*((char *)a1 + 23) < 0)
      v13 = (uint64_t *)*a1;
    std::operator+<char>();
    v14 = std::string::append(&v44, " asset (generation: ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v55;
    else
      v16 = (std::string *)v55.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    else
      size = v55.__r_.__value_.__l.__size_;
    v18 = std::string::append(&v45, (const std::string::value_type *)v16, size);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v46, ", NCV: ");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, *(_DWORD *)(a3 + 16));
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v43;
    else
      v22 = (std::string *)v43.__r_.__value_.__r.__words[0];
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    else
      v23 = v43.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v47, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v48, ") is incompatible with the inference runtime (compatible generations: [");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a4, &v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v42;
    else
      v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    else
      v29 = v42.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v49, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v50, "], compatible NCV numbers: [");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v35 = __p.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v51, (const std::string::value_type *)p_p, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v52, "])");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v54 = v38->__r_.__value_.__r.__words[2];
    v53 = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = &v53;
    if (v54 < 0)
      v40 = (__int128 *)v53;
    *(_DWORD *)buf = 136315394;
    v57 = v13;
    v58 = 2080;
    v59 = v40;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", buf, 0x16u);
    if (SHIBYTE(v54) < 0)
      operator delete((void *)v53);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
  }

  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1C227D8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *v66;
  uint64_t v67;

  if (*(char *)(v67 - 153) < 0)
    operator delete(*(void **)(v67 - 176));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v67 - 185) < 0)
    operator delete(*(void **)(v67 - 208));
  if (*(char *)(v67 - 217) < 0)
    operator delete(*(void **)(v67 - 240));
  if (a20 < 0)
    operator delete(a15);
  if (a66 < 0)
    operator delete(a61);
  if (a59 < 0)
    operator delete(a54);
  if (a26 < 0)
    operator delete(a21);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
    operator delete(a27);

  if (*(char *)(v67 - 97) < 0)
    operator delete(*(void **)(v67 - 120));
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = ((_DWORD)a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

void SNLPAssetVersionChecks::assertAssetVersionValid(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char isAssetVersionValid;
  std::runtime_error *exception;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::string v37;
  std::string v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v51 = *(std::string *)a1;
  isAssetVersionValid = SNLPAssetVersionChecks::isAssetVersionValid((uint64_t *)&v51, a2, a3, a4, a5);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if ((isAssetVersionValid & 1) == 0)
  {
    if (*(_BYTE *)(a2 + 4))
      std::to_string(&v50, *(_DWORD *)a2);
    else
      std::string::basic_string[abi:ne180100]<0>(&v50, "unknown");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v11 = std::string::append(&v40, " asset (generation: ");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = &v50;
    else
      v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
    else
      size = v50.__r_.__value_.__l.__size_;
    v15 = std::string::append(&v41, (const std::string::value_type *)v13, size);
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v42, ", NCV: ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, *(_DWORD *)(a3 + 16));
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = &v39;
    else
      v19 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v20 = v39.__r_.__value_.__l.__size_;
    v21 = std::string::append(&v43, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v23 = std::string::append(&v44, ") is incompatible with the inference runtime (compatible generations: [");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a4, &v38);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v38;
    else
      v25 = (std::string *)v38.__r_.__value_.__r.__words[0];
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v26 = v38.__r_.__value_.__l.__size_;
    v27 = std::string::append(&v45, (const std::string::value_type *)v25, v26);
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v46, "], compatible NCV numbers: [");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    uint32SetAsString(a5, &v37);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v37;
    else
      v31 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v32 = v37.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v47, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v48, "])");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v49);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
}

void sub_1C227DDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  int v66;
  void *v67;
  uint64_t v68;

  if (*(char *)(v68 - 121) < 0)
    operator delete(*(void **)(v68 - 144));
  if (*(char *)(v68 - 153) < 0)
    operator delete(*(void **)(v68 - 176));
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v68 - 185) < 0)
    operator delete(*(void **)(v68 - 208));
  if (*(char *)(v68 - 217) < 0)
    operator delete(*(void **)(v68 - 240));
  if (a20 < 0)
    operator delete(a15);
  if (a66 < 0)
    operator delete(a61);
  if (a59 < 0)
    operator delete(a54);
  if (a26 < 0)
    operator delete(a21);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a32 < 0)
  {
    operator delete(a27);
    if ((v66 & 1) == 0)
    {
LABEL_30:
      if (*(char *)(v68 - 97) < 0)
        operator delete(*(void **)(v68 - 120));
      _Unwind_Resume(a1);
    }
  }
  else if (!v66)
  {
    goto LABEL_30;
  }
  __cxa_free_exception(v67);
  goto LABEL_30;
}

void nlv4_inference_orchestrator::trees::TagExpander::expandTags(unint64_t a1@<X0>, char **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5[3];
  void **v6;

  nlv4_inference_orchestrator::trees::TagExpander::expandMultiTagTags(a1, a2, (uint64_t)v5);
  nlv4_inference_orchestrator::trees::TagExpander::expandNextTags(a1, v5, a3);
  v6 = (void **)v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1C227DFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::TagExpander::expandMultiTagTags(uint64_t a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  std::allocator<std::string> *v6;
  std::allocator<std::string> *v7;
  uint64_t v8;
  char *v9;
  int v10;
  char *v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  std::string::size_type v21;
  std::string *v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string::size_type v28;
  std::string *v29;
  unint64_t v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  std::string *v34;
  uint64_t v35;
  __int128 *v36;
  __int128 v37;
  std::string *v38;
  uint64_t v39;
  std::string *v40;
  uint64_t v41;
  __int128 v42;
  std::string *v43;
  std::string *v44;
  std::__split_buffer<std::string>::pointer end;
  __int128 v46;
  __int128 v47;
  std::string *value;
  std::string *v49;
  char *v50;
  std::string v51;
  std::__split_buffer<std::string> v52;
  _QWORD v53[3];
  char v54;
  std::__split_buffer<std::string>::pointer v55;
  std::__split_buffer<std::string>::pointer v56;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = *a2;
  v50 = a2[1];
  if (*a2 != v50)
  {
    v6 = (std::allocator<std::string> *)(a3 + 16);
    do
    {
      v7 = v6;
      if (v4[23] < 0)
      {
        v9 = *(char **)v4;
        v8 = *((_QWORD *)v4 + 1);
      }
      else
      {
        v8 = v4[23];
        v9 = v4;
      }
      v10 = *(char *)(a1 + 23);
      if (v10 >= 0)
        v11 = (char *)a1;
      else
        v11 = *(char **)a1;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(a1 + 23);
      else
        v12 = *(_QWORD *)(a1 + 8);
      if (v12)
      {
        if (v8 >= v12)
        {
          v15 = &v9[v8];
          v16 = *v11;
          v17 = v9;
          do
          {
            v18 = v8 - v12;
            if (v18 == -1)
              break;
            v19 = (char *)memchr(v17, v16, v18 + 1);
            if (!v19)
              break;
            v20 = v19;
            if (!memcmp(v19, v11, v12))
            {
              if (v20 == v15 || v20 - v9 == -1)
                break;
              goto LABEL_26;
            }
            v17 = v20 + 1;
            v8 = v15 - (v20 + 1);
          }
          while (v8 >= v12);
        }
        v13 = *(_QWORD *)(a3 + 8);
        if (v13 >= *(_QWORD *)(a3 + 16))
        {
          v14 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)a3, (__int128 *)v4);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a3, (__int128 *)v4);
          v14 = v13 + 24;
        }
        v6 = v7;
        *(_QWORD *)(a3 + 8) = v14;
      }
      else
      {
LABEL_26:
        nlv4_inference_orchestrator::trees::TagExpander::splitTagBySeparator(a1, (uint64_t *)v4, &v51);
        v21 = v51.__r_.__value_.__r.__words[0];
        v6 = v7;
        if ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >= 1)
        {
          v22 = *(std::string **)(a3 + 8);
          v23 = (int64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) / 24;
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v7 - (_QWORD)v22) >> 3)) >= v23)
          {
            if (v23 <= 0)
            {
              v28 = v51.__r_.__value_.__r.__words[0] + 24 * v23;
              v29 = *(std::string **)(a3 + 8);
              v30 = (unint64_t)&v29[-v23];
              v31 = v29;
              while (v30 < (unint64_t)v22)
              {
                v32 = *(_OWORD *)v30;
                v31->__r_.__value_.__r.__words[2] = *(_QWORD *)(v30 + 16);
                *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
                ++v31;
                *(_QWORD *)(v30 + 8) = 0;
                *(_QWORD *)(v30 + 16) = 0;
                *(_QWORD *)v30 = 0;
                v30 += 24;
              }
              v33 = &v22[v23];
              *(_QWORD *)(a3 + 8) = v31;
              if (v29 != v33)
              {
                v34 = v29 - 1;
                v35 = 8 * (((char *)v29 - (char *)v33) >> 3);
                do
                {
                  if (SHIBYTE(v34->__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v34->__r_.__value_.__l.__data_);
                  v36 = (__int128 *)((char *)&v22[-1] + v35);
                  v37 = *v36;
                  v34->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[(unint64_t)v35 / 8 - 1];
                  *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v37;
                  --v34;
                  v22->__r_.__value_.__s.__data_[v35 - 1] = 0;
                  *(_BYTE *)v36 = 0;
                  v35 -= 24;
                }
                while (v35);
              }
              while (v21 != v28)
              {
                std::string::operator=(v22, (const std::string *)v21);
                v21 += 24;
                ++v22;
              }
            }
            else
            {
              *(_QWORD *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v7, (__int128 *)v51.__r_.__value_.__l.__data_, (__int128 *)v51.__r_.__value_.__l.__size_, *(std::string **)(a3 + 8));
            }
          }
          else
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v22 - *(_QWORD *)a3) >> 3);
            v25 = v24 + v23;
            if (v24 + v23 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)v7 - *(_QWORD *)a3) >> 3) > v25)
              v25 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)v7 - *(_QWORD *)a3) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)v7 - *(_QWORD *)a3) >> 3) >= 0x555555555555555)
              v26 = 0xAAAAAAAAAAAAAAALL;
            else
              v26 = v25;
            v52.__end_cap_.__value_ = v7;
            if (v26)
              v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)v7, v26);
            else
              v27 = 0;
            v38 = v27 + v24;
            v52.__first_ = v27;
            v52.__begin_ = v38;
            v52.__end_ = v38;
            v52.__end_cap_.__value_ = &v27[v26];
            v39 = 3 * v23;
            v40 = &v38[v23];
            v41 = 8 * v39;
            do
            {
              if (*(char *)(v21 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
              }
              else
              {
                v42 = *(_OWORD *)v21;
                v38->__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
                *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v42;
              }
              ++v38;
              v21 += 24;
              v41 -= 24;
            }
            while (v41);
            v52.__end_ = v40;
            std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)v7, (uint64_t)v22, (uint64_t)v22, *(_QWORD *)a3, *(_QWORD *)a3, (uint64_t)v52.__begin_, (uint64_t)v52.__begin_);
            v52.__begin_ = v43;
            v44 = *(std::string **)(a3 + 8);
            end = v52.__end_;
            v55 = v52.__end_;
            v56 = v52.__end_;
            v53[0] = v7;
            v53[1] = &v55;
            v53[2] = &v56;
            if (v22 != v44)
            {
              do
              {
                v46 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
                end->__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v46;
                ++end;
                v22->__r_.__value_.__l.__size_ = 0;
                v22->__r_.__value_.__r.__words[2] = 0;
                v22->__r_.__value_.__r.__words[0] = 0;
                ++v22;
              }
              while (v22 != v44);
              v56 = end;
            }
            v54 = 1;
            std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v53);
            v47 = *(_OWORD *)a3;
            value = v52.__end_cap_.__value_;
            *(_QWORD *)a3 = v52.__begin_;
            *(_QWORD *)(a3 + 8) = end;
            *(_OWORD *)&v52.__begin_ = v47;
            v49 = *(std::string **)(a3 + 16);
            *(_QWORD *)(a3 + 16) = value;
            v52.__end_cap_.__value_ = v49;
            v52.__first_ = (std::__split_buffer<std::string>::pointer)v47;
            std::__split_buffer<std::string>::~__split_buffer(&v52);
          }
        }
        v52.__first_ = &v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
      }
      v4 += 24;
    }
    while (v4 != v50);
  }
}

void sub_1C227E40C(_Unwind_Exception *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, std::__split_buffer<std::string> *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v19 + 8) = v20;
  a19 = (void **)&a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  a19 = (void **)v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

unint64_t nlv4_inference_orchestrator::trees::TagExpander::expandNextTags@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  int v10;
  BOOL v11;
  unsigned __int8 *v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  unsigned __int8 *v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t *i;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = result;
    v7 = result + 24;
    v8 = result + 72;
    v9 = (__int128 *)(result + 48);
    do
    {
      v10 = *(char *)(v3 + 23);
      v11 = v10 < 0;
      v12 = *(unsigned __int8 **)v3;
      if (v10 >= 0)
        v12 = (unsigned __int8 *)v3;
      v13 = *(unsigned __int8 *)(v3 + 23);
      if (v11)
        v13 = *(_QWORD *)(v3 + 8);
      v14 = *(char *)(v5 + 47);
      v15 = v14 < 0;
      v16 = *(unsigned __int8 **)(v5 + 24);
      if (v14 >= 0)
        v16 = (unsigned __int8 *)v7;
      v17 = *(unsigned __int8 *)(v5 + 47);
      if (v15)
        v17 = *(_QWORD *)(v5 + 32);
      if (v13)
        v18 = v17 == 0;
      else
        v18 = 1;
      if (v18)
      {
        v28 = v16;
LABEL_17:
        if (v28 == &v16[v17])
        {
          v19 = *(char *)(v5 + 95);
          v20 = v19 < 0;
          v21 = *(_QWORD *)(v5 + 72);
          if (v19 >= 0)
            v21 = v8;
          v22 = *(unsigned __int8 *)(v5 + 95);
          if (v20)
            v22 = *(_QWORD *)(v5 + 80);
          v23 = v12 - 1;
          while (v13 && v22)
          {
            v24 = v23[v13];
            v25 = *(unsigned __int8 *)(v21 + v22 - 1);
            --v13;
            --v22;
            if (v24 != v25)
              goto LABEL_32;
          }
          if (v21 + v22 == v21)
          {
            result = nlv4_inference_orchestrator::trees::TagExpander::extractNumberOfNextTags(v5, v3);
            if (v32)
            {
              v33 = result;
              for (i = a3; v33; --v33)
                result = (unint64_t)std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&i, v9);
              goto LABEL_36;
            }
          }
        }
      }
      else
      {
        v26 = v17 - 1;
        v27 = v13 - 1;
        v28 = v16;
        v29 = v12;
        while (*v29 == *v28)
        {
          ++v28;
          if (v27)
          {
            ++v29;
            v30 = v26--;
            --v27;
            if (v30)
              continue;
          }
          goto LABEL_17;
        }
      }
LABEL_32:
      v31 = a3[1];
      if (v31 >= a3[2])
      {
        result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a3, (__int128 *)v3);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a3, (__int128 *)v3);
        result = v31 + 24;
      }
      a3[1] = result;
LABEL_36:
      v3 += 24;
    }
    while (v3 != v4);
  }
  return result;
}

void sub_1C227E624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t nlv4_inference_orchestrator::trees::TagExpander::extractNumberOfNextTags(uint64_t a1, uint64_t a2)
{
  std::string::size_type v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  std::string __p;
  char v10;

  if (*(char *)(a1 + 47) < 0)
    v2 = *(_QWORD *)(a1 + 32);
  else
    v2 = *(unsigned __int8 *)(a1 + 47);
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a1 + 95) < 0)
    v4 = *(_QWORD *)(a1 + 80);
  else
    v4 = *(unsigned __int8 *)(a1 + 95);
  std::string::basic_string(&__p, (const std::string *)a2, v2, v3 + ~v4, (std::allocator<char> *)&v10);
  v5 = std::stoi(&__p, 0, 10);
  v6 = v5 & 0xFFFFFFFFFFFFFF00;
  v7 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6 | v7;
}

void nlv4_inference_orchestrator::trees::TagExpander::splitTagBySeparator(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::string *a3@<X8>)
{
  std::string *v4;
  BOOL v5;
  void **v6;
  std::string *v7;
  __int128 v8;
  uint64_t v9;
  void **v10[3];
  _QWORD __dst[4];

  v4 = a3;
  __dst[3] = *MEMORY[0x1E0C80C00];
  LODWORD(a3) = *(char *)(a1 + 23);
  v5 = (int)a3 < 0;
  v6 = *(void ***)a1;
  v7 = *(std::string **)(a1 + 8);
  if ((int)a3 >= 0)
    v6 = (void **)a1;
  v8 = 0uLL;
  v9 = 0;
  v10[0] = v6;
  a3 = (std::string *)a3;
  if (v5)
    a3 = v7;
  v10[1] = (void **)((char *)&a3->__r_.__value_.__l.__data_ + (_QWORD)v6);
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(__dst, (uint64_t)v10);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(&v8, a2, __dst, 0);
  v4->__r_.__value_.__r.__words[0] = 0;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, (__int128 *)v8, *((__int128 **)&v8 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v8 + 1) - v8) >> 3));
  if (__dst[2] >= 0x11uLL && __dst[0])
    MEMORY[0x1C3BB9B20](__dst[0], 0x1000C8077774924);
  v10[0] = (void **)&v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v10);
}

void sub_1C227E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

_QWORD *boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(_QWORD *__dst, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  void *v6;

  *__dst = 0;
  v4 = *(_BYTE **)a2;
  v5 = *(_BYTE **)(a2 + 8);
  __dst[2] = v5 - v4;
  if ((unint64_t)(v5 - v4) >= 0x11)
  {
    v6 = (void *)operator new[]();
    *__dst = v6;
    v4 = *(_BYTE **)a2;
    v5 = *(_BYTE **)(a2 + 8);
  }
  else
  {
    v6 = __dst;
  }
  if (v5 != v4)
    memmove(v6, v4, v5 - v4);
  std::__sort<std::__less<char,char> &,char *>();
  return __dst;
}

__int128 *boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(__int128 *a1, uint64_t *a2, _QWORD *__src, int a4)
{
  _QWORD *v5;
  size_t v8;
  void *v9;
  size_t v10;
  void **v11;
  void **v12;
  size_t v13;
  void **v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  size_t v20;
  void *v21;
  void **v22;
  size_t v23;
  void *v24;
  void **v25;
  size_t v26;
  void *v27;
  void **v28;
  size_t v29;
  void *v30;
  void **v31;
  size_t v32;
  void *v33;
  void **v34;
  size_t v35;
  void **v36;
  void **v37;
  _QWORD *v38;
  _QWORD *v39;
  size_t v40;
  void *v41;
  BOOL v42;
  int v43;
  char *v44;
  char *v45;
  unint64_t v46;
  std::vector<std::string>::pointer end;
  __int128 v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  std::string *v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  __int128 v56;
  std::string *v57;
  __int128 *v59;
  unint64_t v60;
  unint64_t v61;
  std::vector<std::string> v62;
  uint64_t (**v63)();
  _QWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70[10];
  __int128 __p;
  std::string::size_type v72;
  std::vector<std::string> *v73;
  char v74;
  std::__split_buffer<std::string> __v;
  void *__srca[2];
  size_t __n;
  void *__dst[2];
  size_t v79;
  int v80;
  void *v81[2];
  size_t v82;
  int v83;
  void *v84[2];
  size_t v85;
  int v86;
  void *v87[2];
  size_t v88;
  int v89;
  __int128 v90;
  __int128 v91;
  char v92;
  void *v93[2];
  size_t v94;
  int v95;
  void *v96[2];
  size_t v97;
  int v98;
  void *v99[2];
  size_t v100;
  int v101;
  void *__s2;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  void **v107[2];
  size_t v108;
  int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;

  v5 = __src;
  v115 = *MEMORY[0x1E0C80C00];
  v8 = __src[2];
  __n = v8;
  __srca[0] = 0;
  if (v8 >= 0x11)
  {
    v9 = (void *)operator new[]();
    __srca[0] = v9;
    v5 = (_QWORD *)*v5;
  }
  else
  {
    v9 = __srca;
  }
  memcpy(v9, v5, v8);
  v10 = __n;
  v108 = __n;
  v107[0] = 0;
  if (__n >= 0x11)
  {
    v11 = (void **)operator new[]();
    v107[0] = v11;
    v12 = (void **)__srca[0];
  }
  else
  {
    v11 = (void **)v107;
    v12 = __srca;
  }
  v61 = v10;
  memcpy(v11, v12, v10);
  v13 = v108;
  v79 = v108;
  __dst[0] = 0;
  if (v108 > 0x10)
  {
    __dst[0] = (void *)operator new[]();
    v14 = v107[0];
    memcpy(__dst[0], v107[0], v13);
    v80 = a4;
    if (v14)
      MEMORY[0x1C3BB9B20](v14, 0x1000C8077774924);
  }
  else
  {
    memcpy(__dst, v107, v108);
    v80 = a4;
    v13 = v79;
  }
  v15 = *((char *)a2 + 23);
  if (v15 >= 0)
    v16 = a2;
  else
    v16 = (uint64_t *)*a2;
  if (v15 >= 0)
    v17 = *((unsigned __int8 *)a2 + 23);
  else
    v17 = a2[1];
  v97 = v13;
  v96[0] = 0;
  if (v13 >= 0x11)
  {
    v18 = (void *)operator new[]();
    v96[0] = v18;
    v19 = (void **)__dst[0];
  }
  else
  {
    v18 = v96;
    v19 = __dst;
  }
  memcpy(v18, v19, v13);
  v98 = a4;
  v20 = v97;
  v88 = v97;
  v87[0] = 0;
  if (v97 >= 0x11)
  {
    v21 = (void *)operator new[]();
    v87[0] = v21;
    v22 = (void **)v96[0];
  }
  else
  {
    v21 = v87;
    v22 = v96;
  }
  memcpy(v21, v22, v20);
  v89 = a4;
  v23 = v88;
  v82 = v88;
  v81[0] = 0;
  v60 = v13;
  if (v88 >= 0x11)
  {
    v24 = (void *)operator new[]();
    v81[0] = v24;
    v25 = (void **)v87[0];
  }
  else
  {
    v24 = v81;
    v25 = v87;
  }
  memcpy(v24, v25, v23);
  v83 = a4;
  v63 = 0;
  v26 = v82;
  v85 = v82;
  v84[0] = 0;
  if (v82 >= 0x11)
  {
    v27 = (void *)operator new[]();
    v84[0] = v27;
    v28 = (void **)v81[0];
  }
  else
  {
    v27 = v84;
    v28 = v81;
  }
  memcpy(v27, v28, v26);
  v86 = a4;
  v29 = v85;
  v94 = v85;
  v93[0] = 0;
  if (v85 >= 0x11)
  {
    v30 = (void *)operator new[]();
    v93[0] = v30;
    v31 = (void **)v84[0];
  }
  else
  {
    v30 = v93;
    v31 = v84;
  }
  memcpy(v30, v31, v29);
  v95 = a4;
  v32 = v94;
  v100 = v94;
  v99[0] = 0;
  v59 = a1;
  if (v94 >= 0x11)
  {
    v33 = (void *)operator new[]();
    v99[0] = v33;
    v34 = (void **)v93[0];
  }
  else
  {
    v33 = v99;
    v34 = v93;
  }
  memcpy(v33, v34, v32);
  v101 = a4;
  v35 = v100;
  v108 = v100;
  v107[0] = 0;
  if (v100 >= 0x11)
  {
    v36 = (void **)operator new[]();
    v107[0] = v36;
    v37 = (void **)v99[0];
  }
  else
  {
    v36 = (void **)v107;
    v37 = v99;
  }
  memcpy(v36, v37, v35);
  v109 = a4;
  v38 = (_QWORD *)operator new();
  v39 = v38;
  v40 = v108;
  v38[2] = v108;
  *v38 = 0;
  if (v40 >= 0x11)
  {
    v41 = (void *)operator new[]();
    *v39 = v41;
    memcpy(v41, v107[0], v39[2]);
    *((_DWORD *)v39 + 6) = a4;
    v64 = v39;
    if (v107[0])
      MEMORY[0x1C3BB9B20](v107[0], 0x1000C8077774924);
  }
  else
  {
    memcpy(v38, v107, v40);
    *((_DWORD *)v39 + 6) = a4;
    v64 = v39;
  }
  if (v35 >= 0x11 && v99[0])
    MEMORY[0x1C3BB9B20](v99[0], 0x1000C8077774924);
  if (v32 >= 0x11 && v93[0])
    MEMORY[0x1C3BB9B20](v93[0], 0x1000C8077774924);
  v63 = boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::assign_to<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>(boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>)::stored_vtable;
  if (v29 >= 0x11 && v84[0])
    MEMORY[0x1C3BB9B20](v84[0], 0x1000C8077774924);
  if (v26 >= 0x11 && v81[0])
    MEMORY[0x1C3BB9B20](v81[0], 0x1000C8077774924);
  if (v23 >= 0x11 && v87[0])
    MEMORY[0x1C3BB9B20](v87[0], 0x1000C8077774924);
  v65 = v16;
  v66 = v16;
  v67 = v16;
  v68 = (uint64_t)v16 + v17;
  v69 = 0;
  if (v17)
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)&v63);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v70, (uint64_t *)&v63);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)&v63);
  if (v20 >= 0x11 && v96[0])
    MEMORY[0x1C3BB9B20](v96[0], 0x1000C8077774924);
  v87[0] = 0;
  v90 = 0u;
  v91 = 0u;
  v92 = 1;
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v93, (uint64_t *)v87);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v87);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v84, v70);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v81, (uint64_t *)v93);
  memset(&v62, 0, sizeof(v62));
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v107, (uint64_t *)v84);
  boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator((uint64_t)v99, (uint64_t *)v81);
  v73 = &v62;
  v74 = 0;
  while (1)
  {
    if (v107[0])
      v42 = v114 == 0;
    else
      v42 = 0;
    v43 = !v42;
    if (!v99[0])
    {
      if (v43)
        break;
      goto LABEL_74;
    }
    if (((v106 == 0) & ~v43) == 0)
    {
      if (v43 == (v106 != 0))
        break;
LABEL_74:
      v44 = v110;
      v45 = v111;
      v46 = v111 - v110;
      goto LABEL_75;
    }
    v44 = v110;
    v45 = v111;
    v46 = v111 - v110;
    if (v111 - v110 == v103 - (_QWORD)__s2 && !memcmp(v110, __s2, v111 - v110) && v112 == v104 && v113 == v105)
      break;
LABEL_75:
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, v44, v45, v46);
    end = v62.__end_;
    if (v62.__end_ >= v62.__end_cap_.__value_)
    {
      v49 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62.__end_ - (char *)v62.__begin_) >> 3);
      v50 = v49 + 1;
      if (v49 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3) > v50)
        v50 = 0x5555555555555556 * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62.__end_cap_.__value_ - (char *)v62.__begin_) >> 3) >= 0x555555555555555)
        v51 = 0xAAAAAAAAAAAAAAALL;
      else
        v51 = v50;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v62.__end_cap_;
      if (v51)
        v52 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v62.__end_cap_, v51);
      else
        v52 = 0;
      v53 = v52 + v49;
      __v.__first_ = v52;
      __v.__begin_ = v53;
      __v.__end_cap_.__value_ = &v52[v51];
      v54 = __p;
      v53->__r_.__value_.__r.__words[2] = v72;
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      v72 = 0;
      __p = 0uLL;
      __v.__end_ = v53 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v62, &__v);
      v55 = v62.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v62.__end_ = v55;
      if (SHIBYTE(v72) < 0)
        operator delete((void *)__p);
    }
    else
    {
      v48 = __p;
      v62.__end_->__r_.__value_.__r.__words[2] = v72;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v48;
      v62.__end_ = end + 1;
    }
    boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment((uint64_t)v107);
  }
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v99);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v107);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v81);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v84);
  v56 = *v59;
  *v59 = *(_OWORD *)&v62.__begin_;
  *(_OWORD *)&v62.__begin_ = v56;
  v57 = (std::string *)*((_QWORD *)v59 + 2);
  *((_QWORD *)v59 + 2) = v62.__end_cap_.__value_;
  v62.__end_cap_.__value_ = v57;
  v107[0] = (void **)&v62;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v107);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2((uint64_t *)v93);
  boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(v70);
  if (v60 >= 0x11 && __dst[0])
    MEMORY[0x1C3BB9B20](__dst[0], 0x1000C8077774924);
  if (v61 >= 0x11 && __srca[0])
    MEMORY[0x1C3BB9B20](__srca[0], 0x1000C8077774924);
  return v59;
}

void sub_1C227F184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;

  MEMORY[0x1C3BB9B44](v63, 0x1012C405C87E9CELL);
  v72 = *(_QWORD *)(v70 - 184);
  if (v72)
    MEMORY[0x1C3BB9B20](v72, 0x1000C8077774924);
  if (v69 >= 0x11 && STACK[0x2B8])
    MEMORY[0x1C3BB9B20](STACK[0x2B8], 0x1000C8077774924);
  if (v68 >= 0x11 && STACK[0x248])
    MEMORY[0x1C3BB9B20](STACK[0x248], 0x1000C8077774924);
  if (v67 >= 0x11 && a63)
    MEMORY[0x1C3BB9B20](a63, 0x1000C8077774924);
  if (v66 >= 0x11 && a53)
    MEMORY[0x1C3BB9B20](a53, 0x1000C8077774924);
  if (v65 >= 0x11 && STACK[0x200])
    MEMORY[0x1C3BB9B20](STACK[0x200], 0x1000C8077774924);
  if (v64 >= 0x11 && STACK[0x298])
    MEMORY[0x1C3BB9B20](STACK[0x298], 0x1000C8077774924);
  if (a11 >= 0x11 && a49)
    MEMORY[0x1C3BB9B20](a49, 0x1000C8077774924);
  if (a12 >= 0x11)
  {
    if (a46)
      MEMORY[0x1C3BB9B20](a46, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::split_iterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  v4 = *a2;
  if (*a2)
  {
    *(_QWORD *)a1 = v4;
    if ((v4 & 1) != 0)
    {
      v5 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v5;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, a1 + 8, 0);
    }
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t *boost::function2<boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::~function2(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(uint64_t *, uint64_t *, uint64_t);

  v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3)
        v3(a1 + 1, a1 + 1, 2);
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::algorithm::split_iterator<std::__wrap_iter<char const*>>::increment(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  v2 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)a1)
  {
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFFELL) + 8))(a1 + 8, *(_QWORD *)(a1 + 48), v2);
    v2 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 56);
    result = v4;
  }
  v5 = result == v2 && v4 == v2;
  if (v5 && *(_QWORD *)(a1 + 40) == v2)
    *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t boost::detail::function::functor_manager<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>>::manage(uint64_t result, _WORD *a2, int a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  _QWORD *v10;

  v4 = (_QWORD *)result;
  switch(a3)
  {
    case 0:
      v5 = *(_DWORD **)result;
      v6 = (_QWORD *)operator new();
      v7 = v6;
      v8 = *((_QWORD *)v5 + 2);
      v6[2] = v8;
      *v6 = 0;
      if (v8 >= 0x11)
      {
        v6 = (_QWORD *)operator new[]();
        *v7 = v6;
        v9 = *(const void **)v5;
        v8 = v7[2];
      }
      else
      {
        v9 = v5;
      }
      result = (uint64_t)memcpy(v6, v9, v8);
      *((_DWORD *)v7 + 6) = v5[6];
      *(_QWORD *)a2 = v7;
      break;
    case 1:
      *(_QWORD *)a2 = *(_QWORD *)result;
      *(_QWORD *)result = 0;
      break;
    case 2:
      v10 = *(_QWORD **)a2;
      if (*(_QWORD *)a2)
      {
        if (v10[2] >= 0x11uLL && *v10)
          MEMORY[0x1C3BB9B20](*v10, 0x1000C8077774924);
        result = MEMORY[0x1C3BB9B44](v10, 0x1012C405C87E9CELL);
      }
      goto LABEL_13;
    case 3:
      result = *(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == (0x80000001C230F5F4 & 0x7FFFFFFFFFFFFFFFLL)
        || (result = strcmp((const char *)result, (const char *)(0x80000001C230F5F4 & 0x7FFFFFFFFFFFFFFFLL)),
            !(_DWORD)result))
      {
        *(_QWORD *)a2 = *v4;
      }
      else
      {
LABEL_13:
        *(_QWORD *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1C227F6F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

char *boost::detail::function::function_obj_invoker2<boost::algorithm::detail::token_finderF<boost::algorithm::detail::is_any_ofF<char>>,boost::iterator_range<std::__wrap_iter<char const*>>,std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>::invoke(const void ***a1, char *a2, char *a3)
{
  const void **v5;
  size_t v6;
  _QWORD *v7;
  const void *v8;
  char *v9;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = (size_t)(*a1)[2];
  v12 = v6;
  v11[0] = 0;
  if (v6 >= 0x11)
  {
    v7 = (_QWORD *)operator new[]();
    v11[0] = v7;
    v8 = *v5;
  }
  else
  {
    v7 = v11;
    v8 = v5;
  }
  memcpy(v7, v8, v6);
  while (a2 != a3)
  {
    if (boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v11, *a2))
      goto LABEL_9;
    ++a2;
  }
  a2 = a3;
LABEL_9:
  if (v12 >= 0x11 && v11[0])
    MEMORY[0x1C3BB9B20](v11[0], 0x1000C8077774924);
  if (a2 == a3)
    return a3;
  if (!*((_DWORD *)v5 + 6))
  {
    v9 = a2;
    do
    {
      if (!boost::algorithm::detail::is_any_ofF<char>::operator()<char>(v5, *v9))
        break;
      ++v9;
    }
    while (v9 != a3);
  }
  return a2;
}

BOOL boost::algorithm::detail::is_any_ofF<char>::operator()<char>(_QWORD *a1, int a2)
{
  unint64_t v2;
  _QWORD *v3;
  char *v4;
  char *v5;
  int v6;
  unint64_t v7;

  v2 = a1[2];
  if (v2 >= 0x11)
  {
    a1 = (_QWORD *)*a1;
    v3 = (_QWORD *)((char *)a1 + v2);
  }
  else
  {
    v3 = (_QWORD *)((char *)a1 + v2);
    if (!v2)
      return a1 != v3 && *(char *)a1 <= a2;
  }
  do
  {
    v4 = (char *)a1 + (v2 >> 1);
    v6 = *v4;
    v5 = v4 + 1;
    v7 = v2 >> 1;
    v2 += ~(v2 >> 1);
    if (v6 < a2)
      a1 = v5;
    else
      v2 = v7;
  }
  while (v2);
  return a1 != v3 && *(char *)a1 <= a2;
}

_QWORD *snlp::ssu::candidate::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  std::string *v12;
  __int128 v13;
  __n128 *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *i;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __n128 *v25;
  std::string *v26;
  _QWORD v27[2];
  char v28;
  void **v29[3];
  char v30;
  std::string *v31;
  std::string *v32;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUAlternativeCandidateInfo[\n", 29);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    generatedUtterance='", 24);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"    relevantIntents={\n", 22);
  v9 = *(uint64_t **)(a2 + 40);
  v26 = 0;
  v27[0] = 0;
  v25 = 0;
  if (v9)
  {
    v10 = 0;
    v11 = v9;
    do
    {
      ++v10;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
    v27[1] = &v25;
    v28 = 0;
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](&v25, v10);
    v31 = v26;
    v32 = v26;
    v29[0] = (void **)v27;
    v29[1] = (void **)&v31;
    v29[2] = (void **)&v32;
    v30 = 0;
    v12 = v26;
    do
    {
      if (*((char *)v9 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v9[2], v9[3]);
        v12 = v32;
      }
      else
      {
        v13 = *((_OWORD *)v9 + 1);
        v12->__r_.__value_.__r.__words[2] = v9[4];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v9 = (uint64_t *)*v9;
      v32 = ++v12;
    }
    while (v9);
    v30 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v29);
    v26 = v12;
    v14 = v25;
  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v14) >> 3));
  if (v12 == (std::string *)v14)
    v16 = 0;
  else
    v16 = v15;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v14, (__n128 *)v12, v16, 1);
  v17 = (uint64_t)v25;
  for (i = v26; (std::string *)v17 != i; v17 += 24)
  {
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"      ", 6);
    v20 = *(char *)(v17 + 23);
    if (v20 >= 0)
      v21 = v17;
    else
      v21 = *(_QWORD *)v17;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(v17 + 23);
    else
      v22 = *(_QWORD *)(v17 + 8);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)",\n", 2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  }]", 4);
  v29[0] = (void **)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v29);
  return a1;
}

{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"SSUCandidate[\n", 14);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  originalUtterance='", 21);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"',\n", 3);
  if (*(_BYTE *)(a2 + 88))
  {
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  alternativeCandidateInfo=", 27);
    if (!*(_BYTE *)(a2 + 88))
      goto LABEL_16;
    v10 = snlp::ssu::candidate::operator<<(v9, a2 + 24);
    v11 = ",\n";
    v12 = 2;
  }
  else
  {
    v11 = "  alternativeCandidateInfo=<not alternative candidate>,\n";
    v10 = a1;
    v12 = 56;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  if (!*(_BYTE *)(a2 + 184))
  {
    v15 = "  relatedEntity=<no related entity>\n";
    v14 = a1;
    v16 = 36;
    goto LABEL_15;
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"  relatedEntity=", 16);
  if (!*(_BYTE *)(a2 + 184))
LABEL_16:
    std::__throw_bad_optional_access[abi:ne180100]();
  v14 = snlp::ssu::proto::operator<<(v13, a2 + 96);
  v15 = "\n";
  v16 = 1;
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"]", 1);
  return a1;
}

void sub_1C227FAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::candidate::SSUCandidate::toString(snlp::ssu::candidate::SSUCandidate *this)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  snlp::ssu::candidate::operator<<(v5, (uint64_t)this);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v7);
}

void sub_1C227FCF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::SSUNessieModel(uint64_t a1, char *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t NetworkConfig;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *__p[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(__p, "output_encoding_dim");
  NetworkConfig = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = NetworkConfig;
  std::string::basic_string[abi:ne180100]<0>(__p, "max_seq_len");
  v11 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 8) = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "min_batch_size");
  v12 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = snlp::ssu::espresso::SSUNessieModel::getMaxBatchSizeOrDefault(a3, a4, a5);
  v13 = *(_QWORD *)(a1 + 8);
  v17 = 14;
  strcpy((char *)__p, "max_batch_size");
  v14 = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a3, (unsigned __int8 *)__p);
  snlp::ssu::espresso::SSUNessieModel::buildModuleWithValidation((_QWORD *)a1, a2, v13, v14, *(_QWORD *)(a1 + 24), a1 + 32);
  if (v17 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 528) = 850045863;
  *(_QWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  return a1;
}

void sub_1C227FE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  std::runtime_error *exception;
  std::runtime_error *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (*((_DWORD *)v2 + 16) != 1)
  {
    v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v5, &v9);
    v5->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  return *((unsigned int *)v2 + 10);
}

void sub_1C227FFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getMaxBatchSizeOrDefault(_QWORD *a1, uint64_t a2, char a3)
{
  unsigned int NetworkConfig;
  void *__p[2];
  char v8;

  v8 = 14;
  strcpy((char *)__p, "max_batch_size");
  NetworkConfig = snlp::ssu::espresso::SSUNessieModel::getNetworkConfig(a1, (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (a3)
    return a2;
  else
    return NetworkConfig;
}

void sub_1C22800C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::buildModuleWithValidation@<X0>(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6;
  std::runtime_error *exception;
  std::runtime_error *v10;
  std::runtime_error *v11;
  std::runtime_error *v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  __int128 v23;
  std::runtime_error *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;
  std::runtime_error *v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  std::string::size_type v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  __int128 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;

  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config output encoding dimension must be non-zero");
    std::runtime_error::runtime_error(exception, &v54);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (!a1[1])
  {
    v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config max sequence length must be non-zero");
    std::runtime_error::runtime_error(v10, &v54);
    v10->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v6 = a1[2];
  if (!v6)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v54, "SSUNessieModel config min batch size must be non-zero");
    std::runtime_error::runtime_error(v11, &v54);
    v11->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (v6 > a4)
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a1[2]);
    v14 = std::string::insert(&v50, 0, "SSUNessieModel config min batch size (");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v51, ") exceeds the max batch size (");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a4);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v49;
    else
      v18 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      size = v49.__r_.__value_.__l.__size_;
    v20 = std::string::append(&v52, (const std::string::value_type *)v18, size);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v53, ")");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v13, &v54);
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (v6 > a5)
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a5);
    v27 = std::string::insert(&v50, 0, "SSUNessieModel instance max batch size (");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v29 = std::string::append(&v51, ") is less than the config min batch size (");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a1[2]);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v49;
    else
      v31 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      v32 = v49.__r_.__value_.__l.__size_;
    v33 = std::string::append(&v52, (const std::string::value_type *)v31, v32);
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = std::string::append(&v53, ")");
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v26, &v54);
    v26->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (a5 > a4)
  {
    v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, a5);
    v39 = std::string::insert(&v50, 0, "SSUNessieModel instance max batch size (");
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v41 = std::string::append(&v51, ") exceeds the config max batch size (");
    v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, a4);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v49;
    else
      v43 = (std::string *)v49.__r_.__value_.__r.__words[0];
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    else
      v44 = v49.__r_.__value_.__l.__size_;
    v45 = std::string::append(&v52, (const std::string::value_type *)v43, v44);
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    v47 = std::string::append(&v53, ")");
    v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v38, &v54);
    v38->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  return snlp::ssu::espresso::SSUNessieModule::SSUNessieModule(a6, a2, a3, a5);
}

void sub_1C22805A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  char v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v34 & 1) != 0)
    __cxa_free_exception(v33);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::espresso::SSUNessieModel::buildFromAssetsDirectory(snlp::ssu::espresso::SSUNessieModel *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  NSObject *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  void **v14;
  std::string *v15;
  unsigned __int8 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE *v19;
  int data;
  _BYTE *v21;
  int v22;
  uint64_t *v23;
  int v24;
  unsigned __int8 *v25;
  std::string::value_type v26;
  const std::string **v27;
  void *v28;
  std::string *v29;
  __int128 v30;
  NSObject *v31;
  void **v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::__fs::filesystem::path v39;
  std::string v40;
  unsigned __int8 v41[8];
  std::string::size_type *v42;
  void *v43[2];
  char v44;
  std::string v45;
  _QWORD v46[3];
  int v47;
  std::string v48;
  void *__p[2];
  char v50;
  uint8_t buf[32];
  int v52;
  std::string v53;
  uint64_t v54;
  std::string v55;
  std::string v56;
  unint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  snlp::ssu::espresso::SSUNessieModel::getEspressoE5Model(a1, (std::string::size_type)&v40);
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>(&v39.__pn_, "config.json");
  std::__fs::filesystem::operator/[abi:ne180100](&v38, (uint64_t)a1, &v39);
  v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v53, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
    else
      v53 = v40;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v53;
    else
      v9 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    else
      v45 = v38;
    v10 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v10 = (std::string *)v45.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v10;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Building SSU Nessie model using E5 path %s and config JSON path %s", buf, 0x16u);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v37, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v37 = v38;
  std::ifstream::basic_ifstream(&v53);
  std::string::basic_string[abi:ne180100]<0>(v43, "SSU");
  if ((*((_BYTE *)&v53 + *(_QWORD *)(v53.__r_.__value_.__r.__words[0] - 24) + 32) & 5) != 0)
  {
    std::operator+<char>();
    v11 = std::string::append(&v56, ".");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    v13 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = v43;
      if (v44 < 0)
        v14 = (void **)v43[0];
      v15 = &v45;
      if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
      LODWORD(v56.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v56.__r_.__value_.__r.__words + 4) = (std::string::size_type)v14;
      WORD2(v56.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v56.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v15;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v56, 0x16u);
    }
    memset(buf, 0, sizeof(buf));
    v52 = 1065353216;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    goto LABEL_101;
  }
  v41[0] = 0;
  v42 = 0;
  nlohmann::operator>>(&v53, v41);
  memset(buf, 0, sizeof(buf));
  v52 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "SSU");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
  *(_OWORD *)&v56.__r_.__value_.__r.__words[1] = 0uLL;
  v57 = 0x8000000000000000;
  v16 = v41[0];
  if (v41[0])
  {
    if (v41[0] == 2)
    {
      v56.__r_.__value_.__r.__words[2] = *v42;
    }
    else if (v41[0] == 1)
    {
      v56.__r_.__value_.__l.__size_ = *v42;
    }
    else
    {
      v57 = 0;
    }
  }
  else
  {
    v57 = 1;
  }
  while (1)
  {
    *(_OWORD *)&v45.__r_.__value_.__r.__words[1] = 0uLL;
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    v46[0] = 0x8000000000000000;
    if (v16 == 2)
    {
      v45.__r_.__value_.__r.__words[2] = v42[1];
    }
    else if (v16 == 1)
    {
      v45.__r_.__value_.__l.__size_ = (std::string::size_type)(v42 + 1);
    }
    else
    {
      v46[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v56, (unsigned __int8 **)&v45))
    {
      break;
    }
    v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v56.__r_.__value_.__l.__data_, v56.__r_.__value_.__l.__size_);
    if (*(char *)(v17 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
    }
    else
    {
      v18 = *(_OWORD *)v17;
      v48.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 16);
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v18;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56) == 5)
    {
      v19 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56);
      LODWORD(v45.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v19, (int *)&v45);
      data = (int)v45.__r_.__value_.__l.__data_;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v45 = v48;
      LODWORD(v46[0]) = data;
      v47 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v45, (uint64_t)&v45);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56) == 6)
    {
      v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56);
      LODWORD(v45.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v21, (unsigned int *)&v45);
      v22 = (int)v45.__r_.__value_.__l.__data_;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v45 = v48;
      LODWORD(v46[0]) = v22;
      v47 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v45, (uint64_t)&v45);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56) == 7)
    {
      v23 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56);
      LODWORD(v45.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v23, (float *)&v45);
      v24 = (int)v45.__r_.__value_.__l.__data_;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v45 = v48;
      LODWORD(v46[0]) = v24;
      v47 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v45, (uint64_t)&v45);
      goto LABEL_81;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56) == 4)
    {
      v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56);
      v45.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v25, &v45);
      v26 = v45.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v45, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      else
        v45 = v48;
      LOBYTE(v46[0]) = v26;
      v47 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v45, (uint64_t)&v45);
LABEL_81:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v46);
      goto LABEL_82;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56))
      {
        std::operator+<char>();
        v29 = std::string::append(&v55, ".");
        v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_82;
        v32 = __p;
        if (v50 < 0)
          v32 = (void **)__p[0];
        v33 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::operator+<char>();
        v34 = std::string::append(&v55, " is null.  This is currently expected behaviour.");
        v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v45.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v31 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          goto LABEL_82;
        v32 = __p;
        if (v50 < 0)
          v32 = (void **)__p[0];
        v33 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v33 = (std::string *)v45.__r_.__value_.__r.__words[0];
      }
      LODWORD(v55.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v55.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      WORD2(v55.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v55.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v33;
      _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v55, 0x16u);
LABEL_82:
      if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_85;
      v28 = (void *)v45.__r_.__value_.__r.__words[0];
      goto LABEL_84;
    }
    v27 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v56);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v55, v27);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&v45, (__int128 *)&v48, (__int128 *)&v55);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)buf, (unsigned __int8 *)&v45, (uint64_t)&v45);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v46);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    {
      v28 = (void *)v55.__r_.__value_.__r.__words[0];
LABEL_84:
      operator delete(v28);
    }
LABEL_85:
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v56);
    v16 = v41[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "component_name");
  v56.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>((uint64_t)buf, (unsigned __int8 *)&v45, (__int128 **)&v56, &v48);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  if (v50 < 0)
    operator delete(__p[0]);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v42, v41[0]);
LABEL_101:
  if (v44 < 0)
    operator delete(v43[0]);
  v53.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + *(_QWORD *)(v53.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](&v53.__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](&v54);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v53, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  else
    v53 = v40;
  v36 = operator new();
  snlp::ssu::espresso::SSUNessieModel::SSUNessieModel(v36, (char *)&v53, buf, a2, a3);
  *a4 = v36;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)buf);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (SHIBYTE(v39.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
}

void sub_1C2281080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,unsigned __int8 a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  void *a72;
  uint64_t v72;

  if (*(char *)(v72 - 169) < 0)
    operator delete(*(void **)(v72 - 192));
  if (a59 < 0)
    operator delete(__p);
  if (a65 < 0)
    operator delete(a60);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a66);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a12, a38);
  if (a45 < 0)
    operator delete(a40);
  std::ifstream::~ifstream(&a72);
  if (a18 < 0)
    operator delete(a13);
  if (a25 < 0)
    operator delete(a20);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModel::getEspressoE5Model(snlp::ssu::espresso::SSUNessieModel *this@<X0>, std::string::size_type a2@<X8>)
{
  char v5;
  NSObject *v6;
  std::string::size_type v7;
  std::runtime_error *exception;
  std::string *v9;
  __int128 v10;
  std::__fs::filesystem::path v11;
  std::string __p;
  std::__fs::filesystem::path v13;
  unsigned __int8 v14;
  std::string buf;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(&v13, 0, sizeof(v13));
  std::string::append[abi:ne180100]<char const*,0>(&v13.__pn_, "nessie_e5.bundle/universal.bundle/universal.e5", "");
  memset(&__p, 0, sizeof(__p));
  std::string::append[abi:ne180100]<char const*,0>(&__p, "nessie.mlmodelc/model.bundle/universal.bundle/universal.e5", "");
  std::__fs::filesystem::operator/[abi:ne180100](&v11.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  std::__fs::filesystem::__status(&v11, 0);
  if (v14 && v14 != 255)
  {
    if ((SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      v5 = 0;
      *(std::__fs::filesystem::path *)a2 = v11;
      goto LABEL_17;
    }
    std::string::__init_copy_ctor_external((std::string *)a2, v11.__pn_.__r_.__value_.__l.__data_, v11.__pn_.__r_.__value_.__l.__size_);
    goto LABEL_16;
  }
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)a2, (uint64_t)this, &v13);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)a2, 0);
  if (v14 && v14 != 255)
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) >= 0)
        v7 = a2;
      else
        v7 = *(_QWORD *)a2;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "Falling back on deprecated Espresso model file: %s", (uint8_t *)&buf, 0xCu);
    }
LABEL_16:
    v5 = 0;
    goto LABEL_17;
  }
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  v5 = 1;
LABEL_17:
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
  if ((v5 & 1) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (*((char *)this + 23) < 0)
      std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
    else
      buf = *(std::string *)this;
    v9 = std::string::insert(&buf, 0, "Could not find Espresso model in ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v11.__pn_.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__pn_.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v11.__pn_);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C22814DC(__int128 a1, uint64_t a2, uint64_t a3, std::string *a4, uint64_t a5, std::string *a6, void *__p, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  __break(1u);
}

void sub_1C2281698(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  int v28;
  void *v29;
  uint64_t v30;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v30 - 41) < 0)
    operator delete(*(void **)(v30 - 64));
  if (a21 < 0)
    operator delete(a16);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v28 & 1) == 0)
      goto LABEL_12;
  }
  else if (!v28)
  {
LABEL_12:
    __cxa_end_catch();
    JUMPOUT(0x1C228172CLL);
  }
  __cxa_free_exception(v29);
  goto LABEL_12;
}

void sub_1C2281754(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1C228174CLL);
}

void snlp::ssu::espresso::SSUNessieModel::forward(uint64_t a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  uint8_t v24[16];
  void *v25[2];
  uint64_t v26;
  void *__p[2];
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint8_t buf[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _OWORD v42[3];

  v6 = (std::mutex *)(a1 + 528);
  std::mutex::lock((std::mutex *)(a1 + 528));
  v7 = SNLPOSLoggerForCategory(7);
  v8 = os_signpost_id_generate(v7);
  v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "SSUNessieModel Inference", "", buf, 2u);
    }
  }
  v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"SSUNessieModel Inference\"", buf, 2u);
  }
  v29 = *a2;
  v23 = v29;
  v30 = *((_QWORD *)a2 + 2);
  v12 = v30;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v31 = *(__int128 *)((char *)a2 + 24);
  v22 = v31;
  v32 = *((_QWORD *)a2 + 5);
  v13 = v32;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  v33 = a2[3];
  v20 = (void *)v33;
  v34 = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  v14 = snlp::ssu::espresso::SSUNessieModel::validateModelInputs((unint64_t *)a1, (uint64_t)&v29);
  snlp::ssu::espresso::SSUNessieModel::buildPaddingMask(a1, (uint64_t)&v33, v14, (uint64_t)v42);
  v15 = v20;
  v19 = (void *)*((_QWORD *)&v42[1] + 1);
  v21 = *(void **)&v42[0];
  *(_OWORD *)buf = v42[0];
  v36 = v42[1];
  v37 = v42[2];
  v38 = v23;
  v30 = 0;
  v29 = 0uLL;
  v40 = v22;
  v39 = v12;
  v41 = v13;
  v32 = 0;
  v31 = 0uLL;
  if (v15)
  {
    *((_QWORD *)&v33 + 1) = v15;
    operator delete(v15);
  }
  snlp::ssu::espresso::SSUNessieModule::forward((snlp::ssu::espresso::SSUNessieModule *)(a1 + 32), (uint64_t **)buf, v42);
  *(_OWORD *)v25 = v42[0];
  v26 = *(_QWORD *)&v42[1];
  memset(v42, 0, sizeof(v42));
  *(_OWORD *)__p = *(_OWORD *)((char *)&v42[1] + 8);
  v28 = *((_QWORD *)&v42[2] + 1);
  snlp::ssu::espresso::SSUNessieModel::buildModelOutputs((unint64_t *)a1, (uint64_t)v25, a3);
  if (__p[0])
    operator delete(__p[0]);
  if (v25[0])
    operator delete(v25[0]);
  v16 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)v24 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v17, OS_SIGNPOST_INTERVAL_END, v8, "SSUNessieModel Inference", "", v24, 2u);
    }
  }
  v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, "END \"SSUNessieModel Inference\"", v24, 2u);
  }
  if (*((_QWORD *)&v42[1] + 1))
  {
    *(_QWORD *)&v42[2] = *((_QWORD *)&v42[1] + 1);
    operator delete(*((void **)&v42[1] + 1));
  }
  if (*(_QWORD *)&v42[0])
  {
    *((_QWORD *)&v42[0] + 1) = *(_QWORD *)&v42[0];
    operator delete(*(void **)&v42[0]);
  }
  if ((_QWORD)v22)
    operator delete((void *)v22);
  if ((_QWORD)v23)
    operator delete((void *)v23);
  if (v19)
    operator delete(v19);
  if (v21)
    operator delete(v21);
  std::mutex::unlock(v6);
}

void sub_1C2281A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::mutex *v35;
  uint64_t v36;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a19);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)(v36 - 128));
  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs((snlp::ssu::espresso::SSUNessieModuleInputs *)&a35);
  std::mutex::unlock(v35);
  _Unwind_Resume(a1);
}

__n128 snlp::ssu::espresso::SSUNessieModel::buildModuleInputs@<Q0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  _OWORD v10[3];

  v6 = snlp::ssu::espresso::SSUNessieModel::validateModelInputs(a1, a2);
  snlp::ssu::espresso::SSUNessieModel::buildPaddingMask((uint64_t)a1, a2 + 48, v6, (uint64_t)v10);
  v7 = v10[1];
  *(_OWORD *)a3 = v10[0];
  *(_OWORD *)(a3 + 16) = v7;
  v8 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 32) = v10[2];
  *(_OWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 64) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a3 + 72) = result;
  *(_QWORD *)(a3 + 88) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

unint64_t *snlp::ssu::espresso::SSUNessieModel::buildModelOutputs@<X0>(unint64_t *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::runtime_error *exception;
  std::string *v15;
  __int128 v16;
  std::runtime_error *v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type size;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  unint64_t v28;
  std::runtime_error *v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;

  v4 = *(_QWORD **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v5 != 16)
  {
    v13 = v5 >> 3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v44, v13);
    v15 = std::string::insert(&v44, 0, "SSUNessieModel moduleOutputs.encodings is of unexpected rank: expected=2, actual=");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v45);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v6 = result;
  v7 = v4[1];
  if (v7 != *result)
  {
    v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, v7);
    v18 = std::string::insert(&v41, 0, "SSUNessieModel moduleOutputs.encodings dimension (");
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v42, ") does not match the expected dimension from config (");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, *v6);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = &v40;
    else
      v22 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      size = v40.__r_.__value_.__l.__size_;
    v24 = std::string::append(&v43, (const std::string::value_type *)v22, size);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v44, ")");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v17, &v45);
    v17->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v10 = *v4 * v7;
  if ((v8 - v9) >> 2 != v10)
  {
    v28 = (v8 - v9) >> 2;
    v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v41, v28);
    v30 = std::string::insert(&v41, 0, "SSUNessieModel moduleOutputs.encodings data size (");
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v42, ") does not match the expected size implied by the shape (");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, v10);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v40;
    else
      v34 = (std::string *)v40.__r_.__value_.__r.__words[0];
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    else
      v35 = v40.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v43, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v44, ")");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v29, &v45);
    v29->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  *a3 = v4;
  a3[1] = v3;
  v11 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  a3[2] = v11;
  a3[3] = v9;
  v12 = *(_QWORD *)(a2 + 40);
  a3[4] = v8;
  a3[5] = v12;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1C2281EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  char v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (*(char *)(v35 - 73) < 0)
    operator delete(*(void **)(v35 - 96));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if ((v34 & 1) != 0)
    __cxa_free_exception(v33);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(snlp::ssu::espresso::SSUNessieModuleInputs *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2)
  {
    *((_QWORD *)this + 10) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

unint64_t snlp::ssu::espresso::SSUNessieModel::validateModelInputs(unint64_t *a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v3;
  unint64_t result;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  std::runtime_error *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  unint64_t v22;
  std::runtime_error *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  unint64_t v40;
  std::runtime_error *exception;
  std::string *v42;
  __int128 v43;
  unint64_t v44;
  std::runtime_error *v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::string::size_type size;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::runtime_error *v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  __int128 v60;
  std::string *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 v64;
  std::string *v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  std::runtime_error *v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  std::string *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  __int128 v79;
  std::string v80;
  std::string v81;
  std::string v82;
  std::string v83;
  std::string v84;
  std::string v85;
  std::string v86;
  std::string v87;
  std::string v88;

  v2 = *(unint64_t **)a2;
  v3 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v3 != 16)
  {
    v40 = v3 >> 3;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v87, v40);
    v42 = std::string::insert(&v87, 0, "SSUNessieModel modelInputs.tokenIds is of unexpected rank: expected=2, actual=");
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v88);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  result = *v2;
  v7 = *(unint64_t **)(a2 + 48);
  v6 = *(unint64_t **)(a2 + 56);
  v8 = (char *)v6 - (char *)v7;
  if (*v2 != v6 - v7)
  {
    v44 = *v2;
    v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v44);
    v46 = std::string::insert(&v84, 0, "SSUNessieModel batch size implied by modelInputs.tokenIds (");
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::string::append(&v85, ") does not match batch size implied by modelInputs.utteranceLengths (");
    v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v49;
    v48->__r_.__value_.__l.__size_ = 0;
    v48->__r_.__value_.__r.__words[2] = 0;
    v48->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v8 >> 3);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = &v83;
    else
      v50 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      size = v83.__r_.__value_.__l.__size_;
    v52 = std::string::append(&v86, (const std::string::value_type *)v50, size);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v87, ")");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v45, &v88);
    v45->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (result < a1[2] || result > a1[3])
  {
    v22 = *v2;
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v82, v22);
    v24 = std::string::insert(&v82, 0, "SSUNessieModel batch size (");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v83.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v83, ") not in valid range [");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v84.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v84.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v81, a1[2]);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v81;
    else
      v28 = (std::string *)v81.__r_.__value_.__r.__words[0];
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    else
      v29 = v81.__r_.__value_.__l.__size_;
    v30 = std::string::append(&v84, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v85, ", ");
    v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v80, a1[3]);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v80;
    else
      v34 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      v35 = v80.__r_.__value_.__l.__size_;
    v36 = std::string::append(&v86, (const std::string::value_type *)v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v87, "]");
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v23, &v88);
    v23->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v9 = v2[1];
  if (v9 != a1[1])
  {
    v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v9);
    v57 = std::string::insert(&v84, 0, "SSUNessieModel sequence length implied by modelInputs.tokenIds (");
    v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v59 = std::string::append(&v85, ") must be equal to the max sequence length from model config (");
    v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, a1[1]);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = &v83;
    else
      v61 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      v62 = v83.__r_.__value_.__l.__size_;
    v63 = std::string::append(&v86, (const std::string::value_type *)v61, v62);
    v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v64;
    v63->__r_.__value_.__l.__size_ = 0;
    v63->__r_.__value_.__r.__words[2] = 0;
    v63->__r_.__value_.__r.__words[0] = 0;
    v65 = std::string::append(&v87, ")");
    v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v56, &v88);
    v56->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2 != v9 * result)
  {
    v67 = v9 * result;
    v68 = (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2;
    v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v84, v68);
    v70 = std::string::insert(&v84, 0, "SSUNessieModel modelInputs.tokenIds data size (");
    v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
    v85.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v71;
    v70->__r_.__value_.__l.__size_ = 0;
    v70->__r_.__value_.__r.__words[2] = 0;
    v70->__r_.__value_.__r.__words[0] = 0;
    v72 = std::string::append(&v85, ") does not match the expected size implied by the shape (");
    v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, v67);
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v74 = &v83;
    else
      v74 = (std::string *)v83.__r_.__value_.__r.__words[0];
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    else
      v75 = v83.__r_.__value_.__l.__size_;
    v76 = std::string::append(&v86, (const std::string::value_type *)v74, v75);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    v78 = std::string::append(&v87, ")");
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v69, &v88);
    v69->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  while (v7 != v6)
  {
    if (*v7 - 1 >= v9)
    {
      v10 = *v7;
      v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v84, v10);
      v12 = std::string::insert(&v84, 0, "SSUNessieModel modelInputs.utteranceLengths contains a value (");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v85.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = std::string::append(&v85, ") outside the valid range [1, ");
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v86.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v83, a1[1]);
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v83;
      else
        v16 = (std::string *)v83.__r_.__value_.__r.__words[0];
      if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
      else
        v17 = v83.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v86, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v87.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v87, "]");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v11, &v88);
      v11->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
    ++v7;
  }
  return result;
}

void sub_1C228279C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  char v47;
  void *v48;
  uint64_t v49;

  if (*(char *)(v49 - 57) < 0)
    operator delete(*(void **)(v49 - 80));
  if (*(char *)(v49 - 89) < 0)
    operator delete(*(void **)(v49 - 112));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v49 - 121) < 0)
    operator delete(*(void **)(v49 - 144));
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if ((v47 & 1) != 0)
    __cxa_free_exception(v48);
  _Unwind_Resume(exception_object);
}

double snlp::ssu::espresso::SSUNessieModel::buildPaddingMask@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  NSObject *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  double result;
  _BYTE v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = operator new(0x10uLL);
  *v9 = a3;
  v9[1] = v8;
  v10 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v18 = 134218240;
    *(_QWORD *)&v18[4] = a3;
    *(_WORD *)&v18[12] = 2048;
    *(_QWORD *)&v18[14] = v8;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "Building padding mask with shape: {%lu, %lu}", v18, 0x16u);
  }
  std::vector<float>::vector(v18, *(_QWORD *)(a1 + 8) * a3, &snlp::ssu::espresso::SSUNessieModel::kPaddingMaskMissingValue);
  v11 = *(_QWORD *)v18;
  v13 = *(_QWORD **)a2;
  v12 = *(_QWORD **)(a2 + 8);
  if (v13 != v12)
  {
    v14 = 4 * *(_QWORD *)(a1 + 8);
    v15 = *(char **)v18;
    do
    {
      if (*v13)
        bzero(v15, 4 * *v13);
      ++v13;
      v15 += v14;
    }
    while (v13 != v12);
  }
  *(_QWORD *)&v16 = v9;
  *((_QWORD *)&v16 + 1) = v9 + 2;
  *(_OWORD *)a4 = v16;
  *(_QWORD *)(a4 + 16) = v9 + 2;
  *(_QWORD *)(a4 + 24) = v11;
  result = *(double *)&v18[8];
  *(_OWORD *)(a4 + 32) = *(_OWORD *)&v18[8];
  return result;
}

void sub_1C2282BD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getMaxBatchSize(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getConfigMaxSeqLength(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((_QWORD *)this + 1);
}

uint64_t snlp::ssu::espresso::SSUNessieModel::getConfigMinBatchSize(snlp::ssu::espresso::SSUNessieModel *this)
{
  return *((_QWORD *)this + 2);
}

uaap::DDUsoMapper *uaap::DDUsoMapper::DDUsoMapper(int64x2_t *this)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  int64x2_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  int64x2_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  int64x2_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  int64x2_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  int64x2_t v119;
  uint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  int64x2_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  unint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  int64x2_t v153;
  uint64_t v154;
  uint64_t v156;
  int64x2_t v157;
  unint64_t v158;
  int64x2_t *v159;

  this->i64[0] = 0;
  this->i64[1] = 0;
  this[1].i64[0] = 0;
  v2 = (_QWORD *)operator new();
  v3 = v2;
  *v2 = &off_1E7BE9E20;
  v4 = this[1].u64[0];
  v5 = (_QWORD *)this->i64[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - this->i64[0]) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v8 = v4 - this->i64[0];
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v159 = this + 1;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    v158 = v13;
    *v12 = v3;
    v6 = v12 + 1;
    v157.i64[1] = (uint64_t)(v12 + 1);
    v15 = (_QWORD *)this->i64[0];
    v14 = (_QWORD *)this->i64[1];
    if (v14 == (_QWORD *)this->i64[0])
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *--v12 = v16;
      }
      while (v14 != v15);
      v17 = *this;
      v6 = (_QWORD *)v157.i64[1];
      v13 = v158;
    }
    this->i64[0] = (uint64_t)v12;
    this->i64[1] = (uint64_t)v6;
    v157 = v17;
    v18 = this[1].i64[0];
    this[1].i64[0] = v13;
    v158 = v18;
    v156 = v17.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v5 = v2;
    v6 = v5 + 1;
  }
  this->i64[1] = (uint64_t)v6;
  v19 = (_QWORD *)operator new();
  v20 = v19;
  *v19 = &off_1E7BE9F00;
  v22 = (_QWORD *)this->i64[1];
  v21 = this[1].u64[0];
  if ((unint64_t)v22 >= v21)
  {
    v24 = ((uint64_t)v22 - this->i64[0]) >> 3;
    if ((unint64_t)(v24 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v25 = v21 - this->i64[0];
    v26 = v25 >> 2;
    if (v25 >> 2 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    v159 = this + 1;
    if (v27)
      v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v27);
    else
      v28 = 0;
    v29 = (_QWORD *)(v27 + 8 * v24);
    v30 = v27 + 8 * v28;
    v158 = v30;
    *v29 = v20;
    v23 = v29 + 1;
    v157.i64[1] = (uint64_t)(v29 + 1);
    v32 = (_QWORD *)this->i64[0];
    v31 = (_QWORD *)this->i64[1];
    if (v31 == (_QWORD *)this->i64[0])
    {
      v34 = vdupq_n_s64((unint64_t)v31);
    }
    else
    {
      do
      {
        v33 = *--v31;
        *v31 = 0;
        *--v29 = v33;
      }
      while (v31 != v32);
      v34 = *this;
      v23 = (_QWORD *)v157.i64[1];
      v30 = v158;
    }
    this->i64[0] = (uint64_t)v29;
    this->i64[1] = (uint64_t)v23;
    v157 = v34;
    v35 = this[1].i64[0];
    this[1].i64[0] = v30;
    v158 = v35;
    v156 = v34.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v22 = v19;
    v23 = v22 + 1;
  }
  this->i64[1] = (uint64_t)v23;
  v36 = (_QWORD *)operator new();
  v37 = v36;
  *v36 = &off_1E7BE9F90;
  v39 = (_QWORD *)this->i64[1];
  v38 = this[1].u64[0];
  if ((unint64_t)v39 >= v38)
  {
    v41 = ((uint64_t)v39 - this->i64[0]) >> 3;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v42 = v38 - this->i64[0];
    v43 = v42 >> 2;
    if (v42 >> 2 <= (unint64_t)(v41 + 1))
      v43 = v41 + 1;
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v43;
    v159 = this + 1;
    if (v44)
      v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v44);
    else
      v45 = 0;
    v46 = (_QWORD *)(v44 + 8 * v41);
    v47 = v44 + 8 * v45;
    v158 = v47;
    *v46 = v37;
    v40 = v46 + 1;
    v157.i64[1] = (uint64_t)(v46 + 1);
    v49 = (_QWORD *)this->i64[0];
    v48 = (_QWORD *)this->i64[1];
    if (v48 == (_QWORD *)this->i64[0])
    {
      v51 = vdupq_n_s64((unint64_t)v48);
    }
    else
    {
      do
      {
        v50 = *--v48;
        *v48 = 0;
        *--v46 = v50;
      }
      while (v48 != v49);
      v51 = *this;
      v40 = (_QWORD *)v157.i64[1];
      v47 = v158;
    }
    this->i64[0] = (uint64_t)v46;
    this->i64[1] = (uint64_t)v40;
    v157 = v51;
    v52 = this[1].i64[0];
    this[1].i64[0] = v47;
    v158 = v52;
    v156 = v51.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v39 = v36;
    v40 = v39 + 1;
  }
  this->i64[1] = (uint64_t)v40;
  v53 = (_QWORD *)operator new();
  v54 = v53;
  *v53 = &off_1E7BE9E48;
  v56 = (_QWORD *)this->i64[1];
  v55 = this[1].u64[0];
  if ((unint64_t)v56 >= v55)
  {
    v58 = ((uint64_t)v56 - this->i64[0]) >> 3;
    if ((unint64_t)(v58 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v59 = v55 - this->i64[0];
    v60 = v59 >> 2;
    if (v59 >> 2 <= (unint64_t)(v58 + 1))
      v60 = v58 + 1;
    if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
      v61 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v61 = v60;
    v159 = this + 1;
    if (v61)
      v61 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v61);
    else
      v62 = 0;
    v63 = (_QWORD *)(v61 + 8 * v58);
    v64 = v61 + 8 * v62;
    v158 = v64;
    *v63 = v54;
    v57 = v63 + 1;
    v157.i64[1] = (uint64_t)(v63 + 1);
    v66 = (_QWORD *)this->i64[0];
    v65 = (_QWORD *)this->i64[1];
    if (v65 == (_QWORD *)this->i64[0])
    {
      v68 = vdupq_n_s64((unint64_t)v65);
    }
    else
    {
      do
      {
        v67 = *--v65;
        *v65 = 0;
        *--v63 = v67;
      }
      while (v65 != v66);
      v68 = *this;
      v57 = (_QWORD *)v157.i64[1];
      v64 = v158;
    }
    this->i64[0] = (uint64_t)v63;
    this->i64[1] = (uint64_t)v57;
    v157 = v68;
    v69 = this[1].i64[0];
    this[1].i64[0] = v64;
    v158 = v69;
    v156 = v68.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v56 = v53;
    v57 = v56 + 1;
  }
  this->i64[1] = (uint64_t)v57;
  v70 = (_QWORD *)operator new();
  v71 = v70;
  *v70 = &off_1E7BE9EB0;
  v73 = (_QWORD *)this->i64[1];
  v72 = this[1].u64[0];
  if ((unint64_t)v73 >= v72)
  {
    v75 = ((uint64_t)v73 - this->i64[0]) >> 3;
    if ((unint64_t)(v75 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v76 = v72 - this->i64[0];
    v77 = v76 >> 2;
    if (v76 >> 2 <= (unint64_t)(v75 + 1))
      v77 = v75 + 1;
    if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    v159 = this + 1;
    if (v78)
      v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v78);
    else
      v79 = 0;
    v80 = (_QWORD *)(v78 + 8 * v75);
    v81 = v78 + 8 * v79;
    v158 = v81;
    *v80 = v71;
    v74 = v80 + 1;
    v157.i64[1] = (uint64_t)(v80 + 1);
    v83 = (_QWORD *)this->i64[0];
    v82 = (_QWORD *)this->i64[1];
    if (v82 == (_QWORD *)this->i64[0])
    {
      v85 = vdupq_n_s64((unint64_t)v82);
    }
    else
    {
      do
      {
        v84 = *--v82;
        *v82 = 0;
        *--v80 = v84;
      }
      while (v82 != v83);
      v85 = *this;
      v74 = (_QWORD *)v157.i64[1];
      v81 = v158;
    }
    this->i64[0] = (uint64_t)v80;
    this->i64[1] = (uint64_t)v74;
    v157 = v85;
    v86 = this[1].i64[0];
    this[1].i64[0] = v81;
    v158 = v86;
    v156 = v85.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v73 = v70;
    v74 = v73 + 1;
  }
  this->i64[1] = (uint64_t)v74;
  v87 = (_QWORD *)operator new();
  v88 = v87;
  *v87 = &off_1E7BE9F68;
  v90 = (_QWORD *)this->i64[1];
  v89 = this[1].u64[0];
  if ((unint64_t)v90 >= v89)
  {
    v92 = ((uint64_t)v90 - this->i64[0]) >> 3;
    if ((unint64_t)(v92 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v93 = v89 - this->i64[0];
    v94 = v93 >> 2;
    if (v93 >> 2 <= (unint64_t)(v92 + 1))
      v94 = v92 + 1;
    if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
      v95 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v95 = v94;
    v159 = this + 1;
    if (v95)
      v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v95);
    else
      v96 = 0;
    v97 = (_QWORD *)(v95 + 8 * v92);
    v98 = v95 + 8 * v96;
    v158 = v98;
    *v97 = v88;
    v91 = v97 + 1;
    v157.i64[1] = (uint64_t)(v97 + 1);
    v100 = (_QWORD *)this->i64[0];
    v99 = (_QWORD *)this->i64[1];
    if (v99 == (_QWORD *)this->i64[0])
    {
      v102 = vdupq_n_s64((unint64_t)v99);
    }
    else
    {
      do
      {
        v101 = *--v99;
        *v99 = 0;
        *--v97 = v101;
      }
      while (v99 != v100);
      v102 = *this;
      v91 = (_QWORD *)v157.i64[1];
      v98 = v158;
    }
    this->i64[0] = (uint64_t)v97;
    this->i64[1] = (uint64_t)v91;
    v157 = v102;
    v103 = this[1].i64[0];
    this[1].i64[0] = v98;
    v158 = v103;
    v156 = v102.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v90 = v87;
    v91 = v90 + 1;
  }
  this->i64[1] = (uint64_t)v91;
  v104 = (_QWORD *)operator new();
  v105 = v104;
  *v104 = &off_1E7BE9ED8;
  v107 = (_QWORD *)this->i64[1];
  v106 = this[1].u64[0];
  if ((unint64_t)v107 >= v106)
  {
    v109 = ((uint64_t)v107 - this->i64[0]) >> 3;
    if ((unint64_t)(v109 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v110 = v106 - this->i64[0];
    v111 = v110 >> 2;
    if (v110 >> 2 <= (unint64_t)(v109 + 1))
      v111 = v109 + 1;
    if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
      v112 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v112 = v111;
    v159 = this + 1;
    if (v112)
      v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v112);
    else
      v113 = 0;
    v114 = (_QWORD *)(v112 + 8 * v109);
    v115 = v112 + 8 * v113;
    v158 = v115;
    *v114 = v105;
    v108 = v114 + 1;
    v157.i64[1] = (uint64_t)(v114 + 1);
    v117 = (_QWORD *)this->i64[0];
    v116 = (_QWORD *)this->i64[1];
    if (v116 == (_QWORD *)this->i64[0])
    {
      v119 = vdupq_n_s64((unint64_t)v116);
    }
    else
    {
      do
      {
        v118 = *--v116;
        *v116 = 0;
        *--v114 = v118;
      }
      while (v116 != v117);
      v119 = *this;
      v108 = (_QWORD *)v157.i64[1];
      v115 = v158;
    }
    this->i64[0] = (uint64_t)v114;
    this->i64[1] = (uint64_t)v108;
    v157 = v119;
    v120 = this[1].i64[0];
    this[1].i64[0] = v115;
    v158 = v120;
    v156 = v119.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v107 = v104;
    v108 = v107 + 1;
  }
  this->i64[1] = (uint64_t)v108;
  v121 = (_QWORD *)operator new();
  v122 = v121;
  *v121 = &off_1E7BEA0A0;
  v124 = (_QWORD *)this->i64[1];
  v123 = this[1].u64[0];
  if ((unint64_t)v124 >= v123)
  {
    v126 = ((uint64_t)v124 - this->i64[0]) >> 3;
    if ((unint64_t)(v126 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v127 = v123 - this->i64[0];
    v128 = v127 >> 2;
    if (v127 >> 2 <= (unint64_t)(v126 + 1))
      v128 = v126 + 1;
    if ((unint64_t)v127 >= 0x7FFFFFFFFFFFFFF8)
      v129 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v129 = v128;
    v159 = this + 1;
    if (v129)
      v129 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v129);
    else
      v130 = 0;
    v131 = (_QWORD *)(v129 + 8 * v126);
    v132 = v129 + 8 * v130;
    v158 = v132;
    *v131 = v122;
    v125 = v131 + 1;
    v157.i64[1] = (uint64_t)(v131 + 1);
    v134 = (_QWORD *)this->i64[0];
    v133 = (_QWORD *)this->i64[1];
    if (v133 == (_QWORD *)this->i64[0])
    {
      v136 = vdupq_n_s64((unint64_t)v133);
    }
    else
    {
      do
      {
        v135 = *--v133;
        *v133 = 0;
        *--v131 = v135;
      }
      while (v133 != v134);
      v136 = *this;
      v125 = (_QWORD *)v157.i64[1];
      v132 = v158;
    }
    this->i64[0] = (uint64_t)v131;
    this->i64[1] = (uint64_t)v125;
    v157 = v136;
    v137 = this[1].i64[0];
    this[1].i64[0] = v132;
    v158 = v137;
    v156 = v136.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v124 = v121;
    v125 = v124 + 1;
  }
  this->i64[1] = (uint64_t)v125;
  v138 = (_QWORD *)operator new();
  v139 = v138;
  *v138 = &off_1E7BEA078;
  v141 = (_QWORD *)this->i64[1];
  v140 = this[1].u64[0];
  if ((unint64_t)v141 >= v140)
  {
    v143 = ((uint64_t)v141 - this->i64[0]) >> 3;
    if ((unint64_t)(v143 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v144 = v140 - this->i64[0];
    v145 = v144 >> 2;
    if (v144 >> 2 <= (unint64_t)(v143 + 1))
      v145 = v143 + 1;
    if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF8)
      v146 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v146 = v145;
    v159 = this + 1;
    if (v146)
      v146 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v146);
    else
      v147 = 0;
    v148 = (_QWORD *)(v146 + 8 * v143);
    v149 = v146 + 8 * v147;
    v158 = v149;
    *v148 = v139;
    v142 = v148 + 1;
    v157.i64[1] = (uint64_t)(v148 + 1);
    v151 = (_QWORD *)this->i64[0];
    v150 = (_QWORD *)this->i64[1];
    if (v150 == (_QWORD *)this->i64[0])
    {
      v153 = vdupq_n_s64((unint64_t)v150);
    }
    else
    {
      do
      {
        v152 = *--v150;
        *v150 = 0;
        *--v148 = v152;
      }
      while (v150 != v151);
      v153 = *this;
      v142 = (_QWORD *)v157.i64[1];
      v149 = v158;
    }
    this->i64[0] = (uint64_t)v148;
    this->i64[1] = (uint64_t)v142;
    v157 = v153;
    v154 = this[1].i64[0];
    this[1].i64[0] = v149;
    v158 = v154;
    v156 = v153.i64[0];
    std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v156);
  }
  else
  {
    *v141 = v138;
    v142 = v141 + 1;
  }
  this->i64[1] = (uint64_t)v142;
  return (uaap::DDUsoMapper *)this;
}

void sub_1C228351C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  v7 = v6;
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *uaap::DDUsoMapper::mapDateTimeByHandlers(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t *v10;
  unint64_t v11;

  v5 = *result;
  if (result[1] != *result)
  {
    v10 = result;
    v11 = 0;
    do
    {
      result = (uint64_t *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v5 + 8 * v11)
                                                                                                + 16))(*(_QWORD *)(v5 + 8 * v11), a2, a3, a4, a5);
      ++v11;
      v5 = *v10;
    }
    while (v11 < (v10[1] - *v10) >> 3);
  }
  return result;
}

uint64_t uaap::DDUsoMapper::flattenToDDSpans(uint64_t a1, __DDResult *a2, uint64_t *a3)
{
  CFHashCode v3;
  const void *Type;
  uaap::UPDDDateTimeSpan *v8;
  CFHashCode v9;
  CFHashCode v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uaap::UPDDDateTimeSpan **v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uaap::UPDDDateTimeSpan **v46;
  uaap::UPDDDateTimeSpan *v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  const __CFArray *v54;
  uint64_t v55;
  CFIndex j;
  const void *ValueAtIndex;
  void *v58;
  uaap::UPDDSpan *v59;
  __DDResult *v60;

  v60 = a2;
  Type = (const void *)DDResultGetType();
  if (CFEqual(Type, CFSTR("DateTime")))
  {
    v8 = (uaap::UPDDDateTimeSpan *)operator new();
    uaap::UPDDDateTimeSpan::UPDDDateTimeSpan(v8, a2);
  }
  else if (CFEqual(Type, CFSTR("TimeDuration")))
  {
    v8 = (uaap::UPDDDateTimeSpan *)operator new();
    uaap::UPDDTimeDurationSpan::UPDDTimeDurationSpan(v8, a2);
  }
  else if (CFEqual(Type, CFSTR("TimeSpanWithReference")))
  {
    v8 = (uaap::UPDDDateTimeSpan *)operator new();
    uaap::UPDDTimeSpanWithReference::UPDDTimeSpanWithReference(v8, a2);
  }
  else if (CFEqual(Type, CFSTR("DateSpanWithReference")))
  {
    v8 = (uaap::UPDDDateTimeSpan *)operator new();
    uaap::UPDDDateSpanWithReference::UPDDDateSpanWithReference(v8, a2);
  }
  else
  {
    if (CFEqual(Type, CFSTR("Time")) || CFEqual(Type, CFSTR("TimeSpan")))
    {
      std::make_unique[abi:ne180100]<uaap::UPDDTimeSpan,__DDResult *&>(&v59, &v60);
    }
    else if (CFEqual(Type, CFSTR("Date")) || CFEqual(Type, CFSTR("DateSpan")))
    {
      std::make_unique[abi:ne180100]<uaap::UPDDDateSpan,__DDResult *&>(&v59, &v60);
    }
    else
    {
      std::make_unique[abi:ne180100]<uaap::UPDDSpan,__DDResult *&>(&v59, &v60);
    }
    v8 = v59;
  }
  v9 = CFHash(Type);
  v10 = v9;
  v11 = a3[1];
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD ***)(*a3 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == v9)
            goto LABEL_86;
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11)
              v15 %= v11;
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x30uLL);
  v16 = a3 + 2;
  *i = 0;
  i[1] = v10;
  i[2] = v10;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  v17 = (float)(unint64_t)(a3[3] + 1);
  v18 = *((float *)a3 + 8);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v11 = a3[1];
    }
    if (*(_QWORD *)&prime > v11)
      goto LABEL_42;
    if (*(_QWORD *)&prime < v11)
    {
      v29 = vcvtps_u32_f32((float)(unint64_t)a3[3] / *((float *)a3 + 8));
      if (v11 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v11)
      {
        v11 = a3[1];
      }
      else
      {
        if (prime)
        {
LABEL_42:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = (void *)*a3;
          *a3 = (uint64_t)v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          a3[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a3 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v16;
          if (*v16)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a3 + 8 * v27) = v16;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*a3 + 8 * v33))
                  {
                    *(_QWORD *)(*a3 + 8 * v33) = v26;
                    goto LABEL_67;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*a3 + 8 * v33);
                  **(_QWORD **)(*a3 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_67:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v11 = (unint64_t)prime;
          goto LABEL_71;
        }
        v58 = (void *)*a3;
        *a3 = 0;
        if (v58)
          operator delete(v58);
        v11 = 0;
        a3[1] = 0;
      }
    }
LABEL_71:
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v34 = *a3;
  v35 = *(_QWORD **)(*a3 + 8 * v3);
  if (v35)
  {
    *i = *v35;
LABEL_84:
    *v35 = i;
    goto LABEL_85;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v34 + 8 * v3) = v16;
  if (*i)
  {
    v36 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v36 >= v11)
        v36 %= v11;
    }
    else
    {
      v36 &= v11 - 1;
    }
    v35 = (_QWORD *)(*a3 + 8 * v36);
    goto LABEL_84;
  }
LABEL_85:
  ++a3[3];
LABEL_86:
  v37 = (uaap::UPDDDateTimeSpan **)i[4];
  v38 = i[5];
  if ((unint64_t)v37 >= v38)
  {
    v40 = (_QWORD *)i[3];
    v41 = v37 - (uaap::UPDDDateTimeSpan **)v40;
    v42 = v41 + 1;
    if ((unint64_t)(v41 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v43 = v38 - (_QWORD)v40;
    if (v43 >> 2 > v42)
      v42 = v43 >> 2;
    if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8)
      v44 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v44 = v42;
    if (v44)
    {
      if (v44 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v45 = (char *)operator new(8 * v44);
      v40 = (_QWORD *)i[3];
      v37 = (uaap::UPDDDateTimeSpan **)i[4];
    }
    else
    {
      v45 = 0;
    }
    v46 = (uaap::UPDDDateTimeSpan **)&v45[8 * v41];
    *v46 = v8;
    v39 = v46 + 1;
    while (v37 != v40)
    {
      v47 = *--v37;
      *v37 = 0;
      *--v46 = v47;
    }
    v48 = *(_OWORD *)(i + 3);
    i[3] = v46;
    i[4] = v39;
    i[5] = &v45[8 * v44];
    v49 = (_QWORD *)*((_QWORD *)&v48 + 1);
    v50 = (_QWORD *)v48;
    while (v49 != v50)
    {
      v52 = *--v49;
      v51 = v52;
      *v49 = 0;
      if (v52)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    }
    if (v50)
      operator delete(v50);
  }
  else
  {
    *v37 = v8;
    v39 = v37 + 1;
  }
  i[4] = v39;
  result = DDResultGetSubResults();
  if (result)
  {
    v54 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v55 = result;
      for (j = 0; j != v55; ++j)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v54, j);
        result = uaap::DDUsoMapper::flattenToDDSpans(a1, ValueAtIndex, a3);
      }
    }
  }
  return result;
}

void sub_1C2283DB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C401BE6E4D3);
  _Unwind_Resume(a1);
}

uaap::UPDDTimeSpan *std::make_unique[abi:ne180100]<uaap::UPDDTimeSpan,__DDResult *&>(uaap::UPDDTimeSpan **a1, __DDResult **a2)
{
  uaap::UPDDTimeSpan *v4;
  uaap::UPDDTimeSpan *result;

  v4 = (uaap::UPDDTimeSpan *)operator new();
  result = uaap::UPDDTimeSpan::UPDDTimeSpan(v4, *a2);
  *a1 = v4;
  return result;
}

void sub_1C2283E84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C406A116140);
  _Unwind_Resume(a1);
}

uaap::UPDDDateSpan *std::make_unique[abi:ne180100]<uaap::UPDDDateSpan,__DDResult *&>(uaap::UPDDDateSpan **a1, __DDResult **a2)
{
  uaap::UPDDDateSpan *v4;
  uaap::UPDDDateSpan *result;

  v4 = (uaap::UPDDDateSpan *)operator new();
  result = uaap::UPDDDateSpan::UPDDDateSpan(v4, *a2);
  *a1 = v4;
  return result;
}

void sub_1C2283EF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C402100513ELL);
  _Unwind_Resume(a1);
}

uaap::UPDDSpan *std::make_unique[abi:ne180100]<uaap::UPDDSpan,__DDResult *&>(uaap::UPDDSpan **a1, __DDResult **a2)
{
  uaap::UPDDSpan *v4;
  __DDResult *v5;
  const __CFString *Value;
  uaap::UPDDSpan *result;

  v4 = (uaap::UPDDSpan *)operator new();
  v5 = *a2;
  Value = (const __CFString *)DDResultGetValue();
  result = uaap::UPDDSpan::UPDDSpan(v4, v5, Value);
  *a1 = v4;
  return result;
}

void sub_1C2283F80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10E1C40AC054123);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  void **v3;

  if (a1)
  {
    v3 = __p + 3;
    std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p)
    operator delete(__p);
}

uaap::UPDDSpan *uaap::UPDDSpan::UPDDSpan(uaap::UPDDSpan *this, __DDResult *a2, const __CFString *a3)
{
  int Range;
  int v6;
  int v7;
  const __CFString *Type;

  Range = DDResultGetRange();
  v7 = v6;
  Type = (const __CFString *)DDResultGetType();
  return uaap::UPDDSpan::UPDDSpan(this, Type, a3, Range, v7 + Range);
}

uaap::UPDDSpan *uaap::UPDDSpan::UPDDSpan(uaap::UPDDSpan *this, const __CFString *a2, const __CFString *a3, int a4, int a5)
{
  CFStringRef Copy;
  uint64_t (*v10)(_QWORD);

  *(_QWORD *)this = &off_1E7BEA0C8;
  Copy = CFStringCreateCopy(0, a2);
  v10 = MEMORY[0x1E0C98BC0];
  *((_QWORD *)this + 1) = Copy;
  *((_QWORD *)this + 2) = v10;
  *((_QWORD *)this + 3) = CFStringCreateCopy(0, a3);
  *((_QWORD *)this + 4) = v10;
  *((_DWORD *)this + 10) = a4;
  *((_DWORD *)this + 11) = a5;
  return this;
}

void sub_1C22840C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  if (v3)
    (*(void (**)(void))(v1 + 16))();
  _Unwind_Resume(exception_object);
}

void uaap::UPDDSpan::~UPDDSpan(uaap::UPDDSpan *this)
{
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BEA0C8;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*((void (**)(void))this + 4))();
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*((void (**)(void))this + 2))();
}

BOOL uaap::DDUsoMapper::toItemizedUsos(uint64_t *a1, CFArrayRef theArray, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex i;
  __DDResult *ValueAtIndex;
  uint64_t v12;
  uint64_t v13;

  v7 = *a3;
  v6 = a3[1];
  Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    v9 = Count;
    for (i = 0; i != v9; ++i)
    {
      ValueAtIndex = (__DDResult *)CFArrayGetValueAtIndex(theArray, i);
      v12 = operator new();
      *(_OWORD *)v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
      *(_DWORD *)(v12 + 32) = 1065353216;
      uaap::DDUsoMapper::flattenToDDSpans((uint64_t)a1, ValueAtIndex, (uint64_t *)v12);
      uaap::DDUsoMapper::mapDateTimeByHandlers(a1, (uint64_t)ValueAtIndex, v12, (uint64_t)a3, 1);
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(v12);
      MEMORY[0x1C3BB9B44](v13, 0x10A0C408EF24B1CLL);
    }
  }
  return a3[1] - *a3 > (unint64_t)(v6 - v7);
}

void sub_1C228427C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(uint64_t a1)
{
  char *v2;
  char *v3;
  void *v4;
  void **v6;

  v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *(char **)v2;
      v6 = (void **)(v2 + 24);
      std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100](&v6);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

BOOL uaap::DDUsoMapper::toItemizedUsos(uint64_t *a1, __DDResult *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v7 = *a3;
  v6 = a3[1];
  v8 = operator new();
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_DWORD *)(v8 + 32) = 1065353216;
  uaap::DDUsoMapper::flattenToDDSpans((uint64_t)a1, a2, (uint64_t *)v8);
  uaap::DDUsoMapper::mapDateTimeByHandlers(a1, (uint64_t)a2, v8, (uint64_t)a3, 1);
  v11 = a3;
  v9 = *a3;
  v10 = v11[1];
  v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(v8);
  MEMORY[0x1C3BB9B44](v12, 0x10A0C408EF24B1CLL);
  return v10 - v9 > (unint64_t)(v6 - v7);
}

void sub_1C2284400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL uaap::DDUsoMapper::toUso(uaap::DDUsoMapper *this, __DDResult *a2, siri::ontology::UsoGraph *a3)
{
  uint64_t v6;
  uint64_t v7;
  siri::ontology::UsoGraph **v8;
  siri::ontology::UsoGraph **v9;
  uint64_t v10;
  void **v12[2];

  v6 = operator new();
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_DWORD *)(v6 + 32) = 1065353216;
  v12[1] = (void **)v6;
  uaap::DDUsoMapper::flattenToDDSpans((uint64_t)this, a2, (uint64_t *)v6);
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  v12[0] = (void **)v7;
  uaap::DDUsoMapper::mapDateTimeByHandlers((uint64_t *)this, (uint64_t)a2, v6, v7, 0);
  v9 = *(siri::ontology::UsoGraph ***)v7;
  v8 = *(siri::ontology::UsoGraph ***)(v7 + 8);
  if (v8 != *(siri::ontology::UsoGraph ***)v7)
    siri::ontology::UsoGraph::deepCopyToGraph(*v9, *((const UsoGraphNode **)*v9 + 11), a3);
  std::unique_ptr<std::vector<std::unique_ptr<siri::ontology::UsoGraph>>>::reset[abi:ne180100](v12);
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::~__hash_table(v6);
  MEMORY[0x1C3BB9B44](v10, 0x10A0C408EF24B1CLL);
  return v8 != v9;
}

void sub_1C228451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10)
{
  std::unique_ptr<std::vector<std::unique_ptr<siri::ontology::UsoGraph>>>::reset[abi:ne180100](&a9);
  std::unique_ptr<std::unordered_map<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>::reset[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<std::vector<std::unique_ptr<siri::ontology::UsoGraph>>>::reset[abi:ne180100](void ***result)
{
  void **v1;
  void **v2;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    v2 = v1;
    std::vector<std::unique_ptr<siri::ontology::UsoGraph>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::vector<std::unique_ptr<siri::ontology::UsoGraph>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void uaap::DDUsoMapper::getSpanRangeFromUtteranceAlignments(uaap::DDUsoMapper *this@<X0>, uint64_t a2@<X8>)
{
  const void **v4;
  const struct __class_type_info *v5;
  siri::ontology::UsoEntityNode *v6;
  siri::ontology::UsoUtteranceAlignment *UtteranceAlignment;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int **v11;
  const void **__p;
  const void **v13;

  siri::ontology::oname::graph::ontology_init::Argument_entity(this);
  siri::ontology::UsoGraph::getSuccessors();
  v4 = __p;
  if (__p == v13)
  {
LABEL_9:
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 16) = 0;
    goto LABEL_10;
  }
  v5 = (const struct __class_type_info *)MEMORY[0x1E0DA35B0];
  while (1)
  {
    if (v6)
    {
      if (*((_QWORD *)v6 + 7) != *((_QWORD *)v6 + 8))
        break;
    }
LABEL_8:
    if (++v4 == v13)
      goto LABEL_9;
  }
  UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(v6);
  siri::ontology::UsoUtteranceAlignment::getSpans(UtteranceAlignment);
  if (v11 == v10)
  {
    if (v11)
      operator delete(v11);
    goto LABEL_8;
  }
  v8 = **v10;
  v9 = (*v10)[1] - v8;
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_BYTE *)(a2 + 16) = 1;
  operator delete(v10);
LABEL_10:
  if (__p)
    operator delete(__p);
}

void sub_1C2284710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::__optional_copy_base[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  this->__r_.__value_.__s.__data_[0] = 0;
  this[3].__r_.__value_.__s.__data_[8] = 0;
  if (*((_BYTE *)a2 + 80))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    if (*((char *)a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
    }
    else
    {
      v5 = *(__int128 *)((char *)a2 + 24);
      this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
    }
    v6 = this + 2;
    if (*((char *)a2 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    }
    else
    {
      v7 = a2[3];
      this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    LODWORD(this[3].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 18);
    this[3].__r_.__value_.__s.__data_[8] = 1;
  }
  return this;
}

void sub_1C2284D08(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::MILCompiler::~MILCompiler(void **this)
{
  if (*((_BYTE *)this + 120) && *((char *)this + 119) < 0)
    operator delete(this[12]);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 1));
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(unsigned __int8 *a1, char *a2, uint64_t a3, _DWORD *a4, __int128 *a5)
{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)a1, a2, a3, a4, a1, a5);
}

{
  return snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule((uint64_t)a1, a2, a3, a4, a1, a5);
}

void snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation(snlp::common::espresso_inference::e5ml::EspressoE5MLModule *this, std::__fs::filesystem::path *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::createInferenceOperation((uint64_t)this, a2, (unsigned __int8 *)this);
}

uint64_t snlp::common::espresso_inference::e5ml::EspressoE5MLModule::wireMemory()
{
  return _os_feature_enabled_impl();
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::MemoryObject>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

uint64_t std::for_each[abi:ne180100]<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *> *>>,snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(void)::$_0>(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  __int128 *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 *v12[2];

  if (a1)
  {
    v3 = a1;
    do
    {
      v4 = v3[5];
      v12[0] = (__int128 *)(v3 + 2);
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::MemoryObject>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2 + 312, (unsigned __int8 *)v3 + 16, v12);
      v6 = (__int128 *)*((_QWORD *)v5 + 6);
      v12[0] = *((__int128 **)v5 + 5);
      v12[1] = v6;
      if (v6)
      {
        v7 = (unint64_t *)v6 + 1;
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindMemory((uint64_t)v5, v4, (uint64_t)v12);
      if (v6)
      {
        v9 = (unint64_t *)v6 + 1;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          (*(void (**)(__int128 *))(*(_QWORD *)v6 + 16))(v6);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
        }
      }
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return a2;
}

void sub_1C2284FCC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::WeightsHandler::throwInconsistentPortDataTypeError(uint64_t a1, const void **a2, int *a3, int *a4)
{
  _QWORD *v7;
  std::runtime_error *exception;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t *v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  uint64_t *v23;
  int v24;
  const std::string::value_type *v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  std::runtime_error *v29;
  char *v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int128 v35;
  int64_t v36;
  _QWORD v37[2];
  unsigned __int8 v38;
  _QWORD v39[2];
  unsigned __int8 v40;
  std::string v41;

  v7 = (_QWORD *)(a1 + 40);
  if (!std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>((_QWORD *)(a1 + 40), *a3)|| !std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(v7, *a4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v41);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "Inconsistent data type for port ");
  std::string::basic_string[abi:ne180100]<0>(v39, ". Found weight type ");
  std::string::basic_string[abi:ne180100]<0>(v37, ", but the already-recorded weights type for this port was ");
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v31, (const void **)&v41.__r_.__value_.__l.__data_, a2);
  if ((v40 & 0x80u) == 0)
    v9 = (const std::string::value_type *)v39;
  else
    v9 = (const std::string::value_type *)v39[0];
  if ((v40 & 0x80u) == 0)
    v10 = v40;
  else
    v10 = v39[1];
  v11 = std::string::append(&v31, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(v7, *a4);
  v14 = *((char *)v13 + 23);
  if (v14 >= 0)
    v15 = (const std::string::value_type *)v13;
  else
    v15 = (const std::string::value_type *)*v13;
  if (v14 >= 0)
    v16 = *((unsigned __int8 *)v13 + 23);
  else
    v16 = v13[1];
  v17 = std::string::append(&v32, v15, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if ((v38 & 0x80u) == 0)
    v19 = (const std::string::value_type *)v37;
  else
    v19 = (const std::string::value_type *)v37[0];
  if ((v38 & 0x80u) == 0)
    v20 = v38;
  else
    v20 = v37[1];
  v21 = std::string::append(&v33, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(v7, *a3);
  v24 = *((char *)v23 + 23);
  if (v24 >= 0)
    v25 = (const std::string::value_type *)v23;
  else
    v25 = (const std::string::value_type *)*v23;
  if (v24 >= 0)
    v26 = *((unsigned __int8 *)v23 + 23);
  else
    v26 = v23[1];
  v27 = std::string::append(&v34, v25, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v36 = v27->__r_.__value_.__r.__words[2];
  v35 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  if (v36 >= 0)
    v30 = (char *)&v35;
  else
    v30 = (char *)v35;
  std::string::basic_string[abi:ne180100]<0>(&v34, v30);
  std::runtime_error::runtime_error(v29, &v34);
  v29->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
}

void sub_1C2285290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  int v43;
  uint64_t v44;

  if (a35 < 0)
  {
    operator delete(__p);
    if ((v43 & 1) == 0)
    {
LABEL_6:
      if (a42 < 0)
        operator delete(a37);
      if (*(char *)(v44 - 97) < 0)
        operator delete(*(void **)(v44 - 120));
      if (*(char *)(v44 - 73) < 0)
        operator delete(*(void **)(v44 - 96));
      if (*(char *)(v44 - 49) < 0)
        operator delete(*(void **)(v44 - 72));
      _Unwind_Resume(a1);
    }
  }
  else if (!v43)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v42);
  goto LABEL_6;
}

uint64_t *std::unordered_map<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>::at(_QWORD *a1, int a2)
{
  uint64_t *v2;

  v2 = std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(a1, a2);
  if (!v2)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  return v2 + 3;
}

void snlp::ssu::parse::SSUGraphBuilder::graphBuilderForAppCategory(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *v5;
  std::string *v6;
  std::runtime_error *exception;
  std::string *v8;
  __int128 v9;
  std::string v10;
  std::string v11;

  v4 = *(char *)(a1 + 32);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v5 = (_QWORD *)operator new();
      *v5 = &off_1E7BE9B08;
      goto LABEL_8;
    }
    if (*(_BYTE *)(a1 + 32))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v10, *(char *)(a1 + 32));
      v8 = std::string::insert(&v10, 0, "Could not build a graph builder for unhandled category: %u");
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v11.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v11);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
  }
  v5 = (_QWORD *)operator new();
  *v5 = off_1E7BE9AD8;
  v6 = (std::string *)(v5 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v5[3] = *(_QWORD *)(a1 + 24);
  }
LABEL_8:
  *a2 = v5;
}

void sub_1C2285524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void snlp::ssu::parse::SSUGraphBuilder::buildGraph(siri::ontology *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t SharedUsoVocabManager;
  uint64_t v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  siri::ontology::oname::graph::ontology_init *TaskNode;
  siri::ontology::oname::graph::ontology_init *v17;
  uint64_t v18;
  uint64_t v19;

  SharedUsoVocabManager = siri::ontology::getSharedUsoVocabManager(a1);
  v13 = operator new();
  v14 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9160](v13, SharedUsoVocabManager);
  *a6 = v13;
  v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::oname::graph::ontology_init::common_VoiceCommand(v14);
  siri::ontology::oname::graph::ontology_init::ReferenceVoiceCommandPayload_execute(v15);
  TaskNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createTaskNode();
  siri::ontology::oname::graph::ontology_init::Argument_task(TaskNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  snlp::ssu::parse::SSUGraphBuilder::addUtteranceSubgraph(a1, v13, (uint64_t)TaskNode, a2, a3, a5);
  v19 = *a4;
  v18 = a4[1];
  while (v19 != v18)
  {
    snlp::ssu::parse::SSUGraphBuilder::addPayloadSubgraph(v17, v13, (uint64_t)TaskNode, v19);
    v19 += 88;
  }
}

void snlp::ssu::parse::SSUGraphBuilder::addUtteranceSubgraph(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *StringNode;
  uint64_t v12;
  std::string *v13;
  NSObject *v14;
  unint64_t Utf16Length;
  unint64_t UnicodeScalarLength;
  NSObject *v17;
  std::string *v18;
  uint64_t v19;
  std::string v20;
  char v21;

  siri::ontology::oname::graph::ontology_init::common_VoiceCommand(a1);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_reference(EntityNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v20 = *(std::string *)a5;
  v21 = 1;
  StringNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createStringNode();
  if (v21 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  siri::ontology::oname::graph::ontology_init::Argument_name(StringNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  (*(void (**)(uint64_t *__return_ptr, siri::ontology::oname::graph::ontology_init *, uint64_t))(*(_QWORD *)a1 + 24))(&v19, a1, a4);
  siri::ontology::UsoEntityNode::addIdentifier();
  v12 = v19;
  v19 = 0;
  if (v12)
    std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](v12);
  if (*(_BYTE *)(a6 + 24))
  {
    snlp::ssu::parse::SSUGraphBuilder::buildClosestPositiveIdentifier((uint64_t)a1, a6, &v18);
    siri::ontology::UsoEntityNode::addIdentifier();
    v13 = v18;
    v18 = 0;
    if (v13)
      std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100]((uint64_t)v13);
  }
  else
  {
    v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v20.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "No closest positive plaintext example available -- skipping attaching USO identifier", (uint8_t *)&v20, 2u);
    }
  }
  Utf16Length = snlp::common::utilities::getUtf16Length((uint64_t *)a5);
  UnicodeScalarLength = snlp::common::utilities::getUnicodeScalarLength((uint64_t *)a5);
  if (HIDWORD(Utf16Length) && HIDWORD(UnicodeScalarLength))
  {
    siri::ontology::UsoEntityNode::addUtteranceAlignment();
  }
  else
  {
    v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v20.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "Could not compute utterance alignment boundary due to Unicode issue. Not adding alignment.", (uint8_t *)&v20, 2u);
    }
  }
}

void sub_1C2285A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a9)
    std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](a9);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::parse::SSUGraphBuilder::addPayloadSubgraph(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *StringNode;
  __int128 *v9;
  __int128 *v10;
  std::string *v11;
  std::string v12;
  char v13;

  siri::ontology::oname::graph::ontology_init::common_VoiceCommandPayload(a1);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_payload(EntityNode);
  v6 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::common_AppEntity(v6);
  v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_appEntity(v7);
  siri::ontology::UsoGraphNode::setSuccessor();
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v12 = *(std::string *)a4;
  v13 = 1;
  StringNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createStringNode();
  if (v13 && SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  siri::ontology::oname::graph::ontology_init::Argument_name(StringNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  v9 = *(__int128 **)(a4 + 40);
  v10 = *(__int128 **)(a4 + 48);
  while (v9 != v10)
  {
    v11 = (std::string *)operator new();
    siri::ontology::UsoIdentifier::UsoIdentifier(v11, v9);
    siri::ontology::UsoEntityNode::addIdentifier();
    if (v11)
      std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100]((uint64_t)v11);
    v9 = (__int128 *)((char *)v9 + 120);
  }
}

void sub_1C2285BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<siri::ontology::UsoIdentifier>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  JUMPOUT(0x1C3BB9B44);
}

void snlp::ssu::parse::SSUGraphBuilder::buildClosestPositiveIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string **a3@<X8>)
{
  std::string *v5;
  void *v6[2];
  uint64_t v7;
  void *__p[2];
  char v9;
  char v10;
  void *v11[2];
  uint64_t v12;
  std::string v13;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(v6);
  v5 = (std::string *)operator new();
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v13 = *(std::string *)a2;
  *(_OWORD *)v11 = *(_OWORD *)v6;
  v12 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "closest_positive");
  v10 = 1;
  siri::ontology::UsoIdentifier::UsoIdentifier(v5, (uint64_t)&v13, (uint64_t)v11, (__int128 *)__p, 0x100000006uLL);
  *a3 = v5;
  if (v10 && v9 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
}

void sub_1C2285DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  MEMORY[0x1C3BB9B44](v28, 0x1012C40071C2685);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::getITFMExecutedHandcraftedRules@<X0>(__int128 **a1@<X0>, sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *a2@<X8>)
{
  uint64_t result;
  __int128 *v5;
  __int128 *v6;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t v9;

  sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::ITFMExecutedHandcraftedRules(a2);
  result = sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules::makeRules(a2);
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    v7 = (uint64_t *)*((_QWORD *)a2 + 2);
    v8 = v7 + 1;
    v9 = v7[2];
    if (v9 >= v7[3])
    {
      result = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v8, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v8, v5);
      result = v9 + 24;
    }
    v7[2] = result;
    v5 = (__int128 *)((char *)v5 + 24);
  }
  return result;
}

void sub_1C2285EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB8734](v1);
  _Unwind_Resume(a1);
}

BOOL itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::insertToFeatureStore(__int128 **a1, uint64_t *a2, uint64_t a3)
{
  _BOOL8 inserted;
  _BYTE v7[24];

  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::getITFMExecutedHandcraftedRules(a1, (sirinluinternalsnlp_intermediate::ITFMExecutedHandcraftedRules *)v7);
  inserted = snlp::common::logging::feature_store_utilities::insertITFMExecutedHandcraftedRulesToFeatureStore((uint64_t)v7, a2, a3);
  MEMORY[0x1C3BB8734](v7);
  return inserted;
}

uint64_t itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(__int128 **a1, uint64_t a2, int *a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  int v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!_os_feature_enabled_impl())
  {
    v6 = SNLPOSLoggerForCategory(2);
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      goto LABEL_17;
    v7 = *a3;
    if (v7 >= 8)
    {
      v11 = SNLPOSLoggerForCategory(4);
      v8 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v19 = 136315394;
        v20 = "<UNDEFINED_COMPONENT>";
        v21 = 2048;
        v22 = v7;
        _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      v8 = off_1E7BED840[v7];
    }
    v19 = 136315138;
    v20 = v8;
    v12 = "[%s] Skipping insertion of SNLC executed handcrafted rules into FeatureStore because SNLPFeatureStoreEnabled f"
          "eature flag is disabled";
    goto LABEL_16;
  }
  if (*(_BYTE *)(a2 + 24))
  {
    itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::insertToFeatureStore(a1, (uint64_t *)a2, (uint64_t)a3);
    goto LABEL_17;
  }
  v6 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a3;
    if (v9 >= 8)
    {
      v13 = SNLPOSLoggerForCategory(4);
      v10 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v19 = 136315394;
        v20 = "<UNDEFINED_COMPONENT>";
        v21 = 2048;
        v22 = v9;
        _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      v10 = off_1E7BED840[v9];
    }
    v19 = 136315138;
    v20 = v10;
    v12 = "[%s] nlu_request_id not found so skipping insertion of SNLC executed handcrafted rules into FeatureStore";
LABEL_16:
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, v12, (uint8_t *)&v19, 0xCu);
  }
LABEL_17:
  v14 = SNLPOSLoggerForCategory(2);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    v15 = *a3;
    if (v15 >= 8)
    {
      v17 = SNLPOSLoggerForCategory(4);
      v16 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v19 = 136315394;
        v20 = "<UNDEFINED_COMPONENT>";
        v21 = 2048;
        v22 = v15;
        _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v19, 0x16u);
      }
    }
    else
    {
      v16 = off_1E7BED840[v15];
    }
    v19 = 136315138;
    v20 = v16;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] Unable to insert executed handcrafted rules into FeatureStore", (uint8_t *)&v19, 0xCu);
  }
  return 0;
}

void uaap::toUTF8String(const __CFString *this@<X0>, _QWORD *a2@<X8>)
{
  CFIndex Length;
  CFIndex v6;
  char *v7;
  std::runtime_error *exception;

  Length = CFStringGetLength(this);
  v6 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v7 = (char *)operator new[]();
  if (CFStringGetCString(this, v7, v6, 0x8000100u))
  {
    std::string::basic_string[abi:ne180100]<0>(a2, v7);
    JUMPOUT(0x1C3BB9B20);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Failed to convert CFString to C++ string");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1C22862E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x1C3BB9B20](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uaap *uaap::searchDDTreeWithType(uaap *this, __DDResult *a2, const __CFString *a3)
{
  uaap *v3;
  const void *Type;
  const __CFArray *SubResults;
  const __CFArray *v7;
  CFIndex Count;
  CFIndex v9;
  CFIndex v10;
  uaap *ValueAtIndex;
  const __CFString *v12;
  uint64_t v13;

  v3 = this;
  if (this)
  {
    Type = (const void *)DDResultGetType();
    if (!CFEqual(Type, a2))
    {
      SubResults = (const __CFArray *)DDResultGetSubResults();
      if (SubResults && (v7 = SubResults, (Count = CFArrayGetCount(SubResults)) != 0))
      {
        v9 = Count;
        v10 = 0;
        while (1)
        {
          ValueAtIndex = (uaap *)CFArrayGetValueAtIndex(v7, v10);
          v13 = uaap::searchDDTreeWithType(ValueAtIndex, a2, v12);
          if (v13)
            break;
          if (v9 == ++v10)
            return 0;
        }
        return (uaap *)v13;
      }
      else
      {
        return 0;
      }
    }
  }
  return v3;
}

id snlp::ssu::selflogging::convertRequestId(snlp::ssu::selflogging *this, const sirinluexternal::RequestID *a2)
{
  PB::Writer *v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;

  v3 = (PB::Writer *)operator new();
  PB::Writer::Writer(v3);
  (*(void (**)(snlp::ssu::selflogging *, PB::Writer *))(*(_QWORD *)this + 24))(this, v3);
  v4 = *((_QWORD *)v3 + 1);
  v5 = objc_alloc(MEMORY[0x1E0D9F988]);
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v4, *(_QWORD *)v3 - *((_QWORD *)v3 + 1));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = (void *)objc_msgSend(v5, "initWithData:", v6);

  PB::Writer::~Writer(v3);
  MEMORY[0x1C3BB9B44]();
  return v7;
}

void sub_1C2286480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::convertCacheTriggerReason(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  uint64_t v5;

  v1 = a1;
  v5 = *MEMORY[0x1E0C80C00];
  if (a1 >= 4)
  {
    SNLPOSLoggerForCategory(8);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUCacheTriggerReason case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

uint64_t snlp::ssu::selflogging::convertCategoryType(unsigned int a1)
{
  NSObject *v3;
  _DWORD v4[2];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  if (a1 < 4)
    return a1 + 1;
  SNLPOSLoggerForCategory(8);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, "Unhandled SSUCategoryType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
  }

  return 0;
}

uint64_t snlp::ssu::selflogging::convertUtteranceCandidateType(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  uint64_t v5;

  v1 = a1;
  v5 = *MEMORY[0x1E0C80C00];
  if (a1 >= 3)
  {
    SNLPOSLoggerForCategory(8);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUUtteranceCandidateType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

id snlp::ssu::selflogging::convertUserRequestMatchInfo(unsigned int *a1)
{
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0D99EA8]);
  objc_msgSend(v2, "setMatchingUtteranceCandidateType:", snlp::ssu::selflogging::convertUtteranceCandidateType(*a1));
  objc_msgSend(v2, "setNumEntities:", a1[1]);
  return v2;
}

void sub_1C2286734(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id snlp::ssu::selflogging::convertUserRequestCacheEntryInfo(unsigned int *a1)
{
  id v2;
  void *v3;

  v2 = objc_alloc_init(MEMORY[0x1E0D99E88]);
  objc_msgSend(v2, "setTriggerReason:", snlp::ssu::selflogging::convertCacheTriggerReason(*a1));
  objc_msgSend(v2, "setCategoryType:", snlp::ssu::selflogging::convertCategoryType(*((char *)a1 + 4)));
  objc_msgSend(v2, "setNumEncodingSimilarityScoreComparisons:", a1[2]);
  if (*((_BYTE *)a1 + 24))
    objc_msgSend(v2, "setClosestNegativeExampleScore:", *((double *)a1 + 2));
  if (*((_BYTE *)a1 + 40))
    objc_msgSend(v2, "setClosestPositiveExampleScore:", *((double *)a1 + 4));
  if (*((_BYTE *)a1 + 56))
  {
    snlp::ssu::selflogging::convertUserRequestMatchInfo(a1 + 12);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "setMatchInfo:", v3);

  }
  return v2;
}

void sub_1C2286800(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::selflogging::convertBackgroundUpdateType(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  uint64_t v5;

  v1 = a1;
  v5 = *MEMORY[0x1E0C80C00];
  if (a1 >= 5)
  {
    SNLPOSLoggerForCategory(8);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUBackgroundUpdateType case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

uint64_t snlp::ssu::selflogging::convertCacheAction(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  uint64_t v5;

  v1 = a1;
  v5 = *MEMORY[0x1E0C80C00];
  if (a1 >= 4)
  {
    SNLPOSLoggerForCategory(8);
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109120;
      v4[1] = v1;
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, "Unhandled SSUCacheAction case: %d. Defaulting to UNKNOWN.", (uint8_t *)v4, 8u);
    }

    return 0;
  }
  return v1;
}

id snlp::ssu::selflogging::convertBackgroundUpdateAppCategoryInfo(char *a1)
{
  id v2;

  v2 = objc_alloc_init(MEMORY[0x1E0D99E58]);
  if (a1[1])
    objc_msgSend(v2, "setCategoryType:", snlp::ssu::selflogging::convertCategoryType(*a1));
  objc_msgSend(v2, "setNumAppExamplesPositive:", *((unsigned int *)a1 + 1));
  objc_msgSend(v2, "setNumAppExamplesNegative:", *((unsigned int *)a1 + 2));
  objc_msgSend(v2, "setCacheAction:", snlp::ssu::selflogging::convertCacheAction(*((unsigned int *)a1 + 3)));
  return v2;
}

void sub_1C22869FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id snlp::ssu::selflogging::convertBackgroundUpdateAppInfo(char **this, const snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo *a2)
{
  id v3;
  snlp::ssu::selflogging *v4;
  void *v5;
  void *v6;
  char *v7;
  char *v8;
  void *v9;

  v3 = objc_alloc_init(MEMORY[0x1E0D99E60]);
  if (*((char *)this + 23) >= 0)
    v4 = (snlp::ssu::selflogging *)this;
  else
    v4 = (snlp::ssu::selflogging *)*this;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "setAppBundleIdSaltedHash:", v5);

  objc_msgSend(v3, "setNumCacheFilesRemoved:", *((unsigned int *)this + 6));
  objc_msgSend(MEMORY[0x1E0C99DE8], "array");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = this[4];
  v8 = this[5];
  while (v7 != v8)
  {
    snlp::ssu::selflogging::convertBackgroundUpdateAppCategoryInfo(v7);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v6, "addObject:", v9);

    v7 += 16;
  }
  objc_msgSend(v3, "setCategoryInfos:", v6);

  return v3;
}

void sub_1C2286AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C2286E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, _QWORD *a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  void *v51;
  void *v52;

  MEMORY[0x1C3BB9B44](v41, 0x10B2C401347FB16);
  if (a2 == 1)
  {
    v47 = __cxa_begin_catch(a1);
    v48 = (void *)MEMORY[0x1E0CB3940];
    (*(void (**)(void *))(*(_QWORD *)v47 + 16))(v47);
    objc_msgSend(v48, "stringWithFormat:", CFSTR("NLv4 Asset Error when creating the OWL orchestrator: %s"));
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    if (a13)
    {
      v49 = (void *)MEMORY[0x1E0CB35C8];
      v50 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v44 - 128) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v44 - 120) = v50;
      *(_QWORD *)(v44 - 112) = v52;
      *(_QWORD *)(v44 - 104) = v52;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v44 - 112, v44 - 128, 2);
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v49, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 3, v51);
      *a13 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1C2286DC0);
  }
  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);

  _Unwind_Resume(a1);
}

void sub_1C2287770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a62 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x227]) < 0)
    operator delete((void *)STACK[0x210]);
  if (SLOBYTE(STACK[0x23F]) < 0)
    operator delete((void *)STACK[0x228]);
  a14 = &STACK[0x240];
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);

  _Unwind_Resume(a1);
}

void sub_1C228870C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  char a64;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  void *a71;
  void *v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84;

  if (__p)
    operator delete(__p);

  nlv4_inference_orchestrator::orchestration::EmbedderResponse::~EmbedderResponse(&a71);
  if (a2 == 1)
  {
    v79 = __cxa_begin_catch(a1);
    if (a12)
    {
      v80 = (void *)MEMORY[0x1E0CB3940];
      (*(void (**)(void *))(*(_QWORD *)v79 + 16))(v79);
      objc_msgSend(v80, "stringWithFormat:", CFSTR("Hit SNLP exception while calling SNLPEmbedder::getEmbeddings : %s "));
      v81 = (void *)objc_claimAutoreleasedReturnValue();
      v82 = (void *)MEMORY[0x1E0CB35C8];
      v83 = *MEMORY[0x1E0CB2D68];
      a67 = *MEMORY[0x1E0CB2D50];
      a68 = v83;
      a69 = (uint64_t)v81;
      a70 = (uint64_t)v81;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &a69, &a67, 2);
      v84 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v82, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 2, v84);
      *a12 = (id)objc_claimAutoreleasedReturnValue();

    }
    __cxa_end_catch();
    JUMPOUT(0x1C228864CLL);
  }
  nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(&a33);
  if (a57 < 0)
    operator delete(a52);
  if (a63 < 0)
    operator delete(a58);
  a71 = &a64;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a71);

  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::mutex::~mutex((std::mutex *)(v2 + 240));
    v4 = (void **)(v2 + 216);
    std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(v2 + 215) < 0)
      operator delete(*(void **)(v2 + 192));
    v3 = *(_QWORD *)(v2 + 184);
    *(_QWORD *)(v2 + 184) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v2 + 144);
    if (*(char *)(v2 + 143) < 0)
      operator delete(*(void **)(v2 + 120));
    if (*(char *)(v2 + 119) < 0)
      operator delete(*(void **)(v2 + 96));
    if (*(char *)(v2 + 95) < 0)
      operator delete(*(void **)(v2 + 72));
    if (*(char *)(v2 + 71) < 0)
      operator delete(*(void **)(v2 + 48));
    if (*(char *)(v2 + 47) < 0)
      operator delete(*(void **)(v2 + 24));
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](a1 + 40);
  std::locale::~locale((std::locale *)a1);
}

_QWORD *std::vector<nlv4_inference_orchestrator::orchestration::Token>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C2288DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::Token::~Token(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(void **this)
{
  void *v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nlv4_inference_orchestrator::orchestration::EmbedderRequest::~EmbedderRequest(void **this)
{
  void **v2;

  v2 = this + 6;
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

char *std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = a4 + v7;
      v12 = *(_OWORD *)(a2 + v7 + 24);
      v13 = *(_OWORD *)(a2 + v7 + 35);
      *(_QWORD *)(a4 + v7 + 56) = 0;
      v14 = (std::string *)(a4 + v7 + 56);
      *(_OWORD *)((char *)v14[-1].__r_.__value_.__r.__words + 3) = v13;
      *(_OWORD *)&v14[-2].__r_.__value_.__r.__words[2] = v12;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v14, *(__int128 **)(a2 + v7 + 56), *(__int128 **)(a2 + v7 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + v7 + 64) - *(_QWORD *)(a2 + v7 + 56)) >> 3));
      v15 = *(_OWORD *)(a2 + v7 + 96);
      *(_OWORD *)(v11 + 80) = *(_OWORD *)(a2 + v7 + 80);
      *(_OWORD *)(v11 + 96) = v15;
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C22890C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (v2 != v1)
  {
    v2 -= 112;
    std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>,std::reverse_iterator<nlv4_inference_orchestrator::orchestration::Token*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  for (result = a7; a3 != a5; a3 -= 112)
  {
    v8 = *(_OWORD *)(a3 - 112);
    *(_QWORD *)(result - 96) = *(_QWORD *)(a3 - 96);
    *(_OWORD *)(result - 112) = v8;
    *(_QWORD *)(a3 - 104) = 0;
    *(_QWORD *)(a3 - 96) = 0;
    *(_QWORD *)(a3 - 112) = 0;
    v9 = *(_OWORD *)(a3 - 88);
    *(_OWORD *)(result - 77) = *(_OWORD *)(a3 - 77);
    *(_OWORD *)(result - 88) = v9;
    *(_QWORD *)(result - 48) = 0;
    *(_QWORD *)(result - 40) = 0;
    *(_QWORD *)(result - 56) = 0;
    *(_OWORD *)(result - 56) = *(_OWORD *)(a3 - 56);
    *(_QWORD *)(result - 40) = *(_QWORD *)(a3 - 40);
    *(_QWORD *)(a3 - 56) = 0;
    *(_QWORD *)(a3 - 48) = 0;
    *(_QWORD *)(a3 - 40) = 0;
    v10 = *(_OWORD *)(a3 - 16);
    *(_OWORD *)(result - 32) = *(_OWORD *)(a3 - 32);
    *(_OWORD *)(result - 16) = v10;
    result -= 112;
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token const*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 112;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

__n128 std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  void **v6;
  __n128 result;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)(a2 + 72))
  {
    if (*(_BYTE *)(a1 + 72))
    {
      v4 = *(void **)a1;
      if (*(_QWORD *)a1)
      {
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v4);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
      v6 = (void **)(a1 + 48);
      if (*(char *)(a1 + 71) < 0)
        operator delete(*v6);
      result = *(__n128 *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(__n128 *)v6 = result;
      *(_BYTE *)(a2 + 71) = 0;
      *(_BYTE *)(a2 + 48) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 72))
  {
    std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](a1);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v8;
    result = *(__n128 *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(__n128 *)(a1 + 48) = result;
    *(_QWORD *)(a2 + 56) = 0;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_BYTE *)(a1 + 72) = 1;
  }
  return result;
}

void std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;

  if (*(_BYTE *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    v2 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v2);
    }
    *(_BYTE *)(a1 + 72) = 0;
  }
}

__n128 std::allocator<nlv4_inference_orchestrator::orchestration::Token>::construct[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token,nlv4_inference_orchestrator::orchestration::Token const&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  v6 = *(__int128 *)((char *)a2 + 35);
  this[2].__r_.__value_.__l.__size_ = 0;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 3) = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 56), *((__int128 **)a2 + 7), *((__int128 **)a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 3));
  result = (__n128)a2[5];
  v8 = a2[6];
  *(__n128 *)&this[3].__r_.__value_.__r.__words[1] = result;
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v8;
  return result;
}

void sub_1C2289430(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1C2289510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);

  std::unique_ptr<PB::Writer>::reset[abi:ne180100]((PB::Writer **)va);
  _Unwind_Resume(a1);
}

void sub_1C22897D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::matchingSpansContainsGenericConfirmationYes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  void **p_p;
  uint64_t v23;
  uint64_t v24;
  const void *v26;
  const void *__s1;
  void *__p;
  size_t v29;
  unsigned __int8 v30;
  void *v31;
  size_t v32;
  unsigned __int8 v33;

  std::string::basic_string[abi:ne180100]<0>(&v31, "genericConfirmation");
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  v3 = *a2;
  v4 = a2[1];
  if (*a2 == v4)
  {
    v24 = 0;
    if ((v30 & 0x80) != 0)
      goto LABEL_42;
    goto LABEL_43;
  }
  v5 = v33;
  v6 = v32;
  if ((v33 & 0x80u) == 0)
    v7 = v33;
  else
    v7 = v32;
  v8 = v30;
  v9 = (char)v30;
  v10 = v29;
  v26 = __p;
  __s1 = v31;
  if ((v30 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = v29;
  do
  {
    v12 = *(unsigned __int8 ***)(v3 + 48);
    if (!v12)
      goto LABEL_36;
    v13 = *(unsigned __int8 **)(v3 + 56);
    if (!v13)
      goto LABEL_36;
    v14 = (unsigned __int8 *)*((unsigned __int8 *)v12 + 23);
    v15 = (char)v14;
    if ((char)v14 < 0)
      v14 = v12[1];
    if ((unsigned __int8 *)v7 != v14)
      goto LABEL_36;
    if (v15 >= 0)
      v16 = *(unsigned __int8 **)(v3 + 48);
    else
      v16 = *v12;
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(__s1, v16, v6))
        goto LABEL_36;
    }
    else if ((_DWORD)v5)
    {
      v17 = &v31;
      v18 = v5;
      while (*(unsigned __int8 *)v17 == *v16)
      {
        v17 = (void **)((char *)v17 + 1);
        ++v16;
        if (!--v18)
          goto LABEL_23;
      }
      goto LABEL_36;
    }
LABEL_23:
    v19 = v13[23];
    v20 = (char)v19;
    if ((v19 & 0x80u) != 0)
      v19 = *((_QWORD *)v13 + 1);
    if (v11 == v19)
    {
      if (v20 >= 0)
        v21 = v13;
      else
        v21 = *(unsigned __int8 **)v13;
      if (v9 < 0)
      {
        if (!memcmp(v26, v21, v10))
        {
          v24 = 1;
          goto LABEL_42;
        }
      }
      else
      {
        if (!v9)
        {
          v24 = 1;
          goto LABEL_43;
        }
        p_p = &__p;
        v23 = v8;
        while (*(unsigned __int8 *)p_p == *v21)
        {
          p_p = (void **)((char *)p_p + 1);
          ++v21;
          if (!--v23)
          {
            v24 = 1;
            if ((v9 & 0x80) == 0)
              goto LABEL_43;
            goto LABEL_42;
          }
        }
      }
    }
LABEL_36:
    v3 += 88;
  }
  while (v3 != v4);
  v24 = 0;
  if ((v9 & 0x80) == 0)
    goto LABEL_43;
LABEL_42:
  operator delete(__p);
LABEL_43:
  if ((char)v33 < 0)
    operator delete(v31);
  return v24;
}

void sub_1C2289A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::removeUserAcceptedOnlyHackApplies(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void **v12;
  unsigned __int8 *v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v19[2];
  char v20;
  void *v21[5];
  void *__p[2];
  unsigned __int8 v23;
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[4];

  v29[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__p, "en_US");
  std::string::basic_string[abi:ne180100]<0>(v24, "en_GB");
  std::string::basic_string[abi:ne180100]<0>(v25, "en_CA");
  std::string::basic_string[abi:ne180100]<0>(v26, "en_AU");
  std::string::basic_string[abi:ne180100]<0>(v27, "en_IN");
  std::string::basic_string[abi:ne180100]<0>(v28, "zh_CN");
  std::string::basic_string[abi:ne180100]<0>(v29, "yue_CN");
  std::unordered_set<std::string>::unordered_set((uint64_t)v21, (unsigned __int8 *)__p, 7);
  for (i = 0; i != -21; i -= 3)
  {
    if (SHIBYTE(v29[i + 2]) < 0)
      operator delete((void *)v29[i]);
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v21, a4))
  {
    v14 = 0;
    goto LABEL_32;
  }
  v8 = (uint64_t)std::string::basic_string[abi:ne180100]<0>(__p, "ROOT");
  v9 = a2[23];
  if ((v9 & 0x80u) == 0)
    v10 = (void *)a2[23];
  else
    v10 = (void *)*((_QWORD *)a2 + 1);
  v11 = v23;
  if ((v23 & 0x80u) != 0)
    v11 = (unint64_t)__p[1];
  if (v10 != (void *)v11)
    goto LABEL_29;
  if ((v23 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v9 & 0x80) != 0)
  {
    v8 = memcmp(*(const void **)a2, v12, *((_QWORD *)a2 + 1));
    if ((_DWORD)v8)
    {
LABEL_29:
      v14 = 0;
      goto LABEL_30;
    }
  }
  else if (a2[23])
  {
    v13 = a2;
    while (*v13 == *(unsigned __int8 *)v12)
    {
      ++v13;
      v12 = (void **)((char *)v12 + 1);
      if (!--v9)
        goto LABEL_23;
    }
    goto LABEL_29;
  }
LABEL_23:
  v15 = a2[71];
  if ((v15 & 0x80u) != 0)
    v15 = *((_QWORD *)a2 + 7);
  if (v15)
    goto LABEL_29;
  v16 = a2[47];
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a2 + 4);
  if (v16)
    goto LABEL_29;
  v14 = 0;
  if (*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11) == 144)
  {
    if ((nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::matchingSpansContainsGenericConfirmationYes(v8, a3) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "UserAccepted");
      v14 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)v19, *((unsigned __int8 **)a2 + 11));
      if (v20 < 0)
        operator delete(v19[0]);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_30:
  if ((char)v23 < 0)
    operator delete(__p[0]);
LABEL_32:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v21[2]);
  v17 = v21[0];
  v21[0] = 0;
  if (v17)
    operator delete(v17);
  return v14;
}

void sub_1C2289CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void snlp::ssu::trigger::SSUTriggerOnScreen::~SSUTriggerOnScreen(void **this)
{
  *this = off_1E7BE9BD8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7BE9BD8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::trigger::SSUTriggerOnScreen::isTriggered(unsigned __int8 **this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  snlp::ssu::proto::SSUValidatedRequest::getOnScreenSalientEntityAppBundleIds(a2, &v6);
  v3 = v7;
  v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v6, v7, this + 1);
  v8 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  if (v3 == v4)
    return 0;
  else
    return 0x100000002;
}

__n128 snlp::ssu::trigger::SSUTriggerOnScreen::SSUTriggerOnScreen(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1E7BE9BD8;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = off_1E7BE9BD8;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

void snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity(float **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _BYTE *a4@<X8>)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13[2];
  char v14;
  void *__p;
  _QWORD *v16;
  _QWORD *v17;

  std::string::basic_string[abi:ne180100]<0>(&__p, "batch");
  snlp::ssu::utilities::validateTensorRank(2uLL, (_QWORD *)a2, (uint64_t)a4);
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  if (!a4[24])
  {
    v8 = *(unint64_t **)a2;
    if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 <= 8uLL)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v10 = *v8;
    v9 = v8[1];
    v11 = operator new(0x10uLL);
    v16 = v11 + 2;
    v17 = v11 + 2;
    *v11 = v10;
    v11[1] = v9;
    __p = v11;
    std::string::basic_string[abi:ne180100]<0>(v13, "batch");
    snlp::ssu::utilities::validateTensor((char **)&__p, (_QWORD *)a2, (uint64_t)a4);
    if (v14 < 0)
      operator delete(v13[0]);
    operator delete(v11);
    if (!a4[24])
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "candidate");
      snlp::ssu::utilities::validateTensorRank(1uLL, (_QWORD *)a3, (uint64_t)a4);
      if (SHIBYTE(v17) < 0)
        operator delete(__p);
      if (!a4[24])
      {
        v12 = operator new(8uLL);
        *v12 = v9;
        v16 = v12 + 1;
        v17 = v12 + 1;
        __p = v12;
        std::string::basic_string[abi:ne180100]<0>(v13, "candidate");
        snlp::ssu::utilities::validateTensor((char **)&__p, (_QWORD *)a3, (uint64_t)a4);
        if (v14 < 0)
          operator delete(v13[0]);
        operator delete(v12);
        if (!a4[24])
        {
          std::vector<float>::resize(a1, v10);
          cblas_sgemv(CblasRowMajor, CblasNoTrans, v10, v9, 1.0, *(const float **)(a2 + 24), v9, *(const float **)(a3 + 24), 1, 0.0, *a1, 1);
          *a4 = 0;
          a4[24] = 0;
        }
      }
    }
  }
}

void sub_1C228AC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a16 < 0)
    operator delete(__p);
  operator delete(v22);
  _Unwind_Resume(a1);
}

uint64_t snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _BOOL4 v5;
  char v6;
  _DWORD v8[6];
  char v9;
  _BYTE v10[16];
  int v11;
  int v12;
  char v13;

  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v10);
  v4 = *a1;
  v13 |= 3u;
  v11 = v4;
  v12 = 1065353216;
  v5 = v4 != 1;
  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v8);
  v9 |= 3u;
  v8[4] = v5;
  v8[5] = 0;
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse((sirinluinternalitfm::ITFMParserResponse *)a2);
  PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>((uint64_t **)(a2 + 8), (uint64_t)v10);
  PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>((uint64_t **)(a2 + 8), (uint64_t)v8);
  v6 = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a2 + 44) = *a1 != 0;
  *(_BYTE *)(a2 + 48) = v6 | 3;
  *(_DWORD *)(a2 + 40) = 1065353216;
  MEMORY[0x1C3BB8584](v8);
  return MEMORY[0x1C3BB8584](v10);
}

uint64_t PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = operator new();
  result = MEMORY[0x1C3BB856C](v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C228AE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaMessagePayloadPromptOverride@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;
  NSObject *v6;
  unint64_t v7;
  int v8;
  uint8_t buf[4];
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[56] = 0;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    result = snlp::common::text_uso_graph::isMessageContentPrompt(result);
    if ((_DWORD)result)
    {
      v8 = 1;
      snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v8, (uint64_t)buf);
      std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>((uint64_t)a3);
      MEMORY[0x1C3BB85C0](buf);
      v6 = SNLPOSLoggerForCategory(2);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v10 = "SNLC";
        _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "[%s] SNLC override triggered: falling back on DEVICE based on the turn input SDA content", buf, 0xCu);
      }
      v7 = a2[1];
      if (v7 >= a2[2])
      {
        result = std::vector<std::string>::__emplace_back_slow_path<char const(&)[35]>(a2, "SDA_MessagePayload_Prompt_Override");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2[1], "SDA_MessagePayload_Prompt_Override");
        result = v7 + 24;
        a2[1] = v7 + 24;
      }
      a2[1] = result;
    }
  }
  return result;
}

void sub_1C228AFB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  if (*(_BYTE *)(v1 + 56))
    MEMORY[0x1C3BB85C0](v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<char const(&)[35]>(uint64_t *a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  __v.__first_ = v10;
  __v.__begin_ = v10 + v4;
  __v.__end_cap_.__value_ = &v10[v9];
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v11 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v11;
}

void sub_1C228B0D4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaIntercomPayloadPromptOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v4;
  NSObject *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::string *v14;
  int v15;
  std::__split_buffer<std::string> buf;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[56] = 0;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 && snlp::common::text_uso_graph::isIntercomPayloadPrompt(v4))
  {
    v15 = 1;
    snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v15, (uint64_t)&buf);
    std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>((uint64_t)a3);
    MEMORY[0x1C3BB85C0](&buf);
    v6 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"SNLC";
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "[%s] SNLC override triggered: falling back on DEVICE based on the turn input SDA content", (uint8_t *)&buf, 0xCu);
    }
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 >= v7)
    {
      v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a2) >> 3);
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(_QWORD *)a2) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= v10 + 1)
        v12 = v10 + 1;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v13)
        v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a2 + 16, v13);
      else
        v14 = 0;
      buf.__first_ = v14;
      buf.__begin_ = v14 + v10;
      buf.__end_ = buf.__begin_;
      buf.__end_cap_.__value_ = &v14[v13];
      std::string::basic_string[abi:ne180100]<0>(buf.__begin_->__r_.__value_.__r.__words, "SDA_IntercomPayload_Prompt_Override");
      ++buf.__end_;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &buf);
      v9 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a2 + 8), "SDA_IntercomPayload_Prompt_Override");
      v9 = v8 + 24;
      *(_QWORD *)(a2 + 8) = v8 + 24;
    }
    *(_QWORD *)(a2 + 8) = v9;
  }
}

void sub_1C228B2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  if (*(_BYTE *)(v11 + 56))
    MEMORY[0x1C3BB85C0](v11);
  _Unwind_Resume(exception_object);
}

void snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::legacyNLContextOverride(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t *v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  NSObject *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  std::string *v20;
  int v21;
  std::__split_buffer<std::string> buf;
  uint64_t v23;

  LODWORD(v5) = 0;
  v23 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[56] = 0;
  v6 = *(unsigned __int8 *)(a1 + 72);
  v7 = (*(_BYTE *)(a1 + 68) != 0) & (v6 >> 1);
  if ((v6 & 8) != 0)
  {
    if (*(_BYTE *)(a1 + 70))
    {
      v5 = *(uint64_t **)(a1 + 8);
      if (v5)
      {
        v8 = *((char *)v5 + 23);
        if (v8 < 0)
        {
          if (v5[1] != 11)
          {
LABEL_15:
            LODWORD(v5) = 0;
            goto LABEL_16;
          }
          v5 = (uint64_t *)*v5;
        }
        else if (v8 != 11)
        {
          goto LABEL_15;
        }
        v9 = (uint64_t *)*v5;
        v10 = *(uint64_t *)((char *)v5 + 3);
        LODWORD(v5) = v9 == (uint64_t *)0x74616C736E617274 && v10 == 0x6E6F6974616C736ELL;
      }
    }
  }
LABEL_16:
  if ((v7 | v5) == 1)
  {
    v21 = 0;
    snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::buildSNLCOverrideITFMResponse(&v21, (uint64_t)&buf);
    std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>((uint64_t)a3);
    MEMORY[0x1C3BB85C0](&buf);
    v12 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"SNLC";
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] SNLC override triggered: falling back on SERVER based on the LegacyNLContext dictationPrompt=true", (uint8_t *)&buf, 0xCu);
    }
    v13 = *(_QWORD *)(a2 + 16);
    v14 = *(_QWORD *)(a2 + 8);
    if (v14 >= v13)
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(_QWORD *)a2) >> 3);
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(_QWORD *)a2) >> 3);
      v18 = 2 * v17;
      if (2 * v17 <= v16 + 1)
        v18 = v16 + 1;
      if (v17 >= 0x555555555555555)
        v19 = 0xAAAAAAAAAAAAAAALL;
      else
        v19 = v18;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v19)
        v20 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a2 + 16, v19);
      else
        v20 = 0;
      buf.__first_ = v20;
      buf.__begin_ = v20 + v16;
      buf.__end_ = buf.__begin_;
      buf.__end_cap_.__value_ = &v20[v19];
      std::string::basic_string[abi:ne180100]<0>(buf.__begin_->__r_.__value_.__r.__words, "LegacyNLContext_DictationPrompt_Presence_Override");
      ++buf.__end_;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &buf);
      v15 = *(_QWORD *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a2 + 8), "LegacyNLContext_DictationPrompt_Presence_Override");
      v15 = v14 + 24;
      *(_QWORD *)(a2 + 8) = v14 + 24;
    }
    *(_QWORD *)(a2 + 8) = v15;
  }
}

void sub_1C228B56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  if (*(_BYTE *)(v11 + 56))
    MEMORY[0x1C3BB85C0](v11);
  _Unwind_Resume(exception_object);
}

void snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::generateOverrideResponse(const sirinluinternalitfm::ITFMParserRequest *a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[32];
  uint64_t v24;
  std::string __p;
  char v26;
  char v27;
  __int128 *v28[3];

  *a2 = 0;
  a2[56] = 0;
  memset(v28, 0, sizeof(v28));
  v5 = *((_QWORD *)a1 + 9);
  if (!v5)
    goto LABEL_15;
  v6 = *(_QWORD *)(v5 + 136);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_8:
    v8 = *(_QWORD *)(v5 + 136);
    if (v8)
    {
      v9 = *(_QWORD **)(v8 + 16);
      if (v9)
      {
        v10 = v9[10];
        v11 = *(_QWORD *)(v5 + 128);
        if (v11)
          v12 = *(_QWORD *)(v11 + 32) != 0;
        else
          v12 = 0;
        v16 = v9[11];
        v15 = v9[12];
        sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v23);
        if (!v10 && !v12)
        {
          if (v15 - v16 == 8)
          {
            sirinluexternal::SystemDialogActGroup::makeSystemDialogAct((sirinluexternal::SystemDialogActGroup *)v23);
            v19 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 9) + 136) + 16) + 88);
            v20 = operator new();
            v21 = MEMORY[0x1C3BB8338](v20, v19);
            v22 = v24;
            v24 = v21;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          goto LABEL_20;
        }
LABEL_19:
        sirinluexternal::SystemDialogActGroup::operator=();
        goto LABEL_20;
      }
    }
    v13 = *(_QWORD *)(v5 + 128);
    if (v13)
    {
      v14 = *(_QWORD *)(v13 + 32);
      sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v23);
      if (!v14)
        goto LABEL_20;
      goto LABEL_19;
    }
LABEL_15:
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v23);
LABEL_20:
    snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaMessagePayloadPromptOverride((uint64_t)v23, (uint64_t *)v28, &__p);
    std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
    if (v27)
      MEMORY[0x1C3BB85C0](&__p);
    if (!a2[56])
    {
      snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::sdaIntercomPayloadPromptOverride((uint64_t)v23, (uint64_t)v28, &__p);
      std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
      if (v27)
        MEMORY[0x1C3BB85C0](&__p);
    }
    MEMORY[0x1C3BB83A4](v23);
    goto LABEL_26;
  }
  snlc_inference_orchestrator::orchestration::SNLCOverrideGenerator::legacyNLContextOverride(v7, (uint64_t)v28, &__p);
  std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a2, (uint64_t)&__p);
  if (v27)
    MEMORY[0x1C3BB85C0](&__p);
  if (!a2[56])
  {
    v5 = *((_QWORD *)a1 + 9);
    if (!v5)
      goto LABEL_15;
    goto LABEL_8;
  }
LABEL_26:
  __p.__r_.__value_.__s.__data_[0] = 0;
  v26 = 0;
  v17 = *((_QWORD *)a1 + 5);
  if (v17)
  {
    v18 = *(const std::string **)(v17 + 16);
    if (v18)
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__p, v18);
  }
  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(v28, (uint64_t)&__p, &snlc_inference_orchestrator::orchestration::kComponent);
  if (v26 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C228B800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;

  MEMORY[0x1C3BB83A4](&a9);
  __p = (void *)(v21 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(_BYTE *)(v20 + 56))
    MEMORY[0x1C3BB85C0](v20);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(_BYTE *)(result + 56))
      return sirinluinternalitfm::ITFMParserResponse::operator=();
  }
  else if (*(_BYTE *)(result + 56))
  {
    result = MEMORY[0x1C3BB85C0]();
    *(_BYTE *)(result + 56) = 0;
  }
  else
  {
    result = MEMORY[0x1C3BB859C]();
    *(_BYTE *)(result + 56) = 1;
  }
  return result;
}

void uaap::TimeDurationHandler::~TimeDurationHandler(uaap::TimeDurationHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::TimeDurationHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::mapDurationToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::mapDurationToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *v5;
  const void **v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap::UPDDTimeDurationSpan *v9;
  siri::ontology::UsoGraph *v10;
  uaap::UPDDTimeSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uaap::UPDDTimeSpan *v18;
  uaap::UPDDTimeDurationSpan *v19;
  uint64_t v20;
  int v21;

  v4 = CFHash(CFSTR("TimeDuration"));
  v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  v6 = (const void **)v5[3];
  if ((const void **)v5[4] != v6)
  {
    if (*v6)
    {
      if (v7)
      {
        v8 = v7;
        v9 = (uaap::UPDDTimeDurationSpan *)operator new();
        v20 = 0;
        v21 = 0;
        MEMORY[0x1C3BB9154](v9, &v20);
        v19 = v9;
        uaap::TimeDurationHandler::resolveDurationGraph(v8, v9, v10);
        uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v19, a2);
        v11 = (uaap::UPDDTimeSpan *)operator new();
        v20 = 0;
        v21 = 0;
        v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v20);
        v18 = v11;
        v13 = *((_QWORD *)v11 + 11);
        v14 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
        uaap::TimeDurationHandler::resolveOffsetReferenceWithDirection(v8, v11, v13, v14);
        uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v18, a2);
        if (v18)
        {
          v15 = MEMORY[0x1C3BB916C]();
          MEMORY[0x1C3BB9B44](v15, 0x10A0C403D23BABBLL);
        }
        if (v19)
        {
          v16 = MEMORY[0x1C3BB916C]();
          MEMORY[0x1C3BB9B44](v16, 0x10A0C403D23BABBLL);
        }
      }
    }
  }
  uaap::mapTimeSpansToItemizedUsos(a1, a2);
  return uaap::mapTimeSpanSpansToItemizedUsos(a1, a2);
}

void sub_1C228BA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeDurationHandler::resolveDurationGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeDurationSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::UsoEntityNode *v4;
  uaap::AbstractDateTimeHandler *EntityNode;
  uaap::UPDDSpan *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  uint64_t v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;

  if (this)
  {
    v4 = this;
    siri::ontology::oname::graph::ontology_init::common_DateTimeRange(this);
    EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v4, v6);
    siri::ontology::oname::graph::ontology_init::Argument_entity(v7);
    v8 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
    v9 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)v4 + 6);
    v10 = siri::ontology::oname::graph::ontology_init::Argument_start(v8);
    v11 = uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v9, a2, (uint64_t)EntityNode, v10);
    v12 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)v4 + 7);
    v13 = siri::ontology::oname::graph::ontology_init::Argument_end(v11);
    return uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v12, a2, (uint64_t)EntityNode, v13);
  }
  return this;
}

uaap::AbstractDateTimeHandler *uaap::TimeDurationHandler::resolveOffsetReferenceWithDirection(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *v4;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v9;
  uint64_t v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  siri::ontology::oname::graph::ontology_init *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  uaap::UPDDSpan *v15;
  uaap::UPDDSpan *v16;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    if ((*((_QWORD *)a1 + 6) != 0) != (*((_QWORD *)a1 + 7) == 0))
      return 0;
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
    {
      return 0;
    }
    else
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      v4 = EntityNode;
      v9 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)a1 + 6);
      if (!v9)
        v9 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)a1 + 7);
      v10 = siri::ontology::oname::graph::ontology_init::Argument_offsetReference(EntityNode);
      v11 = uaap::TimeHandler::resolveTimeWithDateTimeRangeAndQualifier(v9, a2, (uint64_t)v4, v10);
      siri::ontology::oname::graph::ontology_init::common_OffsetDirection(v11);
      v12 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      if (*((_QWORD *)a1 + 6))
        siri::ontology::oname::graph::ontology_init::common_OffsetDirection_After(v12);
      else
        siri::ontology::oname::graph::ontology_init::common_OffsetDirection_Before(v12);
      v13 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
      siri::ontology::oname::graph::ontology_init::Argument_direction(v13);
      v14 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      siri::ontology::oname::graph::ontology_init::Argument_definedValue(v14);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v13, a1, v15);
      siri::ontology::UsoGraphNode::setSuccessor();
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v16);
    }
  }
  return v4;
}

siri::ontology::oname::graph::ontology_init *uaap::resolveOffsetReferenceGraphWithDirection(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeDurationSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeDurationHandler::resolveOffsetReferenceWithDirection(v4, a2, v5, v6);
  }
  return this;
}

void nlv4_inference_orchestrator::context::Embedder::setEmptyContext(nlv4_inference_orchestrator::context::Embedder *this@<X0>, _QWORD *a2@<X8>)
{
  float v3;
  float *v4;
  int64x2_t *v5;

  v3 = (float)(unint64_t)nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)this, (uint64_t)this + 208);
  v4 = (float *)operator new(4uLL);
  *v4 = v3;
  v5 = (int64x2_t *)operator new(0x10uLL);
  *v5 = vdupq_n_s64(1uLL);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v5, (uint64_t)v5[1].i64, 2uLL);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, (uint64_t)(v4 + 1), 1uLL);
  operator delete(v5);
  operator delete(v4);
}

void sub_1C228BDD8(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  void *v5;

  v5 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v5;
    operator delete(v5);
  }
  operator delete(v3);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::Embedder::embed(nlv4_inference_orchestrator::context::Embedder *this@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  float v7;
  NSObject *v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  float *v17;
  int v18;
  _QWORD *v19;
  float *__p;
  float *v22;
  float *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _QWORD *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v22 = 0;
  v23 = 0;
  v5 = *(uint64_t **)(a2 + 16);
  if (!v5)
    goto LABEL_28;
  do
  {
    v6 = v5 + 2;
    v7 = (float)(unint64_t)nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)this, (uint64_t)(v5 + 2));
    if (*((_BYTE *)this + 104) && v7 == (float)*((unint64_t *)this + 12))
    {
      v8 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)v5 + 39) < 0)
          v6 = (_QWORD *)*v6;
        *(_DWORD *)buf = 136315650;
        v25 = "NLv4";
        v26 = 2080;
        v27 = "[insights-snlp-nlv4]: ";
        v28 = 2080;
        v29 = v6;
        _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sRejecting '%s'.\n", buf, 0x20u);
      }
    }
    else
    {
      v9 = v22;
      if (v22 >= v23)
      {
        v11 = __p;
        v12 = v22 - __p;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v14 = (char *)v23 - (char *)__p;
        if (((char *)v23 - (char *)__p) >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v23, v15);
          v11 = __p;
          v9 = v22;
        }
        else
        {
          v16 = 0;
        }
        v17 = (float *)&v16[4 * v12];
        *v17 = v7;
        v10 = v17 + 1;
        while (v9 != v11)
        {
          v18 = *((_DWORD *)v9-- - 1);
          *((_DWORD *)v17-- - 1) = v18;
        }
        __p = v17;
        v23 = (float *)&v16[4 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v22 = v7;
        v10 = v22 + 1;
      }
      v22 = v10;
    }
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (__p == v22)
  {
LABEL_28:
    nlv4_inference_orchestrator::context::Embedder::setEmptyContext(this, a3);
  }
  else
  {
    v19 = operator new(0x10uLL);
    *v19 = 1;
    v19[1] = v22 - __p;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a3, v19, (uint64_t)(v19 + 2), 2uLL);
    a3[3] = 0;
    a3[4] = 0;
    a3[5] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 3, __p, (uint64_t)v22, v22 - __p);
    nlv4_inference_orchestrator::context::Embedder::logFeatureTensor(this, a3);
    operator delete(v19);
  }
  if (__p)
    operator delete(__p);
}

void sub_1C228C0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  void *v15;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v16;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v16);
  operator delete(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::context::Embedder::logFeatureTensor(nlv4_inference_orchestrator::vocabulary::Vocabulary *a1, unint64_t **a2)
{
  unint64_t v4;
  NSObject *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t i;
  unint64_t v11;
  unint64_t j;
  unint64_t v13;
  unint64_t *v14;
  float v15;
  NSObject *v16;
  std::string *p_p;
  NSObject *v18;
  const char *v19;
  std::string __p;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  __int16 v25;
  unint64_t v26;
  __int16 v27;
  std::string *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if ((char *)a2[1] - (char *)*a2 != 16)
  {
    v18 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v19 = "Warning: Context shape not 2-dim";
LABEL_23:
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, v19, buf, 2u);
    return;
  }
  v4 = (*a2)[1] * **a2;
  v5 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v7 = **a2;
    v6 = (*a2)[1];
    *(_DWORD *)buf = 134218496;
    v22 = v7;
    v23 = 2048;
    v24 = v6;
    v25 = 2048;
    v26 = v4;
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, "[NLv4IO Context Tensor] shape=%lu,%lu num_elems=%lu", buf, 0x20u);
  }
  if (v4 != ((char *)a2[4] - (char *)a2[3]) >> 2)
  {
    v18 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)buf = 0;
    v19 = "Warning: Context shape not consistent with data";
    goto LABEL_23;
  }
  v8 = *a2;
  v9 = **a2;
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      v11 = v8[1];
      if (v11)
      {
        for (j = 0; j < v11; ++j)
        {
          v13 = j + i * v11;
          v14 = a2[3];
          if (v13 < ((char *)a2[4] - (char *)v14) >> 2)
          {
            v15 = *((float *)v14 + v13);
            v16 = SNLPOSLoggerForCategory(1);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
            {
              nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(a1, (unint64_t)v15, &__p);
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 134218754;
              v22 = i;
              v23 = 2048;
              v24 = j;
              v25 = 2048;
              v26 = (unint64_t)v15;
              v27 = 2080;
              v28 = p_p;
              _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_DEBUG, "[NLv4IO Context Token] i=%lu j=%lu id=%lu token=%s", buf, 0x2Au);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v8 = *a2;
          v11 = (*a2)[1];
        }
        v9 = *v8;
      }
    }
  }
}

double nlv4_inference_orchestrator::inference_engine::utils::padSpanTensor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t i;
  _QWORD *v20;
  double result;
  NSObject *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v29;
  float v30;
  _BYTE __dst[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = a6;
  v8 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 24)
  {
    v27 = a5;
    v9 = *v8;
    v10 = v8[2];
    v11 = a3 * a2;
    v29 = v8[1];
    std::vector<float>::vector(__dst, a3 * a2 * v29, &v30);
    if (v9)
    {
      v12 = 0;
      v13 = *(char **)__dst;
      if (v10 >= a3)
        v14 = a3;
      else
        v14 = v10;
      v15 = *(char **)(a1 + 24);
      v16 = 4 * v11;
      v17 = 4 * v10;
      do
      {
        v18 = v13;
        for (i = v29; i; --i)
        {
          if (v14)
            memmove(v18, v15, 4 * v14);
          v18 += v16;
          v15 += v17;
        }
        ++v12;
        v13 += 4 * a3;
      }
      while (v12 != v9);
    }
    *v27 = 0;
    v27[1] = 0;
    v27[2] = 0;
    v20 = operator new(0x18uLL);
    v27[1] = v20 + 3;
    v27[2] = v20 + 3;
    *v20 = v29;
    v20[1] = a2;
    v20[2] = a3;
    *v27 = v20;
    v27[4] = 0;
    v27[5] = 0;
    v27[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v27 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 2);
    if (*(_QWORD *)__dst)
    {
      *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    v23 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v24 = a4;
      else
        v24 = (uint64_t *)*a4;
      v25 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      *(_DWORD *)__dst = 136315394;
      *(_QWORD *)&__dst[4] = v24;
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = v25;
      _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input span tensor with %lu dimensions", __dst, 0x16u);
    }
    result = 0.0;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

void sub_1C228C5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  void **v16;
  void *v18;

  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(a10 + 8) = v18;
    operator delete(v18);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::utils::padContextTensor(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  NSObject *v19;
  uint64_t *v20;
  uint64_t v21;
  _BYTE __dst[22];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
  {
    v9 = *v7;
    v10 = v7[1];
    std::vector<float>::vector(__dst, *v7 * a2);
    if (v9)
    {
      v11 = 0;
      v12 = *(char **)__dst;
      v13 = *(char **)(a1 + 24);
      if (v10 >= a2)
        v14 = a2;
      else
        v14 = v10;
      do
      {
        if (v14)
          memmove(v12, v13, 4 * v14);
        if ((uint64_t)(4 * (a2 - v10)) >= 1)
        {
          v15 = 4 * v10;
          v16 = ((a2 - v10) & 0x3FFFFFFFFFFFFFFFLL) + 1;
          do
          {
            *(float *)&v12[v15] = a5;
            --v16;
            v15 += 4;
          }
          while (v16 > 1);
        }
        v12 += 4 * a2;
        ++v11;
        v13 += 4 * v10;
      }
      while (v11 != v9);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v17 = operator new(0x10uLL);
    a4[1] = v17 + 2;
    a4[2] = v17 + 2;
    *v17 = v9;
    v17[1] = a2;
    *a4 = v17;
    a4[4] = 0;
    a4[5] = 0;
    a4[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a4 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 2);
    if (*(_QWORD *)__dst)
    {
      *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    v19 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a3 + 23) >= 0)
        v20 = a3;
      else
        v20 = (uint64_t *)*a3;
      v21 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      *(_DWORD *)__dst = 136315394;
      *(_QWORD *)&__dst[4] = v20;
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = v21;
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input context tensor with %lu dimensions", __dst, 0x16u);
    }
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
  }
}

void sub_1C228C804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void **v14;
  void *v16;

  v16 = *v14;
  if (*v14)
  {
    *(_QWORD *)(a10 + 8) = v16;
    operator delete(v16);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::utils::padEmbeddingTensor(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  unint64_t *v9;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  uint64_t *v23;
  uint64_t v24;
  int *v25;
  std::string::size_type v26;
  int *v27;
  _DWORD *v28;
  unint64_t i;
  int v30;
  NSObject *v31;
  uint64_t *v32;
  _QWORD *v33;
  NSObject *v34;
  uint64_t *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t *v38;
  uint64_t v39;
  _QWORD *v40;
  std::string *v41;
  __int128 v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type size;
  std::string *v47;
  __int128 v48;
  std::string *v49;
  __int128 v50;
  std::runtime_error *exception;
  char *v52;
  std::string v53;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string __p;
  float v58;
  _BYTE buf[24];
  unint64_t v60;
  __int16 v61;
  unint64_t v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v58 = a6;
  v9 = *(unint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 24)
  {
    v11 = v9[1];
    if (v11 > a2)
    {
      std::to_string(&v54, v11);
      v41 = std::string::insert(&v54, 0, "Token overflow; received ");
      v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v55.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      v43 = std::string::append(&v55, " tokens, expected ");
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v53, a2);
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &v53;
      else
        v45 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      else
        size = v53.__r_.__value_.__l.__size_;
      v47 = std::string::append(&v56, (const std::string::value_type *)v45, size);
      v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v48;
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      v49 = std::string::append(&__p, " or fewer tokens.");
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      *(_QWORD *)&buf[16] = *((_QWORD *)&v49->__r_.__value_.__l + 2);
      *(_OWORD *)buf = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v53.__r_.__value_.__l.__data_);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v54.__r_.__value_.__l.__data_);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (buf[23] >= 0)
        v52 = buf;
      else
        v52 = *(char **)buf;
      std::string::basic_string[abi:ne180100]<0>(&__p, v52);
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
    v13 = *v9;
    v14 = v9[2];
    v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a4 + 23) >= 0)
        v16 = a4;
      else
        v16 = (uint64_t *)*a4;
      v17 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v16;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v17;
      *(_WORD *)&buf[22] = 2048;
      v60 = v13;
      v61 = 2048;
      v62 = v11;
      v63 = 2048;
      v64 = v14;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings input tensor size = %lu (%lu, %lu, %lu)", buf, 0x34u);
    }
    v18 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a4 + 23) >= 0)
        v19 = a4;
      else
        v19 = (uint64_t *)*a4;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v19;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = a2;
      _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings maxNumTokens (defined by network config) = %lu", buf, 0x16u);
    }
    if (v14 == a3 && v13 * a3 * v11 == (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2)
    {
      std::vector<float>::vector(&__p, v13 * a2 * a3, &v58);
      v20 = v11 * a3;
      v21 = a3 * a2;
      v22 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a4 + 23) >= 0)
          v23 = a4;
        else
          v23 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v23;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v20;
        *(_WORD *)&buf[22] = 2048;
        v60 = v21 - v20;
        _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings For each batch, copying %lu embedding values and adding %lu padding values", buf, 0x20u);
      }
      if (v13)
      {
        v24 = 0;
        v25 = *(int **)(a1 + 24);
        v26 = __p.__r_.__value_.__r.__words[0];
        do
        {
          v27 = v25;
          v28 = (_DWORD *)v26;
          for (i = v20; i; --i)
          {
            v30 = *v27++;
            *v28++ = v30;
          }
          ++v24;
          v26 += 4 * v21;
          v25 += v20;
        }
        while (v24 != v13);
      }
      v31 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      {
        if (*((char *)a4 + 23) >= 0)
          v32 = a4;
        else
          v32 = (uint64_t *)*a4;
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v32;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2048;
        v60 = a2;
        v61 = 2048;
        v62 = a3;
        _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[%s] padEmbeddings Padded embedding tensor shape: (%lu, %lu, %lu)", buf, 0x2Au);
      }
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      v33 = operator new(0x18uLL);
      a5[1] = v33 + 3;
      a5[2] = v33 + 3;
      *v33 = v13;
      v33[1] = a2;
      v33[2] = a3;
      *a5 = v33;
      a5[4] = 0;
      a5[5] = 0;
      a5[3] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a5 + 3, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      v37 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0)
          v38 = a4;
        else
          v38 = (uint64_t *)*a4;
        v39 = (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v38;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        *(_WORD *)&buf[22] = 2048;
        v60 = v11;
        v61 = 2048;
        v62 = v14;
        v63 = 2048;
        v64 = a3;
        v65 = 2048;
        v66 = v39;
        _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] Illegal shape for embeddings: (%lu, %lu, %lu). Must be (?, ?, %lu) and hold %lu values", buf, 0x3Eu);
      }
      a5[1] = 0;
      *a5 = 0;
      a5[2] = 0;
      v40 = operator new(0x18uLL);
      *a5 = v40;
      a5[2] = v40 + 3;
      *v40 = v13;
      v40[1] = a2;
      v40[2] = a3;
      a5[1] = v40 + 3;
      std::vector<float>::vector(a5 + 3, a3 * a2 * v13, &v58);
    }
  }
  else
  {
    v34 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v35 = a4;
      else
        v35 = (uint64_t *)*a4;
      v36 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v35;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v36;
      _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the input embeddings tensor with %lu dimensions", buf, 0x16u);
    }
    *((_OWORD *)a5 + 1) = 0u;
    *((_OWORD *)a5 + 2) = 0u;
    *(_OWORD *)a5 = 0u;
  }
}

void sub_1C228CE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;

  if (a40 < 0)
  {
    operator delete(__p);
    if ((v48 & 1) == 0)
    {
LABEL_6:
      if (a47 < 0)
        operator delete(a42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v47);
  goto LABEL_6;
}

double nlv4_inference_orchestrator::inference_engine::utils::padITFMMaskTensor@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *v7;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  double result;
  NSObject *v15;
  uint64_t *v16;
  uint64_t v17;
  float v18;
  _BYTE __dst[22];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = a5;
  v7 = *(uint64_t **)a1;
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
  {
    v9 = *v7;
    std::vector<float>::vector(__dst, *v7 * a2, &v18);
    v10 = *(_BYTE **)(a1 + 24);
    v11 = *(_BYTE **)(a1 + 32);
    if (v11 != v10)
      memmove(*(void **)__dst, v10, v11 - v10);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v12 = operator new(0x10uLL);
    a4[1] = v12 + 2;
    a4[2] = v12 + 2;
    *v12 = v9;
    v12[1] = a2;
    *a4 = v12;
    a4[4] = 0;
    a4[5] = 0;
    a4[3] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a4 + 3, *(const void **)__dst, *(uint64_t *)&__dst[8], (uint64_t)(*(_QWORD *)&__dst[8] - *(_QWORD *)__dst) >> 2);
    if (*(_QWORD *)__dst)
    {
      *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
      operator delete(*(void **)__dst);
    }
  }
  else
  {
    v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a3 + 23) >= 0)
        v16 = a3;
      else
        v16 = (uint64_t *)*a3;
      v17 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
      *(_DWORD *)__dst = 136315394;
      *(_QWORD *)&__dst[4] = v16;
      *(_WORD *)&__dst[12] = 2048;
      *(_QWORD *)&__dst[14] = v17;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] Could not reshape the mask tensor with %lu dimensions", __dst, 0x16u);
    }
    result = 0.0;
    *((_OWORD *)a4 + 1) = 0u;
    *((_OWORD *)a4 + 2) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

void sub_1C228D100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  void *v14;

  v14 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v14;
    operator delete(v14);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *nlv4_inference_orchestrator::inference_engine::utils::convertITFMTensorToCommonTensor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32), (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2);
}

void sub_1C228D194(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C228D398(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C228D490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{

  _Unwind_Resume(a1);
}

void sub_1C228D554(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C228D9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1C228DCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void std::basic_string<char16_t>::resize(std::basic_string<char16_t> *this, std::basic_string<char16_t>::size_type __n, std::basic_string<char16_t>::value_type __c)
{
  std::basic_string<char16_t> *v3;
  unint64_t v4;
  std::basic_string<char16_t>::size_type v5;
  unint64_t v6;
  unint64_t v7;
  std::basic_string<char16_t>::size_type size;
  unint64_t v9;
  uint64_t v10;
  std::basic_string<char16_t> *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  std::basic_string<char16_t>::size_type v15;
  uint64_t v16;
  uint64_t v17;
  std::basic_string<char16_t> *v18;
  std::basic_string<char16_t> *v19;
  std::basic_string<char16_t> *v20;
  unint64_t v21;
  std::basic_string<char16_t>::size_type v22;

  v3 = this;
  LODWORD(v4) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v6 = __n - v5;
    if (__n > v5)
    {
      v7 = 10;
      goto LABEL_6;
    }
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
LABEL_25:
    v18 = (std::basic_string<char16_t> *)((char *)v3 + 2 * __n);
    goto LABEL_34;
  }
  size = this->__r_.__value_.__l.__size_;
  v6 = __n - size;
  if (__n <= size)
  {
    this->__r_.__value_.__l.__size_ = __n;
    v3 = (std::basic_string<char16_t> *)this->__r_.__value_.__r.__words[0];
    goto LABEL_25;
  }
  v5 = this->__r_.__value_.__l.__size_;
  v9 = this->__r_.__value_.__r.__words[2];
  v7 = (v9 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  v4 = HIBYTE(v9);
LABEL_6:
  if (v7 - v5 >= v6)
  {
    v19 = this;
    if ((v4 & 0x80) == 0)
      goto LABEL_28;
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < v6 - v7 + v5)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v3;
    if ((v4 & 0x80) != 0)
      v11 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
    if (v7 <= 0x3FFFFFFFFFFFFFF2)
    {
      v12 = v6 + v5;
      if (v6 + v5 <= 2 * v7)
        v12 = 2 * v7;
      v13 = (v12 & 0xFFFFFFFFFFFFFFFCLL) + 4;
      if ((v12 | 3) != 0xB)
        v13 = v12 | 3;
      if (v12 >= 0xB)
        v10 = v13 + 1;
      else
        v10 = 11;
    }
    v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v10);
    v15 = (std::basic_string<char16_t>::size_type)v14;
    v17 = v16;
    if (v5)
      memmove(v14, v11, 2 * v5);
    if (v7 != 10)
      operator delete(v11);
    v3->__r_.__value_.__l.__size_ = v5;
    v3->__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    v3->__r_.__value_.__r.__words[0] = v15;
  }
  v19 = (std::basic_string<char16_t> *)v3->__r_.__value_.__r.__words[0];
LABEL_28:
  v20 = (std::basic_string<char16_t> *)((char *)v19 + 2 * v5);
  v21 = v6;
  do
  {
    v20->__r_.__value_.__s.__data_[0] = 0;
    v20 = (std::basic_string<char16_t> *)((char *)v20 + 2);
    --v21;
  }
  while (v21);
  v22 = v5 + v6;
  if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    v3->__r_.__value_.__l.__size_ = v22;
  else
    *((_BYTE *)&v3->__r_.__value_.__s + 23) = v22 & 0x7F;
  v18 = (std::basic_string<char16_t> *)((char *)v19 + 2 * v22);
LABEL_34:
  v18->__r_.__value_.__s.__data_[0] = 0;
}

void uaap::DateTimeHandler::~DateTimeHandler(uaap::DateTimeHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::DateTimeHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::mapDateTimeToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::mapDateTimeToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *v5;
  const void **v6;
  siri::ontology::oname::graph::ontology_init *v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uaap *v9;
  int isRecurringDate;
  uint64_t isRecurringTime;
  uaap::UPDDTimeSpan *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  siri::ontology::oname::graph::ontology_init *v18;
  uaap::UPDDDateSpan *v19;
  siri::ontology::UsoGraph *v20;
  siri::ontology::oname::graph::ontology_init *v21;
  uaap::UPDDDateSpan *v22;
  siri::ontology::UsoGraph *v23;
  uint64_t v24;
  uint64_t v25;
  CFHashCode v26;
  _QWORD *result;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  siri::ontology::oname::graph::ontology_init *v32;
  __CFString *v33;
  siri::ontology::oname::graph::ontology_init *v34;
  uint64_t length;
  uint64_t v36;
  uaap::UPDDDateSpan *v37;
  siri::ontology::UsoGraph *v38;
  uint64_t v39;
  uint64_t v40;
  uaap::UPDDDateSpan *v41;
  __CFString *v42;
  uint64_t v43;
  int v44;

  v4 = CFHash(CFSTR("DateTime"));
  v5 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (v5)
  {
    v6 = (const void **)v5[3];
    if ((const void **)v5[4] == v6)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    if (*v6)
    {
      if (v7)
      {
        v8 = v7;
        v9 = (uaap *)operator new();
        v43 = 0;
        v44 = 0;
        MEMORY[0x1C3BB9154](v9, &v43);
        v42 = (__CFString *)v9;
        isRecurringDate = uaap::DateSpanHandler::isRecurringDate(*((_QWORD *)v8 + 8));
        isRecurringTime = uaap::DateSpanHandler::isRecurringDate(*((_QWORD *)v8 + 10));
        v13 = isRecurringTime;
        if (((isRecurringDate | isRecurringTime) & 1) != 0
          || (isRecurringTime = uaap::TimeSpanHandler::isRecurringTime(*((_QWORD *)v8 + 9), v12), (_DWORD)isRecurringTime))
        {
          v14 = *((_QWORD *)v9 + 11);
          v15 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
          uaap::DateTimeHandler::resolveRecurringDateTime(v8, v9, v14, v15);
        }
        else
        {
          v16 = *((_QWORD *)v9 + 11);
          v17 = siri::ontology::oname::graph::ontology_init::Argument_entity((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
          uaap::DateTimeHandler::resolveDateTime(v8, v9, v16, v17, 0);
        }
        uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v42, a2);
        if (isRecurringDate)
        {
          v18 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)v8 + 8);
          v19 = (uaap::UPDDDateSpan *)operator new();
          v43 = 0;
          v44 = 0;
          MEMORY[0x1C3BB9154](v19, &v43);
          v41 = v19;
          uaap::DateHandler::resolveDurationValueAndUnitGraph(v18, v19, v20);
          uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v41, a2);
        }
        else
        {
          if (!v13)
          {
LABEL_15:
            if (v42)
            {
              v25 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v25, 0x10A0C403D23BABBLL);
            }
            goto LABEL_17;
          }
          v21 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)v8 + 10);
          v22 = (uaap::UPDDDateSpan *)operator new();
          v43 = 0;
          v44 = 0;
          MEMORY[0x1C3BB9154](v22, &v43);
          v41 = v22;
          uaap::DateHandler::resolveDurationValueAndUnitGraph(v21, v22, v23);
          uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v41, a2);
        }
        if (v41)
        {
          v24 = MEMORY[0x1C3BB916C]();
          MEMORY[0x1C3BB9B44](v24, 0x10A0C403D23BABBLL);
        }
        goto LABEL_15;
      }
    }
  }
LABEL_17:
  uaap::DateHandler::mapDateToItemizedUsos(a1, a2);
  uaap::mapTimeSpansToItemizedUsos(a1, a2);
  uaap::mapTimeSpanSpansToItemizedUsos(a1, a2);
  v26 = CFHash(CFSTR("DateSpan"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v26);
  if (result)
  {
    v28 = result;
    v30 = result[3];
    v29 = result[4];
    if (v29 != v30)
    {
      v31 = 0;
      do
      {
        result = *(_QWORD **)(v30 + 8 * v31);
        if (result)
        {
          if (result)
          {
            v32 = (siri::ontology::oname::graph::ontology_init *)result;
            v33 = (__CFString *)operator new();
            v43 = 0;
            v44 = 0;
            v34 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v33, &v43);
            v42 = v33;
            length = v33[2].length;
            v36 = siri::ontology::oname::graph::ontology_init::Argument_entity(v34);
            uaap::DateSpanHandler::resolveDateSpan(v32, v33, length, v36);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v42, a2);
            v37 = (uaap::UPDDDateSpan *)operator new();
            v43 = 0;
            v44 = 0;
            MEMORY[0x1C3BB9154](v37, &v43);
            v41 = v37;
            uaap::DateSpanHandler::resolveDateTimeRangeSpanGraph(v32, v37, v38);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v41, a2);
            if (v41)
            {
              v39 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v39, 0x10A0C403D23BABBLL);
            }
            result = &v42->isa;
            if (v42)
            {
              v40 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v40, 0x10A0C403D23BABBLL);
            }
            v30 = v28[3];
            v29 = v28[4];
          }
        }
        ++v31;
      }
      while (v31 < (v29 - v30) >> 3);
    }
  }
  return result;
}

void sub_1C228E30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveRecurringDateTime(siri::ontology::oname::graph::ontology_init *a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uaap::UPDDSpan *v11;

  EntityNode = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v8 = siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(EntityNode);
    v9 = uaap::DateTimeHandler::resolveRecurrenceDuration((uint64_t)a1, a2, (uint64_t)EntityNode, v8);
    v10 = siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes((siri::ontology::oname::graph::ontology_init *)v9);
    if (!(v9 | (unint64_t)uaap::DateTimeHandler::resolveDateTime(a1, a2, (uint64_t)EntityNode, v10, 1)))
    {
      return 0;
    }
    else
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
      siri::ontology::UsoGraphNode::setSuccessor();
    }
  }
  return EntityNode;
}

siri::ontology::UsoGraph *uaap::DateTimeHandler::resolveDateTime(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDDateOffsetSpan *a2, uint64_t a3, uint64_t a4, int a5)
{
  siri::ontology::UsoGraph *v5;
  uint64_t isRecurringTime;
  uaap::UPDDTimeSpan *v10;
  uint64_t v11;
  uint64_t v12;
  uaap::DateHandler *v13;
  siri::ontology::UsoEntityNode *v14;
  uaap::TimeHandler *v15;
  uint64_t v16;
  unint64_t EntityNode;
  uaap::UPDDDateSpan *v18;
  uaap::UPDDSpan *v19;
  siri::ontology::UsoEntityNode *v20;
  uint64_t v21;
  siri::ontology::UsoEntityNode *v22;
  int v23;
  uint64_t v24;
  siri::ontology::UsoGraph *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uaap::DateHandler **v36;
  siri::ontology::UsoEntityNode **v37;
  siri::ontology::UsoEntityNode *v38;
  uint64_t SpecialDateUnitDefinedValue;
  uaap::UPDDTimeSpan *v40;
  siri::ontology::oname::graph::ontology_init *SpecialTimeDefinedValue;
  siri::ontology::oname::graph::ontology_init *v42;
  siri::ontology::UsoEntityNode *v43;
  uint64_t v44;
  siri::ontology::UsoEntityNode *v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uaap::TimeHandler **v65;
  uaap::TimeHandler *v66;
  siri::ontology::UsoEntityNode *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uaap::DateHandler **v77;
  uaap::DateHandler *v78;
  uaap::DateHandler **v79;
  uaap::DateHandler *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uaap::TimeHandler **v87;
  uaap::TimeHandler *v88;
  siri::ontology::UsoGraph *v90;
  int v91;
  uaap::DateHandler *v92;
  void *__p;
  char *v94;
  unint64_t v95;

  v5 = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return v5;
  siri::ontology::oname::graph::ontology_init::Root(a1);
  isRecurringTime = siri::ontology::operator!=();
  if ((_DWORD)isRecurringTime)
  {
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
    isRecurringTime = siri::ontology::operator!=();
    if ((isRecurringTime & 1) != 0)
      return 0;
  }
  v91 = a5;
  if (a5)
  {
    v11 = *((_QWORD *)a1 + 10);
    if (v11 && (v12 = *(_QWORD *)(v11 + 128)) != 0 && (*(_QWORD *)(v12 + 48) || *(_QWORD *)(v12 + 64)))
      v13 = 0;
    else
      v13 = (uaap::DateHandler *)*((_QWORD *)a1 + 8);
    isRecurringTime = uaap::TimeSpanHandler::isRecurringTime(*((_QWORD *)a1 + 9), v10);
    if ((isRecurringTime & 1) != 0)
    {
      v14 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    v13 = (uaap::DateHandler *)*((_QWORD *)a1 + 8);
  }
  v14 = (siri::ontology::UsoEntityNode *)*((_QWORD *)a1 + 7);
LABEL_18:
  v15 = (uaap::TimeHandler *)*((_QWORD *)a1 + 9);
  if (!v15)
  {
    v16 = *((_QWORD *)a1 + 7);
    if (v16)
      v15 = *(uaap::TimeHandler **)(v16 + 120);
    else
      v15 = 0;
  }
  v92 = (uaap::DateHandler *)*((_QWORD *)a1 + 10);
  if (!v13 && !v14 && !v15 && !v92)
    return 0;
  __p = 0;
  v94 = 0;
  v95 = 0;
  siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
  EntityNode = siri::ontology::UsoGraph::createEntityNode();
  v5 = (siri::ontology::UsoGraph *)EntityNode;
  if (v13)
  {
    v21 = siri::ontology::oname::graph::ontology_init::Argument_date((siri::ontology::oname::graph::ontology_init *)EntityNode);
    EntityNode = (unint64_t)uaap::DateHandler::resolveDate(v13, a2, v5, v21, v22);
    v90 = (siri::ontology::UsoGraph *)EntityNode;
    if (EntityNode)
    {
      v28 = (v94 - (_BYTE *)__p) >> 3;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 61)
        goto LABEL_161;
      v30 = v95 - (_QWORD)__p;
      if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v29)
        v29 = v30 >> 2;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
        EntityNode = 0x1FFFFFFFFFFFFFFFLL;
      else
        EntityNode = v29;
      if (EntityNode)
        EntityNode = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(EntityNode);
      else
        v18 = 0;
      v36 = (uaap::DateHandler **)(EntityNode + 8 * v28);
      *v36 = v13;
      __p = v36;
      v95 = EntityNode + 8 * (_QWORD)v18;
      v94 = (char *)(v36 + 1);
      v23 = 1;
      if (v14)
        goto LABEL_30;
LABEL_51:
      v25 = 0;
      goto LABEL_59;
    }
  }
  v23 = 0;
  v90 = 0;
  if (!v14)
    goto LABEL_51;
LABEL_30:
  v24 = siri::ontology::oname::graph::ontology_init::Argument_time((siri::ontology::oname::graph::ontology_init *)EntityNode);
  v25 = uaap::TimeHandler::resolveTime(v14, a2, (uint64_t)v5, v24);
  if (v25)
  {
    v26 = v94;
    if ((unint64_t)v94 < v95)
    {
      *(_QWORD *)v94 = v14;
      v27 = v26 + 8;
LABEL_58:
      v94 = v27;
      v23 = 1;
      goto LABEL_59;
    }
    v31 = (char *)__p;
    v32 = (v94 - (_BYTE *)__p) >> 3;
    v33 = v32 + 1;
    if (!((unint64_t)(v32 + 1) >> 61))
    {
      v34 = v95 - (_QWORD)__p;
      if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v33)
        v33 = v34 >> 2;
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
        v35 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v35 = v33;
      if (v35)
        v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v35);
      else
        v18 = 0;
      v37 = (siri::ontology::UsoEntityNode **)(v35 + 8 * v32);
      *v37 = v14;
      v27 = (char *)(v37 + 1);
      if (v26 != v31)
      {
        do
        {
          v38 = (siri::ontology::UsoEntityNode *)*((_QWORD *)v26 - 1);
          v26 -= 8;
          *--v37 = v38;
        }
        while (v26 != v31);
        v26 = (char *)__p;
      }
      __p = v37;
      v95 = v35 + 8 * (_QWORD)v18;
      if (v26)
        operator delete(v26);
      goto LABEL_58;
    }
LABEL_161:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
LABEL_59:
  if (v92 && v15)
  {
    SpecialDateUnitDefinedValue = uaap::DateHandler::getSpecialDateUnitDefinedValue(v92, v18);
    SpecialTimeDefinedValue = (siri::ontology::oname::graph::ontology_init *)uaap::TimeHandler::getSpecialTimeDefinedValue(v15, v40);
    if (SpecialDateUnitDefinedValue && SpecialTimeDefinedValue)
    {
      if (!v90)
      {
        siri::ontology::oname::graph::ontology_init::common_Date(SpecialTimeDefinedValue);
        SpecialTimeDefinedValue = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
        v90 = SpecialTimeDefinedValue;
      }
      if (!v25)
      {
        siri::ontology::oname::graph::ontology_init::common_Time(SpecialTimeDefinedValue);
        v25 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
      }
      v42 = uaap::DateHandler::resolveDateTimeRangeValue(v92, a2, v90, v20);
      siri::ontology::oname::graph::ontology_init::Argument_date(v42);
      siri::ontology::UsoGraphNode::setSuccessor();
      v44 = *((_QWORD *)v92 + 6);
      if (v44 && *(_QWORD *)(v44 + 24))
        uaap::TimeHandler::resolveDateTimeQualifierListValue(v92, a2, v25, v43);
      uaap::TimeHandler::resolveDateTimeRangeValue(v15, a2, v25, v43);
      v46 = *((_QWORD *)v15 + 6);
      if (v46 && *(_QWORD *)(v46 + 24))
        uaap::TimeHandler::resolveDateTimeQualifierListValue(v15, a2, v25, v45);
      v48 = v94;
      v47 = v95;
      if ((unint64_t)v94 >= v95)
      {
        v60 = (char *)__p;
        v61 = (v94 - (_BYTE *)__p) >> 3;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 61)
          goto LABEL_163;
        if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v62)
          v62 = (uint64_t)(v95 - (_QWORD)__p) >> 2;
        if (v95 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v63 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v63 = v62;
        if (v63)
          v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
        else
          v64 = 0;
        v79 = (uaap::DateHandler **)(v63 + 8 * v61);
        v47 = v63 + 8 * v64;
        *v79 = v92;
        v49 = (char *)(v79 + 1);
        if (v48 != v60)
        {
          do
          {
            v80 = (uaap::DateHandler *)*((_QWORD *)v48 - 1);
            v48 -= 8;
            *--v79 = v80;
          }
          while (v48 != v60);
          v48 = (char *)__p;
        }
        __p = v79;
        v95 = v63 + 8 * v64;
        if (v48)
          operator delete(v48);
      }
      else
      {
        *(_QWORD *)v94 = v92;
        v49 = v48 + 8;
      }
      v94 = v49;
      if ((unint64_t)v49 < v47)
      {
        *(_QWORD *)v49 = v15;
        v81 = v49 + 8;
        goto LABEL_155;
      }
      v82 = (char *)__p;
      v83 = (v49 - (_BYTE *)__p) >> 3;
      v84 = v83 + 1;
      if (!((unint64_t)(v83 + 1) >> 61))
      {
        if ((uint64_t)(v47 - (_QWORD)__p) >> 2 > v84)
          v84 = (uint64_t)(v47 - (_QWORD)__p) >> 2;
        if (v47 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
          v85 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v85 = v84;
        if (v85)
          v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
        else
          v86 = 0;
        v87 = (uaap::TimeHandler **)(v85 + 8 * v83);
        *v87 = v15;
        v81 = (char *)(v87 + 1);
        if (v49 == v82)
        {
          __p = (void *)(v85 + 8 * v83);
          v95 = v85 + 8 * v86;
        }
        else
        {
          do
          {
            v88 = (uaap::TimeHandler *)*((_QWORD *)v49 - 1);
            v49 -= 8;
            *--v87 = v88;
          }
          while (v49 != v82);
          v49 = (char *)__p;
          __p = v87;
          v95 = v85 + 8 * v86;
          if (!v49)
          {
LABEL_155:
            v94 = v81;
            if (!v91)
              goto LABEL_156;
            goto LABEL_131;
          }
        }
        operator delete(v49);
        goto LABEL_155;
      }
LABEL_163:
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    }
  }
  else if (!v15)
  {
    v50 = v91;
    goto LABEL_106;
  }
  v50 = v91;
  if (uaap::TimeHandler::resolveDateTimeRangeValue(v15, a2, v5, v20))
  {
    v51 = *((_QWORD *)v15 + 6);
    if (v51 && *(_QWORD *)(v51 + 24))
      uaap::TimeHandler::resolveDateTimeQualifierListValue(v15, a2, v5, v20);
    v52 = v94;
    if ((unint64_t)v94 >= v95)
    {
      v54 = (char *)__p;
      v55 = (v94 - (_BYTE *)__p) >> 3;
      v56 = v55 + 1;
      if ((unint64_t)(v55 + 1) >> 61)
        goto LABEL_162;
      v57 = v95 - (_QWORD)__p;
      if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v56)
        v56 = v57 >> 2;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
        v58 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v58 = v56;
      if (v58)
        v58 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v58);
      else
        v59 = 0;
      v65 = (uaap::TimeHandler **)(v58 + 8 * v55);
      *v65 = v15;
      v53 = (char *)(v65 + 1);
      if (v52 != v54)
      {
        do
        {
          v66 = (uaap::TimeHandler *)*((_QWORD *)v52 - 1);
          v52 -= 8;
          *--v65 = v66;
        }
        while (v52 != v54);
        v52 = (char *)__p;
      }
      __p = v65;
      v95 = v58 + 8 * v59;
      if (v52)
        operator delete(v52);
    }
    else
    {
      *(_QWORD *)v94 = v15;
      v53 = v52 + 8;
    }
    v94 = v53;
    v23 = 1;
  }
LABEL_106:
  if (v92 && uaap::DateHandler::resolveDateTimeRangeValue(v92, a2, v5, v20))
  {
    v68 = *((_QWORD *)v92 + 6);
    if (v68 && *(_QWORD *)(v68 + 24))
      uaap::TimeHandler::resolveDateTimeQualifierListValue(v92, a2, v5, v67);
    v69 = v94;
    if ((unint64_t)v94 < v95)
    {
      *(_QWORD *)v94 = v92;
      v70 = v69 + 8;
LABEL_129:
      v94 = v70;
      goto LABEL_130;
    }
    v71 = (char *)__p;
    v72 = (v94 - (_BYTE *)__p) >> 3;
    v73 = v72 + 1;
    if (!((unint64_t)(v72 + 1) >> 61))
    {
      v74 = v95 - (_QWORD)__p;
      if ((uint64_t)(v95 - (_QWORD)__p) >> 2 > v73)
        v73 = v74 >> 2;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
        v75 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
        v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      else
        v76 = 0;
      v77 = (uaap::DateHandler **)(v75 + 8 * v72);
      *v77 = v92;
      v70 = (char *)(v77 + 1);
      if (v69 != v71)
      {
        do
        {
          v78 = (uaap::DateHandler *)*((_QWORD *)v69 - 1);
          v69 -= 8;
          *--v77 = v78;
        }
        while (v69 != v71);
        v69 = (char *)__p;
      }
      __p = v77;
      v95 = v75 + 8 * v76;
      if (v69)
        operator delete(v69);
      goto LABEL_129;
    }
LABEL_162:
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  }
  if (!v23)
  {
    v5 = 0;
    goto LABEL_158;
  }
LABEL_130:
  if (!v50)
  {
LABEL_156:
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v5, a1, v19);
    goto LABEL_157;
  }
LABEL_131:
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v5, (char **)&__p);
LABEL_157:
  siri::ontology::UsoGraphNode::setSuccessor();
LABEL_158:
  if (__p)
    operator delete(__p);
  return v5;
}

void sub_1C228EBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t uaap::DateTimeHandler::resolveRecurrenceDuration(uint64_t a1, uaap *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  siri::ontology::oname::graph::ontology_init *v9;
  uaap::UPDDTimeSpan *v10;
  _BOOL8 isRecurringTime;
  siri::ontology::UsoEntityNode *v12;
  uaap::UPDDSpan *v13;
  siri::ontology::UsoEntityNode *v14;
  uint64_t v15;

  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return (uint64_t)EntityNode;
  siri::ontology::oname::graph::ontology_init::Root((siri::ontology::oname::graph::ontology_init *)a1);
  v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::operator!=();
  if ((_DWORD)v9)
  {
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime(v9);
    if ((siri::ontology::operator!=() & 1) != 0)
      return 0;
  }
  isRecurringTime = uaap::TimeSpanHandler::isRecurringTime(*(_QWORD *)(a1 + 72), v10);
  if (!isRecurringTime
    || (v12 = *(siri::ontology::UsoEntityNode **)(a1 + 72), !*((_QWORD *)v12 + 7))
    && !*((_QWORD *)v12 + 8)
    && !*((_QWORD *)v12 + 10))
  {
    v15 = *(_QWORD *)(a1 + 80);
    if (v15 && uaap::DateSpanHandler::isRecurringDate(v15))
      return uaap::DateHandler::resolveDurationValueAndUnit(*(siri::ontology::oname::graph::ontology_init **)(a1 + 80), a2, a3, a4);
    return 0;
  }
  siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)isRecurringTime);
  EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v12, v13);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::TimeSpanHandler::resolveTimeSpanWithUnit(v12, a2, EntityNode, v14);
  return (uint64_t)EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveDateTimeGraph(siri::ontology::oname::graph::ontology_init *result, uint64_t a2, uaap::UPDDDateOffsetSpan *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v4 = result;
    v5 = *((_QWORD *)a3 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(result);
    return uaap::DateTimeHandler::resolveDateTime(v4, a3, v5, v6, 0);
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::DateTimeHandler::resolveRecurringDateTimeGraph(siri::ontology::oname::graph::ontology_init *result, uint64_t a2, uaap *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v4 = result;
    v5 = *((_QWORD *)a3 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(result);
    return uaap::DateTimeHandler::resolveRecurringDateTime(v4, a3, v5, v6);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::TransformerEncoderE5MLModule(uint64_t a1, char *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;

  v12 = 0;
  v5 = snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, a3, &v12, (unsigned __int8 *)a1, a4);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 352), "utterance_tokens_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 376), "padding_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 400), "span_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 424), "context");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 448), "position_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 472), "out_init_decoder_hidden");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 496), "out_encodings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 520), "max_num_context_tokens");
  *(_DWORD *)(a1 + 544) = nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::determineWeightType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)a1);
  v6 = *(std::__shared_weak_count **)(a1 + 184);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  _os_feature_enabled_impl();
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C228EF58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (v2[543] < 0)
    operator delete(*v10);
  if (v2[519] < 0)
    operator delete(*v9);
  if (v2[495] < 0)
    operator delete(*v8);
  if (v2[471] < 0)
    operator delete(*v7);
  if (v2[447] < 0)
    operator delete(*v6);
  if (v2[423] < 0)
    operator delete(*v5);
  if (v2[399] < 0)
    operator delete(*v4);
  if (v2[375] < 0)
    operator delete(*v3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v2);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::determineWeightType(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this)
{
  E5RT::ExecutionStreamOperation *v2;
  uint64_t InputPorts;
  uint64_t OutputPorts;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DataTypeForPort;
  unsigned __int8 *v8;
  int v9;
  _BOOL4 v10;
  unsigned __int8 *v11;
  std::runtime_error *v13;
  std::runtime_error *exception;
  std::string *v15;
  std::runtime_error *v16;
  std::string *v17;
  std::string v18;
  std::string v19;

  v2 = (E5RT::ExecutionStreamOperation *)*((_QWORD *)this + 22);
  if (!v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "The inference operation must be set up before querying its ports.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v19;
    else
      v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v15);
    std::runtime_error::runtime_error(exception, &v18);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(v2);
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 22));
  if (!*(_QWORD *)(InputPorts + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(&v19, "No input ports found for the NLv4 encoder.");
    v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v19;
    else
      v17 = (std::string *)v19.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v18, (char *)v17);
    std::runtime_error::runtime_error(v16, &v18);
    v16->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v5 = OutputPorts;
  v6 = (_QWORD *)((char *)this + 192);
  DataTypeForPort = snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, (unsigned __int8 *)(*(_QWORD *)(InputPorts + 16) + 16));
  v8 = *(unsigned __int8 **)(InputPorts + 16);
  if (v8)
  {
    while (1)
    {
      v9 = snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, v8 + 16);
      v10 = v9 != DataTypeForPort;
      if (v9 != (_DWORD)DataTypeForPort)
        break;
      v8 = *(unsigned __int8 **)v8;
      if (!v8)
        goto LABEL_6;
    }
  }
  else
  {
LABEL_6:
    v10 = 0;
  }
  v11 = *(unsigned __int8 **)(v5 + 16);
  if (v11)
  {
    while (snlp::common::espresso_inference::e5ml::WeightsHandler::getDataTypeForPort(v6, v11 + 16) == (_DWORD)DataTypeForPort)
    {
      v11 = *(unsigned __int8 **)v11;
      if (!v11)
        goto LABEL_10;
    }
LABEL_12:
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v19, "The input and output ports do not all expose the same data type. Mixed-type NLv4 encoders are not yet supported.");
    std::runtime_error::runtime_error(v13, &v19);
    v13->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
LABEL_10:
  if (v10)
    goto LABEL_12;
  return DataTypeForPort;
}

void sub_1C228F244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      if (a20 < 0)
        operator delete(a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

uint64_t nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::forward@<X0>(E5RT::ExecutionStream **this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::runtime_error *exception;
  char *v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::runtime_error *v27;
  char *v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  std::runtime_error *v33;
  char *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  int64_t v37;
  std::string v38;
  std::string v39;

  v4 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if (v4 <= 0xF)
  {
    std::to_string(&v38, v4 >> 3);
    v17 = std::string::insert(&v38, 0, "Encodings input needs at least two dimensions.  Only found ");
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v39, " dimensions.");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v37 = v19->__r_.__value_.__r.__words[2];
    v36 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v37 >= 0)
      v22 = (char *)&v36;
    else
      v22 = (char *)v36;
    std::string::basic_string[abi:ne180100]<0>(&v39, v22);
    std::runtime_error::runtime_error(exception, &v39);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v6 = *((_QWORD *)a2 + 12);
  v7 = *((_QWORD *)a2 + 13) - v6;
  if (v7 <= 0xF)
  {
    std::to_string(&v38, v7 >> 3);
    v23 = std::string::insert(&v38, 0, "Context input needs at least two dimensions.  Only found ");
    v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v39, " dimensions.");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v37 = v25->__r_.__value_.__r.__words[2];
    v36 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v37 >= 0)
      v28 = (char *)&v36;
    else
      v28 = (char *)v36;
    std::string::basic_string[abi:ne180100]<0>(&v39, v28);
    std::runtime_error::runtime_error(v27, &v39);
    v27->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v8 = *((_QWORD *)a2 + 6);
  v9 = *((_QWORD *)a2 + 7) - v8;
  if (v9 <= 0x17)
  {
    std::to_string(&v38, v9 >> 3);
    v29 = std::string::insert(&v38, 0, "Tensorised span token input needs at least three dimensions.  Only found ");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v39, " dimensions.");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v37 = v31->__r_.__value_.__r.__words[2];
    v36 = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v37 >= 0)
      v34 = (char *)&v36;
    else
      v34 = (char *)v36;
    std::string::basic_string[abi:ne180100]<0>(&v39, v34);
    std::runtime_error::runtime_error(v33, &v39);
    v33->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeStream((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, *(_DWORD *)(*(_QWORD *)a2 + 8), *(_DWORD *)(v6 + 8), *(_DWORD *)(v8 + 16), (uint64_t)&v36);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts(this);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::setInputs((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, a2);
  v11 = (std::__shared_weak_count *)this[23];
  v35 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v35)
  {
    v14 = (unint64_t *)&v35->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(this[3]);
  E5RT::ExecutionStream::ResetStream(this[3]);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::getOutputs((nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *)this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts(this);
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&v36);
}

void sub_1C228F6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
  {
    operator delete(*(void **)(v26 - 64));
    if ((v25 & 1) == 0)
    {
LABEL_6:
      if (a16 < 0)
        operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v25)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_1C228F730(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  snlp::ssu::espresso::SSUNessieModuleInputs *v11;

  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(v11);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a11);
  JUMPOUT(0x1C228F894);
}

void sub_1C228F744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a11);
  JUMPOUT(0x1C228F894);
}

void sub_1C228F820(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;
  uint64_t v23;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v23 - 41) < 0)
        operator delete(*(void **)(v23 - 64));
      __cxa_end_catch();
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)&a11);
      JUMPOUT(0x1C228F894);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeStream(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  int v14;
  NSObject *v15;
  std::string *v16;
  const char *v17;
  std::string *p_p;
  int v19;
  std::runtime_error *exception;
  char *v21;
  uint64_t v22;
  int v23;
  std::string __p;
  _BYTE v25[12];
  _BYTE buf[12];
  __int16 v27;
  const char *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "NLv4";
    v27 = 2080;
    v28 = "[insights-snlp-nlv4]: ";
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "[%s] %sReshaping encoder input stream.", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>(&__p, "NLv4");
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 34, buf))
  {
    v11 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 34, buf);
    if (!v11)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (*((_DWORD *)v11 + 16) == 1)
    {
      v12 = 0;
      v13 = *((_DWORD *)v11 + 10) & 0xFFFFFF00;
      v14 = *((_DWORD *)v11 + 10);
      goto LABEL_17;
    }
    v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = p_p;
      v17 = "[%s] Could not reshape because the relevant dimensions could not be read from the config.";
LABEL_15:
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, v17, v25, 0xCu);
    }
  }
  else
  {
    v15 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = v16;
      v17 = "[%s] Could not reshape because the relevant dimensions could not be found in the config.";
      goto LABEL_15;
    }
  }
  v14 = 0;
  v13 = 0;
  v12 = 1;
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v29 < 0)
  {
    operator delete(*(void **)buf);
    if (v12)
      goto LABEL_21;
  }
  else if (v12)
  {
LABEL_21:
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_DWORD *)(a5 + 32) = 1065353216;
    return;
  }
  v19 = *((_DWORD *)this + 136);
  if (v19)
  {
    if (v19 != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "Failed to reshape input in NLv4 encoder. Data type not supported.");
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (v29 >= 0)
        v21 = buf;
      else
        v21 = *(char **)buf;
      std::string::basic_string[abi:ne180100]<0>(&__p, v21);
      std::runtime_error::runtime_error(exception, &__p);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
    v23 = 6;
    *(_QWORD *)buf = a2;
    __p.__r_.__value_.__r.__words[0] = a3;
    *(_QWORD *)v25 = a4;
    v22 = v13 | v14;
    nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType((__int128 *)this, (uint64_t *)buf, (uint64_t *)&__p, (uint64_t *)v25, &v22, a5);
  }
  else
  {
    v23 = 3;
    *(_QWORD *)buf = a2;
    __p.__r_.__value_.__r.__words[0] = a3;
    *(_QWORD *)v25 = a4;
    v22 = v13 | v14;
    nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType((__int128 *)this, (uint64_t *)buf, (uint64_t *)&__p, (uint64_t *)v25, &v22, a5);
  }
}

void sub_1C228FBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0)
    {
LABEL_6:
      if (a25 < 0)
        operator delete(a20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::setInputs(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 144);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 400, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 424, (uint64_t)a2 + 96);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 448, (uint64_t)a2 + 192);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::getOutputs(nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule *this@<X0>, _QWORD *a2@<X8>)
{
  std::string v4;
  void *__p;
  _BYTE *v6;
  std::string v7;
  void *v8;
  _BYTE *v9;

  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 496, &v7);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 472, &v4);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_, (uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v8, (uint64_t)v9, (v9 - (_BYTE *)v8) >> 2);
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2 + 6, v4.__r_.__value_.__l.__data_, v4.__r_.__value_.__l.__size_, (uint64_t)(v4.__r_.__value_.__l.__size_ - v4.__r_.__value_.__r.__words[0]) >> 3);
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 9, __p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v4.__r_.__value_.__r.__words[0])
  {
    v4.__r_.__value_.__l.__size_ = v4.__r_.__value_.__r.__words[0];
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v8)
  {
    v9 = v8;
    operator delete(v8);
  }
  if (v7.__r_.__value_.__r.__words[0])
  {
    v7.__r_.__value_.__l.__size_ = v7.__r_.__value_.__r.__words[0];
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_1C228FDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v15;
  void **v16;
  void **v17;
  void *v19;

  v17 = v16;
  v19 = *v17;
  if (*v17)
  {
    *((_QWORD *)v15 + 7) = v19;
    operator delete(v19);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v15);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a9);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::reshapeEncoderWithType(__int128 *a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  void *__p;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 *v49;

  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(_DWORD *)(a6 + 32) = 1065353216;
  v11 = *a2;
  v12 = *a4;
  v13 = operator new(0x18uLL);
  v46 = v13 + 3;
  v47 = v13 + 3;
  *v13 = 1;
  v13[1] = v11;
  v13[2] = v12;
  __p = v13;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  v49 = a1 + 25;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 400, &v49);
  v15 = v48;
  v48 = 0;
  v16 = *((_QWORD *)v14 + 5);
  *((_QWORD *)v14 + 5) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    v17 = v48;
    v48 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v18 = *a3;
  v19 = operator new(0x10uLL);
  v46 = v19 + 2;
  v47 = v19 + 2;
  *v19 = 1;
  v19[1] = v18;
  __p = v19;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  v49 = (__int128 *)((char *)a1 + 424);
  v20 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 424, &v49);
  v21 = v48;
  v48 = 0;
  v22 = *((_QWORD *)v20 + 5);
  *((_QWORD *)v20 + 5) = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = v48;
    v48 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v24 = *a2;
  v25 = *a5;
  v26 = operator new(0x18uLL);
  v46 = v26 + 3;
  v47 = v26 + 3;
  *v26 = 1;
  v26[1] = v24;
  v26[2] = v25;
  __p = v26;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  v49 = a1 + 22;
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 352, &v49);
  v28 = v48;
  v48 = 0;
  v29 = *((_QWORD *)v27 + 5);
  *((_QWORD *)v27 + 5) = v28;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v48;
    v48 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v31 = *a2;
  v32 = operator new(0x10uLL);
  v46 = v32 + 2;
  v47 = v32 + 2;
  *v32 = 1;
  v32[1] = v31;
  __p = v32;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  v49 = a1 + 28;
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 448, &v49);
  v34 = v48;
  v48 = 0;
  v35 = *((_QWORD *)v33 + 5);
  *((_QWORD *)v33 + 5) = v34;
  if (v35)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = v48;
    v48 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
  v37 = *a2;
  v38 = *a3;
  v39 = operator new(0x10uLL);
  v46 = v39 + 2;
  v47 = v39 + 2;
  *v39 = 1;
  v39[1] = v38 + v37;
  __p = v39;
  E5RT::TensorDataType::TensorDataType();
  E5RT::TensorDescriptor::CreateTensorDesc();
  v49 = (__int128 *)((char *)a1 + 376);
  v40 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (unsigned __int8 *)a1 + 376, &v49);
  v41 = v48;
  v48 = 0;
  v42 = *((_QWORD *)v40 + 5);
  *((_QWORD *)v40 + 5) = v41;
  if (v42)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    v43 = v48;
    v48 = 0;
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v44);
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_1C22901F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  v17 = a15;
  a15 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void uaap::DateSpanWithReferenceHandler::~DateSpanWithReferenceHandler(uaap::DateSpanWithReferenceHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::DateSpanWithReferenceHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::DateSpanWithReferenceHandler::mapDateSpanWithReferenceToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::DateSpanWithReferenceHandler::mapDateSpanWithReferenceToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  siri::ontology::oname::graph::ontology_init *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  __CFString *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  uint64_t length;
  uint64_t v16;
  uint64_t v17;
  __CFString *v18;
  uint64_t v19;
  int v20;

  v4 = CFHash(CFSTR("DateSpanWithReference"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v10 = *(const void **)(v8 + 8 * v9);
        if (v10)
        {
          if (v11)
          {
            v12 = v11;
            v13 = (__CFString *)operator new();
            v19 = 0;
            v20 = 0;
            v14 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v13, &v19);
            v18 = v13;
            length = v13[2].length;
            v16 = siri::ontology::oname::graph::ontology_init::Argument_entity(v14);
            uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReference(v12, v13, length, v16);
            uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v18, a2);
            if (v18)
            {
              v17 = MEMORY[0x1C3BB916C]();
              MEMORY[0x1C3BB9B44](v17, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
    return uaap::DateSpanHandler::mapDateSpanToItemizedUsos(a1, a2);
  }
  return result;
}

void sub_1C2290470(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReference(siri::ontology::oname::graph::ontology_init *a1, __CFString *a2, uint64_t a3, uint64_t a4)
{
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *v8;
  uint64_t v9;

  EntityNode = 0;
  if (a2 && a1 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_DateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v8 = (siri::ontology::oname::graph::ontology_init *)*((_QWORD *)a1 + 7);
    v9 = siri::ontology::oname::graph::ontology_init::Argument_date(EntityNode);
    if (!uaap::DateSpanHandler::resolveDateSpan(v8, a2, (uint64_t)EntityNode, v9))
      return 0;
    else
      siri::ontology::UsoGraphNode::setSuccessor();
  }
  return EntityNode;
}

siri::ontology::oname::graph::ontology_init *uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReferenceGraph(siri::ontology::oname::graph::ontology_init *this, __CFString *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t length;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    length = a2[2].length;
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::DateSpanWithReferenceHandler::resolveDateSpanWithReference(v4, a2, length, v6);
  }
  return this;
}

uint64_t snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(uint64_t *a1, unint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  std::runtime_error *v18;
  std::string *v19;
  __int128 v20;
  std::runtime_error *exception;
  std::string *v23;
  __int128 v24;
  std::runtime_error *v26;
  std::string *v27;
  __int128 v28;
  std::string v29;
  std::string v30;

  v2 = *((char *)a1 + 23);
  v3 = v2 < 0;
  if (v2 >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  if (v3)
    v5 = a1[1];
  else
    v5 = *((unsigned __int8 *)a1 + 23);
  if (v5)
  {
    v6 = 0;
    result = 0;
    v8 = 0;
    while (1)
    {
      if (v6 > a2)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v29, a2);
        v23 = std::string::insert(&v29, 0, "Given UTF-16 offset is not a Unicode scalar (code point) boundary: ");
        v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v30);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (v6 == a2)
        break;
      v9 = v8 + 1;
      v10 = *((char *)v4 + v8);
      v11 = *((unsigned __int8 *)v4 + v8);
      if (v10 < 0)
      {
        if (v9 == v5)
          goto LABEL_36;
        if (v11 < 0xE0)
        {
          if (v11 < 0xC2)
            goto LABEL_36;
          v14 = v11 & 0x1F;
        }
        else
        {
          if (v11 > 0xEF)
          {
            if (v11 > 0xF4
              || (v15 = v11 - 240,
                  v12 = *((unsigned __int8 *)v4 + v9),
                  ((byte_1C2313ACD[v12 >> 4] >> v15) & 1) == 0)
              || (v9 = v8 + 2, v8 + 2 == v5)
              || (v13 = *((unsigned __int8 *)v4 + v9) ^ 0x80, v13 > 0x3F))
            {
LABEL_36:
              v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string(&v29, v8);
              v19 = std::string::insert(&v29, 0, "Input string is not a valid UTF-8 sequence! UTF-8 offset: ");
              v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
              v30.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v20;
              v19->__r_.__value_.__l.__size_ = 0;
              v19->__r_.__value_.__r.__words[2] = 0;
              v19->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(v18, &v30);
              __cxa_throw(v18, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            LODWORD(v12) = v12 & 0x3F | (v15 << 6);
          }
          else
          {
            v12 = v10 & 0xF;
            if (((a00000000000000[v12] >> (*((_BYTE *)v4 + v9) >> 5)) & 1) == 0)
              goto LABEL_36;
            v13 = *((_BYTE *)v4 + v9) & 0x3F;
          }
          if (++v9 == v5)
            goto LABEL_36;
          v14 = v13 | ((_DWORD)v12 << 6);
        }
        v16 = *((unsigned __int8 *)v4 + v9) ^ 0x80;
        if (v16 > 0x3F)
          goto LABEL_36;
        v11 = v16 | (v14 << 6);
        ++v9;
      }
      if (v11 < 0x10000)
        v17 = 1;
      else
        v17 = 2;
      v6 += v17;
      ++result;
      v8 = v9;
      if (v9 >= v5)
        goto LABEL_34;
    }
  }
  else
  {
    result = 0;
    v6 = 0;
LABEL_34:
    if (v6 != a2)
    {
      v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v29, a2);
      v27 = std::string::insert(&v29, 0, "Given UTF-16 offset exceeds the input string: ");
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v26, &v30);
      __cxa_throw(v26, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return result;
}

void sub_1C2290878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::utilities::getUtf16Length(uint64_t *a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v1 = *((char *)a1 + 23);
  v2 = a1[1];
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    if (v1 >= 0)
      v5 = a1;
    else
      v5 = (uint64_t *)*a1;
    while (1)
    {
      v6 = v3 + 1;
      v7 = *((char *)v5 + v3);
      v8 = *((unsigned __int8 *)v5 + v3);
      if (v7 < 0)
      {
        if (v6 == v2)
          goto LABEL_31;
        if (v8 < 0xE0)
        {
          if (v8 < 0xC2)
            goto LABEL_31;
          v11 = v8 & 0x1F;
        }
        else
        {
          if (v8 > 0xEF)
          {
            if (v8 > 0xF4
              || (v12 = v8 - 240,
                  v9 = *((unsigned __int8 *)v5 + v6),
                  ((byte_1C2313ACD[v9 >> 4] >> v12) & 1) == 0)
              || (v6 = v3 + 2, v3 + 2 == v2)
              || (v10 = *((unsigned __int8 *)v5 + v6) ^ 0x80, v10 > 0x3F))
            {
LABEL_31:
              v15 = 0;
              v4 = 0;
              return v15 | v4;
            }
            LODWORD(v9) = v9 & 0x3F | (v12 << 6);
          }
          else
          {
            v9 = v7 & 0xF;
            if (((a00000000000000[v9] >> (*((_BYTE *)v5 + v6) >> 5)) & 1) == 0)
              goto LABEL_31;
            v10 = *((_BYTE *)v5 + v6) & 0x3F;
          }
          if (++v6 == v2)
            goto LABEL_31;
          v11 = v10 | ((_DWORD)v9 << 6);
        }
        v13 = *((unsigned __int8 *)v5 + v6) ^ 0x80;
        if (v13 > 0x3F)
          goto LABEL_31;
        v8 = v13 | (v11 << 6);
        ++v6;
      }
      if (v8 < 0x10000)
        v14 = 1;
      else
        v14 = 2;
      v4 += v14;
      v3 = v6;
      if (v6 >= v2)
        goto LABEL_30;
    }
  }
  v4 = 0;
LABEL_30:
  v15 = 0x100000000;
  return v15 | v4;
}

uint64_t snlp::common::utilities::getUnicodeScalarLength(uint64_t *a1)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t *v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v1 = *((char *)a1 + 23);
  v2 = a1[1];
  if (v1 >= 0)
    v2 = *((unsigned __int8 *)a1 + 23);
  if (v2)
  {
    v3 = 0;
    v4 = 0;
    if (v1 >= 0)
      v5 = a1;
    else
      v5 = (uint64_t *)*a1;
    while (1)
    {
      v6 = v3 + 1;
      v7 = *((char *)v5 + v3);
      if (v7 < 0)
      {
        if (v6 == v2)
          goto LABEL_26;
        v8 = *((unsigned __int8 *)v5 + v3);
        if (v8 < 0xE0)
        {
          if (v8 < 0xC2)
            goto LABEL_26;
        }
        else
        {
          if (v8 > 0xEF)
          {
            if (v8 > 0xF4
              || ((byte_1C2313ACD[(unint64_t)*((unsigned __int8 *)v5 + v6) >> 4] >> (v7 + 16)) & 1) == 0
              || (v6 = v3 + 2, v3 + 2 == v2)
              || *((char *)v5 + v6) > -65)
            {
LABEL_26:
              v9 = 0;
              v4 = 0;
              return v9 | v4;
            }
          }
          else if (((a00000000000000[v7 & 0xF] >> (*((_BYTE *)v5 + v6) >> 5)) & 1) == 0)
          {
            goto LABEL_26;
          }
          if (++v6 == v2)
            goto LABEL_26;
        }
        if (*((char *)v5 + v6) > -65)
          goto LABEL_26;
        ++v6;
      }
      ++v4;
      v3 = v6;
      if (v6 >= v2)
        goto LABEL_25;
    }
  }
  v4 = 0;
LABEL_25:
  v9 = 0x100000000;
  return v9 | v4;
}

uint64_t itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForSNLCOutputClass@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  char *v15;
  const std::string::value_type **v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  unint64_t v32;
  _QWORD *v33;
  std::string **v34;
  unint64_t v35;
  void *v36;
  uint64_t k;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  std::runtime_error *exception;
  std::string *v45;
  __int128 v46;
  __int128 v47;
  std::string v50;
  void *__p[2];
  __int128 v52;
  float v53;
  std::string v54;
  int v55;
  _QWORD v56[5];

  v56[3] = *MEMORY[0x1E0C80C00];
  LODWORD(v54.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54.__r_.__value_.__l.__size_, "Server");
  v55 = 1;
  std::string::basic_string[abi:ne180100]<0>(v56, "Device");
  v4 = 0;
  v5 = 0;
  *(_OWORD *)__p = 0u;
  v52 = 0u;
  v53 = 1.0;
  do
  {
    v6 = (char *)&v54 + 32 * v5;
    v7 = *(_DWORD *)v6;
    v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v2 = v7;
        if (__p[1] <= (void *)v7)
          v2 = v7 % (unint64_t)__p[1];
      }
      else
      {
        v2 = ((unint64_t)__p[1] - 1) & v7;
      }
      v10 = (uint64_t **)*((_QWORD *)__p[0] + v2);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)i + 4) == v7)
              goto LABEL_77;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1])
                v12 %= (unint64_t)__p[1];
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v2)
              break;
          }
        }
      }
    }
    v13 = (std::string *)operator new(0x30uLL);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = v7;
    LODWORD(v13->__r_.__value_.__r.__words[2]) = v7;
    v14 = v13 + 1;
    v15 = (char *)&v54 + 32 * v5;
    v16 = (const std::string::value_type **)(v15 + 8);
    if (v6[31] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v16, *((_QWORD *)v15 + 2));
      v4 = *((_QWORD *)&v52 + 1);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v13[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 3);
    }
    v17 = (float)(unint64_t)(v4 + 1);
    if (!v8 || (float)(v53 * (float)v8) < v17)
    {
      v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v18 = 1;
      v19 = v18 | (2 * v8);
      v20 = vcvtps_u32_f32(v17 / v53);
      if (v19 <= v20)
        prime = (int8x8_t)v20;
      else
        prime = (int8x8_t)v19;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v8 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_33;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v28 = vcvtps_u32_f32((float)*((unint64_t *)&v52 + 1) / v53);
        if (__p[1] < (void *)3
          || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          v28 = std::__next_prime(v28);
        }
        else
        {
          v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2)
            v28 = v30;
        }
        if (*(_QWORD *)&prime <= v28)
          prime = (int8x8_t)v28;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v8 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v22 = operator new(8 * *(_QWORD *)&prime);
            v23 = __p[0];
            __p[0] = v22;
            if (v23)
              operator delete(v23);
            v24 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v24++) = 0;
            while (*(_QWORD *)&prime != v24);
            v25 = (_QWORD **)v52;
            if ((_QWORD)v52)
            {
              v26 = *(_QWORD *)(v52 + 8);
              v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(_QWORD *)&prime)
                  v26 %= *(_QWORD *)&prime;
              }
              else
              {
                v26 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v26) = &v52;
              for (j = *v25; j; v26 = v32)
              {
                v32 = j[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*((_QWORD *)__p[0] + v32))
                  {
                    *((_QWORD *)__p[0] + v32) = v25;
                    goto LABEL_58;
                  }
                  *v25 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v32);
                  **((_QWORD **)__p[0] + v32) = j;
                  j = v25;
                }
                v32 = v26;
LABEL_58:
                v25 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          v36 = __p[0];
          __p[0] = 0;
          if (v36)
            operator delete(v36);
          v8 = 0;
          __p[1] = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7)
          v2 = v7 % v8;
        else
          v2 = v7;
      }
      else
      {
        v2 = (v8 - 1) & v7;
      }
    }
    v33 = __p[0];
    v34 = (std::string **)*((_QWORD *)__p[0] + v2);
    if (v34)
    {
      v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v34;
LABEL_75:
      *v34 = v13;
      goto LABEL_76;
    }
    v13->__r_.__value_.__r.__words[0] = v52;
    *(_QWORD *)&v52 = v13;
    v33[v2] = &v52;
    if (v13->__r_.__value_.__r.__words[0])
    {
      v35 = *(_QWORD *)(v13->__r_.__value_.__r.__words[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8)
          v35 %= v8;
      }
      else
      {
        v35 &= v8 - 1;
      }
      v34 = (std::string **)((char *)__p[0] + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    v4 = ++*((_QWORD *)&v52 + 1);
LABEL_77:
    ++v5;
  }
  while (v5 != 2);
  for (k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v56[k + 2]) < 0)
      operator delete((void *)v56[k]);
  }
  if (!__p[1])
    goto LABEL_107;
  v38 = *a1;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = *a1;
    if (__p[1] <= (void *)v38)
      v40 = v38 % (unint64_t)__p[1];
  }
  else
  {
    v40 = ((unint64_t)__p[1] - 1) & v38;
  }
  v41 = (uint64_t **)*((_QWORD *)__p[0] + v40);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_107:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, *a1);
    v45 = std::string::insert(&v50, 0, "Failed to find the string representation of the SNLC output class: ");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  while (2)
  {
    v43 = v42[1];
    if (v43 != v38)
    {
      if (v39.u32[0] > 1uLL)
      {
        if ((void *)v43 >= __p[1])
          v43 %= (unint64_t)__p[1];
      }
      else
      {
        v43 &= (unint64_t)__p[1] - 1;
      }
      if (v43 != v40)
        goto LABEL_107;
      goto LABEL_106;
    }
    if (*((_DWORD *)v42 + 4) != (_DWORD)v38)
    {
LABEL_106:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_107;
      continue;
    }
    break;
  }
  if (*((char *)v42 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v42[3], v42[4]);
  }
  else
  {
    v47 = *(_OWORD *)(v42 + 3);
    a2->__r_.__value_.__r.__words[2] = v42[5];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  }
  return std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)__p);
}

void sub_1C2291168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForPSCOutputClass@<X0>(int *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  char *v15;
  const std::string::value_type **v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD **v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *j;
  unint64_t v32;
  _QWORD *v33;
  std::string **v34;
  unint64_t v35;
  void *v36;
  uint64_t k;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  unint64_t v43;
  std::runtime_error *exception;
  std::string *v45;
  __int128 v46;
  __int128 v47;
  std::string v50;
  void *__p[2];
  __int128 v52;
  float v53;
  std::string v54;
  int v55;
  _QWORD v56[5];

  v56[3] = *MEMORY[0x1E0C80C00];
  LODWORD(v54.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v54.__r_.__value_.__l.__size_, "Not_Pommes");
  v55 = 1;
  std::string::basic_string[abi:ne180100]<0>(v56, "Pommes");
  v4 = 0;
  v5 = 0;
  *(_OWORD *)__p = 0u;
  v52 = 0u;
  v53 = 1.0;
  do
  {
    v6 = (char *)&v54 + 32 * v5;
    v7 = *(_DWORD *)v6;
    v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v2 = v7;
        if (__p[1] <= (void *)v7)
          v2 = v7 % (unint64_t)__p[1];
      }
      else
      {
        v2 = ((unint64_t)__p[1] - 1) & v7;
      }
      v10 = (uint64_t **)*((_QWORD *)__p[0] + v2);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)i + 4) == v7)
              goto LABEL_77;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1])
                v12 %= (unint64_t)__p[1];
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v2)
              break;
          }
        }
      }
    }
    v13 = (std::string *)operator new(0x30uLL);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = v7;
    LODWORD(v13->__r_.__value_.__r.__words[2]) = v7;
    v14 = v13 + 1;
    v15 = (char *)&v54 + 32 * v5;
    v16 = (const std::string::value_type **)(v15 + 8);
    if (v6[31] < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v16, *((_QWORD *)v15 + 2));
      v4 = *((_QWORD *)&v52 + 1);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v13[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 3);
    }
    v17 = (float)(unint64_t)(v4 + 1);
    if (!v8 || (float)(v53 * (float)v8) < v17)
    {
      v18 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v18 = 1;
      v19 = v18 | (2 * v8);
      v20 = vcvtps_u32_f32(v17 / v53);
      if (v19 <= v20)
        prime = (int8x8_t)v20;
      else
        prime = (int8x8_t)v19;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v8 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_33;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v28 = vcvtps_u32_f32((float)*((unint64_t *)&v52 + 1) / v53);
        if (__p[1] < (void *)3
          || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
        {
          v28 = std::__next_prime(v28);
        }
        else
        {
          v30 = 1 << -(char)__clz(v28 - 1);
          if (v28 >= 2)
            v28 = v30;
        }
        if (*(_QWORD *)&prime <= v28)
          prime = (int8x8_t)v28;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v8 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v22 = operator new(8 * *(_QWORD *)&prime);
            v23 = __p[0];
            __p[0] = v22;
            if (v23)
              operator delete(v23);
            v24 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v24++) = 0;
            while (*(_QWORD *)&prime != v24);
            v25 = (_QWORD **)v52;
            if ((_QWORD)v52)
            {
              v26 = *(_QWORD *)(v52 + 8);
              v27 = (uint8x8_t)vcnt_s8(prime);
              v27.i16[0] = vaddlv_u8(v27);
              if (v27.u32[0] > 1uLL)
              {
                if (v26 >= *(_QWORD *)&prime)
                  v26 %= *(_QWORD *)&prime;
              }
              else
              {
                v26 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v26) = &v52;
              for (j = *v25; j; v26 = v32)
              {
                v32 = j[1];
                if (v27.u32[0] > 1uLL)
                {
                  if (v32 >= *(_QWORD *)&prime)
                    v32 %= *(_QWORD *)&prime;
                }
                else
                {
                  v32 &= *(_QWORD *)&prime - 1;
                }
                if (v32 != v26)
                {
                  if (!*((_QWORD *)__p[0] + v32))
                  {
                    *((_QWORD *)__p[0] + v32) = v25;
                    goto LABEL_58;
                  }
                  *v25 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v32);
                  **((_QWORD **)__p[0] + v32) = j;
                  j = v25;
                }
                v32 = v26;
LABEL_58:
                v25 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          v36 = __p[0];
          __p[0] = 0;
          if (v36)
            operator delete(v36);
          v8 = 0;
          __p[1] = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7)
          v2 = v7 % v8;
        else
          v2 = v7;
      }
      else
      {
        v2 = (v8 - 1) & v7;
      }
    }
    v33 = __p[0];
    v34 = (std::string **)*((_QWORD *)__p[0] + v2);
    if (v34)
    {
      v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v34;
LABEL_75:
      *v34 = v13;
      goto LABEL_76;
    }
    v13->__r_.__value_.__r.__words[0] = v52;
    *(_QWORD *)&v52 = v13;
    v33[v2] = &v52;
    if (v13->__r_.__value_.__r.__words[0])
    {
      v35 = *(_QWORD *)(v13->__r_.__value_.__r.__words[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8)
          v35 %= v8;
      }
      else
      {
        v35 &= v8 - 1;
      }
      v34 = (std::string **)((char *)__p[0] + 8 * v35);
      goto LABEL_75;
    }
LABEL_76:
    v4 = ++*((_QWORD *)&v52 + 1);
LABEL_77:
    ++v5;
  }
  while (v5 != 2);
  for (k = 0; k != -8; k -= 4)
  {
    if (SHIBYTE(v56[k + 2]) < 0)
      operator delete((void *)v56[k]);
  }
  if (!__p[1])
    goto LABEL_107;
  v38 = *a1;
  v39 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v39.i16[0] = vaddlv_u8(v39);
  if (v39.u32[0] > 1uLL)
  {
    v40 = *a1;
    if (__p[1] <= (void *)v38)
      v40 = v38 % (unint64_t)__p[1];
  }
  else
  {
    v40 = ((unint64_t)__p[1] - 1) & v38;
  }
  v41 = (uint64_t **)*((_QWORD *)__p[0] + v40);
  if (!v41 || (v42 = *v41) == 0)
  {
LABEL_107:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v50, *a1);
    v45 = std::string::insert(&v50, 0, "Failed to find the string representation of the PSC output class: ");
    v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  while (2)
  {
    v43 = v42[1];
    if (v43 != v38)
    {
      if (v39.u32[0] > 1uLL)
      {
        if ((void *)v43 >= __p[1])
          v43 %= (unint64_t)__p[1];
      }
      else
      {
        v43 &= (unint64_t)__p[1] - 1;
      }
      if (v43 != v40)
        goto LABEL_107;
      goto LABEL_106;
    }
    if (*((_DWORD *)v42 + 4) != (_DWORD)v38)
    {
LABEL_106:
      v42 = (uint64_t *)*v42;
      if (!v42)
        goto LABEL_107;
      continue;
    }
    break;
  }
  if (*((char *)v42 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)v42[3], v42[4]);
  }
  else
  {
    v47 = *(_OWORD *)(v42 + 3);
    a2->__r_.__value_.__r.__words[2] = v42[5];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v47;
  }
  return std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)__p);
}

void sub_1C229187C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *__p,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::orchestration::itfm_response_types::convertSNLCLabelToStringLabel(itfm_inference_orchestrator::orchestration::itfm_response_types *this@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  std::string __p;

  *a2 = 0;
  a2[24] = 0;
  if ((unint64_t)this <= 1)
  {
    v3 = (int)this;
    itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForSNLCOutputClass(&v3, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a2, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void itfm_inference_orchestrator::orchestration::itfm_response_types::convertPSCLabelToStringLabel(itfm_inference_orchestrator::orchestration::itfm_response_types *this@<X0>, _BYTE *a2@<X8>)
{
  int v3;
  std::string __p;

  *a2 = 0;
  a2[24] = 0;
  if ((unint64_t)this <= 1)
  {
    v3 = (int)this;
    itfm_inference_orchestrator::orchestration::itfm_response_types::getStringLabelForPSCOutputClass(&v3, &__p);
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)a2, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::SetNumberVerbReplacer(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "TreeManipulation_SetNumber_VerbReplacement");
  v4[3] = "relative_set_number_verb";
  std::string::basic_string[abi:ne180100]<0>(v4 + 4, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), ".");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), "setNumber");
  *(_BYTE *)(a1 + 104) = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::hasSetNumberVocSpans(a1, a2);
  return a1;
}

void sub_1C2291AB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::hasSetNumberVocSpans(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)a2;
  v3 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v3)
    return 0;
  while (!nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::isSetNumberVocSpan(a1, v2))
  {
    v2 += 11;
    if (v2 == v3)
      return 0;
  }
  v5 = 1;
  v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = 136315138;
    v10 = v8;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] Found setNumber voc span(s)", (uint8_t *)&v9, 0xCu);
  }
  return v5;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::isSetNumberVocSpan(uint64_t a1, _QWORD *a2)
{
  unsigned __int8 **v2;
  _DWORD *v3;
  _DWORD *v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL4 v19;

  v2 = (unsigned __int8 **)a2[6];
  if (!v2)
    return 0;
  v3 = (_DWORD *)a2[1];
  v4 = (_DWORD *)a2[2];
  if (v3 != v4)
  {
    while (1)
    {
      v5 = *v3 == 3 || *v3 == 8;
      if (v5)
        break;
      if (++v3 == v4)
      {
        v3 = (_DWORD *)a2[2];
        break;
      }
    }
  }
  v6 = *(unsigned __int8 *)(a1 + 103);
  if ((v6 & 0x80u) == 0)
    v7 = (unsigned __int8 *)*(unsigned __int8 *)(a1 + 103);
  else
    v7 = *(unsigned __int8 **)(a1 + 88);
  v8 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 23);
  v9 = (char)v8;
  if ((char)v8 < 0)
    v8 = v2[1];
  if (v7 == v8)
  {
    v10 = (const void **)(a1 + 80);
    if (v9 >= 0)
      v11 = (unsigned __int8 *)a2[6];
    else
      v11 = *v2;
    if ((v6 & 0x80) != 0)
    {
      v19 = memcmp(*v10, v11, *(_QWORD *)(a1 + 88)) == 0;
    }
    else if (*(_BYTE *)(a1 + 103))
    {
      v12 = v6 - 1;
      do
      {
        v14 = *(unsigned __int8 *)v10;
        v10 = (const void **)((char *)v10 + 1);
        v13 = v14;
        v16 = *v11++;
        v15 = v16;
        v18 = v12-- != 0;
        v5 = v13 == v15;
        v19 = v13 == v15;
      }
      while (v5 && v18);
    }
    else
    {
      v19 = 1;
    }
  }
  else
  {
    v19 = 0;
  }
  return v4 != v3 && v19;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::apply(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  std::string *v6;
  std::string::pointer data;
  nlv4_inference_orchestrator::trees::TreeNode *v8;
  BOOL v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  _OWORD v12[2];
  __int128 v13;

  if (!*((_BYTE *)this + 104))
    return 0;
  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
  v3 = *((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    LOBYTE(v4) = 0;
    do
    {
      v5 = v3 - 1;
      v6 = *(std::string **)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1)
                                       + (((unint64_t)(v13 + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
                           + 8 * ((v13 + v5) & 0x1FF));
      *((_QWORD *)&v13 + 1) = v5;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](v12);
      v10 = 0;
      nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::replaceTreeNodeVerb(this, v6, &v10);
      v4 |= v10;
      v8 = (nlv4_inference_orchestrator::trees::TreeNode *)v6[3].__r_.__value_.__r.__words[2];
      data = v6[4].__r_.__value_.__l.__data_;
      while (v8 != (nlv4_inference_orchestrator::trees::TreeNode *)data)
      {
        v11 = v8;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(v12, &v11);
        v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      v3 = *((_QWORD *)&v13 + 1);
    }
    while (*((_QWORD *)&v13 + 1));
  }
  else
  {
    v4 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v4;
}

void sub_1C2291DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::replaceTreeNodeVerb(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *this, std::string *__str, BOOL *a3)
{
  const void **v5;
  std::string::size_type v6;
  char *v7;
  uint64_t v8;
  void **p_s1;
  int v10;
  unsigned __int16 *v11;
  uint64_t v12;
  int v13;
  size_t v15;
  size_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  _BOOL4 v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  size_t v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  _BOOL4 v45;
  siri::ontology::oname::graph::ontology_init *v46;
  uint64_t v47;
  uint64_t v48;
  const std::string::value_type *v49;
  const std::string::value_type *v50;
  int v51;
  const std::string::value_type *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  char v56;
  std::string::size_type v57;
  std::string __p;
  std::string v59;
  void *__s1;
  size_t __n;
  unsigned __int8 v62;
  _QWORD v63[3];

  v63[2] = *MEMORY[0x1E0C80C00];
  v5 = (const void **)((char *)this + 56);
  if (*((char *)this + 79) < 0)
  {
    v7 = (char *)*((_QWORD *)this + 7);
    v6 = *((_QWORD *)this + 8);
  }
  else
  {
    v6 = *((unsigned __int8 *)this + 79);
    v7 = (char *)this + 56;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  __p.__r_.__value_.__l.__size_ = v6;
  nlv4_inference_orchestrator::trees::split(&v59, __str, (const void **)&__p.__r_.__value_.__l.__data_);
  p_s1 = &__s1;
  *a3 = 0;
  v10 = v62;
  if ((v62 & 0x80) == 0)
  {
    if (!v62)
      goto LABEL_79;
    v11 = (unsigned __int16 *)&__s1;
    if (v62 != 10)
      goto LABEL_15;
    goto LABEL_11;
  }
  if (__n)
  {
    if (__n != 10)
      goto LABEL_15;
    v11 = (unsigned __int16 *)__s1;
LABEL_11:
    v12 = *(_QWORD *)v11;
    v13 = v11[4];
    if (v12 == 0x6573616572636E69 && v13 == 31042)
    {
      v30 = 1;
      if ((v62 & 0x80) == 0)
      {
LABEL_35:
        v31 = (unsigned __int16 *)&__s1;
        if (v10 != 10)
          goto LABEL_49;
LABEL_42:
        v32 = *(_QWORD *)v31;
        v33 = v31[4];
        if (v32 == 0x6573616572636564 && v33 == 31042)
          goto LABEL_66;
        goto LABEL_49;
      }
      goto LABEL_38;
    }
LABEL_15:
    v8 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_increaseBy((siri::ontology::oname::graph::ontology_init *)v8);
    v10 = v62;
    v15 = __n;
    if ((v62 & 0x80u) == 0)
      v16 = v62;
    else
      v16 = __n;
    v17 = *(unsigned __int8 *)(v8 + 63);
    v18 = (char)v17;
    if ((v17 & 0x80u) != 0)
      v17 = *(_QWORD *)(v8 + 48);
    if (v16 == v17)
    {
      v20 = *(unsigned __int8 **)(v8 + 40);
      v8 += 40;
      v19 = v20;
      if (v18 >= 0)
        v21 = (unsigned __int8 *)v8;
      else
        v21 = v19;
      if ((v62 & 0x80) != 0)
      {
        v8 = memcmp(__s1, v21, __n);
        v30 = v8 == 0;
LABEL_40:
        if (v15 == 10)
        {
          v31 = (unsigned __int16 *)__s1;
          goto LABEL_42;
        }
LABEL_49:
        v35 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_decreaseBy((siri::ontology::oname::graph::ontology_init *)v8);
        v36 = v62;
        v37 = v62;
        if ((v62 & 0x80u) == 0)
          v38 = v62;
        else
          v38 = __n;
        v39 = *(unsigned __int8 *)(v35 + 63);
        v40 = (char)v39;
        if ((v39 & 0x80u) != 0)
          v39 = *(_QWORD *)(v35 + 48);
        if (v38 != v39)
        {
LABEL_63:
          v45 = 0;
          goto LABEL_65;
        }
        v43 = *(unsigned __int8 **)(v35 + 40);
        v41 = (unsigned __int8 *)(v35 + 40);
        v42 = v43;
        if (v40 >= 0)
          v44 = v41;
        else
          v44 = v42;
        if ((char)v62 < 0)
        {
          v45 = memcmp(__s1, v44, __n) == 0;
LABEL_65:
          if (!v30 && !v45)
            goto LABEL_77;
          goto LABEL_66;
        }
        if (v62)
        {
          while (*(unsigned __int8 *)p_s1 == *v44)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v44;
            if (!--v36)
              goto LABEL_66;
          }
          goto LABEL_63;
        }
LABEL_66:
        v46 = (siri::ontology::oname::graph::ontology_init *)std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&__p, (const void **)&v59.__r_.__value_.__l.__data_, v5);
        v47 = siri::ontology::oname::graph::ontology_init::ReferenceNumberTrigger_setNumber(v46);
        v50 = *(const std::string::value_type **)(v47 + 40);
        v48 = v47 + 40;
        v49 = v50;
        v51 = *(char *)(v48 + 23);
        if (v51 >= 0)
          v52 = (const std::string::value_type *)v48;
        else
          v52 = v49;
        if (v51 >= 0)
          v53 = *(unsigned __int8 *)(v48 + 23);
        else
          v53 = *(_QWORD *)(v48 + 8);
        v54 = std::string::append(&__p, v52, v53);
        v55 = v54->__r_.__value_.__r.__words[0];
        v63[0] = v54->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7);
        v56 = HIBYTE(v54->__r_.__value_.__r.__words[2]);
        v54->__r_.__value_.__l.__size_ = 0;
        v54->__r_.__value_.__r.__words[2] = 0;
        v54->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str->__r_.__value_.__l.__data_);
        v57 = v63[0];
        __str->__r_.__value_.__r.__words[0] = v55;
        __str->__r_.__value_.__l.__size_ = v57;
        *(std::string::size_type *)((char *)&__str->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v63 + 7);
        *((_BYTE *)&__str->__r_.__value_.__s + 23) = v56;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *a3 = 1;
        v37 = v62;
LABEL_77:
        if ((v37 & 0x80) == 0)
          goto LABEL_79;
        goto LABEL_78;
      }
      if (!v62)
      {
        v30 = 1;
        goto LABEL_49;
      }
      v22 = v62 - 1;
      v23 = &__s1;
      do
      {
        v25 = *(unsigned __int8 *)v23;
        v23 = (void **)((char *)v23 + 1);
        v24 = v25;
        v27 = *v21++;
        v26 = v27;
        v29 = v22-- != 0;
        v30 = v24 == v26;
      }
      while (v24 == v26 && v29);
    }
    else
    {
      v30 = 0;
    }
    if ((v62 & 0x80) == 0)
      goto LABEL_35;
LABEL_38:
    v15 = __n;
    goto LABEL_40;
  }
LABEL_78:
  operator delete(__s1);
LABEL_79:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
}

void sub_1C2292138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a15);
  _Unwind_Resume(a1);
}

uaap::UPDDDateTimeBaseSpan *uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(uaap::UPDDDateTimeBaseSpan *this, __DDResult *a2)
{
  const __CFString *Value;
  __DDResult *SubresultWithType;
  uaap::UPDDSpan *v6;
  const __CFString *v7;
  uint64_t v8;

  Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(_QWORD *)this = &off_1E7BE9FD8;
  *((_QWORD *)this + 6) = 0;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v6 = (uaap::UPDDSpan *)operator new();
    v7 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v6, SubresultWithType, v7);
    v8 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v6;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return this;
}

void sub_1C229222C(_Unwind_Exception *a1)
{
  uaap::UPDDSpan *v1;
  uint64_t v3;

  v3 = *((_QWORD *)v1 + 6);
  *((_QWORD *)v1 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(uaap::UPDDDateTimeBaseSpan *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE9FD8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE9FD8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E7BE9FD8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpan *uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6)
{
  uaap::UPDDSpan *v8;
  uint64_t v9;
  uint64_t v10;

  v8 = uaap::UPDDSpan::UPDDSpan(a1, a2, a3, a4, a5);
  *(_QWORD *)v8 = &off_1E7BE9FD8;
  *((_QWORD *)v8 + 6) = 0;
  v9 = *a6;
  *a6 = 0;
  v10 = *((_QWORD *)v8 + 6);
  *((_QWORD *)a1 + 6) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t uaap::UPDDSpan::extractIntValueFromCFStringRef(const __CFString *this, const __CFString *a2)
{
  uint64_t v3;
  void **v4;
  int64_t size;
  std::string *p_str;
  int64_t v7;
  char *v8;
  int v9;
  std::string *v10;
  int64_t v11;
  char *v12;
  char *v13;
  std::string::size_type v14;
  std::string __str;
  void *__p[2];
  unsigned __int8 v18;
  unsigned int v19;

  v19 = 0;
  if (DDFastIntegerExtraction())
    return v19;
  v4 = __p;
  std::string::basic_string[abi:ne180100]<0>(__p, "unknown/");
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__str, this);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((v18 & 0x80u) == 0)
  {
    v7 = v18;
  }
  else
  {
    v4 = (void **)__p[0];
    v7 = (int64_t)__p[1];
  }
  if (v7)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size >= v7)
    {
      v8 = (char *)p_str + size;
      v9 = *(char *)v4;
      v10 = p_str;
      do
      {
        v11 = size - v7;
        if (v11 == -1)
          break;
        v12 = (char *)memchr(v10, v9, v11 + 1);
        if (!v12)
          break;
        v13 = v12;
        if (!memcmp(v12, v4, v7))
        {
          if (v13 != v8)
          {
            v14 = v13 - (char *)p_str;
            if (v13 - (char *)p_str != -1)
              goto LABEL_20;
          }
          break;
        }
        v10 = (std::string *)(v13 + 1);
        size = v8 - (v13 + 1);
      }
      while (size >= v7);
    }
  }
  else
  {
    v14 = 0;
LABEL_20:
    std::string::erase(&__str, v14, v7);
  }
  v3 = std::stoi(&__str, 0, 10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  return v3;
}

void sub_1C22924DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t uaap::UPDDSpan::extractIntValueFromDDResult(uaap::UPDDSpan *this, __DDResult *a2)
{
  const __CFString *Value;
  const __CFString *v3;

  Value = (const __CFString *)DDResultGetValue();
  return uaap::UPDDSpan::extractIntValueFromCFStringRef(Value, v3);
}

uaap::UPDDTimeSpan *uaap::UPDDTimeSpan::UPDDTimeSpan(uaap::UPDDTimeSpan *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v4;
  __DDResult *SubresultWithType;
  __DDResult *v6;
  __DDResult *v7;
  __DDResult *v8;
  __DDResult *v9;
  const __CFString *v10;
  __DDResult *v11;
  __DDResult *v12;
  __DDResult *v13;
  uaap::UPDDSpan *v14;
  const __CFString *Value;
  uaap::UPDDSpan *v16;
  uaap::UPDDSpan *v17;
  const __CFString *v18;
  uint64_t v19;
  uaap::UPDDSpan *v20;
  const __CFString *v21;
  uint64_t v22;
  uaap::UPDDSpan *v23;
  const __CFString *v24;
  uint64_t v25;
  uaap::UPDDSpan *v26;
  const __CFString *v27;
  uint64_t v28;
  uaap::UPDDSpan *v29;
  const __CFString *v30;
  uint64_t v31;
  uaap::UPDDTimeSpan *v32;
  uint64_t v33;
  uaap::UPDDSpan *v34;
  const __CFString *v35;
  uint64_t v36;
  uaap::UPDDTimeSpan *v37;
  uint64_t v38;
  uaap::UPDDSpan **v40;
  __DDResult *v41;

  v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v4 = &off_1E7BE9E90;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  v40 = (uaap::UPDDSpan **)((char *)v4 + 56);
  *(_OWORD *)((char *)v4 + 72) = 0u;
  *(_OWORD *)((char *)v4 + 88) = 0u;
  *(_OWORD *)((char *)v4 + 104) = 0u;
  *((_QWORD *)v4 + 15) = 0;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  v6 = (__DDResult *)DDResultGetSubresultWithType();
  v7 = (__DDResult *)DDResultGetSubresultWithType();
  v8 = (__DDResult *)DDResultGetSubresultWithType();
  v9 = (__DDResult *)DDResultGetSubresultWithType();
  v11 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("SpecialTimePeriod"), v10);
  v12 = (__DDResult *)DDResultGetSubresultWithType();
  v13 = (__DDResult *)DDResultGetSubresultWithType();
  v41 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v14 = (uaap::UPDDSpan *)operator new();
    Value = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v14, SubresultWithType, Value);
    v16 = *v40;
    *v40 = v14;
    if (v16)
      (*(void (**)(uaap::UPDDSpan *))(*(_QWORD *)v16 + 8))(v16);
  }
  if (v6)
  {
    v17 = (uaap::UPDDSpan *)operator new();
    v18 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v17, v6, v18);
    v19 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v17;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  if (v7)
  {
    v20 = (uaap::UPDDSpan *)operator new();
    v21 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v20, v7, v21);
    v22 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v20;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  if (v8)
  {
    v23 = (uaap::UPDDSpan *)operator new();
    v24 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v23, v8, v24);
    v25 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v23;
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  }
  if (v9)
  {
    v26 = (uaap::UPDDSpan *)operator new();
    v27 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v26, v9, v27);
    v28 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v26;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  if (!v11)
  {
    v31 = *((_QWORD *)this + 12);
    *((_QWORD *)this + 12) = 0;
    if (!v31)
      goto LABEL_19;
    goto LABEL_18;
  }
  v29 = (uaap::UPDDSpan *)operator new();
  v30 = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(v29, v11, v30);
  v31 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = v29;
  if (v31)
LABEL_18:
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
LABEL_19:
  if (v12)
  {
    v32 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v32, v12);
    v33 = *((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = v32;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  if (v13)
  {
    v34 = (uaap::UPDDSpan *)operator new();
    v35 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v34, v13, v35);
    v36 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v34;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  if (v41)
  {
    v37 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v37, v41);
    v38 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v37;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  return this;
}

void sub_1C2292940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uaap::UPDDDateTimeBaseSpan *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x1C3BB9B44](v10, 0x10E1C406A116140);
  v12 = *((_QWORD *)v9 + 15);
  *((_QWORD *)v9 + 15) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)v9 + 14);
  *((_QWORD *)v9 + 14) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)v9 + 13);
  *((_QWORD *)v9 + 13) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)v9 + 12);
  *((_QWORD *)v9 + 12) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)v9 + 11);
  *((_QWORD *)v9 + 11) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)v9 + 10);
  *((_QWORD *)v9 + 10) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)v9 + 9);
  *((_QWORD *)v9 + 9) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)v9 + 8);
  *((_QWORD *)v9 + 8) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *a9;
  *a9 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v9);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeSpan::~UPDDTimeSpan(uaap::UPDDTimeSpan *this)
{
  uaap::UPDDTimeSpan::~UPDDTimeSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E7BE9E90;
  v2 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v11 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDTimeDurationSpan *uaap::UPDDTimeDurationSpan::UPDDTimeDurationSpan(uaap::UPDDTimeDurationSpan *this, __DDResult *a2)
{
  const __CFString *Value;
  uaap::UPDDTimeSpan **v5;
  __DDResult *SubresultWithType;
  __DDResult *v7;
  uaap::UPDDTimeSpan *v8;
  uaap::UPDDTimeSpan *v9;
  uaap::UPDDTimeSpan *v10;
  uint64_t v11;

  Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(_QWORD *)this = &off_1E7BE9FF8;
  *((_QWORD *)this + 6) = 0;
  v5 = (uaap::UPDDTimeSpan **)((char *)this + 48);
  *((_QWORD *)this + 7) = 0;
  DDResultGetSubresultWithType();
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  v7 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v8 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v8, SubresultWithType);
    v9 = *v5;
    *v5 = v8;
    if (v9)
      (*(void (**)(uaap::UPDDTimeSpan *))(*(_QWORD *)v9 + 8))(v9);
  }
  if (v7)
  {
    v10 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v10, v7);
    v11 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return this;
}

void sub_1C2292D88(_Unwind_Exception *a1)
{
  uaap::UPDDSpan *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1C3BB9B44](v2, 0x10E1C406A116140);
  v5 = *((_QWORD *)v1 + 7);
  *((_QWORD *)v1 + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeDurationSpan::~UPDDTimeDurationSpan(uaap::UPDDTimeDurationSpan *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BE9FF8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E7BE9FF8;
  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uaap::UPDDTimeSpanWithReference *uaap::UPDDTimeSpanWithReference::UPDDTimeSpanWithReference(uaap::UPDDTimeSpanWithReference *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v3;
  uaap::UPDDTimeSpan **v4;
  __DDResult *SubresultWithType;
  __DDResult *v6;
  uaap::UPDDTimeSpan *v7;
  uaap::UPDDTimeSpan *v8;
  uaap::UPDDTimeSpan *v9;
  uint64_t v10;

  v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v3 = &off_1E7BEA058;
  *((_QWORD *)v3 + 7) = 0;
  v4 = (uaap::UPDDTimeSpan **)((char *)v3 + 56);
  *((_QWORD *)v3 + 8) = 0;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  v6 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v7 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v7, SubresultWithType);
    v8 = *v4;
    *v4 = v7;
    if (v8)
      (*(void (**)(uaap::UPDDTimeSpan *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v6)
  {
    v9 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v9, v6);
    v10 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

void sub_1C2292FE0(_Unwind_Exception *a1)
{
  uaap::UPDDDateTimeBaseSpan *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1C3BB9B44](v2, 0x10E1C406A116140);
  v5 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDTimeSpanWithReference::~UPDDTimeSpanWithReference(uaap::UPDDTimeSpanWithReference *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BEA058;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BEA058;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uaap::UPDDSpecialDatePeriodSpan *uaap::UPDDSpecialDatePeriodSpan::UPDDSpecialDatePeriodSpan(uaap::UPDDSpecialDatePeriodSpan *this, __DDResult *a2)
{
  const __CFString *Value;
  uaap::UPDDSpan **v5;
  __DDResult *SubresultWithType;
  __DDResult *v7;
  uint64_t v8;
  const __CFString *v9;
  __DDResult *v10;
  __DDResult *v11;
  uaap::UPDDSpan *v12;
  const __CFString *v13;
  uaap::UPDDSpan *v14;
  uaap::UPDDSpan *v15;
  const __CFString *v16;
  uint64_t v17;
  uint64_t v18;
  uaap::UPDDSpan *v19;
  const __CFString *v20;
  uint64_t v21;
  __DDResult *v22;
  uint64_t v23;
  __DDResult *v24;
  uaap::UPDDSpan *v25;
  const __CFString *v26;
  uint64_t v27;
  uaap::UPDDSpan *v28;
  const __CFString *v29;
  uint64_t v30;
  uaap::UPDDSpan *v31;
  const __CFString *v32;
  uint64_t v33;

  Value = (const __CFString *)DDResultGetValue();
  uaap::UPDDSpan::UPDDSpan(this, a2, Value);
  *(_QWORD *)this = &off_1E7BEA038;
  *((_OWORD *)this + 3) = 0u;
  v5 = (uaap::UPDDSpan **)((char *)this + 48);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  v7 = (__DDResult *)DDResultGetSubresultWithType();
  v8 = DDResultGetSubresultWithType();
  v10 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("OccurrenceCount"), v9);
  v11 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v12 = (uaap::UPDDSpan *)operator new();
    v13 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v12, SubresultWithType, v13);
    v14 = *v5;
    *v5 = v12;
    if (v14)
      (*(void (**)(uaap::UPDDSpan *))(*(_QWORD *)v14 + 8))(v14);
  }
  if (v7)
  {
    v15 = (uaap::UPDDSpan *)operator new();
    v16 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v15, v7, v16);
    v17 = *((_QWORD *)this + 7);
    *((_QWORD *)this + 7) = v15;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  if (v8)
    v18 = DDResultGetValue();
  else
    v18 = 0;
  *((_QWORD *)this + 12) = v18;
  if (v10)
  {
    v19 = (uaap::UPDDSpan *)operator new();
    v20 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v19, v10, v20);
    v21 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v19;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v22 = (__DDResult *)DDResultGetSubresultWithType();
    v23 = DDResultGetSubresultWithType();
    if (v22)
    {
      v24 = (__DDResult *)v23;
      v25 = (uaap::UPDDSpan *)operator new();
      v26 = (const __CFString *)DDResultGetValue();
      uaap::UPDDSpan::UPDDSpan(v25, v22, v26);
      v27 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v25;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      if (v24)
      {
        v28 = (uaap::UPDDSpan *)operator new();
        v29 = (const __CFString *)DDResultGetValue();
        uaap::UPDDSpan::UPDDSpan(v28, v24, v29);
        v30 = *((_QWORD *)this + 9);
        *((_QWORD *)this + 9) = v28;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
    }
  }
  if (v11)
  {
    v31 = (uaap::UPDDSpan *)operator new();
    v32 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v31, v11, v32);
    v33 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v31;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  }
  return this;
}

void sub_1C229346C(_Unwind_Exception *a1)
{
  uaap::UPDDSpan *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *((_QWORD *)v1 + 11);
  *((_QWORD *)v1 + 11) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)v1 + 10);
  *((_QWORD *)v1 + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)v1 + 7);
  *((_QWORD *)v1 + 7) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v2;
  *v2 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  uaap::UPDDSpan::~UPDDSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDSpecialDatePeriodSpan::~UPDDSpecialDatePeriodSpan(uaap::UPDDSpecialDatePeriodSpan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BEA038;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BEA038;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uaap::UPDDSpan *uaap::UPDDSpecialDatePeriodSpan::UPDDSpecialDatePeriodSpan(uaap::UPDDSpan *a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7)
{
  uaap::UPDDSpan *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v13 = uaap::UPDDSpan::UPDDSpan(a1, *(const __CFString **)a2, *(const __CFString **)(a2 + 8), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20));
  *(_QWORD *)v13 = &off_1E7BEA038;
  *((_OWORD *)v13 + 3) = 0u;
  v14 = (uint64_t *)((char *)v13 + 48);
  *((_OWORD *)v13 + 4) = 0u;
  *((_OWORD *)v13 + 5) = 0u;
  v15 = *a3;
  if (*a3)
  {
    *a3 = 0;
    v16 = *v14;
    *v14 = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = *a4;
  if (*a4)
  {
    *a4 = 0;
    v18 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = v17;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v19 = *a5;
  if (*a5)
  {
    *a5 = 0;
    v20 = *((_QWORD *)a1 + 8);
    *((_QWORD *)a1 + 8) = v19;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  v21 = *a6;
  if (*a6)
  {
    *a6 = 0;
    v22 = *((_QWORD *)a1 + 11);
    *((_QWORD *)a1 + 11) = v21;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  }
  *((_QWORD *)a1 + 12) = a7;
  return a1;
}

uaap::UPDDAbsoluteDateSpan *uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(uaap::UPDDAbsoluteDateSpan *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v4;
  const __CFString *v5;
  uaap *v6;
  const __CFString *v7;
  __DDResult *v8;
  __DDResult *SubresultWithType;
  __DDResult *v10;
  __DDResult *v11;
  __DDResult *v12;
  __DDResult *v13;
  const __CFString *v14;
  __DDResult *v15;
  uaap::UPDDSpan *v16;
  const __CFString *Value;
  uaap::UPDDSpan *v18;
  uaap::UPDDSpan *v19;
  const __CFString *v20;
  uint64_t v21;
  uaap::UPDDSpan *v22;
  const __CFString *v23;
  uint64_t v24;
  uaap::UPDDSpan *v25;
  const __CFString *v26;
  const __CFString *v27;
  uint64_t v28;
  uaap::UPDDSpan *v29;
  const __CFString *v30;
  uint64_t v31;
  int v33;
  std::string *v34;
  const __CFString *v35;
  uaap::UPDDSpan *v36;
  uint64_t v37;
  NSObject *v38;
  const __CFString *v39;
  std::string *v40;
  uaap::UPDDSpan **v41;
  std::string v42;
  uint8_t buf[4];
  std::string *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v4 = &off_1E7BE9FB8;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  v41 = (uaap::UPDDSpan **)((char *)v4 + 56);
  *(_OWORD *)((char *)v4 + 72) = 0u;
  *((_QWORD *)v4 + 11) = 0;
  v6 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("SpecialDay"), v5);
  v8 = (__DDResult *)uaap::searchDDTreeWithType(v6, (__DDResult *)CFSTR("Identifier"), v7);
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  v10 = (__DDResult *)DDResultGetSubresultWithType();
  v11 = (__DDResult *)DDResultGetSubresultWithType();
  v12 = (__DDResult *)DDResultGetSubresultWithType();
  v13 = (__DDResult *)DDResultGetSubresultWithType();
  v15 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("DayOfWeek"), v14);
  if (v8)
  {
    v16 = (uaap::UPDDSpan *)operator new();
    Value = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v16, v8, Value);
    v18 = *v41;
    *v41 = v16;
    if (v18)
      (*(void (**)(uaap::UPDDSpan *))(*(_QWORD *)v18 + 8))(v18);
  }
  if (SubresultWithType)
  {
    v19 = (uaap::UPDDSpan *)operator new();
    v20 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v19, SubresultWithType, v20);
    v21 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v19;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  if (v10)
  {
    v22 = (uaap::UPDDSpan *)operator new();
    v23 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v22, v10, v23);
    v24 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  if (v11)
  {
    v25 = (uaap::UPDDSpan *)operator new();
    v26 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v25, v11, v26);
    goto LABEL_14;
  }
  if (v13)
  {
    v25 = (uaap::UPDDSpan *)operator new();
    v27 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v25, v13, v27);
LABEL_14:
    v28 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v25;
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    goto LABEL_16;
  }
  if (v12)
  {
    v33 = MEMORY[0x1C3BB8188](a2);
    if (v33 < 0)
    {
      v38 = SNLPOSLoggerForCategory(3);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = (const __CFString *)DDResultGetValue();
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v42, v39);
        v40 = (v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v42
            : (std::string *)v42.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        v44 = v40;
        _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_ERROR, "Warning: failed to extract JapaneseYear: %s", buf, 0xCu);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::to_string(&v42, v33);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v34 = &v42;
      else
        v34 = (std::string *)v42.__r_.__value_.__r.__words[0];
      v35 = CFStringCreateWithCString(0, (const char *)v34, 0x8000100u);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v42.__r_.__value_.__l.__data_);
      v36 = (uaap::UPDDSpan *)operator new();
      uaap::UPDDSpan::UPDDSpan(v36, v12, v35);
      v37 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = v36;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      if (v35)
        CFRelease(v35);
    }
  }
LABEL_16:
  if (v15)
  {
    v29 = (uaap::UPDDSpan *)operator new();
    v30 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v29, v15, v30);
    v31 = *((_QWORD *)this + 11);
    *((_QWORD *)this + 11) = v29;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  return this;
}

void sub_1C2293C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uaap::UPDDDateTimeBaseSpan *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = *((_QWORD *)v15 + 11);
  *((_QWORD *)v15 + 11) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *((_QWORD *)v15 + 10);
  *((_QWORD *)v15 + 10) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)v15 + 9);
  *((_QWORD *)v15 + 9) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)v15 + 8);
  *((_QWORD *)v15 + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *a9;
  *a9 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v15);
  _Unwind_Resume(a1);
}

void uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(uaap::UPDDAbsoluteDateSpan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BE9FB8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BE9FB8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E7BE9FB8;
  v2 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v7 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDSpan::~UPDDSpan(this);
}

uaap::UPDDSpan *uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v12;
  uaap::UPDDSpan *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v12 = *a6;
  *a6 = 0;
  result = uaap::UPDDSpan::UPDDSpan(a1, a2, a3, a4, a5);
  *((_QWORD *)result + 6) = v12;
  *(_QWORD *)result = &off_1E7BE9FB8;
  v14 = *a7;
  *a7 = 0;
  *((_QWORD *)result + 7) = v14;
  v15 = *a8;
  *a8 = 0;
  *((_QWORD *)result + 8) = v15;
  v16 = *a9;
  *a9 = 0;
  *((_QWORD *)result + 9) = v16;
  v17 = *a10;
  *a10 = 0;
  *((_QWORD *)result + 10) = v17;
  *((_QWORD *)result + 11) = 0;
  return result;
}

{
  return uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1C2293FF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uaap::UPDDDateOffsetSpan *uaap::UPDDDateOffsetSpan::UPDDDateOffsetSpan(uaap::UPDDDateOffsetSpan *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v4;
  uaap::UPDDSpan **v5;
  const __CFString *v6;
  __DDResult *v7;
  const __CFString *v8;
  __DDResult *v9;
  uaap::UPDDSpan *v10;
  const __CFString *Value;
  uaap::UPDDSpan *v12;
  __DDResult *SubresultWithType;
  uint64_t v14;
  __DDResult *v15;
  uaap::UPDDSpan *v16;
  const __CFString *v17;
  uint64_t v18;
  uaap::UPDDSpan *v19;
  const __CFString *v20;
  uint64_t v21;
  uaap::UPDDSpan *v22;
  const __CFString *v23;
  uint64_t v24;

  v4 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v4 = &off_1E7BE9F48;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  v5 = (uaap::UPDDSpan **)((char *)v4 + 56);
  *(_OWORD *)((char *)v4 + 72) = 0u;
  v7 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("OccurrenceCount"), v6);
  v9 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("SpecialDatePeriodUnit"), v8);
  if (v7)
  {
    v10 = (uaap::UPDDSpan *)operator new();
    Value = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v10, v7, Value);
    v12 = *v5;
    *v5 = v10;
    if (v12)
      (*(void (**)(uaap::UPDDSpan *))(*(_QWORD *)v12 + 8))(v12);
    SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
    v14 = DDResultGetSubresultWithType();
    if (SubresultWithType)
    {
      v15 = (__DDResult *)v14;
      v16 = (uaap::UPDDSpan *)operator new();
      v17 = (const __CFString *)DDResultGetValue();
      uaap::UPDDSpan::UPDDSpan(v16, SubresultWithType, v17);
      v18 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = v16;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (v15)
      {
        v19 = (uaap::UPDDSpan *)operator new();
        v20 = (const __CFString *)DDResultGetValue();
        uaap::UPDDSpan::UPDDSpan(v19, v15, v20);
        v21 = *((_QWORD *)this + 8);
        *((_QWORD *)this + 8) = v19;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
    }
  }
  if (v9)
  {
    v22 = (uaap::UPDDSpan *)operator new();
    v23 = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v22, v9, v23);
    v24 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v22;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  return this;
}

void sub_1C2294208(_Unwind_Exception *a1)
{
  uaap::UPDDDateTimeBaseSpan *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *((_QWORD *)v1 + 10);
  *((_QWORD *)v1 + 10) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *v2;
  *v2 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateOffsetSpan::~UPDDDateOffsetSpan(uaap::UPDDDateOffsetSpan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BE9F48;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BE9F48;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uaap::UPDDDateSpan *uaap::UPDDDateSpan::UPDDDateSpan(uaap::UPDDDateSpan *this, __DDResult *a2)
{
  uaap::UPDDAbsoluteDateSpan *v4;
  uaap::UPDDSpan **v5;
  __DDResult *SubresultWithType;
  __DDResult *v7;
  __DDResult *v8;
  __DDResult *v9;
  uint64_t v10;
  const __CFString *v11;
  uint64_t v12;
  uaap::UPDDSpan *v13;
  const __CFString *Value;
  uaap::UPDDSpan *v15;
  __DDResult *v16;
  const __CFString *v17;
  __DDResult *v18;
  const __CFString *v19;
  uaap *v20;
  uaap::UPDDSpan *v21;
  const __CFString *v22;
  uint64_t v23;
  uaap::UPDDSpan *v24;
  const __CFString *v25;
  uint64_t v26;
  int Range;
  int v28;
  int v29;
  int v30;
  uaap::UPDDSpan *v31;
  __DDResult *v32;
  uaap::UPDDSpan *v33;
  const __CFString *v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uaap::UPDDSpan *v40;
  uaap::UPDDAbsoluteDateSpan *v41;
  uint64_t v42;
  uaap::UPDDAbsoluteDateSpan *v43;
  uaap::UPDDDateOffsetSpan *v44;
  uint64_t v45;
  uaap::UPDDSpecialDatePeriodSpan *v46;
  uint64_t v47;

  v4 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(this, a2);
  *(_QWORD *)v4 = &off_1E7BE9E70;
  *((_OWORD *)v4 + 6) = 0u;
  v5 = (uaap::UPDDSpan **)((char *)v4 + 96);
  *((_OWORD *)v4 + 7) = 0u;
  *((_QWORD *)v4 + 16) = 0;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  v7 = (__DDResult *)DDResultGetSubresultWithType();
  v8 = (__DDResult *)DDResultGetSubresultWithType();
  v9 = (__DDResult *)DDResultGetSubresultWithType();
  v10 = DDResultGetSubresultWithType();
  v12 = DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v13 = (uaap::UPDDSpan *)operator new();
    Value = (const __CFString *)DDResultGetValue();
    uaap::UPDDSpan::UPDDSpan(v13, SubresultWithType, Value);
    v15 = *v5;
    *v5 = v13;
    if (v15)
      (*(void (**)(uaap::UPDDSpan *))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v10 | v12)
  {
    v16 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("DayOfWeek"), v11);
    v18 = (__DDResult *)uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("DayOfNextWeek"), v17);
    v20 = uaap::searchDDTreeWithType((uaap *)a2, (__DDResult *)CFSTR("DayOfThisWeek"), v19);
    if (v16)
    {
      v21 = (uaap::UPDDSpan *)operator new();
      v22 = (const __CFString *)DDResultGetValue();
      uaap::UPDDSpan::UPDDSpan(v21, v16, v22);
      v23 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v21;
      if (!v23)
        goto LABEL_18;
LABEL_17:
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      goto LABEL_18;
    }
    if (v18)
    {
      v24 = (uaap::UPDDSpan *)operator new();
      v25 = (const __CFString *)DDResultGetValue();
      uaap::UPDDSpan::UPDDSpan(v24, v18, v25);
      v26 = *((_QWORD *)this + 13);
      *((_QWORD *)this + 13) = v24;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      Range = DDResultGetRange();
      v28 = DDResultGetRange();
      DDResultGetRange();
      v30 = v29;
      v31 = (uaap::UPDDSpan *)operator new();
      uaap::UPDDSpan::UPDDSpan(v31, CFSTR("DateTimeQualifier"), CFSTR("next"), Range, v30 + v28);
      v23 = *((_QWORD *)this + 6);
      *((_QWORD *)this + 6) = v31;
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v32 = (__DDResult *)v20;
      if (v20)
      {
        v33 = (uaap::UPDDSpan *)operator new();
        v34 = (const __CFString *)DDResultGetValue();
        uaap::UPDDSpan::UPDDSpan(v33, v32, v34);
        v35 = *((_QWORD *)this + 13);
        *((_QWORD *)this + 13) = v33;
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
        v36 = DDResultGetRange();
        v37 = DDResultGetRange();
        DDResultGetRange();
        v39 = v38;
        v40 = (uaap::UPDDSpan *)operator new();
        uaap::UPDDSpan::UPDDSpan(v40, CFSTR("DateTimeQualifier"), CFSTR("this"), v36, v39 + v37);
        v23 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v40;
        if (v23)
          goto LABEL_17;
      }
    }
  }
LABEL_18:
  if (v7)
  {
    v41 = (uaap::UPDDAbsoluteDateSpan *)operator new();
    uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(v41, v7);
    v42 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v41;
    if (!v42)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (v8)
  {
    v43 = (uaap::UPDDAbsoluteDateSpan *)operator new();
    uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(v43, v8);
    v42 = *((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = v43;
    if (v42)
LABEL_23:
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  }
LABEL_24:
  if (v9)
  {
    v44 = (uaap::UPDDDateOffsetSpan *)operator new();
    uaap::UPDDDateOffsetSpan::UPDDDateOffsetSpan(v44, v9);
    v45 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v44;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
  if (v12)
  {
    v46 = (uaap::UPDDSpecialDatePeriodSpan *)operator new();
    uaap::UPDDSpecialDatePeriodSpan::UPDDSpecialDatePeriodSpan(v46, (__DDResult *)v12);
    v47 = *((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v46;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  }
  return this;
}

void sub_1C2294880(_Unwind_Exception *a1)
{
  uaap::UPDDAbsoluteDateSpan *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  MEMORY[0x1C3BB9B44](v2, 0x10E1C40AC054123);
  v5 = *((_QWORD *)v1 + 16);
  *((_QWORD *)v1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v1 + 15);
  *((_QWORD *)v1 + 15) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)v1 + 14);
  *((_QWORD *)v1 + 14) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)v1 + 13);
  *((_QWORD *)v1 + 13) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *v3;
  *v3 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  uaap::UPDDAbsoluteDateSpan::~UPDDAbsoluteDateSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateSpan::~UPDDDateSpan(uaap::UPDDDateSpan *this)
{
  uaap::UPDDDateSpan::~UPDDDateSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E7BE9E70;
  v2 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E7BE9FB8;
  v7 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  uaap::UPDDSpan::~UPDDSpan(this);
}

double uaap::UPDDDateSpan::UPDDDateSpan(uaap::UPDDSpan *a1, const __CFString *a2, const __CFString *a3, int a4, int a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uaap::UPDDSpan *v11;
  double result;
  uint64_t v13;

  v11 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)v11 = &off_1E7BE9E70;
  result = 0.0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  v13 = *a11;
  *a11 = 0;
  *((_QWORD *)v11 + 16) = v13;
  return result;
}

{
  uaap::UPDDSpan *v11;
  double result;
  uint64_t v13;

  v11 = uaap::UPDDAbsoluteDateSpan::UPDDAbsoluteDateSpan(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  *(_QWORD *)v11 = &off_1E7BE9E70;
  result = 0.0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  v13 = *a11;
  *a11 = 0;
  *((_QWORD *)v11 + 16) = v13;
  return result;
}

uaap::UPDDDateSpanWithReference *uaap::UPDDDateSpanWithReference::UPDDDateSpanWithReference(uaap::UPDDDateSpanWithReference *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v3;
  uaap::UPDDDateSpan **v4;
  __DDResult *SubresultWithType;
  __DDResult *v6;
  uaap::UPDDDateSpan *v7;
  uaap::UPDDDateSpan *v8;
  uaap::UPDDDateSpan *v9;
  uint64_t v10;

  v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v3 = &off_1E7BEA018;
  *((_QWORD *)v3 + 7) = 0;
  v4 = (uaap::UPDDDateSpan **)((char *)v3 + 56);
  *((_QWORD *)v3 + 8) = 0;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  DDResultGetSubresultWithType();
  v6 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v7 = (uaap::UPDDDateSpan *)operator new();
    uaap::UPDDDateSpan::UPDDDateSpan(v7, SubresultWithType);
    v8 = *v4;
    *v4 = v7;
    if (v8)
      (*(void (**)(uaap::UPDDDateSpan *))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v6)
  {
    v9 = (uaap::UPDDDateSpan *)operator new();
    uaap::UPDDDateSpan::UPDDDateSpan(v9, v6);
    v10 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v9;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return this;
}

void sub_1C2294DD4(_Unwind_Exception *a1)
{
  uaap::UPDDDateTimeBaseSpan *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  MEMORY[0x1C3BB9B44](v2, 0x10E1C402100513ELL);
  v5 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v3;
  *v3 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateSpanWithReference::~UPDDDateSpanWithReference(uaap::UPDDDateSpanWithReference *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BEA018;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E7BEA018;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uaap::UPDDDateTimeSpan *uaap::UPDDDateTimeSpan::UPDDDateTimeSpan(uaap::UPDDDateTimeSpan *this, __DDResult *a2)
{
  uaap::UPDDDateTimeBaseSpan *v3;
  uaap::UPDDTimeSpan **v4;
  __DDResult *SubresultWithType;
  __DDResult *v6;
  __DDResult *v7;
  __DDResult *v8;
  uaap::UPDDTimeSpan *v9;
  uaap::UPDDTimeSpan *v10;
  uaap::UPDDTimeSpan *v11;
  uint64_t v12;
  uaap::UPDDDateSpan *v13;
  uint64_t v14;
  uaap::UPDDDateSpan *v15;
  uint64_t v16;

  v3 = uaap::UPDDDateTimeBaseSpan::UPDDDateTimeBaseSpan(this, a2);
  *(_QWORD *)v3 = &off_1E7BE9F28;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  v4 = (uaap::UPDDTimeSpan **)((char *)v3 + 56);
  *(_OWORD *)((char *)v3 + 72) = 0u;
  SubresultWithType = (__DDResult *)DDResultGetSubresultWithType();
  v6 = (__DDResult *)DDResultGetSubresultWithType();
  v7 = (__DDResult *)DDResultGetSubresultWithType();
  v8 = (__DDResult *)DDResultGetSubresultWithType();
  if (SubresultWithType)
  {
    v9 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v9, SubresultWithType);
    v10 = *v4;
    *v4 = v9;
    if (v10)
      (*(void (**)(uaap::UPDDTimeSpan *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (v7)
  {
    v11 = (uaap::UPDDTimeSpan *)operator new();
    uaap::UPDDTimeSpan::UPDDTimeSpan(v11, v7);
    v12 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = v11;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if (v6)
  {
    v13 = (uaap::UPDDDateSpan *)operator new();
    uaap::UPDDDateSpan::UPDDDateSpan(v13, v6);
    v14 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v13;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (v8)
  {
    v15 = (uaap::UPDDDateSpan *)operator new();
    uaap::UPDDDateSpan::UPDDDateSpan(v15, v8);
    v16 = *((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = v15;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return this;
}

void sub_1C2295118(_Unwind_Exception *a1)
{
  uaap::UPDDDateTimeBaseSpan *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x1C3BB9B44](v2, 0x10E1C402100513ELL);
  v5 = *((_QWORD *)v1 + 10);
  *((_QWORD *)v1 + 10) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)v1 + 9);
  *((_QWORD *)v1 + 9) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)v1 + 8);
  *((_QWORD *)v1 + 8) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *v3;
  *v3 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  uaap::UPDDDateTimeBaseSpan::~UPDDDateTimeBaseSpan(v1);
  _Unwind_Resume(a1);
}

void uaap::UPDDDateTimeSpan::~UPDDDateTimeSpan(uaap::UPDDDateTimeSpan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BE9F28;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDSpan::~UPDDSpan(this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E7BE9F28;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *(_QWORD *)this = &off_1E7BE9FD8;
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  uaap::UPDDSpan::~UPDDSpan(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::common::asset_logger::SNLPAssetLogger::SNLPAssetLogger(uint64_t a1, int a2, char *a3, _QWORD *a4, uint64_t a5)
{
  int v7;

  v7 = a2;
  bundleInfoForAssetsDirectory(&v7, a3, a4, a5, a1);
  return a1;
}

{
  int v7;

  v7 = a2;
  bundleInfoForAssetsDirectory(&v7, a3, a4, a5, a1);
  return a1;
}

uint64_t snlp::common::asset_logger::SNLPAssetLogger::toString(snlp::common::asset_logger::SNLPAssetLogger *this)
{
  uint64_t v1;
  _QWORD v3[13];
  char v4;
  uint64_t v5;

  snlp::common::asset_logger::SNLPAssetLogger::toStringStream(this, (uint64_t)v3);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F50];
  v1 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v4 < 0)
    operator delete((void *)v3[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v5);
}

void sub_1C2295498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::common::asset_logger::SNLPAssetLogger::toStringStream(snlp::common::asset_logger::SNLPAssetLogger *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type v4;
  char *v5;
  NSObject *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  _QWORD *v21;
  snlp::common::asset_logger::SNLPAssetLogger *v22;
  std::string *p_buf;
  std::string::size_type size;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  snlp::common::asset_logger::SNLPAssetLogger *v30;
  snlp::common::asset_logger::SNLPAssetLogger *v31;
  BOOL v32;
  void *__p[2];
  unsigned __int8 v34;
  std::string buf;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](a2);
  v4 = *(int *)this;
  if (v4 >= 8)
  {
    v6 = SNLPOSLoggerForCategory(4);
    v5 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v4;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v5 = off_1E7BED840[v4];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v5);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"Component: ", 11);
  if ((v34 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  if ((v34 & 0x80u) == 0)
    v9 = v34;
  else
    v9 = (uint64_t)__p[1];
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"Version: SNLPVersionInfo[train=", 31);
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", majorVersion=", 15);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", minorVersion=", 15);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"]\n", 2);
  if (*((_BYTE *)this + 64))
  {
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"Bolt task ID: ", 14);
    if (!*((_BYTE *)this + 64))
      std::__throw_bad_optional_access[abi:ne180100]();
    v15 = *((char *)this + 63);
    if (v15 >= 0)
      v16 = (char *)this + 40;
    else
      v16 = (char *)*((_QWORD *)this + 5);
    if (v15 >= 0)
      v17 = *((unsigned __int8 *)this + 63);
    else
      v17 = *((_QWORD *)this + 6);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v16, v17);
    v19 = "\n";
    v20 = 1;
  }
  else
  {
    v19 = "Bolt task ID: <missing>";
    v20 = 23;
    v18 = (_QWORD *)(a2 + 16);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
  if (*((_QWORD *)this + 11))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"Combined Hash: ", 15);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\n", 1);
    v22 = (snlp::common::asset_logger::SNLPAssetLogger *)*((_QWORD *)this + 9);
    if (v22 != (snlp::common::asset_logger::SNLPAssetLogger *)((char *)this + 80))
    {
      do
      {
        if (*((char *)v22 + 55) < 0)
          std::string::__init_copy_ctor_external(&buf, *((const std::string::value_type **)v22 + 4), *((_QWORD *)v22 + 5));
        else
          buf = *(std::string *)((char *)v22 + 32);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        else
          size = buf.__r_.__value_.__l.__size_;
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)p_buf, size);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"=", 1);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        v26 = *((_BYTE *)v22 + 79);
        if (v26 < 0)
        {
          v27 = *((_QWORD *)v22 + 8);
          if (v27)
            goto LABEL_38;
        }
        else if (*((_BYTE *)v22 + 79))
        {
          v27 = *((_QWORD *)v22 + 8);
LABEL_38:
          if (v26 >= 0)
            v28 = (uint64_t)v22 + 56;
          else
            v28 = *((_QWORD *)v22 + 7);
          if (v26 >= 0)
            v29 = *((unsigned __int8 *)v22 + 79);
          else
            v29 = v27;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), v28, v29);
          goto LABEL_46;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"asset could not be read", 23);
LABEL_46:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"\n", 1);
        v30 = (snlp::common::asset_logger::SNLPAssetLogger *)*((_QWORD *)v22 + 1);
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = *(snlp::common::asset_logger::SNLPAssetLogger **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (snlp::common::asset_logger::SNLPAssetLogger *)*((_QWORD *)v22 + 2);
            v32 = *(_QWORD *)v31 == (_QWORD)v22;
            v22 = v31;
          }
          while (!v32);
        }
        v22 = v31;
      }
      while (v31 != (snlp::common::asset_logger::SNLPAssetLogger *)((char *)this + 80));
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)(a2 + 16), (uint64_t)"No assets provided", 18);
  }
  if ((char)v34 < 0)
    operator delete(__p[0]);
}

void sub_1C2295848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v21);
  _Unwind_Resume(a1);
}

BOOL snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId(snlp::common::espresso_inference::e5ml::MILSELFLogger *this)
{
  int v1;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  int v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v1 = *((unsigned __int8 *)this + 112);
  if (!*((_BYTE *)this + 112))
  {
    v3 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *((int *)this + 30);
      if (v4 >= 8)
      {
        v6 = SNLPOSLoggerForCategory(4);
        v5 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          v8 = 136315394;
          v9 = "<UNDEFINED_COMPONENT>";
          v10 = 2048;
          v11 = v4;
          _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v8, 0x16u);
        }
      }
      else
      {
        v5 = off_1E7BED840[v4];
      }
      v8 = 136315138;
      v9 = v5;
      _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_ERROR, "[%s] No context ID was provided for MIL compilation SELF logs.  This will prevent any MIL-related SELF logs from being emitted from SiriNaturalLanguageParsing.", (uint8_t *)&v8, 0xCu);
    }
  }
  return v1 != 0;
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(snlp::common::espresso_inference::e5ml::MILSELFLogger *this, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2)
{
  char *v2;
  void *__p[2];
  char v4;

  v2 = (char *)this + 88;
  if (*((_BYTE *)this + 80))
    snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(this, a2, __p);
  else
    snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(__p);
  std::optional<std::string>::operator=[abi:ne180100]<std::string,void>((uint64_t)v2, (__int128 *)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess(uint64_t a1, int *a2)
{
  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1))
    return;
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a2);
      goto LABEL_7;
    }
LABEL_12:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_12;
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded((uint64_t *)(a1 + 88));
LABEL_7:
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
  }
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFFailure(uint64_t a1, uint64_t a2, int *a3)
{
  char *v6;
  char *v7;
  void *__p[2];
  char v9;
  unsigned int v10;

  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1))
    return;
  if (!*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v10 = 0;
      v7 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      std::string::basic_string[abi:ne180100]<0>(__p, v7);
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((uint64_t *)(a1 + 88), a3, &v10, (uint64_t *)__p);
      goto LABEL_7;
    }
LABEL_14:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_14;
  v10 = 0;
  v6 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a3, &v10, (uint64_t *)__p);
LABEL_7:
  if (v9 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
  }
}

void sub_1C2295BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFE5RTError(uint64_t a1, E5RT::E5RTError *a2, int *a3)
{
  E5RT::Status *Status;
  int ErrorCode;
  unsigned int v8;
  unsigned int v9;

  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1))
    return;
  Status = (E5RT::Status *)E5RT::E5RTError::GetStatus(a2);
  ErrorCode = E5RT::Status::GetErrorCode(Status);
  if (ErrorCode > 10)
  {
    if (ErrorCode != 11)
    {
      if (ErrorCode == 13)
      {
        v8 = 1;
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    v8 = 2;
  }
  else
  {
    if (ErrorCode != 1)
    {
      if (ErrorCode == 2)
      {
        v8 = 4;
        goto LABEL_12;
      }
LABEL_9:
      v8 = 5;
      goto LABEL_12;
    }
    v8 = 3;
  }
LABEL_12:
  v9 = v8;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::selfLogE5RTError(a1, (uint64_t)a2, &v9, a3);
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
  }
}

void snlp::common::espresso_inference::e5ml::MILSELFLogger::selfLogE5RTError(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4)
{
  char *v8;
  char *v9;
  void *__p[2];
  char v11;

  if (!snlp::common::espresso_inference::e5ml::MILSELFLogger::checkContextId((snlp::common::espresso_inference::e5ml::MILSELFLogger *)a1))
    return;
  if (!*(_BYTE *)(a1 + 80))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
      std::string::basic_string[abi:ne180100]<0>(__p, v9);
      snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((uint64_t *)(a1 + 88), a4, a3, (uint64_t *)__p);
      goto LABEL_7;
    }
LABEL_14:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (!*(_BYTE *)(a1 + 112))
    goto LABEL_14;
  v8 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed((snlp::common::espresso_inference::e5ml::selflogging *)a1, (uint64_t *)(a1 + 88), a4, a3, (uint64_t *)__p);
LABEL_7:
  if (v11 < 0)
    operator delete(__p[0]);
  if (*(_BYTE *)(a1 + 112))
  {
    if (*(char *)(a1 + 111) < 0)
      operator delete(*(void **)(a1 + 88));
    *(_BYTE *)(a1 + 112) = 0;
  }
}

void sub_1C2295D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::device::deviceRequiresWiredMemory(snlp::common::device *this)
{
  return 0;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::apply(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  char v3;
  unint64_t v4;
  nlv4_inference_orchestrator::trees::TreeNode *v5;
  char v6;
  nlv4_inference_orchestrator::trees::TreeNode *v7;
  nlv4_inference_orchestrator::trees::TreeNode *v8;
  uint64_t v9;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  _OWORD v12[2];
  unsigned __int128 v13;

  v13 = 0u;
  memset(v12, 0, sizeof(v12));
  v11 = a2;
  std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(v12, &v11);
  if (*((_QWORD *)&v13 + 1))
  {
    v3 = 0;
    v4 = v13;
    do
    {
      v5 = *(nlv4_inference_orchestrator::trees::TreeNode **)(*(_QWORD *)(*((_QWORD *)&v12[0] + 1)
                                                                        + ((v4 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                            + 8 * (v4 & 0x1FF));
      v6 = nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::replaceDefaultSettingValue(this, v5);
      v8 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v5 + 11);
      v7 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v5 + 12);
      while (v8 != v7)
      {
        v11 = v8;
        std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(v12, &v11);
        v8 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v8 + 144);
      }
      v9 = *((_QWORD *)&v13 + 1) - 1;
      v4 = v13 + 1;
      v13 = __PAIR128__(*((unint64_t *)&v13 + 1), (uint64_t)v13 + 1) + __PAIR128__(-1, 0);
      if (v4 >= 0x400)
      {
        operator delete(**((void ***)&v12[0] + 1));
        v4 = v13 - 512;
        *((_QWORD *)&v12[0] + 1) += 8;
        *(_QWORD *)&v13 = v13 - 512;
        v9 = *((_QWORD *)&v13 + 1);
      }
      v3 |= v6;
    }
    while (v9);
  }
  else
  {
    v3 = 0;
  }
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)v12);
  return v3 & 1;
}

void sub_1C2296594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::deque<nlv4_inference_orchestrator::trees::TreeNode *>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode *>(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v8 = a1[5];
      v5 = (char *)a1[1];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C2296B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::replaceDefaultSettingValue(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  nlv4_inference_orchestrator::trees::TreeNode *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const void **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  int v63;
  NSObject *v64;
  _BOOL4 v65;
  __int128 v67;
  uint8_t buf[16];
  std::string __str;
  std::string v70;
  std::string v71;
  __int128 v72;
  std::string *v73;
  __int128 *v74;
  __int128 v75;
  __int128 v76;
  unsigned __int8 v77;

  v2 = *((unsigned __int8 *)a2 + 71);
  v3 = *((_QWORD *)a2 + 7);
  if ((v2 & 0x80u) == 0)
    v4 = *((unsigned __int8 *)a2 + 71);
  else
    v4 = *((_QWORD *)a2 + 7);
  v5 = *((unsigned __int8 *)this + 343);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)this + 41);
  if (v4 != v5)
    return 0;
  v9 = (const void **)((char *)a2 + 48);
  if (v6 >= 0)
    v10 = (unsigned __int8 *)this + 320;
  else
    v10 = (unsigned __int8 *)*((_QWORD *)this + 40);
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, v3))
      return 0;
LABEL_16:
    v11 = *((unsigned __int8 *)a2 + 23);
    if ((v11 & 0x80u) == 0)
      v12 = *((unsigned __int8 *)a2 + 23);
    else
      v12 = *((_QWORD *)a2 + 1);
    v13 = *((unsigned __int8 *)this + 199);
    v14 = (char)v13;
    if ((v13 & 0x80u) != 0)
      v13 = *((_QWORD *)this + 23);
    if (v12 != v13)
      return 0;
    if (v14 >= 0)
      v15 = (unsigned __int8 *)this + 176;
    else
      v15 = (unsigned __int8 *)*((_QWORD *)this + 22);
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, v15, *((_QWORD *)a2 + 1)))
        return 0;
    }
    else if (*((_BYTE *)a2 + 23))
    {
      v16 = a2;
      while (*(unsigned __int8 *)v16 == *v15)
      {
        v16 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v16 + 1);
        ++v15;
        if (!--v11)
          goto LABEL_32;
      }
      return 0;
    }
LABEL_32:
    v17 = *((_QWORD *)a2 + 11);
    v18 = *((_QWORD *)a2 + 12);
    if (v17 == v18)
      return 0;
    v19 = (_QWORD *)((char *)this + 344);
    v20 = (const void **)((char *)this + 296);
    while (1)
    {
      v21 = *(unsigned __int8 *)(v17 + 71);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v17 + 71);
      else
        v22 = *(_QWORD *)(v17 + 56);
      v23 = *((unsigned __int8 *)this + 367);
      v24 = (char)v23;
      if ((v23 & 0x80u) != 0)
        v23 = *((_QWORD *)this + 44);
      if (v22 != v23)
        goto LABEL_66;
      v25 = v24 >= 0 ? (unsigned __int8 *)v19 : (unsigned __int8 *)*v19;
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v17 + 48), v25, *(_QWORD *)(v17 + 56)))
          goto LABEL_66;
      }
      else if (*(_BYTE *)(v17 + 71))
      {
        v26 = 0;
        while (*(unsigned __int8 *)(v17 + v26 + 48) == v25[v26])
        {
          if (v21 == ++v26)
            goto LABEL_50;
        }
        goto LABEL_66;
      }
LABEL_50:
      v27 = *(unsigned __int8 *)(v17 + 23);
      if ((v27 & 0x80u) == 0)
        v28 = *(unsigned __int8 *)(v17 + 23);
      else
        v28 = *(_QWORD *)(v17 + 8);
      v29 = *((unsigned __int8 *)this + 223);
      v30 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v29 = *((_QWORD *)this + 26);
      if (v28 == v29)
      {
        if (v30 >= 0)
          v31 = (char *)this + 200;
        else
          v31 = (char *)*((_QWORD *)this + 25);
        if ((v27 & 0x80) == 0)
        {
          if (!*(_BYTE *)(v17 + 23))
            break;
          v32 = 0;
          while (*(unsigned __int8 *)(v17 + v32) == v31[v32])
          {
            if (v27 == ++v32)
              goto LABEL_68;
          }
          goto LABEL_66;
        }
        if (!memcmp(*(const void **)v17, v31, *(_QWORD *)(v17 + 8)))
          break;
      }
LABEL_66:
      v17 += 144;
      if (v17 == v18)
        return 0;
    }
LABEL_68:
    v34 = *(_QWORD *)(v17 + 88);
    v33 = *(_QWORD *)(v17 + 96);
    while (1)
    {
      if (v34 == v33)
        goto LABEL_66;
      v35 = *(unsigned __int8 *)(v34 + 71);
      if ((v35 & 0x80u) == 0)
        v36 = *(unsigned __int8 *)(v34 + 71);
      else
        v36 = *(_QWORD *)(v34 + 56);
      v37 = *((unsigned __int8 *)this + 319);
      v38 = (char)v37;
      if ((v37 & 0x80u) != 0)
        v37 = *((_QWORD *)this + 38);
      if (v36 == v37)
      {
        if (v38 >= 0)
          v39 = (unsigned __int8 *)v20;
        else
          v39 = (unsigned __int8 *)*v20;
        if ((v35 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v34 + 48), v39, *(_QWORD *)(v34 + 56)))
            goto LABEL_102;
        }
        else if (*(_BYTE *)(v34 + 71))
        {
          v40 = 0;
          while (*(unsigned __int8 *)(v34 + v40 + 48) == v39[v40])
          {
            if (v35 == ++v40)
              goto LABEL_86;
          }
          goto LABEL_102;
        }
LABEL_86:
        v41 = *(unsigned __int8 *)(v34 + 23);
        if ((v41 & 0x80u) == 0)
          v42 = *(unsigned __int8 *)(v34 + 23);
        else
          v42 = *(_QWORD *)(v34 + 8);
        v43 = *((unsigned __int8 *)this + 175);
        v44 = (char)v43;
        if ((v43 & 0x80u) != 0)
          v43 = *((_QWORD *)this + 20);
        if (v42 == v43)
        {
          if (v44 >= 0)
            v45 = (char *)this + 152;
          else
            v45 = (char *)*((_QWORD *)this + 19);
          if ((v41 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v34, v45, *(_QWORD *)(v34 + 8)))
              goto LABEL_102;
LABEL_103:
            v48 = *(_QWORD *)(v34 + 88);
            v47 = *(_QWORD *)(v34 + 96);
            while (2)
            {
              if (v48 == v47)
                goto LABEL_102;
              v49 = *(unsigned __int8 *)(v48 + 71);
              if ((v49 & 0x80u) == 0)
                v50 = *(unsigned __int8 *)(v48 + 71);
              else
                v50 = *(_QWORD *)(v48 + 56);
              v51 = *((unsigned __int8 *)this + 271);
              v52 = (char)v51;
              if ((v51 & 0x80u) != 0)
                v51 = *((_QWORD *)this + 32);
              if (v50 == v51)
              {
                if (v52 >= 0)
                  v53 = (char *)this + 248;
                else
                  v53 = (char *)*((_QWORD *)this + 31);
                if ((v49 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)(v48 + 48), v53, *(_QWORD *)(v48 + 56)))
                    goto LABEL_121;
                }
                else
                {
                  if (*(_BYTE *)(v48 + 71))
                  {
                    v54 = 0;
                    while (*(unsigned __int8 *)(v48 + v54 + 48) == v53[v54])
                    {
                      if (v49 == ++v54)
                        goto LABEL_121;
                    }
                    goto LABEL_143;
                  }
LABEL_121:
                  v55 = *(unsigned __int8 *)(v48 + 23);
                  if ((v55 & 0x80u) == 0)
                    v56 = *(unsigned __int8 *)(v48 + 23);
                  else
                    v56 = *(_QWORD *)(v48 + 8);
                  v57 = *((unsigned __int8 *)this + 127);
                  v58 = (char)v57;
                  if ((v57 & 0x80u) != 0)
                    v57 = *((_QWORD *)this + 14);
                  if (v56 == v57)
                  {
                    if (v58 >= 0)
                      v59 = (char *)this + 104;
                    else
                      v59 = (char *)*((_QWORD *)this + 13);
                    if ((v55 & 0x80) == 0)
                    {
                      if (*(_BYTE *)(v48 + 23))
                      {
                        v60 = 0;
                        while (*(unsigned __int8 *)(v48 + v60) == v59[v60])
                        {
                          if (v55 == ++v60)
                            goto LABEL_137;
                        }
                        goto LABEL_143;
                      }
LABEL_137:
                      v61 = v18;
                      nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSubTreeFromSpans((const sirinluinternal::MatchingSpan **)this, (const nlv4_inference_orchestrator::trees::TreeNode *)v34, &__str);
                      v62 = SNLPOSLoggerForCategory(1);
                      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_1C2196000, v62, OS_LOG_TYPE_DEBUG, "Trying to find a media playback subtree to replace default value playback speed.", buf, 2u);
                      }
                      v63 = v77;
                      v64 = SNLPOSLoggerForCategory(1);
                      v65 = os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG);
                      if (v63)
                      {
                        if (v65)
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl(&dword_1C2196000, v64, OS_LOG_TYPE_DEBUG, "Found a media playback subtree to replace default value playback speed.", buf, 2u);
                        }
                        if (!v77)
                          std::__throw_bad_optional_access[abi:ne180100]();
                        std::string::operator=((std::string *)v34, &__str);
                        std::string::operator=((std::string *)(v34 + 24), &v70);
                        std::string::operator=((std::string *)(v34 + 48), &v71);
                        *(_OWORD *)(v34 + 72) = v72;
                        if ((std::string *)v34 != &__str)
                          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(v34 + 88, v73, v74, 0x8E38E38E38E38E39 * (((char *)v74 - (char *)v73) >> 4));
                        v67 = v76;
                        *(_OWORD *)(v34 + 112) = v75;
                        *(_OWORD *)(v34 + 128) = v67;
                        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__str);
                        return 1;
                      }
                      v18 = v61;
                      if (v65)
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl(&dword_1C2196000, v64, OS_LOG_TYPE_DEBUG, "Failed to find a media playback span with speed value.", buf, 2u);
                      }
                      std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__str);
                      v20 = (const void **)((char *)this + 296);
                      v19 = (_QWORD *)((char *)this + 344);
                      goto LABEL_143;
                    }
                    if (!memcmp(*(const void **)v48, v59, *(_QWORD *)(v48 + 8)))
                      goto LABEL_137;
                  }
                }
              }
LABEL_143:
              v48 += 144;
              continue;
            }
          }
          if (!*(_BYTE *)(v34 + 23))
            goto LABEL_103;
          v46 = 0;
          while (*(unsigned __int8 *)(v34 + v46) == v45[v46])
          {
            if (v41 == ++v46)
              goto LABEL_103;
          }
        }
      }
LABEL_102:
      v34 += 144;
    }
  }
  if (!(_DWORD)v2)
    goto LABEL_16;
  while (*(unsigned __int8 *)v9 == *v10)
  {
    v9 = (const void **)((char *)v9 + 1);
    ++v10;
    if (!--v2)
      goto LABEL_16;
  }
  return 0;
}

void sub_1C229713C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

const sirinluinternal::MatchingSpan **nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSubTreeFromSpans@<X0>(const sirinluinternal::MatchingSpan **this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, std::string *a3@<X8>)
{
  const sirinluinternal::MatchingSpan *v4;
  const sirinluinternal::MatchingSpan *v5;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *v7;
  _BYTE v8[152];

  v4 = this[3];
  v5 = this[4];
  if (v4 == v5)
  {
LABEL_5:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[6].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v7 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *)this;
    while (1)
    {
      nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSpeedSubTreeFromSpan(v7, v4, a2, (uint64_t)v8);
      if (v8[144])
        break;
      this = (const sirinluinternal::MatchingSpan **)std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
      v4 = (const sirinluinternal::MatchingSpan *)((char *)v4 + 88);
      if (v4 == v5)
        goto LABEL_5;
    }
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a3, (const nlv4_inference_orchestrator::trees::TreeNode *)v8);
    a3[6].__r_.__value_.__s.__data_[0] = 1;
    return (const sirinluinternal::MatchingSpan **)std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  }
  return this;
}

void sub_1C22971F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::findMediaPlaybackSpeedSubTreeFromSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, const nlv4_inference_orchestrator::trees::TreeNode *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  _DWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned __int8 *v15;
  __int128 v16;
  std::string v17;
  void *v18[2];
  uint64_t v19;
  std::string __p;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  _BYTE v29[56];
  void **v30;
  std::string v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = (_DWORD *)*((_QWORD *)a2 + 1);
  v9 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v8 != v9)
  {
    while (*v8 != *((_DWORD *)this + 12))
    {
      if (++v8 == v9)
      {
        v8 = (_DWORD *)*((_QWORD *)a2 + 2);
        break;
      }
    }
  }
  if (v8 == v9)
    goto LABEL_43;
  v10 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
  v11 = v10[23];
  if ((v11 & 0x80u) == 0)
    v12 = v10[23];
  else
    v12 = *((_QWORD *)v10 + 1);
  v13 = *((unsigned __int8 *)this + 79);
  v14 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v13 = *((_QWORD *)this + 8);
  if (v12 != v13)
    goto LABEL_43;
  if (v14 >= 0)
    v15 = (unsigned __int8 *)this + 56;
  else
    v15 = (unsigned __int8 *)*((_QWORD *)this + 7);
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, v15, *((_QWORD *)v10 + 1)))
      goto LABEL_43;
  }
  else if (v10[23])
  {
    while (*v10 == *v15)
    {
      ++v10;
      ++v15;
      if (!--v11)
        goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_21:
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 61, *((unsigned __int8 **)a2 + 7)))
  {
    if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)this + 66, *((unsigned __int8 **)a2 + 7)))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v26, a3);
      MEMORY[0x1C3BB9634](&v26, "");
      std::string::operator=(&v28, (const std::string *)((char *)this + 224));
      std::string::operator=(&v27, *((const std::string **)a2 + 7));
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v29, 0, 0, 0);
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v17, a3);
      std::string::operator=(&v17, (const std::string *)((char *)this + 80));
      std::string::operator=(&__p, (const std::string *)((char *)this + 296));
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v31, (const nlv4_inference_orchestrator::trees::TreeNode *)&v26);
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v22, (nlv4_inference_orchestrator::trees::TreeNode *)&v31, (nlv4_inference_orchestrator::trees::TreeNode *)&v37, 1uLL);
      goto LABEL_25;
    }
LABEL_43:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 144) = 0;
    return;
  }
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v26, a3);
  MEMORY[0x1C3BB9634](&v26, "");
  std::string::operator=(&v28, (const std::string *)((char *)this + 272));
  std::string::operator=(&v27, *((const std::string **)a2 + 7));
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)v29, 0, 0, 0);
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v17, a3);
  std::string::operator=(&v17, (const std::string *)((char *)this + 128));
  std::string::operator=(&__p, (const std::string *)((char *)this + 296));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v31, (const nlv4_inference_orchestrator::trees::TreeNode *)&v26);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v22, (nlv4_inference_orchestrator::trees::TreeNode *)&v31, (nlv4_inference_orchestrator::trees::TreeNode *)&v37, 1uLL);
LABEL_25:
  v30 = (void **)&v36;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (v35 < 0)
    operator delete(v34);
  if (v33 < 0)
    operator delete(v32);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  *(std::string *)a4 = v17;
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v18;
  *(_QWORD *)(a4 + 40) = v19;
  v17.__r_.__value_.__r.__words[2] = 0;
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  *(std::string *)(a4 + 48) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(a4 + 72) = v21;
  *(_OWORD *)(a4 + 88) = v22;
  *(_QWORD *)(a4 + 104) = v23;
  v22 = 0uLL;
  v23 = 0;
  v16 = v25;
  *(_OWORD *)(a4 + 112) = v24;
  *(_OWORD *)(a4 + 128) = v16;
  *(_BYTE *)(a4 + 144) = 1;
  v31.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1C22975DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  uint64_t v27;

  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v27 - 200));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a9);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a27);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::isVOCSpan(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a2 + 8);
  v3 = *(_DWORD **)(a2 + 16);
  if (v2 != v3)
  {
    while (*v2 != *(_DWORD *)(a1 + 48))
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(a2 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::NLv4InferenceOrchestrator(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__fs::filesystem::path *v6;
  std::__fs::filesystem::path *v7;
  std::__fs::filesystem::path *v8;
  std::string::size_type v9;
  char *v10;
  NSObject *v11;
  std::string *v12;
  __int128 v13;
  NSObject *v14;
  void **v15;
  std::string *p_buf;
  std::string::size_type v17;
  char *v18;
  NSObject *v19;
  unsigned __int8 v20;
  uint64_t v21;
  __int128 v22;
  _BYTE *v23;
  int data;
  _BYTE *v25;
  int v26;
  uint64_t *v27;
  int v28;
  unsigned __int8 *v29;
  std::string::value_type v30;
  const std::string **v31;
  void *v32;
  std::string *v33;
  __int128 v34;
  NSObject *v35;
  std::string *v36;
  std::string *v37;
  std::string *v38;
  __int128 v39;
  siri::ontology *v40;
  _QWORD *SharedUsoVocabManager;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *size;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  std::string *v67;
  __int128 v68;
  NSObject *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v77;
  _QWORD *v78;
  _BYTE v79[40];
  __int128 v80;
  std::string v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  std::string v84;
  std::string v85;
  unsigned __int8 v86[8];
  std::string::size_type *v87;
  void *v88[2];
  char v89;
  std::string v90;
  std::string v91;
  void *__p[2];
  __int128 v93;
  _OWORD v94[24];
  uint64_t v95;
  std::string v96;
  std::string buf;
  _QWORD v98[3];
  int v99;
  std::string v100;
  unint64_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = 2;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "max_num_spans_tokens");
  +[SNLPAssetVersionChecker loadUInt32ListFromConfigPListResourceName:](SNLPAssetVersionChecker, "loadUInt32ListFromConfigPListResourceName:", CFSTR("NLv4SupportedGenerationList"));
  v94[0] = xmmword_1C230EEC8;
  v94[1] = unk_1C230EED8;
  v94[2] = xmmword_1C230EEE8;
  v94[3] = unk_1C230EEF8;
  *(_OWORD *)__p = xmmword_1C230EEA8;
  v93 = unk_1C230EEB8;
  std::unordered_set<unsigned int>::unordered_set(a1 + 72, (unsigned int *)__p, 24);
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 112) = 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)(a1 + 128), "config.json");
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v6 = (std::__fs::filesystem::path *)(a1 + 152);
  *(_QWORD *)(a1 + 168) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 152), "context_vocab.txt", "");
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 176), "multicardinal_vocab.txt", "");
  v77 = a3;
  v7 = (std::__fs::filesystem::path *)(a1 + 200);
  std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>((std::string *)(a1 + 200), "spans_vocab.txt");
  v8 = (std::__fs::filesystem::path *)(a1 + 224);
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 224), "trg_vocab.txt");
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  std::string::append[abi:ne180100]<char const*,0>((std::string *)(a1 + 248), "span_label_mapping.txt", "");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 272), "version.yaml");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 296), "SystemPrompted_Send_MessageContent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 320), "SystemPrompted_Send_MessageContent_With_NLv4_Model_Hypotheses");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 344), "SDA_Placeholder_Verb_Replacement");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 368), "SystemPrompted_AnnouncementContent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 392), "SystemPrompted_Create_NoteContent");
  std::__fs::filesystem::operator/[abi:ne180100](&buf, a2, (std::__fs::filesystem::path *)(a1 + 272));
  getAssetDirectoryNCV((const std::__fs::filesystem::path *)&buf, (uint64_t)__p);
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getNLv4AssetVersion((const sirinluinternalsnlp_intermediate::SNLPAssetVersion *)__p, (sirinluinternalsnlp_intermediate::NLv4AssetVersion *)(a1 + 416));
  MEMORY[0x1C3BB8674](__p);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, a2, (std::__fs::filesystem::path *)(a1 + 128));
  *(_QWORD *)(a1 + 432) = getAssetDirectoryGenerationNumber((const std::__fs::filesystem::path *)__p);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  std::__fs::filesystem::operator/[abi:ne180100](&v84, a2, (std::__fs::filesystem::path *)(a1 + 128));
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v85, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v85 = v84;
  std::ifstream::basic_ifstream(__p);
  v9 = *(int *)(a1 + 120);
  if (v9 >= 8)
  {
    v11 = SNLPOSLoggerForCategory(4);
    v10 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v10 = off_1E7BED840[v9];
  }
  std::string::basic_string[abi:ne180100]<0>(v88, v10);
  v78 = (_QWORD *)(a1 + 440);
  if ((*((_BYTE *)v94 + *((_QWORD *)__p[0] - 3)) & 5) != 0)
  {
    std::operator+<char>();
    v12 = std::string::append(&v100, ".");
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    buf.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    v14 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = v88;
      if (v89 < 0)
        v15 = (void **)v88[0];
      p_buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(v100.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_ERROR, "[%s] %s", (uint8_t *)&v100, 0x16u);
    }
    *(_OWORD *)v78 = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_DWORD *)(a1 + 472) = 1065353216;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    goto LABEL_97;
  }
  v86[0] = 0;
  v87 = 0;
  nlohmann::operator>>(__p, v86);
  *(_OWORD *)v78 = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  v17 = *(int *)(a1 + 120);
  if (v17 >= 8)
  {
    v19 = SNLPOSLoggerForCategory(4);
    v18 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v17;
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v18 = off_1E7BED840[v17];
  }
  std::string::basic_string[abi:ne180100]<0>(&v91, v18);
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
  *(_OWORD *)&v100.__r_.__value_.__r.__words[1] = 0uLL;
  v101 = 0x8000000000000000;
  v20 = v86[0];
  if (v86[0])
  {
    if (v86[0] == 2)
    {
      v100.__r_.__value_.__r.__words[2] = *v87;
    }
    else if (v86[0] == 1)
    {
      v100.__r_.__value_.__l.__size_ = *v87;
    }
    else
    {
      v101 = 0;
    }
  }
  else
  {
    v101 = 1;
  }
  while (1)
  {
    *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
    v98[0] = 0x8000000000000000;
    if (v20 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = v87[1];
    }
    else if (v20 == 1)
    {
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v87 + 1);
    }
    else
    {
      v98[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v100, (unsigned __int8 **)&buf))
    {
      break;
    }
    v21 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(*v100.__r_.__value_.__l.__data_, v100.__r_.__value_.__l.__size_);
    if (*(char *)(v21 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v90, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
    }
    else
    {
      v22 = *(_OWORD *)v21;
      v90.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 16);
      *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v22;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100) == 5)
    {
      v23 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v23, (int *)&buf);
      data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      else
        buf = v90;
      LODWORD(v98[0]) = data;
      v99 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)v78, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_77;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100) == 6)
    {
      v25 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v25, (unsigned int *)&buf);
      v26 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      else
        buf = v90;
      LODWORD(v98[0]) = v26;
      v99 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)v78, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_77;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100) == 7)
    {
      v27 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v27, (float *)&buf);
      v28 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      else
        buf = v90;
      LODWORD(v98[0]) = v28;
      v99 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)v78, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_77;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100) == 4)
    {
      v29 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v29, &buf);
      v30 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v90.__r_.__value_.__l.__data_, v90.__r_.__value_.__l.__size_);
      else
        buf = v90;
      LOBYTE(v98[0]) = v30;
      v99 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)v78, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_77:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v98);
      goto LABEL_78;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100))
      {
        std::operator+<char>();
        v33 = std::string::append(&v96, ".");
        v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        v35 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          goto LABEL_78;
        v36 = &v91;
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v91.__r_.__value_.__r.__words[0];
        v37 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::operator+<char>();
        v38 = std::string::append(&v96, " is null.  This is currently expected behaviour.");
        v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v96.__r_.__value_.__l.__data_);
        v35 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          goto LABEL_78;
        v36 = &v91;
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = (std::string *)v91.__r_.__value_.__r.__words[0];
        v37 = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v37 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v96.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v96.__r_.__value_.__r.__words + 4) = (std::string::size_type)v36;
      WORD2(v96.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v96.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v37;
      _os_log_impl(&dword_1C2196000, v35, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v96, 0x16u);
LABEL_78:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_81;
      v32 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_80;
    }
    v31 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v100);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v96, v31);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (__int128 *)&v90, (__int128 *)&v96);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>((uint64_t)v78, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v98);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
    {
      v32 = (void *)v96.__r_.__value_.__r.__words[0];
LABEL_80:
      operator delete(v32);
    }
LABEL_81:
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v100);
    v20 = v86[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
  v90.__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  v7 = (std::__fs::filesystem::path *)(a1 + 200);
  v6 = (std::__fs::filesystem::path *)(a1 + 152);
  v8 = (std::__fs::filesystem::path *)(a1 + 224);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>((uint64_t)v78, (unsigned __int8 *)&buf, (__int128 **)&v100, &v90);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy((uint64_t **)&v87, v86[0]);
LABEL_97:
  if (v89 < 0)
    operator delete(v88[0]);
  __p[0] = *(void **)MEMORY[0x1E0DE4F40];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](&v93);
  std::istream::~istream();
  v40 = (siri::ontology *)MEMORY[0x1C3BB9A90](&v95);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  SharedUsoVocabManager = (_QWORD *)siri::ontology::getSharedUsoVocabManager(v40);
  *(_QWORD *)(a1 + 480) = *SharedUsoVocabManager;
  v42 = SharedUsoVocabManager[1];
  *(_QWORD *)(a1 + 488) = v42;
  if (v42)
  {
    v43 = (unint64_t *)(v42 + 8);
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  std::__fs::filesystem::operator/[abi:ne180100](&buf, a2, v8);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_QWORD *)&v93 = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  }
  nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(a1 + 496, (uint64_t)__p, 32);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 704) = 0;
  *(_BYTE *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 720) = 850045863;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_QWORD *)(a1 + 776) = 0;
  std::__fs::filesystem::operator/[abi:ne180100](&buf, a2, v7);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_QWORD *)&v93 = *((_QWORD *)&buf.__r_.__value_.__l + 2);
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v91, a2, (std::__fs::filesystem::path *)(a1 + 248));
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v100, v91.__r_.__value_.__l.__data_, v91.__r_.__value_.__l.__size_);
  else
    v100 = v91;
  v45 = *(std::__shared_weak_count **)(a1 + 488);
  v82 = *(_QWORD *)(a1 + 480);
  v83 = v45;
  if (v45)
  {
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(a1 + 784, (uint64_t)__p, (uint64_t)&v100, &v82, (_DWORD *)(a1 + 120));
  v48 = v83;
  if (v83)
  {
    v49 = (unint64_t *)&v83->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, a2, v6);
  if (SBYTE7(v93) < 0)
  {
    std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v81.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v81.__r_.__value_.__r.__words[2] = v93;
  }
  v51 = *(_QWORD *)(a1 + 488);
  *(_QWORD *)&v80 = *(_QWORD *)(a1 + 480);
  *((_QWORD *)&v80 + 1) = v51;
  if (v51)
  {
    v52 = (unint64_t *)(v51 + 8);
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1368), "SystemPrompted.task.send::common_Message.target.common_Message.stringContent");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1392), "SystemPrompted.task.send::common_Announcement.target.common_Announcement.content");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1416), "SystemPrompted.task.create::common_Note.target.common_Note.stringContent");
  nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(a1 + 1440, (uint64_t)&v81, 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 1648), "[NO_SDAS]");
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v80;
  if (*((_QWORD *)&v80 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  LODWORD(v100.__r_.__value_.__l.__data_) = 0;
  nlv4_inference_orchestrator::context::ContextLabelsExtractor::ContextLabelsExtractor(a1 + 1672, &buf, &v100);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v57 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (*((_QWORD *)&v80 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v80 + 1) + 16))(*((_QWORD *)&v80 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v80 + 1));
    }
  }
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 2120) = 0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    buf = *(std::string *)a2;
  std::__fs::filesystem::operator/[abi:ne180100](&v100, a2, (std::__fs::filesystem::path *)(a1 + 272));
  getAssetDirectoryNCV((const std::__fs::filesystem::path *)&v100, (uint64_t)__p);
  LODWORD(v91.__r_.__value_.__l.__data_) = 0;
  bundleInfoForAssetsDirectory((int *)&v91, (char *)&buf, v78, (uint64_t)__p, a1 + 2128);
  MEMORY[0x1C3BB8674](__p);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 2232) = 0;
  v61 = *(_QWORD *)(a1 + 480);
  v62 = *(std::__shared_weak_count **)(a1 + 488);
  if (v62)
  {
    v63 = (unint64_t *)&v62->__shared_owners_;
    do
      v64 = __ldxr(v63);
    while (__stxr(v64 + 1, v63));
    *(_QWORD *)(a1 + 2240) = v61;
    *(_QWORD *)(a1 + 2248) = v62;
    do
      v65 = __ldxr(v63);
    while (__stxr(v65 + 1, v63));
    do
      v66 = __ldaxr(v63);
    while (__stlxr(v66 - 1, v63));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 2240) = v61;
    *(_QWORD *)(a1 + 2248) = 0;
  }
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::UsoGraphBuilder((nlv4_inference_orchestrator::trees::UsoGraphBuilder *)(a1 + 2256));
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map((uint64_t)v79, (uint64_t)v78);
  v67 = (std::string *)(a1 + 2552);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v67, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v68 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 2568) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
  }
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(a1 + 2576, (uint64_t)v79);
  std::__fs::filesystem::path::path[abi:ne180100]<char [36],void>((std::string *)(a1 + 2616), "decoder.mlmodelc/model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [36],void>((std::string *)(a1 + 2640), "encoder.mlmodelc/model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [27],void>((std::string *)(a1 + 2664), "decoder.mlmodelc/model.mil");
  std::__fs::filesystem::path::path[abi:ne180100]<char [27],void>((std::string *)(a1 + 2688), "encoder.mlmodelc/model.mil");
  std::__fs::filesystem::path::path[abi:ne180100]<char [60],void>((std::string *)(a1 + 2712), "encoder.mlmodelc/model.bundle/universal.bundle/universal.e5");
  std::__fs::filesystem::path::path[abi:ne180100]<char [60],void>((std::string *)(a1 + 2736), "decoder.mlmodelc/model.bundle/universal.bundle/universal.e5");
  std::__fs::filesystem::path::path[abi:ne180100]<char [86],void>((std::string *)(a1 + 2760), "encoder.mlmodelc/model.bundle/universal.bundle/main/segment_0__cpu/model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [86],void>((std::string *)(a1 + 2784), "decoder.mlmodelc/model.bundle/universal.bundle/main/segment_0__cpu/model.espresso.net");
  std::__optional_copy_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::__optional_copy_base[abi:ne180100]((std::string *)(a1 + 2808), v77);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)v79);
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::assertAssetVersionValid((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)a1);
  v69 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    v70 = *(_DWORD *)(*(_QWORD *)(a1 + 424) + 16);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v70;
    _os_log_impl(&dword_1C2196000, v69, OS_LOG_TYPE_DEBUG, "Creating NLv4InferenceOrchestrator instance with getAssetVersionMajor()=%u", (uint8_t *)__p, 8u);
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logAssetInfo((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)a1);
  std::__fs::filesystem::operator/[abi:ne180100]((std::string *)__p, a2, (std::__fs::filesystem::path *)(a1 + 176));
  if (*(_DWORD *)(*(_QWORD *)(a1 + 424) + 16) >= *(_DWORD *)a1)
  {
    std::__fs::filesystem::__status((const std::__fs::filesystem::path *)__p, 0);
    if (buf.__r_.__value_.__s.__data_[0])
    {
      if (buf.__r_.__value_.__s.__data_[0] != 255)
      {
        if (SBYTE7(v93) < 0)
        {
          std::string::__init_copy_ctor_external(&buf, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          buf.__r_.__value_.__r.__words[2] = v93;
        }
        v71 = operator new();
        nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(v71, (uint64_t)&buf, 32);
        if (*(_BYTE *)(a1 + 712))
        {
          v72 = *(_QWORD *)(a1 + 704);
          *(_QWORD *)(a1 + 704) = v71;
          if (v72)
            std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v72);
        }
        else
        {
          *(_QWORD *)(a1 + 704) = v71;
          *(_BYTE *)(a1 + 712) = 1;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  v73 = operator new();
  *(_QWORD *)v73 = &off_1E7BE95D8;
  *(_DWORD *)(v73 + 8) = *(_DWORD *)(a1 + 120);
  *(_QWORD *)(v73 + 16) = 0;
  v74 = *(_QWORD *)(a1 + 2232);
  *(_QWORD *)(a1 + 2232) = v73;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::buildModel((nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *)(a1 + 2552), (uint64_t *)&buf);
  v75 = *(_QWORD *)(a1 + 2120);
  *(_QWORD *)(a1 + 2120) = buf.__r_.__value_.__r.__words[0];
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  if (SBYTE7(v93) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1C2298940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, snlp::common::asset_logger::SNLPAssetLogger *a11, void **a12, void **a13, std::mutex *a14, void **a15, uint64_t a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,uint64_t a24,uint64_t a25,sirinluinternalsnlp_intermediate::NLv4AssetVersion *a26,void **a27,void **a28,void **a29,void **a30,uint64_t a31,void **a32,void **a33,void **a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *__p;
  char a70;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (a70 < 0)
    operator delete(__p);
  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder(a30);
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder(a10);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v70 + 2240);
  v72 = *(_QWORD *)(v70 + 2232);
  *(_QWORD *)(v70 + 2232) = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  snlp::common::asset_logger::SNLPAssetLogger::~SNLPAssetLogger(a11);
  v73 = *(_QWORD *)(v70 + 2120);
  *(_QWORD *)(v70 + 2120) = 0;
  if (v73)
    (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(a12);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer(a13);
  std::mutex::~mutex(a14);
  if (*(_BYTE *)(v70 + 712))
  {
    v74 = *(_QWORD *)(v70 + 704);
    *(_QWORD *)(v70 + 704) = 0;
    if (v74)
      std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v74);
  }
  nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(a15);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v70 + 480);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(a35);
  sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(a26);
  if (*(char *)(v70 + 415) < 0)
    operator delete(*a17);
  if (*(char *)(v70 + 391) < 0)
    operator delete(*a18);
  if (*(char *)(v70 + 367) < 0)
    operator delete(*a19);
  if (*(char *)(v70 + 343) < 0)
    operator delete(*a20);
  if (*(char *)(v70 + 319) < 0)
    operator delete(*a21);
  if (*(char *)(v70 + 295) < 0)
    operator delete(*a34);
  if (*(char *)(v70 + 271) < 0)
    operator delete(*a33);
  if (*(char *)(v70 + 247) < 0)
    operator delete(*a27);
  if (*(char *)(v70 + 223) < 0)
    operator delete(*a28);
  if (*(char *)(v70 + 199) < 0)
    operator delete(*a32);
  if (*(char *)(v70 + 175) < 0)
    operator delete(*a29);
  if (*(char *)(v70 + 151) < 0)
    operator delete(*a22);
  if (*(char *)(v70 + 31) < 0)
    operator delete(*a23);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [16],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2299070(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C22990C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getNLv4AssetVersion@<X0>(const sirinluinternalsnlp_intermediate::SNLPAssetVersion *a1@<X1>, sirinluinternalsnlp_intermediate::NLv4AssetVersion *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sirinluinternalsnlp_intermediate::NLv4AssetVersion::NLv4AssetVersion(a2);
  sirinluinternalsnlp_intermediate::NLv4AssetVersion::makeVersion(a2);
  v5 = operator new();
  result = MEMORY[0x1C3BB865C](v5, a1);
  v7 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = result;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

void sub_1C2299158(_Unwind_Exception *a1)
{
  sirinluinternalsnlp_intermediate::NLv4AssetVersion *v1;

  sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::assertAssetVersionValid(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  void *__p[2];
  char v3;

  std::string::basic_string[abi:ne180100]<0>(__p, "NLv4");
  SNLPAssetVersionChecks::assertAssetVersionValid((uint64_t)__p, (uint64_t)this + 432, *((_QWORD *)this + 53), (uint64_t)this + 32, (uint64_t)this + 72);
  if (v3 < 0)
    operator delete(__p[0]);
}

void sub_1C22991C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logAssetInfo(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  std::locale::id *v1;
  const std::locale::facet *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  NSObject *v5;
  void **v6;
  uint64_t v7;
  void *__p[2];
  uint64_t v10;
  _QWORD v11[13];
  char v12;
  uint64_t v13;
  std::locale v14[4];

  v14[3] = *(std::locale *)MEMORY[0x1E0C80C00];
  snlp::common::asset_logger::SNLPAssetLogger::toStringStream((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)this + 2128), (uint64_t)v11);
  __p[0] = 0;
  __p[1] = 0;
  v10 = 0;
  v1 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(v11[0] - 24)));
    v2 = std::locale::use_facet(v14, v1);
    v3 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(v14);
    v4 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (uint64_t)__p, v3);
    if ((*((_BYTE *)v4 + *(_QWORD *)(*v4 - 24) + 32) & 5) != 0)
      break;
    v5 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (v10 >= 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      LODWORD(v14[0].__locale_) = 136315138;
      *(std::locale::__imp **)((char *)&v14[0].__locale_ + 4) = (std::locale::__imp *)v6;
      _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEFAULT, "[SNLPAssetLogger] %s", (uint8_t *)v14, 0xCu);
    }
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  v11[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v11[2] = v7;
  v11[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v12 < 0)
    operator delete((void *)v11[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v13);
}

void sub_1C22993B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 144);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return MEMORY[0x1C3BB9B44](a1, 0x10B2C40E7B24F67);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder(void **this)
{
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 32));
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void snlp::common::asset_logger::SNLPAssetLogger::~SNLPAssetLogger(snlp::common::asset_logger::SNLPAssetLogger *this)
{
  std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*((_QWORD **)this + 10));
  if (*((_BYTE *)this + 64) && *((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  MEMORY[0x1C3BB8674]((char *)this + 8);
}

void nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer(void **this)
{
  void **v2;

  nlv4_inference_orchestrator::context::ContextLabelsExtractor::~ContextLabelsExtractor(this + 38);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  v2 = this + 32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 27));
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(void **this)
{
  void **v2;

  v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 18));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [36],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2299710(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [27],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2299768(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [60],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C22997C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char [86],void>(std::string *this, char *a2)
{
  char *v3;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = a2 - 1;
  while (*++v3)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, a2, v3);
  return this;
}

void sub_1C2299818(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::context::Embedder::~Embedder(void **this)
{
  void **v2;

  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  v2 = this + 23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 18));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getAssetVersionMajor(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 53) + 16);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::pbhandle(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  NSObject *v4;
  os_signpost_id_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  const std::string *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t UnicodeScalarAndUtf8Offsets;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  NSObject *v38;
  uint64_t **v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  NSObject *v43;
  os_signpost_id_t v44;
  NSObject *v45;
  NSObject *v46;
  NSObject *v47;
  uint64_t *v48;
  uint64_t *v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  NSObject *v53;
  os_signpost_id_t v54;
  NSObject *v55;
  NSObject *v56;
  NSObject *v57;
  NSObject *v58;
  NSObject *v59;
  NSObject *v60;
  NSObject *v61;
  os_signpost_id_t v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  float *v73;
  void **v74;
  float *v75;
  float *i;
  _QWORD *v77;
  _QWORD *v78;
  std::locale::__imp *p_buf;
  uint64_t col_high;
  _QWORD *v81;
  NSObject *v82;
  void **v83;
  float *v84;
  float *j;
  _QWORD *v86;
  _QWORD *v87;
  std::locale::__imp *locale;
  uint64_t ct;
  _QWORD *v90;
  NSObject *v91;
  std::string *v92;
  uint64_t v93;
  NSObject *v94;
  NSObject *v95;
  std::locale::__imp *v96;
  const std::ctype<char> *v97;
  int64_t v98;
  uint64_t v99;
  char *v100;
  NSObject *v101;
  NSObject *v102;
  NSObject *v103;
  NSObject *v104;
  os_signpost_id_t v105;
  NSObject *v106;
  NSObject *v107;
  NSObject *v108;
  char *v109;
  char *v110;
  unint64_t *v111;
  unint64_t *v112;
  __int128 *v113;
  __int128 *size;
  _QWORD *v115;
  _DWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  _QWORD *v126;
  char *v127;
  _QWORD *v128;
  _QWORD *v129;
  NSObject *v131;
  NSObject *v132;
  NSObject *v133;
  NSObject *v134;
  os_signpost_id_t v135;
  NSObject *v136;
  NSObject *v137;
  NSObject *v138;
  uint64_t v139;
  uint64_t v140;
  const sirinluexternal::NLContext *v141;
  _QWORD *v142;
  _DWORD *v143;
  __int128 *v144;
  __int128 *v145;
  __int128 *v146;
  __int128 v147;
  uint64_t v148;
  char *v149;
  std::string *v150;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  std::string::size_type v157;
  char v158;
  std::string *v159;
  uint64_t v160;
  std::string *v161;
  __int128 v162;
  std::string *v163;
  NSObject *v164;
  NSObject *v165;
  NSObject *v166;
  NSObject *v167;
  os_signpost_id_t v168;
  NSObject *v169;
  NSObject *v170;
  NSObject *v171;
  char *v172;
  std::string::size_type v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned __int8 *v177;
  const std::ctype<char> *v178;
  std::regex_traits<char> *v179;
  uint64_t v180;
  std::regex_traits<char> *v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint8x8_t v185;
  unint64_t v186;
  unsigned __int8 **v187;
  unsigned __int8 *k;
  unint64_t v189;
  char *v190;
  _QWORD *v191;
  std::string *v192;
  const std::string::value_type **v193;
  float v194;
  _BOOL8 v195;
  unint64_t v196;
  unint64_t v197;
  int8x8_t prime;
  void *v199;
  void *v200;
  uint64_t v201;
  _QWORD **v202;
  unint64_t v203;
  uint8x8_t v204;
  unint64_t v205;
  uint8x8_t v206;
  uint64_t v207;
  _QWORD *m;
  unint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  unint64_t v212;
  void *v213;
  uint64_t v214;
  void **v215;
  uint64_t n;
  void **v217;
  uint64_t ii;
  void **v219;
  uint64_t jj;
  void **v221;
  uint64_t kk;
  void **v223;
  uint64_t mm;
  void **v225;
  uint64_t nn;
  void **v227;
  void *v228;
  char *v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  void *v234;
  char *v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  char *v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;
  char *v246;
  char *v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  uint64_t v251;
  __int128 v252;
  __int128 v253;
  char *v254;
  uint64_t v255;
  NSObject *v256;
  NSObject *v257;
  NSObject *v258;
  NSObject *v259;
  os_signpost_id_t v260;
  NSObject *v261;
  NSObject *v262;
  NSObject *v263;
  uint64_t v264;
  uint64_t v265;
  __int128 *v266;
  uint64_t v267;
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *v268;
  char *v269;
  char *v270;
  NSObject *v271;
  std::string *v272;
  char *v273;
  char *v274;
  NSObject *v275;
  std::string *v276;
  NSObject *v277;
  NSObject *v278;
  NSObject *v279;
  NSObject *v280;
  os_signpost_id_t v281;
  NSObject *v282;
  unsigned __int8 *v283;
  NSObject *v284;
  NSObject *v285;
  sirinluinternalnlv4_parser::NLv4ParserResponse *v286;
  uint64_t v287;
  unsigned __int8 *v288;
  unsigned __int8 *v289;
  std::locale::__imp *v290;
  _BOOL4 v291;
  NSObject *v292;
  NSObject *v293;
  std::__shared_weak_count *v294;
  unint64_t *p_shared_owners;
  unint64_t v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  float v306;
  uint64_t *v307;
  uint64_t *i1;
  NSObject *v309;
  uint64_t v310;
  uint64_t v311;
  NSObject *v312;
  NSObject *v313;
  NSObject *v314;
  NSObject *v315;
  os_signpost_id_t v316;
  NSObject *v317;
  NSObject *v318;
  NSObject *v319;
  NSObject *v320;
  NSObject *v321;
  NSObject *v322;
  NSObject *v323;
  os_signpost_id_t v324;
  NSObject *v325;
  NSObject *v326;
  NSObject *v327;
  uint64_t v328;
  std::string *i2;
  _QWORD *v330;
  _QWORD *v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  NSObject *v336;
  std::string *v337;
  NSObject *v338;
  NSObject *v339;
  NSObject *v340;
  std::locale::__imp *v341;
  const std::collate<char> *v342;
  std::locale::__imp *v343;
  uint64_t v344;
  uint64_t v345;
  std::runtime_error *exception;
  uint64_t *v347;
  uint64_t *v348;
  char **v349;
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *v350;
  std::string::size_type spid;
  os_signpost_id_t v352;
  os_signpost_id_t v353;
  os_signpost_id_t v354;
  uint64_t v355;
  unint64_t v356;
  __int128 *v357;
  void *v358;
  __int128 v359;
  char *v360;
  uint64_t v361;
  std::__shared_weak_count *v362;
  void *v363[2];
  void *v364[2];
  __int128 v365;
  void *v366[2];
  uint64_t v367;
  _BYTE v368[56];
  char *v369;
  void *v370;
  unint64_t v371;
  uint64_t v372;
  std::string *v373;
  unint64_t v374;
  void *v375;
  _DWORD *v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  std::regex_traits<char> v381;
  void *__p[2];
  _QWORD v383[11];
  char v384;
  uint64_t v385;
  _QWORD v386[3];
  _QWORD v387[3];
  _QWORD v388[3];
  float *v389;
  float *v390;
  uint64_t v391;
  _QWORD v392[3];
  float *v393;
  float *v394;
  uint64_t v395;
  _QWORD v396[3];
  void *v397[4];
  void *v398;
  _QWORD *v399;
  _QWORD *v400;
  void *v401;
  float *v402;
  float *v403;
  void *v404;
  _BYTE *v405;
  _QWORD *v406;
  void *v407;
  _BYTE *v408;
  uint64_t v409;
  void *v410;
  _BYTE *v411;
  void *v412;
  _BYTE *v413;
  uint64_t v414[3];
  void *v415;
  _BYTE *v416;
  void *v417;
  _BYTE *v418;
  const sirinluinternal::MatchingSpan *v419[3];
  uint64_t v420[3];
  _BYTE *v421;
  char *v422;
  unint64_t v423;
  std::string v424;
  char v425;
  __int128 v426;
  __int128 v427;
  float v428[4];
  void *v429[2];
  char v430;
  void *v431[5];
  uint64_t v432[3];
  void *v433[2];
  char v434;
  void *v435;
  char v436;
  void *v437;
  char v438;
  void *v439;
  char v440;
  __int128 v441;
  uint64_t v442;
  __int128 v443;
  uint64_t v444;
  __int128 v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  __int128 v449;
  uint64_t v450;
  __int128 v451;
  uint64_t v452;
  __int128 v453;
  uint64_t v454;
  __int128 v455;
  uint64_t v456;
  __int128 v457;
  uint64_t v458;
  __int128 v459;
  uint64_t v460;
  __int128 v461;
  uint64_t v462;
  __int128 v463;
  uint64_t v464;
  __int128 v465;
  uint64_t v466;
  __int128 v467;
  uint64_t v468;
  __int128 v469;
  uint64_t v470;
  __int128 v471;
  uint64_t v472;
  __int128 v473;
  uint64_t v474;
  __int128 v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  __int128 v481;
  uint64_t v482;
  __int128 v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  __int128 v487;
  uint64_t v488;
  _QWORD *v489;
  __int128 *v490;
  char v491;
  void **v492;
  std::regex_traits<char> buf;
  _BYTE v494[24];
  _BYTE v495[24];
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  _BYTE v499[40];
  __int128 v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  _QWORD v504[3];
  __int128 v505;
  uint64_t v506;
  __int128 v507;
  uint64_t v508;
  _QWORD v509[3];
  __int128 v510;
  uint64_t v511;
  __int128 v512;
  uint64_t v513;
  _QWORD v514[3];
  __int128 v515;
  uint64_t v516;
  __int128 v517;
  uint64_t v518;
  uint8_t v519[16];
  _QWORD v520[10];
  __int128 v521;
  __int128 v522;
  __int128 v523;
  void *v524[2];
  char v525;
  uint64_t v526[3];
  void *v527;
  uint64_t v528[3];
  void *v529;
  uint64_t v530[3];
  void *v531;
  _QWORD v532[3];
  std::string v533;
  std::string *v534;
  void *v535;
  uint64_t v536[3];
  void *v537;
  char v538;
  uint64_t v539[3];
  void *v540;
  _QWORD v541[3];
  std::string v542;
  uint64_t v543[3];
  void *v544;
  uint64_t v545[3];
  void *v546;
  void *v547[3];
  void *v548[3];
  uint64_t v549[3];
  void *v550;
  void *v551[3];
  void *v552[3];
  uint64_t v553[3];
  void *v554;
  _QWORD v555[3];
  std::string v556;
  uint64_t v557[3];
  uint64_t v558[3];
  uint64_t v559[3];
  uint64_t v560[3];
  _QWORD v561[3];
  _QWORD v562[4];

  v1 = MEMORY[0x1E0C80A78](a1);
  v348 = v2;
  v350 = (nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)v1;
  v347 = v3;
  v562[1] = *MEMORY[0x1E0C80C00];
  v4 = SNLPOSLoggerForCategory(7);
  v5 = os_signpost_id_generate(v4);
  v6 = SNLPOSLoggerForCategory(7);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v7 = v6;
    if (os_signpost_enabled(v6))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v5, "NLv4 Request Validation", "", (uint8_t *)&buf, 2u);
    }
  }
  v8 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Request Validation\"", (uint8_t *)&buf, 2u);
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::assertAssetVersionValid(v350);
  if (!*v348)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "NLv4 request is null");
    std::runtime_error::runtime_error(exception, (const std::string *)&buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::validateRequest((_QWORD *)*v348);
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logAssetInfo(v350);
  v424.__r_.__value_.__s.__data_[0] = 0;
  v425 = 0;
  v9 = *(_QWORD *)(*v348 + 48);
  if (v9
    && (v10 = *(const std::string **)(v9 + 16)) != 0
    && (std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&v424, v10), v425))
  {
    if (_os_feature_enabled_impl())
    {
      if (!v425)
        std::__throw_bad_optional_access[abi:ne180100]();
      snlp::common::logging::feature_store_utilities::insertNLv4AssetVersionToFeatureStore((uint64_t)v350 + 416, (uint64_t *)&v424);
    }
  }
  else
  {
    v11 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "nlu_request_id not found so skipping insertion of asset version into FeatureStore", (uint8_t *)&buf, 2u);
    }
  }
  v12 = SNLPOSLoggerForCategory(7);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v13, OS_SIGNPOST_INTERVAL_END, v5, "NLv4 Request Validation", "", (uint8_t *)&buf, 2u);
    }
  }
  v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Request Validation\"", (uint8_t *)&buf, 2u);
  }
  v15 = SNLPOSLoggerForCategory(7);
  v16 = os_signpost_id_generate(v15);
  v17 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = v17;
    if (os_signpost_enabled(v17))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "NLv4 Reindexation", "", (uint8_t *)&buf, 2u);
    }
  }
  v19 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Reindexation\"", (uint8_t *)&buf, 2u);
  }
  v20 = *(_QWORD *)(*v348 + 64);
  v423 = 0;
  v421 = 0;
  v422 = 0;
  v355 = v20;
  v21 = *(_QWORD *)(v20 + 24);
  if (v21)
  {
    v22 = *(uint64_t **)(v21 + 24);
    v23 = *(uint64_t **)(v21 + 32);
    if (v22 != v23)
    {
      while (1)
      {
        v24 = *v22;
        if ((~*(unsigned __int8 *)(*v22 + 92) & 3) != 0)
          break;
        v25 = *(unsigned int *)(v24 + 72);
        v26 = *(unsigned int *)(v24 + 76);
        if ((int)v25 > (int)v26 || ((v26 | v25) & 0x80000000) != 0)
          break;
        v27 = *(uint64_t **)(v355 + 16);
        UnicodeScalarAndUtf8Offsets = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v27, *(unsigned int *)(v24 + 72));
        v30 = v29;
        v31 = snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(v27, v26);
        v33 = v32;
        MEMORY[0x1C3BB8524](v519, v24);
        *(_QWORD *)&v521 = v30;
        *((_QWORD *)&v521 + 1) = v33;
        *(_QWORD *)&v522 = v25;
        *((_QWORD *)&v522 + 1) = v26;
        *(_QWORD *)&v523 = UnicodeScalarAndUtf8Offsets;
        *((_QWORD *)&v523 + 1) = v31;
        MEMORY[0x1C3BB8524](&buf, v519);
        v498 = v521;
        *(_OWORD *)v499 = v522;
        *(_OWORD *)&v499[16] = v523;
        v499[32] = 1;
        MEMORY[0x1C3BB8530](v519);
        if (!v499[32])
          goto LABEL_34;
        if ((unint64_t)v422 >= v423)
        {
          v37 = (char *)std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__emplace_back_slow_path<nlv4_inference_orchestrator::orchestration::IndexedToken const&>((void **)&v421, &buf);
        }
        else
        {
          v34 = (_OWORD *)MEMORY[0x1C3BB8524]();
          v35 = v498;
          v36 = *(_OWORD *)&v499[16];
          v34[7] = *(_OWORD *)v499;
          v34[8] = v36;
          v34[6] = v35;
          v37 = (char *)(v34 + 9);
        }
        v422 = v37;
LABEL_40:
        if (v499[32])
          MEMORY[0x1C3BB8530](&buf);
        if (++v22 == v23)
          goto LABEL_43;
      }
      LOBYTE(buf.__loc_.__locale_) = 0;
      v499[32] = 0;
LABEL_34:
      v38 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        v39 = *(uint64_t ***)(v24 + 64);
        if (*((char *)v39 + 23) < 0)
          v39 = (uint64_t **)*v39;
        *(_DWORD *)v519 = 136642819;
        *(_QWORD *)&v519[4] = v39;
        _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_ERROR, "A token could not be reindexed; %{sensitive}s",
          v519,
          0xCu);
      }
      goto LABEL_40;
    }
  }
LABEL_43:
  v40 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v41 = v40;
    if (os_signpost_enabled(v40))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v41, OS_SIGNPOST_INTERVAL_END, v16, "NLv4 Reindexation", "", (uint8_t *)&buf, 2u);
    }
  }
  v42 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Reindexation\"", (uint8_t *)&buf, 2u);
  }
  v43 = SNLPOSLoggerForCategory(7);
  v44 = os_signpost_id_generate(v43);
  v45 = SNLPOSLoggerForCategory(7);
  if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v46 = v45;
    if (os_signpost_enabled(v45))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v46, OS_SIGNPOST_INTERVAL_BEGIN, v44, "NLv4 Matched Span Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  v47 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v47, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Matched Span Featurization\"", (uint8_t *)&buf, 2u);
  }
  memset(v420, 0, sizeof(v420));
  v48 = *(uint64_t **)(*v348 + 16);
  v49 = *(uint64_t **)(*v348 + 24);
  while (v48 != v49)
    std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](v420, *v48++);
  (*(void (**)(const sirinluinternal::MatchingSpan **__return_ptr, _QWORD, uint64_t *))(**((_QWORD **)v350 + 279)
                                                                                                + 16))(v419, *((_QWORD *)v350 + 279), v420);
  memset(v414, 0, sizeof(v414));
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v414, v421, v422, 0x8E38E38E38E38E39 * ((v422 - v421) >> 4));
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::featurizeSpans((uint64_t)v350, v419, v414, (uint64_t)&v424, (uint64_t)&v415);
  buf.__loc_.__locale_ = (std::locale::__imp *)v414;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v50 = SNLPOSLoggerForCategory(7);
  if (v44 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v51 = v50;
    if (os_signpost_enabled(v50))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v51, OS_SIGNPOST_INTERVAL_END, v44, "NLv4 Matched Span Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  v52 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v52, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Matched Span Featurization\"", (uint8_t *)&buf, 2u);
  }
  v53 = SNLPOSLoggerForCategory(7);
  v54 = os_signpost_id_generate(v53);
  v55 = SNLPOSLoggerForCategory(7);
  if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v56 = v55;
    if (os_signpost_enabled(v55))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v56, OS_SIGNPOST_INTERVAL_BEGIN, v54, "NLv4 Context Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  v57 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v57, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Context Featurization\"", (uint8_t *)&buf, 2u);
  }
  nlv4_inference_orchestrator::context::ContextFeaturizer::featurize((unsigned __int8 *)v350 + 1368, *v348, (uint64_t)&v410);
  v58 = SNLPOSLoggerForCategory(7);
  if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v59 = v58;
    if (os_signpost_enabled(v58))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v59, OS_SIGNPOST_INTERVAL_END, v54, "NLv4 Context Featurization", "", (uint8_t *)&buf, 2u);
    }
  }
  v60 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v60, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Context Featurization\"", (uint8_t *)&buf, 2u);
  }
  v61 = SNLPOSLoggerForCategory(7);
  v62 = os_signpost_id_generate(v61);
  v63 = SNLPOSLoggerForCategory(7);
  if (v62 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v64 = v63;
    if (os_signpost_enabled(v63))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v64, OS_SIGNPOST_INTERVAL_BEGIN, v62, "NLv4 Inference", "", (uint8_t *)&buf, 2u);
    }
  }
  v65 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v65, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Inference\"", (uint8_t *)&buf, 2u);
  }
  v66 = *v348;
  v67 = *(_QWORD *)(*v348 + 8);
  v68 = *(_QWORD *)(v67 + 56);
  v69 = *(_QWORD *)(v67 + 40);
  v70 = operator new(0x18uLL);
  v406 = v70 + 3;
  *v70 = 1;
  v70[1] = v68;
  v70[2] = v69;
  v404 = v70;
  v405 = v70 + 3;
  v71 = *(_QWORD *)(v66 + 8);
  v409 = 0;
  v407 = 0;
  v408 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v407, *(const void **)(v71 + 8), *(_QWORD *)(v71 + 16), (uint64_t)(*(_QWORD *)(v71 + 16) - *(_QWORD *)(v71 + 8)) >> 2);
  v72 = operator new(8uLL);
  *v72 = 1;
  v400 = v72 + 1;
  v398 = v72;
  v399 = v72 + 1;
  v73 = (float *)operator new(4uLL);
  *v73 = (float)v68;
  v403 = v73 + 1;
  v401 = v73;
  v402 = v73 + 1;
  v74 = (void **)(*v348 + 40);
  if ((*(_BYTE *)(*v348 + 80) & 1) == 0)
    v74 = (void **)((char *)v350 + 112);
  v358 = *v74;
  memset(v386, 0, sizeof(v386));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v386, v404, (uint64_t)v405, (v405 - (_BYTE *)v404) >> 3);
  memset(v387, 0, sizeof(v387));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v387, v407, (uint64_t)v408, (v408 - (_BYTE *)v407) >> 2);
  memset(v388, 0, sizeof(v388));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v388, v415, (uint64_t)v416, (v416 - (_BYTE *)v415) >> 3);
  v390 = 0;
  v389 = 0;
  v391 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v389, v417, (uint64_t)v418, (v418 - (_BYTE *)v417) >> 2);
  memset(v392, 0, sizeof(v392));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v392, v410, (uint64_t)v411, (v411 - (_BYTE *)v410) >> 3);
  v394 = 0;
  v393 = 0;
  v395 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v393, v412, (uint64_t)v413, (v413 - (_BYTE *)v412) >> 2);
  memset(v396, 0, sizeof(v396));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v396, v72, (uint64_t)(v72 + 1), 1uLL);
  memset(v397, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v397, v73, (uint64_t)(v73 + 1), 1uLL);
  v397[3] = v358;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v519);
  v75 = v389;
  for (i = v390; v75 != i; ++v75)
  {
    v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v520, (uint64_t)"[insights-snlp-nlv4]: ", 22);
    v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
    std::to_string((std::string *)&buf, *v75);
    if (SHIBYTE(buf.__col_) >= 0)
      p_buf = (std::locale::__imp *)&buf;
    else
      p_buf = buf.__loc_.__locale_;
    if (SHIBYTE(buf.__col_) >= 0)
      col_high = HIBYTE(buf.__col_);
    else
      col_high = (uint64_t)buf.__ct_;
    v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)p_buf, col_high);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"\n", 1);
    if (SHIBYTE(buf.__col_) < 0)
      operator delete(buf.__loc_.__locale_);
  }
  v82 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v83 = v383[0] >= 0 ? __p : (void **)__p[0];
    LODWORD(buf.__loc_.__locale_) = 136315650;
    *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + 4) = (std::locale::__imp *)"NLv4";
    WORD2(buf.__ct_) = 2080;
    *(const std::ctype<char> **)((char *)&buf.__ct_ + 6) = (const std::ctype<char> *)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__col_) = 2080;
    *(_QWORD *)v494 = v83;
    _os_log_impl(&dword_1C2196000, v82, OS_LOG_TYPE_DEBUG, "[%s] %sNumericalized span input for NLv4 parser model:\n%s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(v383[0]) < 0)
      operator delete(__p[0]);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  v84 = v393;
  for (j = v394; v84 != j; ++v84)
  {
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v383, (uint64_t)"[insights-snlp-nlv4]: ", 22);
    v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" ", 1);
    std::to_string((std::string *)&buf, *v84);
    if (SHIBYTE(buf.__col_) >= 0)
      locale = (std::locale::__imp *)&buf;
    else
      locale = buf.__loc_.__locale_;
    if (SHIBYTE(buf.__col_) >= 0)
      ct = HIBYTE(buf.__col_);
    else
      ct = (uint64_t)buf.__ct_;
    v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)locale, ct);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"\n", 1);
    if (SHIBYTE(buf.__col_) < 0)
      operator delete(buf.__loc_.__locale_);
  }
  v91 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v92 = (v533.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v533
        : (std::string *)v533.__r_.__value_.__r.__words[0];
    LODWORD(buf.__loc_.__locale_) = 136315650;
    *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + 4) = (std::locale::__imp *)"NLv4";
    WORD2(buf.__ct_) = 2080;
    *(const std::ctype<char> **)((char *)&buf.__ct_ + 6) = (const std::ctype<char> *)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__col_) = 2080;
    *(_QWORD *)v494 = v92;
    _os_log_impl(&dword_1C2196000, v91, OS_LOG_TYPE_DEBUG, "[%s] %sNumericalized context input for NLv4 parser model:\n%s", (uint8_t *)&buf, 0x20u);
    if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v533.__r_.__value_.__l.__data_);
  }
  memset(&v381, 0, sizeof(v381));
  std::mutex::lock((std::mutex *)((char *)v350 + 720));
  v93 = *((_QWORD *)v350 + 265);
  v94 = SNLPOSLoggerForCategory(1);
  v95 = v94;
  if (v93)
  {
    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_log_impl(&dword_1C2196000, v95, OS_LOG_TYPE_DEBUG, "Attempt E5-ML inference.", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(std::regex_traits<char> *__return_ptr, _QWORD, _QWORD *))(**((_QWORD **)v350 + 265) + 16))(&buf, *((_QWORD *)v350 + 265), v386);
    v381 = buf;
    memset(&buf, 0, sizeof(buf));
    v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
    std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
  }
  else if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v95, OS_LOG_TYPE_ERROR, "Espresso model assets could not be found.  No NLv4 model was initialised.", (uint8_t *)&buf, 2u);
  }
  std::mutex::unlock((std::mutex *)((char *)v350 + 720));
  v379 = 0;
  v378 = 0;
  v380 = 0;
  v97 = v381.__ct_;
  v96 = v381.__loc_.__locale_;
  v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v378;
  v533.__r_.__value_.__s.__data_[8] = 0;
  v98 = (char *)v381.__ct_ - (char *)v381.__loc_.__locale_;
  if (v381.__ct_ != (const std::ctype<char> *)v381.__loc_.__locale_)
  {
    if (v98 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v378 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v98 >> 5);
    v379 = v378;
    v380 = &v378[32 * v99];
    v524[0] = v378;
    v556.__r_.__value_.__r.__words[0] = (std::string::size_type)v378;
    buf.__loc_.__locale_ = (std::locale::__imp *)&v380;
    buf.__ct_ = (const std::ctype<char> *)&v556;
    buf.__col_ = (const std::collate<char> *)v524;
    v100 = v378;
    v494[0] = 0;
    do
    {
      *(_DWORD *)v100 = *(_DWORD *)v96;
      *((_QWORD *)v100 + 2) = 0;
      *((_QWORD *)v100 + 3) = 0;
      *((_QWORD *)v100 + 1) = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)v100 + 1, *((const void **)v96 + 1), *((_QWORD *)v96 + 2), (uint64_t)(*((_QWORD *)v96 + 2) - *((_QWORD *)v96 + 1)) >> 3);
      v100 = (char *)v524[0] + 32;
      v524[0] = (char *)v524[0] + 32;
      v96 = (std::locale::__imp *)((char *)v96 + 32);
    }
    while (v96 != (std::locale::__imp *)v97);
    v494[0] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&buf);
    v379 = v100;
  }
  v101 = SNLPOSLoggerForCategory(7);
  if (v62 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v102 = v101;
    if (os_signpost_enabled(v101))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v102, OS_SIGNPOST_INTERVAL_END, v62, "NLv4 Inference", "", (uint8_t *)&buf, 2u);
    }
  }
  v103 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v103, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Inference\"", (uint8_t *)&buf, 2u);
  }
  v104 = SNLPOSLoggerForCategory(7);
  v105 = os_signpost_id_generate(v104);
  v106 = SNLPOSLoggerForCategory(7);
  v356 = v105 - 1;
  if (v105 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v107 = v106;
    if (os_signpost_enabled(v106))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v107, OS_SIGNPOST_INTERVAL_BEGIN, v105, "NLv4 Denumericalization", "", (uint8_t *)&buf, 2u);
    }
  }
  v353 = v105;
  v108 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v108, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Denumericalization\"", (uint8_t *)&buf, 2u);
  }
  v376 = 0;
  v375 = 0;
  v377 = 0;
  v109 = v378;
  v110 = v379;
  if (v378 != v379)
  {
    do
    {
      memset(&v533, 0, sizeof(v533));
      v111 = (unint64_t *)*((_QWORD *)v109 + 1);
      v112 = (unint64_t *)*((_QWORD *)v109 + 2);
      v556.__r_.__value_.__r.__words[0] = (std::string::size_type)&v533;
      if (v111 == v112)
      {
        size = 0;
        v113 = 0;
      }
      else
      {
        do
        {
          nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)v350 + 496), *v111, (std::string *)&buf);
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v556, (__int128 *)&buf);
          if (SHIBYTE(buf.__col_) < 0)
            operator delete(buf.__loc_.__locale_);
          ++v111;
        }
        while (v111 != v112);
        size = (__int128 *)v533.__r_.__value_.__l.__size_;
        v113 = (__int128 *)v533.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__loc_.__locale_) = *(_DWORD *)v109;
      buf.__col_ = 0;
      *(_QWORD *)v494 = 0;
      buf.__ct_ = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&buf.__ct_, v113, size, 0xAAAAAAAAAAAAAAABLL * (((char *)size - (char *)v113) >> 3));
      v115 = v376;
      if (v376 >= (_DWORD *)v377)
      {
        v117 = v375;
        v118 = ((char *)v376 - (_BYTE *)v375) >> 5;
        v119 = v118 + 1;
        if ((unint64_t)(v118 + 1) >> 59)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v120 = v377 - (_BYTE *)v375;
        if ((v377 - (_BYTE *)v375) >> 4 > v119)
          v119 = v120 >> 4;
        if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFE0)
          v121 = 0x7FFFFFFFFFFFFFFLL;
        else
          v121 = v119;
        if (v121 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v122 = (char *)operator new(32 * v121);
        v123 = &v122[32 * v118];
        *(_DWORD *)v123 = buf.__loc_.__locale_;
        *(_OWORD *)(v123 + 8) = *(_OWORD *)&buf.__ct_;
        *((_QWORD *)v123 + 3) = *(_QWORD *)v494;
        buf.__col_ = 0;
        *(_QWORD *)v494 = 0;
        buf.__ct_ = 0;
        v116 = v123 + 32;
        if (v115 == v117)
        {
          v375 = v123;
          v376 = v123 + 32;
          v377 = &v122[32 * v121];
          if (!v115)
            goto LABEL_154;
        }
        else
        {
          v124 = 0;
          do
          {
            v125 = &v123[v124 * 8];
            v126 = &v115[v124];
            *((_DWORD *)v125 - 8) = v115[v124 - 4];
            *((_QWORD *)v125 - 2) = 0;
            *((_QWORD *)v125 - 1) = 0;
            *((_QWORD *)v125 - 3) = 0;
            *(_OWORD *)(v125 - 24) = *(_OWORD *)&v115[v124 - 3];
            *((_QWORD *)v125 - 1) = v115[v124 - 1];
            *(v126 - 3) = 0;
            *(v126 - 2) = 0;
            *(v126 - 1) = 0;
            v124 -= 4;
          }
          while (&v115[v124] != v117);
          v127 = &v123[v124 * 8];
          v115 = v375;
          v128 = v376;
          v375 = v127;
          v376 = v116;
          v377 = &v122[32 * v121];
          if (v128 != v115)
          {
            do
            {
              v129 = v128 - 4;
              v524[0] = v128 - 3;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v524);
              v128 = v129;
            }
            while (v129 != v115);
          }
          if (!v115)
            goto LABEL_154;
        }
        operator delete(v115);
      }
      else
      {
        *v376 = buf.__loc_.__locale_;
        v115[2] = 0;
        v115[3] = 0;
        v115[1] = 0;
        *(_OWORD *)(v115 + 1) = *(_OWORD *)&buf.__ct_;
        v115[3] = *(_QWORD *)v494;
        buf.__ct_ = 0;
        buf.__col_ = 0;
        *(_QWORD *)v494 = 0;
        v116 = v115 + 4;
      }
LABEL_154:
      v376 = v116;
      v524[0] = &buf.__ct_;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v524);
      buf.__loc_.__locale_ = (std::locale::__imp *)&v533;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      v109 += 32;
    }
    while (v358 != (void *)(((char *)v116 - (_BYTE *)v375) >> 5) && v109 != v110);
  }
  v131 = SNLPOSLoggerForCategory(7);
  if (v356 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v132 = v131;
    if (os_signpost_enabled(v131))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v132, OS_SIGNPOST_INTERVAL_END, v353, "NLv4 Denumericalization", "", (uint8_t *)&buf, 2u);
    }
  }
  v133 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v133, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Denumericalization\"", (uint8_t *)&buf, 2u);
  }
  v373 = 0;
  v372 = 0;
  v374 = 0;
  v134 = SNLPOSLoggerForCategory(7);
  v135 = os_signpost_id_generate(v134);
  v136 = SNLPOSLoggerForCategory(7);
  if (v135 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v137 = v136;
    if (os_signpost_enabled(v136))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v137, OS_SIGNPOST_INTERVAL_BEGIN, v135, "NLv4 Placeholder Fixes", "", (uint8_t *)&buf, 2u);
    }
  }
  v138 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v138, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Placeholder Fixes\"", (uint8_t *)&buf, 2u);
  }
  if (*v348)
  {
    v139 = *(_QWORD *)(*v348 + 72);
    if (v139)
    {
      v140 = *(_QWORD *)(v139 + 136);
      if (v140)
      {
        v141 = *(const sirinluexternal::NLContext **)(v140 + 16);
        if (v141)
        {
          nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromNLContext((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)v350 + 2240), v141, &v533);
          if ((_BYTE)v534)
          {
            std::string::basic_string[abi:ne180100]<0>(v524, "PlaceholderVerb_placeholderVerb");
            v142 = v375;
            v143 = v376;
            if (v375 == v376)
              goto LABEL_227;
            v144 = (__int128 *)((char *)v350 + 344);
            while (1)
            {
              v145 = (__int128 *)v142[1];
              v146 = (__int128 *)v142[2];
              while (v145 != v146)
              {
                if (*((char *)v145 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(&v556, *(const std::string::value_type **)v145, *((_QWORD *)v145 + 1));
                }
                else
                {
                  v147 = *v145;
                  v556.__r_.__value_.__r.__words[2] = *((_QWORD *)v145 + 2);
                  *(_OWORD *)&v556.__r_.__value_.__l.__data_ = v147;
                }
                std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&buf, (uint64_t)v524);
                if (!(_BYTE)v534)
                  std::__throw_bad_optional_access[abi:ne180100]();
                memset(&v542, 0, sizeof(v542));
                v148 = *((unsigned __int8 *)v145 + 23);
                if ((v148 & 0x80u) == 0)
                  v149 = (char *)v145;
                else
                  v149 = *(char **)v145;
                if ((v148 & 0x80u) != 0)
                  v148 = *((_QWORD *)v145 + 1);
                if ((v533.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v150 = &v533;
                else
                  v150 = (std::string *)v533.__r_.__value_.__r.__words[0];
                std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v542, v149, &v149[v148], (const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *)&buf, (const char *)v150);
                if (*((char *)v145 + 23) < 0)
                  operator delete(*(void **)v145);
                v151 = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
                *((_QWORD *)v145 + 2) = *((_QWORD *)&v542.__r_.__value_.__l + 2);
                *v145 = v151;
                *((_BYTE *)&v542.__r_.__value_.__s + 23) = 0;
                v542.__r_.__value_.__s.__data_[0] = 0;
                v152 = *(std::__shared_weak_count **)v495;
                if (*(_QWORD *)v495)
                {
                  v153 = (unint64_t *)(*(_QWORD *)v495 + 8);
                  do
                    v154 = __ldaxr(v153);
                  while (__stlxr(v154 - 1, v153));
                  if (!v154)
                  {
                    ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
                    std::__shared_weak_count::__release_weak(v152);
                  }
                }
                std::locale::~locale(&buf.__loc_);
                v155 = *((unsigned __int8 *)v145 + 23);
                if ((v155 & 0x80u) == 0)
                  v156 = *((unsigned __int8 *)v145 + 23);
                else
                  v156 = *((_QWORD *)v145 + 1);
                v157 = HIBYTE(v556.__r_.__value_.__r.__words[2]);
                v158 = HIBYTE(v556.__r_.__value_.__r.__words[2]);
                if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v157 = v556.__r_.__value_.__l.__size_;
                if (v156 == v157)
                {
                  if ((v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v159 = &v556;
                  else
                    v159 = (std::string *)v556.__r_.__value_.__r.__words[0];
                  if ((v155 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)v145, v159, *((_QWORD *)v145 + 1)))
                      goto LABEL_223;
                  }
                  else
                  {
                    if (!*((_BYTE *)v145 + 23))
                      goto LABEL_223;
                    v160 = 0;
                    while (*((unsigned __int8 *)v145 + v160) == v159->__r_.__value_.__s.__data_[v160])
                    {
                      if (v155 == ++v160)
                        goto LABEL_223;
                    }
                  }
                }
                v161 = v373;
                if ((unint64_t)v373 >= v374)
                {
                  v163 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v372, v144);
                }
                else
                {
                  if (*((char *)v350 + 367) < 0)
                  {
                    std::string::__init_copy_ctor_external(v373, *((const std::string::value_type **)v350 + 43), *((_QWORD *)v350 + 44));
                  }
                  else
                  {
                    v162 = *v144;
                    v373->__r_.__value_.__r.__words[2] = *((_QWORD *)v350 + 45);
                    *(_OWORD *)&v161->__r_.__value_.__l.__data_ = v162;
                  }
                  v163 = v161 + 1;
                }
                v373 = v163;
                v158 = HIBYTE(v556.__r_.__value_.__r.__words[2]);
LABEL_223:
                if (v158 < 0)
                  operator delete(v556.__r_.__value_.__l.__data_);
                v145 = (__int128 *)((char *)v145 + 24);
              }
              v142 += 4;
              if (v142 == (_QWORD *)v143)
              {
LABEL_227:
                if (v525 < 0)
                  operator delete(v524[0]);
                if ((_BYTE)v534 && SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v533.__r_.__value_.__l.__data_);
                break;
              }
            }
          }
        }
      }
    }
  }
  v164 = SNLPOSLoggerForCategory(7);
  if (v135 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v165 = v164;
    if (os_signpost_enabled(v164))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v165, OS_SIGNPOST_INTERVAL_END, v135, "NLv4 Placeholder Fixes", "", (uint8_t *)&buf, 2u);
    }
  }
  v166 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v166, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Placeholder Fixes\"", (uint8_t *)&buf, 2u);
  }
  v167 = SNLPOSLoggerForCategory(7);
  v168 = os_signpost_id_generate(v167);
  v169 = SNLPOSLoggerForCategory(7);
  if (v168 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v170 = v169;
    if (os_signpost_enabled(v169))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v170, OS_SIGNPOST_INTERVAL_BEGIN, v168, "NLv4 Tree Building", "", (uint8_t *)&buf, 2u);
    }
  }
  v171 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v171, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Tree Building\"", (uint8_t *)&buf, 2u);
  }
  v370 = 0;
  v369 = 0;
  v371 = 0;
  v172 = (char *)v375;
  if (v376 != v375)
  {
    v173 = 0;
    do
    {
      spid = v173;
      v349 = (char **)&v172[32 * v173 + 8];
      memset(v368, 0, 24);
      v367 = 0;
      v365 = 0u;
      *(_OWORD *)v366 = 0u;
      *(_OWORD *)v363 = 0u;
      *(_OWORD *)v364 = 0u;
      v174 = *(_QWORD *)(*(_QWORD *)(*v348 + 64) + 16);
      std::string::basic_string[abi:ne180100]<0>(v433, " ");
      std::string::basic_string[abi:ne180100]<0>(&v435, "[next-");
      std::string::basic_string[abi:ne180100]<0>(&v437, "[next]");
      std::string::basic_string[abi:ne180100]<0>(&v439, "]");
      nlv4_inference_orchestrator::trees::TagExpander::expandTags((unint64_t)v433, v349, v432);
      std::string::basic_string[abi:ne180100]<0>(v429, "ROOT");
      std::string::basic_string[abi:ne180100]<0>(&buf, "common_UserEntity.associatedUserEntities");
      std::string::basic_string[abi:ne180100]<0>(v494, "common_Setting.name");
      std::string::basic_string[abi:ne180100]<0>(v495, "common_Timer.attributes");
      std::string::basic_string[abi:ne180100]<0>(&v496, "common_UserEntity.names");
      std::string::basic_string[abi:ne180100]<0>(&v498, "common_DateTime.time");
      std::string::basic_string[abi:ne180100]<0>(&v499[8], "common_Message.recipients");
      std::string::basic_string[abi:ne180100]<0>(&v499[32], "userEntities");
      std::string::basic_string[abi:ne180100]<0>(&v500, "common_PhoneCall.recipients");
      std::string::basic_string[abi:ne180100]<0>(&v502, "common_Message.attachments");
      std::string::basic_string[abi:ne180100]<0>(v504, "common_PhoneCall.attributes");
      std::string::basic_string[abi:ne180100]<0>(&v505, "common_Message.attributes");
      std::string::basic_string[abi:ne180100]<0>(&v507, "common_Person.name");
      std::string::basic_string[abi:ne180100]<0>(v509, "common_Measurement.components");
      std::string::basic_string[abi:ne180100]<0>(&v510, "common_RecurringDateTime.recurrenceDateTimes");
      std::string::basic_string[abi:ne180100]<0>(&v512, "common_Announcement.recipients");
      std::string::basic_string[abi:ne180100]<0>(v514, "common_Alarm.attributes");
      std::string::basic_string[abi:ne180100]<0>(&v515, "common_Message.participants");
      std::unordered_set<std::string>::unordered_set((uint64_t)v431, (unsigned __int8 *)&buf, 17);
      v175 = 408;
      do
      {
        if (*((char *)&buf + v175 - 1) < 0)
          operator delete(*(__int128 **)((char *)&v490 + v175));
        v175 -= 24;
      }
      while (v175);
      if (*((_BYTE *)v350 + 712))
      {
        v176 = *((_QWORD *)v350 + 88);
        if (v176)
        {
          memset(&buf, 0, sizeof(buf));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&buf, *(__int128 **)(v176 + 184), *(__int128 **)(v176 + 192), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v176 + 192) - *(_QWORD *)(v176 + 184)) >> 3));
          v177 = (unsigned __int8 *)buf.__loc_.__locale_;
          v178 = buf.__ct_;
          while (v177 != (unsigned __int8 *)v178)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v431, v177, (uint64_t)v177);
            v177 += 24;
          }
          v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
        }
      }
      nlv4_inference_orchestrator::trees::PlyTreeCreator::constructTree((uint64_t)v429, (uint64_t)v363, v432, &v421, v174);
      std::string::basic_string[abi:ne180100]<0>(&v556, "target");
      std::string::basic_string[abi:ne180100]<0>(v557, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(v558, "sourceString");
      std::string::basic_string[abi:ne180100]<0>(v559, "common_LocalisedString");
      std::string::basic_string[abi:ne180100]<0>(v560, "locale");
      std::string::basic_string[abi:ne180100]<0>(v561, "common_Locale");
      v483 = 0uLL;
      v484 = 0;
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v483;
      v533.__r_.__value_.__s.__data_[8] = 0;
      *(_QWORD *)&v483 = operator new(0x90uLL);
      *((_QWORD *)&v483 + 1) = v483;
      v484 = v483 + 144;
      *((_QWORD *)&v483 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v484, (uint64_t)&v556, (uint64_t)v562, v483);
      std::string::basic_string[abi:ne180100]<0>(&v481, "name");
      v485 = v483;
      v486 = v484;
      v484 = 0;
      v483 = 0uLL;
      v487 = v481;
      v488 = v482;
      v481 = 0uLL;
      v482 = 0;
      std::string::basic_string[abi:ne180100]<0>(&buf, "modified_TranslationSourceLocale");
      *(_OWORD *)v494 = v485;
      *(_QWORD *)&v494[16] = v486;
      v486 = 0;
      v485 = 0uLL;
      *(_OWORD *)v495 = v487;
      *(_QWORD *)&v495[16] = v488;
      v487 = 0uLL;
      v488 = 0;
      std::string::basic_string[abi:ne180100]<0>(v552, "target");
      std::string::basic_string[abi:ne180100]<0>(v553, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(&v554, "sourceString");
      std::string::basic_string[abi:ne180100]<0>(v555, "common_LocalisedString");
      v475 = 0uLL;
      v476 = 0;
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v475;
      v533.__r_.__value_.__s.__data_[8] = 0;
      *(_QWORD *)&v475 = operator new(0x60uLL);
      *((_QWORD *)&v475 + 1) = v475;
      v476 = v475 + 96;
      *((_QWORD *)&v475 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v476, (uint64_t)v552, (uint64_t)&v556, v475);
      std::string::basic_string[abi:ne180100]<0>(&v473, "stringValue");
      v477 = v475;
      v478 = v476;
      v476 = 0;
      v475 = 0uLL;
      v479 = v473;
      v480 = v474;
      v473 = 0uLL;
      v474 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v496, "modified_TranslationPayload");
      v498 = v477;
      *(_QWORD *)v499 = v478;
      v478 = 0;
      v477 = 0uLL;
      *(_OWORD *)&v499[8] = v479;
      *(_QWORD *)&v499[24] = v480;
      v479 = 0uLL;
      v480 = 0;
      std::string::basic_string[abi:ne180100]<0>(v548, "target");
      std::string::basic_string[abi:ne180100]<0>(v549, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(&v550, "sourceString");
      std::string::basic_string[abi:ne180100]<0>(v551, "common_LocalisedString");
      v467 = 0uLL;
      v468 = 0;
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v467;
      v533.__r_.__value_.__s.__data_[8] = 0;
      *(_QWORD *)&v467 = operator new(0x60uLL);
      *((_QWORD *)&v467 + 1) = v467;
      v468 = v467 + 96;
      *((_QWORD *)&v467 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v468, (uint64_t)v548, (uint64_t)v552, v467);
      std::string::basic_string[abi:ne180100]<0>(&v465, "usoReferenceType");
      v469 = v467;
      v470 = v468;
      v468 = 0;
      v467 = 0uLL;
      v471 = v465;
      v472 = v466;
      v465 = 0uLL;
      v466 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v499[32], "modified_TranslationReferenceType");
      v500 = v469;
      v501 = v470;
      v470 = 0;
      v469 = 0uLL;
      v502 = v471;
      v503 = v472;
      v471 = 0uLL;
      v472 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v542, "target");
      std::string::basic_string[abi:ne180100]<0>(v543, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(&v544, "targetString");
      std::string::basic_string[abi:ne180100]<0>(v545, "common_LocalisedString");
      std::string::basic_string[abi:ne180100]<0>(&v546, "locale");
      std::string::basic_string[abi:ne180100]<0>(v547, "common_Locale");
      v459 = 0uLL;
      v460 = 0;
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v459;
      v533.__r_.__value_.__s.__data_[8] = 0;
      *(_QWORD *)&v459 = operator new(0x90uLL);
      *((_QWORD *)&v459 + 1) = v459;
      v460 = v459 + 144;
      *((_QWORD *)&v459 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v460, (uint64_t)&v542, (uint64_t)v548, v459);
      std::string::basic_string[abi:ne180100]<0>(&v457, "name");
      v461 = v459;
      v462 = v460;
      v460 = 0;
      v459 = 0uLL;
      v463 = v457;
      v464 = v458;
      v457 = 0uLL;
      v458 = 0;
      std::string::basic_string[abi:ne180100]<0>(v504, "modified_TranslationTargetLocale");
      v505 = v461;
      v506 = v462;
      v462 = 0;
      v461 = 0uLL;
      v507 = v463;
      v508 = v464;
      v463 = 0uLL;
      v464 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v533, "target");
      std::string::basic_string[abi:ne180100]<0>(&v534, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(&v535, "targetString");
      std::string::basic_string[abi:ne180100]<0>(v536, "common_LocalisedString");
      std::string::basic_string[abi:ne180100]<0>(&v537, "locale");
      std::string::basic_string[abi:ne180100]<0>(v539, "common_Locale");
      std::string::basic_string[abi:ne180100]<0>(&v540, "geographicArea");
      std::string::basic_string[abi:ne180100]<0>(v541, "common_GeographicArea");
      v451 = 0uLL;
      v452 = 0;
      v524[0] = &v451;
      LOBYTE(v524[1]) = 0;
      *(_QWORD *)&v451 = operator new(0xC0uLL);
      *((_QWORD *)&v451 + 1) = v451;
      v452 = v451 + 192;
      *((_QWORD *)&v451 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v452, (uint64_t)&v533, (uint64_t)&v542, v451);
      std::string::basic_string[abi:ne180100]<0>(&v449, "name");
      v453 = v451;
      v454 = v452;
      v452 = 0;
      v451 = 0uLL;
      v455 = v449;
      v456 = v450;
      v449 = 0uLL;
      v450 = 0;
      std::string::basic_string[abi:ne180100]<0>(v509, "modified_GeographicAreaName");
      v510 = v453;
      v511 = v454;
      v454 = 0;
      v453 = 0uLL;
      v512 = v455;
      v513 = v456;
      v455 = 0uLL;
      v456 = 0;
      std::string::basic_string[abi:ne180100]<0>(v524, "target");
      std::string::basic_string[abi:ne180100]<0>(v526, "common_Translation");
      std::string::basic_string[abi:ne180100]<0>(&v527, "targetString");
      std::string::basic_string[abi:ne180100]<0>(v528, "common_LocalisedString");
      std::string::basic_string[abi:ne180100]<0>(&v529, "locale");
      std::string::basic_string[abi:ne180100]<0>(v530, "common_Locale");
      std::string::basic_string[abi:ne180100]<0>(&v531, "geographicArea");
      std::string::basic_string[abi:ne180100]<0>(v532, "common_GeographicArea");
      v443 = 0uLL;
      v444 = 0;
      *(_QWORD *)&v441 = &v443;
      BYTE8(v441) = 0;
      *(_QWORD *)&v443 = operator new(0xC0uLL);
      *((_QWORD *)&v443 + 1) = v443;
      v444 = v443 + 192;
      *((_QWORD *)&v443 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>((uint64_t)&v444, (uint64_t)v524, (uint64_t)&v533, v443);
      std::string::basic_string[abi:ne180100]<0>(&v441, "areaType");
      v445 = v443;
      v446 = v444;
      v444 = 0;
      v443 = 0uLL;
      v447 = v441;
      v448 = v442;
      v441 = 0uLL;
      v442 = 0;
      v179 = &v381;
      std::string::basic_string[abi:ne180100]<0>(v514, "modified_GeographicAreaType");
      v180 = 0;
      v516 = v446;
      v518 = v448;
      v515 = v445;
      v446 = 0;
      v445 = 0uLL;
      v517 = v447;
      v447 = 0uLL;
      v448 = 0;
      v426 = 0u;
      v427 = 0u;
      v428[0] = 1.0;
      do
      {
        v181 = &buf + 3 * v180;
        v182 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v427 + 8, (uint64_t)v181);
        v183 = v182;
        v184 = *((_QWORD *)&v426 + 1);
        if (*((_QWORD *)&v426 + 1))
        {
          v185 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v426 + 8));
          v185.i16[0] = vaddlv_u8(v185);
          v186 = v185.u32[0];
          if (v185.u32[0] > 1uLL)
          {
            v179 = (std::regex_traits<char> *)v182;
            if (v182 >= *((_QWORD *)&v426 + 1))
              v179 = (std::regex_traits<char> *)(v182 % *((_QWORD *)&v426 + 1));
          }
          else
          {
            v179 = (std::regex_traits<char> *)((*((_QWORD *)&v426 + 1) - 1) & v182);
          }
          v187 = *(unsigned __int8 ***)(v426 + 8 * (_QWORD)v179);
          if (v187)
          {
            for (k = *v187; k; k = *(unsigned __int8 **)k)
            {
              v189 = *((_QWORD *)k + 1);
              if (v189 == v183)
              {
                if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v428, k + 16, (unsigned __int8 *)&buf + 72 * v180) & 1) != 0)goto LABEL_333;
              }
              else
              {
                if (v186 > 1)
                {
                  if (v189 >= v184)
                    v189 %= v184;
                }
                else
                {
                  v189 &= v184 - 1;
                }
                if ((std::regex_traits<char> *)v189 != v179)
                  break;
              }
            }
          }
        }
        v190 = (char *)operator new(0x58uLL);
        v191 = v190;
        v489 = v190;
        v490 = &v427;
        v491 = 0;
        *(_QWORD *)v190 = 0;
        *((_QWORD *)v190 + 1) = v183;
        if (SHIBYTE(v181->__col_) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v190 + 16), (const std::string::value_type *)v181->__loc_.__locale_, (std::string::size_type)v181->__ct_);
        }
        else
        {
          *((_OWORD *)v190 + 1) = *(_OWORD *)&v181->__loc_.__locale_;
          *((_QWORD *)v190 + 4) = v181->__col_;
        }
        v191[5] = 0;
        v191[6] = 0;
        v191[7] = 0;
        std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(v191 + 5, *((_QWORD *)&buf + 9 * v180 + 3), *(_QWORD *)&v494[72 * v180 + 8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v494[72 * v180 + 8] - *((_QWORD *)&buf + 9 * v180 + 3)) >> 4));
        v192 = (std::string *)(v191 + 8);
        v193 = (const std::string::value_type **)&v495[72 * v180];
        if (SHIBYTE(v181[2].__col_) < 0)
        {
          std::string::__init_copy_ctor_external(v192, *v193, *(_QWORD *)&v495[72 * v180 + 8]);
        }
        else
        {
          *(_OWORD *)&v192->__r_.__value_.__l.__data_ = *(_OWORD *)v193;
          v191[10] = *(_QWORD *)&v495[72 * v180 + 16];
        }
        v491 = 1;
        v194 = (float)(unint64_t)(*((_QWORD *)&v427 + 1) + 1);
        if (!v184 || (float)(v428[0] * (float)v184) < v194)
        {
          v195 = (v184 & (v184 - 1)) != 0;
          if (v184 < 3)
            v195 = 1;
          v196 = v195 | (2 * v184);
          v197 = vcvtps_u32_f32(v194 / v428[0]);
          if (v196 <= v197)
            prime = (int8x8_t)v197;
          else
            prime = (int8x8_t)v196;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v184 = *((_QWORD *)&v426 + 1);
          if (*(_QWORD *)&prime <= *((_QWORD *)&v426 + 1))
          {
            if (*(_QWORD *)&prime < *((_QWORD *)&v426 + 1))
            {
              v205 = vcvtps_u32_f32((float)*((unint64_t *)&v427 + 1) / v428[0]);
              if (*((_QWORD *)&v426 + 1) < 3uLL
                || (v206 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v426 + 8)),
                    v206.i16[0] = vaddlv_u8(v206),
                    v206.u32[0] > 1uLL))
              {
                v205 = std::__next_prime(v205);
              }
              else
              {
                v207 = 1 << -(char)__clz(v205 - 1);
                if (v205 >= 2)
                  v205 = v207;
              }
              if (*(_QWORD *)&prime <= v205)
                prime = (int8x8_t)v205;
              if (*(_QWORD *)&prime >= v184)
              {
                v184 = *((_QWORD *)&v426 + 1);
              }
              else
              {
                if (prime)
                  goto LABEL_289;
                v213 = (void *)v426;
                *(_QWORD *)&v426 = 0;
                if (v213)
                  operator delete(v213);
                v184 = 0;
                *((_QWORD *)&v426 + 1) = 0;
              }
            }
          }
          else
          {
LABEL_289:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v199 = operator new(8 * *(_QWORD *)&prime);
            v200 = (void *)v426;
            *(_QWORD *)&v426 = v199;
            if (v200)
              operator delete(v200);
            v201 = 0;
            *((int8x8_t *)&v426 + 1) = prime;
            do
              *(_QWORD *)(v426 + 8 * v201++) = 0;
            while (*(_QWORD *)&prime != v201);
            v202 = (_QWORD **)v427;
            if ((_QWORD)v427)
            {
              v203 = *(_QWORD *)(v427 + 8);
              v204 = (uint8x8_t)vcnt_s8(prime);
              v204.i16[0] = vaddlv_u8(v204);
              if (v204.u32[0] > 1uLL)
              {
                if (v203 >= *(_QWORD *)&prime)
                  v203 %= *(_QWORD *)&prime;
              }
              else
              {
                v203 &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(v426 + 8 * v203) = &v427;
              for (m = *v202; m; v203 = v209)
              {
                v209 = m[1];
                if (v204.u32[0] > 1uLL)
                {
                  if (v209 >= *(_QWORD *)&prime)
                    v209 %= *(_QWORD *)&prime;
                }
                else
                {
                  v209 &= *(_QWORD *)&prime - 1;
                }
                if (v209 != v203)
                {
                  if (!*(_QWORD *)(v426 + 8 * v209))
                  {
                    *(_QWORD *)(v426 + 8 * v209) = v202;
                    goto LABEL_314;
                  }
                  *v202 = (_QWORD *)*m;
                  *m = **(_QWORD **)(v426 + 8 * v209);
                  **(_QWORD **)(v426 + 8 * v209) = m;
                  m = v202;
                }
                v209 = v203;
LABEL_314:
                v202 = (_QWORD **)m;
                m = (_QWORD *)*m;
              }
            }
            v184 = (unint64_t)prime;
          }
          if ((v184 & (v184 - 1)) != 0)
          {
            if (v183 >= v184)
              v179 = (std::regex_traits<char> *)(v183 % v184);
            else
              v179 = (std::regex_traits<char> *)v183;
          }
          else
          {
            v179 = (std::regex_traits<char> *)((v184 - 1) & v183);
          }
        }
        v210 = *(_QWORD **)(v426 + 8 * (_QWORD)v179);
        v211 = v489;
        if (v210)
        {
          *v489 = *v210;
LABEL_331:
          *v210 = v211;
          goto LABEL_332;
        }
        *v489 = v427;
        *(_QWORD *)&v427 = v211;
        *(_QWORD *)(v426 + 8 * (_QWORD)v179) = &v427;
        if (*v211)
        {
          v212 = *(_QWORD *)(*v211 + 8);
          if ((v184 & (v184 - 1)) != 0)
          {
            if (v212 >= v184)
              v212 %= v184;
          }
          else
          {
            v212 &= v184 - 1;
          }
          v210 = (_QWORD *)(v426 + 8 * v212);
          goto LABEL_331;
        }
LABEL_332:
        v489 = 0;
        ++*((_QWORD *)&v427 + 1);
        std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v489);
LABEL_333:
        ++v180;
      }
      while (v180 != 6);
      v214 = 432;
      do
      {
        v215 = (void **)((char *)&buf.__loc_.__locale_ + v214);
        if (*((char *)&buf + v214 - 1) < 0)
          operator delete(*(v215 - 3));
        v492 = v215 - 6;
        std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v492);
        if (*((char *)v215 - 49) < 0)
          operator delete(*(v215 - 9));
        v214 -= 72;
      }
      while (v214);
      if (SHIBYTE(v448) < 0)
        operator delete((void *)v447);
      v492 = (void **)&v445;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v492);
      if (SHIBYTE(v442) < 0)
        operator delete((void *)v441);
      *(_QWORD *)&v441 = &v443;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v441);
      for (n = 0; n != -24; n -= 6)
      {
        v217 = &v524[n];
        if (SHIBYTE(v532[n + 2]) < 0)
          operator delete(v217[21]);
        if (*((char *)v217 + 167) < 0)
          operator delete(v217[18]);
      }
      if (SHIBYTE(v456) < 0)
        operator delete((void *)v455);
      v524[0] = &v453;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v524);
      if (SHIBYTE(v450) < 0)
        operator delete((void *)v449);
      v524[0] = &v451;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)v524);
      for (ii = 0; ii != -24; ii -= 6)
      {
        v219 = (void **)((char *)&v533.__r_.__value_.__l.__data_ + ii * 8);
        if (SHIBYTE(v541[ii + 2]) < 0)
          operator delete(v219[21]);
        if (*((char *)v219 + 167) < 0)
          operator delete(v219[18]);
      }
      if (SHIBYTE(v464) < 0)
        operator delete((void *)v463);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v461;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      if (SHIBYTE(v458) < 0)
        operator delete((void *)v457);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v459;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      for (jj = 0; jj != -18; jj -= 6)
      {
        v221 = (void **)((char *)&v542.__r_.__value_.__l.__data_ + jj * 8);
        if (SHIBYTE(v547[jj + 2]) < 0)
          operator delete(v221[15]);
        if (*((char *)v221 + 119) < 0)
          operator delete(v221[12]);
      }
      if (SHIBYTE(v472) < 0)
        operator delete((void *)v471);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v469;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      if (SHIBYTE(v466) < 0)
        operator delete((void *)v465);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v467;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      for (kk = 0; kk != -12; kk -= 6)
      {
        v223 = &v548[kk];
        if (SHIBYTE(v551[kk + 2]) < 0)
          operator delete(v223[9]);
        if (*((char *)v223 + 71) < 0)
          operator delete(v223[6]);
      }
      if (SHIBYTE(v480) < 0)
        operator delete((void *)v479);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v477;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      if (SHIBYTE(v474) < 0)
        operator delete((void *)v473);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v475;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      for (mm = 0; mm != -12; mm -= 6)
      {
        v225 = &v552[mm];
        if (SHIBYTE(v555[mm + 2]) < 0)
          operator delete(v225[9]);
        if (*((char *)v225 + 71) < 0)
          operator delete(v225[6]);
      }
      if (SHIBYTE(v488) < 0)
        operator delete((void *)v487);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v485;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      if (SHIBYTE(v482) < 0)
        operator delete((void *)v481);
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v483;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      for (nn = 0; nn != -18; nn -= 6)
      {
        v227 = (void **)((char *)&v556.__r_.__value_.__l.__data_ + nn * 8);
        if (SHIBYTE(v561[nn + 2]) < 0)
          operator delete(v227[15]);
        if (*((char *)v227 + 119) < 0)
          operator delete(v227[12]);
      }
      nlv4_inference_orchestrator::trees::TreeDecompressor::decompress((nlv4_inference_orchestrator::trees::TreeDecompressor *)&v426, (nlv4_inference_orchestrator::trees::TreeNode *)v363);
      std::__hash_table<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>>>::~__hash_table((uint64_t)&v426);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v431[2]);
      v228 = v431[0];
      v431[0] = 0;
      if (v228)
        operator delete(v228);
      if (v430 < 0)
        operator delete(v429[0]);
      buf.__loc_.__locale_ = (std::locale::__imp *)v432;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (v440 < 0)
        operator delete(v439);
      if (v438 < 0)
        operator delete(v437);
      if (v436 < 0)
        operator delete(v435);
      if (v434 < 0)
        operator delete(v433[0]);
      LODWORD(buf.__loc_.__locale_) = *((_DWORD *)v375 + 8 * spid);
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)&buf.__ct_, (const nlv4_inference_orchestrator::trees::TreeNode *)v363);
      v229 = (char *)v370;
      if ((unint64_t)v370 >= v371)
      {
        v235 = v369;
        v236 = 0x86BCA1AF286BCA1BLL * (((_BYTE *)v370 - v369) >> 3);
        v237 = v236 + 1;
        if (v236 + 1 > 0x1AF286BCA1AF286)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0xD79435E50D79436 * ((uint64_t)(v371 - (_QWORD)v369) >> 3) > v237)
          v237 = 0xD79435E50D79436 * ((uint64_t)(v371 - (_QWORD)v369) >> 3);
        if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v371 - (_QWORD)v369) >> 3) >= 0xD79435E50D7943)
          v238 = 0x1AF286BCA1AF286;
        else
          v238 = v237;
        if (v238)
        {
          if (v238 > 0x1AF286BCA1AF286)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v239 = (char *)operator new(152 * v238);
        }
        else
        {
          v239 = 0;
        }
        v240 = &v239[152 * v236];
        *(_DWORD *)v240 = buf.__loc_.__locale_;
        *(_OWORD *)(v240 + 8) = *(_OWORD *)&buf.__ct_;
        *((_QWORD *)v240 + 3) = *(_QWORD *)v494;
        buf.__ct_ = 0;
        buf.__col_ = 0;
        *(_QWORD *)v494 = 0;
        *((_OWORD *)v240 + 2) = *(_OWORD *)&v494[8];
        *((_QWORD *)v240 + 6) = *(_QWORD *)v495;
        *(_QWORD *)&v494[8] = 0;
        *(_QWORD *)&v494[16] = 0;
        *(_QWORD *)v495 = 0;
        v241 = *(_OWORD *)&v495[8];
        *((_QWORD *)v240 + 9) = v496;
        *(_OWORD *)(v240 + 56) = v241;
        *(_QWORD *)&v495[8] = 0;
        *(_QWORD *)&v495[16] = 0;
        v496 = 0;
        v242 = v497;
        *((_QWORD *)v240 + 14) = 0;
        v243 = v498;
        *((_OWORD *)v240 + 5) = v242;
        *((_OWORD *)v240 + 6) = v243;
        *((_QWORD *)v240 + 14) = *(_QWORD *)v499;
        v498 = 0uLL;
        *(_QWORD *)v499 = 0;
        v244 = *(_OWORD *)&v499[8];
        *(_OWORD *)(v240 + 136) = *(_OWORD *)&v499[24];
        v234 = v240 + 152;
        *(_OWORD *)(v240 + 120) = v244;
        if (v229 == v235)
        {
          v369 = v240;
          v370 = v240 + 152;
          v371 = (unint64_t)&v239[152 * v238];
          if (!v229)
            goto LABEL_441;
        }
        else
        {
          v245 = 0;
          do
          {
            v246 = &v229[v245];
            v247 = &v240[v245];
            *((_DWORD *)v247 - 38) = *(_DWORD *)&v229[v245 - 152];
            v248 = *(_OWORD *)&v229[v245 - 144];
            *((_QWORD *)v247 - 16) = *(_QWORD *)&v229[v245 - 128];
            *((_OWORD *)v247 - 9) = v248;
            *((_QWORD *)v246 - 17) = 0;
            *((_QWORD *)v246 - 16) = 0;
            *((_QWORD *)v246 - 18) = 0;
            v249 = *(_OWORD *)&v229[v245 - 120];
            *((_QWORD *)v247 - 13) = *(_QWORD *)&v229[v245 - 104];
            *(_OWORD *)(v247 - 120) = v249;
            *((_QWORD *)v246 - 14) = 0;
            *((_QWORD *)v246 - 13) = 0;
            v250 = *(_OWORD *)&v229[v245 - 96];
            v251 = *(_QWORD *)&v229[v245 - 80];
            *((_QWORD *)v246 - 15) = 0;
            *((_QWORD *)v247 - 10) = v251;
            *((_OWORD *)v247 - 6) = v250;
            *((_QWORD *)v246 - 11) = 0;
            *((_QWORD *)v246 - 10) = 0;
            v252 = *(_OWORD *)&v229[v245 - 72];
            *((_QWORD *)v246 - 12) = 0;
            *(_OWORD *)(v247 - 72) = v252;
            *((_QWORD *)v247 - 6) = 0;
            *((_QWORD *)v247 - 5) = 0;
            *((_QWORD *)v247 - 7) = 0;
            *(_OWORD *)(v247 - 56) = *(_OWORD *)&v229[v245 - 56];
            *((_QWORD *)v247 - 5) = *(_QWORD *)&v229[v245 - 40];
            *((_QWORD *)v246 - 7) = 0;
            *((_QWORD *)v246 - 6) = 0;
            *((_QWORD *)v246 - 5) = 0;
            v253 = *(_OWORD *)&v229[v245 - 16];
            *((_OWORD *)v247 - 2) = *(_OWORD *)&v229[v245 - 32];
            *((_OWORD *)v247 - 1) = v253;
            v245 -= 152;
          }
          while (&v229[v245] != v235);
          v254 = v369;
          v229 = (char *)v370;
          v369 = &v240[v245];
          v370 = v240 + 152;
          v371 = (unint64_t)&v239[152 * v238];
          if (v229 != v254)
          {
            do
            {
              v229 -= 152;
              std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100]((uint64_t)v229);
            }
            while (v229 != v254);
            v229 = v254;
          }
          if (!v229)
            goto LABEL_441;
        }
        operator delete(v229);
      }
      else
      {
        *(_DWORD *)v370 = buf.__loc_.__locale_;
        v230 = *(_OWORD *)&buf.__ct_;
        *((_QWORD *)v229 + 3) = *(_QWORD *)v494;
        *(_OWORD *)(v229 + 8) = v230;
        buf.__col_ = 0;
        *(_QWORD *)v494 = 0;
        buf.__ct_ = 0;
        v231 = *(_QWORD *)v495;
        *((_OWORD *)v229 + 2) = *(_OWORD *)&v494[8];
        *((_QWORD *)v229 + 6) = v231;
        *(_QWORD *)&v494[16] = 0;
        *(_QWORD *)v495 = 0;
        *(_QWORD *)&v494[8] = 0;
        v232 = *(_OWORD *)&v495[8];
        *((_QWORD *)v229 + 9) = v496;
        *(_OWORD *)(v229 + 56) = v232;
        *(_QWORD *)&v495[16] = 0;
        v496 = 0;
        *(_QWORD *)&v495[8] = 0;
        *((_OWORD *)v229 + 5) = v497;
        *((_QWORD *)v229 + 12) = 0;
        *((_QWORD *)v229 + 13) = 0;
        *((_QWORD *)v229 + 14) = 0;
        *((_OWORD *)v229 + 6) = v498;
        *((_QWORD *)v229 + 14) = *(_QWORD *)v499;
        v498 = 0uLL;
        *(_QWORD *)v499 = 0;
        v233 = *(_OWORD *)&v499[8];
        *(_OWORD *)(v229 + 136) = *(_OWORD *)&v499[24];
        *(_OWORD *)(v229 + 120) = v233;
        v234 = v229 + 152;
      }
LABEL_441:
      v370 = v234;
      v533.__r_.__value_.__r.__words[0] = (std::string::size_type)&v498;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v533);
      if (SHIBYTE(v496) < 0)
        operator delete(*(void **)&v495[8]);
      if ((v495[7] & 0x80000000) != 0)
        operator delete(*(void **)&v494[8]);
      if ((v494[7] & 0x80000000) != 0)
        operator delete((void *)buf.__ct_);
      nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logModelOutput(v255, (const nlv4_inference_orchestrator::trees::TreeNode *)v363, (__int128 **)v349, spid);
      buf.__loc_.__locale_ = (std::locale::__imp *)v368;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (SHIBYTE(v367) < 0)
        operator delete(v366[0]);
      if (SHIBYTE(v365) < 0)
        operator delete(v364[1]);
      if (SHIBYTE(v364[0]) < 0)
        operator delete(v363[0]);
      v173 = spid + 1;
      v172 = (char *)v375;
    }
    while (spid + 1 < ((char *)v376 - (_BYTE *)v375) >> 5);
  }
  v256 = SNLPOSLoggerForCategory(7);
  if (v168 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v257 = v256;
    if (os_signpost_enabled(v256))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v257, OS_SIGNPOST_INTERVAL_END, v168, "NLv4 Tree Building", "", (uint8_t *)&buf, 2u);
    }
  }
  v258 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v258, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Tree Building\"", (uint8_t *)&buf, 2u);
  }
  v259 = SNLPOSLoggerForCategory(7);
  v260 = os_signpost_id_generate(v259);
  v261 = SNLPOSLoggerForCategory(7);
  if (v260 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v262 = v261;
    if (os_signpost_enabled(v261))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v262, OS_SIGNPOST_INTERVAL_BEGIN, v260, "NLv4 Post-Inference Tree Manipulation", "", (uint8_t *)&buf, 2u);
    }
  }
  v263 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v263, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Post-Inference Tree Manipulation\"", (uint8_t *)&buf, 2u);
  }
  v264 = *(_QWORD *)(*v348 + 64);
  v265 = *(_QWORD *)(*v348 + 72);
  v266 = *(__int128 **)(*(_QWORD *)(v264 + 24) + 8);
  v357 = v266;
  if (v265 && (v267 = *(_QWORD *)(v265 + 136)) != 0 && *(_QWORD *)(v267 + 16) && *(_QWORD *)(v264 + 16))
  {
    MEMORY[0x1C3BB83F8](&v533);
    v538 = 1;
    nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations((std::string *)&buf, v266, (_OWORD **)&v421, (uint64_t)v419, (uint64_t)&v533, *(__int128 **)(*(_QWORD *)(*v348 + 64) + 16));
    v268 = v350;
    if (v538)
      MEMORY[0x1C3BB8404](&v533);
    v269 = v369;
    v270 = (char *)v370;
    if (v369 != v370)
    {
      do
      {
        nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps((uint64_t)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)(v269 + 8), &v372);
        v271 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v271, OS_LOG_TYPE_DEBUG))
        {
          nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)&v533, (const nlv4_inference_orchestrator::trees::TreeNode *)(v269 + 8));
          v272 = (v533.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v533
               : (std::string *)v533.__r_.__value_.__r.__words[0];
          LODWORD(v524[0]) = 136642819;
          *(void **)((char *)v524 + 4) = v272;
          _os_log_impl(&dword_1C2196000, v271, OS_LOG_TYPE_DEBUG, "Tree after all manipulations:\n%{sensitive}s", (uint8_t *)v524, 0xCu);
          if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v533.__r_.__value_.__l.__data_);
        }
        v269 += 152;
      }
      while (v269 != v270);
    }
  }
  else
  {
    v533.__r_.__value_.__s.__data_[0] = 0;
    v538 = 0;
    std::string::basic_string[abi:ne180100]<0>(v524, "");
    v268 = v350;
    nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations((std::string *)&buf, v266, (_OWORD **)&v421, (uint64_t)v419, (uint64_t)&v533, (__int128 *)v524);
    if (v525 < 0)
      operator delete(v524[0]);
    if (v538)
      MEMORY[0x1C3BB8404](&v533);
    v273 = v369;
    v274 = (char *)v370;
    if (v369 != v370)
    {
      do
      {
        nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps((uint64_t)&buf, (nlv4_inference_orchestrator::trees::TreeNode *)(v273 + 8), &v372);
        v275 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v275, OS_LOG_TYPE_DEBUG))
        {
          nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)&v533, (const nlv4_inference_orchestrator::trees::TreeNode *)(v273 + 8));
          v276 = (v533.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v533
               : (std::string *)v533.__r_.__value_.__r.__words[0];
          LODWORD(v524[0]) = 136642819;
          *(void **)((char *)v524 + 4) = v276;
          _os_log_impl(&dword_1C2196000, v275, OS_LOG_TYPE_DEBUG, "Tree after all manipulations:\n%{sensitive}s", (uint8_t *)v524, 0xCu);
          if (SHIBYTE(v533.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v533.__r_.__value_.__l.__data_);
        }
        v273 += 152;
      }
      while (v273 != v274);
    }
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::~TreeManipulations((void **)&buf.__loc_.__locale_);
  v277 = SNLPOSLoggerForCategory(7);
  if (v260 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v278 = v277;
    if (os_signpost_enabled(v277))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v278, OS_SIGNPOST_INTERVAL_END, v260, "NLv4 Post-Inference Tree Manipulation", "", (uint8_t *)&buf, 2u);
    }
  }
  v279 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v279, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Post-Inference Tree Manipulation\"", (uint8_t *)&buf, 2u);
  }
  v280 = SNLPOSLoggerForCategory(7);
  v281 = os_signpost_id_generate(v280);
  v282 = SNLPOSLoggerForCategory(7);
  v354 = v281 - 1;
  v283 = (unsigned __int8 *)v266;
  if (v281 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v284 = v282;
    if (os_signpost_enabled(v282))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v284, OS_SIGNPOST_INTERVAL_BEGIN, v281, "NLv4 Protobuf Response Building", "", (uint8_t *)&buf, 2u);
    }
  }
  v285 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v285, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Protobuf Response Building\"", (uint8_t *)&buf, 2u);
  }
  v352 = v281;
  v286 = (sirinluinternalnlv4_parser::NLv4ParserResponse *)operator new();
  v287 = sirinluinternalnlv4_parser::NLv4ParserResponse::NLv4ParserResponse(v286);
  *v347 = v287;
  v288 = (unsigned __int8 *)v369;
  v289 = (unsigned __int8 *)v370;
  if (v369 != v370)
  {
    v290 = 0;
    do
    {
      v291 = nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::UserAcceptedModification::removeUserAcceptedOnlyHackApplies(v287, v288 + 8, (uint64_t *)v419, v283);
      v292 = SNLPOSLoggerForCategory(1);
      v293 = v292;
      if (v291)
      {
        v287 = os_log_type_enabled(v292, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v287)
        {
          LOWORD(buf.__loc_.__locale_) = 0;
          _os_log_impl(&dword_1C2196000, v293, OS_LOG_TYPE_DEFAULT, "A hypothesis was rejected because it contained only UserAccepted.", (uint8_t *)&buf, 2u);
        }
      }
      else
      {
        if (os_log_type_enabled(v292, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf.__loc_.__locale_) = 134217984;
          *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + 4) = v290;
          _os_log_impl(&dword_1C2196000, v293, OS_LOG_TYPE_DEBUG, "Building UDA for hypothesis number %zu", (uint8_t *)&buf, 0xCu);
        }
        v294 = (std::__shared_weak_count *)*((_QWORD *)v268 + 61);
        v361 = *((_QWORD *)v268 + 60);
        v362 = v294;
        if (v294)
        {
          p_shared_owners = (unint64_t *)&v294->__shared_owners_;
          do
            v296 = __ldxr(p_shared_owners);
          while (__stxr(v296 + 1, p_shared_owners));
        }
        nlv4_inference_orchestrator::trees::buildUserDialogActs((sirinluexternal::UserAccepted ****)v524, v288 + 8, &v361, (uint64_t *)v419);
        v297 = v362;
        if (v362)
        {
          v298 = (unint64_t *)&v362->__shared_owners_;
          do
            v299 = __ldaxr(v298);
          while (__stlxr(v299 - 1, v298));
          if (!v299)
          {
            ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
            std::__shared_weak_count::__release_weak(v297);
          }
        }
        if (v524[0] != v524[1])
        {
          v300 = operator new();
          sirinluexternal::UserParse::UserParse((sirinluexternal::UserParse *)v300);
          v301 = operator new();
          sirinluexternal::UUID::UUID((sirinluexternal::UUID *)v301);
          LODWORD(buf.__loc_.__locale_) = 0;
          boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&buf);
          v302 = boost::uuids::random_generator_pure::operator()((int *)&buf);
          v304 = v303;
          boost::uuids::detail::random_provider_base::destroy(LODWORD(buf.__loc_.__locale_));
          *(_BYTE *)(v301 + 28) |= 3u;
          *(_QWORD *)(v301 + 8) = v304;
          *(_QWORD *)(v301 + 16) = v302;
          sirinluexternal::UserParse::makeIdA((sirinluexternal::UserParse *)v300);
          v305 = *(_QWORD *)(v300 + 24);
          *(_QWORD *)(v300 + 24) = v301;
          if (v305)
            (*(void (**)(uint64_t))(*(_QWORD *)v305 + 8))(v305);
          v306 = expf(*(float *)v288);
          *(_BYTE *)(v300 + 88) |= 2u;
          *(double *)(v300 + 48) = v306;
          v307 = (uint64_t *)v524[0];
          for (i1 = (uint64_t *)v524[1]; v307 != i1; ++v307)
          {
            if (*v307)
            {
              PB::PtrVector<sirinluexternal::UserDialogAct>::emplace_back<sirinluexternal::UserDialogAct const&>((uint64_t **)(v300 + 64), *v307);
            }
            else
            {
              v309 = SNLPOSLoggerForCategory(1);
              if (os_log_type_enabled(v309, OS_LOG_TYPE_DEBUG))
              {
                LOWORD(buf.__loc_.__locale_) = 0;
                _os_log_impl(&dword_1C2196000, v309, OS_LOG_TYPE_DEBUG, "Invalid USO graph, removing parse from output.  This might be due to a grammatical error or an otherwise malformed model tree.", (uint8_t *)&buf, 2u);
              }
            }
          }
          sirinluexternal::UserParse::makeParser((sirinluexternal::UserParse *)v300);
          v310 = *(_QWORD *)(v300 + 32);
          *(_BYTE *)(v310 + 16) |= 2u;
          *(_DWORD *)(v310 + 12) = 3;
          v311 = *(_QWORD *)(v300 + 32);
          *(_BYTE *)(v311 + 16) |= 1u;
          *(_DWORD *)(v311 + 8) = 2;
          PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse>((uint64_t **)(*v347 + 8), v300);
          (*(void (**)(uint64_t))(*(_QWORD *)v300 + 8))(v300);
          v268 = v350;
          v283 = (unsigned __int8 *)v357;
        }
        v290 = (std::locale::__imp *)((char *)v290 + 1);
        buf.__loc_.__locale_ = (std::locale::__imp *)v524;
        std::vector<std::unique_ptr<sirinluexternal::UserDialogAct const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      }
      v288 += 152;
    }
    while (v288 != v289);
  }
  v312 = SNLPOSLoggerForCategory(7);
  if (v354 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v313 = v312;
    if (os_signpost_enabled(v312))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v313, OS_SIGNPOST_INTERVAL_END, v352, "NLv4 Protobuf Response Building", "", (uint8_t *)&buf, 2u);
    }
  }
  v314 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v314, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v314, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Protobuf Response Building\"", (uint8_t *)&buf, 2u);
  }
  v315 = SNLPOSLoggerForCategory(7);
  v316 = os_signpost_id_generate(v315);
  v317 = SNLPOSLoggerForCategory(7);
  if (v316 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v318 = v317;
    if (os_signpost_enabled(v317))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v318, OS_SIGNPOST_INTERVAL_BEGIN, v316, "NLv4 Post-Protobuf Response Corrections", "", (uint8_t *)&buf, 2u);
    }
  }
  v319 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v319, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v319, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Post-Protobuf Response Corrections\"", (uint8_t *)&buf, 2u);
  }
  *(_QWORD *)&v359 = *v348 + 64;
  *((_QWORD *)&v359 + 1) = v419;
  v360 = (char *)v268 + 480;
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::runSystemPromptedContentRuntimeHacks((__int128 *)v268, (uint64_t *)&v369, (uint64_t *)v283, &v410, &v359, v347, &v372);
  v320 = SNLPOSLoggerForCategory(7);
  if (v316 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v321 = v320;
    if (os_signpost_enabled(v320))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v321, OS_SIGNPOST_INTERVAL_END, v316, "NLv4 Post-Protobuf Response Corrections", "", (uint8_t *)&buf, 2u);
    }
  }
  v322 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v322, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Post-Protobuf Response Corrections\"", (uint8_t *)&buf, 2u);
  }
  v323 = SNLPOSLoggerForCategory(7);
  v324 = os_signpost_id_generate(v323);
  v325 = SNLPOSLoggerForCategory(7);
  if (v324 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v326 = v325;
    if (os_signpost_enabled(v325))
    {
      LOWORD(buf.__loc_.__locale_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v326, OS_SIGNPOST_INTERVAL_BEGIN, v324, "NLv4 Handcrafted Rules", "", (uint8_t *)&buf, 2u);
    }
  }
  v327 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v327, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__loc_.__locale_) = 0;
    _os_log_impl(&dword_1C2196000, v327, OS_LOG_TYPE_DEFAULT, "BEGIN \"NLv4 Handcrafted Rules\"", (uint8_t *)&buf, 2u);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&buf);
  v328 = v372;
  for (i2 = v373; (std::string *)v328 != i2; v328 += 24)
  {
    v330 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf.__col_, (uint64_t)"[insights-snlp-nlv4]: ", 22);
    v331 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v330, (uint64_t)" ", 1);
    v332 = *(char *)(v328 + 23);
    if (v332 >= 0)
      v333 = v328;
    else
      v333 = *(_QWORD *)v328;
    if (v332 >= 0)
      v334 = *(unsigned __int8 *)(v328 + 23);
    else
      v334 = *(_QWORD *)(v328 + 8);
    v335 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v331, v333, v334);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v335, (uint64_t)"\n", 1);
  }
  v336 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v336, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v337 = (v556.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v556
         : (std::string *)v556.__r_.__value_.__r.__words[0];
    LODWORD(v533.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v533.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NLv4";
    WORD2(v533.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v533.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-nlv4]: ";
    HIWORD(v533.__r_.__value_.__r.__words[2]) = 2080;
    v534 = v337;
    _os_log_impl(&dword_1C2196000, v336, OS_LOG_TYPE_DEBUG, "[%s] %sExecuted handcrafted rules:\n%s", (uint8_t *)&v533, 0x20u);
    if (SHIBYTE(v556.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v556.__r_.__value_.__l.__data_);
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::insertExecutedHandcraftedRulesIntoFeatureStore(&v372, (uint64_t)&v424);
  v338 = SNLPOSLoggerForCategory(7);
  if (v324 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v339 = v338;
    if (os_signpost_enabled(v338))
    {
      LOWORD(v533.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v339, OS_SIGNPOST_INTERVAL_END, v324, "NLv4 Handcrafted Rules", "", (uint8_t *)&v533, 2u);
    }
  }
  v340 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v340, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v533.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v340, OS_LOG_TYPE_DEFAULT, "END \"NLv4 Handcrafted Rules\"", (uint8_t *)&v533, 2u);
  }
  v341 = (std::locale::__imp *)*MEMORY[0x1E0DE4F50];
  buf.__loc_.__locale_ = v341;
  v343 = *(std::locale::__imp **)(MEMORY[0x1E0DE4F50] + 64);
  v342 = *(const std::collate<char> **)(MEMORY[0x1E0DE4F50] + 72);
  *(std::locale::__imp **)((char *)&buf.__loc_.__locale_ + *((_QWORD *)v341 - 3)) = v343;
  v344 = MEMORY[0x1E0DE4FB8];
  v345 = MEMORY[0x1E0DE4FB8] + 16;
  buf.__col_ = v342;
  *(_QWORD *)v494 = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v498) < 0)
    operator delete(*((void **)&v497 + 1));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v499[16]);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v369;
  std::vector<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v372;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v375;
  std::vector<std::pair<float,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v378;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v381;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  __p[0] = v341;
  *(void **)((char *)__p + *((_QWORD *)v341 - 3)) = v343;
  v383[0] = v342;
  v383[1] = v345;
  if (v384 < 0)
    operator delete((void *)v383[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v385);
  *(_QWORD *)v519 = v341;
  *(_QWORD *)&v519[*((_QWORD *)v341 - 3)] = v343;
  v520[0] = v342;
  v520[1] = v344 + 16;
  if (SHIBYTE(v521) < 0)
    operator delete((void *)v520[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v523);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v386);
  if (v401)
    operator delete(v401);
  if (v398)
    operator delete(v398);
  if (v407)
  {
    v408 = v407;
    operator delete(v407);
  }
  if (v404)
  {
    v405 = v404;
    operator delete(v404);
  }
  if (v412)
  {
    v413 = v412;
    operator delete(v412);
  }
  if (v410)
  {
    v411 = v410;
    operator delete(v410);
  }
  if (v417)
  {
    v418 = v417;
    operator delete(v417);
  }
  if (v415)
  {
    v416 = v415;
    operator delete(v415);
  }
  buf.__loc_.__locale_ = (std::locale::__imp *)v419;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)v420;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__loc_.__locale_ = (std::locale::__imp *)&v421;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (v425 && SHIBYTE(v424.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v424.__r_.__value_.__l.__data_);
}

void sub_1C229E9B4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1C229EE70);
}

void sub_1C229EA80()
{
  JUMPOUT(0x1C229ED50);
}

void sub_1C229EA88()
{
  JUMPOUT(0x1C229EDCCLL);
}

void sub_1C229EA94()
{
  JUMPOUT(0x1C229EDF4);
}

void sub_1C229EA9C()
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v0;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v1;
  void *v2;

  v2 = (void *)STACK[0x5B0];
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = (unint64_t)v2;
    operator delete(v2);
  }
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v1);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v0);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&STACK[0x520]);
  JUMPOUT(0x1C229EDFCLL);
}

void sub_1C229EAF4()
{
  void *v0;

  v0 = (void *)STACK[0x550];
  if (STACK[0x550])
  {
    STACK[0x558] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C229EAE8);
}

void sub_1C229EB0C()
{
  JUMPOUT(0x1C229EAE8);
}

void sub_1C229EB14()
{
  void *v0;

  v0 = (void *)STACK[0x520];
  if (STACK[0x520])
  {
    STACK[0x528] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C229EDFCLL);
}

void sub_1C229EB2C()
{
  JUMPOUT(0x1C229EDFCLL);
}

void sub_1C229EB34()
{
  void *v0;

  operator delete(v0);
  JUMPOUT(0x1C229EE04);
}

void sub_1C229EB50()
{
  void *v0;

  v0 = (void *)STACK[0x618];
  if (STACK[0x618])
  {
    STACK[0x620] = (unint64_t)v0;
    operator delete(v0);
  }
  JUMPOUT(0x1C229EE0CLL);
}

void sub_1C229EB68()
{
  JUMPOUT(0x1C229EE0CLL);
}

void sub_1C229EB70()
{
  JUMPOUT(0x1C229EE14);
}

void sub_1C229EB78()
{
  unint64_t v0;

  STACK[0xAD0] = v0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xAD0]);
  JUMPOUT(0x1C229EE1CLL);
}

void sub_1C229EB8C()
{
  JUMPOUT(0x1C229EE1CLL);
}

void sub_1C229EB98()
{
  JUMPOUT(0x1C229EDC0);
}

void sub_1C229EBB0()
{
  unint64_t v0;
  uint64_t v1;

  STACK[0x3B0] = v0;
  if (SLOBYTE(STACK[0x16A7]) < 0)
    operator delete(*(void **)(v1 - 256));
  if (SLOBYTE(STACK[0x13D7]) < 0)
    operator delete((void *)STACK[0x13C0]);
  if (LOBYTE(STACK[0x1498]))
  {
    if (SLOBYTE(STACK[0x1497]) < 0)
      operator delete((void *)STACK[0x1480]);
  }
  JUMPOUT(0x1C229ED60);
}

void sub_1C229EBBC()
{
  void *v0;

  std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>::~pair((uint64_t)&STACK[0xAD0]);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&v0);
  JUMPOUT(0x1C229ED50);
}

void sub_1C229EC08()
{
  nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::~TreeManipulations((void **)&STACK[0xAD0]);
  JUMPOUT(0x1C229EC14);
}

void sub_1C229EC20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v0 = *v1;
  *v1 = 0;
  if (v0)
    (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  v4 = &v2;
  std::vector<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = &v3;
  JUMPOUT(0x1C229EDA0);
}

void sub_1C229EC28()
{
  JUMPOUT(0x1C229EC30);
}

void sub_1C229EC40()
{
  unint64_t v0;

  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<float,std::vector<unsigned long>>>,std::pair<float,std::vector<unsigned long>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&STACK[0xAD0]);
  STACK[0x3E0] = v0;
  JUMPOUT(0x1C229EDC0);
}

void sub_1C229EC58()
{
  JUMPOUT(0x1C229EE30);
}

void sub_1C229EC60()
{
  uint64_t v0;

  if (*(char *)(v0 + 407) < 0)
    operator delete((void *)STACK[0x1540]);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0xAF8]);
  std::locale::~locale((std::locale *)&STACK[0xAD0]);
  JUMPOUT(0x1C229EC98);
}

void sub_1C229ECE8()
{
  if (SLOBYTE(STACK[0xAE7]) < 0)
    operator delete((void *)STACK[0xAD0]);
  JUMPOUT(0x1C229EDE0);
}

void sub_1C229ED00()
{
  JUMPOUT(0x1C229EDE0);
}

void sub_1C229ED08()
{
  if (SLOBYTE(STACK[0xAE7]) < 0)
    operator delete((void *)STACK[0xAD0]);
  JUMPOUT(0x1C229EDE8);
}

void sub_1C229ED20()
{
  JUMPOUT(0x1C229EDE8);
}

void sub_1C229ED28()
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&STACK[0xAD0]);
  JUMPOUT(0x1C229ED34);
}

void sub_1C229ED70()
{
  STACK[0x13C0] = (unint64_t)&STACK[0x1480];
  JUMPOUT(0x1C229EDA0);
}

void sub_1C229ED78()
{
  if (SLOBYTE(STACK[0xAE7]) < 0)
    operator delete((void *)STACK[0xAD0]);
  STACK[0x13C0] = (unint64_t)&STACK[0x1480];
  JUMPOUT(0x1C229EDA0);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::validateRequest(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type v15;
  char v16;
  char *v17;
  std::runtime_error *exception;
  _QWORD *v19;
  std::string __p;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  char v26;
  _QWORD v27[3];

  v27[2] = *MEMORY[0x1E0C80C00];
  v25.__r_.__value_.__s.__data_[0] = 0;
  v26 = 0;
  if (!a1[7])
  {
    v17 = "NLv4 request missing request ID";
    goto LABEL_36;
  }
  v1 = a1[1];
  if (!v1 || (*(_BYTE *)(v1 + 64) & 4) == 0)
  {
    v17 = "NLv4 request missing valid embeddings";
    goto LABEL_36;
  }
  v2 = a1[8];
  if (!v2)
    goto LABEL_32;
  v3 = *(_QWORD **)(v2 + 24);
  if (!v3)
    goto LABEL_32;
  if (!v3[1])
  {
    v17 = "NLv4 request missing valid token chain locale";
    goto LABEL_36;
  }
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_32:
    v17 = "NLv4 request missing valid tokens";
LABEL_36:
    std::string::basic_string[abi:ne180100]<0>(&v25, v17);
    v26 = 1;
    goto LABEL_37;
  }
  v4 = *(_QWORD *)(v1 + 56);
  v5 = v3[4] - v3[3];
  if (v4 != v5 >> 3)
  {
    std::to_string(&v21, v4);
    v6 = std::string::insert(&v21, 0, "NLv4 request embeddings num tokens (");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v22, ") does not match actual num tokens (");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5 >> 3);
    v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    v12 = std::string::append(&v23, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v24, ")");
    v15 = v14->__r_.__value_.__r.__words[0];
    v27[0] = v14->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v27 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v26)
    {
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v25.__r_.__value_.__r.__words[0] = v15;
      v25.__r_.__value_.__l.__size_ = v27[0];
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v27 + 7);
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = v16;
    }
    else
    {
      v25.__r_.__value_.__r.__words[0] = v15;
      v25.__r_.__value_.__l.__size_ = v27[0];
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v27 + 7);
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = v16;
      v26 = 1;
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (v26)
    {
LABEL_37:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v19 = &exception->__vftable;
      if (!v26)
        std::__throw_bad_optional_access[abi:ne180100]();
      std::runtime_error::runtime_error(exception, &v25);
      *v19 = &off_1E7BE9DD0;
    }
  }
}

void sub_1C229F128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(_BYTE *)(v40 - 64))
  {
    if (*(char *)(v40 - 65) < 0)
      operator delete(*(void **)(v40 - 88));
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::featurizeSpans(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned int v14;
  std::runtime_error *exception;
  char *v16;
  std::string v17;
  _QWORD v18[2];
  char v19;

  v10 = (_QWORD *)(a1 + 440);
  v11 = (unsigned __int8 *)(a1 + 8);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 440), (unsigned __int8 *)(a1 + 8)))goto LABEL_7;
  v12 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v10, v11);
  if (!v12)
    goto LABEL_11;
  if (*((_DWORD *)v12 + 16) != 1)
  {
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(v18, "The NLv4 model config does not contain a setting for the maximum number of matching spans, max_num_spans_tokens.  Inference cannot continue.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v19 >= 0)
      v16 = (char *)v18;
    else
      v16 = (char *)v18[0];
    std::string::basic_string[abi:ne180100]<0>(&v17, v16);
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v10, v11);
  if (!v13)
LABEL_11:
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (*((_DWORD *)v13 + 16) != 1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v14 = *((_DWORD *)v13 + 10);
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize((int *)(a1 + 784), (char *)a5, a2, a3, a4, v14);
}

void sub_1C229F320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v20;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v20);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2)
{
  std::regex_traits<char> *v4;
  uint64_t v5;
  char *v6;

  v4 = std::regex_traits<char>::regex_traits(a1);
  v4[2].__ct_ = 0;
  *(_OWORD *)&v4[1].__col_ = 0u;
  *(_OWORD *)&v4[1].__loc_.__locale_ = 0u;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a2;
  else
    v6 = *(char **)a2;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (&v6[v5] != (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>((uint64_t)v4, v6, &v6[v5]))std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  return a1;
}

void sub_1C229F3E4(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(std::string *a1, char *a2, char *a3, const std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *a4, const char *a5)
{
  std::string::value_type *v6;
  size_t v8;
  std::__wrap_iter<const char *>::iterator_type v9;
  std::string::value_type *v10;
  unsigned __int8 *v11;
  std::__wrap_iter<const char *>::iterator_type i;
  std::__wrap_iter<const char *>::iterator_type v13;
  std::string::value_type *v14;
  std::vector<std::ssub_match>::pointer begin;
  const char *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type *v22;
  std::string::value_type *v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  std::sub_match<std::__wrap_iter<const char *>> *v28;
  BOOL v29;
  std::match_results<std::__wrap_iter<const char *>>::value_type *p_unmatched;
  std::string::value_type *v31;
  std::__wrap_iter<const char *> *p_second;
  std::string::value_type *v33;
  std::vector<std::ssub_match>::pointer v34;
  std::regex_constants::match_flag_type flags;
  unsigned __int32 v36;
  BOOL v37;
  std::match_results<std::__wrap_iter<const char *>>::value_type *v38;
  std::__wrap_iter<const char *> *v39;
  std::sub_match<const char *> *v40;
  std::sub_match<const char *> *v41;
  char v42;
  char v43;
  size_t v45;
  std::vector<std::ssub_match>::pointer end;
  unint64_t v47;
  std::regex_iterator<std::__wrap_iter<const char *>, char> __p;
  std::regex_iterator<std::__wrap_iter<const char *>, char> v49;
  std::vector<std::csub_match> v50[2];
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;

  v6 = a2;
  v49.__begin_.__i_ = a2;
  v49.__end_.__i_ = a3;
  v49.__pregex_ = a4;
  v49.__flags_ = match_default;
  memset(&v49.__match_.__prefix_, 0, 17);
  memset(&v49.__match_.__suffix_, 0, 17);
  v49.__match_.__ready_ = 0;
  v49.__match_.__position_start_.__i_ = 0;
  memset(&v49.__match_, 0, 41);
  memset(&__p.__match_.__matches_.__end_cap_, 0, 17);
  memset(&__p.__match_.__unmatched_.matched, 0, 17);
  __p.__match_.__prefix_.matched = 0;
  __p.__match_.__suffix_.first.__i_ = 0;
  memset(&__p, 0, 41);
  std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)a4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)a3, (std::vector<std::csub_match> *)&__p, 0);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v6, (uint64_t)a3, (uint64_t *)&__p, 0);
  if (__p.__begin_.__i_)
    operator delete((void *)__p.__begin_.__i_);
  memset(&__p.__match_.__prefix_, 0, 17);
  memset(&__p.__match_.__suffix_, 0, 17);
  __p.__match_.__ready_ = 0;
  __p.__match_.__position_start_.__i_ = 0;
  memset(&__p.__match_, 0, 41);
  memset(&__p, 0, 28);
  if (!std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v49, &__p))
  {
    v8 = strlen(a5);
    v9 = 0;
    v10 = 0;
    v11 = (unsigned __int8 *)&a5[v8];
    v45 = v8;
    while (1)
    {
      if (std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(&v49, &__p))
      {
        while (v10 != v9)
          std::string::push_back(a1, *v10++);
        goto LABEL_68;
      }
      i = v49.__match_.__prefix_.first.__i_;
      v13 = v49.__match_.__prefix_.second.__i_;
      if (v49.__match_.__prefix_.first.__i_ != v49.__match_.__prefix_.second.__i_)
      {
        v14 = (std::string::value_type *)v49.__match_.__prefix_.first.__i_;
        do
          std::string::push_back(a1, *v14++);
        while (v14 != v13);
      }
      begin = v49.__match_.__matches_.__begin_;
      if (v45)
      {
        v10 = (std::string::value_type *)v49.__match_.__suffix_.first.__i_;
        v9 = v49.__match_.__suffix_.second.__i_;
        end = v49.__match_.__matches_.__end_;
        v47 = 0xAAAAAAAAAAAAAAABLL
            * (((char *)v49.__match_.__matches_.__end_ - (char *)v49.__match_.__matches_.__begin_) >> 3);
        v16 = a5;
        while (1)
        {
          v17 = *(unsigned __int8 *)v16;
          if (v17 == 36)
          {
            v18 = (unsigned __int8 *)(v16 + 1);
            if (v16 + 1 == (const char *)v11)
              goto LABEL_44;
            v19 = (char)*v18;
            v17 = *v18;
            if (v19 > 38)
            {
              if (v19 == 39)
              {
                if (v10 != v9)
                {
                  v23 = v10;
                  do
                    std::string::push_back(a1, *v23++);
                  while (v23 != v9);
                }
                goto LABEL_46;
              }
              if (v19 == 96)
              {
                if (i != v13)
                {
                  v22 = (std::string::value_type *)i;
                  do
                    std::string::push_back(a1, *v22++);
                  while (v22 != v13);
                }
                goto LABEL_46;
              }
LABEL_32:
              if ((v17 - 48) <= 9)
              {
                v24 = *v18 - 48;
                if (v16 + 2 != (const char *)v11)
                {
                  v25 = *((unsigned __int8 *)v16 + 2);
                  v26 = v25 - 48;
                  v27 = v25 + 10 * (int)v24 - 48;
                  if (v26 > 9)
                  {
                    v18 = (unsigned __int8 *)(v16 + 1);
                  }
                  else
                  {
                    v24 = v27;
                    v18 = (unsigned __int8 *)(v16 + 2);
                  }
                }
                v28 = &begin[(int)v24];
                v29 = v47 > v24;
                p_unmatched = &v49.__match_.__unmatched_;
                if (v29)
                  p_unmatched = v28;
                v31 = (std::string::value_type *)p_unmatched->first.__i_;
                p_second = &v28->second;
                if (!v29)
                  p_second = &v49.__match_.__unmatched_.second;
                v33 = (std::string::value_type *)p_second->__i_;
                while (v31 != v33)
                  std::string::push_back(a1, *v31++);
                goto LABEL_46;
              }
LABEL_44:
              LOBYTE(v17) = 36;
              goto LABEL_45;
            }
            if (v19 != 36)
            {
              if (v19 == 38)
              {
                v21 = (std::string::value_type *)begin->first.__i_;
                v20 = (std::string::value_type *)begin->second.__i_;
                while (v21 != v20)
                  std::string::push_back(a1, *v21++);
                goto LABEL_46;
              }
              goto LABEL_32;
            }
            ++v16;
          }
LABEL_45:
          std::string::push_back(a1, v17);
          v18 = (unsigned __int8 *)v16;
LABEL_46:
          v16 = (const char *)(v18 + 1);
          if (v18 + 1 == v11)
          {
            v34 = end;
            goto LABEL_49;
          }
        }
      }
      v10 = (std::string::value_type *)v49.__match_.__suffix_.first.__i_;
      v9 = v49.__match_.__suffix_.second.__i_;
      v34 = v49.__match_.__matches_.__end_;
LABEL_49:
      flags = v49.__flags_;
      v36 = v49.__flags_ | 0x800;
      v49.__flags_ |= 0x800u;
      v37 = v34 == begin;
      v38 = &v49.__match_.__unmatched_;
      if (!v37)
        v38 = begin;
      v39 = &begin->second;
      if (v37)
        v39 = &v49.__match_.__unmatched_.second;
      v40 = (std::sub_match<const char *> *)v39->__i_;
      v41 = (std::sub_match<const char *> *)v49.__end_.__i_;
      if (v38->first.__i_ != v39->__i_)
        goto LABEL_54;
      if ((std::sub_match<const char *> *)v49.__end_.__i_ == v40)
      {
LABEL_63:
        if (begin)
          operator delete(begin);
        v49.__match_.__ready_ = 0;
        memset(&v49.__match_, 0, 41);
        memset(&v49.__match_.__prefix_, 0, 17);
        memset(&v49.__match_.__suffix_, 0, 17);
        v49.__match_.__position_start_.__i_ = 0;
      }
      else
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v55 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        memset(v50, 0, 41);
        v43 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v49.__pregex_, v40, (std::sub_match<const char *> *)v49.__end_.__i_, v50, flags | 0x860);
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v50, 1);
        if (v50[0].__begin_)
          operator delete(v50[0].__begin_);
        if ((v43 & 1) == 0)
        {
          v40 = (std::sub_match<const char *> *)((char *)v40 + 1);
          v36 = v49.__flags_;
          v41 = (std::sub_match<const char *> *)v49.__end_.__i_;
LABEL_54:
          v49.__flags_ = v36 | 0x80;
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = 0;
          v55 = 0;
          v56 = 0;
          v57 = 0;
          v58 = 0;
          memset(v50, 0, 41);
          v42 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)v49.__pregex_, v40, v41, v50, v36 | 0x80);
          std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)&v49.__match_, (uint64_t)v40, (uint64_t)v41, (uint64_t *)v50, (v36 & 0x800) != 0);
          if (v50[0].__begin_)
            operator delete(v50[0].__begin_);
          if ((v42 & 1) == 0)
          {
            begin = v49.__match_.__matches_.__begin_;
            goto LABEL_63;
          }
        }
      }
    }
  }
  while (v6 != a3)
    std::string::push_back(a1, *v6++);
LABEL_68:
  if (v49.__match_.__matches_.__begin_)
    operator delete(v49.__match_.__matches_.__begin_);
}

void sub_1C229F92C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void nlv4_inference_orchestrator::trees::PlyTreeCreator::~PlyTreeCreator(void **this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::trees::TagExpander::~TagExpander(void **this)
{
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::trees::TreeNode::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  __int128 v9;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  *(_OWORD *)(a1 + 72) = *(__int128 *)((char *)a2 + 72);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  v9 = a2[8];
  *(_OWORD *)(a1 + 112) = a2[7];
  *(_OWORD *)(a1 + 128) = v9;
  return a1;
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::logModelOutput(uint64_t a1, const nlv4_inference_orchestrator::trees::TreeNode *a2, __int128 **a3, std::string::size_type a4)
{
  NSObject *v6;
  void **v7;
  __int128 *v8;
  __int128 *v9;
  __int128 v10;
  uint64_t i;
  int v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  char v17;
  NSObject *v18;
  std::string *v19;
  std::string __p;
  std::string v21;
  void *v22[2];
  char v23;
  std::string v24;
  std::string v25;
  std::string buf;
  std::string::size_type v27;
  __int16 v28;
  void **v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  nlv4_inference_orchestrator::trees::printTree((nlv4_inference_orchestrator::trees *)v22, a2);
  v6 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = v22;
    if (v23 < 0)
      v7 = (void **)v22[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"NLv4";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-nlv4]: ";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v27 = a4;
    v28 = 2080;
    v29 = v7;
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "[%s] %s[NLv4IO Ply tree] hypothesis=%zu:\n %s", (uint8_t *)&buf, 0x2Au);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  v9 = *a3;
  v8 = a3[1];
  if (v9 == v8)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "");
  }
  else
  {
    if (*((char *)v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v25.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v24 = __p;
    for (i = (uint64_t)v9 + 24; (__int128 *)i != v8; i += 24)
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&buf, (const void **)&v25.__r_.__value_.__l.__data_, (const void **)&v24.__r_.__value_.__l.__data_);
      v12 = *(char *)(i + 23);
      if (v12 >= 0)
        v13 = (const std::string::value_type *)i;
      else
        v13 = *(const std::string::value_type **)i;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(i + 23);
      else
        v14 = *(_QWORD *)(i + 8);
      v15 = std::string::append(&buf, v13, v14);
      v16 = v15->__r_.__value_.__r.__words[0];
      v30[0] = v15->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      v25.__r_.__value_.__r.__words[0] = v16;
      v25.__r_.__value_.__l.__size_ = v30[0];
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v30 + 7);
      *((_BYTE *)&v25.__r_.__value_.__s + 23) = v17;
    }
    v21 = v25;
    memset(&v25, 0, sizeof(v25));
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v19 = &v21;
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v21.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a4;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v19;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "[NLv4IO Ply tags] hypothesis=%zu:\n %s", (uint8_t *)&buf, 0x16u);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23 < 0)
    operator delete(v22[0]);
}

void sub_1C229FE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a37 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 96);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::~TreeManipulations(void **this)
{
  void **v2;

  v2 = this + 246;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1967) < 0)
    operator delete(this[243]);
  if (*((char *)this + 1943) < 0)
    operator delete(this[240]);
  if (*((char *)this + 1919) < 0)
    operator delete(this[237]);
  if (*((char *)this + 1887) < 0)
    operator delete(this[233]);
  if (*((char *)this + 1863) < 0)
    operator delete(this[230]);
  if (*((char *)this + 1839) < 0)
    operator delete(this[227]);
  if (*((char *)this + 1807) < 0)
    operator delete(this[223]);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::~ReplaceFromPersonRecipientHack(this + 176);
  if (*((char *)this + 1399) < 0)
    operator delete(this[172]);
  if (*((char *)this + 1375) < 0)
    operator delete(this[169]);
  if (*((char *)this + 1351) < 0)
    operator delete(this[166]);
  if (*((_BYTE *)this + 1320) && *((char *)this + 1319) < 0)
    operator delete(this[162]);
  if (*((char *)this + 1295) < 0)
    operator delete(this[159]);
  if (*((char *)this + 1271) < 0)
    operator delete(this[156]);
  if (*((char *)this + 1247) < 0)
    operator delete(this[153]);
  if (*((char *)this + 1223) < 0)
    operator delete(this[150]);
  if (*((char *)this + 1191) < 0)
    operator delete(this[146]);
  v2 = this + 143;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 140;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 137;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 1095) < 0)
    operator delete(this[134]);
  if (*((char *)this + 1071) < 0)
    operator delete(this[131]);
  if (*((char *)this + 1039) < 0)
    operator delete(this[127]);
  v2 = this + 124;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 121;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 118;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 943) < 0)
    operator delete(this[115]);
  if (*((char *)this + 919) < 0)
    operator delete(this[112]);
  if (*((char *)this + 887) < 0)
    operator delete(this[108]);
  v2 = this + 105;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 102;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 807) < 0)
    operator delete(this[98]);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::~DefaultValueMediaPlaybackSpeed(this + 27);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 22));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 17));
  v2 = this + 14;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::trees::printTree(nlv4_inference_orchestrator::trees *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  std::locale::id *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  nlv4_inference_orchestrator::trees::TreeNode *i;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::string v23;
  void *v24[2];
  unsigned __int8 v25;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[7];
  int v29;
  _QWORD v30[4];
  __int128 v31;
  _QWORD v32[11];
  char v33;
  uint64_t v34;
  std::locale v35;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, a2);
  v29 = 0;
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(v30, (__int128 *)&v23);
  v35.__locale_ = (std::locale::__imp *)v28;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v3 = *((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v5 = v3 + v31 - 1;
      v6 = *(_QWORD *)(v30[1] + 8 * (v5 / 0x1A));
      v7 = v5 % 0x1A;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, (const nlv4_inference_orchestrator::trees::TreeNode *)(v6 + 152 * (v5 % 0x1A)));
      v29 = *(_DWORD *)(v6 + 152 * v7 + 144);
      std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(v30);
      for (i = (nlv4_inference_orchestrator::trees::TreeNode *)v28[1];
            i != (nlv4_inference_orchestrator::trees::TreeNode *)v28[0];
            std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(v30, i, &v35))
      {
        i = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)i - 144);
        LODWORD(v35.__locale_) = v29 + 1;
      }
      v9 = (4 * v29);
      if ((_DWORD)v9)
      {
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          --v9;
        }
        while (v9);
      }
      if ((v27 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v11 = v27;
      else
        v11 = (uint64_t)__p[1];
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v10, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v23;
      else
        v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
      if ((v25 & 0x80u) == 0)
        v18 = v24;
      else
        v18 = (void **)v24[0];
      if ((v25 & 0x80u) == 0)
        v19 = v25;
      else
        v19 = (uint64_t)v24[1];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet(&v35, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v35);
      std::ostream::put();
      std::ostream::flush();
      v35.__locale_ = (std::locale::__imp *)v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      if ((char)v27 < 0)
        operator delete(__p[0]);
      if ((char)v25 < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v3 = *((_QWORD *)&v31 + 1);
    }
    while (*((_QWORD *)&v31 + 1));
  }
  std::stringbuf::str();
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)v30);
  v32[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](&v34);
}

void sub_1C22A0518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse>(uint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  _QWORD *v24;

  v4 = operator new();
  result = MEMORY[0x1C3BB844C](v4, a2);
  v6 = (unint64_t)a1[2];
  v7 = a1[1];
  if ((unint64_t)v7 >= v6)
  {
    v9 = v7 - *a1;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v24 = a1 + 2;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v12);
    else
      v13 = 0;
    v14 = (uint64_t *)(v12 + 8 * v9);
    v15 = v12 + 8 * v13;
    v23 = v15;
    *v14 = v4;
    v8 = v14 + 1;
    v22.i64[1] = (uint64_t)(v14 + 1);
    v17 = *a1;
    v16 = a1[1];
    if (v16 == *a1)
    {
      v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        v18 = *--v16;
        *v16 = 0;
        *--v14 = v18;
      }
      while (v16 != v17);
      v19 = *(int64x2_t *)a1;
      v8 = (uint64_t *)v22.i64[1];
      v15 = v23;
    }
    *a1 = v14;
    a1[1] = v8;
    v22 = v19;
    v20 = a1[2];
    a1[2] = (uint64_t *)v15;
    v23 = (unint64_t)v20;
    v21 = v19.i64[0];
    result = std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return result;
}

void sub_1C22A0698(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::runSystemPromptedContentRuntimeHacks(__int128 *a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, __int128 *a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  _BOOL4 v18;
  int v19;
  _BOOL4 v22;
  _QWORD **v23;
  uint64_t v24;
  __int128 *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  _QWORD **v31;
  uint64_t v32;
  __int128 *v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  __int128 *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  __int128 *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD **v46;
  char v47;
  __int128 v48;
  uint64_t v49;

  v12 = *a2;
  if (*a2 == a2[1])
    goto LABEL_14;
  v13 = *(uint64_t **)(v12 + 96);
  if (v13 == *(uint64_t **)(v12 + 104))
    goto LABEL_14;
  v14 = *((char *)v13 + 23);
  if (v14 < 0)
  {
    if (v13[1] != 13)
    {
LABEL_14:
      v18 = 0;
      goto LABEL_15;
    }
    v13 = (uint64_t *)*v13;
  }
  else if (v14 != 13)
  {
    goto LABEL_14;
  }
  v15 = (uint64_t *)*v13;
  v16 = *(uint64_t *)((char *)v13 + 5);
  v18 = v15 == (uint64_t *)0x636E614372657355 && v16 == 0x64656C6C65636E61;
LABEL_15:
  v19 = *((char *)a3 + 23);
  if (v19 < 0)
  {
    if (a3[1] != 5)
    {
LABEL_30:
      v22 = 0;
      goto LABEL_32;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (v19 != 5)
  {
    goto LABEL_30;
  }
  v22 = *(_DWORD *)a3 == 1247764842 && *((_BYTE *)a3 + 4) == 80
     || *(_DWORD *)a3 == 1147102564 && *((_BYTE *)a3 + 4) == 69;
LABEL_32:
  if (!a4[48])
    goto LABEL_51;
  if (v18 && !v22)
    goto LABEL_51;
  v48 = *a5;
  v49 = *((_QWORD *)a5 + 2);
  nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v48, off_1E7BED110, (uint64_t)&v46);
  if (!v47)
    goto LABEL_51;
  if (_os_feature_enabled_impl())
  {
    v23 = v46;
    v46 = 0;
    v24 = *a6;
    *a6 = (uint64_t)v23;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    v25 = (__int128 *)((char *)a1 + 296);
    v26 = a7[1];
    if (v26 >= a7[2])
    {
      v27 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v25);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v25);
      v27 = v26 + 24;
    }
    a7[1] = v27;
  }
  else
  {
    v28 = *a6;
    v29 = *(_QWORD *)(*a6 + 8);
    if (*(_QWORD *)(*a6 + 16) == v29)
    {
      v31 = v46;
    }
    else
    {
      v30 = *(double *)(*(_QWORD *)v29 + 48);
      v31 = v46;
      v32 = *v46[1];
      *(_BYTE *)(v32 + 88) |= 2u;
      *(double *)(v32 + 48) = v30 * 0.9;
      v28 = *a6;
    }
    PB::PtrVector<sirinluexternal::UserParse>::emplace_back<sirinluexternal::UserParse>((uint64_t **)(v28 + 8), *v31[1]);
    v33 = a1 + 20;
    v34 = a7[1];
    if (v34 >= a7[2])
    {
      v35 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v33);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v33);
      v35 = v34 + 24;
    }
    a7[1] = v35;
    if (!v47)
      goto LABEL_51;
  }
  if (v46)
    ((void (*)(_QWORD **))(*v46)[1])(v46);
LABEL_51:
  if (a4[49])
    v36 = v18;
  else
    v36 = 1;
  if ((v36 & 1) == 0)
  {
    v48 = *a5;
    v49 = *((_QWORD *)a5 + 2);
    nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v48, off_1E7BED128, (uint64_t)&v46);
    if (v47)
    {
      v37 = a1 + 23;
      v38 = a7[1];
      if (v38 >= a7[2])
      {
        v39 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v37);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v37);
        v39 = v38 + 24;
      }
      a7[1] = v39;
      v40 = *a6;
      *a6 = (uint64_t)v46;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  if (a4[50])
    v41 = v18;
  else
    v41 = 1;
  if ((v41 & 1) == 0)
  {
    v48 = *a5;
    v49 = *((_QWORD *)a5 + 2);
    nlv4_inference_orchestrator::post_processing::nlv4_response_manipulations::internal::runGenericSystemPromptedContentHack((_QWORD **)&v48, off_1E7BED140, (uint64_t)&v46);
    if (v47)
    {
      v42 = (__int128 *)((char *)a1 + 392);
      v43 = a7[1];
      if (v43 >= a7[2])
      {
        v44 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a7, v42);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a7, v42);
        v44 = v43 + 24;
      }
      a7[1] = v44;
      v45 = *a6;
      *a6 = (uint64_t)v46;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    }
  }
}

void sub_1C22A0A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::insertExecutedHandcraftedRulesIntoFeatureStore(uint64_t *a1, uint64_t a2)
{
  BOOL inserted;
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  const char *v8;
  uint8_t v9[16];

  if (!_os_feature_enabled_impl())
  {
    v7 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    *(_WORD *)v9 = 0;
    v8 = "Skipping insertion of NLv4 executed handcrafted rules into FeatureStore because SNLPFeatureStoreEnabled feature"
         " flag is disabled";
LABEL_11:
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, v8, v9, 2u);
    goto LABEL_12;
  }
  if (!*(_BYTE *)(a2 + 24))
  {
    v7 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      goto LABEL_12;
    *(_WORD *)v9 = 0;
    v8 = "nlu_request_id not found so skipping insertion of executed handcrafted rules into FeatureStore";
    goto LABEL_11;
  }
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getExecutedHandcraftedRules(a1, (sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)v9);
  if (!*(_BYTE *)(a2 + 24))
    std::__throw_bad_optional_access[abi:ne180100]();
  inserted = snlp::common::logging::feature_store_utilities::insertNLv4ExecutedHandcraftedRulesToFeatureStore((uint64_t)v9, (uint64_t *)a2);
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)v9);
  if (inserted)
  {
    v5 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      return;
    *(_WORD *)v9 = 0;
    v6 = "Successfully inserted NLv4 executed handcrafted rules into FeatureStore";
    goto LABEL_14;
  }
LABEL_12:
  v5 = SNLPOSLoggerForCategory(1);
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    return;
  *(_WORD *)v9 = 0;
  v6 = "Unable to insert NLv4 executed handcrafted rules into FeatureStore";
LABEL_14:
  _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, v6, v9, 2u);
}

void sub_1C22A0BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules((sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<float,std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 32;
        v7 = (void **)(v4 - 24);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<std::pair<float,nlv4_inference_orchestrator::trees::TreeNode>>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 96);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getExecutedHandcraftedRules(uint64_t *a1@<X0>, sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;

  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&v12);
  v4 = *a1;
  v5 = a1[1];
  if (*a1 != v5)
  {
    v6 = v14;
    do
    {
      if ((unint64_t)v6 >= v15)
      {
        v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v13, (__int128 *)v4);
      }
      else
      {
        if (*(char *)(v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
        }
        else
        {
          v7 = *(_OWORD *)v4;
          v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 16);
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
        }
        ++v6;
      }
      v14 = v6;
      v4 += 24;
    }
    while (v4 != v5);
  }
  v8 = (sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *)sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::NLv4ExecutedHandcraftedRules(a2);
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::makeRules(v8);
  v9 = operator new();
  v10 = MEMORY[0x1C3BB8680](v9, &v12);
  v11 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::~SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&v12);
}

void sub_1C22A0E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules *v11;

  sirinluinternalsnlp_intermediate::NLv4ExecutedHandcraftedRules::~NLv4ExecutedHandcraftedRules(v11);
  sirinluinternalsnlp_intermediate::SNLPHandcraftedRules::~SNLPHandcraftedRules((sirinluinternalsnlp_intermediate::SNLPHandcraftedRules *)&a9);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v10 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v11 = a2[3];
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(v8 + 48) = v11;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_OWORD *)(v8 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(v8 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  result = (__n128)a2[7];
  v13 = a2[8];
  *(__n128 *)(v8 + 112) = result;
  *(_OWORD *)(v8 + 128) = v13;
  *(_DWORD *)(v8 + 144) = *((_DWORD *)a2 + 36);
  ++a1[5];
  return result;
}

void std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](*(_QWORD *)(a1[1] + 8 * (v2 / 0x1A)) + 152 * (v2 % 0x1A));
  v4 = a1[1];
  v3 = a1[2];
  if (v3 == v4)
    v5 = 0;
  else
    v5 = 26 * ((v3 - v4) >> 3) - 1;
  v6 = a1[4];
  v7 = a1[5] - 1;
  a1[5] = v7;
  if ((unint64_t)(v5 - (v7 + v6)) >= 0x34)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

std::string *std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(_QWORD *a1, nlv4_inference_orchestrator::trees::TreeNode *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::string *result;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 26 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (std::string *)(*(_QWORD *)(v6 + 8 * (v9 / 0x1A)) + 152 * (v9 % 0x1A));
  }
  result = nlv4_inference_orchestrator::trees::TreeNode::TreeNode(v10, a2);
  LODWORD(result[6].__r_.__value_.__l.__data_) = *a3;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = &v2[v4 / 0x1A];
    v6 = (uint64_t)*v5 + 152 * (v4 % 0x1A);
    v7 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v4) / 0x1A] + 152 * ((*(_QWORD *)(a1 + 40) + v4) % 0x1A);
    if (v6 != v7)
    {
      do
      {
        std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](v6);
        v6 += 152;
        if (v6 - (_QWORD)*v5 == 3952)
        {
          v8 = (uint64_t)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != v7);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 13;
    goto LABEL_14;
  }
  if (v10 == 2)
  {
    v11 = 26;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v11;
  }
  if (v2 != v3)
  {
    do
    {
      v12 = *v2++;
      operator delete(v12);
    }
    while (v2 != v3);
    v14 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13 != v14)
      *(_QWORD *)(a1 + 16) = v13 + ((v14 - v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0xF70uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0xF70uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1C22A1714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::~ReplaceFromPersonRecipientHack(void **this)
{
  void **v2;

  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  if (*((char *)this + 303) < 0)
    operator delete(this[35]);
  if (*((char *)this + 279) < 0)
    operator delete(this[32]);
  if (*((char *)this + 255) < 0)
    operator delete(this[29]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<unsigned int,std::string>>>>::~__hash_table((uint64_t)(this + 6));
  v2 = this + 3;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::~DefaultValueMediaPlaybackSpeed(void **this)
{
  void **v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 66));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 61));
  if (*((char *)this + 487) < 0)
    operator delete(this[58]);
  if (*((char *)this + 463) < 0)
    operator delete(this[55]);
  if (*((char *)this + 439) < 0)
    operator delete(this[52]);
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  if (*((char *)this + 295) < 0)
    operator delete(this[34]);
  if (*((char *)this + 271) < 0)
    operator delete(this[31]);
  if (*((char *)this + 247) < 0)
    operator delete(this[28]);
  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this + 3;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>(uint64_t a1)
{
  void **v2;
  void **v3;

  v2 = (void **)(a1 + 24);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = v2;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry const*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;
  std::string *v11;
  const std::string::value_type **v12;
  __int128 v13;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v8 = a4 + v7;
      v9 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(a4 + v7), *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v10 = *v9;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)v9 + 2);
        *(_OWORD *)v8 = v10;
      }
      v11 = (std::string *)(a4 + v7 + 24);
      v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(_QWORD *)(a2 + v7 + 32));
      }
      else
      {
        v13 = *(_OWORD *)v12;
        *(_QWORD *)(a4 + v7 + 40) = *(_QWORD *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      v7 += 48;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1C22A1AEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  while (v2 != v1)
  {
    v2 -= 48;
    std::allocator<snlp::ssu::app::SSUAppParameter>::destroy[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>::~pair(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v3 = (void **)a1;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>,std::string>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  std::string *v12;
  const std::string::value_type **v13;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v8 = (char *)operator new(48 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[48 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v8[v9], *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)v10 = *(_OWORD *)v11;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v11 + 16);
        }
        v12 = (std::string *)&v8[v9 + 24];
        v13 = (const std::string::value_type **)(a2 + v9 + 24);
        if (*(char *)(a2 + v9 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(v12, *v13, *(_QWORD *)(a2 + v9 + 32));
        }
        else
        {
          *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)v13;
          *(_QWORD *)&v8[v9 + 40] = *(_QWORD *)(a2 + v9 + 40);
        }
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_1C22A1CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL std::regex_iterator<std::__wrap_iter<char const*>,char,std::regex_traits<char>>::operator==(const std::regex_iterator<std::__wrap_iter<const char *>, char> *this, const std::regex_iterator<std::__wrap_iter<const char *>, char> *__x)
{
  std::vector<std::ssub_match>::pointer begin;
  std::sub_match<std::__wrap_iter<const char *>> *end;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *p_match;
  std::vector<std::ssub_match>::pointer v7;
  std::sub_match<std::__wrap_iter<const char *>> *v8;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::value_type *v9;
  BOOL v10;

  p_match = &this->__match_;
  begin = this->__match_.__matches_.__begin_;
  end = p_match->__matches_.__end_;
  v9 = &__x->__match_;
  v7 = __x->__match_.__matches_.__begin_;
  v8 = v9->__matches_.__end_;
  v10 = v8 == v7 && end == begin;
  if (end != begin && v8 != v7)
    return this->__begin_.__i_ == __x->__begin_.__i_
        && this->__end_.__i_ == __x->__end_.__i_
        && this->__pregex_ == __x->__pregex_
        && this->__flags_ == __x->__flags_
        && std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100]((uint64_t)begin, (uint64_t)v7) == 0;
  return v10;
}

uint64_t std::sub_match<std::__wrap_iter<char const*>>::compare[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void **v5;
  char v6;
  size_t v7;
  const void *p_p;
  size_t v9;
  void **v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  void **v15;
  size_t v16;
  uint64_t v17;
  void *__p;
  size_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, *(char **)a1, *(char **)(a1 + 8), *(_QWORD *)(a1 + 8) - *(_QWORD *)a1);
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
  }
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v15, *(char **)a2, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    v3 = HIBYTE(v17);
    v5 = v15;
    v4 = v16;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v3 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
  }
  v6 = HIBYTE(v20);
  if (v20 >= 0)
    v7 = HIBYTE(v20);
  else
    v7 = v19;
  if (v20 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v3 & 0x80u) == 0)
    v9 = v3;
  else
    v9 = v4;
  if ((v3 & 0x80u) == 0)
    v10 = (void **)&v15;
  else
    v10 = v5;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(p_p, v10, v11);
  if ((v3 & 0x80) != 0)
  {
    operator delete(v5);
    if ((v20 & 0x8000000000000000) == 0)
      goto LABEL_24;
  }
  else if ((v6 & 0x80) == 0)
  {
    goto LABEL_24;
  }
  operator delete(__p);
LABEL_24:
  v13 = v9 < v7;
  if (v7 < v9)
    v13 = -1;
  if (v12)
    return v12;
  else
    return v13;
}

void sub_1C22A1EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  std::__owns_one_state<char> *v8;
  unsigned int v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  std::__owns_one_state<char> *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  std::__owns_one_state<char> *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E7BEC778;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(a1 + 40, (uint64_t)v7);
  v8 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v9 > 0x3F)
  {
    switch(v9)
    {
      case 0x40u:
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v16 = (unsigned __int8 *)memchr(a2, 10, a3 - a2);
        if (v16)
          v17 = v16;
        else
          v17 = (unsigned __int8 *)a3;
        if (v17 == (unsigned __int8 *)a2)
        {
          v18 = (_QWORD *)operator new();
          v19 = *(_QWORD *)(a1 + 56);
          v20 = *(_QWORD *)(v19 + 8);
          v18[1] = v20;
          *(_QWORD *)(v19 + 8) = v18;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, v17);
        }
        if (v17 != (unsigned __int8 *)a3)
          ++v17;
        while (v17 != (unsigned __int8 *)a3)
        {
          v27 = (unsigned __int8 *)memchr(v17, 10, a3 - (char *)v17);
          if (v27)
            v28 = v27;
          else
            v28 = (unsigned __int8 *)a3;
          v29 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v28 == v17)
          {
            v30 = (_QWORD *)operator new();
            v31 = *(_QWORD *)(a1 + 56);
            v32 = *(_QWORD *)(v31 + 8);
            v30[1] = v32;
            *(_QWORD *)(v31 + 8) = v30;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)v17, v28);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v29);
          if (v28 == (unsigned __int8 *)a3)
            v17 = v28;
          else
            v17 = v28 + 1;
        }
        break;
      case 0x100u:
        v10 = (char *)memchr(a2, 10, a3 - a2);
        if (v10)
          v11 = v10;
        else
          v11 = a3;
        if (v11 == a2)
        {
          v12 = (_QWORD *)operator new();
          v13 = *(_QWORD *)(a1 + 56);
          v14 = *(_QWORD *)(v13 + 8);
          v12[1] = v14;
          *(_QWORD *)(v13 + 8) = v12;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, v11);
        }
        if (v11 != a3)
          ++v11;
        while (v11 != a3)
        {
          v21 = (char *)memchr(v11, 10, a3 - v11);
          if (v21)
            v22 = v21;
          else
            v22 = a3;
          v23 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v22 == v11)
          {
            v24 = (_QWORD *)operator new();
            v25 = *(_QWORD *)(a1 + 56);
            v26 = *(_QWORD *)(v25 + 8);
            v24[1] = v26;
            *(_QWORD *)(v25 + 8) = v24;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11, v22);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v8, v23);
          if (v22 == a3)
            v11 = v22;
          else
            v11 = v22 + 1;
        }
        break;
      default:
        goto LABEL_49;
    }
    return (unsigned __int8 *)a3;
  }
  else if (v9)
  {
    if (v9 != 16)
    {
      if (v9 != 32)
LABEL_49:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, a2, (unsigned __int8 *)a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
}

void sub_1C22A2224(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != a3)
  {
    if (*v8 != 124)
      return v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, v14, a3);
    }
    while (v8 != v14);
    if (v13 == v8)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == (char *)a3)
    return (unsigned __int8 *)a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E7BECA10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (char *)v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v10 != v3);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E7BECA70;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)v8 + 1, a3);
    if (v8 + 1 == v10)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (char *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  std::__owns_one_state<char> *v6;
  int v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 *v14;
  _BOOL4 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  v6 = *(std::__owns_one_state<char> **)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 == a3)
  {
LABEL_24:
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = (v8 - 36);
  if (v9 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v9 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, *a2);
LABEL_34:
      v14 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v10 = a2 + 1;
  if (a2 + 1 == a3)
    goto LABEL_21;
  v11 = *a2;
  if (v11 != 92)
    goto LABEL_22;
  v12 = *v10;
  v13 = *v10;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v13);
    v14 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
  {
    v14 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v10, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = (unsigned __int8 *)&a2[v16];
  }
  if (v14 == (unsigned __int8 *)a2)
  {
LABEL_21:
    v11 = *a2;
LABEL_22:
    if (v11 == 46)
    {
      v17 = (_QWORD *)operator new();
      v18 = *(_QWORD *)(a1 + 56);
      v19 = *(_QWORD *)(v18 + 8);
      *v17 = &off_1E7BEC7D8;
      v17[1] = v19;
      *(_QWORD *)(v18 + 8) = v17;
LABEL_33:
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      goto LABEL_34;
    }
    goto LABEL_24;
  }
LABEL_25:
  if (v14 != (unsigned __int8 *)a2 || v14 == (unsigned __int8 *)a3)
    goto LABEL_38;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7BECA70;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression((std::basic_regex<char> *)a1);
      v26 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression((std::basic_regex<char> *)a1, v26);
      --*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)(v28 + 1);
LABEL_38:
      if (v14 != (unsigned __int8 *)a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v14, (unsigned __int8 *)a3, v6, (v7 + 1), (*(_DWORD *)(a1 + 28) + 1));
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_QWORD *)(v23 + 8);
      v25 = &off_1E7BECA10;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      *(_QWORD *)(v23 + 8) = v21;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    v13 = a2;
    if (v12 != 123)
      return v13;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  v13 = a2;
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  char *j;
  char *v14;
  int v15;
  char *v16;
  int v17;
  std::string *v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  unint64_t i;
  std::string::size_type size;
  int v24;
  std::string::size_type v25;
  std::string *p_p;
  std::string *v27;
  std::regex_traits<char>::char_class_type classname;
  char v29;
  std::string::size_type v30;
  std::string *v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string *v35;
  std::string::size_type v36;
  std::string v38;
  std::string v39;
  void *v40[2];
  uint64_t v41;
  std::string __p;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_136;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_136;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_136;
    v8 = a3 - 4;
    while (1)
    {
      v9 = (char *)v5;
      if ((char *)v5 == a3)
      {
        v11 = a3;
        goto LABEL_114;
      }
      v10 = *(unsigned __int8 *)v5;
      v11 = (char *)v5;
      if (v10 != 93)
        break;
LABEL_114:
      v5 = (uint64_t)v11;
LABEL_115:
      if (v9 == (char *)v5)
      {
        if (v9 != a3)
        {
          if (*v9 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v9;
          }
          if (v9 != a3 && *v9 == 93)
            return v9 + 1;
        }
LABEL_136:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
    memset(&v39, 0, sizeof(v39));
    if ((char *)(v5 + 1) != a3 && v10 == 91)
    {
      v12 = *(unsigned __int8 *)(v5 + 1);
      switch(v12)
      {
        case '.':
          v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, (char *)(v5 + 2), a3, (uint64_t)&v39);
          v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v39.__r_.__value_.__l.__size_;
          if (size)
          {
LABEL_34:
            if (v11 != a3)
            {
              v17 = *v11;
              if (v17 != 93)
              {
                v19 = v11 + 1;
                if (v11 + 1 != a3 && v17 == 45 && *v19 != 93)
                {
                  memset(&__p, 0, sizeof(__p));
                  v20 = v11 + 2;
                  if (v11 + 2 != a3 && *v19 == 91 && *v20 == 46)
                  {
                    v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v11 + 3, a3, (uint64_t)&__p);
                    goto LABEL_120;
                  }
                  if ((v5 | 0x40) == 0x40)
                  {
                    LODWORD(v19) = *v19;
                    if ((_DWORD)v19 == 92)
                    {
                      if ((_DWORD)v5)
                        v21 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v11 + 2, a3, &__p);
                      else
                        v21 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v11 + 2), (std::basic_regex<char> *)a3, &__p, v7);
LABEL_120:
                      v20 = v21;
LABEL_121:
                      *(_OWORD *)v40 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                      v36 = v39.__r_.__value_.__r.__words[2];
                      v38 = __p;
                      memset(&v39, 0, sizeof(v39));
                      v41 = v36;
                      memset(&__p, 0, sizeof(__p));
                      std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v7, (char *)v40, (char *)&v38);
                      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v38.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v41) < 0)
                        operator delete(v40[0]);
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__p.__r_.__value_.__l.__data_);
                      v29 = 1;
LABEL_111:
                      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v39.__r_.__value_.__l.__data_);
                      v11 = v20;
                      if ((v29 & 1) == 0)
                        goto LABEL_115;
                      goto LABEL_114;
                    }
                  }
                  else
                  {
                    LOBYTE(v19) = *v19;
                  }
                  std::string::operator=(&__p, (std::string::value_type)v19);
                  goto LABEL_121;
                }
              }
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v39.__r_.__value_.__l.__size_)
              {
                if (v39.__r_.__value_.__l.__size_ == 1)
                {
                  v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_43:
                  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0]);
LABEL_80:
                  v29 = 1;
                  v20 = v11;
                  goto LABEL_111;
                }
                v18 = (std::string *)v39.__r_.__value_.__r.__words[0];
LABEL_79:
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v18->__r_.__value_.__s.__data_[0], v18->__r_.__value_.__s.__data_[1]);
                goto LABEL_80;
              }
              operator delete(v39.__r_.__value_.__l.__data_);
            }
            else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
            {
              v18 = &v39;
              if (HIBYTE(v39.__r_.__value_.__r.__words[2]) == 1)
                goto LABEL_43;
              goto LABEL_79;
            }
            goto LABEL_114;
          }
LABEL_28:
          if ((v5 | 0x40) == 0x40)
          {
            v15 = *v11;
            if (v15 == 92)
            {
              v16 = v11 + 1;
              if ((_DWORD)v5)
              {
                v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v16, a3, &v39);
              }
              else
              {
                v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v16, (std::basic_regex<char> *)a3, &v39, v7);
                v5 = 0;
              }
              goto LABEL_34;
            }
          }
          else
          {
            LOBYTE(v15) = *v11;
          }
          std::string::operator=(&v39, v15);
          ++v11;
          goto LABEL_34;
        case ':':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (i = 0; ; ++i)
          {
            v14 = (char *)(v5 + i + 2);
            if (*v14 == 58 && *(_BYTE *)(v5 + i + 3) == 93)
              break;
            if (&v8[-v5] == (char *)i)
              goto LABEL_135;
          }
          if (v14 == a3)
LABEL_135:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
          v24 = *(_DWORD *)(a1 + 24);
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__p, (char *)(v5 + 2), (char *)(v5 + i + 2), i);
          v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v25 = __p.__r_.__value_.__l.__size_;
          (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), p_p, (char *)p_p + v25);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = &__p;
          else
            v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          classname = std::__get_classname((const char *)v27, v24 & 1);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (!classname)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
          v29 = 0;
          *(_DWORD *)(v7 + 160) |= classname;
          goto LABEL_110;
        case '=':
          if ((uint64_t)&a3[-v5 - 2] < 2)
            goto LABEL_135;
          for (j = 0; ; ++j)
          {
            v14 = &j[v5 + 2];
            if (*v14 == 61 && j[v5 + 3] == 93)
              break;
            if (&v8[-v5] == j)
              goto LABEL_135;
          }
          if (v14 == a3)
            goto LABEL_135;
          std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&__p, a1, (char *)(v5 + 2), &j[v5 + 2]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            v30 = __p.__r_.__value_.__l.__size_;
            if (!__p.__r_.__value_.__l.__size_)
LABEL_137:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
            v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
              goto LABEL_137;
            v31 = &__p;
          }
          std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>((uint64_t)v40, a1, (char *)v31, (char *)v31 + v30);
          v32 = (void *)HIBYTE(v41);
          if (v41 < 0)
            v32 = v40[1];
          if (v32)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100]((uint64_t *)v7, (__int128 *)v40);
          }
          else
          {
            v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v33 = __p.__r_.__value_.__l.__size_;
            if (v33 == 2)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v35 = &__p;
              else
                v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, v35->__r_.__value_.__s.__data_[0], v35->__r_.__value_.__s.__data_[1]);
            }
            else
            {
              if (v33 != 1)
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v34 = &__p;
              else
                v34 = (std::string *)__p.__r_.__value_.__r.__words[0];
              std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, v34->__r_.__value_.__s.__data_[0]);
            }
          }
          if (SHIBYTE(v41) < 0)
            operator delete(v40[0]);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = 0;
LABEL_110:
          v5 = (uint64_t)(v14 + 2);
          v20 = v9;
          goto LABEL_111;
      }
    }
    v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
    v11 = v9;
    goto LABEL_28;
  }
  return a2;
}

void sub_1C22A320C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  char *v5;
  char *v6;
  char *i;
  int v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  unint64_t v13;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  v5 = a3 - 2;
  v6 = a2;
  for (i = a2; ; v6 = i)
  {
    v8 = *i++;
    if (v8 == 46 && *i == 93)
      break;
    if (a2 == v5)
      goto LABEL_15;
    --v5;
  }
  if (v6 == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>((uint64_t)&v12, a1, a2, v6);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v12;
  v9 = v13;
  *(_QWORD *)(a4 + 16) = v13;
  v10 = HIBYTE(v9);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a4 + 8);
  if (v10 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  int locale_low;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (this == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119)
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        v10 = a4;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    v9 = 0;
    v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  int v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  return v8;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  std::basic_regex<char> *v4;
  int locale_low;
  std::string *v6;
  std::basic_regex<char>::value_type locale;
  int v8;
  int v9;
  char v10;
  char v11;
  char v12;
  char v13;
  std::string::value_type v14;
  unsigned int v15;
  std::string::value_type v16;
  uint64_t v17;

  v4 = this;
  if (this != a3)
  {
    locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            v6 = a4;
            locale = 10;
            goto LABEL_50;
          }
          locale = 10;
          goto LABEL_59;
        case 'r':
          if (a4)
          {
            v6 = a4;
            locale = 13;
            goto LABEL_50;
          }
          locale = 13;
          goto LABEL_59;
        case 't':
          if (a4)
          {
            v6 = a4;
            locale = 9;
            goto LABEL_50;
          }
          locale = 9;
          goto LABEL_59;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6)
                  goto LABEL_23;
              }
            }
          }
          goto LABEL_64;
        case 'v':
          if (a4)
          {
            v6 = a4;
            locale = 11;
            goto LABEL_50;
          }
          locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3)
            goto LABEL_64;
          v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_28;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u)
            goto LABEL_64;
          v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3)
            goto LABEL_64;
          v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_33;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u)
            goto LABEL_64;
          v13 = -87;
LABEL_33:
          v14 = v13 + v12 + 16 * (v11 + v10);
          if (a4)
            std::string::operator=(a4, v14);
          else
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        v6 = a4;
        locale = 0;
        goto LABEL_50;
      }
      locale = 0;
LABEL_59:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          v6 = a4;
          locale = 12;
LABEL_50:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        locale = 12;
        goto LABEL_59;
      }
LABEL_45:
      v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if ((_DWORD)v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          v6 = a4;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3)
      goto LABEL_64;
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65)
      goto LABEL_64;
    v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v15 >= 0x5B && (v15 - 97) > 0x19u)
      goto LABEL_64;
    v16 = v15 & 0x1F;
    if (a4)
      std::string::operator=(a4, v16);
    else
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1C22A3AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, unsigned __int8 *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v11;
  std::__node<char> *v12;
  std::__owns_one_state<char> *v13;
  std::__node<char> *first;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  _BOOL4 v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  size_t v28;
  size_t v29;
  std::basic_regex<char> *v30;
  int v31;
  int v32;

  v3 = a2;
  if (a2 == (char *)a3)
    return v3;
  end = a1->__end_;
  marked_count = a1->__marked_count_;
  v9 = (unsigned __int8 *)(a2 + 1);
  v8 = *a2;
  if ((a2 + 1 != (char *)a3 || v8 != 36)
    && ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0))
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
    goto LABEL_13;
  }
  v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(a1, a2, a3);
  if (v11 == v3)
  {
    if (*v3 == 46)
    {
      v12 = (std::__node<char> *)operator new();
      v13 = a1->__end_;
      first = v13->__first_;
      v12->__vftable = (std::__node<char>_vtbl *)&off_1E7BEC7D8;
      v12[1].__vftable = (std::__node<char>_vtbl *)first;
      v13->__first_ = v12;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
LABEL_13:
      v11 = v3 + 1;
      goto LABEL_14;
    }
    v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v3, (char *)a3);
  }
LABEL_14:
  if (v3 == v11 && v9 != a3 && *v3 == 92)
  {
    if (2 * (v3[1] == 40))
    {
      v15 = (uint64_t)&v3[2 * (v3[1] == 40)];
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      v16 = a1->__marked_count_;
      do
      {
        v17 = (unsigned __int8 *)v15;
        v15 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, v15, a3);
      }
      while (v17 != (unsigned __int8 *)v15);
      if (v17 == a3 || v17 + 1 == a3 || *v17 != 92 || v17[1] != 41)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      v11 = (char *)(v17 + 2);
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v16);
    }
    else
    {
      v18 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v3[1]);
      v19 = 2;
      if (!v18)
        v19 = 0;
      v11 = &v3[v19];
    }
  }
  if (v11 != v3)
  {
    if (v11 == (char *)a3)
      return (char *)a3;
    v20 = a1->__marked_count_ + 1;
    v21 = *v11;
    if (v21 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
      return ++v11;
    }
    if (v11 + 1 == (char *)a3 || v21 != 92 || v11[1] != 123)
      return v11;
    v23 = (unsigned __int8 *)(v11 + 2);
    v32 = 0;
    v24 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v23, a3, &v32);
    if (v23 == v24)
LABEL_47:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
    if (v24 != a3)
    {
      v25 = v24 + 1;
      v26 = *v24;
      if (v26 == 44)
      {
        v31 = -1;
        v27 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v24 + 1, a3, &v31);
        if (v27 != a3 && v27 + 1 != a3 && *v27 == 92 && v27[1] == 125)
        {
          v29 = v31;
          v28 = v32;
          if (v31 == -1)
          {
            v29 = -1;
          }
          else if (v31 < v32)
          {
            goto LABEL_47;
          }
          v11 = (char *)&v27[2 * (v27[1] == 125)];
          v30 = a1;
LABEL_54:
          std::basic_regex<char,std::regex_traits<char>>::__push_loop(v30, v28, v29, end, marked_count + 1, v20, 1);
          return v11;
        }
      }
      else if (v25 != a3 && v26 == 92 && *v25 == 125)
      {
        v11 = (char *)(v24 + 2);
        v28 = v32;
        v30 = a1;
        v29 = v32;
        goto LABEL_54;
      }
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v6;
  unsigned __int8 *v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v11;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  std::__owns_one_state<char> **p_end;
  unsigned int v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  char *v32;
  int v33;
  unsigned int v34;
  std::__node<char> *v35;
  std::__owns_one_state<char> *v36;
  std::__node<char> *v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  std::basic_regex<char> *v43;
  BOOL v44;
  std::basic_regex<char> *v45;
  BOOL v46;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v48;
  std::__bracket_expression<char, std::regex_traits<char>> *v49;
  std::basic_regex<char> *v50;
  std::basic_regex<char> *v51;
  BOOL v52;
  std::basic_regex<char> v54;

  if (a2 == a3)
    return a2;
  v6 = (char)*a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == a3)
        goto LABEL_33;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_33;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(a1, v22);
      v20 = 2;
      return &a2[v20];
    }
    if (v6 != 94)
      goto LABEL_33;
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7BECA10;
LABEL_22:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    v20 = 1;
    return &a2[v20];
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (a1->__flags_ & 0x5F0) == 1024;
    end = a1->__end_;
    first = end->__first_;
    v19 = &off_1E7BECA70;
    goto LABEL_22;
  }
  v8 = v6 == 40;
  v7 = a2 + 1;
  v8 = !v8 || v7 == a3;
  if (!v8)
  {
    v8 = *v7 == 63;
    v9 = a2 + 2;
    if (v8 && v9 != a3)
    {
      v11 = (char)*v9;
      if (v11 == 33)
      {
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        marked_count = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 1, a1->__marked_count_);
        a1->__marked_count_ += marked_count;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v11 != 61)
          goto LABEL_33;
        std::regex_traits<char>::regex_traits(&v54.__traits_);
        memset(&v54.__flags_, 0, 40);
        v54.__flags_ = a1->__flags_;
        v12 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v54, a2 + 3, a3);
        v13 = v54.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(a1, &v54, 0, a1->__marked_count_);
        a1->__marked_count_ += v13;
        if (v12 == a3 || *v12 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      v14 = v12 + 1;
      std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&v54.__start_);
      std::locale::~locale(&v54.__traits_.__loc_);
      if (v12 + 1 != a2)
        return v14;
    }
  }
LABEL_33:
  p_end = &a1->__end_;
  v24 = a1->__end_;
  v26 = a1->__marked_count_;
  v27 = (char)*a2;
  v28 = *a2;
  if (v27 <= 91)
  {
    v29 = a2;
    switch(*a2)
    {
      case '$':
      case ')':
        goto LABEL_91;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_56;
      case '(':
        if (a2 + 1 == a3)
          goto LABEL_94;
        if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
        {
          ++a1->__open_count_;
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 3, a3);
          if (v30 != a3 && *v30 == 41)
          {
            --a1->__open_count_;
            v29 = v30 + 1;
            goto LABEL_91;
          }
LABEL_94:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v38 = a1->__marked_count_;
        ++a1->__open_count_;
        v39 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
        if (v39 == a3)
          goto LABEL_94;
        v40 = v39;
        if (*v39 != 41)
          goto LABEL_94;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v38);
        --a1->__open_count_;
        v29 = v40 + 1;
        goto LABEL_91;
      case '*':
      case '+':
        goto LABEL_58;
      case '.':
        v35 = (std::__node<char> *)operator new();
        v36 = *p_end;
        v37 = (*p_end)->__first_;
        v35->__vftable = (std::__node<char>_vtbl *)&off_1E7BECDE0;
        v35[1].__vftable = (std::__node<char>_vtbl *)v37;
        v36->__first_ = v35;
        *p_end = (std::__owns_one_state<char> *)(*p_end)->__first_;
        v29 = a2 + 1;
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
      default:
        if (v27 == 91)
        {
          v29 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
          goto LABEL_91;
        }
        if (v27 != 63)
          goto LABEL_56;
        goto LABEL_58;
    }
  }
  v31 = (v27 - 92);
  if (v31 > 0x21)
    goto LABEL_56;
  v29 = a2;
  if (((1 << v31) & 0x300000006) != 0)
    goto LABEL_91;
  if (v31)
  {
    if (v31 == 31)
LABEL_58:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
LABEL_56:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v28);
    v29 = a2 + 1;
    goto LABEL_91;
  }
  v29 = a2;
  if (v28 != 92)
    goto LABEL_91;
  v32 = (char *)(a2 + 1);
  if (a2 + 1 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v33 = *v32;
  v34 = v33 - 48;
  if (v33 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v34);
LABEL_90:
    v29 = a2 + 2;
    goto LABEL_91;
  }
  if ((v33 - 49) <= 8)
  {
    v29 = a2 + 2;
    if (a2 + 2 == a3)
    {
      v29 = a3;
    }
    else
    {
      while (1)
      {
        v41 = *v29;
        if ((v41 - 48) > 9)
          break;
        if (v34 >= 0x19999999)
          goto LABEL_95;
        ++v29;
        v34 = v41 + 10 * v34 - 48;
        if (v29 == a3)
        {
          v29 = a3;
          break;
        }
      }
      if (!v34)
LABEL_95:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
    }
    if (v34 > v26)
      goto LABEL_95;
    std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v34);
    if (v32 != (char *)v29)
      goto LABEL_91;
  }
  v42 = *v32;
  if (v42 > 99)
  {
    if (v42 == 119)
    {
      v43 = a1;
      v44 = 0;
      goto LABEL_82;
    }
    if (v42 == 115)
    {
      v51 = a1;
      v52 = 0;
      goto LABEL_88;
    }
    if (v42 != 100)
      goto LABEL_83;
    v45 = a1;
    v46 = 0;
LABEL_80:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v45, v46);
    v48 = started->__mask_ | 0x400;
LABEL_89:
    started->__mask_ = v48;
    goto LABEL_90;
  }
  switch(v42)
  {
    case 'D':
      v45 = a1;
      v46 = 1;
      goto LABEL_80;
    case 'S':
      v51 = a1;
      v52 = 1;
LABEL_88:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v51, v52);
      v48 = started->__mask_ | 0x4000;
      goto LABEL_89;
    case 'W':
      v43 = a1;
      v44 = 1;
LABEL_82:
      v49 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v43, v44);
      v49->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v49, 95);
      goto LABEL_90;
  }
LABEL_83:
  v50 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
  if (v32 == (char *)v50)
    v29 = a2;
  else
    v29 = (unsigned __int8 *)v50;
LABEL_91:
  v14 = a2;
  if (v29 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v29, a3, v24, v26 + 1, a1->__marked_count_ + 1);
  return v14;
}

void sub_1C22A4460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getMulticardinalVocabPathGivenSpanVocabPath(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::string v5;
  void *__p[2];
  char v7;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v5, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v5, (uint64_t)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a3, (uint64_t)__p, (std::__fs::filesystem::path *)(a1 + 176));
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1C22A44F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::getVersionYamlPathGivenSpanVocabPath(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::string v5;
  void *__p[2];
  char v7;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v5, a2);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v5, (uint64_t)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a3, (uint64_t)__p, (std::__fs::filesystem::path *)(a1 + 272));
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_1C22A4598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1C22A48AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  void *v16;
  void *v17;
  void *v18;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&__p);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)&a15);

  _Unwind_Resume(a1);
}

void sub_1C22A498C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C22A4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C22A4C0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::forward(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this, const nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  NSObject *v4;
  void *v5[3];
  void *__p;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Executing OWL espresso v1 inference.", (uint8_t *)v5, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)v5, a2);
  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, void **))(*(_QWORD *)this + 168))(this, v5);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan((nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *)((char *)this + 432));
  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(_QWORD *)this + 176))(this);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v13);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v12);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v11);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v10);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v9);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_1C22A505C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getModuleNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::getNetworkConfig(a1 + 432, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  return *((unsigned __int8 *)this + 512);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isDynamicReshapableE5ML(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  return 0;
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(void **this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)(this + 54));
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(this);
}

{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule((snlp::common::espresso_inference::pre_e5ml::EspressoModule *)(this + 54));
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(this);
  JUMPOUT(0x1C3BB9B44);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getEmbeddings(uint64_t a1@<X8>)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getSentenceEmbeddings(uint64_t a1@<X8>)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getSubwordEmbeddings(uint64_t a1@<X8>)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractTokenFeaturesOutputName@<W0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  char *output_blob_name;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (i = 0; ; ++i)
  {
    output_blob_name = (char *)espresso_get_output_blob_name();
    if (!output_blob_name)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__str, output_blob_name);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return nlv4_inference_orchestrator::inference_engine::BertModule::assertValidFeatureExtractionOutputTensorName((uint64_t)this, (uint64_t)a2);
}

void sub_1C22A51D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractRequiresSubwordEmbeddingsOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  char *result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (i = 0; ; ++i)
  {
    result = (char *)espresso_get_output_blob_name();
    if (!result)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1C22A52A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractSentenceFeaturesOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  char *result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (i = 0; ; ++i)
  {
    result = (char *)espresso_get_output_blob_name();
    if (!result)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1C22A536C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

char *nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractSubwordFeaturesOutputName@<X0>(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  char *result;
  std::string __str;

  std::string::basic_string[abi:ne180100]<0>(a2, "");
  for (i = 0; ; ++i)
  {
    result = (char *)espresso_get_output_blob_name();
    if (!result)
      break;
    std::string::basic_string[abi:ne180100]<0>(&__str, result);
    if (nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)&__str))
    {
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  return result;
}

void sub_1C22A5438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::extractFeaturePoolingRank(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t v2;
  unsigned __int8 **v3;
  char *input_blob_name;
  uint64_t v5;
  unsigned __int8 v6;
  size_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  void **p_s1;
  void *v12;
  void *__s1;
  size_t __n;
  unsigned __int8 v16;

  v2 = 0;
  v3 = (unsigned __int8 **)((char *)this + 208);
  while (1)
  {
    input_blob_name = (char *)espresso_get_input_blob_name();
    if (!input_blob_name)
      return 0;
    std::string::basic_string[abi:ne180100]<0>(&__s1, input_blob_name);
    v5 = v16;
    v6 = v16;
    if ((v16 & 0x80u) == 0)
      v7 = v16;
    else
      v7 = __n;
    v8 = *((unsigned __int8 *)this + 231);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *((_QWORD *)this + 27);
    if (v7 == v8)
    {
      if (v9 >= 0)
        v10 = (unsigned __int8 *)v3;
      else
        v10 = *v3;
      if ((char)v16 < 0)
      {
        v12 = __s1;
        if (memcmp(__s1, v10, __n))
          goto LABEL_22;
      }
      else if (v16)
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v10)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v10;
          if (!--v5)
            goto LABEL_19;
        }
        goto LABEL_20;
      }
LABEL_19:
      espresso_network_query_blob_shape();
      nlv4_inference_orchestrator::inference_engine::assertValidFeaturePoolingRank(0);
      v6 = v16;
    }
LABEL_20:
    if ((v6 & 0x80) == 0)
      goto LABEL_23;
    v12 = __s1;
LABEL_22:
    operator delete(v12);
LABEL_23:
    ++v2;
  }
}

void sub_1C22A5590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::getModuleOutput(uint64_t a1@<X8>)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setInputTensors(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this, nlv4_inference_orchestrator::inference_engine::BertModuleInputType *a2)
{
  uint64_t result;
  BOOL v5;
  int v6;
  char *v7;
  std::runtime_error *exception;
  std::runtime_error *v9;
  std::runtime_error *v10;
  std::string v11;

  (*(void (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(_QWORD *)this + 200))(this);
  if (!*((_BYTE *)a2 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid utteranceTokensMask!");
    std::runtime_error::runtime_error(exception, &v11);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  result = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(_QWORD *)this + 208))(this, (char *)a2 + 48);
  if (*((_BYTE *)a2 + 152))
    v5 = 0;
  else
    v5 = *((_BYTE *)a2 + 208) == 0;
  if (!v5)
  {
    v6 = *((_DWORD *)this + 2);
    if (v6 == 2)
    {
      if (!*((_BYTE *)a2 + 152))
      {
        v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid featurePoolingMask!");
        std::runtime_error::runtime_error(v10, &v11);
        v10->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
      }
      v7 = (char *)a2 + 104;
      return (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(_QWORD *)this + 216))(this, v7);
    }
    if (v6 == 3)
    {
      if (!*((_BYTE *)a2 + 208))
      {
        v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::string::basic_string[abi:ne180100]<0>(&v11, "Invalid featurePoolingMask2D!");
        std::runtime_error::runtime_error(v9, &v11);
        v9->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
      }
      v7 = (char *)a2 + 160;
      return (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(_QWORD *)this + 216))(this, v7);
    }
  }
  return result;
}

void sub_1C22A5770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::isSubwordEmbeddingsModel(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  char *v2;
  unint64_t v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  _BYTE *v9;
  _BOOL8 v10;
  _QWORD *v11;
  float *v12;
  float *v13;
  float *v15;
  void *v16[3];
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  void *v25;
  void *__p[6];
  _BYTE v27[56];
  _BYTE v28[56];
  _BYTE v29[56];
  _BYTE v30[56];
  _BYTE v31[56];
  _BYTE v32[56];

  v2 = (char *)this + 16;
  v3 = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(_QWORD *)this + 8))(this, (char *)this + 112);
  if (!nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid((uint64_t)this, (uint64_t)v2))return 0;
  v27[48] = 0;
  v28[0] = 0;
  v28[48] = 0;
  v29[0] = 0;
  v29[48] = 0;
  v30[0] = 0;
  v30[48] = 0;
  v31[0] = 0;
  v31[48] = 0;
  v32[0] = 0;
  v32[48] = 0;
  memset(__p, 0, sizeof(__p));
  v27[0] = 0;
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100]((uint64_t)v28);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100]((uint64_t)v29);
  v4 = operator new(0x10uLL);
  *((_QWORD *)&v22 + 1) = v4 + 2;
  v23 = v4 + 2;
  *v4 = 1;
  v4[1] = v3;
  *(_QWORD *)&v22 = v4;
  v21 = 0;
  std::vector<float>::vector(&v24, v3, &v21);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = v22;
  __p[2] = v23;
  v23 = 0;
  v22 = 0uLL;
  v5 = __p[3];
  if (__p[3])
  {
    __p[4] = __p[3];
    operator delete(__p[3]);
    v5 = (void *)v22;
  }
  *(_OWORD *)&__p[3] = v24;
  __p[5] = v25;
  v25 = 0;
  v24 = 0uLL;
  if (v5)
  {
    *((_QWORD *)&v22 + 1) = v5;
    operator delete(v5);
  }
  v6 = operator new(0x10uLL);
  *((_QWORD *)&v22 + 1) = v6 + 2;
  v23 = v6 + 2;
  *v6 = 1;
  v6[1] = v3;
  *(_QWORD *)&v22 = v6;
  v21 = 0;
  std::vector<float>::vector(&v24, v3, &v21);
  std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v27, (uint64_t)&v22);
  if ((_QWORD)v24)
  {
    *((_QWORD *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  if ((_QWORD)v22)
  {
    *((_QWORD *)&v22 + 1) = v22;
    operator delete((void *)v22);
  }
  v7 = *((_DWORD *)this + 2);
  if (v7 == 3)
  {
    v11 = operator new(0x18uLL);
    *((_QWORD *)&v22 + 1) = v11 + 3;
    v23 = v11 + 3;
    *v11 = 1;
    v11[1] = v3;
    v11[2] = v3;
    *(_QWORD *)&v22 = v11;
    v21 = 0;
    std::vector<float>::vector(&v24, v3 * v3, &v21);
    v9 = v29;
    goto LABEL_17;
  }
  if (v7 == 2)
  {
    v8 = operator new(0x10uLL);
    *((_QWORD *)&v22 + 1) = v8 + 2;
    v23 = v8 + 2;
    *v8 = 1;
    v8[1] = v3;
    *(_QWORD *)&v22 = v8;
    v21 = 0;
    std::vector<float>::vector(&v24, v3, &v21);
    v9 = v28;
LABEL_17:
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v9, (uint64_t)&v22);
    if ((_QWORD)v24)
    {
      *((_QWORD *)&v24 + 1) = v24;
      operator delete((void *)v24);
    }
    if ((_QWORD)v22)
    {
      *((_QWORD *)&v22 + 1) = v22;
      operator delete((void *)v22);
    }
  }
  (**(void (***)(void **__return_ptr, nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, void **))this)(v16, this, __p);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  (*(void (**)(__int128 *__return_ptr, nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *, char *))(*(_QWORD *)this + 160))(&v22, this, v2);
  v12 = (float *)*((_QWORD *)&v24 + 1);
  v25 = 0;
  v13 = (float *)v24;
  v24 = 0uLL;
  if ((_QWORD)v22)
  {
    *((_QWORD *)&v22 + 1) = v22;
    v15 = v12;
    operator delete((void *)v22);
    v12 = v15;
  }
  if (v12 == v13)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v10 = *v13 != 0.0;
  operator delete(v13);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v32);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v31);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v30);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v29);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v28);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v27);
  if (__p[3])
  {
    __p[4] = __p[3];
    operator delete(__p[3]);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1C22A5B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p)
    operator delete(__p);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&a39);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setUtteranceTokens(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 376, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setUtteranceTokensMask(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 400, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::setFeaturePoolingMask(uint64_t a1, uint64_t a2)
{
  return snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1 + 432, a1 + 208, a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::determineAndValidateModelType(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string v4;

  result = (*(uint64_t (**)(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *))(*(_QWORD *)this + 192))(this);
  *((_BYTE *)this + 512) = result;
  if ((_DWORD)result)
  {
    if (!*((_DWORD *)this + 2))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v4, "Feature mask rank unset for SubOwl model.");
      std::runtime_error::runtime_error(exception, &v4);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9900;
    }
  }
  return result;
}

void sub_1C22A5C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void `non-virtual thunk to'nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *this)
{
  void **v1;

  v1 = (void **)((char *)this - 432);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(v1);
}

void `non-virtual thunk to'nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(void **this)
{
  nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::~BertPreE5MLModule(this - 54);
}

void nlv4_inference_orchestrator::inference_engine::BertModuleLoadingError::~BertModuleLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

void std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::reset[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(_QWORD *)(a1 + 32) = v2;
      operator delete(v2);
    }
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 48) = 0;
  }
}

uint64_t std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  if (*(_BYTE *)(a1 + 48))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v5 = *(void **)(a1 + 24);
    if (v5)
    {
      *(_QWORD *)(a1 + 32) = v5;
      operator delete(v5);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
    }
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::BertPreE5MLModule(uint64_t a1, uint64_t a2, uint64_t a3)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule *v6;

  v6 = (nlv4_inference_orchestrator::inference_engine::BertModule *)((char *)nlv4_inference_orchestrator::inference_engine::BertModule::BertModule((nlv4_inference_orchestrator::inference_engine::BertModule *)a1)
                                                                   + 432);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(v6, a2, a3);
  *(_QWORD *)a1 = &off_1E7BE97A0;
  *(_QWORD *)(a1 + 432) = &unk_1E7BE9898;
  *(_BYTE *)(a1 + 512) = 0;
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::buildPlan(v6);
  nlv4_inference_orchestrator::inference_engine::BertModule::initInputOutput((nlv4_inference_orchestrator::inference_engine::BertModule *)a1);
  nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule::determineAndValidateModelType((nlv4_inference_orchestrator::inference_engine::BertPreE5MLModule *)a1);
  return a1;
}

void sub_1C22A5EBC(_Unwind_Exception *a1)
{
  void **v1;

  nlv4_inference_orchestrator::inference_engine::BertModule::~BertModule(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNamesToLabelComponents(_QWORD *a1@<X0>, int **a2@<X1>, int *a3@<X2>, unint64_t *a4@<X8>)
{
  int *v5;
  int *v6;
  int v8;
  unint64_t v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  std::string *v24;
  char *v25;
  int v26;
  __int128 v27;
  int64x2_t v28;
  char *v29;
  NSObject *v30;
  _BOOL4 v31;
  std::string __p;
  char v34;
  _BYTE buf[24];
  char *v36;
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v8 = *v6;
      nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNameToLabelComponent(a1, *v6, &__p);
      if (v34)
      {
        v10 = a4[1];
        v9 = a4[2];
        if (v10 >= v9)
        {
          v16 = *a4;
          v17 = (uint64_t)(v10 - *a4) >> 5;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 59)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v19 = v9 - v16;
          if (v19 >> 4 > v18)
            v18 = v19 >> 4;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
            v20 = 0x7FFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          v37 = a4 + 2;
          if (v20)
          {
            if (v20 >> 59)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v21 = (char *)operator new(32 * v20);
          }
          else
          {
            v21 = 0;
          }
          v23 = &v21[32 * v17];
          *(_QWORD *)buf = v21;
          *(_QWORD *)&buf[8] = v23;
          *(_QWORD *)&buf[16] = v23;
          v36 = &v21[32 * v20];
          *(_DWORD *)v23 = v8;
          v24 = (std::string *)(v23 + 8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            v16 = *a4;
            v10 = a4[1];
            v25 = *(char **)&buf[16];
            v23 = *(char **)&buf[8];
          }
          else
          {
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v23 + 3) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            v25 = v23;
          }
          v22 = (unint64_t)(v25 + 32);
          *(_QWORD *)&buf[16] = v25 + 32;
          if (v10 == v16)
          {
            v28 = vdupq_n_s64(v16);
          }
          else
          {
            do
            {
              v26 = *(_DWORD *)(v10 - 32);
              v10 -= 32;
              *((_DWORD *)v23 - 8) = v26;
              v23 -= 32;
              v27 = *(_OWORD *)(v10 + 8);
              *((_QWORD *)v23 + 3) = *(_QWORD *)(v10 + 24);
              *(_OWORD *)(v23 + 8) = v27;
              *(_QWORD *)(v10 + 16) = 0;
              *(_QWORD *)(v10 + 24) = 0;
              *(_QWORD *)(v10 + 8) = 0;
            }
            while (v10 != v16);
            v28 = *(int64x2_t *)a4;
            v22 = *(_QWORD *)&buf[16];
          }
          *a4 = (unint64_t)v23;
          a4[1] = v22;
          *(int64x2_t *)&buf[8] = v28;
          v29 = (char *)a4[2];
          a4[2] = (unint64_t)v36;
          v36 = v29;
          *(_QWORD *)buf = v28.i64[0];
          std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          *(_DWORD *)v10 = v8;
          v11 = (std::string *)(v10 + 8);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v12 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v10 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
          }
          v22 = v10 + 32;
          a4[1] = v10 + 32;
        }
        a4[1] = v22;
      }
      else
      {
        v13 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v14 = *a3;
          if (v14 >= 8)
          {
            v30 = SNLPOSLoggerForCategory(4);
            v31 = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
            v15 = "<UNDEFINED_COMPONENT>";
            if (v31)
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v14;
              _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
              v15 = "<UNDEFINED_COMPONENT>";
            }
          }
          else
          {
            v15 = off_1E7BED840[v14];
          }
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v15;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEFAULT, "[%s] Warning: encountered unknown span matcher name: %d", buf, 0x12u);
        }
      }
      if (v34)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_1C22A6204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;
  uint64_t v24;

  v23[1] = v24;
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  __p = v23;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNameToLabelComponent(_QWORD *a1@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  char v6;

  v4 = std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::find<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>(a1, a2);
  if (v4)
  {
    if (*((char *)v4 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)v4[3], v4[4]);
    }
    else
    {
      v5 = *(_OWORD *)(v4 + 3);
      a3->__r_.__value_.__r.__words[2] = v4[5];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
    v6 = 1;
  }
  else
  {
    v6 = 0;
    a3->__r_.__value_.__s.__data_[0] = 0;
  }
  a3[1].__r_.__value_.__s.__data_[0] = v6;
}

void std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 4;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 32;
      *(_QWORD *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForEntityNode(const siri::ontology::UsoEntityNode *a1@<X1>, std::string *a2@<X8>)
{
  void *v4;
  _BOOL4 v5;
  int v6;
  int v7;
  std::string __p;
  unsigned __int8 v9;
  void *v10;
  void *v11;

  siri::ontology::UsoEntityNode::getIdentifiers(a1);
  v4 = v10;
  if (v10 == v11)
  {
    v5 = 1;
    if (v10)
    {
LABEL_11:
      v11 = v4;
      operator delete(v4);
    }
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (__int128 *)(*(_QWORD *)v10 + 48));
    v5 = v9 == 0;
    if (v9)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        v6 = v9;
        v7 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a2[1].__r_.__value_.__s.__data_[0] = 1;
        if (v6 && v7 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        *a2 = __p;
        a2[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    v4 = v10;
    if (v10)
      goto LABEL_11;
  }
  if (v5)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
}

void sub_1C22A646C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18)
{
  if (a16 && a15 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForNode(const void *a1@<X1>, std::string *a2@<X8>)
{
  const siri::ontology::UsoEntityNode *v4;

  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a1 + 16))(a1) - 2 >= 3)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (!v4)
      __cxa_bad_cast();
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForEntityNode(v4, a2);
  }
}

void sub_1C22A6640(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1C22A664C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::addExtraEntityInformation(siri::ontology::UsoGraph *a1@<X1>, unsigned __int8 *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v6;
  unsigned __int8 v7;
  std::string::size_type v8;
  void *v9;
  unint64_t v10;
  void **v11;
  unsigned __int8 *v12;
  const std::string::value_type *v13;
  const void **v14;
  const void **v15;
  std::string *v16;
  std::string::size_type size;
  std::string *v18;
  __int128 v19;
  std::string v20;
  std::string v21;
  char v22;
  void *v23;
  const void **v24;
  void *__p[2];
  char v26;
  void *v27[2];
  unsigned __int8 v28;

  std::string::basic_string[abi:ne180100]<0>(v27, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>(__p, "|");
  v6 = a2[23];
  v7 = v6;
  v8 = *((_QWORD *)a2 + 1);
  if ((v6 & 0x80u) == 0)
    v9 = (void *)a2[23];
  else
    v9 = (void *)*((_QWORD *)a2 + 1);
  v10 = v28;
  if ((v28 & 0x80u) != 0)
    v10 = (unint64_t)v27[1];
  if (v9 != (void *)v10)
    goto LABEL_24;
  if ((v28 & 0x80u) == 0)
    v11 = v27;
  else
    v11 = (void **)v27[0];
  if ((char)v6 < 0)
  {
    v13 = *(const std::string::value_type **)a2;
    if (memcmp(*(const void **)a2, v11, *((_QWORD *)a2 + 1)))
    {
LABEL_27:
      std::string::__init_copy_ctor_external(a3, v13, v8);
      goto LABEL_28;
    }
  }
  else if ((_BYTE)v6)
  {
    v12 = a2;
    while (*v12 == *(unsigned __int8 *)v11)
    {
      ++v12;
      v11 = (void **)((char *)v11 + 1);
      if (!--v6)
        goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_17:
  siri::ontology::UsoGraph::getNodes(a1);
  v14 = (const void **)v23;
  v15 = v24;
  if (v23 == v24)
  {
LABEL_21:
    if (v14)
    {
      v24 = v14;
      operator delete(v14);
    }
    v7 = a2[23];
LABEL_24:
    if ((v7 & 0x80) == 0)
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
      goto LABEL_28;
    }
    v13 = *(const std::string::value_type **)a2;
    v8 = *((_QWORD *)a2 + 1);
    goto LABEL_27;
  }
  while (1)
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getNamespaceForNode(*v14, &v21);
    if (v22)
      break;
    if (++v14 == v15)
    {
      v14 = (const void **)v23;
      goto LABEL_21;
    }
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v20, (const void **)a2, (const void **)__p);
  if (!v22)
    std::__throw_bad_optional_access[abi:ne180100]();
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v21;
  else
    v16 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v20, (const std::string::value_type *)v16, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a3->__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (v22 && SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v23)
  {
    v24 = (const void **)v23;
    operator delete(v23);
  }
LABEL_28:
  if (v26 < 0)
    operator delete(__p[0]);
  if ((char)v28 < 0)
    operator delete(v27[0]);
}

void sub_1C22A6884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a21 && a20 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 49) < 0)
    operator delete(*(void **)(v30 - 72));
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getEntityFromUsoGraph(siri::ontology::UsoGraph *this@<X1>, std::string *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  BOOL v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  std::string v10;
  void *__p[2];
  uint64_t v12;
  char v13;

  LOBYTE(__p[0]) = 0;
  v13 = 0;
  siri::ontology::UsoGraph::getNodes(this);
  v4 = (_QWORD *)v10.__r_.__value_.__r.__words[0];
  if (v10.__r_.__value_.__r.__words[0] == v10.__r_.__value_.__l.__size_)
  {
    v7 = 0;
    v6 = 1;
    if (v10.__r_.__value_.__r.__words[0])
    {
LABEL_9:
      v10.__r_.__value_.__l.__size_ = (std::string::size_type)v4;
      operator delete(v4);
    }
  }
  else
  {
    while (1)
    {
      v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
      v6 = v5 != 2;
      if (v5 == 2)
        break;
      if (++v4 == (_QWORD *)v10.__r_.__value_.__l.__size_)
      {
        v7 = 0;
        goto LABEL_8;
      }
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*v4 + 48))(&v8);
    *(_OWORD *)__p = v8;
    v12 = v9;
    v7 = 1;
    v13 = 1;
LABEL_8:
    v4 = (_QWORD *)v10.__r_.__value_.__r.__words[0];
    if (v10.__r_.__value_.__r.__words[0])
      goto LABEL_9;
  }
  if (v6)
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::addExtraEntityInformation(this, (unsigned __int8 *)__p, &v10);
    *a2 = v10;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
    if (v7)
    {
      if (SHIBYTE(v12) < 0)
        operator delete(__p[0]);
    }
  }
}

void sub_1C22A6A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getLabel(uint64_t a1@<X1>, _QWORD *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t i;
  unsigned __int8 *v7;
  __int128 *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 v18;
  uint64_t v19;
  UsoGraph *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  void *__p[2];
  void *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  _QWORD v30[3];
  _QWORD v31[3];
  _QWORD v32[4];

  v32[3] = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a1 + 64))
  {
    std::string::basic_string[abi:ne180100]<0>(&v28, "contactType");
    std::string::basic_string[abi:ne180100]<0>(v30, "emailType");
    std::string::basic_string[abi:ne180100]<0>(v31, "personRelationship");
    std::string::basic_string[abi:ne180100]<0>(v32, "phoneType");
    std::unordered_set<std::string>::unordered_set((uint64_t)__p, (unsigned __int8 *)&v28, 4);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v32[i + 2]) < 0)
        operator delete((void *)v32[i]);
    }
    v7 = *(unsigned __int8 **)(a1 + 48);
    if (v7
      && std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(__p, v7))
    {
      v8 = *(__int128 **)(a1 + 48);
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
      }
      a3[1].__r_.__value_.__s.__data_[0] = 1;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v27);
      v25 = __p[0];
      __p[0] = 0;
      if (v25)
        operator delete(v25);
    }
    else
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v27);
      v10 = __p[0];
      __p[0] = 0;
      if (v10)
        operator delete(v10);
      v11 = *a2;
      v12 = (std::__shared_weak_count *)a2[1];
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v28 = v11;
        v29 = v12;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else
      {
        v28 = *a2;
        v29 = 0;
      }
      v19 = *(_QWORD *)(*a2 + 128);
      v20 = (UsoGraph *)operator new();
      MEMORY[0x1C3BB9154](v20, v19);
      __p[0] = v20;
      siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v28, *(const sirinluexternal::UsoGraph **)(a1 + 64), v20);
      nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getEntityFromUsoGraph((siri::ontology::UsoGraph *)v20, a3);
      v21 = MEMORY[0x1C3BB916C](v20);
      MEMORY[0x1C3BB9B44](v21, 0x10A0C403D23BABBLL);
      v22 = v29;
      if (v29)
      {
        v23 = (unint64_t *)&v29->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
  else
  {
    v17 = *(__int128 **)(a1 + 48);
    if (v17)
    {
      if (*((char *)v17 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
      }
      else
      {
        v18 = *v17;
        a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v17 + 2);
        *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v18;
      }
      a3[1].__r_.__value_.__s.__data_[0] = 1;
    }
    else
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[1].__r_.__value_.__s.__data_[0] = 0;
    }
  }
}

void sub_1C22A6D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(const void **a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  void *v22;
  size_t v23;
  std::string *v24;
  const void *v25;
  int v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  std::string v30;
  std::string v31;
  std::string v32;

  if (*(_BYTE *)(a3 + 24))
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = *((unsigned __int8 *)a1 + 23);
    else
      v8 = (size_t)a1[1];
    v9 = &v30;
    std::string::basic_string[abi:ne180100]((uint64_t)&v30, v8 + 1);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*((char *)a1 + 23) >= 0)
        v10 = a1;
      else
        v10 = *a1;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 43;
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)a2;
    else
      v12 = *(const std::string::value_type **)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::string::append(&v30, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v31, "=");
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (!*(_BYTE *)(a3 + 24))
      std::__throw_bad_optional_access[abi:ne180100]();
    v18 = *(char *)(a3 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)a3;
    else
      v19 = *(const std::string::value_type **)a3;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(a3 + 23);
    else
      v20 = *(_QWORD *)(a3 + 8);
    v21 = std::string::append(&v32, v19, v20);
    *a4 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v30.__r_.__value_.__r.__words[0];
LABEL_49:
      operator delete(v22);
    }
  }
  else
  {
    if (*((char *)a1 + 23) >= 0)
      v23 = *((unsigned __int8 *)a1 + 23);
    else
      v23 = (size_t)a1[1];
    v24 = &v32;
    std::string::basic_string[abi:ne180100]((uint64_t)&v32, v23 + 1);
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if (v23)
    {
      if (*((char *)a1 + 23) >= 0)
        v25 = a1;
      else
        v25 = *a1;
      memmove(v24, v25, v23);
    }
    *(_WORD *)((char *)&v24->__r_.__value_.__l.__data_ + v23) = 43;
    v26 = *(char *)(a2 + 23);
    if (v26 >= 0)
      v27 = (const std::string::value_type *)a2;
    else
      v27 = *(const std::string::value_type **)a2;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a2 + 23);
    else
      v28 = *(_QWORD *)(a2 + 8);
    v29 = std::string::append(&v32, v27, v28);
    *a4 = *v29;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v32.__r_.__value_.__r.__words[0];
      goto LABEL_49;
    }
  }
}

void sub_1C22A7014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getProcessedSpanLabel(const void **a1@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X4>, int *a5@<X5>, std::string *a6@<X8>)
{
  unint64_t v11;
  int8x8_t v12;
  unint64_t v13;
  uint8x8_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  NSObject *v22;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  std::string *v27;
  _QWORD *v28;
  char *v29;
  uint64_t *v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  char *v35;
  unint64_t v36;
  int v37;
  std::string::size_type size;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string v52;
  _BYTE __p[22];
  __int16 v54;
  _QWORD *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  __p[0] = 0;
  LOBYTE(v55) = 0;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(a2, a3, (uint64_t)__p, a6);
  if ((_BYTE)v55 && SHIBYTE(v54) < 0)
    operator delete(*(void **)__p);
  __p[0] = 0;
  LOBYTE(v55) = 0;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel(a1, a3, (uint64_t)__p, &v52);
  if ((_BYTE)v55 && SHIBYTE(v54) < 0)
    operator delete(*(void **)__p);
  v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a4 + 3), (uint64_t)&v52);
  v12 = (int8x8_t)a4[1];
  if (!*(_QWORD *)&v12)
    goto LABEL_24;
  v13 = v11;
  v14 = (uint8x8_t)vcnt_s8(v12);
  v14.i16[0] = vaddlv_u8(v14);
  v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    v16 = v11;
    if (v11 >= *(_QWORD *)&v12)
      v16 = v11 % *(_QWORD *)&v12;
  }
  else
  {
    v16 = (*(_QWORD *)&v12 - 1) & v11;
  }
  v17 = *(uint64_t ***)(*a4 + 8 * v16);
  if (!v17)
    goto LABEL_24;
  v18 = *v17;
  if (!*v17)
    goto LABEL_24;
  v19 = (uint64_t)(a4 + 4);
  while (1)
  {
    v20 = v18[1];
    if (v13 == v20)
      break;
    if (v15 > 1)
    {
      if (v20 >= *(_QWORD *)&v12)
        v20 %= *(_QWORD *)&v12;
    }
    else
    {
      v20 &= *(_QWORD *)&v12 - 1;
    }
    if (v20 != v16)
      goto LABEL_24;
LABEL_23:
    v18 = (uint64_t *)*v18;
    if (!v18)
      goto LABEL_24;
  }
  v21 = v18 + 2;
  if ((std::equal_to<std::string>::operator()[abi:ne180100](v19, (unsigned __int8 *)v18 + 16, (unsigned __int8 *)&v52) & 1) == 0)
    goto LABEL_23;
  v22 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    v24 = *a5;
    if (v24 >= 8)
    {
      v26 = SNLPOSLoggerForCategory(4);
      v25 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__p = 136315394;
        *(_QWORD *)&__p[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&__p[12] = 2048;
        *(_QWORD *)&__p[14] = v24;
        _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", __p, 0x16u);
      }
    }
    else
    {
      v25 = off_1E7BED840[v24];
    }
    v27 = (std::string *)v52.__r_.__value_.__r.__words[0];
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v52;
    v28 = v18 + 5;
    if (*((char *)v18 + 63) < 0)
      v28 = (_QWORD *)*v28;
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v25;
    *(_WORD *)&__p[12] = 2080;
    *(_QWORD *)&__p[14] = v27;
    v54 = 2080;
    v55 = v28;
    _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] Mapping span label '%s' to span label '%s'", __p, 0x20u);
  }
  v31 = (char *)v18[5];
  v30 = v18 + 5;
  v29 = v31;
  v32 = (uint64_t *)*(v30 - 3);
  v33 = *(v30 - 2);
  if (*((char *)v30 - 1) >= 0)
  {
    v32 = v21;
    v33 = *((unsigned __int8 *)v30 - 1);
  }
  v34 = *((char *)v30 + 23);
  if (v34 >= 0)
    v35 = (char *)v30;
  else
    v35 = v29;
  if (v34 >= 0)
    v36 = *((unsigned __int8 *)v30 + 23);
  else
    v36 = v30[1];
  v37 = SHIBYTE(a6->__r_.__value_.__r.__words[2]);
  size = a6->__r_.__value_.__l.__size_;
  if (v37 >= 0)
    v39 = (uint64_t *)a6;
  else
    v39 = (uint64_t *)a6->__r_.__value_.__r.__words[0];
  if (v37 >= 0)
    size = HIBYTE(a6->__r_.__value_.__r.__words[2]);
  if (size && v33)
  {
    v40 = (uint64_t)v32 + v33;
    v41 = (uint64_t *)((char *)v39 + size);
    v42 = v33 - 1;
    v43 = size - 1;
    while (1)
    {
      v44 = 0;
      while (*((unsigned __int8 *)v39 + v44) == *((unsigned __int8 *)v32 + v44))
      {
        v45 = v44 + 1;
        if (v43 != v44 && v42 != v44++)
          continue;
        v47 = (uint64_t)v32 + v45;
        v48 = (uint64_t *)((char *)v39 + v45);
        goto LABEL_60;
      }
      v47 = (uint64_t)v32 + v44;
      v48 = (uint64_t *)((char *)v39 + v44);
LABEL_60:
      if (v47 == v40)
        break;
      v39 = (uint64_t *)((char *)v39 + 1);
      --v43;
      if (v39 == v41)
        goto LABEL_24;
    }
    if (v39 != v48)
    {
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v35, &v35[v36], v36);
      v49 = (a6->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (uint64_t)a6
          : a6->__r_.__value_.__r.__words[0];
      v50 = v54 >= 0 ? __p : *(const std::string::value_type **)__p;
      v51 = v54 >= 0 ? HIBYTE(v54) : *(_QWORD *)&__p[8];
      std::string::replace(a6, (std::string::size_type)v39 - v49, (char *)v48 - (char *)v39, v50, v51);
      if (SHIBYTE(v54) < 0)
        operator delete(*(void **)__p);
    }
  }
LABEL_24:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
}

void sub_1C22A7454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if (*(char *)(v22 + 23) < 0)
    operator delete(*(void **)v22);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, int *a4@<X3>, std::vector<std::string>::pointer *a5@<X8>)
{
  uint64_t v7;
  std::vector<std::string>::pointer end;
  __int128 v11;
  NSObject *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  unint64_t v16;
  uint64_t v17;
  std::vector<std::string>::pointer v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 *v27;
  __int128 v28;
  std::vector<std::string>::pointer v29;
  std::string *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::string *v34;
  std::string *v35;
  std::string *value;
  NSObject *v37;
  std::string __p;
  char v39;
  std::string v40;
  unint64_t v41;
  uint64_t v42;
  std::vector<std::string> v43;
  std::__split_buffer<std::string> __v;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 24);
  memset(&v43, 0, sizeof(v43));
  if (*(_QWORD *)(v7 + 48))
  {
    nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::convertMatcherNamesToLabelComponents(a1, (int **)(v7 + 8), a4, &v41);
    end = v43.__end_;
    if (v43.__end_ >= v43.__end_cap_.__value_)
    {
      v15 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v43, (__int128 *)a2);
    }
    else
    {
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v43.__end_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        v11 = *(_OWORD *)a2;
        v43.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
      }
      v15 = end + 1;
    }
    v43.__end_ = v15;
    v16 = v41;
    v17 = v42;
    if (v41 != v42)
    {
      do
      {
        nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getProcessedSpanLabel(*(const void ***)(v7 + 48), (const void **)a2, v16 + 8, a3, a4, &__p);
        v18 = v43.__end_;
        if (v43.__end_ >= v43.__end_cap_.__value_)
        {
          v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_ - (char *)v43.__begin_) >> 3);
          v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) > v21)
            v21 = 0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) >= 0x555555555555555)
            v22 = 0xAAAAAAAAAAAAAAALL;
          else
            v22 = v21;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v43.__end_cap_;
          if (v22)
            v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v43.__end_cap_, v22);
          else
            v23 = 0;
          v24 = v23 + v20;
          __v.__first_ = v23;
          __v.__begin_ = v24;
          __v.__end_cap_.__value_ = &v23[v22];
          v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v24->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
          memset(&__p, 0, sizeof(__p));
          __v.__end_ = v24 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v43, &__v);
          v26 = v43.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v43.__end_ = v26;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        else
        {
          v19 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          v43.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          v43.__end_ = v18 + 1;
        }
        v27 = *(__int128 **)(v7 + 56);
        if (v27)
        {
          if (*((char *)v27 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v27, *((_QWORD *)v27 + 1));
          }
          else
          {
            v28 = *v27;
            __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v27 + 2);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
          }
          v39 = 1;
          nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::makeVocabLabel((const void **)a2, v16 + 8, (uint64_t)&__p, &v40);
          v29 = v43.__end_;
          if (v43.__end_ >= v43.__end_cap_.__value_)
          {
            v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_ - (char *)v43.__begin_) >> 3);
            v32 = v31 + 1;
            if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) > v32)
              v32 = 0x5555555555555556 * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v43.__end_cap_.__value_ - (char *)v43.__begin_) >> 3) >= 0x555555555555555)
              v33 = 0xAAAAAAAAAAAAAAALL;
            else
              v33 = v32;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v43.__end_cap_;
            if (v33)
              v34 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v43.__end_cap_, v33);
            else
              v34 = 0;
            v35 = v34 + v31;
            __v.__first_ = v34;
            __v.__begin_ = v35;
            __v.__end_cap_.__value_ = &v34[v33];
            *v35 = v40;
            memset(&v40, 0, sizeof(v40));
            __v.__end_ = v35 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v43, &__v);
            v30 = v43.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            *(_OWORD *)v43.__end_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
            v29->__r_.__value_.__r.__words[2] = v40.__r_.__value_.__r.__words[2];
            v30 = v29 + 1;
          }
          v43.__end_ = v30;
          if (v39 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
        v16 += 32;
      }
      while (v16 != v17);
      v15 = v43.__end_;
    }
    value = v43.__end_cap_.__value_;
    *a5 = v43.__begin_;
    a5[1] = v15;
    a5[2] = value;
    memset(&v43, 0, sizeof(v43));
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v41;
    std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
  else
  {
    v12 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (std::string *)*a4;
      if (v13 >= 8)
      {
        v37 = SNLPOSLoggerForCategory(4);
        v14 = (std::string *)"<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          LODWORD(__v.__first_) = 136315394;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"<UNDEFINED_COMPONENT>";
          WORD2(__v.__begin_) = 2048;
          *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 6) = v13;
          _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&__v, 0x16u);
        }
      }
      else
      {
        v14 = (std::string *)off_1E7BED840[v13];
      }
      LODWORD(__v.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = v14;
      _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] Warning: encountered span missing label", (uint8_t *)&__v, 0xCu);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1C22A795C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *__pa, char a20,uint64_t a21,uint64_t a22,std::__split_buffer<std::string> *a23,uint64_t a24,char a25)
{
  __p = &a22;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (uint64_t *)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(snlp::common::espresso_inference::e5ml::selflogging *this@<X0>, const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *a2@<X1>, _QWORD *a3@<X8>)
{
  void *v4;
  id v5;

  snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(this, a2);
  v5 = (id)objc_claimAutoreleasedReturnValue();
  +[E5MLModuleSELFLoggingUtils logMilCompilationStartedWithMetadata:](E5MLModuleSELFLoggingUtils, "logMilCompilationStartedWithMetadata:");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v4, a3);

}

void sub_1C22A7A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded(snlp::common::espresso_inference::e5ml::selflogging *a1, uint64_t *a2, int *a3)
{
  int v4;
  const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v4 = *a3;
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a2);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(a1, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v4 == 1)
    v7 = 1;
  else
    v7 = 2 * (v4 == 2);
  +[E5MLModuleSELFLoggingUtils logMilCompilationEndedWithMetadata:contextId:acquisitionType:](E5MLModuleSELFLoggingUtils, "logMilCompilationEndedWithMetadata:contextId:acquisitionType:", v6, v8, v7);

}

void sub_1C22A7AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed(snlp::common::espresso_inference::e5ml::selflogging *a1, uint64_t *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *v13;
  void *v14;
  id v15;

  if (*((char *)a5 + 23) >= 0)
    v9 = a5;
  else
    v9 = (uint64_t *)*a5;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v9);
  v15 = (id)objc_claimAutoreleasedReturnValue();
  if (*a3 == 1)
    v10 = 1;
  else
    v10 = 2 * (*a3 == 2);
  if ((*a4 - 1) >= 7)
    v11 = 0;
  else
    v11 = *a4;
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::convertMetadata(a1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  +[E5MLModuleSELFLoggingUtils logMilCompilationFailedWithMetadata:contextId:acquisitionType:errorCode:errorMessage:](E5MLModuleSELFLoggingUtils, "logMilCompilationFailedWithMetadata:contextId:acquisitionType:errorCode:errorMessage:", v14, v12, v10, v11, v15);

}

void sub_1C22A7BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationStarted(_QWORD *a1@<X8>)
{
  id v3;

  +[E5MLModuleSELFLoggingUtils logMilCompilationStarted](E5MLModuleSELFLoggingUtils, "logMilCompilationStarted");
  v3 = (id)objc_claimAutoreleasedReturnValue();
  snlp::common::espresso_inference::e5ml::selflogging::cppUUIDFromObjCSISUUID(v3, a1);

}

void sub_1C22A7C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationEnded(uint64_t *a1)
{
  id v1;

  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a1);
  v1 = (id)objc_claimAutoreleasedReturnValue();
  +[E5MLModuleSELFLoggingUtils logMilCompilationEnded:acquisitionType:](E5MLModuleSELFLoggingUtils, "logMilCompilationEnded:acquisitionType:");

}

void sub_1C22A7CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void snlp::common::espresso_inference::e5ml::selflogging::logMilCompilationFailed(uint64_t *a1, int *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t *v7;
  int v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  if (*((char *)a4 + 23) >= 0)
    v7 = a4;
  else
    v7 = (uint64_t *)*a4;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v7);
  v13 = (id)objc_claimAutoreleasedReturnValue();
  v8 = *a2;
  v9 = *a3;
  snlp::common::espresso_inference::e5ml::selflogging::objcSISUUIDFromCppUUID(a1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  if (v9 - 1 >= 7)
    v11 = 0;
  else
    v11 = v9;
  if (v8 == 1)
    v12 = 1;
  else
    v12 = 2 * (v8 == 2);
  +[E5MLModuleSELFLoggingUtils logMilCompilationFailed:acquisitionType:errorCode:errorMessage:](E5MLModuleSELFLoggingUtils, "logMilCompilationFailed:acquisitionType:errorCode:errorMessage:", v10, v12, v11, v13);

}

void sub_1C22A7D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::buildModel(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV2E5MLModel(this, &v4);
  if (v4)
    *a2 = v4;
  else
    nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV1Model(this, a2);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV2E5MLModel(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  std::__fs::filesystem::path *v4;
  _BOOL4 v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::__fs::filesystem::path v16;
  std::__fs::filesystem::path v17;
  char v18;

  *a2 = 0;
  v4 = (std::__fs::filesystem::path *)((char *)this + 160);
  std::__fs::filesystem::operator/[abi:ne180100](&v17.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 160));
  std::__fs::filesystem::__status(&v17, 0);
  v5 = 0;
  if (v16.__pn_.__r_.__value_.__s.__data_[0] && v16.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v16.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 184));
    std::__fs::filesystem::__status(&v16, 0);
    v6 = !v15.__r_.__value_.__s.__data_[0] || v15.__r_.__value_.__s.__data_[0] == 255;
    v5 = !v6;
    if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_13:
      std::__fs::filesystem::operator/[abi:ne180100](&v15, (uint64_t)this, v4);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v16.__pn_, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
      else
        v16.__pn_ = v15;
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 184));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v14 = __p;
      v9 = operator new();
      v17.__pn_.__r_.__value_.__s.__data_[0] = 0;
      v18 = 0;
      nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::EspressoTransformerE5MLModel(v9, (char *)&v16, (char *)&v14, (_QWORD *)this + 3, (__int128 *)&v17);
      std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v17);
      *a2 = v9;
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      v10 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v17.__pn_.__r_.__value_.__l.__data_) = 0;
        v11 = "Initialised E5-ML NLv4 model from assets compiled offline.";
LABEL_60:
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v17, 2u);
        return;
      }
      return;
    }
  }
  else if (v5)
  {
    goto LABEL_13;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v17.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  std::__fs::filesystem::__status(&v17, 0);
  v7 = 0;
  if (v16.__pn_.__r_.__value_.__s.__data_[0] && v16.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v16.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    std::__fs::filesystem::__status(&v16, 0);
    v8 = !v15.__r_.__value_.__s.__data_[0] || v15.__r_.__value_.__s.__data_[0] == 255;
    v7 = !v8;
    if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
    if (!v7)
      return;
  }
  else if (!v7)
  {
    return;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v16.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17.__pn_, v16.__pn_.__r_.__value_.__l.__data_, v16.__pn_.__r_.__value_.__l.__size_);
  else
    v17 = v16;
  std::__fs::filesystem::operator/[abi:ne180100](&v14, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v15 = v14;
  v12 = operator new();
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::EspressoTransformerE5MLModel(v12, (char *)&v17, (char *)&v15, (_QWORD *)this + 3, (__int128 *)this + 16);
  *a2 = v12;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__pn_.__r_.__value_.__l.__data_);
  v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v17.__pn_.__r_.__value_.__l.__data_) = 0;
    v11 = "Initialised E5-ML NLv4 model by on-device compilation.";
    goto LABEL_60;
  }
}

void sub_1C22A81B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  _QWORD *v42;

  if (a21 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a35 < 0)
    operator delete(a30);
  *v42 = 0;
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::setupEspressoV1Model(nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  std::__fs::filesystem::path *v4;
  _BOOL4 v5;
  BOOL v6;
  _BOOL4 v7;
  BOOL v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _BOOL4 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p;
  std::string v17;
  std::__fs::filesystem::path v18;
  std::__fs::filesystem::path v19;

  *a2 = 0;
  v4 = (std::__fs::filesystem::path *)((char *)this + 88);
  std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 88));
  std::__fs::filesystem::__status(&v19, 0);
  v5 = 0;
  if (v18.__pn_.__r_.__value_.__s.__data_[0] && v18.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 64));
    std::__fs::filesystem::__status(&v18, 0);
    v6 = !v17.__r_.__value_.__s.__data_[0] || v17.__r_.__value_.__s.__data_[0] == 255;
    v5 = !v6;
    if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    if (v5)
    {
LABEL_13:
      std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, v4);
      if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v19.__pn_, v18.__pn_.__r_.__value_.__l.__data_, v18.__pn_.__r_.__value_.__l.__size_);
      else
        v19 = v18;
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 64));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v17 = __p;
      v9 = operator new();
      nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::EspressoTransformerModel(v9, (uint64_t)&v19, (uint64_t)&v17, (_QWORD *)this + 3);
      *a2 = v9;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__pn_.__r_.__value_.__l.__data_);
      v10 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v19.__pn_.__r_.__value_.__l.__data_) = 0;
        v11 = "Initialised espresso v1 NLv4 model using original v1 assets.";
LABEL_89:
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v19, 2u);
        return;
      }
      return;
    }
  }
  else if (v5)
  {
    goto LABEL_13;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 208));
  std::__fs::filesystem::__status(&v19, 0);
  v7 = 0;
  if (v18.__pn_.__r_.__value_.__s.__data_[0] && v18.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 232));
    std::__fs::filesystem::__status(&v18, 0);
    v8 = !v17.__r_.__value_.__s.__data_[0] || v17.__r_.__value_.__s.__data_[0] == 255;
    v7 = !v8;
    if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    if (v7)
    {
LABEL_28:
      std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 208));
      if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v19.__pn_, v18.__pn_.__r_.__value_.__l.__data_, v18.__pn_.__r_.__value_.__l.__size_);
      else
        v19 = v18;
      std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 232));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v17 = __p;
      v14 = operator new();
      nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::EspressoTransformerModel(v14, (uint64_t)&v19, (uint64_t)&v17, (_QWORD *)this + 3);
      *a2 = v14;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__pn_.__r_.__value_.__l.__data_);
      v10 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v19.__pn_.__r_.__value_.__l.__data_) = 0;
        v11 = "Initialised espresso v1 NLv4 model using E5-ML v1 assets.  This implies an issue with E5-ML asset generati"
              "on.  NLv4 inference can proceed, but may not be as performant as expected.";
        goto LABEL_89;
      }
      return;
    }
  }
  else if (v7)
  {
    goto LABEL_28;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  std::__fs::filesystem::__status(&v19, 0);
  v12 = 0;
  if (v18.__pn_.__r_.__value_.__s.__data_[0] && v18.__pn_.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
    std::__fs::filesystem::__status(&v18, 0);
    v13 = !v17.__r_.__value_.__s.__data_[0] || v17.__r_.__value_.__s.__data_[0] == 255;
    v12 = !v13;
    if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    if (!v12)
      return;
  }
  else if (!v12)
  {
    return;
  }
  std::__fs::filesystem::operator/[abi:ne180100](&v18.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 136));
  if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v19.__pn_, v18.__pn_.__r_.__value_.__l.__data_, v18.__pn_.__r_.__value_.__l.__size_);
  else
    v19 = v18;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)((char *)this + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v17 = __p;
  v15 = operator new();
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::EspressoTransformerModel(v15, (uint64_t)&v19, (uint64_t)&v17, (_QWORD *)this + 3);
  *a2 = v15;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__pn_.__r_.__value_.__l.__data_);
  v10 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v19.__pn_.__r_.__value_.__l.__data_) = 0;
    v11 = "Initialised espresso v1 NLv4 model using MIL assets.";
    goto LABEL_89;
  }
}

void sub_1C22A8848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  uint64_t v28;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v28 - 41) < 0)
    operator delete(*(void **)(v28 - 64));
  if (a27 < 0)
    operator delete(a22);
  *v27 = 0;
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoTransformerModel::EspressoTransformerModel(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  __int128 v11;
  void *__p[2];
  char v14;

  *(_QWORD *)a1 = &off_1E7BE99F8;
  v8 = (_QWORD *)operator new();
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(v8, a2, (uint64_t)a4);
  *v8 = &off_1E7BE9A40;
  *(_QWORD *)(a1 + 8) = v8;
  v9 = (_QWORD *)operator new();
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::EspressoModule(v9, a3, (uint64_t)a4);
  *v9 = &off_1E7BE9A20;
  *(_QWORD *)(a1 + 16) = v9;
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a4, (unsigned __int8 *)__p);
  if (v10 && *((_DWORD *)v10 + 16) == 4)
  {
    if ((char)v10[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *((const std::string::value_type **)v10 + 5), *((_QWORD *)v10 + 6));
    }
    else
    {
      v11 = *(_OWORD *)(v10 + 40);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)v10 + 7);
      *(_OWORD *)(a1 + 24) = v11;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), "UNDEFINED_COMPONENT");
  }
  if (v14 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 48) = 100;
  *(_DWORD *)(a1 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 64), "max_num_utterance_embeddings");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 88), "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 112), "max_num_spans_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "spans_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "max_num_context_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 184), "context_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 208), "start_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 232), "end_symbol_index");
  return a1;
}

void sub_1C22A8B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  v17 = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v15 + 16) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v15 + 8) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(exception_object);
}

void sub_1C22A8C60()
{
  JUMPOUT(0x1C22A8C28);
}

void sub_1C22A8C68()
{
  uint64_t v0;

  MEMORY[0x1C3BB9B44](v0, 0x10A1C4018F07B68);
  JUMPOUT(0x1C22A8C40);
}

void sub_1C22A8C88()
{
  JUMPOUT(0x1C22A8C40);
}

void sub_1C22A8C90()
{
  uint64_t v0;

  MEMORY[0x1C3BB9B44](v0, 0x10A1C4018F07B68);
  JUMPOUT(0x1C22A8C58);
}

void nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule::~TransformerDecoderModule(nlv4_inference_orchestrator::inference_engine::TransformerDecoderModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1C3BB9B44);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::~TransformerEncoderModule(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule *this)
{
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::~EspressoModule(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::EspressoTransformerE5MLModel(uint64_t a1, char *a2, char *a3, _QWORD *a4, __int128 *a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  __int128 v14;
  void *__p[2];
  char v17;

  *(_QWORD *)a1 = &off_1E7BE9A60;
  v10 = (_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "max_num_utterance_embeddings");
  std::string::basic_string[abi:ne180100]<0>(v10, "utterance_tokens_embedder_emb_dim");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "max_num_spans_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), "spans_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), "max_num_context_tokens");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 128), "context_pad_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 152), "start_symbol_index");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 176), "end_symbol_index");
  v11 = operator new();
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::TransformerEncoderE5MLModule(v11, a2, (uint64_t)a4, a5);
  *(_QWORD *)(a1 + 200) = v11;
  v12 = operator new();
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::TransformerDecoderE5MLModule(v12, a3, (uint64_t)a4, a5);
  *(_QWORD *)(a1 + 208) = v12;
  *(_QWORD *)(a1 + 216) = 100;
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  v13 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a4, (unsigned __int8 *)__p);
  if (v13 && *((_DWORD *)v13 + 16) == 4)
  {
    if ((char)v13[63] < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(a1 + 224), *((const std::string::value_type **)v13 + 5), *((_QWORD *)v13 + 6));
    }
    else
    {
      v14 = *(_OWORD *)(v13 + 40);
      *(_QWORD *)(a1 + 240) = *((_QWORD *)v13 + 7);
      *(_OWORD *)(a1 + 224) = v14;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 224), "UNDEFINED_COMPONENT");
  }
  if (v17 < 0)
    operator delete(__p[0]);
  std::unordered_map<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>::unordered_map(a1 + 248, (uint64_t)a4);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  return a1;
}

void sub_1C22A8F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;

  if (a19 < 0)
    operator delete(__p);
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100]((uint64_t *)(v19 + 208));
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100]((uint64_t *)(v19 + 200));
  if (*(char *)(v19 + 199) < 0)
    operator delete(*v23);
  if (*(char *)(v19 + 175) < 0)
    operator delete(*v22);
  if (*(char *)(v19 + 151) < 0)
    operator delete(*v21);
  if (*(char *)(v19 + 127) < 0)
    operator delete(*a10);
  if (*(char *)(v19 + 103) < 0)
    operator delete(*a11);
  if (*(char *)(v19 + 79) < 0)
    operator delete(*a12);
  if (*(char *)(v19 + 55) < 0)
    operator delete(*v20);
  if (*(char *)(v19 + 31) < 0)
    operator delete(*a13);
  _Unwind_Resume(a1);
}

void sub_1C22A9048()
{
  JUMPOUT(0x1C22A8FE0);
}

void sub_1C22A9050()
{
  JUMPOUT(0x1C22A8FF4);
}

void sub_1C22A9058()
{
  JUMPOUT(0x1C22A9008);
}

void sub_1C22A9060()
{
  JUMPOUT(0x1C22A901CLL);
}

void sub_1C22A9068()
{
  JUMPOUT(0x1C22A902CLL);
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 591) < 0)
      operator delete(*(void **)(v1 + 568));
    if (*(char *)(v1 + 567) < 0)
      operator delete(*(void **)(v1 + 544));
    if (*(char *)(v1 + 543) < 0)
      operator delete(*(void **)(v1 + 520));
    if (*(char *)(v1 + 519) < 0)
      operator delete(*(void **)(v1 + 496));
    if (*(char *)(v1 + 495) < 0)
      operator delete(*(void **)(v1 + 472));
    if (*(char *)(v1 + 471) < 0)
      operator delete(*(void **)(v1 + 448));
    if (*(char *)(v1 + 447) < 0)
      operator delete(*(void **)(v1 + 424));
    if (*(char *)(v1 + 423) < 0)
      operator delete(*(void **)(v1 + 400));
    if (*(char *)(v1 + 399) < 0)
      operator delete(*(void **)(v1 + 376));
    if (*(char *)(v1 + 375) < 0)
      operator delete(*(void **)(v1 + 352));
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t *std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 543) < 0)
      operator delete(*(void **)(v1 + 520));
    if (*(char *)(v1 + 519) < 0)
      operator delete(*(void **)(v1 + 496));
    if (*(char *)(v1 + 495) < 0)
      operator delete(*(void **)(v1 + 472));
    if (*(char *)(v1 + 471) < 0)
      operator delete(*(void **)(v1 + 448));
    if (*(char *)(v1 + 447) < 0)
      operator delete(*(void **)(v1 + 424));
    if (*(char *)(v1 + 423) < 0)
      operator delete(*(void **)(v1 + 400));
    if (*(char *)(v1 + 399) < 0)
      operator delete(*(void **)(v1 + 376));
    if (*(char *)(v1 + 375) < 0)
      operator delete(*(void **)(v1 + 352));
    snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v1);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned __int8 *)this + 424);
}

uint64_t nlv4_inference_orchestrator::inference_engine::BertModule::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  return *((unsigned __int8 *)this + 425);
}

void nlv4_inference_orchestrator::inference_engine::BertModule::tryEnableSentenceFeatures(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  NSObject *v2;
  uint8_t v3[16];

  *((_BYTE *)this + 424) = nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid((uint64_t)this, (uint64_t)this + 64);
  if (*((_BYTE *)this + 425))
  {
    v2 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_DEBUG, "Enabling sentence features", v3, 2u);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::BertModule::tryEnableSubwordFeatures(nlv4_inference_orchestrator::inference_engine::BertModule *this)
{
  _BOOL4 isSubwordFeatureExtractionOutputTensorNameValid;
  NSObject *v3;
  uint8_t v4[16];

  isSubwordFeatureExtractionOutputTensorNameValid = nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid((uint64_t)this, (uint64_t)this + 88);
  *((_BYTE *)this + 425) = isSubwordFeatureExtractionOutputTensorNameValid;
  if (isSubwordFeatureExtractionOutputTensorNameValid)
  {
    v3 = SNLPOSLoggerForCategory(5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1C2196000, v3, OS_LOG_TYPE_DEBUG, "Enabling subword features", v4, 2u);
    }
  }
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isSubwordFeatureExtractionOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 result;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 303);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 288);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)(a1 + 280);
    else
      v9 = *(unsigned __int8 **)(a1 + 280);
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5))
        return 1;
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      v10 = v2;
      v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11)
          return 1;
      }
    }
  }
  v12 = *(unsigned __int8 *)(a1 + 327);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 312);
  if (v6 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)(a1 + 304);
  else
    v14 = *(unsigned __int8 **)(a1 + 304);
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v14, v5) == 0;
  if (!(_DWORD)v4)
    return 1;
  v15 = v4 - 1;
  do
  {
    v17 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isSentenceFeaturesOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  BOOL v21;
  _BOOL8 result;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 351);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 336);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)(a1 + 328);
    else
      v9 = *(unsigned __int8 **)(a1 + 328);
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5))
        return 1;
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      v10 = v2;
      v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11)
          return 1;
      }
    }
  }
  v12 = *(unsigned __int8 *)(a1 + 375);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 360);
  if (v6 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)(a1 + 352);
  else
    v14 = *(unsigned __int8 **)(a1 + 352);
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v14, v5) == 0;
  if (!(_DWORD)v4)
    return 1;
  v15 = v4 - 1;
  do
  {
    v17 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v16 = v17;
    v19 = *v14++;
    v18 = v19;
    v21 = v15-- != 0;
    result = v16 == v18;
  }
  while (v16 == v18 && v21);
  return result;
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100]((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1C22A9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::inference_engine::BertModule::isRequiresSubwordEmbeddingsOutputTensorNameValid(uint64_t a1, uint64_t a2)
{
  const void **v2;
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  _BOOL8 result;

  v2 = (const void **)a2;
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v4 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a1 + 183);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a1 + 168);
  if (v6 == v7)
  {
    if (v8 >= 0)
      v9 = (unsigned __int8 *)(a1 + 160);
    else
      v9 = *(unsigned __int8 **)(a1 + 160);
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*v2, v9, v5))
        return 1;
    }
    else
    {
      if (!(_DWORD)v4)
        return 1;
      v10 = v2;
      v11 = v4;
      while (*(unsigned __int8 *)v10 == *v9)
      {
        v10 = (const void **)((char *)v10 + 1);
        ++v9;
        if (!--v11)
          return 1;
      }
    }
  }
  v12 = *(unsigned __int8 *)(a1 + 207);
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a1 + 192);
  if (v6 != v12)
    return 0;
  v16 = *(unsigned __int8 **)(a1 + 184);
  v15 = (unsigned __int8 *)(a1 + 184);
  v14 = v16;
  if (v13 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v4 & 0x80) != 0)
    return memcmp(*v2, v17, v5) == 0;
  if (!(_DWORD)v4)
    return 1;
  v18 = v4 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v2;
    v2 = (const void **)((char *)v2 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

void snlp::ssu::candidate::builder::generateAppCandidates(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, snlp::ssu::cache::SSUCacheObjectIntentList *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  std::string *v13;
  __int128 *v14;
  unint64_t v15;
  const void **v16;
  std::string::size_type v17;
  std::string::size_type j;
  std::string::size_type size;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  std::string *p_s1;
  NSObject *v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  void **v36;
  unint64_t v37;
  void *v38;
  void *v39;
  std::string *v40;
  const std::string::value_type *p_p;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  char v49;
  __int128 v50;
  __int128 v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  void *v67;
  _QWORD *v68;
  __int128 *v69;
  std::string *__str;
  uint64_t v71;
  std::string buf[3];
  char v73;
  std::string v74;
  __int128 v75;
  std::string v76;
  std::string v77;
  char v78;
  __int128 v79;
  void *v80[2];
  int v81;
  __int128 __p;
  int64_t v83;
  char v84;
  std::string __s1;
  char v86;
  _BYTE v87[32];
  int v88;
  std::string v89;
  std::string v90;
  char v91;
  _QWORD v92[5];

  v92[2] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a5 = *(_DWORD *)a1;
  *(_BYTE *)(a5 + 4) = *(_BYTE *)(a1 + 4);
  v71 = a5;
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a5 + 8), *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
    a5 = v71;
  }
  else
  {
    *(_OWORD *)(a5 + 8) = *(_OWORD *)(a1 + 8);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(a1 + 24);
  }
  *(_BYTE *)(a5 + 32) = *(_BYTE *)(a1 + 32);
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  v73 = 0;
  v10 = *a3;
  v9 = a3[1];
  if (*a3 != v9)
  {
    for (i = v10 + 88; i != v9; i += 88)
    {
      if (*(_QWORD *)(v10 + 32) < *(_QWORD *)(i + 32) || *(_QWORD *)(v10 + 24) < *(_QWORD *)(i + 24))
        v10 = i;
    }
  }
  if (v9 != v10)
  {
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100]((uint64_t)buf);
    std::__construct_at[abi:ne180100]<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo const&,snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo*>(buf, (__int128 *)v10);
    v73 = 1;
  }
  v13 = (std::string *)(v71 + 40);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *(_QWORD *)(v71 + 56) = *(_QWORD *)(a2 + 16);
  }
  __str = (std::string *)a2;
  *(_BYTE *)(v71 + 64) = 0;
  *(_BYTE *)(v71 + 128) = 0;
  std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)(v71 + 136), (uint64_t)buf);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  *(_QWORD *)(v71 + 232) = 0;
  *(_QWORD *)(v71 + 240) = 0;
  v68 = (_QWORD *)(v71 + 232);
  *(_QWORD *)(v71 + 248) = 0;
  v14 = (__int128 *)*a3;
  v69 = (__int128 *)a3[1];
  if ((__int128 *)*a3 == v69)
    return;
  do
  {
    v15 = 0;
    memset(v87, 0, sizeof(v87));
    v88 = 1065353216;
    __s1.__r_.__value_.__s.__data_[0] = 0;
    v16 = (const void **)(v14 + 4);
    v86 = 0;
    while (v15 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 4))
    {
      snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(a4, v15, buf);
      if (!buf[2].__r_.__value_.__s.__data_[0])
        std::__throw_bad_optional_access[abi:ne180100]();
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      v17 = buf[0].__r_.__value_.__r.__words[2];
      memset(buf, 0, 48);
      v90 = buf[1];
      v89.__r_.__value_.__r.__words[2] = v17;
      std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      size = v90.__r_.__value_.__l.__size_;
      for (j = v90.__r_.__value_.__r.__words[0]; j != size; j += 48)
      {
        v20 = *(unsigned __int8 *)(j + 23);
        if ((v20 & 0x80u) == 0)
          v21 = *(unsigned __int8 *)(j + 23);
        else
          v21 = *(_QWORD *)(j + 8);
        v22 = *((unsigned __int8 *)v14 + 87);
        v23 = (char)v22;
        if ((v22 & 0x80u) != 0)
          v22 = *((_QWORD *)v14 + 9);
        if (v21 != v22)
          continue;
        if (v23 >= 0)
          v24 = (unsigned __int8 *)(v14 + 4);
        else
          v24 = (unsigned __int8 *)*v16;
        if ((v20 & 0x80) != 0)
        {
          if (memcmp(*(const void **)j, v24, *(_QWORD *)(j + 8)))
            continue;
        }
        else if (*(_BYTE *)(j + 23))
        {
          v25 = 0;
          while (*(unsigned __int8 *)(j + v25) == v24[v25])
          {
            if (v20 == ++v25)
              goto LABEL_40;
          }
          continue;
        }
LABEL_40:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v87, (unsigned __int8 *)&v89, (uint64_t)&v89);
        if (!v86)
        {
          std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__s1, (const std::string *)(j + 24));
          if (!v86)
            std::__throw_bad_optional_access[abi:ne180100]();
        }
        v26 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v27 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        else
          v27 = __s1.__r_.__value_.__l.__size_;
        v28 = *(unsigned __int8 *)(j + 47);
        v29 = (char)v28;
        if ((v28 & 0x80u) != 0)
          v28 = *(_QWORD *)(j + 32);
        if (v27 == v28)
        {
          if (v29 >= 0)
            v30 = (unsigned __int8 *)(j + 24);
          else
            v30 = *(unsigned __int8 **)(j + 24);
          if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (!memcmp(__s1.__r_.__value_.__l.__data_, v30, __s1.__r_.__value_.__l.__size_))
              continue;
          }
          else
          {
            if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              continue;
            p_s1 = &__s1;
            while (p_s1->__r_.__value_.__s.__data_[0] == *v30)
            {
              p_s1 = (std::string *)((char *)p_s1 + 1);
              ++v30;
              if (!--v26)
                goto LABEL_60;
            }
          }
        }
        v32 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1C2196000, v32, OS_LOG_TYPE_DEBUG, "Warning: SSUCacheObjectParameter entries for different intents have different example values", (uint8_t *)buf, 2u);
        }
LABEL_60:
        ;
      }
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      ++v15;
    }
    if (*(_QWORD *)&v87[24])
    {
      v33 = *(_OWORD *)v87;
      *(_OWORD *)v87 = 0uLL;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v33;
      *(_OWORD *)&buf[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v87[16];
      LODWORD(buf[1].__r_.__value_.__r.__words[1]) = v88;
      v34 = *(_QWORD *)(*(_QWORD *)&v87[16] + 8);
      if ((*((_QWORD *)&v33 + 1) & (*((_QWORD *)&v33 + 1) - 1)) != 0)
      {
        if (v34 >= *((_QWORD *)&v33 + 1))
          v34 %= *((_QWORD *)&v33 + 1);
      }
      else
      {
        v34 &= *((_QWORD *)&v33 + 1) - 1;
      }
      *(_QWORD *)(v33 + 8 * v34) = (char *)&buf[0].__r_.__value_.__l + 16;
      *(_OWORD *)&v87[16] = 0uLL;
      if (!v86)
        std::__throw_bad_optional_access[abi:ne180100]();
      *(std::string *)((char *)&buf[1] + 16) = __s1;
      memset(&__s1, 0, sizeof(__s1));
      v35 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
      *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
      v79 = v35;
      v36 = (void **)buf[0].__r_.__value_.__r.__words[2];
      v80[0] = (void *)buf[0].__r_.__value_.__r.__words[2];
      v80[1] = buf[1].__r_.__value_.__l.__data_;
      v81 = buf[1].__r_.__value_.__r.__words[1];
      if (buf[1].__r_.__value_.__r.__words[0])
      {
        v37 = *(_QWORD *)(buf[0].__r_.__value_.__r.__words[2] + 8);
        if ((*((_QWORD *)&v35 + 1) & (*((_QWORD *)&v35 + 1) - 1)) != 0)
        {
          if (v37 >= *((_QWORD *)&v35 + 1))
            v37 %= *((_QWORD *)&v35 + 1);
        }
        else
        {
          v37 &= *((_QWORD *)&v35 + 1) - 1;
        }
        v36 = 0;
        *(_QWORD *)(v35 + 8 * v37) = v80;
        buf[0].__r_.__value_.__r.__words[2] = 0;
        buf[1].__r_.__value_.__r.__words[0] = 0;
      }
      __p = *(_OWORD *)&buf[1].__r_.__value_.__r.__words[2];
      v83 = buf[2].__r_.__value_.__l.__size_;
      memset(&buf[1].__r_.__value_.__r.__words[2], 0, sizeof(std::string));
      v84 = 1;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(v36);
      v38 = (void *)buf[0].__r_.__value_.__r.__words[0];
      buf[0].__r_.__value_.__r.__words[0] = 0;
      if (v38)
        operator delete(v38);
    }
    else
    {
      LOBYTE(v79) = 0;
      v84 = 0;
    }
    if (v86 && SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s1.__r_.__value_.__l.__data_);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(*(void ***)&v87[16]);
    v39 = *(void **)v87;
    *(_QWORD *)v87 = 0;
    if (v39)
      operator delete(v39);
    if (v84)
    {
      v40 = std::string::basic_string((std::string *)v87, __str, 0, *((_QWORD *)v14 + 3), (std::allocator<char> *)&__s1);
      if (v83 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v83 >= 0)
        v42 = HIBYTE(v83);
      else
        v42 = *((_QWORD *)&__p + 1);
      v43 = std::string::append(v40, p_p, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v89.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string(&__s1, __str, *((_QWORD *)v14 + 4), 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v91);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &__s1;
      else
        v45 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v46 = __s1.__r_.__value_.__l.__size_;
      v47 = std::string::append(&v89, (const std::string::value_type *)v45, v46);
      v48 = v47->__r_.__value_.__r.__words[0];
      v92[0] = v47->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v92 + 7) = *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7);
      v49 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s1.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if ((v87[23] & 0x80000000) != 0)
        operator delete(*(void **)v87);
      v89.__r_.__value_.__r.__words[0] = v48;
      v89.__r_.__value_.__l.__size_ = v92[0];
      *(std::string::size_type *)((char *)&v89.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v92 + 7);
      *((_BYTE *)&v89.__r_.__value_.__s + 23) = v49;
      std::unordered_set<std::string>::unordered_set((uint64_t)&v90, (uint64_t)&v79);
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(buf, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
      else
        buf[0] = *__str;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf[1], v89.__r_.__value_.__l.__data_, v89.__r_.__value_.__l.__size_);
      else
        buf[1] = v89;
      std::unordered_set<std::string>::unordered_set((uint64_t)&buf[2], (uint64_t)&v90);
      v73 = 1;
      if (*((char *)v14 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
      }
      else
      {
        v50 = *v14;
        v74.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
        *(_OWORD *)&v74.__r_.__value_.__l.__data_ = v50;
      }
      v75 = *(__int128 *)((char *)v14 + 24);
      memset(&v76, 0, sizeof(v76));
      std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>(&v76, *((_QWORD *)v14 + 5), *((_QWORD *)v14 + 6), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 3));
      if (*((char *)v14 + 87) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *((const std::string::value_type **)v14 + 8), *((_QWORD *)v14 + 9));
      }
      else
      {
        v51 = *(_OWORD *)v16;
        v77.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 10);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v51;
      }
      v78 = 1;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v90.__r_.__value_.__r.__words[2]);
      v52 = (void *)v90.__r_.__value_.__r.__words[0];
      v90.__r_.__value_.__r.__words[0] = 0;
      if (v52)
        operator delete(v52);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      v54 = *(_QWORD *)(v71 + 240);
      v53 = *(_QWORD *)(v71 + 248);
      if (v54 < v53)
      {
        std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(*(_QWORD *)(v71 + 240), (uint64_t)buf);
        v55 = v54 + 192;
        goto LABEL_140;
      }
      v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v54 - *v68) >> 6);
      v57 = v56 + 1;
      if (v56 + 1 > 0x155555555555555)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v58 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *v68) >> 6);
      if (2 * v58 > v57)
        v57 = 2 * v58;
      if (v58 >= 0xAAAAAAAAAAAAAALL)
        v59 = 0x155555555555555;
      else
        v59 = v57;
      if (v59)
      {
        if (v59 > 0x155555555555555)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v60 = (char *)operator new(192 * v59);
      }
      else
      {
        v60 = 0;
      }
      v61 = (uint64_t)&v60[192 * v56];
      v62 = &v60[192 * v59];
      std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(v61, (uint64_t)buf);
      v55 = v61 + 192;
      v63 = v71;
      v65 = *(char **)(v71 + 232);
      v64 = *(char **)(v71 + 240);
      if (v64 == v65)
      {
        *(_QWORD *)(v71 + 232) = v61;
        *(_QWORD *)(v71 + 240) = v55;
        *(_QWORD *)(v71 + 248) = v62;
      }
      else
      {
        do
        {
          v61 -= 192;
          v64 -= 192;
          std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(v61, (uint64_t)v64);
        }
        while (v64 != v65);
        v63 = v71;
        v66 = *(char **)(v71 + 232);
        v64 = *(char **)(v71 + 240);
        *(_QWORD *)(v71 + 232) = v61;
        *(_QWORD *)(v71 + 240) = v55;
        *(_QWORD *)(v71 + 248) = v62;
        if (v64 != v66)
        {
          do
          {
            v64 -= 192;
            std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100]((uint64_t)v64);
          }
          while (v64 != v66);
          v64 = v66;
          v63 = v71;
          if (!v66)
            goto LABEL_141;
          goto LABEL_139;
        }
      }
      if (!v64)
        goto LABEL_141;
LABEL_139:
      operator delete(v64);
LABEL_140:
      v63 = v71;
LABEL_141:
      *(_QWORD *)(v63 + 240) = v55;
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v74);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf[1]);
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf[0].__r_.__value_.__l.__data_);
      if (v84)
      {
        if (SHIBYTE(v83) < 0)
          operator delete((void *)__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v80[0]);
        v67 = (void *)v79;
        *(_QWORD *)&v79 = 0;
        if (v67)
          operator delete(v67);
      }
    }
    v14 = (__int128 *)((char *)v14 + 88);
  }
  while (v14 != v69);
}

void sub_1C22AA0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p)
{
  uint64_t v27;
  uint64_t v28;

  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v27);
  if (*(char *)(v28 + 63) < 0)
    operator delete(*a9);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&__p);
  if (*(char *)(a25 + 31) < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100](uint64_t a1)
{
  void **v2;

  if (*(_BYTE *)(a1 + 88))
  {
    if (*(char *)(a1 + 87) < 0)
      operator delete(*(void **)(a1 + 64));
    v2 = (void **)(a1 + 40);
    std::vector<siri::ontology::UsoIdentifier>::__destroy_vector::operator()[abi:ne180100](&v2);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 88) = 0;
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void **)(a1 + 24);
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100](&v3);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

__n128 std::allocator<snlp::ssu::candidate::SSUCandidate>::construct[abi:ne180100]<snlp::ssu::candidate::SSUCandidate,snlp::ssu::candidate::SSUCandidate>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(__n128 *)a1 = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*(_BYTE *)(a2 + 88))
  {
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  if (*(_BYTE *)(a2 + 184))
  {
    v6 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v6;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 136) = 0;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    *(_QWORD *)(a2 + 152) = 0;
    result = *(__n128 *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(__n128 *)(a1 + 160) = result;
    *(_QWORD *)(a2 + 168) = 0;
    *(_QWORD *)(a2 + 176) = 0;
    *(_QWORD *)(a2 + 160) = 0;
    *(_BYTE *)(a1 + 184) = 1;
  }
  return result;
}

uint64_t std::optional<snlp::ssu::candidate::builder::`anonymous namespace'::AppEntityIntentInfo>::~optional(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    if (*(char *)(a1 + 63) < 0)
      operator delete(*(void **)(a1 + 40));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1);
  }
  return a1;
}

void std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 192;
        std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::candidate::SSUCandidate>::destroy[abi:ne180100](uint64_t a1)
{
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 96);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

BOOL uaap_orchestration::beam_input::isParentLabelSpecialToken(uaap_orchestration::beam_input *this, const nl_featurization::vocabulary::Vocabulary *a2)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  const nl_featurization::vocabulary::Vocabulary *v8;
  uint64_t v9;
  const nl_featurization::vocabulary::Vocabulary *v10;

  v4 = (char *)this + 48;
  v5 = (char *)std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)this + 48, (unsigned __int16 *)this + 12);
  v6 = v5;
  v7 = (char *)this + 56;
  if ((char *)this + 56 == v5)
    v8 = 0;
  else
    v8 = (const nl_featurization::vocabulary::Vocabulary *)*((_QWORD *)v5 + 7);
  v9 = std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)v4, (unsigned __int16 *)this);
  if (v7 == (char *)v9)
    v10 = 0;
  else
    v10 = *(const nl_featurization::vocabulary::Vocabulary **)(v9 + 56);
  if (v7 != v6 && v8 == a2)
    return 1;
  return v7 != (char *)v9 && v10 == a2;
}

void uaap_orchestration::beam_input::getRepeatedEntityLabelNames(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uaap_orchestration::grammar::UaapGrammar::getRightLabelsForLabel(a1, a2, v8);
  v4 = v8[0];
  v5 = v8[1];
  while (v4 != v5)
  {
    if (*(_BYTE *)(v4 + 24))
    {
      v6 = a3[1];
      if (v6 >= a3[2])
      {
        v7 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (__int128 *)v4);
      }
      else
      {
        std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)a3, (__int128 *)v4);
        v7 = v6 + 24;
      }
      a3[1] = v7;
    }
    v4 += 32;
  }
  v9 = (void **)v8;
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void sub_1C22AA67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(__int128 **a1@<X0>, unsigned __int16 *a2@<X1>, uaap_orchestration::grammar::Path **a3@<X2>, uint64_t *a4@<X8>)
{
  void **v6;
  void **v7;
  uint64_t v8;
  void **v9[3];
  uint64_t v10[3];
  void ***v11;

  a4[1] = 0;
  a4[2] = 0;
  *a4 = (uint64_t)(a4 + 1);
  uaap_orchestration::labels::buildEntityLabelsFromPaths(a3, a1, v10);
  nl_featurization::bio::buildBeginBioTagsFromEntityLabels(v10, (uint64_t *)v9);
  v6 = v9[0];
  v7 = v9[1];
  while (v6 != v7)
  {
    v8 = nl_featurization::vocabulary::Vocabulary::numericalizeToken(a2, (uint64_t)v6);
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(a4, v8, v8);
    v6 += 3;
  }
  v11 = v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  v9[0] = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v9);
}

void sub_1C22AA760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  _QWORD **v13;

  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<unsigned long>::destroy(*v13);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v4 = (uint64_t **)result;
  v6 = (uint64_t **)(result + 1);
  v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(result + 1);
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    return std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void uaap_orchestration::beam_input::buildGrammarMask(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, __int128 **a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  const nl_featurization::vocabulary::Vocabulary *v11;
  void **v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  void **v18[3];
  void **v19[3];
  uaap_orchestration::grammar::Path *v20[3];
  std::basic_string<char16_t> __p;
  void ***v22;

  v9 = *((_QWORD *)this + 8);
  std::__tree<std::__value_type<std::basic_string<char16_t>,unsigned long>,std::__map_value_compare<std::basic_string<char16_t>,std::__value_type<std::basic_string<char16_t>,unsigned long>,std::less<std::basic_string<char16_t>>,true>,std::allocator<std::__value_type<std::basic_string<char16_t>,unsigned long>>>::find<std::basic_string<char16_t>>((uint64_t)a2 + 48, (unsigned __int16 *)a2);
  std::vector<double>::vector(&__p, *((_QWORD *)a2 + 8), &kMaskLogicalFalse);
  v17 = v9;
  std::vector<std::vector<double>>::vector(a4, v9, (uint64_t)&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9)
  {
    v10 = 0;
    do
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, (const nl_featurization::vocabulary::Vocabulary *)v10))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v10, &__p);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&__p, (uint64_t *)v20);
        uaap_orchestration::labels::buildEntityLabelsFromPaths(v20, a3, (uint64_t *)v19);
        v11 = (const nl_featurization::vocabulary::Vocabulary *)a3;
        nl_featurization::bio::buildAllBioTagsFromEntityLabels((uint64_t *)v19, (uint64_t *)v18);
        v13 = v18[0];
        v12 = v18[1];
        while (v13 != v12)
        {
          v14 = nl_featurization::vocabulary::Vocabulary::numericalizeToken((unsigned __int16 *)a2, (uint64_t)v13);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3) <= v10)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          v16 = (uint64_t *)(*a4 + 24 * v10);
          v15 = *v16;
          if (v14 >= (v16[1] - *v16) >> 3)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)(v15 + 8 * v14) = 0x3FF0000000000000;
          v13 += 3;
        }
        v22 = v18;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
        v18[0] = (void **)v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v18);
        v19[0] = (void **)v20;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        a3 = (__int128 **)v11;
      }
      ++v10;
    }
    while (v10 != v17);
  }
}

void sub_1C22AA9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::vector<double>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[3 * v7];
    v8 = 3 * a2;
    v9 = &v6[3 * a2];
    v10 = 8 * v8;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
      v6 += 3;
      v10 -= 24;
    }
    while (v10);
    a1[1] = v9;
  }
  return a1;
}

void sub_1C22AAB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C22AABC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::beam_input::buildStartEntityMask(uaap_orchestration::beam_input *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  unint64_t i;
  int v7;
  uint64_t v8;
  std::basic_string<char16_t> __p;

  v5 = *((_QWORD *)this + 8);
  std::vector<double>::vector(a2, v5, &kMaskLogicalTrue);
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, i, &__p);
      nl_featurization::bio::parseBioTag((uint64_t)&__p, (uint64_t)&v7);
      if (v7 == 3)
      {
        if (i >= (uint64_t)(a2[1] - *a2) >> 3)
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        *(_QWORD *)(*a2 + 8 * i) = 0;
      }
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v8);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C22AACA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  void *v26;

  std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100](v24);
  if (a23 < 0)
    operator delete(__p);
  v26 = *(void **)v23;
  if (*(_QWORD *)v23)
  {
    *(_QWORD *)(v23 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void uaap_orchestration::beam_input::buildInnerEntityTransitionsMask(uaap_orchestration::beam_input *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  int v10;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v12;
  std::basic_string<char16_t> *v13;
  std::basic_string<char16_t> *v14;
  std::basic_string<char16_t>::size_type v15;
  int v16;
  int v17;
  int v18;
  _BOOL4 v19;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  std::basic_string<char16_t> v24;
  void *__p;
  char v26;
  char v27;
  std::basic_string<char16_t> v28;
  std::basic_string<char16_t> v29;
  void *v30;
  char v31;
  char v32;
  std::basic_string<char16_t> v33;
  int v34;
  uint64_t v35;
  std::basic_string<char16_t> v36;
  void *v37;
  void *v38;
  char v39;
  std::basic_string<char16_t> v40;

  v5 = *((_QWORD *)this + 8);
  v39 = 1;
  LODWORD(v37) = 79;
  v23 = nl_featurization::vocabulary::Vocabulary::numericalizeToken((unsigned __int16 *)this, (uint64_t)&v37);
  std::vector<double>::vector(&v37, v5, &kMaskLogicalTrue);
  std::vector<std::vector<double>>::vector(a2, v5, (uint64_t)&v37);
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v5)
  {
    v6 = 0;
    while (1)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v6, &v40);
      nl_featurization::bio::parseBioTag((uint64_t)&v40, (uint64_t)&v37);
      if ((_DWORD)v37 == 3)
        break;
LABEL_60:
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v40.__r_.__value_.__l.__data_);
      if (++v6 == v5)
        return;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v23)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v8 = (uint64_t *)(*a2 + 24 * v23);
    v7 = *v8;
    if (v6 >= (v8[1] - *v8) >> 3)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v9 = 0;
    *(_QWORD *)(v7 + 8 * v6) = 0;
    while (1)
    {
      nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, v9, &v36);
      nl_featurization::bio::parseBioTag((uint64_t)&v36, (uint64_t)&v34);
      if (v34 != 2)
        goto LABEL_54;
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v37, &v29);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        std::basic_string<char16_t>::__init_copy_ctor_external(&v33, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      else
        v33 = v29;
      nl_featurization::bio::BioTag::getPayload((nl_featurization::bio::BioTag *)&v34, &v24);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        std::basic_string<char16_t>::__init_copy_ctor_external(&v28, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      else
        v28 = v24;
      v10 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
      else
        size = v33.__r_.__value_.__l.__size_;
      v12 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
      if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v12 = v28.__r_.__value_.__l.__size_;
      if (size == v12)
      {
        if (!size)
        {
          v19 = 0;
          if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_37;
LABEL_36:
          operator delete(v28.__r_.__value_.__l.__data_);
          goto LABEL_37;
        }
        v13 = (std::basic_string<char16_t> *)v28.__r_.__value_.__r.__words[0];
        if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v13 = &v28;
        v14 = (std::basic_string<char16_t> *)v33.__r_.__value_.__r.__words[0];
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v14 = &v33;
        v15 = size - 1;
        do
        {
          v17 = (unsigned __int16)v14->__r_.__value_.__s.__data_[0];
          v14 = (std::basic_string<char16_t> *)((char *)v14 + 2);
          v16 = v17;
          v18 = (unsigned __int16)v13->__r_.__value_.__s.__data_[0];
          v13 = (std::basic_string<char16_t> *)((char *)v13 + 2);
          v19 = v18 != v16;
        }
        while (v18 == v16 && v15-- != 0);
      }
      else
      {
        v19 = 1;
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_36;
LABEL_37:
      if (v27 && v26 < 0)
        operator delete(__p);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        if (v10 < 0)
LABEL_49:
          operator delete(v33.__r_.__value_.__l.__data_);
      }
      else if (v10 < 0)
      {
        goto LABEL_49;
      }
      if (v32 && v31 < 0)
        operator delete(v30);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if (v19)
        {
LABEL_51:
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) <= v9)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          v22 = (uint64_t *)(*a2 + 24 * v9);
          v21 = *v22;
          if (v6 >= (v22[1] - *v22) >> 3)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
          *(_QWORD *)(v21 + 8 * v6) = 0;
        }
      }
      else if (v19)
      {
        goto LABEL_51;
      }
LABEL_54:
      std::__optional_destruct_base<nl_featurization::bio::BioTagPayload,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (++v9 == v5)
        goto LABEL_60;
    }
  }
}

void sub_1C22AB094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  void *v36;

  v36 = *(void **)(v34 - 184);
  if (v36)
  {
    *(_QWORD *)(v34 - 176) = v36;
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

void nl_featurization::bio::BioTagPayload::~BioTagPayload(void **this)
{
  if (*((_BYTE *)this + 48) && *((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void uaap_orchestration::beam_input::buildUniqueLabels(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  const nl_featurization::vocabulary::Vocabulary *v6;
  const nl_featurization::vocabulary::Vocabulary *i;
  __int128 **v11;
  __int128 **v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 **v16;
  __int128 **v17;
  void **v18;
  uaap_orchestration::grammar::Path *v19[3];
  void *__p;
  _QWORD *v21;
  char v22;
  char v23;
  __int128 **v24;
  __int128 **v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  __int128 **v29;
  __int128 **v30;
  std::basic_string<char16_t> v31;
  const nl_featurization::vocabulary::Vocabulary *v32;
  uaap_orchestration::grammar::Path **v33;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v6 = (const nl_featurization::vocabulary::Vocabulary *)*((_QWORD *)this + 8);
  v32 = 0;
  if (v6)
  {
    for (i = 0; i != v6; v32 = i)
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, i))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, (unint64_t)i, &v31);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&v31, (uint64_t *)&v29);
        uaap_orchestration::beam_input::getRepeatedEntityLabelNames(a3, (unsigned __int16 *)&v31, (uint64_t *)&v27);
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v12 = v29;
        v11 = v30;
        if (v29 == v30)
        {
          v17 = 0;
          v16 = 0;
        }
        else
        {
          do
          {
            uaap_orchestration::grammar::Path::getFirstComponent((uaap_orchestration::grammar::Path *)v12, (uint64_t)&__p);
            v13 = v28;
            if (std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(v27, v28, (unsigned __int16 *)&__p) == v13)
            {
              v14 = (uint64_t)v25;
              if ((unint64_t)v25 >= v26)
              {
                v15 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>((uint64_t *)&v24, v12);
              }
              else
              {
                *v25 = 0;
                *(_QWORD *)(v14 + 8) = 0;
                *(_QWORD *)(v14 + 16) = 0;
                std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v14, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3));
                v15 = v14 + 24;
              }
              v25 = (__int128 **)v15;
            }
            if (v23 && v22 < 0)
              operator delete(__p);
            v12 += 3;
          }
          while (v12 != v11);
          v16 = v24;
          v17 = v25;
        }
        memset(v19, 0, sizeof(v19));
        std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>((uint64_t)v19, v16, v17, 0xAAAAAAAAAAAAAAABLL * (v17 - v16));
        uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(a3, (unsigned __int16 *)a2, v19, (uint64_t *)&__p);
        v33 = v19;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        v18 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)a4, (unint64_t)i, (uint64_t *)&v32)+ 3);
        if (v18 != &__p)
          std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)v18, __p, &v21);
        std::__tree<unsigned long>::destroy(v21);
        __p = &v24;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v29;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      i = (const nl_featurization::vocabulary::Vocabulary *)((char *)i + 1);
    }
  }
}

void sub_1C22AB3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v31 - 96) = &a11;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 96));
  __p = (char *)&a22;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a30;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

uint64_t std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>(uint64_t result, __int128 **a2, __int128 **a3, unint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _QWORD *v12;
  _QWORD *v13;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v6 = (_QWORD *)result;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a4);
    v8 = v7;
    *v6 = v7;
    v6[1] = v7;
    v6[2] = &v7[3 * v9];
    v12 = v7;
    v13 = v7;
    v10[0] = v6 + 2;
    v10[1] = &v12;
    v10[2] = &v13;
    v11 = 0;
    if (a2 != a3)
    {
      do
      {
        *v7 = 0;
        v7[1] = 0;
        v7[2] = 0;
        std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)v7, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
        v7 = v13 + 3;
        v13 += 3;
        a2 += 3;
      }
      while (a2 != a3);
      v8 = v7;
    }
    v11 = 1;
    result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::Path>,uaap_orchestration::grammar::Path*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
    v6[1] = v8;
  }
  return result;
}

void sub_1C22AB594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

unsigned __int16 *std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(unsigned __int16 *result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3;
  BOOL v4;
  unsigned __int16 *v5;
  uint64_t v6;
  int v7;
  unsigned __int16 *v8;
  uint64_t v9;
  unsigned __int16 *i;

  if (result != a2)
  {
    v3 = *((unsigned __int8 *)a3 + 23);
    v4 = (v3 & 0x80u) != 0;
    if ((v3 & 0x80u) != 0)
      v3 = *((_QWORD *)a3 + 1);
    if (v4)
      v5 = *(unsigned __int16 **)a3;
    else
      v5 = a3;
    do
    {
      v6 = *((unsigned __int8 *)result + 23);
      v7 = (char)v6;
      if ((v6 & 0x80u) != 0)
        v6 = *((_QWORD *)result + 1);
      if (v6 == v3)
      {
        if (!v3)
          return result;
        if (v7 >= 0)
          v8 = result;
        else
          v8 = *(unsigned __int16 **)result;
        v9 = v3;
        for (i = v5; *i == *v8; ++i)
        {
          ++v8;
          if (!--v9)
            return result;
        }
      }
      result += 12;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  void *v35;

  v5 = a2;
  v7 = a1[1];
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = (v7 - 1) & a2;
    }
    v9 = *(_QWORD ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = a1 + 2;
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v5;
  v13 = *a3;
  i[5] = 0;
  i[4] = 0;
  i[2] = v13;
  i[3] = i + 4;
  v14 = (float)(unint64_t)(a1[3] + 1);
  v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    v5 = v3;
    goto LABEL_64;
  }
  v16 = 1;
  if (v7 >= 3)
    v16 = (v7 & (v7 - 1)) != 0;
  v17 = v16 | (2 * v7);
  v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18)
    prime = (int8x8_t)v18;
  else
    prime = (int8x8_t)v17;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v7 = a1[1];
  }
  if (*(_QWORD *)&prime <= v7)
  {
    if (*(_QWORD *)&prime >= v7)
      goto LABEL_60;
    v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      v26 = std::__next_prime(v26);
    }
    else
    {
      v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2)
        v26 = v28;
    }
    if (*(_QWORD *)&prime <= v26)
      prime = (int8x8_t)v26;
    if (*(_QWORD *)&prime >= v7)
    {
      v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(_QWORD *)&prime)
    {
      v35 = (void *)*a1;
      *a1 = 0;
      if (v35)
        operator delete(v35);
      v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v20 = operator new(8 * *(_QWORD *)&prime);
  v21 = (void *)*a1;
  *a1 = (uint64_t)v20;
  if (v21)
    operator delete(v21);
  v22 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(_QWORD *)(*a1 + 8 * v22++) = 0;
  while (*(_QWORD *)&prime != v22);
  v23 = (_QWORD *)*v12;
  if (*v12)
  {
    v24 = v23[1];
    v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&prime)
        v24 %= *(_QWORD *)&prime;
    }
    else
    {
      v24 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*a1 + 8 * v24) = v12;
    v29 = (_QWORD *)*v23;
    if (*v23)
    {
      do
      {
        v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(_QWORD *)&prime)
            v30 %= *(_QWORD *)&prime;
        }
        else
        {
          v30 &= *(_QWORD *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(_QWORD *)(*a1 + 8 * v30))
          {
            *(_QWORD *)(*a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *v23 = *v29;
          *v29 = **(_QWORD **)(*a1 + 8 * v30);
          **(_QWORD **)(*a1 + 8 * v30) = v29;
          v29 = v23;
        }
        v30 = v24;
LABEL_56:
        v23 = v29;
        v29 = (_QWORD *)*v29;
        v24 = v30;
      }
      while (v29);
    }
  }
  v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5)
      v5 %= v7;
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  v31 = *a1;
  v32 = *(_QWORD **)(*a1 + 8 * v5);
  if (v32)
  {
    *i = *v32;
LABEL_72:
    *v32 = i;
    goto LABEL_73;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v31 + 8 * v5) = v12;
  if (*i)
  {
    v33 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7)
        v33 %= v7;
    }
    else
    {
      v33 &= v7 - 1;
    }
    v32 = (_QWORD *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_1C22ABA2C(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *i;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t **v26;
  _QWORD *v27;
  _QWORD *v28;

  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    if (!v9)
    {
      v20 = 0;
LABEL_29:
      std::__tree<unsigned long>::destroy(v20);
      goto LABEL_30;
    }
    v10 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v9);
    if (a2 != a3)
    {
      v11 = v9;
      v12 = a2;
      do
      {
        v9 = v10;
        v13 = v12[4];
        v11[4] = v13;
        v14 = *v8;
        v15 = (uint64_t **)(a1 + 8);
        v16 = (uint64_t **)(a1 + 8);
        if (*v8)
        {
          do
          {
            while (1)
            {
              v15 = (uint64_t **)v14;
              if (v13 >= v14[4])
                break;
              v14 = (uint64_t *)*v14;
              v16 = v15;
              if (!*v15)
                goto LABEL_14;
            }
            v14 = (uint64_t *)v14[1];
          }
          while (v14);
          v16 = v15 + 1;
        }
LABEL_14:
        std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v11);
        if (v10)
          v10 = std::__tree<unsigned long>::_DetachedTreeCache::__detach_next((uint64_t)v10);
        else
          v10 = 0;
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
            a2 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            a2 = (_QWORD *)v12[2];
            v18 = *a2 == (_QWORD)v12;
            v12 = a2;
          }
          while (!v18);
        }
        if (!v9)
          break;
        v11 = v9;
        v12 = a2;
      }
      while (a2 != a3);
    }
    std::__tree<unsigned long>::destroy(v9);
    if (v10)
    {
      for (i = (uint64_t *)v10[2]; i; i = (uint64_t *)i[2])
        v10 = i;
      v20 = v10;
      goto LABEL_29;
    }
  }
LABEL_30:
  if (a2 != a3)
  {
    v21 = (uint64_t **)(a1 + 8);
    do
    {
      v22 = (uint64_t *)operator new(0x28uLL);
      v23 = a2[4];
      v22[4] = v23;
      v24 = *v21;
      v25 = (uint64_t **)(a1 + 8);
      v26 = (uint64_t **)(a1 + 8);
      if (*v21)
      {
        do
        {
          while (1)
          {
            v25 = (uint64_t **)v24;
            if (v23 >= v24[4])
              break;
            v24 = (uint64_t *)*v24;
            v26 = v25;
            if (!*v25)
              goto LABEL_38;
          }
          v24 = (uint64_t *)v24[1];
        }
        while (v24);
        v26 = v25 + 1;
      }
LABEL_38:
      std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at((uint64_t **)a1, (uint64_t)v25, v26, v22);
      v27 = (_QWORD *)a2[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)a2[2];
          v18 = *v28 == (_QWORD)a2;
          a2 = v28;
        }
        while (!v18);
      }
      a2 = v28;
    }
    while (v28 != a3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(uint64_t a1)
{
  _QWORD **v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = *v2;
      std::__tree<unsigned long>::destroy(v2[4]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::__tree<unsigned long>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::set<unsigned long>>,void *>>>::operator()[abi:ne180100](char a1, _QWORD **a2)
{
  if (a1)
  {
    std::__tree<unsigned long>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::Path>,uaap_orchestration::grammar::Path*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  void **v3;
  void **v4;
  void **v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(void ****)(a1 + 16);
    v4 = **(void ****)(a1 + 8);
    while (v3 != v4)
    {
      v3 -= 3;
      v5 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
    }
  }
  return a1;
}

void uaap_orchestration::beam_input::buildIndexableLabels(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  const nl_featurization::vocabulary::Vocabulary *v6;
  const nl_featurization::vocabulary::Vocabulary *i;
  __int128 **v11;
  __int128 **v12;
  unsigned __int16 *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 **v16;
  __int128 **v17;
  void **v18;
  uaap_orchestration::grammar::Path *v19[3];
  void *__p;
  _QWORD *v21;
  char v22;
  char v23;
  __int128 **v24;
  __int128 **v25;
  unint64_t v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  __int128 **v29;
  __int128 **v30;
  std::basic_string<char16_t> v31;
  const nl_featurization::vocabulary::Vocabulary *v32;
  uaap_orchestration::grammar::Path **v33;

  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  v6 = (const nl_featurization::vocabulary::Vocabulary *)*((_QWORD *)this + 8);
  v32 = 0;
  if (v6)
  {
    for (i = 0; i != v6; v32 = i)
    {
      if (!uaap_orchestration::beam_input::isParentLabelSpecialToken(this, i))
      {
        nl_featurization::vocabulary::Vocabulary::denumericalizeToken(this, (unint64_t)i, &v31);
        uaap_orchestration::grammar::UaapGrammar::getChildrenPathsForLabel(a3, (unsigned __int16 *)&v31, (uint64_t *)&v29);
        uaap_orchestration::beam_input::getRepeatedEntityLabelNames(a3, (unsigned __int16 *)&v31, (uint64_t *)&v27);
        v24 = 0;
        v25 = 0;
        v26 = 0;
        v12 = v29;
        v11 = v30;
        if (v29 == v30)
        {
          v17 = 0;
          v16 = 0;
        }
        else
        {
          do
          {
            uaap_orchestration::grammar::Path::getFirstComponent((uaap_orchestration::grammar::Path *)v12, (uint64_t)&__p);
            v13 = v28;
            if (std::__find_impl[abi:ne180100]<std::basic_string<char16_t> const*,std::basic_string<char16_t> const*,std::basic_string<char16_t>,std::__identity>(v27, v28, (unsigned __int16 *)&__p) != v13&& 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3) >= 2)
            {
              v14 = (uint64_t)v25;
              if ((unint64_t)v25 >= v26)
              {
                v15 = std::vector<uaap_orchestration::grammar::Path>::__push_back_slow_path<uaap_orchestration::grammar::Path const&>((uint64_t *)&v24, v12);
              }
              else
              {
                *v25 = 0;
                *(_QWORD *)(v14 + 8) = 0;
                *(_QWORD *)(v14 + 16) = 0;
                std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v14, *v12, v12[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v12[1] - (char *)*v12) >> 3));
                v15 = v14 + 24;
              }
              v25 = (__int128 **)v15;
            }
            if (v23 && v22 < 0)
              operator delete(__p);
            v12 += 3;
          }
          while (v12 != v11);
          v16 = v24;
          v17 = v25;
        }
        memset(v19, 0, sizeof(v19));
        std::vector<uaap_orchestration::grammar::Path>::__init_with_size[abi:ne180100]<uaap_orchestration::grammar::Path*,uaap_orchestration::grammar::Path*>((uint64_t)v19, v16, v17, 0xAAAAAAAAAAAAAAABLL * (v17 - v16));
        uaap_orchestration::beam_input::childrenBeginLabelIdsFromPaths(a3, (unsigned __int16 *)a2, v19, (uint64_t *)&__p);
        v33 = v19;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
        v18 = (void **)(std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t *)a4, (unint64_t)i, (uint64_t *)&v32)+ 3);
        if (v18 != &__p)
          std::__tree<unsigned long>::__assign_multi<std::__tree_const_iterator<unsigned long,std::__tree_node<unsigned long,void *> *,long>>((uint64_t)v18, __p, &v21);
        std::__tree<unsigned long>::destroy(v21);
        __p = &v24;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v27;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        __p = &v29;
        std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      i = (const nl_featurization::vocabulary::Vocabulary *)((char *)i + 1);
    }
  }
}

void sub_1C22ABFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v31 - 96) = &a11;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 96));
  __p = (char *)&a22;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a30;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v31 - 105) < 0)
    operator delete(*(void **)(v31 - 128));
  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v30);
  _Unwind_Resume(a1);
}

void uaap_orchestration::beam_input::buildBeamMaskInputs(uaap_orchestration::beam_input *this@<X0>, const nl_featurization::vocabulary::Vocabulary *a2@<X1>, __int128 **a3@<X2>, _QWORD *a4@<X8>)
{
  uaap_orchestration::beam_input::buildGrammarMask(this, a2, a3, a4);
  uaap_orchestration::beam_input::buildStartEntityMask(a2, a4 + 3);
  uaap_orchestration::beam_input::buildInnerEntityTransitionsMask(a2, a4 + 6);
  uaap_orchestration::beam_input::buildUniqueLabels(this, a2, a3, (uint64_t)(a4 + 9));
  uaap_orchestration::beam_input::buildIndexableLabels(this, a2, a3, (uint64_t)(a4 + 14));
}

void sub_1C22AC144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void *v14;

  std::__hash_table<std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::set<unsigned long>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::set<unsigned long>>>>::~__hash_table(v12);
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *v11;
  if (*v11)
  {
    *(_QWORD *)(v10 + 32) = v14;
    operator delete(v14);
  }
  a10 = (void **)v10;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uaap::UPDataDetector *uaap::UPDataDetector::UPDataDetector(uaap::UPDataDetector *this, const uaap::UPDataDetectorCacheFiles *a2)
{
  _BYTE v4[56];

  *(_QWORD *)this = 67584;
  uaap::UPDataDetector::UPDataDetector((uaap::UPDataDetector *)v4, a2, 0);
  uaap::UPDataDetector::~UPDataDetector((uaap::UPDataDetector *)v4);
  return this;
}

{
  _BYTE v4[56];

  *(_QWORD *)this = 67584;
  uaap::UPDataDetector::UPDataDetector((uaap::UPDataDetector *)v4, a2, 0);
  uaap::UPDataDetector::~UPDataDetector((uaap::UPDataDetector *)v4);
  return this;
}

uaap::UPDataDetector *uaap::UPDataDetector::UPDataDetector(uaap::UPDataDetector *this, const uaap::UPDataDetectorCacheFiles *a2, const __CFLocale *a3)
{
  uaap::UPDataDetector *v5;
  NSObject *v6;
  uaap::UPDataDetector *v7;
  uaap::UPDataDetector *v8;
  uaap::UPDataDetector *v9;
  uaap::UPDataDetector *v10;
  uaap::UPDataDetector *v11;
  std::string __p;
  std::__fs::filesystem::path buf;

  v5 = this;
  *(_QWORD *)this = 67584;
  if (!a3)
  {
    v6 = SNLPOSLoggerForCategory(6);
    this = (uaap::UPDataDetector *)os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if ((_DWORD)this)
    {
      LOWORD(buf.__pn_.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "Missing locale info when init UPDataDetector. Falling back using the system default one.", (uint8_t *)&buf, 2u);
    }
  }
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  else
    __p = *(std::string *)a2;
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  v7 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(this, &buf, a3, 0);
  *((_QWORD *)v5 + 1) = v7;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    __p = *(std::string *)((_BYTE *)a2 + 1);
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  v8 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v7, &buf, a3, 1);
  *((_QWORD *)v5 + 2) = v8;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    __p = *(std::string *)((_BYTE *)a2 + 2);
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  v9 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v8, &buf, a3, 0);
  *((_QWORD *)v5 + 3) = v9;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 95) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  else
    __p = *(std::string *)((_BYTE *)a2 + 3);
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  v10 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v9, &buf, a3, 0);
  *((_QWORD *)v5 + 4) = v10;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 119) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  else
    __p = *(std::string *)((_BYTE *)a2 + 4);
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  v11 = (uaap::UPDataDetector *)uaap::UPDataDetector::tryCreateScanner(v10, &buf, a3, 0);
  *((_QWORD *)v5 + 5) = v11;
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((char *)a2 + 143) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 15), *((_QWORD *)a2 + 16));
  else
    __p = *(std::string *)((_BYTE *)a2 + 5);
  buf.__pn_ = __p;
  memset(&__p, 0, sizeof(__p));
  *((_QWORD *)v5 + 6) = uaap::UPDataDetector::tryCreateScanner(v11, &buf, a3, 0);
  if (SHIBYTE(buf.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1C22ACC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void uaap::UPDataDetector::~UPDataDetector(uaap::UPDataDetector *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 3);
  if (v4)
    CFRelease(v4);
  v5 = (const void *)*((_QWORD *)this + 4);
  if (v5)
    CFRelease(v5);
  v6 = (const void *)*((_QWORD *)this + 5);
  if (v6)
    CFRelease(v6);
  v7 = (const void *)*((_QWORD *)this + 6);
  if (v7)
    CFRelease(v7);
}

uint64_t uaap::UPDataDetector::tryCreateScanner(uaap::UPDataDetector *this, const std::__fs::filesystem::path *a2, const __CFLocale *a3, int a4)
{
  const std::__fs::filesystem::path *v7;
  NSObject *v9;
  uint64_t v10;
  CFIndex v11;
  CFURLRef v12;
  uint64_t v13;
  std::string *v15;
  __int128 v16;
  std::runtime_error *exception;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::runtime_error *v22;
  const __CFString *v23;
  std::string __p;
  CFErrorRef err;
  std::string pn;
  std::string buf;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = a2;
  else
    v7 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
  std::__fs::filesystem::__status(a2, 0);
  if (buf.__r_.__value_.__s.__data_[0] == 255 || buf.__r_.__value_.__s.__data_[0] == 0)
  {
    if (a4)
    {
      if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&pn, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
      else
        pn = a2->__pn_;
      v15 = std::string::insert(&pn, 0, "No cache file exists at ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, &buf);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
    }
    v9 = SNLPOSLoggerForCategory(6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "No cache file exists at %s but file is optional - skipping", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  else
  {
    v11 = strlen((const char *)v7);
    v12 = CFURLCreateFromFileSystemRepresentation(0, (const UInt8 *)v7, v11, 0);
    err = 0;
    v13 = DDScannerCreateWithCacheFile();
    v10 = v13;
    if (!v13)
    {
      if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&__p, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
      else
        __p = a2->__pn_;
      v18 = std::string::insert(&__p, 0, "Could not create scanner from cache file: \"");
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      pn.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&pn.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&pn, "\".  ");
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (!err)
      {
        v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v22, &buf);
        __cxa_throw(v22, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v23 = CFErrorCopyDescription(err);
      CFRelease(err);
      uaap::toUTF8String(v23, &pn);
    }
    DDScannerSetOptions();
    if (a3)
      DDScannerSetLocale();
    if (v12)
      CFRelease(v12);
  }
  return v10;
}

void sub_1C22ACFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, std::string *a12, uint64_t a13, std::string::value_type *__pa, std::string::size_type a15, int a16, __int16 a17, char a18, unsigned __int8 a19, uint64_t a20,uint64_t a21)
{
  const void *v21;
  const std::string::value_type *v22;
  const std::string::value_type *v23;

  if ((a19 & 0x80u) == 0)
    v23 = v22;
  else
    v23 = __pa;
  if ((a19 & 0x80u) == 0)
    a15 = a19;
  std::string::append((std::string *)&a21, v23, a15);
  if ((char)a19 < 0)
    operator delete(__pa);
  CFRelease(v21);
  JUMPOUT(0x1C22ACF5CLL);
}

void sub_1C22ACFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  const void *v28;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (v28)
    CFRelease(v28);
  _Unwind_Resume(exception_object);
}

void uaap::UPDataDetector::matchSpans(_QWORD *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  CFStringRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *__p[2];
  char v19;
  __int128 v20;
  char v21;
  __int128 __dst;
  char v23;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v5 = CFStringCreateWithCString(0, a2, 0x8000100u);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v6 = a1[1];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&__dst, (char *)L"ADDRESS");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v6, &__dst);
  if (v23 < 0)
    operator delete((void *)__dst);
  v7 = a1[2];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(&v20, (char *)L"DATE_TIME");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v7, &v20);
  if (v21 < 0)
    operator delete((void *)v20);
  v8 = a1[3];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, (char *)L"FLIGHT");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v8, (__int128 *)__p);
  if (v19 < 0)
    operator delete(__p[0]);
  v9 = a1[4];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v16, "M");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v9, (__int128 *)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  v10 = a1[5];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v14, "N");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v10, (__int128 *)v14);
  if (v15 < 0)
    operator delete(v14[0]);
  v11 = a1[6];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v12, (char *)L"PHONE_NUMBER");
  uaap::UPDataDetector::matchSpansInner((uint64_t)a1, (char **)a3, v11, (__int128 *)v12);
  if (v13 < 0)
  {
    operator delete(v12[0]);
    if (!v5)
      return;
    goto LABEL_17;
  }
  if (v5)
LABEL_17:
    CFRelease(v5);
}

void sub_1C22AD2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  const void *v33;
  uint64_t v34;
  uint64_t v35;

  if (a15 < 0)
    operator delete(__p);
  *(_QWORD *)(v35 - 40) = v34;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v35 - 40));
  if (v33)
    CFRelease(v33);
  _Unwind_Resume(a1);
}

void uaap::UPDataDetector::matchSpansInner(uint64_t a1, char **a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(_QWORD);
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;

  if (a3 && DDScannerScanString())
  {
    v23 = *a4;
    v24 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v6 = DDScannerCopyResultsWithOptions();
    v7 = v6;
    v8 = MEMORY[0x1E0C98BC0];
    v10 = a2[1];
    v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      v12 = *a2;
      v13 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - *a2) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0x666666666666666)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v9 - (_QWORD)v12) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x333333333333333)
        v16 = 0x666666666666666;
      else
        v16 = v14;
      if (v16 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)operator new(40 * v16);
      v18 = &v17[40 * v13];
      v19 = &v17[40 * v16];
      *(_OWORD *)v18 = v23;
      *((_QWORD *)v18 + 2) = v24;
      *((_QWORD *)v18 + 3) = v7;
      *((_QWORD *)v18 + 4) = v8;
      v11 = v18 + 40;
      if (v10 == v12)
      {
        *a2 = v18;
        a2[1] = v11;
        a2[2] = v19;
        if (!v10)
          goto LABEL_19;
      }
      else
      {
        do
        {
          v20 = *(_OWORD *)(v10 - 40);
          *((_QWORD *)v18 - 3) = *((_QWORD *)v10 - 3);
          *(_OWORD *)(v18 - 40) = v20;
          *((_QWORD *)v10 - 5) = 0;
          *((_QWORD *)v10 - 4) = 0;
          v21 = *((_QWORD *)v10 - 2);
          *((_QWORD *)v10 - 3) = 0;
          *((_QWORD *)v10 - 2) = 0;
          *((_QWORD *)v18 - 2) = v21;
          *((_QWORD *)v18 - 1) = *((_QWORD *)v10 - 1);
          v18 -= 40;
          v10 -= 40;
        }
        while (v10 != v12);
        v22 = *a2;
        v10 = a2[1];
        *a2 = v18;
        a2[1] = v11;
        a2[2] = v19;
        if (v10 != v22)
        {
          do
          {
            v10 -= 40;
            std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100]((uint64_t)v10);
          }
          while (v10 != v22);
          v10 = v22;
        }
        if (!v10)
          goto LABEL_19;
      }
      operator delete(v10);
    }
    else
    {
      *((_QWORD *)v10 + 2) = v24;
      *(_OWORD *)v10 = v23;
      *((_QWORD *)v10 + 3) = v6;
      *((_QWORD *)v10 + 4) = v8;
      v11 = v10 + 40;
      a2[1] = v10 + 40;
    }
LABEL_19:
    a2[1] = v11;
  }
}

void sub_1C22AD598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<uaap::UPDataDetectorResult>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(void))(a1 + 32))();
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void uaap::UPDataDetectorResult::~UPDataDetectorResult(uaap::UPDataDetectorResult *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*((void (**)(void))this + 4))();
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t uaap::UPDataDetector::labelToUaapType@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int16 *v7;
  char v8;
  void *__p[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  _QWORD v27[3];
  __int128 v28;
  uint64_t v29;
  _QWORD v30[3];
  __int128 v31;
  uint64_t v32;
  _QWORD v33[3];
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, "a");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v24, (char *)L"ADDRESS");
  v25 = *(_OWORD *)__dst;
  v26 = v21;
  __dst[1] = 0;
  v21 = 0;
  __dst[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v18, "d");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v27, (char *)L"DATE_TIME");
  v28 = *(_OWORD *)v18;
  v29 = v19;
  v18[1] = 0;
  v19 = 0;
  v18[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v16, (char *)L"flight-number");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v30, (char *)L"FLIGHT");
  v31 = *(_OWORD *)v16;
  v32 = v17;
  v16[1] = 0;
  v17 = 0;
  v16[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v14, (char *)L"price");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v33, "M");
  v34 = *(_OWORD *)v14;
  v35 = v15;
  v14[1] = 0;
  v15 = 0;
  v14[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v12, (char *)L"number");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v36, "N");
  v37 = *(_OWORD *)v12;
  v38 = v13;
  v12[1] = 0;
  v13 = 0;
  v12[0] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, "p");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v39, (char *)L"PHONE_NUMBER");
  v4 = 0;
  v40 = *(_OWORD *)__p;
  v41 = v11;
  v23 = 1065353216;
  __p[1] = 0;
  v11 = 0;
  __p[0] = 0;
  memset(v22, 0, sizeof(v22));
  do
  {
    std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::pair<std::basic_string<char16_t> const,std::basic_string<char16_t>> const&>((uint64_t)v22, (unsigned __int16 *)&v24[v4], (uint64_t)&v24[v4]);
    v4 += 6;
  }
  while (v4 != 36);
  v5 = 36;
  do
  {
    v6 = &v24[v5];
    if (SHIBYTE(v24[v5 - 1]) < 0)
      operator delete((void *)*(v6 - 3));
    if (*((char *)v6 - 25) < 0)
      operator delete((void *)*(v6 - 6));
    v5 -= 6;
  }
  while (v5 * 8);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
  v7 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::find<std::basic_string<char16_t>>(v22, a1);
  if (v7)
  {
    if (*((char *)v7 + 63) < 0)
    {
      std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a2, *((const std::basic_string<char16_t>::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(v7 + 20);
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v7 + 7);
    }
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 24) = v8;
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)v22);
}

void sub_1C22AD9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>>>::~__hash_table((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::forward(nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule *this@<X0>, const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];

  memset(v14, 0, sizeof(v14));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v14, *(const void **)a2, *((_QWORD *)a2 + 1), (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  memset(v15, 0, sizeof(v15));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 2);
  memset(v16, 0, sizeof(v16));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v16, *((const void **)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3);
  memset(v17, 0, sizeof(v17));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v17, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  memset(v18, 0, sizeof(v18));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v18, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 3);
  memset(v19, 0, sizeof(v19));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v19, *((const void **)a2 + 15), *((_QWORD *)a2 + 16), (uint64_t)(*((_QWORD *)a2 + 16) - *((_QWORD *)a2 + 15)) >> 2);
  memset(v20, 0, sizeof(v20));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v20, *((const void **)a2 + 18), *((_QWORD *)a2 + 19), (uint64_t)(*((_QWORD *)a2 + 19) - *((_QWORD *)a2 + 18)) >> 3);
  memset(v21, 0, sizeof(v21));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v21, *((const void **)a2 + 21), *((_QWORD *)a2 + 22), (uint64_t)(*((_QWORD *)a2 + 22) - *((_QWORD *)a2 + 21)) >> 2);
  memset(v22, 0, sizeof(v22));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v22, *((const void **)a2 + 24), *((_QWORD *)a2 + 25), (uint64_t)(*((_QWORD *)a2 + 25) - *((_QWORD *)a2 + 24)) >> 3);
  memset(v23, 0, sizeof(v23));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v23, *((const void **)a2 + 27), *((_QWORD *)a2 + 28), (uint64_t)(*((_QWORD *)a2 + 28) - *((_QWORD *)a2 + 27)) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtteranceTokensEmbeddings((uint64_t)this, (uint64_t)v14);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setSpanTokens((uint64_t)this, (uint64_t)v16);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setContext((uint64_t)this, (uint64_t)v18);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtterancePaddingMask((uint64_t)this, (uint64_t)v20);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setPositionIds((uint64_t)this, (uint64_t)v22);
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::executePlan(this);
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getFinalHidden((uint64_t)&v10);
  v6 = v11;
  *(_OWORD *)(a3 + 48) = v10;
  *(_QWORD *)(a3 + 64) = v6;
  v7 = v13;
  *(_OWORD *)(a3 + 72) = v12;
  *(_QWORD *)(a3 + 88) = v7;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getEncodings((uint64_t)&v10);
  v8 = v11;
  *(_OWORD *)a3 = v10;
  *(_QWORD *)(a3 + 16) = v8;
  v9 = v13;
  *(_OWORD *)(a3 + 24) = v12;
  *(_QWORD *)(a3 + 40) = v9;
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v14);
}

void sub_1C22ADD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  snlp::ssu::espresso::SSUNessieModuleInputs *v40;

  snlp::ssu::espresso::SSUNessieModuleInputs::~SSUNessieModuleInputs(v40);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&a15);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtteranceTokensEmbeddings(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "utterance_tokens_embeddings");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22ADE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setSpanTokens(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "span_tokens");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22ADEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setContext(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "context");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22ADF60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setUtterancePaddingMask(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "padding_mask");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22ADFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::setPositionIds(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, "position_ids");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::setInput(a1, (uint64_t)__p, a2);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1C22AE048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getFinalHidden(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_init_decoder_hidden");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C22AE0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::TransformerEncoderModule::getEncodings(uint64_t a1@<X8>)
{
  void *__p;
  char v4;

  std::string::basic_string[abi:ne180100]<0>(&__p, "out_encodings");
  snlp::common::espresso_inference::pre_e5ml::EspressoModule::getOutput(a1);
  if (v4 < 0)
    operator delete(__p);
}

void sub_1C22AE130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C22AE1C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C22AE21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)UPDetectedData;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1C22AE86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;

  MEMORY[0x1C3BB9B44](v61, 0x20C40960023A9);
  std::unique_ptr<uaap::UPDataDetector>::reset[abi:ne180100]((uaap::UPDataDetector **)(v62 - 112));
  uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(&a23);
  if (*(char *)(v62 - 153) < 0)
    operator delete(*(void **)(v62 - 176));

  _Unwind_Resume(a1);
}

void sub_1C22AEC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  void *v19;
  void *v20;

  a19 = &a10;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  objc_sync_exit(v19);

  _Unwind_Resume(a1);
}

void sub_1C22AEE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19)
{
  void *v19;
  void *v20;

  a19 = &a10;
  std::vector<uaap::UPDataDetectorResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (a18 < 0)
    operator delete(__p);
  objc_sync_exit(v19);

  _Unwind_Resume(a1);
}

void sub_1C22AEF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_1C22AF11C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{

  _Unwind_Resume(a1);
}

uaap::UPDataDetector *std::unique_ptr<uaap::UPDataDetector>::reset[abi:ne180100](uaap::UPDataDetector **a1)
{
  uaap::UPDataDetector *result;

  result = *a1;
  *a1 = 0;
  if (result)
  {
    uaap::UPDataDetector::~UPDataDetector(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void uaap::UPDataDetectorCacheFiles::~UPDataDetectorCacheFiles(void **this)
{
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::encode(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  void *v8[28];

  if (*a3 == a3[1])
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
  }
  else
  {
    nlv4_inference_orchestrator::span_matching::SpanEncoder::applyEncoding(a1, a2, a3, a4, (uint64_t)v8);
    nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens((nlv4_inference_orchestrator::span_matching::TagBucketList *)v8, a1, a3, (char **)a5);
    nlv4_inference_orchestrator::span_matching::TagBucketList::~TagBucketList(v8);
  }
}

void sub_1C22AF434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  nlv4_inference_orchestrator::span_matching::TagBucketList::~TagBucketList(&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::applyEncoding(uint64_t a1@<X0>, const sirinluinternal::MatchingSpan **a2@<X1>, uint64_t *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  uint64_t i;
  const sirinluinternal::MatchingSpan *v18;
  const sirinluinternal::MatchingSpan *v19;
  uint64_t v20;
  int v21;
  std::string __p;
  uint64_t v23[3];
  _QWORD v24[4];

  v24[3] = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  v9 = a3[1];
  *(_DWORD *)a5 = *a4;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  __p.__r_.__value_.__r.__words[0] = a5 + 16;
  __p.__r_.__value_.__s.__data_[8] = 0;
  v12 = v9 - v10;
  v11 = v12 == 0;
  v13 = v12 >> 4;
  v14 = 0x8E38E38E38E38E39 * v13;
  *(_QWORD *)(a5 + 8) = 0x8E38E38E38E38E39 * v13;
  if (!v11)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100]((_QWORD *)(a5 + 16), 0x8E38E38E38E38E39 * v13);
    v15 = *(char **)(a5 + 24);
    v16 = 24 * ((24 * v14 - 24) / 0x18) + 24;
    bzero(v15, v16);
    *(_QWORD *)(a5 + 24) = &v15[v16];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "[CLS_SPAN]");
  std::string::basic_string[abi:ne180100]<0>(v23, "[SEP_SPAN]");
  std::string::basic_string[abi:ne180100]<0>(v24, "[NO_SPAN]");
  std::unordered_set<std::string>::unordered_set(a5 + 40, (unsigned __int8 *)&__p, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v24[i + 2]) < 0)
      operator delete((void *)v24[i]);
  }
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 80), "B");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 104), "I");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 128), "L");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 152), "O");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 176), "U");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a5 + 200), "-");
  v18 = *a2;
  v19 = a2[1];
  while (v18 != v19)
  {
    v20 = *((_QWORD *)v18 + 6);
    if (v20)
    {
      nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(a5, v20, (uint64_t)v18);
      nlv4_inference_orchestrator::span_matching::SpanEncoder::getTopLevelUsoEntityFromDataDetectorSpan(a1, v18, &__p);
      v21 = LOBYTE(v23[0]);
      if (!*a4 && LOBYTE(v23[0]))
      {
        nlv4_inference_orchestrator::span_matching::TagBucketList::addTag(a5, (uint64_t)&__p, (uint64_t)v18);
        v21 = LOBYTE(v23[0]);
      }
      if (v21)
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    v18 = (const sirinluinternal::MatchingSpan *)((char *)v18 + 88);
  }
}

void sub_1C22AF6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList *this@<X1>, uint64_t a2@<X0>, _QWORD *a3@<X2>, char **a4@<X8>)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  const void **v14;
  unint64_t v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void **v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::string *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  __int128 v74;
  __int128 v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unsigned __int8 *v92;
  unsigned __int8 *v93;
  _QWORD *v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  _DWORD *v98;
  void **v99;
  __int128 v100;
  NSObject *v101;
  uint64_t v102;
  const char *v103;
  NSObject *v104;
  unint64_t v105;
  _QWORD *v106;
  char **v107;
  __int128 v109;
  char *v110;
  void **v111[3];
  std::string v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE buf[24];
  char *v117;
  char **v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  std::string v122;
  uint64_t v123;

  v4 = a3;
  v123 = *MEMORY[0x1E0C80C00];
  v8 = *a3;
  v7 = a3[1];
  nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, buf);
  v9 = 0x8E38E38E38E38E39 * ((v7 - v8) >> 4);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
  v112.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
  if (v9 == v10)
  {
    nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, v111);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v11 = a2;
    if (v4[1] != *v4)
    {
      v12 = 0;
      v107 = a4;
      v106 = v4;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * (v111[1] - v111[0]) <= v12)
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
        v13 = (uint64_t *)&v111[0][3 * v12];
        v14 = (const void **)v13[1];
        v15 = 126 - 2 * __clz(((uint64_t)v14 - *v13) >> 5);
        if (v14 == (const void **)*v13)
          v16 = 0;
        else
          v16 = v15;
        std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(*v13, v14, v16, 1);
        v18 = *v13;
        v17 = (void **)v13[1];
        v19 = (void **)(*v13 + 32);
        if ((void **)*v13 == v17 || v19 == v17)
          goto LABEL_34;
        while (1)
        {
          v21 = *(unsigned __int8 *)(v18 + 23);
          if ((v21 & 0x80u) == 0)
            v22 = *(unsigned __int8 *)(v18 + 23);
          else
            v22 = *(_QWORD *)(v18 + 8);
          v23 = *(unsigned __int8 *)(v18 + 55);
          v24 = (char)v23;
          if ((v23 & 0x80u) != 0)
            v23 = *(_QWORD *)(v18 + 40);
          if (v22 != v23)
            goto LABEL_33;
          v25 = v24 >= 0 ? v19 : (void **)*v19;
          if ((v21 & 0x80) == 0)
            break;
          if (!memcmp(*(const void **)v18, v25, *(_QWORD *)(v18 + 8)))
            goto LABEL_28;
LABEL_33:
          v19 += 4;
          v18 += 32;
          if (v19 == v17)
            goto LABEL_34;
        }
        if (*(_BYTE *)(v18 + 23))
        {
          v26 = 0;
          while (*(unsigned __int8 *)(v18 + v26) == *((unsigned __int8 *)v25 + v26))
          {
            if (v21 == ++v26)
              goto LABEL_28;
          }
          goto LABEL_33;
        }
LABEL_28:
        v27 = *(_QWORD **)(v18 + 24);
        v28 = *(_QWORD **)(v18 + 56);
        v30 = (char *)v27[1];
        v29 = (char *)v27[2];
        v31 = (_DWORD *)v28[1];
        if (v29 - v30 != v28[2] - (_QWORD)v31)
          goto LABEL_33;
        while (v30 != v29)
        {
          if (*(_DWORD *)v30 != *v31)
            goto LABEL_33;
          v30 += 4;
          ++v31;
        }
        if (v27[7] != v28[7])
          goto LABEL_33;
        if ((void **)v18 != v17)
        {
          v85 = v18 + 64;
          if ((void **)(v18 + 64) != v17)
          {
            v86 = v18 + 32;
            while (1)
            {
              v87 = (unsigned __int8 *)v85;
              v88 = *(unsigned __int8 *)(v18 + 23);
              if ((v88 & 0x80u) == 0)
                v89 = *(unsigned __int8 *)(v18 + 23);
              else
                v89 = *(_QWORD *)(v18 + 8);
              v90 = *(unsigned __int8 *)(v86 + 55);
              v91 = (char)v90;
              if ((v90 & 0x80u) != 0)
                v90 = *(_QWORD *)(v86 + 40);
              if (v89 != v90)
                goto LABEL_109;
              if (v91 >= 0)
                v92 = v87;
              else
                v92 = *(unsigned __int8 **)v87;
              if ((v88 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v18, v92, *(_QWORD *)(v18 + 8)))
                  goto LABEL_109;
              }
              else if (*(_BYTE *)(v18 + 23))
              {
                v93 = (unsigned __int8 *)v18;
                while (*v93 == *v92)
                {
                  ++v93;
                  ++v92;
                  if (!--v88)
                    goto LABEL_104;
                }
LABEL_109:
                v99 = (void **)(v18 + 32);
                if (*(char *)(v18 + 55) < 0)
                  operator delete(*v99);
                v100 = *(_OWORD *)v87;
                *(_QWORD *)(v18 + 48) = *((_QWORD *)v87 + 2);
                *(_OWORD *)v99 = v100;
                *(_BYTE *)(v86 + 55) = 0;
                *v87 = 0;
                *(_QWORD *)(v18 + 56) = *(_QWORD *)(v86 + 56);
                v18 += 32;
                goto LABEL_112;
              }
LABEL_104:
              v94 = *(_QWORD **)(v18 + 24);
              v95 = *(_QWORD **)(v86 + 56);
              v97 = (char *)v94[1];
              v96 = (char *)v94[2];
              v98 = (_DWORD *)v95[1];
              if (v96 - v97 != v95[2] - (_QWORD)v98)
                goto LABEL_109;
              while (v97 != v96)
              {
                if (*(_DWORD *)v97 != *v98)
                  goto LABEL_109;
                v97 += 4;
                ++v98;
              }
              if (v94[7] != v95[7])
                goto LABEL_109;
              v99 = (void **)v18;
LABEL_112:
              v85 = (uint64_t)(v87 + 32);
              v86 = (uint64_t)v87;
              if (v87 + 32 == (unsigned __int8 *)v17)
                goto LABEL_116;
            }
          }
          v99 = (void **)v18;
LABEL_116:
          v17 = v99 + 4;
          v11 = a2;
        }
LABEL_34:
        v109 = 0uLL;
        v110 = 0;
        v32 = *v13;
        v33 = (uint64_t)v17 - *v13;
        if (v33 < 1)
        {
          v47 = 0;
          goto LABEL_47;
        }
        v34 = v33 >> 5;
        v118 = &v110;
        v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v33 >> 5);
        *(_QWORD *)buf = v35;
        *(_QWORD *)&buf[8] = v35;
        *(_QWORD *)&buf[16] = v35;
        v117 = (char *)v35 + 32 * v36;
        v37 = (char *)v35 + 32 * v34;
        v38 = 32 * v34;
        do
        {
          if (*(char *)(v32 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)v32, *(_QWORD *)(v32 + 8));
          }
          else
          {
            v39 = *(_OWORD *)v32;
            v35->__r_.__value_.__r.__words[2] = *(_QWORD *)(v32 + 16);
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v39;
          }
          v35[1].__r_.__value_.__r.__words[0] = *(_QWORD *)(v32 + 24);
          v35 = (std::string *)((char *)v35 + 32);
          v32 += 32;
          v38 -= 32;
        }
        while (v38);
        *(_QWORD *)&buf[16] = v37;
        *(_QWORD *)&buf[8] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>,std::reverse_iterator<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>>((uint64_t)&v110, 0, 0, v109, v109, *(uint64_t *)&buf[8], *(uint64_t *)&buf[8]);
        v40 = *((_QWORD *)&v109 + 1);
        v41 = *(_QWORD *)&buf[16];
        v114 = *(_QWORD *)&buf[16];
        v115 = *(_QWORD *)&buf[16];
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v110;
        v112.__r_.__value_.__l.__size_ = (std::string::size_type)&v114;
        v112.__r_.__value_.__r.__words[2] = (std::string::size_type)&v115;
        if (*((_QWORD *)&v109 + 1))
        {
          v42 = 0;
          do
          {
            *(_OWORD *)v41 = *(_OWORD *)v42;
            v43 = *(_QWORD *)(v42 + 16);
            v44 = *(_QWORD *)(v42 + 24);
            *(_QWORD *)(v42 + 8) = 0;
            *(_QWORD *)(v42 + 16) = 0;
            *(_QWORD *)v42 = 0;
            v42 += 32;
            *(_QWORD *)(v41 + 16) = v43;
            *(_QWORD *)(v41 + 24) = v44;
            v41 += 32;
          }
          while (v42 != v40);
          v115 = v41;
        }
        LOBYTE(v113) = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<uaap_orchestration::grammar::RightLabel>,uaap_orchestration::grammar::RightLabel*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v112);
        v45 = v109;
        *(_QWORD *)&v109 = *(_QWORD *)&buf[8];
        *((_QWORD *)&v109 + 1) = v41;
        *(_OWORD *)&buf[8] = v45;
        v46 = v110;
        v110 = v117;
        v117 = v46;
        *(_QWORD *)buf = v45;
        std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)buf);
        v47 = *((_QWORD *)&v109 + 1);
        if ((_QWORD)v109 == *((_QWORD *)&v109 + 1))
        {
LABEL_47:
          if (*(char *)(v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v11, *(_QWORD *)(v11 + 8));
            v47 = *((_QWORD *)&v109 + 1);
          }
          else
          {
            v112 = *(std::string *)v11;
          }
          v113 = a2 + 48;
          if (v47 >= (unint64_t)v110)
          {
            v49 = (uint64_t)(v47 - v109) >> 5;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 59)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v51 = (uint64_t)&v110[-v109];
            if ((uint64_t)&v110[-v109] >> 4 > v50)
              v50 = v51 >> 4;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFE0)
              v52 = 0x7FFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            v118 = &v110;
            v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v52);
            v54 = &v53[32 * v49];
            *(_QWORD *)buf = v53;
            *(_QWORD *)&buf[8] = v54;
            v117 = &v53[32 * v55];
            v56 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
            *((_QWORD *)v54 + 2) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
            *(_OWORD *)v54 = v56;
            memset(&v112, 0, sizeof(v112));
            *((_QWORD *)v54 + 3) = v113;
            *(_QWORD *)&buf[16] = v54 + 32;
            std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer((uint64_t *)&v109, buf);
            v57 = *((_QWORD *)&v109 + 1);
            std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)buf);
            *((_QWORD *)&v109 + 1) = v57;
            v11 = a2;
            if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v112.__r_.__value_.__l.__data_);
          }
          else
          {
            v48 = *(_OWORD *)&v112.__r_.__value_.__l.__data_;
            *(_QWORD *)(v47 + 16) = *((_QWORD *)&v112.__r_.__value_.__l + 2);
            *(_OWORD *)v47 = v48;
            *(_QWORD *)(v47 + 24) = v113;
            *((_QWORD *)&v109 + 1) = v47 + 32;
          }
        }
        v58 = (_OWORD *)(*v4 + 144 * v12);
        MEMORY[0x1C3BB8524](buf, v58);
        v59 = v58[6];
        v60 = v58[8];
        v120 = v58[7];
        v121 = v60;
        v119 = v59;
        memset(&v122, 0, sizeof(v122));
        std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__init_with_size[abi:ne180100]<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(&v122, (__int128 *)v109, *((__int128 **)&v109 + 1), (uint64_t)(*((_QWORD *)&v109 + 1) - v109) >> 5);
        v61 = (unint64_t)a4[1];
        v62 = (unint64_t)a4[2];
        if (v61 >= v62)
        {
          v67 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v61 - (_QWORD)*a4) >> 3);
          v68 = v67 + 1;
          if (v67 + 1 > 0x186186186186186)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v69 = 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(v62 - (_QWORD)*a4) >> 3);
          if (2 * v69 > v68)
            v68 = 2 * v69;
          if (v69 >= 0xC30C30C30C30C3)
            v70 = 0x186186186186186;
          else
            v70 = v68;
          if (v70)
          {
            if (v70 > 0x186186186186186)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v71 = (char *)operator new(168 * v70);
          }
          else
          {
            v71 = 0;
          }
          v72 = &v71[168 * v67];
          v73 = &v71[168 * v70];
          MEMORY[0x1C3BB8524](v72, buf);
          v74 = v120;
          *((_OWORD *)v72 + 6) = v119;
          *((_OWORD *)v72 + 7) = v74;
          v75 = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
          *((_OWORD *)v72 + 8) = v121;
          *((_OWORD *)v72 + 9) = v75;
          *((_QWORD *)v72 + 20) = *((_QWORD *)&v122.__r_.__value_.__l + 2);
          memset(&v122, 0, sizeof(v122));
          v66 = (uint64_t)(v72 + 168);
          v77 = *a4;
          v76 = a4[1];
          if (v76 == *a4)
          {
            *a4 = v72;
            a4[1] = (char *)v66;
            a4[2] = v73;
          }
          else
          {
            v78 = 0;
            do
            {
              v79 = &v72[v78];
              v80 = &v76[v78];
              MEMORY[0x1C3BB8524](&v72[v78 - 168], &v76[v78 - 168]);
              v81 = *(_OWORD *)&v76[v78 - 72];
              v82 = *(_OWORD *)&v76[v78 - 56];
              *(_OWORD *)(v79 - 40) = *(_OWORD *)&v76[v78 - 40];
              *(_OWORD *)(v79 - 56) = v82;
              *(_OWORD *)(v79 - 72) = v81;
              *((_QWORD *)v79 - 2) = 0;
              *((_QWORD *)v79 - 1) = 0;
              *((_QWORD *)v79 - 3) = 0;
              *(_OWORD *)(v79 - 24) = *(_OWORD *)&v76[v78 - 24];
              *((_QWORD *)v79 - 1) = *(_QWORD *)&v76[v78 - 8];
              *((_QWORD *)v80 - 3) = 0;
              *((_QWORD *)v80 - 2) = 0;
              *((_QWORD *)v80 - 1) = 0;
              v78 -= 168;
            }
            while (&v76[v78] != v77);
            v83 = &v72[v78];
            a4 = v107;
            v84 = *v107;
            v76 = v107[1];
            *v107 = v83;
            v107[1] = (char *)v66;
            v107[2] = v73;
            if (v76 == v84)
            {
              v4 = v106;
            }
            else
            {
              v4 = v106;
              do
              {
                v112.__r_.__value_.__r.__words[0] = (std::string::size_type)(v76 - 24);
                std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
                MEMORY[0x1C3BB8530](v76 - 168);
                v76 -= 168;
              }
              while (v76 != v84);
              v76 = v84;
            }
          }
          v11 = a2;
          if (v76)
            operator delete(v76);
        }
        else
        {
          v63 = MEMORY[0x1C3BB8524]();
          v64 = v119;
          v65 = v121;
          *(_OWORD *)(v63 + 112) = v120;
          *(_OWORD *)(v63 + 128) = v65;
          *(_OWORD *)(v63 + 96) = v64;
          *(_QWORD *)(v63 + 152) = 0;
          *(_QWORD *)(v63 + 160) = 0;
          *(_QWORD *)(v63 + 144) = 0;
          *(std::string *)(v63 + 144) = v122;
          memset(&v122, 0, sizeof(v122));
          v66 = v63 + 168;
        }
        a4[1] = (char *)v66;
        v112.__r_.__value_.__r.__words[0] = (std::string::size_type)&v122;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
        MEMORY[0x1C3BB8530](buf);
        *(_QWORD *)buf = &v109;
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ++v12;
      }
      while (v12 < 0x8E38E38E38E38E39 * ((uint64_t)(v4[1] - *v4) >> 4));
    }
    *(_QWORD *)buf = v111;
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    v101 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
    {
      v102 = *(int *)(a2 + 40);
      if (v102 >= 8)
      {
        v104 = SNLPOSLoggerForCategory(4);
        v103 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v102;
          _os_log_impl(&dword_1C2196000, v104, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v103 = off_1E7BED840[v102];
      }
      nlv4_inference_orchestrator::span_matching::TagBucketList::getBucketLists((uint64_t)this, &v112);
      v105 = 0x8E38E38E38E38E39 * ((uint64_t)(v4[1] - *v4) >> 4);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v103;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v112.__r_.__value_.__l.__size_ - v112.__r_.__value_.__r.__words[0]) >> 3);
      *(_WORD *)&buf[22] = 2048;
      v117 = (char *)v105;
      _os_log_impl(&dword_1C2196000, v101, OS_LOG_TYPE_ERROR, "[%s] Span encoding failed; number of buckets (%lu) not matching number of tokens (%lu).\n",
        buf,
        0x20u);
      v111[0] = (void **)&v112;
      std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](v111);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1C22B01F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::TagBucketList::~TagBucketList(void **this)
{
  void **v2;

  if (*((char *)this + 223) < 0)
    operator delete(this[25]);
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 5));
  v2 = this + 2;
  std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(uint64_t a1, const void **a2, uint64_t a3, char a4)
{
  const void **v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  int v17;
  int v18;
  size_t v19;
  const void *v20;
  size_t v21;
  const void *v22;
  size_t v23;
  int v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;
  const void *v28;
  void *v29;
  void **v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  const void **v39;
  int v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  unint64_t v46;
  int v47;
  size_t v48;
  const void *v49;
  size_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  const void **v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  void *v60;
  void **v61;
  unint64_t v62;
  size_t v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  BOOL v68;
  unsigned __int8 *v69;
  size_t v70;
  size_t v71;
  const void *v72;
  size_t v73;
  int v74;
  _BOOL4 v75;
  void **v76;
  __int128 v77;
  __int128 v78;
  BOOL v79;
  BOOL v80;
  __int128 v81;
  const void *v82;
  size_t v83;
  const void **v84;
  size_t v85;
  void *v86;
  void **v87;
  size_t v88;
  const void **v89;
  size_t v90;
  int v91;
  BOOL v92;
  const void **v93;
  int v94;
  size_t v95;
  const void *v96;
  size_t v97;
  int v98;
  BOOL v99;
  const void **v100;
  int v101;
  size_t v102;
  const void *v103;
  size_t v104;
  int v105;
  BOOL v106;
  const void **v107;
  const void **v108;
  int v109;
  size_t v110;
  const void *v111;
  size_t v112;
  int v113;
  BOOL v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  const void *v118;
  void *v119;
  void **v120;
  unint64_t v121;
  size_t v122;
  size_t v123;
  const void *v124;
  size_t v125;
  int v126;
  _BOOL4 v127;
  const void **v128;
  size_t v129;
  size_t v130;
  const void *v131;
  size_t v132;
  int v133;
  BOOL v134;
  void **v135;
  __int128 v136;
  __int128 v137;
  int v138;
  int v139;
  size_t v140;
  const void **v141;
  size_t v142;
  const void *v143;
  size_t v144;
  int v145;
  _BOOL4 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  const void *v150;
  const void **v151;
  uint64_t v152;
  const void **v153;
  const void **v154;
  int v155;
  int v156;
  size_t v157;
  const void **v158;
  size_t v159;
  const void *v160;
  size_t v161;
  int v162;
  _BOOL4 v163;
  __int128 v164;
  void *v165;
  void **v166;
  uint64_t v167;
  uint64_t v168;
  void **v169;
  uint64_t v170;
  int v171;
  size_t v172;
  const void *v173;
  size_t v174;
  int v175;
  BOOL v176;
  uint64_t v177;
  __int128 v178;
  int64_t v179;
  int64_t v180;
  int64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  char v186;
  size_t v187;
  const void *v188;
  size_t v189;
  const void *v190;
  size_t v191;
  int v192;
  _BOOL4 v193;
  const void *v194;
  uint64_t v195;
  int v196;
  int v197;
  size_t v198;
  const void *v199;
  size_t v200;
  const void *v201;
  size_t v202;
  int v203;
  BOOL v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  int v209;
  const void *v210;
  int v211;
  const void *v212;
  size_t v213;
  const void *v214;
  int64_t v215;
  size_t v216;
  const void *v217;
  size_t v218;
  int v219;
  _BOOL4 v220;
  BOOL v221;
  const void *v222;
  int v223;
  size_t v224;
  const void *v225;
  void *v226;
  void **v227;
  size_t v228;
  int v229;
  _BOOL4 v230;
  __int128 v231;
  uint64_t v232;
  void **v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  size_t v241;
  const void *v242;
  size_t v243;
  const void *v244;
  size_t v245;
  int v246;
  _BOOL4 v247;
  __int128 v248;
  int v249;
  __int128 v250;
  void *v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  int v255;
  int v256;
  size_t v257;
  const void *v258;
  size_t v259;
  const void *v260;
  size_t v261;
  int v262;
  _BOOL4 v263;
  __int128 v264;
  void *v265;
  void **v266;
  uint64_t v267;
  __int128 v268;
  int v269;
  size_t v270;
  const void *v271;
  size_t v272;
  int v273;
  BOOL v274;
  __int128 v275;
  uint64_t v276;
  const void *v278;
  unint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  size_t v283;
  const void *v284;
  size_t v285;
  const void *v286;
  size_t v287;
  int v288;
  _BOOL4 v289;
  __int128 v290;
  void *v291;
  void **v292;
  const void **v293;
  void **v294;
  const void **v295;
  int v296;
  size_t v297;
  const void *v298;
  size_t v299;
  int v300;
  BOOL v301;
  __int128 v302;
  unint64_t v303;
  const void **v304;
  const void *v305;
  uint64_t v306;
  const void **v307;
  const void *v308;
  void **v309;
  unint64_t v310;
  void *v311;
  int64_t v313;
  void *v314;
  const void **v315;
  char v316;
  void *__p[2];
  const void *v318;
  const void *v319;
  __int128 v320;
  const void *v321;
  uint64_t v322;

  v322 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v7 = a2 - 4;
  v307 = a2 - 8;
  v304 = a2 - 12;
  v8 = a1;
  v315 = a2;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v138 = *(char *)(v8 + 23);
        v139 = *((char *)a2 - 9);
        if (v139 >= 0)
          v140 = *((unsigned __int8 *)a2 - 9);
        else
          v140 = (size_t)*(a2 - 3);
        if (v139 >= 0)
          v141 = v7;
        else
          v141 = (const void **)*(a2 - 4);
        if (v138 >= 0)
          v142 = *(unsigned __int8 *)(v8 + 23);
        else
          v142 = *(_QWORD *)(v8 + 8);
        if (v138 >= 0)
          v143 = (const void *)v8;
        else
          v143 = *(const void **)v8;
        if (v142 >= v140)
          v144 = v140;
        else
          v144 = v142;
        v145 = memcmp(v141, v143, v144);
        v146 = v140 < v142;
        if (v145)
          v146 = v145 < 0;
        if (v146)
        {
          v147 = *(_OWORD *)v8;
          v318 = *(const void **)(v8 + 16);
          *(_OWORD *)__p = v147;
          v148 = *(_OWORD *)v7;
          *(_QWORD *)(v8 + 16) = v7[2];
          *(_OWORD *)v8 = v148;
          v149 = *(_OWORD *)__p;
          v7[2] = v318;
          *(_OWORD *)v7 = v149;
          v150 = *(const void **)(v8 + 24);
          *(_QWORD *)(v8 + 24) = *(a2 - 1);
          *(a2 - 1) = v150;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)v8, (const void **)(v8 + 32), v7);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(v8, (__int128 *)(v8 + 32), (__int128 *)(v8 + 64), v7);
        return;
      case 5uLL:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(v8, v8 + 32, v8 + 64, (__int128 *)(v8 + 96), v7);
        return;
      default:
        if (v9 > 767)
        {
          if (!a3)
          {
            if ((const void **)v8 != a2)
            {
              v303 = (unint64_t)a2 - v8;
              v179 = (v10 - 2) >> 1;
              v180 = v179;
              v306 = a1;
              v310 = v10;
              do
              {
                v181 = v180;
                if (v179 >= v180)
                {
                  v313 = v180;
                  v182 = (2 * v180) | 1;
                  v183 = a1 + 32 * v182;
                  v184 = 2 * v180 + 2;
                  if (v184 >= (uint64_t)v10)
                  {
                    v194 = *(const void **)v183;
                  }
                  else
                  {
                    v185 = *(_BYTE *)(v183 + 55);
                    v305 = *(const void **)(v183 + 32);
                    v186 = *(_BYTE *)(v183 + 23);
                    v308 = *(const void **)v183;
                    if (v186 >= 0)
                      v187 = *(unsigned __int8 *)(v183 + 23);
                    else
                      v187 = *(_QWORD *)(v183 + 8);
                    if (v186 >= 0)
                      v188 = (const void *)(a1 + 32 * v182);
                    else
                      v188 = *(const void **)v183;
                    if (v185 >= 0)
                      v189 = *(unsigned __int8 *)(v183 + 55);
                    else
                      v189 = *(_QWORD *)(v183 + 40);
                    if (v185 >= 0)
                      v190 = (const void *)(v183 + 32);
                    else
                      v190 = *(const void **)(v183 + 32);
                    if (v189 >= v187)
                      v191 = v187;
                    else
                      v191 = v189;
                    v192 = memcmp(v188, v190, v191);
                    v193 = v187 < v189;
                    if (v192)
                      v193 = v192 < 0;
                    v221 = !v193;
                    v194 = v308;
                    if (!v221)
                    {
                      v194 = v305;
                      v183 += 32;
                      v182 = v184;
                    }
                  }
                  v195 = a1 + 32 * v313;
                  v196 = *(char *)(v195 + 23);
                  v197 = *(char *)(v183 + 23);
                  if (v197 >= 0)
                    v198 = *(unsigned __int8 *)(v183 + 23);
                  else
                    v198 = *(_QWORD *)(v183 + 8);
                  if (v197 >= 0)
                    v199 = (const void *)v183;
                  else
                    v199 = v194;
                  if (v196 >= 0)
                    v200 = *(unsigned __int8 *)(v195 + 23);
                  else
                    v200 = *(_QWORD *)(v195 + 8);
                  if (v196 >= 0)
                    v201 = (const void *)(a1 + 32 * v313);
                  else
                    v201 = *(const void **)v195;
                  if (v200 >= v198)
                    v202 = v198;
                  else
                    v202 = v200;
                  v203 = memcmp(v199, v201, v202);
                  v181 = v313;
                  v204 = v198 < v200;
                  if (v203)
                    v204 = v203 < 0;
                  if (!v204)
                  {
                    v205 = *(_OWORD *)v195;
                    v318 = *(const void **)(v195 + 16);
                    *(_OWORD *)__p = v205;
                    *(_QWORD *)(v195 + 8) = 0;
                    *(_QWORD *)(v195 + 16) = 0;
                    *(_QWORD *)v195 = 0;
                    v319 = *(const void **)(a1 + 32 * v313 + 24);
                    do
                    {
                      v206 = v183;
                      if (*(char *)(v195 + 23) < 0)
                        operator delete(*(void **)v195);
                      v207 = *(_OWORD *)v183;
                      *(_QWORD *)(v195 + 16) = *(_QWORD *)(v183 + 16);
                      *(_OWORD *)v195 = v207;
                      *(_BYTE *)(v183 + 23) = 0;
                      *(_BYTE *)v183 = 0;
                      *(_QWORD *)(v195 + 24) = *(_QWORD *)(v183 + 24);
                      if (v179 < v182)
                        break;
                      v208 = (2 * v182) | 1;
                      v183 = a1 + 32 * v208;
                      v182 = 2 * v182 + 2;
                      if (v182 >= (uint64_t)v10)
                      {
                        v222 = *(const void **)v183;
                        v182 = v208;
                      }
                      else
                      {
                        v209 = *(char *)(v183 + 55);
                        v210 = *(const void **)(v183 + 32);
                        v211 = *(char *)(v183 + 23);
                        v212 = *(const void **)v183;
                        if (v211 >= 0)
                          v213 = *(unsigned __int8 *)(v183 + 23);
                        else
                          v213 = *(_QWORD *)(v183 + 8);
                        if (v211 >= 0)
                          v214 = (const void *)(a1 + 32 * v208);
                        else
                          v214 = *(const void **)v183;
                        v215 = v179;
                        if (v209 >= 0)
                          v216 = *(unsigned __int8 *)(v183 + 55);
                        else
                          v216 = *(_QWORD *)(v183 + 40);
                        if (v209 >= 0)
                          v217 = (const void *)(v183 + 32);
                        else
                          v217 = *(const void **)(v183 + 32);
                        if (v216 >= v213)
                          v218 = v213;
                        else
                          v218 = v216;
                        v219 = memcmp(v214, v217, v218);
                        v79 = v213 >= v216;
                        v179 = v215;
                        v220 = !v79;
                        if (v219)
                          v220 = v219 < 0;
                        v221 = !v220;
                        v222 = v220 ? v210 : v212;
                        v10 = v310;
                        a1 = v306;
                        if (v221)
                          v182 = v208;
                        else
                          v183 += 32;
                      }
                      v223 = *(char *)(v183 + 23);
                      if (v223 >= 0)
                        v224 = *(unsigned __int8 *)(v183 + 23);
                      else
                        v224 = *(_QWORD *)(v183 + 8);
                      if (v223 >= 0)
                        v225 = (const void *)v183;
                      else
                        v225 = v222;
                      if (SHIBYTE(v318) >= 0)
                        v226 = (void *)HIBYTE(v318);
                      else
                        v226 = __p[1];
                      if (SHIBYTE(v318) >= 0)
                        v227 = __p;
                      else
                        v227 = (void **)__p[0];
                      if ((unint64_t)v226 >= v224)
                        v228 = v224;
                      else
                        v228 = (size_t)v226;
                      v229 = memcmp(v225, v227, v228);
                      v230 = v224 < (unint64_t)v226;
                      if (v229)
                        v230 = v229 < 0;
                      v195 = v206;
                    }
                    while (!v230);
                    if (*(char *)(v206 + 23) < 0)
                      operator delete(*(void **)v206);
                    v231 = *(_OWORD *)__p;
                    *(_QWORD *)(v206 + 16) = v318;
                    *(_OWORD *)v206 = v231;
                    *(_QWORD *)(v206 + 24) = v319;
                    v181 = v313;
                  }
                }
                v180 = v181 - 1;
              }
              while (v181);
              v232 = v303 >> 5;
              v233 = (void **)v315;
              do
              {
                v234 = 0;
                v314 = *(void **)a1;
                *(_QWORD *)&v320 = *(_QWORD *)(a1 + 8);
                *(_QWORD *)((char *)&v320 + 7) = *(_QWORD *)(a1 + 15);
                v316 = *(_BYTE *)(a1 + 23);
                *(_QWORD *)(a1 + 8) = 0;
                *(_QWORD *)(a1 + 16) = 0;
                *(_QWORD *)a1 = 0;
                v309 = v233;
                v311 = *(void **)(a1 + 24);
                v235 = a1;
                do
                {
                  v236 = v235 + 32 * v234 + 32;
                  v237 = 2 * v234;
                  v234 = (2 * v234) | 1;
                  v238 = v237 + 2;
                  if (v237 + 2 < v232)
                  {
                    v239 = *(char *)(v236 + 55);
                    v240 = *(char *)(v236 + 23);
                    if (v240 >= 0)
                      v241 = *(unsigned __int8 *)(v236 + 23);
                    else
                      v241 = *(_QWORD *)(v236 + 8);
                    if (v240 >= 0)
                      v242 = (const void *)v236;
                    else
                      v242 = *(const void **)v236;
                    if (v239 >= 0)
                      v243 = *(unsigned __int8 *)(v236 + 55);
                    else
                      v243 = *(_QWORD *)(v236 + 40);
                    if (v239 >= 0)
                      v244 = (const void *)(v236 + 32);
                    else
                      v244 = *(const void **)(v236 + 32);
                    if (v243 >= v241)
                      v245 = v241;
                    else
                      v245 = v243;
                    v246 = memcmp(v242, v244, v245);
                    v247 = v241 < v243;
                    if (v246)
                      v247 = v246 < 0;
                    if (v247)
                    {
                      v236 += 32;
                      v234 = v238;
                    }
                  }
                  if (*(char *)(v235 + 23) < 0)
                    operator delete(*(void **)v235);
                  v248 = *(_OWORD *)v236;
                  *(_QWORD *)(v235 + 16) = *(_QWORD *)(v236 + 16);
                  *(_OWORD *)v235 = v248;
                  *(_BYTE *)(v236 + 23) = 0;
                  *(_BYTE *)v236 = 0;
                  *(_QWORD *)(v235 + 24) = *(_QWORD *)(v236 + 24);
                  v235 = v236;
                }
                while (v234 <= (uint64_t)((unint64_t)(v232 - 2) >> 1));
                v233 = v309 - 4;
                v249 = *(char *)(v236 + 23);
                if ((void **)v236 == v309 - 4)
                {
                  if (v249 < 0)
                    operator delete(*(void **)v236);
                  *(_QWORD *)v236 = v314;
                  v276 = *(_QWORD *)((char *)&v320 + 7);
                  *(_QWORD *)(v236 + 8) = v320;
                  *(_QWORD *)(v236 + 15) = v276;
                  *(_BYTE *)(v236 + 23) = v316;
                  *(_QWORD *)(v236 + 24) = v311;
                }
                else
                {
                  if (v249 < 0)
                    operator delete(*(void **)v236);
                  v250 = *(_OWORD *)v233;
                  *(_QWORD *)(v236 + 16) = *(v309 - 2);
                  *(_OWORD *)v236 = v250;
                  *((_BYTE *)v309 - 9) = 0;
                  *((_BYTE *)v309 - 32) = 0;
                  *(_QWORD *)(v236 + 24) = *(v309 - 1);
                  if (*((char *)v309 - 9) < 0)
                    operator delete(*v233);
                  *(v309 - 4) = v314;
                  v251 = (void *)v320;
                  *(void **)((char *)v309 - 17) = *(void **)((char *)&v320 + 7);
                  *(v309 - 3) = v251;
                  *((_BYTE *)v309 - 9) = v316;
                  *(v309 - 1) = v311;
                  v252 = v236 + 32 - a1;
                  if (v252 >= 33)
                  {
                    v253 = (((unint64_t)v252 >> 5) - 2) >> 1;
                    v254 = a1 + 32 * v253;
                    v255 = *(char *)(v236 + 23);
                    v256 = *(char *)(v254 + 23);
                    if (v256 >= 0)
                      v257 = *(unsigned __int8 *)(v254 + 23);
                    else
                      v257 = *(_QWORD *)(v254 + 8);
                    if (v256 >= 0)
                      v258 = (const void *)(a1 + 32 * v253);
                    else
                      v258 = *(const void **)v254;
                    if (v255 >= 0)
                      v259 = *(unsigned __int8 *)(v236 + 23);
                    else
                      v259 = *(_QWORD *)(v236 + 8);
                    if (v255 >= 0)
                      v260 = (const void *)v236;
                    else
                      v260 = *(const void **)v236;
                    if (v259 >= v257)
                      v261 = v257;
                    else
                      v261 = v259;
                    v262 = memcmp(v258, v260, v261);
                    v263 = v257 < v259;
                    if (v262)
                      v263 = v262 < 0;
                    if (v263)
                    {
                      v264 = *(_OWORD *)v236;
                      v318 = *(const void **)(v236 + 16);
                      *(_OWORD *)__p = v264;
                      *(_QWORD *)(v236 + 8) = 0;
                      *(_QWORD *)(v236 + 16) = 0;
                      *(_QWORD *)v236 = 0;
                      v319 = *(const void **)(v236 + 24);
                      if (SHIBYTE(v318) >= 0)
                        v265 = (void *)HIBYTE(v318);
                      else
                        v265 = __p[1];
                      if (SHIBYTE(v318) >= 0)
                        v266 = __p;
                      else
                        v266 = (void **)__p[0];
                      do
                      {
                        v267 = v254;
                        if (*(char *)(v236 + 23) < 0)
                          operator delete(*(void **)v236);
                        v268 = *(_OWORD *)v254;
                        *(_QWORD *)(v236 + 16) = *(_QWORD *)(v254 + 16);
                        *(_OWORD *)v236 = v268;
                        *(_BYTE *)(v254 + 23) = 0;
                        *(_BYTE *)v254 = 0;
                        *(_QWORD *)(v236 + 24) = *(_QWORD *)(v254 + 24);
                        if (!v253)
                          break;
                        v253 = (v253 - 1) >> 1;
                        v254 = a1 + 32 * v253;
                        v269 = *(char *)(v254 + 23);
                        if (v269 >= 0)
                          v270 = *(unsigned __int8 *)(v254 + 23);
                        else
                          v270 = *(_QWORD *)(v254 + 8);
                        if (v269 >= 0)
                          v271 = (const void *)(a1 + 32 * v253);
                        else
                          v271 = *(const void **)v254;
                        if ((unint64_t)v265 >= v270)
                          v272 = v270;
                        else
                          v272 = (size_t)v265;
                        v273 = memcmp(v271, v266, v272);
                        v274 = v270 < (unint64_t)v265;
                        if (v273)
                          v274 = v273 < 0;
                        v236 = v267;
                      }
                      while (v274);
                      if (*(char *)(v267 + 23) < 0)
                        operator delete(*(void **)v267);
                      v275 = *(_OWORD *)__p;
                      *(_QWORD *)(v267 + 16) = v318;
                      *(_OWORD *)v267 = v275;
                      *(_QWORD *)(v267 + 24) = v319;
                      v233 = v309 - 4;
                    }
                  }
                }
              }
              while (v232-- > 2);
            }
            return;
          }
          v11 = v8 + 32 * (v10 >> 1);
          if ((unint64_t)v9 <= 0x1000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 32 * (v10 >> 1)), (const void **)a1, v7);
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32 * (v10 >> 1)), v7);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 32), (const void **)(v11 - 32), v307);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(a1 + 64), (const void **)(a1 + 32 + 32 * (v10 >> 1)), v304);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)(v11 - 32), (const void **)(a1 + 32 * (v10 >> 1)), (const void **)(a1 + 32 + 32 * (v10 >> 1)));
            v12 = *(_OWORD *)a1;
            v13 = *(_QWORD *)(a1 + 24);
            v318 = *(const void **)(a1 + 16);
            *(_OWORD *)__p = v12;
            v14 = *(_QWORD *)(v11 + 16);
            v15 = *(_QWORD *)(v11 + 24);
            *(_OWORD *)a1 = *(_OWORD *)v11;
            *(_QWORD *)(a1 + 16) = v14;
            *(_QWORD *)(a1 + 24) = v15;
            v16 = v318;
            *(_OWORD *)v11 = *(_OWORD *)__p;
            *(_QWORD *)(v11 + 16) = v16;
            *(_QWORD *)(v11 + 24) = v13;
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            v17 = *(char *)(a1 + 23);
            v18 = *(char *)(a1 - 9);
            if (v18 >= 0)
              v19 = *(unsigned __int8 *)(a1 - 9);
            else
              v19 = *(_QWORD *)(a1 - 24);
            if (v18 >= 0)
              v20 = (const void *)(a1 - 32);
            else
              v20 = *(const void **)(a1 - 32);
            if (v17 >= 0)
              v21 = *(unsigned __int8 *)(a1 + 23);
            else
              v21 = *(_QWORD *)(a1 + 8);
            if (v17 >= 0)
              v22 = (const void *)a1;
            else
              v22 = *(const void **)a1;
            if (v21 >= v19)
              v23 = v19;
            else
              v23 = v21;
            v24 = memcmp(v20, v22, v23);
            v25 = v19 < v21;
            if (v24)
              v25 = v24 < 0;
            if (!v25)
            {
              v81 = *(_OWORD *)a1;
              v82 = *(const void **)(a1 + 24);
              v318 = *(const void **)(a1 + 16);
              *(_OWORD *)__p = v81;
              *(_QWORD *)(a1 + 8) = 0;
              *(_QWORD *)(a1 + 16) = 0;
              *(_QWORD *)a1 = 0;
              v319 = v82;
              v83 = *((unsigned __int8 *)a2 - 9);
              v84 = (const void **)*(a2 - 4);
              v85 = (size_t)*(a2 - 3);
              if (SHIBYTE(v318) >= 0)
                v86 = (void *)HIBYTE(v318);
              else
                v86 = __p[1];
              if (SHIBYTE(v318) >= 0)
                v87 = __p;
              else
                v87 = (void **)__p[0];
              if ((v83 & 0x80u) == 0)
                v88 = v83;
              else
                v88 = v85;
              if ((v83 & 0x80u) == 0)
                v89 = v7;
              else
                v89 = v84;
              if (v88 >= (unint64_t)v86)
                v90 = (size_t)v86;
              else
                v90 = v88;
              v91 = memcmp(v87, v89, v90);
              v92 = (unint64_t)v86 < v88;
              if (v91)
                v92 = v91 < 0;
              if (v92)
              {
                v93 = (const void **)(a1 + 32);
                do
                {
                  v94 = *((char *)v93 + 23);
                  if (v94 >= 0)
                    v95 = *((unsigned __int8 *)v93 + 23);
                  else
                    v95 = (size_t)v93[1];
                  if (v94 >= 0)
                    v96 = v93;
                  else
                    v96 = *v93;
                  if (v95 >= (unint64_t)v86)
                    v97 = (size_t)v86;
                  else
                    v97 = v95;
                  v98 = memcmp(v87, v96, v97);
                  v99 = (unint64_t)v86 < v95;
                  if (v98)
                    v99 = v98 < 0;
                  v93 += 4;
                }
                while (!v99);
                v8 = (unint64_t)(v93 - 4);
              }
              else
              {
                v100 = (const void **)(a1 + 32);
                do
                {
                  v8 = (unint64_t)v100;
                  if (v100 >= v315)
                    break;
                  v101 = *((char *)v100 + 23);
                  if (v101 >= 0)
                    v102 = *((unsigned __int8 *)v100 + 23);
                  else
                    v102 = (size_t)v100[1];
                  if (v101 >= 0)
                    v103 = v100;
                  else
                    v103 = *v100;
                  if (v102 >= (unint64_t)v86)
                    v104 = (size_t)v86;
                  else
                    v104 = v102;
                  v105 = memcmp(v87, v103, v104);
                  v106 = v105 < 0;
                  if (!v105)
                    v106 = (unint64_t)v86 < v102;
                  v100 = (const void **)(v8 + 32);
                }
                while (!v106);
              }
              v107 = v315;
              if (v8 < (unint64_t)v315)
              {
                v108 = v7;
                do
                {
                  v109 = *((char *)v108 + 23);
                  if (v109 >= 0)
                    v110 = *((unsigned __int8 *)v108 + 23);
                  else
                    v110 = (size_t)v108[1];
                  if (v109 >= 0)
                    v111 = v108;
                  else
                    v111 = *v108;
                  if (v110 >= (unint64_t)v86)
                    v112 = (size_t)v86;
                  else
                    v112 = v110;
                  v113 = memcmp(v87, v111, v112);
                  v114 = (unint64_t)v86 < v110;
                  if (v113)
                    v114 = v113 < 0;
                  v108 -= 4;
                }
                while (v114);
                v107 = v108 + 4;
              }
              while (v8 < (unint64_t)v107)
              {
                v115 = *(_OWORD *)v8;
                v321 = *(const void **)(v8 + 16);
                v320 = v115;
                v116 = *(_OWORD *)v107;
                *(_QWORD *)(v8 + 16) = v107[2];
                *(_OWORD *)v8 = v116;
                v117 = v320;
                v107[2] = v321;
                *(_OWORD *)v107 = v117;
                v118 = *(const void **)(v8 + 24);
                *(_QWORD *)(v8 + 24) = v107[3];
                v107[3] = v118;
                if (SHIBYTE(v318) >= 0)
                  v119 = (void *)HIBYTE(v318);
                else
                  v119 = __p[1];
                if (SHIBYTE(v318) >= 0)
                  v120 = __p;
                else
                  v120 = (void **)__p[0];
                v121 = v8 + 32;
                do
                {
                  v8 = v121;
                  v122 = *(unsigned __int8 *)(v121 + 23);
                  if ((v122 & 0x80u) == 0)
                    v123 = v122;
                  else
                    v123 = *(_QWORD *)(v8 + 8);
                  if ((v122 & 0x80u) == 0)
                    v124 = (const void *)v8;
                  else
                    v124 = *(const void **)v8;
                  if (v123 >= (unint64_t)v119)
                    v125 = (size_t)v119;
                  else
                    v125 = v123;
                  v126 = memcmp(v120, v124, v125);
                  v127 = v126 < 0;
                  if (!v126)
                    v127 = (unint64_t)v119 < v123;
                  v121 = v8 + 32;
                }
                while (!v127);
                v128 = v107 - 4;
                do
                {
                  v107 = v128;
                  v129 = *((unsigned __int8 *)v128 + 23);
                  if ((v129 & 0x80u) == 0)
                    v130 = v129;
                  else
                    v130 = (size_t)v107[1];
                  if ((v129 & 0x80u) == 0)
                    v131 = v107;
                  else
                    v131 = *v107;
                  if (v130 >= (unint64_t)v119)
                    v132 = (size_t)v119;
                  else
                    v132 = v130;
                  v133 = memcmp(v120, v131, v132);
                  v134 = v133 < 0;
                  if (!v133)
                    v134 = (unint64_t)v119 < v130;
                  v128 = v107 - 4;
                }
                while (v134);
              }
              v135 = (void **)(v8 - 32);
              a2 = v315;
              if (v8 - 32 != a1)
              {
                if (*(char *)(a1 + 23) < 0)
                  operator delete(*(void **)a1);
                v136 = *(_OWORD *)v135;
                *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
                *(_OWORD *)a1 = v136;
                *(_BYTE *)(v8 - 9) = 0;
                *(_BYTE *)(v8 - 32) = 0;
                *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
              }
              if (*(char *)(v8 - 9) < 0)
                operator delete(*v135);
              v137 = *(_OWORD *)__p;
              *(_QWORD *)(v8 - 16) = v318;
              *(_OWORD *)v135 = v137;
              HIBYTE(v318) = 0;
              LOBYTE(__p[0]) = 0;
              *(_QWORD *)(v8 - 8) = v319;
              if (SHIBYTE(v318) < 0)
                operator delete(__p[0]);
              goto LABEL_123;
            }
          }
          v26 = 0;
          v27 = *(_OWORD *)a1;
          v28 = *(const void **)(a1 + 24);
          v318 = *(const void **)(a1 + 16);
          *(_OWORD *)__p = v27;
          *(_QWORD *)(a1 + 8) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_QWORD *)a1 = 0;
          v319 = v28;
          if (SHIBYTE(v318) >= 0)
            v29 = (void *)HIBYTE(v318);
          else
            v29 = __p[1];
          if (SHIBYTE(v318) >= 0)
            v30 = __p;
          else
            v30 = (void **)__p[0];
          do
          {
            v31 = *(char *)(a1 + v26 + 55);
            if (v31 >= 0)
              v32 = *(unsigned __int8 *)(a1 + v26 + 55);
            else
              v32 = *(_QWORD *)(a1 + v26 + 40);
            if (v31 >= 0)
              v33 = (const void *)(a1 + v26 + 32);
            else
              v33 = *(const void **)(a1 + v26 + 32);
            if ((unint64_t)v29 >= v32)
              v34 = v32;
            else
              v34 = (size_t)v29;
            v35 = memcmp(v33, v30, v34);
            v36 = v32 < (unint64_t)v29;
            if (v35)
              v36 = v35 < 0;
            v26 += 32;
          }
          while (v36);
          v37 = a1 + v26;
          v38 = a1 + v26 - 32;
          v39 = v7;
          if (v38 == a1)
          {
            v39 = v7;
            while (1)
            {
              v46 = (unint64_t)(v39 + 4);
              if (v37 >= (unint64_t)(v39 + 4))
                break;
              v47 = *((char *)v39 + 23);
              if (v47 >= 0)
                v48 = *((unsigned __int8 *)v39 + 23);
              else
                v48 = (size_t)v39[1];
              if (v47 >= 0)
                v49 = v39;
              else
                v49 = *v39;
              if ((unint64_t)v29 >= v48)
                v50 = v48;
              else
                v50 = (size_t)v29;
              v51 = memcmp(v49, v30, v50);
              v52 = v48 < (unint64_t)v29;
              if (v51)
                v52 = v51 < 0;
              v39 -= 4;
              if (v52)
                goto LABEL_74;
            }
            v53 = a3;
          }
          else
          {
            do
            {
              v40 = *((char *)v39 + 23);
              if (v40 >= 0)
                v41 = *((unsigned __int8 *)v39 + 23);
              else
                v41 = (size_t)v39[1];
              if (v40 >= 0)
                v42 = v39;
              else
                v42 = *v39;
              if ((unint64_t)v29 >= v41)
                v43 = v41;
              else
                v43 = (size_t)v29;
              v44 = memcmp(v42, v30, v43);
              v45 = v41 < (unint64_t)v29;
              if (v44)
                v45 = v44 < 0;
              v39 -= 4;
            }
            while (!v45);
LABEL_74:
            v53 = a3;
            v46 = (unint64_t)(v39 + 4);
          }
          v54 = v7;
          v8 = v37;
          if (v37 < v46)
          {
            v55 = (_QWORD *)v46;
            do
            {
              v56 = *(_OWORD *)v8;
              v321 = *(const void **)(v8 + 16);
              v320 = v56;
              v57 = *(_OWORD *)v55;
              *(_QWORD *)(v8 + 16) = v55[2];
              *(_OWORD *)v8 = v57;
              v58 = v320;
              v55[2] = v321;
              *(_OWORD *)v55 = v58;
              v59 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = v55[3];
              v55[3] = v59;
              if (SHIBYTE(v318) >= 0)
                v60 = (void *)HIBYTE(v318);
              else
                v60 = __p[1];
              if (SHIBYTE(v318) >= 0)
                v61 = __p;
              else
                v61 = (void **)__p[0];
              v62 = v8 + 32;
              do
              {
                v8 = v62;
                v63 = *(unsigned __int8 *)(v62 + 23);
                if ((v63 & 0x80u) == 0)
                  v64 = v63;
                else
                  v64 = *(_QWORD *)(v8 + 8);
                if ((v63 & 0x80u) == 0)
                  v65 = (const void *)v8;
                else
                  v65 = *(const void **)v8;
                if ((unint64_t)v60 >= v64)
                  v66 = v64;
                else
                  v66 = (size_t)v60;
                v67 = memcmp(v65, v61, v66);
                v68 = v67 < 0;
                if (!v67)
                  v68 = v64 < (unint64_t)v60;
                v62 = v8 + 32;
              }
              while (v68);
              v69 = (unsigned __int8 *)(v55 - 4);
              do
              {
                v55 = v69;
                v70 = v69[23];
                if ((v70 & 0x80u) == 0)
                  v71 = v70;
                else
                  v71 = v55[1];
                if ((v70 & 0x80u) == 0)
                  v72 = v55;
                else
                  v72 = (const void *)*v55;
                if ((unint64_t)v60 >= v71)
                  v73 = v71;
                else
                  v73 = (size_t)v60;
                v74 = memcmp(v72, v61, v73);
                v75 = v74 < 0;
                if (!v74)
                  v75 = v71 < (unint64_t)v60;
                v69 = (unsigned __int8 *)(v55 - 4);
              }
              while (!v75);
            }
            while (v8 < (unint64_t)v55);
          }
          v76 = (void **)(v8 - 32);
          v7 = v54;
          a3 = v53;
          if (v8 - 32 != a1)
          {
            if (*(char *)(a1 + 23) < 0)
              operator delete(*(void **)a1);
            v77 = *(_OWORD *)v76;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 16);
            *(_OWORD *)a1 = v77;
            *(_BYTE *)(v8 - 9) = 0;
            *(_BYTE *)(v8 - 32) = 0;
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(v8 - 8);
          }
          if (*(char *)(v8 - 9) < 0)
            operator delete(*v76);
          v78 = *(_OWORD *)__p;
          *(_QWORD *)(v8 - 16) = v318;
          *(_OWORD *)v76 = v78;
          HIBYTE(v318) = 0;
          LOBYTE(__p[0]) = 0;
          *(_QWORD *)(v8 - 8) = v319;
          if (SHIBYTE(v318) < 0)
            operator delete(__p[0]);
          v79 = v37 >= v46;
          a2 = v315;
          if (!v79)
            goto LABEL_122;
          v80 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (const void **)(v8 - 32));
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(v8, v315))
          {
            if (v80)
              continue;
LABEL_122:
            std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,false>(a1, v8 - 32, v53, a4 & 1);
LABEL_123:
            a4 = 0;
            continue;
          }
          a2 = (const void **)(v8 - 32);
          if (v80)
            return;
          goto LABEL_2;
        }
        if ((a4 & 1) != 0)
        {
          if ((const void **)v8 != a2)
          {
            v151 = (const void **)(v8 + 32);
            if ((const void **)(v8 + 32) != a2)
            {
              v152 = 0;
              v153 = (const void **)v8;
              do
              {
                v154 = v151;
                v155 = *((char *)v153 + 23);
                v156 = *((char *)v153 + 55);
                if (v156 >= 0)
                  v157 = *((unsigned __int8 *)v153 + 55);
                else
                  v157 = (size_t)v153[5];
                if (v156 >= 0)
                  v158 = v151;
                else
                  v158 = (const void **)v153[4];
                if (v155 >= 0)
                  v159 = *((unsigned __int8 *)v153 + 23);
                else
                  v159 = (size_t)v153[1];
                if (v155 >= 0)
                  v160 = v153;
                else
                  v160 = *v153;
                if (v159 >= v157)
                  v161 = v157;
                else
                  v161 = v159;
                v162 = memcmp(v158, v160, v161);
                v163 = v157 < v159;
                if (v162)
                  v163 = v162 < 0;
                if (v163)
                {
                  v164 = *(_OWORD *)v154;
                  v318 = v154[2];
                  *(_OWORD *)__p = v164;
                  v154[1] = 0;
                  v154[2] = 0;
                  *v154 = 0;
                  v319 = v153[7];
                  if (SHIBYTE(v318) >= 0)
                    v165 = (void *)HIBYTE(v318);
                  else
                    v165 = __p[1];
                  if (SHIBYTE(v318) >= 0)
                    v166 = __p;
                  else
                    v166 = (void **)__p[0];
                  v167 = v152;
                  while (1)
                  {
                    v168 = a1 + v167;
                    v169 = (void **)(a1 + v167 + 32);
                    if (*(char *)(a1 + v167 + 55) < 0)
                      operator delete(*v169);
                    *(_OWORD *)v169 = *(_OWORD *)v168;
                    v170 = *(_QWORD *)(v168 + 24);
                    *(_QWORD *)(a1 + v167 + 48) = *(_QWORD *)(v168 + 16);
                    *(_BYTE *)(v168 + 23) = 0;
                    *(_BYTE *)v168 = 0;
                    *(_QWORD *)(v168 + 56) = v170;
                    if (!v167)
                      break;
                    v171 = *(char *)(a1 + v167 - 9);
                    if (v171 >= 0)
                      v172 = *(unsigned __int8 *)(a1 + v167 - 9);
                    else
                      v172 = *(_QWORD *)(a1 + v167 - 24);
                    if (v171 >= 0)
                      v173 = (const void *)(a1 + v167 - 32);
                    else
                      v173 = *(const void **)(a1 + v167 - 32);
                    if (v172 >= (unint64_t)v165)
                      v174 = (size_t)v165;
                    else
                      v174 = v172;
                    v175 = memcmp(v166, v173, v174);
                    v176 = (unint64_t)v165 < v172;
                    if (v175)
                      v176 = v175 < 0;
                    v167 -= 32;
                    if (!v176)
                    {
                      v177 = a1 + v167 + 32;
                      goto LABEL_298;
                    }
                  }
                  v177 = a1;
LABEL_298:
                  if (*(char *)(v177 + 23) < 0)
                    operator delete(*(void **)v177);
                  v178 = *(_OWORD *)__p;
                  *(_QWORD *)(v177 + 16) = v318;
                  *(_OWORD *)v177 = v178;
                  *(_QWORD *)(v177 + 24) = v319;
                }
                v151 = v154 + 4;
                v152 += 32;
                v153 = v154;
              }
              while (v154 + 4 != v315);
            }
          }
        }
        else if ((const void **)v8 != a2)
        {
          v278 = (const void *)(v8 + 32);
          if ((const void **)(v8 + 32) != a2)
          {
            v279 = v8 - 32;
            do
            {
              v280 = (uint64_t)v278;
              v281 = *(char *)(a1 + 23);
              v282 = *(char *)(a1 + 55);
              if (v282 >= 0)
                v283 = *(unsigned __int8 *)(a1 + 55);
              else
                v283 = *(_QWORD *)(a1 + 40);
              if (v282 >= 0)
                v284 = v278;
              else
                v284 = *(const void **)(a1 + 32);
              if (v281 >= 0)
                v285 = *(unsigned __int8 *)(a1 + 23);
              else
                v285 = *(_QWORD *)(a1 + 8);
              if (v281 >= 0)
                v286 = (const void *)a1;
              else
                v286 = *(const void **)a1;
              if (v285 >= v283)
                v287 = v283;
              else
                v287 = v285;
              v288 = memcmp(v284, v286, v287);
              v289 = v283 < v285;
              if (v288)
                v289 = v288 < 0;
              if (v289)
              {
                v290 = *(_OWORD *)v280;
                v318 = *(const void **)(v280 + 16);
                *(_OWORD *)__p = v290;
                *(_QWORD *)(v280 + 8) = 0;
                *(_QWORD *)(v280 + 16) = 0;
                *(_QWORD *)v280 = 0;
                v319 = *(const void **)(a1 + 56);
                if (SHIBYTE(v318) >= 0)
                  v291 = (void *)HIBYTE(v318);
                else
                  v291 = __p[1];
                if (SHIBYTE(v318) >= 0)
                  v292 = __p;
                else
                  v292 = (void **)__p[0];
                v293 = (const void **)v279;
                do
                {
                  v294 = (void **)(v293 + 8);
                  if (*((char *)v293 + 87) < 0)
                    operator delete(*v294);
                  *(_OWORD *)v294 = *((_OWORD *)v293 + 2);
                  v293[10] = v293[6];
                  *((_BYTE *)v293 + 32) = 0;
                  v295 = v293 + 4;
                  *((_BYTE *)v293 + 55) = 0;
                  v293[11] = v293[7];
                  v296 = *((char *)v293 + 23);
                  if (v296 >= 0)
                    v297 = *((unsigned __int8 *)v293 + 23);
                  else
                    v297 = (size_t)v293[1];
                  if (v296 >= 0)
                    v298 = v293;
                  else
                    v298 = *v293;
                  if (v297 >= (unint64_t)v291)
                    v299 = (size_t)v291;
                  else
                    v299 = v297;
                  v300 = memcmp(v292, v298, v299);
                  v301 = (unint64_t)v291 < v297;
                  if (v300)
                    v301 = v300 < 0;
                  v293 -= 4;
                }
                while (v301);
                if (*((char *)v295 + 23) < 0)
                  operator delete((void *)*v295);
                v302 = *(_OWORD *)__p;
                v295[2] = v318;
                *(_OWORD *)v295 = v302;
                v295[3] = v319;
                a2 = v315;
              }
              v278 = (const void *)(v280 + 32);
              v279 += 32;
              a1 = v280;
            }
            while ((const void **)(v280 + 32) != a2);
          }
        }
        return;
    }
  }
}

void std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::~pair(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 144);
  std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v1);
  JUMPOUT(0x1C3BB8530);
}

void std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  void **v7;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 168;
        v7 = (void **)(v4 - 24);
        std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100](&v7);
        MEMORY[0x1C3BB8530](v6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(const void **a1, const void **a2, const void **a3)
{
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  uint64_t result;
  _BOOL4 v20;
  uint64_t *v21;
  const void *v22;
  __int128 v23;
  const void *v24;
  const void *v25;
  __int128 v26;
  const void *v27;
  const void *v28;
  uint64_t *v29;
  int v30;
  int v31;
  size_t v32;
  const void *v33;
  size_t v34;
  const void *v35;
  size_t v36;
  _BOOL4 v37;
  const void *v38;
  __int128 v39;
  const void *v40;
  const void *v41;
  __int128 v42;
  const void *v43;
  const void *v44;
  int v45;
  int v46;
  size_t v47;
  const void *v48;
  size_t v49;
  const void *v50;
  size_t v51;
  _BOOL4 v52;
  const void *v53;
  uint64_t v54;

  v6 = *((char *)a1 + 23);
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v7 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v6 >= 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = (size_t)a1[1];
  if (v6 >= 0)
    v11 = a1;
  else
    v11 = *a1;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    v14 = v13 < 0;
  else
    v14 = v8 < v10;
  v15 = *((char *)a3 + 23);
  if (v15 >= 0)
    v16 = *((unsigned __int8 *)a3 + 23);
  else
    v16 = (size_t)a3[1];
  if (v15 >= 0)
    v17 = a3;
  else
    v17 = *a3;
  if (v8 >= v16)
    v18 = v16;
  else
    v18 = v8;
  result = memcmp(v17, v9, v18);
  v20 = v16 < v8;
  if ((_DWORD)result)
    v20 = (int)result < 0;
  if (v14)
  {
    if (v20)
    {
      v21 = (uint64_t *)(a1 + 3);
      v22 = a1[2];
      v23 = *(_OWORD *)a1;
      v24 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v24;
LABEL_72:
      *(_OWORD *)a3 = v23;
      a3[2] = v22;
      v29 = (uint64_t *)(a3 + 3);
      goto LABEL_73;
    }
    v41 = a1[2];
    v42 = *(_OWORD *)a1;
    v43 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v43;
    *(_OWORD *)a2 = v42;
    a2[2] = v41;
    v21 = (uint64_t *)(a2 + 3);
    v44 = a1[3];
    a1[3] = a2[3];
    a2[3] = v44;
    v45 = *((char *)a2 + 23);
    v46 = *((char *)a3 + 23);
    if (v46 >= 0)
      v47 = *((unsigned __int8 *)a3 + 23);
    else
      v47 = (size_t)a3[1];
    if (v46 >= 0)
      v48 = a3;
    else
      v48 = *a3;
    if (v45 >= 0)
      v49 = *((unsigned __int8 *)a2 + 23);
    else
      v49 = (size_t)a2[1];
    if (v45 >= 0)
      v50 = a2;
    else
      v50 = *a2;
    if (v49 >= v47)
      v51 = v47;
    else
      v51 = v49;
    result = memcmp(v48, v50, v51);
    v52 = v47 < v49;
    if ((_DWORD)result)
      v52 = (int)result < 0;
    if (v52)
    {
      v22 = a2[2];
      v23 = *(_OWORD *)a2;
      v53 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v53;
      goto LABEL_72;
    }
  }
  else if (v20)
  {
    v25 = a2[2];
    v26 = *(_OWORD *)a2;
    v27 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v27;
    *(_OWORD *)a3 = v26;
    a3[2] = v25;
    v29 = (uint64_t *)(a2 + 3);
    v28 = a2[3];
    a2[3] = a3[3];
    a3[3] = v28;
    v30 = *((char *)a1 + 23);
    v31 = *((char *)a2 + 23);
    if (v31 >= 0)
      v32 = *((unsigned __int8 *)a2 + 23);
    else
      v32 = (size_t)a2[1];
    if (v31 >= 0)
      v33 = a2;
    else
      v33 = *a2;
    if (v30 >= 0)
      v34 = *((unsigned __int8 *)a1 + 23);
    else
      v34 = (size_t)a1[1];
    if (v30 >= 0)
      v35 = a1;
    else
      v35 = *a1;
    if (v34 >= v32)
      v36 = v32;
    else
      v36 = v34;
    result = memcmp(v33, v35, v36);
    v37 = v32 < v34;
    if ((_DWORD)result)
      v37 = (int)result < 0;
    if (v37)
    {
      v38 = a1[2];
      v39 = *(_OWORD *)a1;
      v40 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v40;
      *(_OWORD *)a2 = v39;
      a2[2] = v38;
      v21 = (uint64_t *)(a1 + 3);
LABEL_73:
      v54 = *v21;
      *v21 = *v29;
      *v29 = v54;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(uint64_t a1, __int128 *a2, __int128 *a3, const void **a4)
{
  int v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  const void *v13;
  size_t v14;
  int v15;
  __n128 result;
  _BOOL4 v17;
  const void *v18;
  __int128 v19;
  const void *v20;
  const void *v21;
  int v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  size_t v37;
  const void *v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)a2, (const void **)a3);
  v8 = *((char *)a3 + 23);
  v9 = *((char *)a4 + 23);
  if (v9 >= 0)
    v10 = *((unsigned __int8 *)a4 + 23);
  else
    v10 = (size_t)a4[1];
  if (v9 >= 0)
    v11 = a4;
  else
    v11 = *a4;
  if (v8 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = *((_QWORD *)a3 + 1);
  if (v8 >= 0)
    v13 = a3;
  else
    v13 = *(const void **)a3;
  if (v12 >= v10)
    v14 = v10;
  else
    v14 = v12;
  v15 = memcmp(v11, v13, v14);
  v17 = v10 < v12;
  if (v15)
    v17 = v15 < 0;
  if (v17)
  {
    v18 = (const void *)*((_QWORD *)a3 + 2);
    v19 = *a3;
    v20 = a4[2];
    *a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v20;
    *(_OWORD *)a4 = v19;
    a4[2] = v18;
    v21 = (const void *)*((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = a4[3];
    a4[3] = v21;
    v22 = *((char *)a2 + 23);
    v23 = *((char *)a3 + 23);
    if (v23 >= 0)
      v24 = *((unsigned __int8 *)a3 + 23);
    else
      v24 = *((_QWORD *)a3 + 1);
    if (v23 >= 0)
      v25 = a3;
    else
      v25 = *(const void **)a3;
    if (v22 >= 0)
      v26 = *((unsigned __int8 *)a2 + 23);
    else
      v26 = *((_QWORD *)a2 + 1);
    if (v22 >= 0)
      v27 = a2;
    else
      v27 = *(const void **)a2;
    if (v26 >= v24)
      v28 = v24;
    else
      v28 = v26;
    v29 = memcmp(v25, v27, v28);
    v30 = v24 < v26;
    if (v29)
      v30 = v29 < 0;
    if (v30)
    {
      v31 = *((_QWORD *)a2 + 2);
      v32 = *a2;
      v33 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v33;
      *a3 = v32;
      *((_QWORD *)a3 + 2) = v31;
      v34 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = v34;
      v35 = *(char *)(a1 + 23);
      v36 = *((char *)a2 + 23);
      if (v36 >= 0)
        v37 = *((unsigned __int8 *)a2 + 23);
      else
        v37 = *((_QWORD *)a2 + 1);
      if (v36 >= 0)
        v38 = a2;
      else
        v38 = *(const void **)a2;
      if (v35 >= 0)
        v39 = *(unsigned __int8 *)(a1 + 23);
      else
        v39 = *(_QWORD *)(a1 + 8);
      if (v35 >= 0)
        v40 = (const void *)a1;
      else
        v40 = *(const void **)a1;
      if (v39 >= v37)
        v41 = v37;
      else
        v41 = v39;
      v42 = memcmp(v38, v40, v41);
      v43 = v37 < v39;
      if (v42)
        v43 = v42 < 0;
      if (v43)
      {
        v44 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v45 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v45;
        *a2 = (__int128)result;
        *((_QWORD *)a2 + 2) = v44;
        v46 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *((_QWORD *)a2 + 3) = v46;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, const void **a5)
{
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  __int128 *v15;
  size_t v16;
  int v17;
  __n128 result;
  _BOOL4 v19;
  const void *v20;
  __int128 v21;
  const void *v22;
  const void *v23;
  int v24;
  int v25;
  size_t v26;
  __int128 *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  _BOOL4 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  const void *v55;
  size_t v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (__int128 *)a2, (__int128 *)a3, (const void **)a4);
  v10 = *((char *)a4 + 23);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a4 + 23);
  else
    v14 = *((_QWORD *)a4 + 1);
  if (v10 >= 0)
    v15 = a4;
  else
    v15 = *(__int128 **)a4;
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v19 = v12 < v14;
  if (v17)
    v19 = v17 < 0;
  if (v19)
  {
    v20 = (const void *)*((_QWORD *)a4 + 2);
    v21 = *a4;
    v22 = a5[2];
    *a4 = *(_OWORD *)a5;
    *((_QWORD *)a4 + 2) = v22;
    *(_OWORD *)a5 = v21;
    a5[2] = v20;
    v23 = (const void *)*((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = a5[3];
    a5[3] = v23;
    v24 = *(char *)(a3 + 23);
    v25 = *((char *)a4 + 23);
    if (v25 >= 0)
      v26 = *((unsigned __int8 *)a4 + 23);
    else
      v26 = *((_QWORD *)a4 + 1);
    if (v25 >= 0)
      v27 = a4;
    else
      v27 = *(__int128 **)a4;
    if (v24 >= 0)
      v28 = *(unsigned __int8 *)(a3 + 23);
    else
      v28 = *(_QWORD *)(a3 + 8);
    if (v24 >= 0)
      v29 = (const void *)a3;
    else
      v29 = *(const void **)a3;
    if (v28 >= v26)
      v30 = v26;
    else
      v30 = v28;
    v31 = memcmp(v27, v29, v30);
    v32 = v26 < v28;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v33 = *(_QWORD *)(a3 + 16);
      v34 = *(_OWORD *)a3;
      v35 = *((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      *(_QWORD *)(a3 + 16) = v35;
      *a4 = v34;
      *((_QWORD *)a4 + 2) = v33;
      v36 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *((_QWORD *)a4 + 3);
      *((_QWORD *)a4 + 3) = v36;
      v37 = *(char *)(a2 + 23);
      v38 = *(char *)(a3 + 23);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(a3 + 23);
      else
        v39 = *(_QWORD *)(a3 + 8);
      if (v38 >= 0)
        v40 = (const void *)a3;
      else
        v40 = *(const void **)a3;
      if (v37 >= 0)
        v41 = *(unsigned __int8 *)(a2 + 23);
      else
        v41 = *(_QWORD *)(a2 + 8);
      if (v37 >= 0)
        v42 = (const void *)a2;
      else
        v42 = *(const void **)a2;
      if (v41 >= v39)
        v43 = v39;
      else
        v43 = v41;
      v44 = memcmp(v40, v42, v43);
      v45 = v39 < v41;
      if (v44)
        v45 = v44 < 0;
      if (v45)
      {
        v46 = *(_QWORD *)(a2 + 16);
        v47 = *(_OWORD *)a2;
        v48 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v48;
        *(_OWORD *)a3 = v47;
        *(_QWORD *)(a3 + 16) = v46;
        v49 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v49;
        v50 = *(char *)(a1 + 23);
        v51 = *(char *)(a2 + 23);
        if (v51 >= 0)
          v52 = *(unsigned __int8 *)(a2 + 23);
        else
          v52 = *(_QWORD *)(a2 + 8);
        if (v51 >= 0)
          v53 = (const void *)a2;
        else
          v53 = *(const void **)a2;
        if (v50 >= 0)
          v54 = *(unsigned __int8 *)(a1 + 23);
        else
          v54 = *(_QWORD *)(a1 + 8);
        if (v50 >= 0)
          v55 = (const void *)a1;
        else
          v55 = *(const void **)a1;
        if (v54 >= v52)
          v56 = v52;
        else
          v56 = v54;
        v57 = memcmp(v53, v55, v56);
        v58 = v52 < v54;
        if (v57)
          v58 = v57 < 0;
        if (v58)
        {
          v59 = *(_QWORD *)(a1 + 16);
          result = *(__n128 *)a1;
          v60 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v60;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v59;
          v61 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v61;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(uint64_t a1, const void **a2)
{
  uint64_t v4;
  _BOOL8 result;
  const void **v6;
  int v7;
  int v8;
  size_t v9;
  const void **v10;
  size_t v11;
  const void *v12;
  size_t v13;
  int v14;
  _BOOL4 v15;
  const void *v16;
  __int128 v17;
  uint64_t v18;
  const void *v19;
  const void **v20;
  const void **v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  const void *v29;
  size_t v30;
  int v31;
  _BOOL4 v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void **v37;
  int v38;
  size_t v39;
  __int128 *v40;
  size_t v41;
  const void *v42;
  size_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  const void *v49;
  uint64_t v50;

  v4 = ((uint64_t)a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = a2 - 4;
      v7 = *(char *)(a1 + 23);
      v8 = *((char *)a2 - 9);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a2 - 9);
      else
        v9 = (size_t)*(a2 - 3);
      if (v8 >= 0)
        v10 = a2 - 4;
      else
        v10 = (const void **)*(a2 - 4);
      if (v7 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 23);
      else
        v11 = *(_QWORD *)(a1 + 8);
      if (v7 >= 0)
        v12 = (const void *)a1;
      else
        v12 = *(const void **)a1;
      if (v11 >= v9)
        v13 = v9;
      else
        v13 = v11;
      v14 = memcmp(v10, v12, v13);
      v15 = v9 < v11;
      if (v14)
        v15 = v14 < 0;
      if (v15)
      {
        v16 = *(const void **)(a1 + 16);
        v17 = *(_OWORD *)a1;
        v18 = (uint64_t)*(a2 - 2);
        *(_OWORD *)a1 = *(_OWORD *)v6;
        *(_QWORD *)(a1 + 16) = v18;
        *(_OWORD *)v6 = v17;
        *(a2 - 2) = v16;
        v19 = *(const void **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(a2 - 1);
        *(a2 - 1) = v19;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>(a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64), a2 - 4);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *,0>(a1, a1 + 32, a1 + 64, (__int128 *)(a1 + 96), a2 - 4);
      return 1;
    default:
      v20 = (const void **)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanEncoder::attachUniqueLabelsToTokens(nlv4_inference_orchestrator::span_matching::TagBucketList const&,std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken> const&)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>> *>((const void **)a1, (const void **)(a1 + 32), (const void **)(a1 + 64));
      v21 = (const void **)(a1 + 96);
      if ((const void **)(a1 + 96) == a2)
        return 1;
      v22 = 0;
      v23 = 0;
      break;
  }
  while (1)
  {
    v24 = *((char *)v20 + 23);
    v25 = *((char *)v21 + 23);
    if (v25 >= 0)
      v26 = *((unsigned __int8 *)v21 + 23);
    else
      v26 = (size_t)v21[1];
    if (v25 >= 0)
      v27 = v21;
    else
      v27 = *v21;
    if (v24 >= 0)
      v28 = *((unsigned __int8 *)v20 + 23);
    else
      v28 = (size_t)v20[1];
    if (v24 >= 0)
      v29 = v20;
    else
      v29 = *v20;
    if (v28 >= v26)
      v30 = v26;
    else
      v30 = v28;
    v31 = memcmp(v27, v29, v30);
    v32 = v26 < v28;
    if (v31)
      v32 = v31 < 0;
    if (v32)
    {
      v48 = *(_OWORD *)v21;
      v33 = v21[2];
      v34 = v21[3];
      v21[1] = 0;
      v21[2] = 0;
      *v21 = 0;
      v49 = v33;
      v50 = (uint64_t)v34;
      v35 = v22;
      while (1)
      {
        v36 = a1 + v35;
        v37 = (void **)(a1 + v35 + 96);
        if (*(char *)(a1 + v35 + 119) < 0)
          operator delete(*v37);
        *(_OWORD *)v37 = *(_OWORD *)(v36 + 64);
        *(_QWORD *)(a1 + v35 + 112) = *(_QWORD *)(v36 + 80);
        *(_BYTE *)(v36 + 87) = 0;
        *(_BYTE *)(v36 + 64) = 0;
        *(_QWORD *)(v36 + 120) = *(_QWORD *)(v36 + 88);
        if (v35 == -64)
          break;
        v38 = *(char *)(a1 + v35 + 55);
        if (SHIBYTE(v49) >= 0)
          v39 = HIBYTE(v49);
        else
          v39 = *((_QWORD *)&v48 + 1);
        if (SHIBYTE(v49) >= 0)
          v40 = &v48;
        else
          v40 = (__int128 *)v48;
        if (v38 >= 0)
          v41 = *(unsigned __int8 *)(a1 + v35 + 55);
        else
          v41 = *(_QWORD *)(a1 + v35 + 40);
        if (v38 >= 0)
          v42 = (const void *)(a1 + v35 + 32);
        else
          v42 = *(const void **)(a1 + v35 + 32);
        if (v41 >= v39)
          v43 = v39;
        else
          v43 = v41;
        v44 = memcmp(v40, v42, v43);
        v45 = v39 < v41;
        if (v44)
          v45 = v44 < 0;
        v35 -= 32;
        if (!v45)
        {
          v46 = a1 + v35 + 96;
          goto LABEL_65;
        }
      }
      v46 = a1;
LABEL_65:
      if (*(char *)(v46 + 23) < 0)
        operator delete(*(void **)v46);
      *(_OWORD *)v46 = v48;
      v47 = v50;
      *(_QWORD *)(v46 + 16) = v49;
      *(_QWORD *)(v46 + 24) = v47;
      if (++v23 == 8)
        return v21 + 4 == a2;
    }
    v20 = v21;
    v22 += 32;
    v21 += 4;
    if (v21 == a2)
      return 1;
  }
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanEncoder::getTopLevelUsoEntityFromDataDetectorSpan@<X0>(uint64_t this@<X0>, const sirinluinternal::MatchingSpan *a2@<X1>, std::string *a3@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  const sirinluexternal::UsoGraph *v6;
  siri::ontology::oname::graph::ontology_init *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  const void **__p;
  const void **v14;
  uint64_t v15;
  std::string v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = (_DWORD *)*((_QWORD *)a2 + 1);
  v5 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v4 == v5)
    goto LABEL_11;
  while (*v4)
  {
    if (++v4 == v5)
      goto LABEL_11;
  }
  v6 = (const sirinluexternal::UsoGraph *)*((_QWORD *)a2 + 8);
  if (!v6 || *((_QWORD *)v6 + 11) - *((_QWORD *)v6 + 10) <= 8uLL)
  {
LABEL_11:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    v7 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)(this + 24), v6);
    siri::ontology::oname::graph::ontology_init::Argument_entity(v7);
    siri::ontology::UsoGraph::getSuccessors();
    if (__p == v14
    {
      a3->__r_.__value_.__s.__data_[0] = 0;
      a3[1].__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      v9 = v8[3];
      if (*(char *)(v9 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
      }
      else
      {
        v10 = *(_OWORD *)(v9 + 8);
        v16.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
        *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(a3, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
        v11 = SHIBYTE(v16.__r_.__value_.__r.__words[2]);
        a3[1].__r_.__value_.__s.__data_[0] = 1;
        if (v11 < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
      }
      else
      {
        *a3 = v16;
        a3[1].__r_.__value_.__s.__data_[0] = 1;
      }
    }
    if (__p)
      operator delete(__p);
    this = v15;
    if (v15)
    {
      v12 = MEMORY[0x1C3BB916C]();
      return MEMORY[0x1C3BB9B44](v12, 0x10A0C403D23BABBLL);
    }
  }
  return this;
}

void sub_1C22B2218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 __p, int a14, __int16 a15, char a16, char a17)
{
  _BYTE *v17;
  uint64_t v18;
  void *v21;
  NSObject *v22;
  const char *ComponentString;
  uint64_t v24;

  if (a17 < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    v22 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      ComponentString = snlp::common::logging::getComponentString(*(_DWORD *)(v18 + 40));
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
      LODWORD(__p) = 136315394;
      *(_QWORD *)((char *)&__p + 4) = ComponentString;
      WORD6(__p) = 2080;
      *(_QWORD *)((char *)&__p + 14) = v24;
      _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] A data detector span contained a USO graph with an invalid entity node.  This data detector span was ignored by the span matching featurizer.  Error: %s.\n", (uint8_t *)&__p, 0x16u);
    }
    *v17 = 0;
    v17[24] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C22B21DCLL);
  }
  if (a9)
    operator delete(a9);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::getNoSpansLabel(nlv4_inference_orchestrator::span_matching::SpanEncoder *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t snlp::ssu::matcher::lookupCategoryTypeByString(const void **a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void **v5;
  size_t v6;
  size_t v7;
  const void **v8;
  int v9;

  v2 = 0;
  v3 = *((unsigned __int8 *)a1 + 23);
  v5 = (const void **)*a1;
  v4 = a1[1];
  while (1)
  {
    v6 = strlen(EnumNamesSSUCategoryType(void)::names[v2]);
    v7 = v6;
    if ((v3 & 0x80) == 0)
      break;
    if ((const void *)v6 == v4)
    {
      v8 = v5;
      if (v4 == (const void *)-1)
        std::string::__throw_out_of_range[abi:ne180100]();
      goto LABEL_7;
    }
LABEL_8:
    if (++v2 == 3)
    {
      LOBYTE(v2) = 0;
      v9 = 0;
      return v2 | (v9 << 8);
    }
  }
  v8 = a1;
  if (v7 != v3)
    goto LABEL_8;
LABEL_7:
  if (memcmp(v8, EnumNamesSSUCategoryType(void)::names[v2], v7))
    goto LABEL_8;
  v9 = 1;
  return v2 | (v9 << 8);
}

void snlp::ssu::matcher::logSimilaritySearchConfiguration(uint64_t *a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t *v5;
  double v6;
  double v7;
  std::string *v8;
  double v9;
  uint64_t v10;
  double v11;
  std::string v12;
  uint8_t buf[4];
  uint64_t *v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  __int16 v19;
  std::string *v20;
  __int16 v21;
  double v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  double v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a2 + 12))
    std::to_string(&v12, *(float *)(a2 + 8));
  else
    std::string::basic_string[abi:ne180100]<0>(&v12, "missing");
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a1 + 23) >= 0)
      v5 = a1;
    else
      v5 = (uint64_t *)*a1;
    v6 = *(float *)a2;
    v7 = *(float *)(a2 + 4);
    v8 = &v12;
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v12.__r_.__value_.__r.__words[0];
    v9 = *(float *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    v11 = *(float *)(a2 + 32);
    *(_DWORD *)buf = 136316674;
    v14 = v5;
    v15 = 2048;
    v16 = v6;
    v17 = 2048;
    v18 = v7;
    v19 = 2080;
    v20 = v8;
    v21 = 2048;
    v22 = v9;
    v23 = 2048;
    v24 = v10;
    v25 = 2048;
    v26 = v11;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Loaded similarity search configuration for category %s with calibratedScoreSigmoidParam=%f, calibratedScoreThreshold=%f, calibratedScoreThresholdAppShortcutAlwaysTrigger=%s, exactMatchThreshold=%f, maxAppMatchCount=%lu, negativeScoreClipMinimum=%f.", buf, 0x48u);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void snlp::ssu::matcher::loadSimilaritySearchConfigurations(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  int v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  _QWORD *v17;
  int v18;
  std::string *p_p;
  std::string *v20;
  unsigned __int16 v21;
  signed __int8 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint8x8_t v26;
  void **v27;
  unsigned __int8 *v28;
  unint64_t v29;
  float v30;
  float v31;
  _BOOL8 v32;
  unint64_t v33;
  unint64_t v34;
  size_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  float v39;
  __int128 v40;
  std::runtime_error *v41;
  std::string *v42;
  __int128 v43;
  std::runtime_error *v44;
  int v45;
  const std::string::value_type *v46;
  std::string::size_type size;
  std::string *v48;
  __int128 v49;
  std::runtime_error *v50;
  std::runtime_error *v51;
  std::runtime_error *exception;
  std::runtime_error *v53;
  void *v54[2];
  char v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60[2];
  char v61;
  void *v62[2];
  char v63;
  __int128 v64;
  __int128 v65;
  float Config;
  std::string v67;
  unint64_t v68;
  __int128 v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  std::string v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  std::string __p;
  void *v81;
  char v82;
  unsigned __int8 *v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  const void *v87[2];
  char v88;
  unsigned __int8 *v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  std::string v93;
  std::string v94;

  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v76, "params");
  v89 = a1;
  v90 = 0;
  v91 = 0;
  v92 = 0x8000000000000000;
  v5 = *a1;
  if (v5 == 1)
  {
    v90 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((_QWORD *)a1 + 1), &v76);
  }
  else if (v5 == 2)
  {
    v91 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  }
  else
  {
    v92 = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v87, "Error reading SSU matcher config file: ");
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = (unint64_t)a1;
  v76.__r_.__value_.__r.__words[2] = 0;
  v77 = 0x8000000000000000;
  v6 = *a1;
  if (v6 == 2)
  {
    v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8);
  }
  else if (v6 == 1)
  {
    v76.__r_.__value_.__l.__size_ = *((_QWORD *)a1 + 1) + 8;
  }
  else
  {
    v77 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, &v89)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, &v76);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89);
  *((_BYTE *)&v76.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v76, "perCategory");
  v83 = v7;
  v84 = 0;
  v85 = 0;
  v86 = 0x8000000000000000;
  v8 = *v7;
  if (v8 == 1)
  {
    v84 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((_QWORD *)v7 + 1), &v76);
  }
  else if (v8 == 2)
  {
    v85 = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8);
  }
  else
  {
    v86 = 1;
  }
  v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v89);
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = (unint64_t)v9;
  v76.__r_.__value_.__r.__words[2] = 0;
  v77 = 0x8000000000000000;
  v10 = *v9;
  if (v10 == 2)
  {
    v76.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)v9 + 1) + 8);
  }
  else if (v10 == 1)
  {
    v76.__r_.__value_.__l.__size_ = *((_QWORD *)v9 + 1) + 8;
  }
  else
  {
    v77 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, &v83)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83) != 1)
  {
    v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, &v76);
    v53->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83);
  v12 = *v11;
  if (*v11)
  {
    if ((_DWORD)v12 == 1)
    {
      v12 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 16);
    }
    else if ((_DWORD)v12 == 2)
    {
      v12 = (uint64_t)(*(_QWORD *)(*((_QWORD *)v11 + 1) + 8) - **((_QWORD **)v11 + 1)) >> 4;
    }
    else
    {
      v12 = 1;
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, vcvtps_u32_f32((float)(unint64_t)v12 / *(float *)(a2 + 32)));
  v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(&v83);
  v14 = v13;
  v69 = (unint64_t)v13;
  v70 = 0;
  v71 = 0x8000000000000000;
  v15 = *v13;
  if (*v13)
  {
    if (v15 == 2)
    {
      v70 = **((_QWORD **)v13 + 1);
    }
    else if (v15 == 1)
    {
      *((_QWORD *)&v69 + 1) = **((_QWORD **)v13 + 1);
    }
    else
    {
      v71 = 0;
    }
  }
  else
  {
    v71 = 1;
  }
  nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value((uint64_t)&v76, &v69);
  *(_OWORD *)&v67.__r_.__value_.__l.__data_ = (unint64_t)v14;
  v67.__r_.__value_.__r.__words[2] = 0;
  v68 = 0x8000000000000000;
  v16 = *v14;
  if (v16 == 2)
  {
    v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)v14 + 1) + 8);
  }
  else if (v16 == 1)
  {
    v67.__r_.__value_.__l.__size_ = *((_QWORD *)v14 + 1) + 8;
  }
  else
  {
    v68 = 1;
  }
  nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value((uint64_t)&v69, &v67);
  v17 = (_QWORD *)(a2 + 16);
  while (!nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v76, (unsigned __int8 **)&v69))
  {
    v18 = *v76.__r_.__value_.__l.__data_;
    if (v18 == 1)
    {
      p_p = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(1, v76.__r_.__value_.__l.__size_);
    }
    else
    {
      p_p = (std::string *)&v81;
      if (v18 == 2)
      {
        p_p = &__p;
        if (v78 != v79)
        {
          std::to_string(&v67, v78);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          __p = v67;
          v79 = v78;
          p_p = &__p;
        }
      }
    }
    v20 = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v76);
    if (v20->__r_.__value_.__s.__data_[0] != 1)
    {
      v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v67.__r_.__value_.__l.__data_, v87, "category config value is not of object type");
      std::runtime_error::runtime_error(v50, &v67);
      v50->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
    }
    v21 = snlp::ssu::matcher::lookupCategoryTypeByString((const void **)&p_p->__r_.__value_.__l.__data_);
    if (v21 <= 0xFFu)
    {
      v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      v45 = SHIBYTE(p_p->__r_.__value_.__r.__words[2]);
      if (v45 >= 0)
        v46 = (const std::string::value_type *)p_p;
      else
        v46 = (const std::string::value_type *)p_p->__r_.__value_.__r.__words[0];
      if (v45 >= 0)
        size = HIBYTE(p_p->__r_.__value_.__r.__words[2]);
      else
        size = p_p->__r_.__value_.__l.__size_;
      v48 = std::string::append((std::string *)&v64, v46, size);
      v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
      v67.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v49;
      v48->__r_.__value_.__l.__size_ = 0;
      v48->__r_.__value_.__r.__words[2] = 0;
      v48->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v44, &v67);
      v44->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
    }
    v22 = v21;
    snlp::common::config::loadJsonConfig((uint64_t)&v67, v20, 6u);
    std::string::basic_string[abi:ne180100]<0>(v62, "calibratedScoreSigmoidParam");
    LODWORD(v64) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v62);
    std::string::basic_string[abi:ne180100]<0>(v60, "calibratedScoreThreshold");
    DWORD1(v64) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v60);
    std::string::basic_string[abi:ne180100]<0>(v58, "calibratedScoreThresholdAppShortcutAlwaysTrigger");
    if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v67, (unsigned __int8 *)v58))
    {
      v23 = COERCE_UNSIGNED_INT(snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v58)) | 0x100000000;
    }
    else
    {
      v23 = 0;
    }
    *((_QWORD *)&v64 + 1) = v23;
    std::string::basic_string[abi:ne180100]<0>(v56, "exactMatchThreshold");
    LODWORD(v65) = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)v56);
    std::string::basic_string[abi:ne180100]<0>(v54, "maxAppMatchCount");
    v24 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v67, (unsigned __int8 *)v54);
    if (!v24)
    {
      v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v51, &v94);
      v51->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
    if (*((_DWORD *)v24 + 16) != 1)
    {
      v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v42 = std::string::append(&v93, " is not of expected type");
      v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v41, &v94);
      v41->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
    *((_QWORD *)&v65 + 1) = *((unsigned int *)v24 + 10);
    std::string::basic_string[abi:ne180100]<0>(&v94, "negativeScoreClipMinimum");
    Config = snlp::ssu::utilities::getConfigValue<float>(&v67, (unsigned __int8 *)&v94);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    if (v55 < 0)
      operator delete(v54[0]);
    if (v57 < 0)
      operator delete(v56[0]);
    if (v59 < 0)
      operator delete(v58[0]);
    if (v61 < 0)
      operator delete(v60[0]);
    if (v63 < 0)
      operator delete(v62[0]);
    snlp::ssu::matcher::logSimilaritySearchConfiguration((uint64_t *)p_p, (uint64_t)&v64);
    v25 = *(_QWORD *)(a2 + 8);
    if (v25)
    {
      v26 = (uint8x8_t)vcnt_s8((int8x8_t)v25);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        v2 = v22;
        if (v25 <= v22)
          v2 = v22 % v25;
      }
      else
      {
        v2 = (v25 - 1) & v22;
      }
      v27 = *(void ***)(*(_QWORD *)a2 + 8 * v2);
      if (v27)
      {
        v28 = (unsigned __int8 *)*v27;
        if (*v27)
        {
          do
          {
            v29 = *((_QWORD *)v28 + 1);
            if (v29 == v22)
            {
              if (v28[16] == v22)
                goto LABEL_109;
            }
            else
            {
              if (v26.u32[0] > 1uLL)
              {
                if (v29 >= v25)
                  v29 %= v25;
              }
              else
              {
                v29 &= v25 - 1;
              }
              if (v29 != v2)
                break;
            }
            v28 = *(unsigned __int8 **)v28;
          }
          while (v28);
        }
      }
    }
    v28 = (unsigned __int8 *)operator new(0x40uLL);
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 1) = v22;
    v28[16] = v22;
    *(_OWORD *)(v28 + 24) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *((_QWORD *)v28 + 7) = 0;
    v30 = (float)(unint64_t)(*(_QWORD *)(a2 + 24) + 1);
    v31 = *(float *)(a2 + 32);
    if (!v25 || (float)(v31 * (float)v25) < v30)
    {
      v32 = (v25 & (v25 - 1)) != 0;
      if (v25 < 3)
        v32 = 1;
      v33 = v32 | (2 * v25);
      v34 = vcvtps_u32_f32(v30 / v31);
      if (v33 <= v34)
        v35 = v34;
      else
        v35 = v33;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a2, v35);
      v25 = *(_QWORD *)(a2 + 8);
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v25 <= v22)
          v2 = v22 % v25;
        else
          v2 = v22;
      }
      else
      {
        v2 = (v25 - 1) & v22;
      }
    }
    v36 = *(_QWORD *)a2;
    v37 = *(_QWORD **)(*(_QWORD *)a2 + 8 * v2);
    if (v37)
    {
      *(_QWORD *)v28 = *v37;
LABEL_107:
      *v37 = v28;
      goto LABEL_108;
    }
    *(_QWORD *)v28 = *v17;
    *v17 = v28;
    *(_QWORD *)(v36 + 8 * v2) = v17;
    if (*(_QWORD *)v28)
    {
      v38 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      if ((v25 & (v25 - 1)) != 0)
      {
        if (v38 >= v25)
          v38 %= v25;
      }
      else
      {
        v38 &= v25 - 1;
      }
      v37 = (_QWORD *)(*(_QWORD *)a2 + 8 * v38);
      goto LABEL_107;
    }
LABEL_108:
    ++*(_QWORD *)(a2 + 24);
LABEL_109:
    v39 = Config;
    v40 = v65;
    *(_OWORD *)(v28 + 24) = v64;
    *(_OWORD *)(v28 + 40) = v40;
    *((float *)v28 + 14) = v39;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&v67);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v76);
    ++v78;
  }
  if (v75 < 0)
    operator delete(v74);
  if (v73 < 0)
    operator delete(v72);
  if (v82 < 0)
    operator delete(v81);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v88 < 0)
    operator delete((void *)v87[0]);
}

void sub_1C22B2FB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v2 - 185) < 0)
    operator delete(*(void **)(v2 - 208));
  _Unwind_Resume(a1);
}

unsigned __int8 *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator->(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  nlohmann::detail::exception *exception;
  _QWORD v5[3];

  result = *a1;
  v3 = *result;
  if (v3 == 2)
    return a1[2];
  if (v3 == 1)
    return a1[1] + 56;
  if (a1[3])
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v5, "cannot get value");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 214, (uint64_t)v5);
  }
  return result;
}

void sub_1C22B32A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void **a1, const void **a2, char *__s)
{
  size_t v6;
  size_t v7;
  uint64_t result;
  const void *v9;
  char *v10;

  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = strlen(__s);
  result = std::string::basic_string[abi:ne180100]((uint64_t)a1, v6 + v7);
  if (*((char *)a1 + 23) < 0)
    a1 = (void **)*a1;
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = *a2;
    result = (uint64_t)memmove(a1, v9, v6);
  }
  v10 = (char *)a1 + v6;
  if (v7)
    result = (uint64_t)memmove(v10, __s, v7);
  v10[v7] = 0;
  return result;
}

void snlp::common::config::loadJsonConfig(uint64_t a1, std::string *a2, unsigned int a3)
{
  char *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  int data;
  _BYTE *v13;
  int v14;
  uint64_t *v15;
  int v16;
  unsigned __int8 *v17;
  std::string::value_type v18;
  const std::string **v19;
  void *v20;
  std::string *v21;
  __int128 v22;
  NSObject *v23;
  void **v24;
  std::string *p_buf;
  std::string *v26;
  __int128 v27;
  std::string v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *__p[2];
  char v34;
  std::string v35;
  std::string buf;
  _QWORD v37[3];
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3 >= 8)
  {
    v7 = SNLPOSLoggerForCategory(4);
    v6 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (int)a3;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
    }
  }
  else
  {
    v6 = off_1E7BED840[a3];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  v29 = a2;
  v30 = 0;
  v31 = 0;
  v32 = 0x8000000000000000;
  v8 = a2->__r_.__value_.__s.__data_[0];
  if (a2->__r_.__value_.__s.__data_[0])
  {
    if (v8 == 2)
    {
      v31 = *(_QWORD *)a2->__r_.__value_.__l.__size_;
    }
    else if (v8 == 1)
    {
      v30 = *(_QWORD *)a2->__r_.__value_.__l.__size_;
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v32 = 1;
  }
  while (1)
  {
    buf.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = (unint64_t)a2;
    v37[0] = 0x8000000000000000;
    if (v8 == 2)
    {
      buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2->__r_.__value_.__l.__size_ + 8);
    }
    else if (v8 == 1)
    {
      buf.__r_.__value_.__l.__size_ = a2->__r_.__value_.__l.__size_ + 8;
    }
    else
    {
      v37[0] = 1;
    }
    if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>,(decltype(nullptr))0>((unsigned __int8 **)&v29, (unsigned __int8 **)&buf))
    {
      break;
    }
    v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::key(v29->__r_.__value_.__s.__data_[0], v30);
    if (*(char *)(v9 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
    }
    else
    {
      v10 = *(_OWORD *)v9;
      v28.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v10;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 5)
    {
      v11 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,int,0>(v11, (int *)&buf);
      data = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        buf = v28;
      LODWORD(v37[0]) = data;
      v38 = 0;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 6)
    {
      v13 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,unsigned int,0>(v13, (unsigned int *)&buf);
      v14 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        buf = v28;
      LODWORD(v37[0]) = v14;
      v38 = 1;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 7)
    {
      v15 = (uint64_t *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      LODWORD(buf.__r_.__value_.__l.__data_) = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>,float,0>(v15, (float *)&buf);
      v16 = (int)buf.__r_.__value_.__l.__data_;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        buf = v28;
      LODWORD(v37[0]) = v16;
      v38 = 2;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
      goto LABEL_55;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) == 4)
    {
      v17 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
      buf.__r_.__value_.__s.__data_[0] = 0;
      nlohmann::detail::from_json<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(v17, &buf);
      v18 = buf.__r_.__value_.__s.__data_[0];
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      else
        buf = v28;
      LOBYTE(v37[0]) = v18;
      v38 = 3;
      std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
LABEL_55:
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v37);
      goto LABEL_56;
    }
    if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29) != 3)
    {
      if (*nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29))
      {
        std::operator+<char>();
        v21 = std::string::append(&v35, ".");
        v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v23 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          goto LABEL_56;
        v24 = __p;
        if (v34 < 0)
          v24 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      else
      {
        std::operator+<char>();
        v26 = std::string::append(&v35, " is null.  This is currently expected behaviour.");
        v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v23 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
          goto LABEL_56;
        v24 = __p;
        if (v34 < 0)
          v24 = (void **)__p[0];
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      LODWORD(v35.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      WORD2(v35.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
      _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v35, 0x16u);
LABEL_56:
      if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_59;
      v20 = (void *)buf.__r_.__value_.__r.__words[0];
      goto LABEL_58;
    }
    v19 = (const std::string **)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator*((uint64_t)&v29);
    nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::get_impl<std::string,0>(&v35, v19);
    std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>::pair[abi:ne180100]<std::string&,std::string const&,0>(&buf, (__int128 *)&v28, (__int128 *)&v35);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::variant<int,unsigned int,float,BOOL,std::string>>>(a1, (unsigned __int8 *)&buf, (uint64_t)&buf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,unsigned int,float,BOOL,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v37);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v35.__r_.__value_.__r.__words[0];
LABEL_58:
      operator delete(v20);
    }
LABEL_59:
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator++((unsigned __int8 **)&v29);
    LOBYTE(v8) = a2->__r_.__value_.__s.__data_[0];
  }
  std::string::basic_string[abi:ne180100]<0>(&buf, "component_name");
  v29 = &buf;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<std::string const&>>(a1, (unsigned __int8 *)&buf, (__int128 **)&v29, &v28);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(__p[0]);
}

void sub_1C22B39F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a32 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a26 < 0)
    operator delete(a21);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v39);
  _Unwind_Resume(a1);
}

float snlp::ssu::utilities::getConfigValue<float>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  std::runtime_error *exception;
  std::runtime_error *v5;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  v2 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(a1, a2);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (*((_DWORD *)v2 + 16) != 2)
  {
    v5 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v6 = std::string::append(&v8, " is not of expected type");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v5, &v9);
    v5->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  return *((float *)v2 + 10);
}

void sub_1C22B3BF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::~iteration_proxy_value(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t nlohmann::detail::iteration_proxy_value<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>>::iteration_proxy_value(uint64_t a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 48), "0");
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void snlp::ssu::matcher::SSUMatcherConfig::loadMatcherConfig(snlp::ssu::matcher::SSUMatcherConfig *this@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v5;
  int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t *v17;
  unsigned __int8 *v18;
  int v19;
  std::string *v20;
  unsigned __int8 *v21;
  std::runtime_error *v22;
  std::runtime_error *v23;
  std::runtime_error *v24;
  std::runtime_error *exception;
  std::runtime_error *v26;
  std::runtime_error *v27;
  std::runtime_error *v28;
  std::string *v29;
  __int128 v30;
  std::string v31;
  void *v32[2];
  char v33;
  std::string v34;
  std::string v35;
  unint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned __int8 v49[8];
  uint64_t *v50;
  void *v51[2];
  char v52;
  std::string v53;
  std::string v54;
  std::string __p[5];
  uint64_t v56;
  _QWORD v57[20];

  v57[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::operator/[abi:ne180100](&v53, (uint64_t)this, (std::__fs::filesystem::path *)__p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::ifstream::basic_ifstream(__p);
  std::string::basic_string[abi:ne180100]<0>(v51, "Error reading SSU matcher config file: ");
  if (!v56)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v35.__r_.__value_.__l.__data_, (const void **)v51, "config file could not be opened");
    std::runtime_error::runtime_error(exception, &v35);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  if (*(_DWORD *)((char *)&__p[1].__r_.__value_.__r.__words[1] + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)))
  {
    v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void **)&v35.__r_.__value_.__l.__data_, (const void **)v51, "config file could not be read");
    std::runtime_error::runtime_error(v26, &v35);
    v26->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v49[0] = 0;
  v50 = 0;
  nlohmann::operator>>(__p, v49);
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v35, "params");
  v45 = v49;
  v46 = 0;
  v47 = 0;
  v48 = 0x8000000000000000;
  if (v49[0] == 1)
  {
    v46 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>((uint64_t)v50, &v35);
    v36 = 0x8000000000000000;
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = (unint64_t)(v50 + 1);
  }
  else if (v49[0] == 2)
  {
    v47 = v50[1];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v49;
    v36 = 0x8000000000000000;
    v35.__r_.__value_.__r.__words[2] = v50[1];
  }
  else
  {
    v48 = 1;
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v49;
    v35.__r_.__value_.__r.__words[2] = 0;
    v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v45)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45) != 1)
  {
    v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, &v35);
    v22->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v5 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45);
  *((_BYTE *)&v35.__r_.__value_.__s + 23) = 11;
  strcpy((char *)&v35, "perCategory");
  v41 = v5;
  v42 = 0;
  v43 = 0;
  v44 = 0x8000000000000000;
  v6 = *v5;
  if (v6 == 1)
  {
    v42 = std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::find<std::string>(*((_QWORD *)v5 + 1), &v35);
  }
  else if (v6 == 2)
  {
    v43 = *(_QWORD *)(*((_QWORD *)v5 + 1) + 8);
  }
  else
  {
    v44 = 1;
  }
  v7 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v45);
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v7;
  v35.__r_.__value_.__r.__words[2] = 0;
  v36 = 0x8000000000000000;
  v8 = *v7;
  if (v8 == 2)
  {
    v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)v7 + 1) + 8);
  }
  else if (v8 == 1)
  {
    v35.__r_.__value_.__l.__size_ = *((_QWORD *)v7 + 1) + 8;
  }
  else
  {
    v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v41)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41) != 1)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, &v35);
    v23->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v9 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41);
  v37 = v9;
  v38 = 0;
  v39 = 0;
  v40 = 0x8000000000000000;
  v10 = *v9;
  if (v10 == 1)
  {
    v11 = *((_QWORD *)v9 + 1);
    v14 = *(_QWORD *)(v11 + 8);
    v12 = v11 + 8;
    v13 = v14;
    v38 = v12;
    if (!v14)
      goto LABEL_34;
    v15 = v12;
    do
    {
      v16 = std::string::compare((const std::string *)(v13 + 32), "APP_SHORTCUT");
      v17 = (uint64_t *)(v13 + 8);
      if (v16 >= 0)
      {
        v17 = (uint64_t *)v13;
        v15 = v13;
      }
      v13 = *v17;
    }
    while (*v17);
    if (v15 == v12 || std::string::compare((const std::string *)(v15 + 32), "APP_SHORTCUT") >= 1)
LABEL_34:
      v15 = v12;
    v38 = v15;
  }
  else if (v10 == 2)
  {
    v39 = *(_QWORD *)(*((_QWORD *)v9 + 1) + 8);
  }
  else
  {
    v40 = 1;
  }
  v18 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v41);
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = (unint64_t)v18;
  v35.__r_.__value_.__r.__words[2] = 0;
  v36 = 0x8000000000000000;
  v19 = *v18;
  if (v19 == 2)
  {
    v35.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8);
  }
  else if (v19 == 1)
  {
    v35.__r_.__value_.__l.__size_ = *((_QWORD *)v18 + 1) + 8;
  }
  else
  {
    v36 = 1;
  }
  if (nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>((unsigned __int8 **)&v35, &v37)|| *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator->(&v37) != 1)
  {
    v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, &v35);
    v24->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v20 = (std::string *)nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>::operator*((uint64_t)&v37);
  snlp::common::config::loadJsonConfig((uint64_t)&v35, v20, 6u);
  v33 = 6;
  strcpy((char *)v32, "locale");
  v21 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(&v35, (unsigned __int8 *)v32);
  if (!v21)
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v27, &v31);
    v27->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (*((_DWORD *)v21 + 16) != 4)
  {
    v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v29 = std::string::append(&v54, " is not of expected type");
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v28, &v31);
    v28->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if ((char)v21[63] < 0)
    std::string::__init_copy_ctor_external(&v34, *((const std::string::value_type **)v21 + 5), *((_QWORD *)v21 + 6));
  else
    v34 = *(std::string *)(v21 + 40);
  if (v33 < 0)
    operator delete(v32[0]);
  snlp::ssu::matcher::loadSimilaritySearchConfigurations(v49, (uint64_t)&v31);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(a2, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
  else
    *a2 = v34;
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&a2[1], (uint64_t)&v31);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&v35);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(&v50, v49[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40]
                                                                                                 + 24);
  MEMORY[0x1C3BB970C](&__p[0].__r_.__value_.__r.__words[2]);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v57);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_1C22B44CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  uint64_t **v63;
  void *v64;
  char v65;

  if (a14 < 0)
    operator delete(__p);
  if (a62 < 0)
    operator delete(a57);
  if ((v65 & 1) != 0)
    __cxa_free_exception(v64);
  if (a22 < 0)
    operator delete(a17);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a26);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(v63, a43);
  if (a50 < 0)
    operator delete(a45);
  std::ifstream::~ifstream(&a63);
  if (a56 < 0)
    operator delete(a51);
  _Unwind_Resume(a1);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, *(char **)a2, (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)));
  return a1;
}

void sub_1C22B46D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

BOOL nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>> const>::operator==<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>,(decltype(nullptr))0>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  nlohmann::detail::exception *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = (nlohmann::detail::exception *)__cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v7, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create<nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>>(exception, 212, (uint64_t)v7);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1C22B47B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse@<X0>(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  std::string v11;
  _BYTE v12[8];
  uint64_t v13;
  int v14;
  int v15;
  char v16;

  sirinluinternalitfm::ITFMHypothesis::ITFMHypothesis((sirinluinternalitfm::ITFMHypothesis *)v12);
  v6 = *a2;
  v16 |= 3u;
  v14 = v6;
  v15 = 1065353216;
  if (*a1)
  {
    itfm_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken(*a1, v6, &v11);
    sirinluinternalitfm::ITFMHypothesis::makeStringLabel((sirinluinternalitfm::ITFMHypothesis *)v12);
    v7 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    v8 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)&v11.__r_.__value_.__l + 2);
    *(_OWORD *)v7 = v8;
  }
  sirinluinternalitfm::ITFMParserResponse::ITFMParserResponse((sirinluinternalitfm::ITFMParserResponse *)a3);
  PB::PtrVector<sirinluinternalitfm::ITFMHypothesis>::emplace_back<sirinluinternalitfm::ITFMHypothesis&>((uint64_t **)(a3 + 8), (uint64_t)v12);
  v9 = *(_BYTE *)(a3 + 48);
  *(_BYTE *)(a3 + 44) = *a2 != 0;
  *(_BYTE *)(a3 + 48) = v9 | 3;
  *(_DWORD *)(a3 + 40) = 1065353216;
  return MEMORY[0x1C3BB8584](v12);
}

void sub_1C22B4F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  MEMORY[0x1C3BB8584](&a16);
  _Unwind_Resume(a1);
}

uint64_t psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaMessagePayloadPromptOverride@<X0>(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t result;
  NSObject *v8;
  unint64_t v9;
  int v10;
  uint8_t buf[4];
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[56] = 0;
  result = *(_QWORD *)(a2 + 32);
  if (result)
  {
    result = snlp::common::text_uso_graph::isMessageContentPrompt(result);
    if ((_DWORD)result)
    {
      v10 = 0;
      psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse(a1, &v10, (uint64_t)buf);
      std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>((uint64_t)a4);
      MEMORY[0x1C3BB85C0](buf);
      v8 = SNLPOSLoggerForCategory(2);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315138;
        v12 = "PSC";
        _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] PSC override triggered: falling back on NOT POMMES based on the turn input SDA content", buf, 0xCu);
      }
      v9 = a3[1];
      if (v9 >= a3[2])
      {
        result = std::vector<std::string>::__emplace_back_slow_path<char const(&)[35]>(a3, "SDA_MessagePayload_Prompt_Override");
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)a3[1], "SDA_MessagePayload_Prompt_Override");
        result = v9 + 24;
        a3[1] = v9 + 24;
      }
      a3[1] = result;
    }
  }
  return result;
}

void sub_1C22B50D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v2 + 8) = v4;
  if (*(_BYTE *)(v1 + 56))
    MEMORY[0x1C3BB85C0](v1);
  _Unwind_Resume(exception_object);
}

void psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaIntercomPayloadPromptOverride(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  NSObject *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  std::string *v16;
  int v17;
  std::__split_buffer<std::string> buf;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[56] = 0;
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 && snlp::common::text_uso_graph::isIntercomPayloadPrompt(v6))
  {
    v17 = 0;
    psc_inference_orchestrator::orchestration::PSCOverrideGenerator::buildPSCOverrideITFMResponse(a1, &v17, (uint64_t)&buf);
    std::optional<sirinluinternalitfm::ITFMParserResponse>::operator=[abi:ne180100]<sirinluinternalitfm::ITFMParserResponse,void>((uint64_t)a4);
    MEMORY[0x1C3BB85C0](&buf);
    v8 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf.__first_) = 136315138;
      *(std::__split_buffer<std::string>::pointer *)((char *)&buf.__first_ + 4) = (std::__split_buffer<std::string>::pointer)"PSC";
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] PSC override triggered: falling back on NOT POMMES based on the turn input SDA content", (uint8_t *)&buf, 0xCu);
    }
    v9 = *(_QWORD *)(a3 + 16);
    v10 = *(_QWORD *)(a3 + 8);
    if (v10 >= v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *(_QWORD *)a3) >> 3);
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a3) >> 3);
      v14 = 2 * v13;
      if (2 * v13 <= v12 + 1)
        v14 = v12 + 1;
      if (v13 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      buf.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v15)
        v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(a3 + 16, v15);
      else
        v16 = 0;
      buf.__first_ = v16;
      buf.__begin_ = v16 + v12;
      buf.__end_ = buf.__begin_;
      buf.__end_cap_.__value_ = &v16[v15];
      std::string::basic_string[abi:ne180100]<0>(buf.__begin_->__r_.__value_.__r.__words, "SDA_Intercom_Payload_Prompt_Override");
      ++buf.__end_;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &buf);
      v11 = *(_QWORD *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&buf);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(*(_QWORD **)(a3 + 8), "SDA_Intercom_Payload_Prompt_Override");
      v11 = v10 + 24;
      *(_QWORD *)(a3 + 8) = v10 + 24;
    }
    *(_QWORD *)(a3 + 8) = v11;
  }
}

void sub_1C22B52E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = v13;
  *(_QWORD *)(v12 + 8) = v14;
  if (*(_BYTE *)(v11 + 56))
    MEMORY[0x1C3BB85C0](v11);
  _Unwind_Resume(exception_object);
}

void psc_inference_orchestrator::orchestration::PSCOverrideGenerator::generateOverrideResponse(itfm_inference_orchestrator::vocabulary::Vocabulary **this@<X0>, const sirinluinternalitfm::ITFMParserRequest *a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const std::string *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  std::string __p;
  char v24;
  char v25;
  _BYTE v26[32];
  uint64_t v27;
  __int128 *v28[3];

  *a3 = 0;
  a3[56] = 0;
  memset(v28, 0, sizeof(v28));
  v6 = *((_QWORD *)a2 + 9);
  if (!v6)
    goto LABEL_9;
  v7 = *(_QWORD *)(v6 + 136);
  if (v7)
  {
    v8 = *(_QWORD **)(v7 + 16);
    if (v8)
    {
      v9 = v8[10];
      v10 = *(_QWORD *)(v6 + 128);
      if (v10)
        v11 = *(_QWORD *)(v10 + 32) != 0;
      else
        v11 = 0;
      v15 = v8[11];
      v14 = v8[12];
      sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v26);
      if (v9 || v11)
        goto LABEL_13;
      if (v14 - v15 == 8)
      {
        sirinluexternal::SystemDialogActGroup::makeSystemDialogAct((sirinluexternal::SystemDialogActGroup *)v26);
        v18 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 9) + 136) + 16) + 88);
        v19 = operator new();
        v20 = MEMORY[0x1C3BB8338](v19, v18);
        v21 = v27;
        v27 = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      goto LABEL_14;
    }
  }
  v12 = *(_QWORD *)(v6 + 128);
  if (!v12)
  {
LABEL_9:
    sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v26);
    goto LABEL_14;
  }
  v13 = *(_QWORD *)(v12 + 32);
  sirinluexternal::SystemDialogActGroup::SystemDialogActGroup((sirinluexternal::SystemDialogActGroup *)v26);
  if (v13)
LABEL_13:
    sirinluexternal::SystemDialogActGroup::operator=();
LABEL_14:
  psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaMessagePayloadPromptOverride(this, (uint64_t)v26, (uint64_t *)v28, &__p);
  std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a3, (uint64_t)&__p);
  if (v25)
    MEMORY[0x1C3BB85C0](&__p);
  if (!a3[56])
  {
    psc_inference_orchestrator::orchestration::PSCOverrideGenerator::sdaIntercomPayloadPromptOverride(this, (uint64_t)v26, (uint64_t)v28, &__p);
    std::__optional_storage_base<sirinluinternalitfm::ITFMParserResponse,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<sirinluinternalitfm::ITFMParserResponse,false>>((uint64_t)a3, (uint64_t)&__p);
    if (v25)
      MEMORY[0x1C3BB85C0](&__p);
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  v24 = 0;
  v16 = *((_QWORD *)a2 + 5);
  if (v16)
  {
    v17 = *(const std::string **)(v16 + 16);
    if (v17)
      std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(&__p, v17);
  }
  v22 = 4;
  itfm_inference_orchestrator::utilities::ITFMFeatureStoreUtilities::handleFeatureStoreInsert(v28, (uint64_t)&__p, &v22);
  if (v24 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x1C3BB83A4](v26);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1C22B554C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x1C3BB83A4](&a22);
  __p = (void *)(v23 - 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(_BYTE *)(v22 + 56))
    MEMORY[0x1C3BB85C0](v22);
  _Unwind_Resume(a1);
}

std::locale *std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>::pair[abi:ne180100](std::locale *a1, uint64_t a2)
{
  std::locale *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;

  v4 = std::locale::locale(a1, (const std::locale *)a2);
  *(_OWORD *)&v4[1].__locale_ = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v4[3].__locale_ = *(_OWORD *)(a2 + 24);
  v5 = *(unint64_t **)(a2 + 48);
  v4[5].__locale_ = *(std::locale::__imp **)(a2 + 40);
  v4[6].__locale_ = (std::locale::__imp *)v5;
  if (v5)
  {
    v6 = v5 + 1;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  a1[7].__locale_ = *(std::locale::__imp **)(a2 + 56);
  v8 = (std::string *)&a1[8];
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    a1[10].__locale_ = *(std::locale::__imp **)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C22B5648(_Unwind_Exception *a1)
{
  std::locale *v1;
  uint64_t v2;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 88;
    std::allocator<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::destroy[abi:ne180100](i - 88);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void uaap_orchestration::labels::buildSimpleEntityLabelFromPath(const std::basic_string<char16_t>::value_type **this@<X0>, std::basic_string<char16_t> *a2@<X8>)
{
  const std::basic_string<char16_t>::value_type *v5;
  int v6;
  const std::basic_string<char16_t>::value_type *v7;
  std::basic_string<char16_t>::size_type v8;
  const std::basic_string<char16_t>::value_type *i;
  void **v10;
  std::basic_string<char16_t>::size_type v11;
  int v12;
  const std::basic_string<char16_t>::value_type *v13;
  std::basic_string<char16_t>::size_type v14;
  void *__p[2];
  unsigned __int8 v16;

  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__p, (char *)L".");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *this;
  if (*this != this[1])
  {
    v6 = *((char *)v5 + 23);
    if (v6 >= 0)
      v7 = *this;
    else
      v7 = *(const std::basic_string<char16_t>::value_type **)v5;
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)v5 + 23);
    else
      v8 = *((_QWORD *)v5 + 1);
    std::basic_string<char16_t>::append(a2, v7, v8);
    v5 = *this;
  }
  for (i = v5 + 12; i != this[1]; i += 12)
  {
    if ((v16 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v11 = v16;
    else
      v11 = (std::basic_string<char16_t>::size_type)__p[1];
    std::basic_string<char16_t>::append(a2, (const std::basic_string<char16_t>::value_type *)v10, v11);
    v12 = *((char *)i + 23);
    if (v12 >= 0)
      v13 = i;
    else
      v13 = *(const std::basic_string<char16_t>::value_type **)i;
    if (v12 >= 0)
      v14 = *((unsigned __int8 *)i + 23);
    else
      v14 = *((_QWORD *)i + 1);
    std::basic_string<char16_t>::append(a2, v13, v14);
  }
  if ((v16 & 0x80) != 0)
    operator delete(__p[0]);
}

void sub_1C22B5794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void uaap_orchestration::labels::buildEntityLabelsFromSimpleLabelAndEnumChoices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  std::basic_string<char16_t>::size_type v9;
  int v10;
  const std::basic_string<char16_t>::value_type *v11;
  std::basic_string<char16_t>::size_type v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  std::basic_string<char16_t> __p;
  void *__dst[2];
  unsigned __int8 v18;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(__dst, (char *)L":");
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      if (*(char *)(a1 + 23) < 0)
        std::basic_string<char16_t>::__init_copy_ctor_external(&__p, *(const std::basic_string<char16_t>::value_type **)a1, *(_QWORD *)(a1 + 8));
      else
        __p = *(std::basic_string<char16_t> *)a1;
      if ((v18 & 0x80u) == 0)
        v8 = __dst;
      else
        v8 = (void **)__dst[0];
      if ((v18 & 0x80u) == 0)
        v9 = v18;
      else
        v9 = (std::basic_string<char16_t>::size_type)__dst[1];
      std::basic_string<char16_t>::append(&__p, (const std::basic_string<char16_t>::value_type *)v8, v9);
      v10 = *(char *)(v6 + 23);
      if (v10 >= 0)
        v11 = (const std::basic_string<char16_t>::value_type *)v6;
      else
        v11 = *(const std::basic_string<char16_t>::value_type **)v6;
      if (v10 >= 0)
        v12 = *(unsigned __int8 *)(v6 + 23);
      else
        v12 = *(_QWORD *)(v6 + 8);
      std::basic_string<char16_t>::append(&__p, v11, v12);
      v13 = a3[1];
      if (v13 >= a3[2])
      {
        v15 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        v15 = v13 + 24;
        a3[1] = v13 + 24;
      }
      a3[1] = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v6 += 24;
    }
    while (v6 != v7);
  }
  if ((char)v18 < 0)
    operator delete(__dst[0]);
}

void sub_1C22B590C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void uaap_orchestration::labels::buildEntityLabelsFromPaths(uaap_orchestration::grammar::Path **a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  uaap_orchestration::grammar::Path *v3;
  uaap_orchestration::grammar::Path *v4;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  void **v10;
  __int128 *v11;
  uint64_t v12[3];
  std::basic_string<char16_t> __p;
  void *v14[2];
  char v15;
  char v16;
  void ***v17;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uaap_orchestration::grammar::Path::getLastComponent(v3, (uint64_t)v14);
      if (v16)
      {
        uaap_orchestration::labels::buildSimpleEntityLabelFromPath((const std::basic_string<char16_t>::value_type **)v3, &__p);
        uaap_orchestration::grammar::UaapGrammar::getEnumChoicesForLabel(a2, (unsigned __int16 *)v14, v12);
        if (v12[0] == v12[1])
        {
          v7 = a3[1];
          if (v7 >= a3[2])
          {
            v9 = std::vector<std::basic_string<char16_t>>::__push_back_slow_path<std::basic_string<char16_t> const&>(a3, (__int128 *)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v7 = v8;
            }
            v9 = v7 + 24;
            a3[1] = v7 + 24;
          }
          a3[1] = v9;
        }
        else
        {
          uaap_orchestration::labels::buildEntityLabelsFromSimpleLabelAndEnumChoices((uint64_t)&__p, v12, (uint64_t *)&v10);
          std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>(a3, (std::basic_string<char16_t> *)a3[1], (__int128 *)v10, v11, 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (char *)v10) >> 3));
          v17 = &v10;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
        }
        v10 = (void **)v12;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v15 < 0)
          operator delete(v14[0]);
      }
      v3 = (uaap_orchestration::grammar::Path *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
}

void sub_1C22B5AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v26;
  uint64_t v27;

  v26[1] = v27;
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  a21 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::~BertReshapableE5MLModule(nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule *this)
{
  nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::~BertReshapableE5MLModule(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E7BE9928;
  v2 = (void *)*((_QWORD *)this + 116);
  if (v2)
  {
    *((_QWORD *)this + 117) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 113);
  if (v3)
  {
    *((_QWORD *)this + 114) = v3;
    operator delete(v3);
  }
  nlv4_inference_orchestrator::inference_engine::BertE5MLModule::~BertE5MLModule((void **)this);
}

void nlv4_inference_orchestrator::inference_engine::BertReshapableE5MLModule::setExcludeSpecialTokensMask(uint64_t a1, uint64_t a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput(a1 + 432, (unsigned __int8 *)(a1 + 880), a2);
}

void snlp::ssu::cache::SSUCacheDirectory::withDirectory(std::__fs::filesystem::path *this@<X0>, std::string **a2@<X8>)
{
  NSObject *v5;
  const std::__fs::filesystem::path *v6;
  std::__fs::filesystem::path *v7;
  std::string *v8;
  NSObject *v9;
  int v10;
  std::__fs::filesystem::path *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v5 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = this;
    else
      v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    v10 = 136315138;
    v11 = v7;
    _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Creating a cache directory instance with root directory: %s", (uint8_t *)&v10, 0xCu);
  }
  if (snlp::ssu::cache::initializeDirectoryV3(this, v6))
  {
    v8 = (std::string *)operator new();
    snlp::ssu::cache::SSUCacheDirectory::SSUCacheDirectory(v8, this);
  }
  else
  {
    v9 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "Failed to initialize cache directory with v3 format", (uint8_t *)&v10, 2u);
    }
    v8 = 0;
  }
  *a2 = v8;
}

void sub_1C22B5D0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x1012C40688F0EE3);
  _Unwind_Resume(a1);
}

std::string *snlp::ssu::cache::SSUCacheDirectory::SSUCacheDirectory(std::string *this, const std::__fs::filesystem::path *a2)
{
  __int128 v3;

  if (SHIBYTE(a2->__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(this, a2->__pn_.__r_.__value_.__l.__data_, a2->__pn_.__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&a2->__pn_.__r_.__value_.__l.__data_;
    this->__r_.__value_.__r.__words[2] = a2->__pn_.__r_.__value_.__r.__words[2];
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  MEMORY[0x1C3BB98E0](&this[1]);
  return this;
}

void sub_1C22B5D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::buildTemporaryCacheFilePath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int *v8;
  uint64_t v9;
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  _OWORD *v20;
  const std::string::value_type *p_p;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  void *__p;
  __int128 v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  std::string::size_type v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  LODWORD(v33) = 0;
  v8 = (int *)boost::uuids::detail::random_provider_base::random_provider_base((boost::uuids::detail::random_provider_base *)&v33);
  v35[0] = boost::uuids::random_generator_pure::operator()(v8);
  v35[1] = v9;
  boost::uuids::detail::random_provider_base::destroy(v33);
  if (*((char *)a2 + 23) >= 0)
    v10 = *((unsigned __int8 *)a2 + 23);
  else
    v10 = (size_t)a2[1];
  v11 = &v29;
  std::string::basic_string[abi:ne180100]((uint64_t)&v29, v10 + 1);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
  if (v10)
  {
    if (*((char *)a2 + 23) >= 0)
      v12 = a2;
    else
      v12 = *a2;
    memmove(v11, v12, v10);
  }
  *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 95;
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = (const std::string::value_type *)a3;
  else
    v14 = *(const std::string::value_type **)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = std::string::append(&v29, v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v30, "_");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = operator new(0x28uLL);
  __p = v20;
  v28 = xmmword_1C230B540;
  *v20 = 0u;
  v20[1] = 0u;
  *(_QWORD *)((char *)v20 + 29) = 0;
  boost::uuids::to_chars<char *>((uint64_t)v35, v20);
  if (v28 >= 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if (v28 >= 0)
    v22 = HIBYTE(v28);
  else
    v22 = v28;
  v23 = std::string::append(&v31, p_p, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  v25 = std::string::append(&v32, ".ssu_cache_file_in_progress");
  v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
  v34 = v25->__r_.__value_.__r.__words[2];
  v33 = v26;
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  snlp::ssu::cache::SSUCacheDirectory::buildTemporaryDirectoryPath(a1, &v32);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v31, (char *)&v33);
  std::__fs::filesystem::operator/[abi:ne180100](a4, (uint64_t)&v32, (std::__fs::filesystem::path *)&v31);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)v33);
}

void sub_1C22B6038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a33 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  if (*(char *)(v40 - 89) < 0)
    operator delete(*(void **)(v40 - 112));
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::buildTemporaryDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kTemporaryDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C22B6168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesForAllLocales(snlp::ssu::cache::SSUCacheDirectory *this)
{
  NSObject *v2;
  std::recursive_mutex *v3;
  NSObject *v4;
  std::string *p_p;
  std::string __p;
  char v8;
  uint8_t buf[4];
  std::string *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v2 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Clearing cache files for all locales", (uint8_t *)&__p, 2u);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(this, &__p);
  v3 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock(v3);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  if (v8 == 2)
  {
    v4 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v10 = p_p;
      _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing locales directory: %s", buf, 0xCu);
    }
    std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__p, 0);
  }
  std::recursive_mutex::unlock(v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1C22B62DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf)
{
  void *v17;
  NSObject *v18;
  uint64_t v19;

  if (a2 == 1)
  {
    v17 = __cxa_begin_catch(a1);
    v18 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 16))(v17);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v19;
      _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B6298);
  }
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](a2, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C22B63F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL snlp::ssu::cache::SSUCacheDirectory::clearCacheFilesOutsideLocale(snlp::ssu::cache::SSUCacheDirectory *a1, unsigned __int8 *a2)
{
  NSObject *v4;
  std::string::size_type v5;
  std::recursive_mutex *v6;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _BOOL8 v15;
  const std::__fs::filesystem::directory_entry *v16;
  NSObject *v17;
  std::string *p_buf;
  std::string::size_type v19;
  uint64_t v20;
  std::string::size_type size;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  std::string *v25;
  NSObject *v26;
  std::string::size_type v27;
  std::__shared_weak_count *cntrl;
  uint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__fs::filesystem::directory_iterator v35;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v36;
  std::__shared_weak_count *v37;
  std::string __p;
  std::string v39;
  std::string buf;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2[23] & 0x80u) == 0)
      v5 = (std::string::size_type)a2;
    else
      v5 = *(_QWORD *)a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Clearing cache files for all locales except %s", (uint8_t *)&buf, 0xCu);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(a1, &buf);
  v6 = (std::recursive_mutex *)((char *)a1 + 24);
  std::recursive_mutex::lock(v6);
  MEMORY[0x1C3BB9958](&v36, &buf, 0, 0);
  v7 = v36;
  v8 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = v37;
    v35.__imp_.__ptr_ = v7;
    v35.__imp_.__cntrl_ = v8;
    if (v37)
    {
      v12 = (unint64_t *)&v37->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v35.__imp_.__ptr_ = v36;
    v35.__imp_.__cntrl_ = 0;
  }
  while (1)
  {
    v15 = v35.__imp_.__ptr_ == 0;
    if (!v35.__imp_.__ptr_)
      break;
    v16 = std::__fs::filesystem::directory_iterator::__dereference(&v35);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v16->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v16->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v39, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v39 = __p;
      }
      v20 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        size = v39.__r_.__value_.__l.__size_;
      v22 = a2[23];
      v23 = (char)v22;
      if ((v22 & 0x80u) != 0)
        v22 = *((_QWORD *)a2 + 1);
      if (size != v22)
        goto LABEL_46;
      if (v23 >= 0)
        v24 = a2;
      else
        v24 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (memcmp(v39.__r_.__value_.__l.__data_, v24, v39.__r_.__value_.__l.__size_))
          goto LABEL_46;
      }
      else if (*((_BYTE *)&v39.__r_.__value_.__s + 23))
      {
        v25 = &v39;
        while (v25->__r_.__value_.__s.__data_[0] == *v24)
        {
          v25 = (std::string *)((char *)v25 + 1);
          ++v24;
          if (!--v20)
            goto LABEL_52;
        }
LABEL_46:
        v26 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          if ((v16->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = (std::string::size_type)v16;
          else
            v27 = v16->__p_.__pn_.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v27;
          _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing locale directory: %s", (uint8_t *)&__p, 0xCu);
        }
        std::__fs::filesystem::__remove_all(&v16->__p_, 0);
      }
LABEL_52:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_54;
    }
    v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      if ((v16->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = (std::string::size_type)v16;
      else
        v19 = v16->__p_.__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v39.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v39.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
      WORD2(v39.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v39.__r_.__value_.__r.__words[1] + 6) = v19;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered bad cache directory state: the locales directory %s contains a non-directory file: %s. Ignoring.", (uint8_t *)&v39, 0x16u);
    }
LABEL_54:
    std::__fs::filesystem::directory_iterator::__increment(&v35, 0);
  }
  cntrl = v35.__imp_.__cntrl_;
  if (v35.__imp_.__cntrl_)
  {
    v29 = &v35.__imp_.__cntrl_->__shared_owners_;
    do
      v30 = __ldaxr((unint64_t *)v29);
    while (__stlxr(v30 - 1, (unint64_t *)v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v31 = v37;
  if (v37)
  {
    v32 = (unint64_t *)&v37->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  std::recursive_mutex::unlock(v6);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  return v15;
}

void sub_1C22B68E0()
{
  JUMPOUT(0x1C22B68E8);
}

void sub_1C22B68F8()
{
  JUMPOUT(0x1C22B6960);
}

void sub_1C22B6904()
{
  JUMPOUT(0x1C22B6968);
}

void sub_1C22B691C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::recursive_mutex *v26;
  uint64_t v27;
  void *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;

  if (a26 < 0)
    JUMPOUT(0x1C22B6930);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](&v34);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](&v35);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](&v36);
  std::recursive_mutex::unlock(v26);
  if (a2 == 1)
  {
    v29 = __cxa_begin_catch(v33);
    v30 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v27 - 105) >= 0)
        v31 = v27 - 128;
      else
        v31 = *(_QWORD *)(v27 - 128);
      v32 = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 16))(v29);
      v37 = 136315394;
      v38 = v31;
      v39 = 2080;
      v40 = v32;
      _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error during iteration over %s: %s)", (uint8_t *)&v37, 0x16u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B6890);
  }
  JUMPOUT(0x1C22B6A08);
}

void sub_1C22B6938()
{
  JUMPOUT(0x1C22B6948);
}

BOOL std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](const std::__fs::filesystem::path *a1)
{
  int v1;
  unsigned __int8 v3;

  if (((1 << a1[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
  {
    std::__fs::filesystem::__status(a1, 0);
    v1 = v3;
  }
  else
  {
    v1 = a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
  return v1 == 2;
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::removeCacheFilesForApp(uint64_t a1, char *a2)
{
  NSObject *v4;
  std::string::size_type v5;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v15;
  const std::__fs::filesystem::directory_entry *v16;
  NSObject *v17;
  std::string *p_buf;
  std::string::size_type v19;
  NSObject *v20;
  std::string *p_p;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *cntrl;
  uint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  std::string::size_type v32;
  std::recursive_mutex *v34;
  std::string __p;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v36;
  std::__shared_weak_count *v37;
  std::__fs::filesystem::directory_iterator v38;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v39;
  std::__shared_weak_count *v40;
  uint8_t v41[4];
  std::string *v42;
  std::string v43;
  std::string buf;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0)
      v5 = (std::string::size_type)a2;
    else
      v5 = *(_QWORD *)a2;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v5;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Attempting to removing cache files across all locales for app: %s", (uint8_t *)&buf, 0xCu);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, &buf);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  MEMORY[0x1C3BB9958](&v39, &buf, 0, 0);
  v6 = v39;
  v7 = v40;
  v34 = (std::recursive_mutex *)(a1 + 24);
  if (!v40)
  {
    v38.__imp_.__ptr_ = v39;
    v38.__imp_.__cntrl_ = 0;
LABEL_17:
    v36 = 0;
    v37 = 0;
    goto LABEL_18;
  }
  p_shared_owners = (unint64_t *)&v40->__shared_owners_;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v10 = v40;
  v38.__imp_.__ptr_ = v6;
  v38.__imp_.__cntrl_ = v7;
  if (!v40)
    goto LABEL_17;
  v11 = (unint64_t *)&v40->__shared_owners_;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  v36 = 0;
  v37 = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 - 1, v11));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_18:
  v14 = 0;
  v15 = v36;
  while (v38.__imp_.__ptr_ != v15)
  {
    v16 = std::__fs::filesystem::directory_iterator::__dereference(&v38);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v16->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v16->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v43, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v43 = __p;
      }
      snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, (char *)&v43, a2, &__p);
      std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
      if (v41[0] == 2)
      {
        v20 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v41 = 136315138;
          v42 = p_p;
          _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing app bundle directory: %s", v41, 0xCu);
        }
        std::__fs::filesystem::__remove_all((const std::__fs::filesystem::path *)&__p, 0);
        ++v14;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
    }
    else
    {
      v17 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_buf = &buf;
        else
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if ((v16->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = (std::string::size_type)v16;
        else
          v19 = v16->__p_.__pn_.__r_.__value_.__r.__words[0];
        LODWORD(v43.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
        WORD2(v43.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v43.__r_.__value_.__r.__words[1] + 6) = v19;
        _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered bad cache directory state: the locales directory %s contains a non-directory file: %s. Ignoring.", (uint8_t *)&v43, 0x16u);
      }
    }
    std::__fs::filesystem::directory_iterator::__increment(&v38, 0);
  }
  v22 = v37;
  if (v37)
  {
    v23 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  cntrl = v38.__imp_.__cntrl_;
  if (v38.__imp_.__cntrl_)
  {
    v26 = &v38.__imp_.__cntrl_->__shared_owners_;
    do
      v27 = __ldaxr((unint64_t *)v26);
    while (__stlxr(v27 - 1, (unint64_t *)v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v28 = v40;
  if (v40)
  {
    v29 = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::recursive_mutex::unlock(v34);
  if (!v14)
  {
    v31 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
    {
      if (a2[23] >= 0)
        v32 = (std::string::size_type)a2;
      else
        v32 = *(_QWORD *)a2;
      LODWORD(v43.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v43.__r_.__value_.__r.__words + 4) = v32;
      _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Found no cache files for app: %s. Doing nothing.", (uint8_t *)&v43, 0xCu);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  return v14 | 0x100000000 | v14 & 0xFFFFFF00;
}

void sub_1C22B6EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,__int128 buf,int a31,__int16 a32,char a33,char a34)
{
  std::recursive_mutex *v34;
  uint64_t v35;
  void *v38;
  NSObject *v39;
  uint64_t v40;

  std::recursive_mutex::unlock(v34);
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v40;
      _os_log_impl(&dword_1C2196000, v39, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B6E90);
  }
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  std::string __p;
  std::__fs::filesystem::path v8;
  std::string v9;
  std::string v10;

  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath(a1, &v10);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v8.__pn_, a2);
  std::__fs::filesystem::operator/[abi:ne180100](&v9, (uint64_t)&v10, &v8);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a3);
  std::__fs::filesystem::operator/[abi:ne180100](a4, (uint64_t)&v9, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1C22B70DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForLocale(uint64_t a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v12;
  const std::__fs::filesystem::directory_entry *v13;
  NSObject *v14;
  std::__fs::filesystem::path *v15;
  std::string::size_type v16;
  const std::string *v17;
  const std::string *v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  std::string::size_type v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t v29;
  const std::string *v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type size;
  std::string::size_type v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  std::string::size_type v43;
  std::string::size_type v44;
  BOOL v45;
  std::string::size_type v46;
  std::string::size_type v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  std::string::size_type v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::string::size_type v58;
  void **v59;
  __int128 v60;
  void **v61;
  __int128 *v62;
  uint64_t v63;
  __int128 v64;
  std::string::size_type v65;
  void **v66;
  __int128 v67;
  void **v68;
  uint64_t v69;
  __int128 v70;
  const std::string *v71;
  std::string::value_type v72;
  std::string *v73;
  const std::string *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *cntrl;
  uint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::recursive_mutex *v84;
  int64_t v86;
  char *v87;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v88;
  const std::string *v90;
  const std::string *v91;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v92;
  std::__shared_weak_count *v93;
  std::__fs::filesystem::directory_iterator v94;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v95;
  std::__shared_weak_count *v96;
  std::string __p;
  std::__fs::filesystem::path v98;
  std::string v99;
  std::string buf;
  std::string::size_type v101;
  std::string::value_type *v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheDirectory::buildLocalesDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, &buf);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::operator/[abi:ne180100](&v98.__pn_, (uint64_t)&buf, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  v84 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  std::__fs::filesystem::__status(&v98, 0);
  if (buf.__r_.__value_.__s.__data_[0] != 2)
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
    std::recursive_mutex::unlock(v84);
    goto LABEL_104;
  }
  MEMORY[0x1C3BB9958](&v95, &v98, 0, 0);
  v4 = v95;
  v5 = v96;
  if (v96)
  {
    p_shared_owners = (unint64_t *)&v96->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = v96;
    v94.__imp_.__ptr_ = v4;
    v94.__imp_.__cntrl_ = v5;
    if (v96)
    {
      v9 = (unint64_t *)&v96->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      v92 = 0;
      v93 = 0;
      do
        v11 = __ldaxr(v9);
      while (__stlxr(v11 - 1, v9));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_19;
    }
  }
  else
  {
    v94.__imp_.__ptr_ = v95;
    v94.__imp_.__cntrl_ = 0;
  }
  v92 = 0;
  v93 = 0;
LABEL_19:
  v12 = v92;
  v87 = a2;
  v88 = v92;
  while (v94.__imp_.__ptr_ != v12)
  {
    v13 = std::__fs::filesystem::directory_iterator::__dereference(&v94);
    if (std::__fs::filesystem::directory_entry::is_directory[abi:ne180100](&v13->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v13->__p_, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v99, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
      }
      else
      {
        v99 = buf;
      }
      snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(a1, a2, (char *)&v99, &v90);
      v18 = v90;
      v17 = v91;
      if (v90 == v91)
      {
        v26 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          if ((v13->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v27 = (std::string::size_type)v13;
          else
            v27 = v13->__p_.__pn_.__r_.__value_.__r.__words[0];
          v28 = &v99;
          if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = (std::string *)v99.__r_.__value_.__r.__words[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v27;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v28;
          _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_ERROR, "Failed to find any cache files for directory: %s (app bundle ID: %s). Skipping.", (uint8_t *)&buf, 0x16u);
        }
        goto LABEL_84;
      }
      if ((char *)v91 - (char *)v90 >= 1)
      {
        v19 = ((char *)v91 - (char *)v90) / 104;
        v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v21 = (int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 104;
        v22 = __p.__r_.__value_.__r.__words[0] + 104 * v21;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 3) < v19)
        {
          v23 = v21 + v19;
          if ((unint64_t)(v21 + v19) > 0x276276276276276)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x9D89D89D89D89D8ALL
             * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3) > v23)
            v23 = 0x9D89D89D89D89D8ALL
                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5
                                * ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3)) >= 0x13B13B13B13B13BLL)
            v24 = 0x276276276276276;
          else
            v24 = v23;
          v102 = &__p.__r_.__value_.__s.__data_[16];
          if (v24)
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v24);
          else
            v25 = 0;
          v33 = v24 + 104 * v21;
          buf.__r_.__value_.__r.__words[0] = v24;
          buf.__r_.__value_.__l.__size_ = v33;
          buf.__r_.__value_.__r.__words[2] = v33;
          v101 = v24 + 104 * v25;
          v34 = 104 * v19;
          v35 = v33 + 104 * v19;
          do
          {
            snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(v33, (uint64_t)v18);
            v33 += 104;
            v18 = (const std::string *)((char *)v18 + 104);
            v34 -= 104;
          }
          while (v34);
          buf.__r_.__value_.__r.__words[2] = v35;
          std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v22, v22, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)__p.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__l.__size_);
          buf.__r_.__value_.__l.__size_ = v36;
          size = __p.__r_.__value_.__l.__size_;
          v38 = buf.__r_.__value_.__r.__words[2];
          if (v22 == __p.__r_.__value_.__l.__size_)
          {
            a2 = v87;
          }
          else
          {
            a2 = v87;
            do
            {
              *(_BYTE *)v38 = *(_BYTE *)v22;
              v39 = *(_OWORD *)(v22 + 8);
              *(_QWORD *)(v38 + 24) = *(_QWORD *)(v22 + 24);
              *(_OWORD *)(v38 + 8) = v39;
              *(_QWORD *)(v22 + 16) = 0;
              *(_QWORD *)(v22 + 24) = 0;
              *(_QWORD *)(v22 + 8) = 0;
              v40 = *(_OWORD *)(v22 + 32);
              *(_QWORD *)(v38 + 48) = *(_QWORD *)(v22 + 48);
              *(_OWORD *)(v38 + 32) = v40;
              *(_QWORD *)(v22 + 40) = 0;
              *(_QWORD *)(v22 + 48) = 0;
              *(_QWORD *)(v22 + 32) = 0;
              v41 = *(_OWORD *)(v22 + 56);
              *(_QWORD *)(v38 + 72) = *(_QWORD *)(v22 + 72);
              *(_OWORD *)(v38 + 56) = v41;
              *(_QWORD *)(v22 + 64) = 0;
              *(_QWORD *)(v22 + 72) = 0;
              *(_QWORD *)(v22 + 56) = 0;
              v42 = *(_OWORD *)(v22 + 80);
              *(_QWORD *)(v38 + 96) = *(_QWORD *)(v22 + 96);
              *(_OWORD *)(v38 + 80) = v42;
              *(_QWORD *)(v22 + 80) = 0;
              *(_QWORD *)(v22 + 88) = 0;
              *(_QWORD *)(v22 + 96) = 0;
              v38 += 104;
              v22 += 104;
            }
            while (v22 != size);
            v36 = buf.__r_.__value_.__l.__size_;
            v22 = __p.__r_.__value_.__l.__size_;
          }
          v43 = __p.__r_.__value_.__r.__words[0];
          v44 = __p.__r_.__value_.__r.__words[2];
          __p.__r_.__value_.__r.__words[0] = v36;
          __p.__r_.__value_.__l.__size_ = v38;
          __p.__r_.__value_.__r.__words[2] = v101;
          buf.__r_.__value_.__r.__words[2] = v22;
          v101 = v44;
          buf.__r_.__value_.__r.__words[0] = v43;
          buf.__r_.__value_.__l.__size_ = v43;
          std::__split_buffer<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::~__split_buffer((uint64_t)&buf);
          goto LABEL_84;
        }
        v29 = __p.__r_.__value_.__l.__size_ - v22;
        v86 = (int64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) / 104;
        if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v22) >> 3) >= v19)
        {
          v30 = (const std::string *)((char *)v90 + 104 * v19);
          v32 = __p.__r_.__value_.__l.__size_;
LABEL_68:
          v46 = v32 - 104 * v19;
          v47 = v32;
          while (v46 < *((_QWORD *)&v20 + 1))
          {
            *(_BYTE *)v47 = *(_BYTE *)v46;
            v48 = *(_OWORD *)(v46 + 8);
            *(_QWORD *)(v47 + 24) = *(_QWORD *)(v46 + 24);
            *(_OWORD *)(v47 + 8) = v48;
            *(_QWORD *)(v46 + 16) = 0;
            *(_QWORD *)(v46 + 24) = 0;
            *(_QWORD *)(v46 + 8) = 0;
            v49 = *(_OWORD *)(v46 + 32);
            *(_QWORD *)(v47 + 48) = *(_QWORD *)(v46 + 48);
            *(_OWORD *)(v47 + 32) = v49;
            *(_QWORD *)(v46 + 40) = 0;
            *(_QWORD *)(v46 + 48) = 0;
            *(_QWORD *)(v46 + 32) = 0;
            v50 = *(_OWORD *)(v46 + 56);
            *(_QWORD *)(v47 + 72) = *(_QWORD *)(v46 + 72);
            *(_OWORD *)(v47 + 56) = v50;
            *(_QWORD *)(v46 + 64) = 0;
            *(_QWORD *)(v46 + 72) = 0;
            *(_QWORD *)(v46 + 56) = 0;
            v51 = *(_OWORD *)(v46 + 80);
            *(_QWORD *)(v47 + 96) = *(_QWORD *)(v46 + 96);
            *(_OWORD *)(v47 + 80) = v51;
            *(_QWORD *)(v46 + 80) = 0;
            *(_QWORD *)(v46 + 88) = 0;
            *(_QWORD *)(v46 + 96) = 0;
            v47 += 104;
            v46 += 104;
          }
          v52 = v22 + 104 * v19;
          __p.__r_.__value_.__l.__size_ = v47;
          if (v32 != v52)
          {
            v53 = 0;
            v54 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v32 - v52) >> 3);
            v55 = -104 * v54;
            v56 = v20 + 104 * v54 + 104 * v86;
            do
            {
              v57 = v56 + v53;
              v58 = v32 + v53;
              *(_BYTE *)(v32 + v53 - 104) = *(_BYTE *)(v56 + v53 - 104);
              v59 = (void **)(v32 + v53 - 96);
              if (*(char *)(v32 + v53 - 73) < 0)
                operator delete(*v59);
              v60 = *(_OWORD *)(v57 - 96);
              *(_QWORD *)(v32 + v53 - 80) = *(_QWORD *)(v57 - 80);
              *(_OWORD *)v59 = v60;
              *(_BYTE *)(v57 - 73) = 0;
              *(_BYTE *)(v57 - 96) = 0;
              v61 = (void **)(v58 - 72);
              if (*(char *)(v58 - 49) < 0)
                operator delete(*v61);
              v62 = (__int128 *)(v57 - 72);
              v63 = v56 + v53;
              v64 = *v62;
              *(_QWORD *)(v58 - 56) = *((_QWORD *)v62 + 2);
              *(_OWORD *)v61 = v64;
              *(_BYTE *)(v56 + v53 - 49) = 0;
              *(_BYTE *)v62 = 0;
              v65 = v32 + v53;
              v66 = (void **)(v32 + v53 - 48);
              if (*(char *)(v32 + v53 - 25) < 0)
                operator delete(*v66);
              v67 = *(_OWORD *)(v63 - 48);
              *(_QWORD *)(v32 + v53 - 32) = *(_QWORD *)(v63 - 32);
              *(_OWORD *)v66 = v67;
              *(_BYTE *)(v63 - 25) = 0;
              *(_BYTE *)(v63 - 48) = 0;
              v68 = (void **)(v65 - 24);
              if (*(char *)(v65 - 1) < 0)
                operator delete(*v68);
              v69 = v56 + v53;
              v70 = *(_OWORD *)(v56 + v53 - 24);
              *(_QWORD *)(v65 - 8) = *(_QWORD *)(v56 + v53 - 8);
              *(_OWORD *)v68 = v70;
              *(_BYTE *)(v69 - 1) = 0;
              *(_BYTE *)(v69 - 24) = 0;
              v53 -= 104;
            }
            while (v55 != v53);
          }
          a2 = v87;
          if (v18 != v30)
          {
            do
            {
              v72 = v18->__r_.__value_.__s.__data_[0];
              v71 = (const std::string *)&v18->__r_.__value_.__r.__words[1];
              *(_BYTE *)v22 = v72;
              v73 = (std::string *)(v22 + 8);
              std::string::operator=(v73++, v71);
              std::string::operator=(v73, v71 + 1);
              v74 = v71 + 2;
              std::string::operator=(++v73, v71 + 2);
              std::string::operator=(v73 + 1, v71 + 3);
              v18 = v71 + 4;
              v22 = (std::string::size_type)&v73[2];
            }
            while (&v74[2] != v30);
          }
          goto LABEL_84;
        }
        v30 = (const std::string *)((char *)v90 + 8 * ((uint64_t)(__p.__r_.__value_.__l.__size_ - v22) >> 3));
        if (v30 == v91)
        {
          v32 = __p.__r_.__value_.__l.__size_;
        }
        else
        {
          v31 = 0;
          do
          {
            snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(*((_QWORD *)&v20 + 1) + v31, (uint64_t)v30 + v31);
            v31 += 104;
          }
          while ((const std::string *)((char *)v30 + v31) != v17);
          v32 = *((_QWORD *)&v20 + 1) + v31;
        }
        __p.__r_.__value_.__l.__size_ = v32;
        v45 = v29 < 1;
        a2 = v87;
        if (!v45)
          goto LABEL_68;
      }
LABEL_84:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v90;
      std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99.__r_.__value_.__l.__data_);
      v12 = v88;
      goto LABEL_87;
    }
    v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = &v98;
      if ((v98.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v15 = (std::__fs::filesystem::path *)v98.__pn_.__r_.__value_.__r.__words[0];
      if ((v13->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = (std::string::size_type)v13;
      else
        v16 = v13->__p_.__pn_.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v16;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_ERROR, "Found non-directory entry in directory %s: %s. Skipping.", (uint8_t *)&buf, 0x16u);
    }
LABEL_87:
    std::__fs::filesystem::directory_iterator::__increment(&v94, 0);
  }
  v75 = v93;
  if (v93)
  {
    v76 = (unint64_t *)&v93->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  cntrl = v94.__imp_.__cntrl_;
  if (v94.__imp_.__cntrl_)
  {
    v79 = &v94.__imp_.__cntrl_->__shared_owners_;
    do
      v80 = __ldaxr((unint64_t *)v79);
    while (__stlxr(v80 - 1, (unint64_t *)v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v81 = v96;
  if (v96)
  {
    v82 = (unint64_t *)&v96->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  std::recursive_mutex::unlock(v84);
  *a3 = __p;
  memset(&__p, 0, sizeof(__p));
LABEL_104:
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v99);
  if (SHIBYTE(v98.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v98.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C22B7A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;
  uint64_t v42;
  void *v45;
  NSObject *v46;
  uint64_t v47;

  std::recursive_mutex::unlock(a10);
  if (a2 == 1)
  {
    v45 = __cxa_begin_catch(a1);
    v46 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      v47 = (*(uint64_t (**)(void *))(*(_QWORD *)v45 + 16))(v45);
      *(_DWORD *)(v42 - 176) = 136315138;
      *(_QWORD *)(v41 + 4) = v47;
      _os_log_impl(&dword_1C2196000, v46, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s", (uint8_t *)(v42 - 176), 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B79B4);
  }
  *(_QWORD *)(v42 - 176) = &a29;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)(v42 - 176));
  if (a41 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v15;
  const std::__fs::filesystem::directory_entry *v16;
  NSObject *v17;
  std::__fs::filesystem::path *v18;
  const std::__fs::filesystem::directory_entry *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  std::string *p_p;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *cntrl;
  uint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  NSObject *v57;
  std::__fs::filesystem::path *v58;
  NSObject *v59;
  std::__fs::filesystem::path *v60;
  std::recursive_mutex *v61;
  uint64_t v62;
  std::string p;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v64;
  std::__shared_weak_count *v65;
  std::__fs::filesystem::directory_iterator v66;
  std::shared_ptr<std::__fs::filesystem::__dir_stream>::element_type *v67;
  std::__shared_weak_count *v68;
  _BYTE v69[24];
  std::__fs::filesystem::path v70;
  _BYTE buf[12];
  __int16 v72;
  const std::__fs::filesystem::directory_entry *v73;
  char v74;
  _BYTE v75[32];
  _BYTE *v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, a3, &v70.__pn_);
  memset(v69, 0, sizeof(v69));
  v61 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  std::__fs::filesystem::__status(&v70, 0);
  if (v75[0] != 2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    std::recursive_mutex::unlock(v61);
    goto LABEL_110;
  }
  MEMORY[0x1C3BB9958](&v67, &v70, 0, 0);
  v7 = v67;
  v8 = v68;
  if (v68)
  {
    p_shared_owners = (unint64_t *)&v68->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = v68;
    v66.__imp_.__ptr_ = v7;
    v66.__imp_.__cntrl_ = v8;
    if (v68)
    {
      v12 = (unint64_t *)&v68->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      v64 = 0;
      v65 = 0;
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      goto LABEL_15;
    }
  }
  else
  {
    v66.__imp_.__ptr_ = v67;
    v66.__imp_.__cntrl_ = 0;
  }
  v64 = 0;
  v65 = 0;
LABEL_15:
  v15 = v64;
  while (v66.__imp_.__ptr_ != v15)
  {
    v16 = std::__fs::filesystem::directory_iterator::__dereference(&v66);
    if (std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](&v16->__p_))
    {
      if (SHIBYTE(v16->__p_.__pn_.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&p, v16->__p_.__pn_.__r_.__value_.__l.__data_, v16->__p_.__pn_.__r_.__value_.__l.__size_);
      else
        p = (std::string)v16->__p_;
      snlp::ssu::cache::SSUCacheDirectory::buildResultForCacheFile((snlp::ssu::cache::SSUCacheDirectory *)a1, (uint64_t)a3, &v70, (const std::__fs::filesystem::path *)&p, (uint64_t)buf);
      if (v74)
      {
        v20 = *(_QWORD *)&v69[8];
        if (*(_QWORD *)&v69[8] >= *(_QWORD *)&v69[16])
        {
          v24 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v69[8] - *(_QWORD *)v69) >> 3);
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) > 0x276276276276276)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          if (0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)&v69[16] - *(_QWORD *)v69) >> 3) > v25)
            v25 = 0x9D89D89D89D89D8ALL * ((uint64_t)(*(_QWORD *)&v69[16] - *(_QWORD *)v69) >> 3);
          if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(_QWORD *)&v69[16] - *(_QWORD *)v69) >> 3)) >= 0x13B13B13B13B13BLL)
            v26 = 0x276276276276276;
          else
            v26 = v25;
          v76 = &v69[16];
          if (v26)
            v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nl_featurization::postprocessing::LabelledSpan>>(v26);
          else
            v27 = 0;
          *(_QWORD *)v75 = v26;
          *(_QWORD *)&v75[8] = v26 + 104 * v24;
          *(_QWORD *)&v75[16] = *(_QWORD *)&v75[8];
          *(_QWORD *)&v75[24] = v26 + 104 * v27;
          snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(*(uint64_t *)&v75[8], (uint64_t)buf);
          *(_QWORD *)&v75[16] += 104;
          std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>>((uint64_t)&v69[16], *(uint64_t *)&v69[8], *(uint64_t *)&v69[8], *(uint64_t *)v69, *(uint64_t *)v69, *(uint64_t *)&v75[8], *(uint64_t *)&v75[8]);
          v28 = *(_OWORD *)v69;
          *(_QWORD *)v69 = v29;
          v30 = *(_QWORD *)&v69[16];
          v62 = *(_QWORD *)&v75[16];
          v31 = *(_OWORD *)&v75[16];
          *(_OWORD *)&v75[8] = v28;
          *(_OWORD *)&v69[8] = v31;
          *(_QWORD *)&v75[24] = v30;
          *(_QWORD *)v75 = v28;
          std::__split_buffer<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::~__split_buffer((uint64_t)v75);
          v21 = v62;
        }
        else
        {
          snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(*(uint64_t *)&v69[8], (uint64_t)buf);
          v21 = v20 + 104;
        }
        *(_QWORD *)&v69[8] = v21;
      }
      else
      {
        v22 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          p_p = &p;
          if ((p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v75 = 136315138;
          *(_QWORD *)&v75[4] = p_p;
          _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_ERROR, "Failed to build cache file result for: %s. Skipping.", v75, 0xCu);
        }
      }
      std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      if (SHIBYTE(p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(p.__r_.__value_.__l.__data_);
    }
    else
    {
      v17 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        v18 = &v70;
        if ((v70.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v18 = (std::__fs::filesystem::path *)v70.__pn_.__r_.__value_.__r.__words[0];
        if ((v16->__p_.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = v16;
        else
          v19 = (const std::__fs::filesystem::directory_entry *)v16->__p_.__pn_.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v18;
        v72 = 2080;
        v73 = v19;
        _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "Found non-regular-file entry in directory %s: %s. Skipping.", buf, 0x16u);
      }
    }
    std::__fs::filesystem::directory_iterator::__increment(&v66, 0);
  }
  v32 = v65;
  if (v65)
  {
    v33 = (unint64_t *)&v65->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  cntrl = v66.__imp_.__cntrl_;
  if (v66.__imp_.__cntrl_)
  {
    v36 = &v66.__imp_.__cntrl_->__shared_owners_;
    do
      v37 = __ldaxr((unint64_t *)v36);
    while (__stlxr(v37 - 1, (unint64_t *)v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v38 = v68;
  if (v68)
  {
    v39 = (unint64_t *)&v68->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  std::recursive_mutex::unlock(v61);
  v41 = *(_OWORD *)v69;
  if (*(_QWORD *)v69 == *(_QWORD *)&v69[8])
  {
    v59 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      v60 = &v70;
      if ((v70.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v60 = (std::__fs::filesystem::path *)v70.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v60;
      _os_log_impl(&dword_1C2196000, v59, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Could not find any cache files in directory: %s", buf, 0xCu);
    }
  }
  else
  {
    v42 = *(unsigned __int8 *)(*(_QWORD *)v69 + 55);
    v43 = *(_QWORD *)(*(_QWORD *)v69 + 40);
    if ((v42 & 0x80u) == 0)
      v44 = *(unsigned __int8 *)(*(_QWORD *)v69 + 55);
    else
      v44 = *(_QWORD *)(*(_QWORD *)v69 + 40);
    v45 = *(_QWORD *)v69;
    while (1)
    {
      v46 = *(unsigned __int8 *)(v45 + 55);
      v47 = (char)v46;
      if ((v46 & 0x80u) != 0)
        v46 = *(_QWORD *)(v45 + 40);
      if (v44 != v46)
        break;
      if (v47 >= 0)
        v48 = (unsigned __int8 *)(v45 + 32);
      else
        v48 = *(unsigned __int8 **)(v45 + 32);
      if ((v42 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v41 + 32), v48, v43))
          break;
      }
      else if ((_DWORD)v42)
      {
        v49 = (unsigned __int8 *)(v41 + 32);
        v50 = v42;
        while (*v49 == *v48)
        {
          ++v49;
          ++v48;
          if (!--v50)
            goto LABEL_82;
        }
        break;
      }
LABEL_82:
      v51 = *(unsigned __int8 *)(v41 + 79);
      if ((v51 & 0x80u) == 0)
        v52 = *(unsigned __int8 *)(v41 + 79);
      else
        v52 = *(_QWORD *)(v41 + 64);
      v53 = *(unsigned __int8 *)(v45 + 79);
      v54 = (char)v53;
      if ((v53 & 0x80u) != 0)
        v53 = *(_QWORD *)(v45 + 64);
      if (v52 != v53)
        break;
      if (v54 >= 0)
        v55 = (unsigned __int8 *)(v45 + 56);
      else
        v55 = *(unsigned __int8 **)(v45 + 56);
      if ((v51 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v41 + 56), v55, *(_QWORD *)(v41 + 64)))
          break;
      }
      else if (*(_BYTE *)(v41 + 79))
      {
        v56 = (unsigned __int8 *)(v41 + 56);
        while (*v56 == *v55)
        {
          ++v56;
          ++v55;
          if (!--v51)
            goto LABEL_98;
        }
        break;
      }
LABEL_98:
      v45 += 104;
      if (v45 == *((_QWORD *)&v41 + 1))
      {
        *(_OWORD *)a4 = v41;
        a4[2] = *(_QWORD *)&v69[16];
        memset(v69, 0, sizeof(v69));
        goto LABEL_110;
      }
    }
    v57 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = &v70;
      if ((v70.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::__fs::filesystem::path *)v70.__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v58;
      _os_log_impl(&dword_1C2196000, v57, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered cache files of different versions in directory: %s", buf, 0xCu);
    }
  }
  snlp::ssu::cache::SSUCacheDirectory::healByRemovingDirectory((snlp::ssu::cache::SSUCacheDirectory *)a1, &v70);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_110:
  *(_QWORD *)buf = v69;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v70.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__pn_.__r_.__value_.__l.__data_);
}

void sub_1C22B8324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void **buf)
{
  buf = (void **)&a27;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&buf);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1C22B8380(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a36);
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  JUMPOUT(0x1C22B8400);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  v6 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = (std::string *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return a1;
}

void sub_1C22B857C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 104;
    std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::destroy[abi:ne180100](i - 104);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>,std::reverse_iterator<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_BYTE *)(a3 - 104);
    a3 -= 104;
    *(_BYTE *)(a7 - 104) = v8;
    a7 -= 104;
    v9 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a7 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)(a7 + 8) = v9;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v10 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(a7 + 48) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)(a7 + 32) = v10;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    v11 = *(_OWORD *)(a3 + 56);
    *(_QWORD *)(a7 + 72) = *(_QWORD *)(a3 + 72);
    *(_OWORD *)(a7 + 56) = v11;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    result = *(__n128 *)(a3 + 80);
    *(_QWORD *)(a7 + 96) = *(_QWORD *)(a3 + 96);
    *(__n128 *)(a7 + 80) = result;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
  }
  return result;
}

BOOL std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](const std::__fs::filesystem::path *a1)
{
  int v1;
  unsigned __int8 v3;

  if (((1 << a1[3].__pn_.__r_.__value_.__s.__data_[1]) & 0x13) != 0)
  {
    std::__fs::filesystem::__status(a1, 0);
    v1 = v3;
  }
  else
  {
    v1 = a1[3].__pn_.__r_.__value_.__s.__data_[0];
  }
  return v1 == 1;
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::buildResultForCacheFile@<X0>(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, uint64_t a2@<X1>, const std::__fs::filesystem::path *a3@<X2>, const std::__fs::filesystem::path *a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  const std::__fs::filesystem::path *v11;
  const std::__fs::filesystem::path *v12;
  std::string v14;
  std::string v15;
  uint8_t v16;
  char v17;
  uint8_t buf[4];
  _BYTE v19[20];
  uint64_t v20;
  std::string v21;
  std::string v22;
  std::string pn;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheDirectory::extractMetadataFromCacheFileName(a4, &v14);
  if (v17)
  {
    buf[0] = v16;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v19[4], *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v19[4] = *(_OWORD *)a2;
      v20 = *(_QWORD *)(a2 + 16);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
    else
      v21 = v14;
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    else
      v22 = v15;
    if (SHIBYTE(a4->__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, a4->__pn_.__r_.__value_.__l.__data_, a4->__pn_.__r_.__value_.__l.__size_);
    else
      pn = a4->__pn_;
    *(_BYTE *)a5 = buf[0];
    *(_OWORD *)(a5 + 8) = *(_OWORD *)&v19[4];
    *(_QWORD *)(a5 + 24) = v20;
    *(std::string *)(a5 + 32) = v21;
    *(std::string *)(a5 + 56) = v22;
    *(std::string *)(a5 + 80) = pn;
    *(_BYTE *)(a5 + 104) = 1;
  }
  else
  {
    v10 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if ((a3->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = a3;
      else
        v11 = (const std::__fs::filesystem::path *)a3->__pn_.__r_.__value_.__r.__words[0];
      if ((a4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = a4;
      else
        v12 = (const std::__fs::filesystem::path *)a4->__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v19 = v11;
      *(_WORD *)&v19[8] = 2080;
      *(_QWORD *)&v19[10] = v12;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Encountered bad cache directory state: the app bundle directory %s contains a file with an unexpected filename: %s)", buf, 0x16u);
    }
    snlp::ssu::cache::SSUCacheDirectory::healByRemovingDirectory(a1, a3);
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 104) = 0;
  }
  return std::__optional_destruct_base<std::pair<snlp::ssu::cache::SSUCacheFileVersion,SSUCategoryType>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v14);
}

void sub_1C22B8910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void **v29;

  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(v29);
  if (a23 < 0)
    operator delete(__p);
  std::__optional_destruct_base<std::pair<snlp::ssu::cache::SSUCacheFileVersion,SSUCategoryType>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::healByRemovingDirectory(snlp::ssu::cache::SSUCacheDirectory *this, const std::__fs::filesystem::path *a2)
{
  NSObject *v4;
  const std::__fs::filesystem::path *v5;
  std::recursive_mutex *v6;
  uintmax_t v7;
  NSObject *v8;
  const std::__fs::filesystem::path *v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  NSObject *v14;
  const std::__fs::filesystem::path *v15;
  char v16;
  uint8_t buf[4];
  uintmax_t v18;
  __int16 v19;
  const std::__fs::filesystem::path *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v5 = a2;
    else
      v5 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v18 = (uintmax_t)v5;
    _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Attempting to heal a corrupted cache by removing all contents under: %s", buf, 0xCu);
  }
  v6 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock(v6);
  std::__fs::filesystem::__status(a2, 0);
  if (v16 == 2)
  {
    v7 = std::__fs::filesystem::__remove_all(a2, 0);
    v8 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = a2;
      else
        v9 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 134218242;
      v18 = v7;
      v19 = 2080;
      v20 = v9;
      v10 = "[SSUCacheDirectory] Successfully removed %lu files/directories under %s";
      v11 = v8;
      v12 = OS_LOG_TYPE_DEBUG;
      v13 = 22;
LABEL_17:
      _os_log_impl(&dword_1C2196000, v11, v12, v10, buf, v13);
    }
  }
  else
  {
    v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = a2;
      else
        v15 = (const std::__fs::filesystem::path *)a2->__pn_.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      v18 = (uintmax_t)v15;
      v10 = "[SSUCacheDirectory] Error: cannot remove non-existing directory: %s";
      v11 = v14;
      v12 = OS_LOG_TYPE_ERROR;
      v13 = 12;
      goto LABEL_17;
    }
  }
  std::recursive_mutex::unlock(v6);
}

void sub_1C22B8B2C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  std::recursive_mutex *v11;
  void *v14;
  NSObject *v15;
  uint64_t v16;

  std::recursive_mutex::unlock(v11);
  if (a2 == 1)
  {
    v14 = __cxa_begin_catch(a1);
    v15 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v16 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v16;
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B8AFCLL);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::extractMetadataFromCacheFileName(const std::__fs::filesystem::path *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::sub_match<const char *> *v6;
  char *v7;
  unint64_t v8;
  void **v9;
  NSObject *v10;
  std::string *v11;
  _BYTE *v12;
  char **v13;
  char *v14;
  char **v15;
  _BYTE *v16;
  char **v17;
  char *v18;
  char **v19;
  std::string::size_type v20;
  char v21;
  std::string *v22;
  unsigned int v23;
  std::string::value_type v24;
  NSObject *v25;
  std::string *p_str;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string __str;
  std::string v34;
  std::string v35;
  std::string v36;
  std::regex_traits<char> v37[2];
  std::__shared_weak_count *v38;
  std::string v39;
  std::string buf;
  std::string v41;
  void *v42[2];
  _QWORD v43[6];
  void *__p;
  uint64_t v45;
  uint64_t v46;
  char v47;
  _BYTE v48[8];
  uint64_t v49;
  char v50;
  std::locale v51[2];

  v51[1] = *(std::locale *)MEMORY[0x1E0C80C00];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)v42, "([0-9a-f]+)%s([0-9_]+|unknown)%s([0-9]+)%s");
  v37[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSeparator;
  v37[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v37[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v42, v37);
  v37[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSeparator;
  v37[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v37[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v42, v37);
  v37[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v37[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v37[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v42, v37);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v39, (uint64_t *)v42);
  if (v50)
  {
    std::locale::~locale(v51);
    v50 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v48);
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  if (v43[1])
    operator delete((void *)v43[1]);
  v37[0].__loc_.__locale_ = (std::locale::__imp *)v42;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v37, (uint64_t)&v39);
  std::__fs::filesystem::path::filename[abi:ne180100](this, (uint64_t)v42);
  if (SHIBYTE(v43[0]) < 0)
  {
    std::string::__init_copy_ctor_external(&v36, (const std::string::value_type *)v42[0], (std::string::size_type)v42[1]);
    if (SHIBYTE(v43[0]) < 0)
      operator delete(v42[0]);
  }
  else
  {
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)v42;
    v36.__r_.__value_.__r.__words[2] = v43[0];
  }
  v43[4] = 0;
  v43[5] = 0;
  LOBYTE(__p) = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48[0] = 0;
  v49 = 0;
  *(_OWORD *)v42 = 0u;
  memset(v43, 0, 25);
  size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (std::sub_match<const char *> *)&v36;
  else
    v6 = (std::sub_match<const char *> *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v36.__r_.__value_.__l.__size_;
  if ((std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v6, (std::sub_match<const char *> *)((char *)v6 + size), (uint64_t)v42, (uint64_t)v37) & 1) != 0)
  {
    v7 = (char *)v42[0];
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v42[1] - (char *)v42[0]) >> 3);
    if (v8 <= 1)
      v9 = v42;
    else
      v9 = (void **)v42[0];
    if (*((_BYTE *)v9 + 40))
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v35, (char *)v9[3], (char *)v9[4], (_BYTE *)v9[4] - (_BYTE *)v9[3]);
    else
      memset(&v35, 0, sizeof(v35));
    v12 = v7 + 64;
    if (v8 <= 2)
      v12 = &v43[3];
    if (*v12)
    {
      v13 = (char **)(v7 + 48);
      if (v8 <= 2)
        v13 = (char **)&v43[1];
      v14 = *v13;
      v15 = (char **)(v7 + 56);
      if (v8 <= 2)
        v15 = (char **)&v43[2];
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v34, v14, *v15, *v15 - v14);
    }
    else
    {
      memset(&v34, 0, sizeof(v34));
    }
    v16 = v7 + 88;
    if (v8 <= 3)
      v16 = &v43[3];
    if (*v16)
    {
      v17 = (char **)(v7 + 72);
      if (v8 <= 3)
        v17 = (char **)&v43[1];
      v18 = *v17;
      v19 = (char **)(v7 + 80);
      if (v8 <= 3)
        v19 = (char **)&v43[2];
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&__str, v18, *v19, *v19 - v18);
    }
    else
    {
      memset(&__str, 0, sizeof(__str));
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v32, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    else
      v32 = v34;
    v20 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    v21 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    v22 = (std::string *)v32.__r_.__value_.__r.__words[0];
    if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = v32.__r_.__value_.__l.__size_;
    else
      v22 = &v32;
    if (v20)
    {
      do
      {
        if (v22->__r_.__value_.__s.__data_[0] == 95)
          v22->__r_.__value_.__s.__data_[0] = 46;
        v22 = (std::string *)((char *)v22 + 1);
        --v20;
      }
      while (v20);
      v21 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
    }
    if (v21 < 0)
      std::string::__init_copy_ctor_external(&v30, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    else
      v30 = v32;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v31 = v35;
    v23 = std::stoi(&__str, 0, 10);
    v24 = v23;
    if (v23 <= 3)
    {
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&buf, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
      else
        buf = v30;
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v41, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
      else
        v41 = v31;
      *a2 = buf;
      a2[1] = v41;
      a2[2].__r_.__value_.__s.__data_[0] = v24;
      a2[2].__r_.__value_.__s.__data_[8] = 1;
    }
    else
    {
      v25 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        p_str = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
        _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Category component (%s) not valid SSUCategoryType", (uint8_t *)&buf, 0xCu);
      }
      a2->__r_.__value_.__s.__data_[0] = 0;
      a2[2].__r_.__value_.__s.__data_[8] = 0;
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  else
  {
    v10 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = &v36;
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = (std::string *)v36.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Could not extract version from filename: %s", (uint8_t *)&buf, 0xCu);
    }
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[2].__r_.__value_.__s.__data_[8] = 0;
  }
  if (v42[0])
    operator delete(v42[0]);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  v27 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  std::locale::~locale(&v37[0].__loc_);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1C22B91A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,std::locale a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a70;

  if (a64 < 0)
    operator delete(__p);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a9);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  if (a38 < 0)
    operator delete(a33);
  if (a70)
    operator delete(a70);
  if (a44 < 0)
    operator delete(a39);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a50);
  std::locale::~locale(&a45);
  if (a58 < 0)
    operator delete(a53);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<snlp::ssu::cache::SSUCacheFileVersion,SSUCategoryType>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

_QWORD *boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>(_QWORD *a1, uint64_t *a2)
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a2, a2[1]);
}

void snlp::ssu::cache::SSUCacheDirectory::lookupCacheFileForCategory(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, unsigned __int8 a4@<W3>, size_t *a5@<X4>, _BYTE *a6@<X8>)
{
  unsigned int v11;
  NSObject *v12;
  char *v13;
  char *v14;
  const char *v15;
  void *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  size_t *v27;
  uint64_t v28;
  NSObject *v30;
  uint64_t v31;
  char v32;
  NSObject *v33;
  _BYTE *v34;
  void *__s1;
  uint8_t v36[8];
  _BYTE buf[22];
  __int16 v38;
  const char *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v11 = a4;
  v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (a2[23] >= 0)
      v13 = a2;
    else
      v13 = *(char **)a2;
    if (a3[23] >= 0)
      v14 = a3;
    else
      v14 = *(char **)a3;
    if (v11 <= 3)
      v15 = EnumNamesSSUCategoryType(void)::names[v11];
    else
      v15 = "";
    if (*((char *)a5 + 23) >= 0)
      v16 = a5;
    else
      v16 = (void *)*a5;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v14;
    v38 = 2080;
    v39 = v15;
    v40 = 2080;
    v41 = v16;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "Looking up cache file for locale=%s, appBundleId=%s, category=%s, encoderAssetVersion=%s", buf, 0x2Au);
  }
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp(a1, a2, a3, buf);
  v34 = a6;
  v17 = *(unsigned __int8 **)buf;
  v18 = *(unsigned __int8 **)&buf[8];
  if (*(_QWORD *)buf != *(_QWORD *)&buf[8])
  {
    v19 = *((unsigned __int8 *)a5 + 23);
    v20 = a5[1];
    __s1 = (void *)*a5;
    if ((v19 & 0x80u) == 0)
      v21 = *((unsigned __int8 *)a5 + 23);
    else
      v21 = a5[1];
    while (1)
    {
      v22 = v17 + 32;
      v23 = v17[55];
      v24 = (char)v23;
      v25 = *((_QWORD *)v17 + 5);
      if ((v23 & 0x80u) != 0)
        v23 = *((_QWORD *)v17 + 5);
      if (v21 == v23)
      {
        if (v24 >= 0)
          v26 = v17 + 32;
        else
          v26 = *(unsigned __int8 **)v22;
        if ((v19 & 0x80) != 0)
        {
          if (!memcmp(__s1, v26, v20))
            goto LABEL_42;
        }
        else
        {
          if (!(_DWORD)v19)
            goto LABEL_42;
          v27 = a5;
          v28 = v19;
          while (*(unsigned __int8 *)v27 == *v26)
          {
            v27 = (size_t *)((char *)v27 + 1);
            ++v26;
            if (!--v28)
              goto LABEL_42;
          }
        }
      }
      if (v24 < 0)
      {
        if (v25 != 7)
          goto LABEL_43;
        v22 = *(unsigned __int8 **)v22;
      }
      else if (v24 != 7)
      {
        goto LABEL_43;
      }
      if (*(_DWORD *)v22 == 1852534389 && *(_DWORD *)(v22 + 3) == 1853321070)
      {
LABEL_42:
        if (*v17 == v11)
          break;
      }
LABEL_43:
      v17 += 104;
      if (v17 == v18)
        goto LABEL_49;
    }
  }
  if (v18 == v17)
  {
LABEL_49:
    v33 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEBUG, "Did not find relevant cache file", v36, 2u);
    }
    v32 = 0;
    v31 = (uint64_t)v34;
    *v34 = 0;
  }
  else
  {
    v30 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_DEBUG, "Found relevant cache file.", v36, 2u);
    }
    v31 = snlp::ssu::cache::SSUCacheDirectory::CacheFileResult::CacheFileResult((uint64_t)v34, (uint64_t)v17);
    v32 = 1;
  }
  *(_BYTE *)(v31 + 104) = v32;
  *(_QWORD *)v36 = buf;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
}

void sub_1C22B96DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::cache::SSUCacheDirectory::insertCacheFile(uint64_t a1, char *a2, char *a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  NSObject *v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  NSObject *v17;
  std::string *v18;
  std::string *v19;
  int v20;
  std::string v22;
  std::string v23;
  uint8_t v24[4];
  std::string *v25;
  __int16 v26;
  std::string *v27;
  std::string __p;
  std::string buf;
  std::string *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v12 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = a2[23] >= 0 ? (std::string::size_type)a2 : *(_QWORD *)a2;
    v14 = a3[23] >= 0 ? (std::string::size_type)a3 : *(_QWORD *)a3;
    snlp::ssu::cache::SSUCacheFileVersion::toString(&__p, a4);
    v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    v16 = a5 <= 3 ? EnumNamesSSUCategoryType(void)::names[a5] : "";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v14;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v30 = v15;
    v31 = 2080;
    v32 = v16;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Inserting cache file for locale %s, appBundleId %s, version %s and category %s", (uint8_t *)&buf, 0x2Au);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  snlp::ssu::cache::SSUCacheDirectory::prepareAppBundleDirectoryForInsertion((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, a3, a5, &buf);
  snlp::ssu::cache::SSUCacheDirectory::buildCacheFilePath((snlp::ssu::cache::SSUCacheDirectory *)a1, a2, a3, a4, a5, &__p);
  v17 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a6 + 23) < 0)
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      v23 = *(std::string *)a6;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v23;
    else
      v18 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v22, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v22 = __p;
    v19 = &v22;
    if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
    *(_DWORD *)v24 = 136315394;
    v25 = v18;
    v26 = 2080;
    v27 = v19;
    _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Atomically renaming temporary file %s to final location %s", v24, 0x16u);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::__fs::filesystem::__rename((const std::__fs::filesystem::path *)a6, (const std::__fs::filesystem::path *)&__p, 0);
  v20 = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
  return v20 | 0x100u;
}

void sub_1C22B99D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,__int128 buf,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  std::recursive_mutex *v35;
  void *v38;
  NSObject *v39;
  uint64_t v40;

  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete((void *)buf);
  if (a35 < 0)
    operator delete(a30);
  std::recursive_mutex::unlock(v35);
  if (a2 == 1)
  {
    v38 = __cxa_begin_catch(a1);
    v39 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      v40 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 16))(v38);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v40;
      _os_log_impl(&dword_1C2196000, v39, OS_LOG_TYPE_ERROR, "[SSUCacheDirectory] Hit filesystem error: %s)", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22B9998);
  }
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::prepareAppBundleDirectoryForInsertion(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, char *a3@<X2>, unsigned __int8 a4@<W3>, std::string *a5@<X8>)
{
  uint64_t v10;
  char v11;
  int v12;
  std::string::size_type v13;
  NSObject *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  std::string buf;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheDirectory::lookupCacheFilesForApp((uint64_t)a1, a2, a3, &v18);
  v10 = v19;
  if (v18 == v19)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = a4;
    v13 = v18 + 80;
    do
    {
      if (*(unsigned __int8 *)(v13 - 80) == v12)
      {
        v14 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = v13;
          if (*(char *)(v13 + 23) < 0)
            v15 = *(_QWORD *)v13;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
          _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[SSUCacheDirectory] Removing existing cache file before inserting new one: %s", (uint8_t *)&buf, 0xCu);
        }
        std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)v13, 0);
        v11 = 1;
      }
      v16 = v13 + 24;
      v13 += 104;
    }
    while (v16 != v10);
  }
  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(a1, a2, a3, &buf);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&buf, 0);
  if (v20 != 2)
    std::__fs::filesystem::__create_directories((const std::__fs::filesystem::path *)&buf, 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a5, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    v17 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
    a5[1].__r_.__value_.__s.__data_[0] = v11;
    if (v17 < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    *a5 = buf;
    a5[1].__r_.__value_.__s.__data_[0] = v11;
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1C22B9CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __p = &a11;
  std::vector<snlp::ssu::cache::SSUCacheDirectory::CacheFileResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void snlp::ssu::cache::SSUCacheDirectory::buildCacheFilePath(snlp::ssu::cache::SSUCacheDirectory *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, std::string *a6@<X8>)
{
  std::string::size_type size;
  std::string *v10;
  size_t v11;
  std::string *v12;
  const void *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  void *__p[2];
  std::string::size_type v31;
  std::string v32;
  std::string v33;
  std::string v34;

  snlp::ssu::cache::SSUCacheDirectory::buildAppBundleDirectoryPath(a1, a2, a3, &v34);
  std::to_string(&v33, a5);
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v32 = *(std::string *)a4;
  size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v10 = &v32;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
  {
    size = v32.__r_.__value_.__l.__size_;
    v10 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  for (; size; --size)
  {
    if (v10->__r_.__value_.__s.__data_[0] == 46)
      v10->__r_.__value_.__s.__data_[0] = 95;
    v10 = (std::string *)((char *)v10 + 1);
  }
  if (*(char *)(a4 + 47) >= 0)
    v11 = *(unsigned __int8 *)(a4 + 47);
  else
    v11 = *(_QWORD *)(a4 + 32);
  v12 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v11 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v12 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v11)
  {
    if (*(char *)(a4 + 47) >= 0)
      v13 = (const void *)(a4 + 24);
    else
      v13 = *(const void **)(a4 + 24);
    memmove(v12, v13, v11);
  }
  *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 46;
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &v32;
  else
    v14 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v15 = v32.__r_.__value_.__l.__size_;
  v16 = std::string::append(&v26, (const std::string::value_type *)v14, v15);
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = std::string::append(&v27, ".");
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = &v33;
  else
    v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  else
    v21 = v33.__r_.__value_.__l.__size_;
  v22 = std::string::append(&v28, (const std::string::value_type *)v20, v21);
  v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  v24 = std::string::append(&v29, ".ssu_cache_file");
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v31 = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v29, (char *)__p);
  std::__fs::filesystem::operator/[abi:ne180100](a6, (uint64_t)&v34, (std::__fs::filesystem::path *)&v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
}

void sub_1C22B9F78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 81) < 0)
    operator delete(*(void **)(v42 - 104));
  if (*(char *)(v42 - 57) < 0)
    operator delete(*(void **)(v42 - 80));
  _Unwind_Resume(exception_object);
}

const void **nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(void *__s2, uint64_t a2, int a3, _QWORD *a4)
{
  const void **result;
  size_t v8;
  _DWORD *v9;
  _DWORD *v10;

  result = (const void **)a4[6];
  if (result)
  {
    if (*((char *)result + 23) < 0)
    {
      result = (const void **)*result;
      v8 = *(_QWORD *)(a4[6] + 8);
    }
    else
    {
      v8 = *((unsigned __int8 *)result + 23);
    }
    if (v8 == a2 && !memcmp(result, __s2, v8))
    {
      v9 = (_DWORD *)a4[1];
      v10 = (_DWORD *)a4[2];
      if (v9 != v10)
      {
        while (*v9 != a3)
        {
          if (++v9 == v10)
          {
            v9 = (_DWORD *)a4[2];
            return (const void **)(v9 != v10);
          }
        }
      }
      return (const void **)(v9 != v10);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this, const sirinluinternal::MatchingSpan *a2)
{
  unsigned __int8 v3;
  void **v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  void **v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  void **v17;
  uint64_t v18;
  _BOOL4 v19;
  _DWORD *v20;
  _DWORD *v21;
  unsigned int v23;
  uint64_t v24;
  void *v26;
  size_t v27;
  unsigned __int8 v28;
  void *__p[2];
  unsigned __int8 v30;

  std::string::basic_string[abi:ne180100]<0>(__p, "personFullName");
  std::string::basic_string[abi:ne180100]<0>(&v26, "personRelationship");
  v3 = v30;
  if ((v30 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v30 & 0x80u) == 0)
    v5 = v30;
  else
    v5 = (uint64_t)__p[1];
  v6 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v4, v5, 2, this);
  v7 = v28;
  v8 = v26;
  v9 = v27;
  if ((v28 & 0x80u) == 0)
    v10 = &v26;
  else
    v10 = (void **)v26;
  if ((v28 & 0x80u) == 0)
    v11 = v28;
  else
    v11 = v27;
  v12 = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::doesMatchingSpanHaveLabelAndMatcher(v10, v11, 2, this);
  v13 = (unsigned __int8 **)*((_QWORD *)this + 6);
  v14 = (unsigned __int8 *)*((unsigned __int8 *)v13 + 23);
  v15 = (char)v14;
  if ((char)v14 < 0)
    v14 = v13[1];
  if ((unsigned __int8 *)v11 != v14)
    goto LABEL_26;
  if (v15 >= 0)
    v16 = (unsigned __int8 *)*((_QWORD *)this + 6);
  else
    v16 = *v13;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(v8, v16, v9))
      goto LABEL_27;
LABEL_26:
    v19 = 0;
    goto LABEL_35;
  }
  if ((_DWORD)v7)
  {
    v17 = &v26;
    v18 = v7;
    while (*(unsigned __int8 *)v17 == *v16)
    {
      v17 = (void **)((char *)v17 + 1);
      ++v16;
      if (!--v18)
        goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_27:
  v20 = (_DWORD *)*((_QWORD *)this + 1);
  v21 = (_DWORD *)*((_QWORD *)this + 2);
  if (v20 != v21)
  {
    while (*v20 != 3 && *v20 != 8)
    {
      if (++v20 == v21)
      {
        v20 = (_DWORD *)*((_QWORD *)this + 2);
        break;
      }
    }
  }
  v19 = v21 != v20;
LABEL_35:
  v23 = v12 | v19;
  if ((v6 & 1) != 0)
    v24 = 1;
  else
    v24 = v23;
  if ((v7 & 0x80) != 0)
  {
    operator delete(v8);
    if ((v30 & 0x80) == 0)
      return v24;
LABEL_42:
    operator delete(__p[0]);
    return v24;
  }
  if ((v3 & 0x80) != 0)
    goto LABEL_42;
  return v24;
}

void sub_1C22BA278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isSpanFromVocRepo(uint64_t a1)
{
  _DWORD *v1;
  _DWORD *v2;

  v1 = *(_DWORD **)(a1 + 8);
  v2 = *(_DWORD **)(a1 + 16);
  if (v1 != v2)
  {
    while (*v1 != 3 && *v1 != 8)
    {
      if (++v1 == v2)
      {
        v1 = *(_DWORD **)(a1 + 16);
        return v2 != v1;
      }
    }
  }
  return v2 != v1;
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *this, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  _BOOL8 result;

  v2 = this;
  v3 = siri::ontology::oname::graph::ontology_init::common_Person(this);
  v4 = *((unsigned __int8 *)v2 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = *((unsigned __int8 *)v2 + 23);
  else
    v5 = *((_QWORD *)v2 + 1);
  v6 = *(unsigned __int8 *)(v3 + 31);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(v3 + 16);
  if (v5 != v6)
    return 0;
  v10 = *(unsigned __int8 **)(v3 + 8);
  v8 = (unsigned __int8 *)(v3 + 8);
  v9 = v10;
  if (v7 >= 0)
    v11 = v8;
  else
    v11 = v9;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)v2, v11, *((_QWORD *)v2 + 1)) == 0;
  if (!*((_BYTE *)v2 + 23))
    return 1;
  v12 = v4 - 1;
  do
  {
    v14 = *(unsigned __int8 *)v2;
    v2 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v2 + 1);
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    result = v13 == v15;
  }
  while (v13 == v15 && v18);
  return result;
}

void sub_1C22BB054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, _Unwind_Exception *exception_objecta, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;
  uint64_t v72;

  a72 = (uint64_t)&a23;
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a72);
  if (a32 < 0)
    operator delete(__p);
  if (a50 < 0)
    operator delete(a45);
  a58 = &STACK[0x2A0];
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&STACK[0x2C0]);
  a58 = (void *)(v72 - 232);
  std::vector<uaap_orchestration::grammar::Rule const>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  if (*(char *)(v72 - 185) < 0)
    operator delete(*(void **)(v72 - 208));
  if (*(char *)(v72 - 161) < 0)
    operator delete(*(void **)(v72 - 184));

  _Unwind_Resume(a1);
}

uint64_t std::allocator<nl_featurization::SpanMatcherPattern>::construct[abi:ne180100]<nl_featurization::SpanMatcherPattern,nl_featurization::SpanMatcherPattern>(std::basic_string<char16_t> *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(this, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  return std::unordered_set<std::basic_string<char16_t>>::unordered_set((uint64_t)&this[1], (uint64_t)a2 + 24);
}

void sub_1C22BB6E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nl_featurization::SpanMatcherPattern::~SpanMatcherPattern(void **this)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nl_featurization::vocabulary::Vocabulary::~Vocabulary(nl_featurization::vocabulary::Vocabulary *this)
{
  std::__tree<std::__value_type<unsigned long,std::string>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::string>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::string>>>::destroy(*((char **)this + 10));
  std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy(*((char **)this + 7));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void nl_featurization::FeaturizerConfig::~FeaturizerConfig(void **this)
{
  void **v2;

  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v2 = this + 4;
  std::vector<nl_featurization::SpanMatcherPattern>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::unordered_set<std::basic_string<char16_t>>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int16 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int16 **)(a2 + 16); i; i = *(unsigned __int16 **)i)
    std::__hash_table<std::basic_string<char16_t>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,std::allocator<std::basic_string<char16_t>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::basic_string<char16_t> const&>(a1, i + 8, (uint64_t)(i + 8));
  return a1;
}

void sub_1C22BB8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nl_featurization::SpanMatcherPattern>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator<nl_featurization::SpanMatcherPattern>::destroy[abi:ne180100](i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::~EspressoBertModel(void **this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::~EspressoBertModel(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  uint64_t v2;
  void *v3;

  *this = &off_1E7BE98B8;
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = (uint64_t)this[10];
  this[10] = 0;
  if (v2)
    std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v2);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)(this + 5));
  std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100]((_QWORD **)this + 2, 0);
  v3 = this[1];
  this[1] = 0;
  if (v3)
    (*(void (**)(void *))(*(_QWORD *)v3 + 88))(v3);
}

_QWORD **std::unique_ptr<nl_sentencepiece::SentencepieceModel>::reset[abi:ne180100](_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getConfigVocabSize(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  NSObject *v7;
  void **v8;
  void *__p[2];
  int64_t v11;
  void *v12[2];
  char v13;
  std::string v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v12, "vocab_size");
  v2 = (_QWORD *)((char *)this + 40);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v2, (unsigned __int8 *)v12))
  {
    v3 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v2, (unsigned __int8 *)v12);
    if (!v3)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if (*((_DWORD *)v3 + 16) != 1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v4 = *((unsigned int *)v3 + 10);
  }
  else
  {
    v4 = 0;
  }
  std::to_string(&v14, v4);
  v5 = std::string::insert(&v14, 0, "Vocab size to pre-allocate: ");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  v7 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = __p;
    if (v11 < 0)
      v8 = (void **)__p[0];
    LODWORD(v14.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v14.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v14, 0xCu);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return v4;
}

void sub_1C22BBC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::__unordered_map_hasher<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::__unordered_map_equal<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>,std::equal_to<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,std::hash<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>,true>,std::allocator<std::__hash_value_type<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType,std::__fs::filesystem::path>>>::find<snlp::common::e5ml::asset_finder::AssetFinder::EspressoAssetType>(uint64_t a1, unint64_t a2, int a3)
{
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  if (!a2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a3;
    if (a3 >= a2)
      v4 = a3 % a2;
  }
  else
  {
    v4 = (a2 - 1) & a3;
  }
  v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2)
          v7 %= a2;
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::numericalizeWholeWordToken(uint64_t a1, uint64_t a2)
{
  return nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken(*(_QWORD *)(a1 + 80), a2);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getSubwordID(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = **(_QWORD **)(a1 + 16);
  v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v2 + 504))(v2, a2, v4);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::isSubOwlModel(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::tryEnableSentenceFeatures(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::tryEnableSubwordFeatures(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C22BBE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1C22BBEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(_QWORD **)(a1 + 16);
    v3 = **(_QWORD **)(a1 + 8);
    if (v2 != v3)
    {
      v4 = **(_QWORD **)(a1 + 16);
      do
      {
        v6 = *(void **)(v4 - 24);
        v4 -= 24;
        v5 = v6;
        if (v6)
        {
          *(_QWORD *)(v2 - 16) = v5;
          operator delete(v5);
        }
        v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedSubowlBertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  unint64_t v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t MaxNumTokens;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  float *v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  float *v26;
  int v27;
  void *v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  float *v32;
  int v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  NSObject *v48;
  NSObject *v49;
  NSObject *v50;
  std::runtime_error *exception;
  std::runtime_error *v52;
  os_signpost_id_t spid;
  uint8_t v54[16];
  uint64_t v55;
  void *__p[2];
  uint64_t v57;
  int v58;
  void *v59;
  _BYTE *v60;
  uint64_t v61;
  _BYTE v62[56];
  std::string buf[2];
  char v64;
  char *v65;
  char *v66;
  int *v67;
  int *v68;
  uint64_t v69;
  float *v70;
  float *v71;
  float *v72;

  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  v9 = v7 - 1;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Padded E5ML Input", "", (uint8_t *)buf, 2u);
    }
  }
  v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Padded E5ML Input\"", (uint8_t *)buf, 2u);
  }
  v12 = *((_QWORD *)this + 1);
  if (!v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Bert Module for static E5ML/EspressoV1 Subowl assets!");
    std::runtime_error::runtime_error(exception, buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)) & 1) == 0)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(buf, "Invalid Bert Module for static E5ML/EspressoV1 Subowl assets!");
    std::runtime_error::runtime_error(v52, buf);
    v52->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(this);
  v70 = 0;
  v71 = 0;
  v72 = 0;
  if (!*((_BYTE *)a2 + 160))
    std::__throw_bad_optional_access[abi:ne180100]();
  v14 = MaxNumTokens;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v67, *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 2);
  std::vector<float>::reserve((void **)&v70, v68 - v67);
  spid = v7;
  v15 = v67;
  if (v68 == v67)
  {
    v19 = v71;
  }
  else
  {
    v16 = 0;
    v17 = v71;
    do
    {
      v18 = (float)v15[v16];
      if (v17 >= v72)
      {
        v20 = v70;
        v21 = v17 - v70;
        v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v23 = (char *)v72 - (char *)v70;
        if (((char *)v72 - (char *)v70) >> 1 > v22)
          v22 = v23 >> 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
          v24 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v24 = v22;
        if (v24)
        {
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v72, v24);
          v20 = v70;
          v17 = v71;
        }
        else
        {
          v25 = 0;
        }
        v26 = (float *)&v25[4 * v21];
        *v26 = v18;
        v19 = v26 + 1;
        while (v17 != v20)
        {
          v27 = *((_DWORD *)v17-- - 1);
          *((_DWORD *)v26-- - 1) = v27;
        }
        v70 = v26;
        v71 = v19;
        v72 = (float *)&v25[4 * v24];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v17 = v18;
        v19 = v17 + 1;
      }
      v71 = v19;
      ++v16;
      v15 = v67;
      v17 = v19;
    }
    while (v16 < v68 - v67);
  }
  LODWORD(buf[0].__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&v65, v19 - v70, buf);
  buf[0].__r_.__value_.__s.__data_[0] = 0;
  v64 = 0;
  v62[0] = 0;
  v62[48] = 0;
  if (*((_BYTE *)a2 + 96))
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v59, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
    v58 = 0;
    std::vector<float>::vector(v54, v14, &v58);
    v28 = *(void **)v54;
    v29 = *(_QWORD *)&v54[8];
    v30 = (int *)v59;
    if (v60 != v59)
    {
      v31 = (v60 - (_BYTE *)v59) >> 2;
      if (v31 <= 1)
        v31 = 1;
      v32 = *(float **)v54;
      do
      {
        v33 = *v30++;
        *v32++ = (float)v33;
        --v31;
      }
      while (v31);
    }
    v34 = operator new(0x10uLL);
    *v34 = 1;
    v34[1] = v14;
    memset(v54, 0, sizeof(v54));
    v55 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v34, (uint64_t)(v34 + 2), 2uLL);
    __p[0] = 0;
    __p[1] = 0;
    v57 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v28, v29, (v29 - (uint64_t)v28) >> 2);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)buf, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)v54)
    {
      *(_QWORD *)&v54[8] = *(_QWORD *)v54;
      operator delete(*(void **)v54);
    }
    operator delete(v34);
    if (v59)
    {
      v60 = v59;
      operator delete(v59);
    }
  }
  else
  {
    v28 = 0;
  }
  if (*((_BYTE *)a2 + 128))
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(&v59, *((_QWORD *)a2 + 13), *((_QWORD *)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
    std::vector<float>::vector(v54, v14 * v14);
    v35 = *(_DWORD **)v54;
    v36 = *(_QWORD *)&v54[8];
    v37 = v59;
    if (v60 != v59)
    {
      v38 = 0;
      v39 = 0;
      v40 = (v60 - (_BYTE *)v59) / 24;
      if (v40 <= 1)
        v40 = 1;
      do
      {
        v41 = (int *)v37[3 * v38];
        v42 = v37[3 * v38 + 1] - (_QWORD)v41;
        if (v42)
        {
          v43 = v42 >> 2;
          if (v43 <= 1)
            v43 = 1;
          do
          {
            v44 = *v41++;
            v35[v39++] = v44;
            --v43;
          }
          while (v43);
        }
        ++v38;
      }
      while (v38 != v40);
    }
    v45 = operator new(0x18uLL);
    *v45 = 1;
    v45[1] = v14;
    v45[2] = v14;
    memset(v54, 0, sizeof(v54));
    v55 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v45, (uint64_t)(v45 + 3), 3uLL);
    __p[0] = 0;
    __p[1] = 0;
    v57 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v35, v36, (v36 - (uint64_t)v35) >> 2);
    std::optional<snlp::common::tensor::InferenceTensor>::operator=[abi:ne180100]<snlp::common::tensor::InferenceTensor,void>((uint64_t)v62, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)v54)
    {
      *(_QWORD *)&v54[8] = *(_QWORD *)v54;
      operator delete(*(void **)v54);
    }
    operator delete(v45);
    *(_QWORD *)v54 = &v59;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
  }
  else
  {
    v35 = 0;
  }
  *(float *)v54 = (float)*((unint64_t *)this + 3);
  std::vector<float>::resize((char **)&v70, v14, v54);
  *(_DWORD *)v54 = 0;
  std::vector<float>::resize(&v65, v14, v54);
  v46 = operator new(0x10uLL);
  *v46 = 1;
  v46[1] = v14;
  v47 = operator new(0x10uLL);
  *v47 = 1;
  v47[1] = v14;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a3, v46, (uint64_t)(v46 + 2), 2uLL);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a3 + 24), v70, (uint64_t)v71, v71 - v70);
  memset(v54, 0, sizeof(v54));
  v55 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v54, v47, (uint64_t)(v47 + 2), 2uLL);
  __p[0] = 0;
  __p[1] = 0;
  v57 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v65, (uint64_t)v66, (v66 - v65) >> 2);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)v54;
  *(_QWORD *)(a3 + 64) = v55;
  v55 = 0;
  memset(v54, 0, sizeof(v54));
  *(_OWORD *)(a3 + 72) = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 88) = v57;
  __p[1] = 0;
  v57 = 0;
  __p[0] = 0;
  *(_BYTE *)(a3 + 96) = 1;
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100](a3 + 104, (uint64_t)buf);
  std::__optional_copy_base<snlp::common::tensor::InferenceTensor,false>::__optional_copy_base[abi:ne180100](a3 + 160, (uint64_t)v62);
  *(_BYTE *)(a3 + 216) = 0;
  *(_BYTE *)(a3 + 264) = 0;
  *(_BYTE *)(a3 + 272) = 0;
  *(_BYTE *)(a3 + 320) = 0;
  *(_BYTE *)(a3 + 328) = 0;
  *(_BYTE *)(a3 + 376) = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)v54)
  {
    *(_QWORD *)&v54[8] = *(_QWORD *)v54;
    operator delete(*(void **)v54);
  }
  v48 = SNLPOSLoggerForCategory(7);
  if (v9 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v49 = v48;
    if (os_signpost_enabled(v48))
    {
      *(_WORD *)v54 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v49, OS_SIGNPOST_INTERVAL_END, spid, "OWL Generate padded E5ML Input", "", v54, 2u);
    }
  }
  v50 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v54 = 0;
    _os_log_impl(&dword_1C2196000, v50, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate padded E5ML Input\"", v54, 2u);
  }
  operator delete(v47);
  operator delete(v46);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v62);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
  if (v35)
    operator delete(v35);
  if (v28)
    operator delete(v28);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_1C22BC75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  int v35;

  if (a34 < 0)
  {
    operator delete(__p);
    if ((v35 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v34);
  goto LABEL_6;
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *i;
  int v23;
  char *v24;
  uint64_t v25;

  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7)
      a1[1] = &v6[4 * a2];
  }
  else
  {
    v9 = (uint64_t)(a1 + 2);
    v10 = a1[2];
    if (a2 - v7 <= (v10 - v5) >> 2)
    {
      v24 = &v5[4 * (a2 - v7)];
      v25 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)v5 = *a3;
        v5 += 4;
        v25 -= 4;
      }
      while (v25);
      a1[1] = v24;
    }
    else
    {
      if (a2 >> 62)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v11 = v10 - v6;
      v12 = (v10 - v6) >> 1;
      if (v12 <= a2)
        v12 = a2;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v9, v13);
      v16 = &v14[4 * v7];
      v17 = &v14[4 * a2];
      v18 = 4 * a2 - 4 * v7;
      v19 = v16;
      do
      {
        *(_DWORD *)v19 = *a3;
        v19 += 4;
        v18 -= 4;
      }
      while (v18);
      v20 = &v14[4 * v15];
      v21 = *a1;
      for (i = a1[1]; i != v21; i -= 4)
      {
        v23 = *((_DWORD *)i - 1);
        *((_DWORD *)v16 - 1) = v23;
        v16 -= 4;
      }
      *a1 = v16;
      a1[1] = v17;
      a1[2] = v20;
      if (v21)
        operator delete(v21);
    }
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generatePaddedWholeowlEspressoV1BertInput(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  os_signpost_id_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  unint64_t MaxNumTokens;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  void *v17;
  float *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  float *v24;
  int v25;
  _QWORD *v26;
  _QWORD *v27;
  NSObject *v28;
  NSObject *v29;
  NSObject *v30;
  std::runtime_error *exception;
  std::runtime_error *v32;
  std::string buf;
  __int128 v34;
  uint64_t v35;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  void *__p;
  void *v40;
  float *v41;

  v6 = SNLPOSLoggerForCategory(7);
  v7 = os_signpost_id_generate(v6);
  v8 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v9 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v7, "OWL Generate Padded WholeOwl espressoV1 Input", "", (uint8_t *)&buf, 2u);
    }
  }
  v10 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Generate Padded WholeOwl espressoV1 Input\"", (uint8_t *)&buf, 2u);
  }
  v11 = *((_QWORD *)this + 1);
  if (!v11 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid Bert Module for EspressoV1 WholeOwl assets!");
    std::runtime_error::runtime_error(exception, &buf);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&buf, "Invalid Bert Module for EspressoV1 WholeOwl assets!");
    std::runtime_error::runtime_error(v32, &buf);
    v32->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  MaxNumTokens = nlv4_inference_orchestrator::inference_engine::EspressoBertModel::getMaxNumTokens(this);
  __p = 0;
  v40 = 0;
  v41 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  std::vector<float>::reserve(&__p, MaxNumTokens);
  v13 = *((_QWORD *)a2 + 6);
  if (*((_QWORD *)a2 + 7) == v13)
  {
    v17 = v40;
  }
  else
  {
    v14 = 0;
    v15 = (float *)v40;
    do
    {
      v16 = (float)*(unint64_t *)(v13 + 112 * v14 + 24);
      if (v15 >= v41)
      {
        v18 = (float *)__p;
        v19 = ((char *)v15 - (_BYTE *)__p) >> 2;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v21 = (char *)v41 - (_BYTE *)__p;
        if (((char *)v41 - (_BYTE *)__p) >> 1 > v20)
          v20 = v21 >> 1;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
          v22 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v41, v22);
          v18 = (float *)__p;
          v15 = (float *)v40;
        }
        else
        {
          v23 = 0;
        }
        v24 = (float *)&v23[4 * v19];
        *v24 = v16;
        v17 = v24 + 1;
        while (v15 != v18)
        {
          v25 = *((_DWORD *)v15-- - 1);
          *((_DWORD *)v24-- - 1) = v25;
        }
        __p = v24;
        v40 = v17;
        v41 = (float *)&v23[4 * v22];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v16;
        v17 = v15 + 1;
      }
      v40 = v17;
      ++v14;
      v13 = *((_QWORD *)a2 + 6);
      v15 = (float *)v17;
    }
    while (v14 < 0x6DB6DB6DB6DB6DB7 * ((*((_QWORD *)a2 + 7) - v13) >> 4));
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::resize((char **)&v36, ((_BYTE *)v17 - (_BYTE *)__p) >> 2, &buf);
  *(float *)&buf.__r_.__value_.__l.__data_ = (float)*((unint64_t *)this + 3);
  std::vector<float>::resize((char **)&__p, MaxNumTokens, &buf);
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  std::vector<float>::resize((char **)&v36, MaxNumTokens, &buf);
  v26 = operator new(0x10uLL);
  *v26 = 1;
  v26[1] = MaxNumTokens;
  v27 = operator new(0x10uLL);
  *v27 = 1;
  v27[1] = MaxNumTokens;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)a3, v26, (uint64_t)(v26 + 2), 2uLL);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a3 + 24), __p, (uint64_t)v40, ((_BYTE *)v40 - (_BYTE *)__p) >> 2);
  memset(&buf, 0, sizeof(buf));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&buf, v27, (uint64_t)(v27 + 2), 2uLL);
  v34 = 0uLL;
  v35 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v34, v36, (uint64_t)v37, (v37 - (_BYTE *)v36) >> 2);
  *(std::string *)(a3 + 48) = buf;
  *(_OWORD *)(a3 + 72) = v34;
  *(_QWORD *)(a3 + 88) = v35;
  *(_BYTE *)(a3 + 96) = 1;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 160) = 0;
  *(_BYTE *)(a3 + 208) = 0;
  *(_BYTE *)(a3 + 216) = 0;
  *(_BYTE *)(a3 + 264) = 0;
  *(_BYTE *)(a3 + 272) = 0;
  *(_BYTE *)(a3 + 320) = 0;
  *(_BYTE *)(a3 + 328) = 0;
  *(_BYTE *)(a3 + 376) = 0;
  v28 = SNLPOSLoggerForCategory(7);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v29 = v28;
    if (os_signpost_enabled(v28))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v29, OS_SIGNPOST_INTERVAL_END, v7, "OWL Generate Padded WholeOwl espressoV1 Input", "", (uint8_t *)&buf, 2u);
    }
  }
  v30 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_DEFAULT, "END \"OWL Generate Padded WholeOwl espressoV1 Input\"", (uint8_t *)&buf, 2u);
  }
  operator delete(v27);
  operator delete(v26);
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
}

void sub_1C22BCF94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  void *v26;
  int v27;

  if (a18 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forwardAggregatedBySentence(nlv4_inference_orchestrator::inference_engine::EspressoBertModel *this@<X0>, const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *a2@<X1>, uint64_t a3@<X8>)
{
  std::chrono::steady_clock::time_point v6;
  NSObject *v7;
  os_signpost_id_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  std::chrono::steady_clock::time_point v15;
  NSObject *v16;
  os_signpost_id_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  NSObject *v22;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  NSObject *v24;
  NSObject *v25;
  os_signpost_id_t v26;
  NSObject *v27;
  NSObject *v28;
  NSObject *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  float *v38;
  float *v39;
  unint64_t i;
  float v41;
  float *v42;
  uint64_t v43;
  NSObject *v44;
  NSObject *v45;
  NSObject *v46;
  std::chrono::steady_clock::time_point v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  std::string::size_type size;
  std::string *v56;
  __int128 v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  NSObject *v68;
  __int128 *v69;
  std::chrono::steady_clock::time_point v70;
  std::chrono::steady_clock::time_point v71;
  std::chrono::steady_clock::time_point v72;
  std::string v73;
  std::string v74;
  std::string v75;
  std::string v76;
  std::string v77;
  std::string v78;
  std::string v79;
  std::string v80;
  std::string v81;
  __int128 v82;
  int64_t v83;
  void *__p;
  _BYTE *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  uint8_t v89[8];
  char *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  std::string v94;
  uint8_t v95[8];
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t buf[8];
  void *v102;
  void *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  std::string v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v7 = SNLPOSLoggerForCategory(7);
  v8 = os_signpost_id_generate(v7);
  v9 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v10 = v9;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v8, "OWL Input Preprocess Aggregated", "", buf, 2u);
    }
  }
  v11 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Input Preprocess Aggregated\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::generateBertInput(this, a2, (uint64_t)buf);
  v12 = SNLPOSLoggerForCategory(7);
  if (v8 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v13 = v12;
    if (os_signpost_enabled(v12))
    {
      *(_WORD *)v95 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v13, OS_SIGNPOST_INTERVAL_END, v8, "OWL Input Preprocess Aggregated", "", v95, 2u);
    }
  }
  v14 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v95 = 0;
    _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEFAULT, "END \"OWL Input Preprocess Aggregated\"", v95, 2u);
  }
  v15.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v72.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v16 = SNLPOSLoggerForCategory(7);
  v17 = os_signpost_id_generate(v16);
  v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = v18;
    if (os_signpost_enabled(v18))
    {
      *(_WORD *)v95 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "OWL Model Forward Aggregated", "", v95, 2u);
    }
  }
  v20 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v95 = 0;
    _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Model Forward Aggregated\"", v95, 2u);
  }
  (***((void (****)(uint8_t *__return_ptr, _QWORD, uint8_t *))this + 1))(v95, *((_QWORD *)this + 1), buf);
  v21 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = v21;
    if (os_signpost_enabled(v21))
    {
      *(_WORD *)v89 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v22, OS_SIGNPOST_INTERVAL_END, v17, "OWL Model Forward Aggregated", "", v89, 2u);
    }
  }
  rep = v6.__d_.__rep_;
  v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v89 = 0;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEFAULT, "END \"OWL Model Forward Aggregated\"", v89, 2u);
  }
  v71.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v70.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  v25 = SNLPOSLoggerForCategory(7);
  v26 = os_signpost_id_generate(v25);
  v27 = SNLPOSLoggerForCategory(7);
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v28 = v27;
    if (os_signpost_enabled(v27))
    {
      *(_WORD *)v89 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v28, OS_SIGNPOST_INTERVAL_BEGIN, v26, "OWL Output PostProcess Aggregated", "", v89, 2u);
    }
  }
  v29 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v89 = 0;
    _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_DEFAULT, "BEGIN \"OWL Output PostProcess Aggregated\"", v89, 2u);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  *(_BYTE *)(a3 + 152) = 0;
  *(_BYTE *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_QWORD *)v89 = 0;
  v90 = 0;
  v91 = 0;
  memset(&v94, 0, sizeof(v94));
  v30 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1), (char *)this + 264);
  v32 = *((_QWORD *)a2 + 6);
  v31 = *((_QWORD *)a2 + 7);
  v33 = 0x6DB6DB6DB6DB6DB7 * ((v31 - v32) >> 4);
  v87 = 0;
  v88 = 0;
  v86 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(&v86, v97, (uint64_t)v97 + 4 * v33 * v30, v33 * v30);
  LODWORD(v82) = 0;
  std::vector<float>::vector(&__p, v30, &v82);
  v34 = (char *)__p;
  if (v31 != v32)
  {
    v35 = 0;
    v36 = (float *)v86;
    if (v33 <= 1)
      v37 = 1;
    else
      v37 = 0x6DB6DB6DB6DB6DB7 * ((v31 - v32) >> 4);
    do
    {
      v38 = v36;
      v39 = (float *)v34;
      for (i = v30; i; --i)
      {
        v41 = *v38++;
        *v39 = v41 + *v39;
        ++v39;
      }
      ++v35;
      v36 += v30;
    }
    while (v35 != v37);
    v34 = (char *)__p;
  }
  if (v30)
  {
    v42 = (float *)v34;
    do
    {
      *v42 = *v42 / (float)v33;
      ++v42;
      --v30;
    }
    while (v30);
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v89, v34, (uint64_t)v85, (v85 - v34) >> 2);
  *(_QWORD *)&v92 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 4);
  v43 = *(_QWORD *)(*(_QWORD *)v95 + 16);
  *((_QWORD *)&v92 + 1) = 1;
  v93 = v43;
  if (v89 != (uint8_t *)a3)
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a3, *(char **)v89, (uint64_t)v90, (uint64_t)&v90[-*(_QWORD *)v89] >> 2);
  *(_OWORD *)(a3 + 24) = v92;
  *(_QWORD *)(a3 + 40) = v93;
  std::string::operator=((std::string *)(a3 + 48), &v94);
  v44 = SNLPOSLoggerForCategory(7);
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v45 = v44;
    if (os_signpost_enabled(v44))
    {
      LOWORD(v82) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v45, OS_SIGNPOST_INTERVAL_END, v26, "OWL Output PostProcess Aggregated", "", (uint8_t *)&v82, 2u);
    }
  }
  v46 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v82) = 0;
    _os_log_impl(&dword_1C2196000, v46, OS_LOG_TYPE_DEFAULT, "END \"OWL Output PostProcess Aggregated\"", (uint8_t *)&v82, 2u);
  }
  v47.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  std::to_string(&v75, (v15.__d_.__rep_ - rep) / 1000000);
  v48 = std::string::insert(&v75, 0, "\nBERT:\n      pre-process ");
  v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
  v76.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v49;
  v48->__r_.__value_.__l.__size_ = 0;
  v48->__r_.__value_.__r.__words[2] = 0;
  v48->__r_.__value_.__r.__words[0] = 0;
  v50 = std::string::append(&v76, "ms\n");
  v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
  v77.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v51;
  v50->__r_.__value_.__l.__size_ = 0;
  v50->__r_.__value_.__r.__words[2] = 0;
  v50->__r_.__value_.__r.__words[0] = 0;
  v52 = std::string::append(&v77, "      forward: ");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v78.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v74, (v71.__d_.__rep_ - v72.__d_.__rep_) / 1000000);
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v54 = &v74;
  else
    v54 = (std::string *)v74.__r_.__value_.__r.__words[0];
  if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
  else
    size = v74.__r_.__value_.__l.__size_;
  v56 = std::string::append(&v78, (const std::string::value_type *)v54, size);
  v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v56->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v57;
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = 0;
  v58 = std::string::append(&v79, " ms\n");
  v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
  v80.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v80.__r_.__value_.__l.__data_ = v59;
  v58->__r_.__value_.__l.__size_ = 0;
  v58->__r_.__value_.__r.__words[2] = 0;
  v58->__r_.__value_.__r.__words[0] = 0;
  v60 = std::string::append(&v80, "      aggregate & post-process: ");
  v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
  v81.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v61;
  v60->__r_.__value_.__l.__size_ = 0;
  v60->__r_.__value_.__r.__words[2] = 0;
  v60->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v73, (v47.__d_.__rep_ - v70.__d_.__rep_) / 1000000);
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = &v73;
  else
    v62 = (std::string *)v73.__r_.__value_.__r.__words[0];
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = HIBYTE(v73.__r_.__value_.__r.__words[2]);
  else
    v63 = v73.__r_.__value_.__l.__size_;
  v64 = std::string::append(&v81, (const std::string::value_type *)v62, v63);
  v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
  v111.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v65;
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = 0;
  v66 = std::string::append(&v111, " ms\n");
  v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
  v83 = v66->__r_.__value_.__r.__words[2];
  v82 = v67;
  v66->__r_.__value_.__l.__size_ = 0;
  v66->__r_.__value_.__r.__words[2] = 0;
  v66->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v68 = SNLPOSLoggerForCategory(5);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
  {
    v69 = &v82;
    if (v83 < 0)
      v69 = (__int128 *)v82;
    LODWORD(v111.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
    _os_log_impl(&dword_1C2196000, v68, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v111, 0xCu);
  }
  if (SHIBYTE(v83) < 0)
    operator delete((void *)v82);
  if (__p)
  {
    v85 = __p;
    operator delete(__p);
  }
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
  if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v94.__r_.__value_.__l.__data_);
  if (*(_QWORD *)v89)
  {
    v90 = *(char **)v89;
    operator delete(*(void **)v89);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v100);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v99);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (*(_QWORD *)v95)
  {
    v96 = *(_QWORD *)v95;
    operator delete(*(void **)v95);
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v110);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v109);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v107);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v106);
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v105);
  if (v103)
  {
    v104 = v103;
    operator delete(v103);
  }
  if (*(_QWORD *)buf)
  {
    v102 = *(void **)buf;
    operator delete(*(void **)buf);
  }
}

void sub_1C22BDA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a67;
  char a72;
  void *a73;
  void *a74;
  void *a75;
  char a76;
  void **v76;
  uint64_t v77;

  if (*(char *)(v77 - 105) < 0)
    operator delete(*(void **)(v77 - 128));
  if (a19 < 0)
    operator delete(__p);
  if (a72 < 0)
    operator delete(a67);
  if (a65 < 0)
    operator delete(a60);
  if (a58 < 0)
    operator delete(a53);
  if (a25 < 0)
    operator delete(a20);
  if (a51 < 0)
    operator delete(a46);
  if (a44 < 0)
    operator delete(a39);
  if (a37 < 0)
    operator delete(a32);
  if (a31 < 0)
    operator delete(a26);
  if (a73)
    operator delete(a73);
  if (a74)
    operator delete(a74);
  nlv4_inference_orchestrator::orchestration::EmbeddingTensor::~EmbeddingTensor(&a75);
  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(v76);
  nlv4_inference_orchestrator::inference_engine::BertModuleOutputType::~BertModuleOutputType((nlv4_inference_orchestrator::inference_engine::BertModuleOutputType *)&a76);
  nlv4_inference_orchestrator::inference_engine::BertModuleInputType::~BertModuleInputType((nlv4_inference_orchestrator::inference_engine::BertModuleInputType *)&STACK[0x270]);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1C22BDBF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(void **this)
{
  void *v2;

  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 19));
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  v2 = *this;
  if (*this)
  {
    this[1] = v2;
    operator delete(v2);
  }
}

uint64_t std::optional<nlv4_inference_orchestrator::orchestration::EmbeddingTensor>::operator=[abi:ne180100]<nlv4_inference_orchestrator::orchestration::EmbeddingTensor&,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;

  if (*(_BYTE *)(a1 + 72))
  {
    if (a1 != a2)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v4 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v5 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
    v6 = (std::string *)(a1 + 48);
    if (*(char *)(a2 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
    *(_BYTE *)(a1 + 72) = 1;
  }
  return a1;
}

void sub_1C22BDD2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModel::decodeSubwordPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 16);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 152))(&v4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v4);
}

void sub_1C22BDD98(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::buildModel(std::__fs::filesystem::path *this@<X0>, uint64_t *a2@<X8>)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV2Model(this, &v8);
  if (v8)
  {
    *a2 = v8;
  }
  else
  {
    v4 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v5 = SLODWORD(this[2].__pn_.__r_.__value_.__r.__words[2]);
      if (v5 >= 8)
      {
        v7 = SNLPOSLoggerForCategory(4);
        v6 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v10 = "<UNDEFINED_COMPONENT>";
          v11 = 2048;
          v12 = v5;
          _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v6 = off_1E7BED840[v5];
      }
      *(_DWORD *)buf = 136315138;
      v10 = v6;
      _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "[%s] Could not find the relevant E5-ML (v2) assets. Falling back onto Espresso v1 assets.", buf, 0xCu);
    }
    itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV1Model(this, a2);
  }
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV2Model(std::__fs::filesystem::path *this@<X0>, uint64_t *a2@<X8>)
{
  std::__fs::filesystem::path *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  __int128 v8;
  NSObject *v9;
  std::string::size_type v10;
  const char *v11;
  NSObject *v12;
  std::string __p;
  std::string v14;
  std::__fs::filesystem::path v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v4 = this + 4;
  std::__fs::filesystem::operator/[abi:ne180100](&v15.__pn_, (uint64_t)this, this + 4);
  std::__fs::filesystem::__status(&v15, 0);
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (v14.__r_.__value_.__s.__data_[0] && v14.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v14 = __p;
    v5 = operator new();
    *(_QWORD *)v5 = &off_1E7BE9588;
    v6 = operator new();
    itfm_inference_orchestrator::inference_engine::ITFME5MLModule::ITFME5MLModule(v6, (char *)&v14, (uint64_t)&this[1], &this[2].__pn_.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(v5 + 8) = v6;
    std::string::basic_string[abi:ne180100]<0>(&v15, "component_name");
    v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this[1].__pn_.__r_.__value_.__r.__words, (unsigned __int8 *)&v15);
    if (v7 && *((_DWORD *)v7 + 16) == 4)
    {
      if ((char)v7[63] < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v5 + 16), *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
      }
      else
      {
        v8 = *(_OWORD *)(v7 + 40);
        *(_QWORD *)(v5 + 32) = *((_QWORD *)v7 + 7);
        *(_OWORD *)(v5 + 16) = v8;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 16), "UNDEFINED_COMPONENT");
    }
    if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__pn_.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 40), "max_num_utterance_embeddings");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 64), "utterance_tokens_embedder_emb_dim");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 88), "max_num_spans_tokens");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 112), "spans_pad_symbol_index");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 136), "max_num_context_tokens");
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v5 + 160), "batch_size");
    *a2 = v5;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = SLODWORD(this[2].__pn_.__r_.__value_.__r.__words[2]);
      if (v10 >= 8)
      {
        v12 = SNLPOSLoggerForCategory(4);
        v11 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v15.__pn_.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v15.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(v15.__pn_.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v15.__pn_.__r_.__value_.__r.__words[1] + 6) = v10;
          _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v15, 0x16u);
        }
      }
      else
      {
        v11 = off_1E7BED840[v10];
      }
      LODWORD(v15.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v15.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] Initialised E5-ML ITFM model from assets compiled offline.", (uint8_t *)&v15, 0xCu);
    }
  }
}

void sub_1C22BE240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _QWORD *v28;
  uint64_t v29;
  void **v31;

  if (a28 < 0)
    operator delete(__p);
  v31 = *(void ***)(v29 + 8);
  *(_QWORD *)(v29 + 8) = 0;
  if (v31)
    std::default_delete<itfm_inference_orchestrator::inference_engine::ITFME5MLModule>::operator()[abi:ne180100](v31);
  MEMORY[0x1C3BB9B44](v29, 0x10B3C401575683FLL);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  *v28 = 0;
  _Unwind_Resume(a1);
}

void itfm_inference_orchestrator::inference_engine::ITFMModelBuilder::setupEspressoV1Model(std::__fs::filesystem::path *this@<X0>, uint64_t *a2@<X8>)
{
  std::__fs::filesystem::path *v4;
  NSObject *v5;
  std::string::size_type v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint32_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  NSObject *v36;
  int v37;
  NSObject *v38;
  int v39;
  NSObject *v40;
  _BOOL4 v41;
  NSObject *v42;
  _BOOL4 v43;
  std::string __p;
  std::__fs::filesystem::path v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  v4 = this + 3;
  std::__fs::filesystem::operator/[abi:ne180100](&v45.__pn_, (uint64_t)this, this + 3);
  std::__fs::filesystem::__status(&v45, 0);
  if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__pn_.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__s.__data_[0] && __p.__r_.__value_.__s.__data_[0] != 255)
  {
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, v4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45.__pn_ = __p;
    v8 = operator new();
    itfm_inference_orchestrator::inference_engine::EspressoITFMModel::EspressoITFMModel(v8, (uint64_t)&v45, this[1].__pn_.__r_.__value_.__r.__words);
    *a2 = v8;
    if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = this[2].__pn_.__r_.__value_.__r.__words[2];
      v11 = "UNKNOWN";
      v12 = "SSU";
      v13 = "LVC";
      v14 = "PSC";
      v15 = "OWL";
      v16 = "UaaP";
      v17 = "NLv4";
      v18 = "NLv4";
      v19 = "SNLC";
      switch(v10)
      {
        case 0:
          break;
        case 1:
LABEL_23:
          v18 = "SNLC";
          v17 = v19;
          break;
        case 2:
LABEL_38:
          v18 = "OWL";
          v17 = v15;
          break;
        case 3:
LABEL_39:
          v18 = "UaaP";
          v17 = v16;
          break;
        case 4:
LABEL_40:
          v18 = "PSC";
          v17 = v14;
          break;
        case 5:
LABEL_41:
          v18 = "LVC";
          v17 = v13;
          break;
        case 6:
LABEL_42:
          v18 = "SSU";
          v17 = v12;
          break;
        case 7:
LABEL_43:
          v18 = "UNKNOWN";
          v17 = v11;
          break;
        default:
          v36 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
            WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = v10;
            _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v45, 0x16u);
          }
          v37 = this[2].__pn_.__r_.__value_.__r.__words[2];
          v19 = "<UNDEFINED_COMPONENT>";
          v16 = "<UNDEFINED_COMPONENT>";
          v15 = "<UNDEFINED_COMPONENT>";
          v14 = "<UNDEFINED_COMPONENT>";
          v13 = "<UNDEFINED_COMPONENT>";
          v12 = "<UNDEFINED_COMPONENT>";
          v11 = "<UNDEFINED_COMPONENT>";
          v17 = "<UNDEFINED_COMPONENT>";
          v18 = "NLv4";
          switch(v37)
          {
            case 0:
              goto LABEL_44;
            case 1:
              goto LABEL_23;
            case 2:
              goto LABEL_38;
            case 3:
              goto LABEL_39;
            case 4:
              goto LABEL_40;
            case 5:
              goto LABEL_41;
            case 6:
              goto LABEL_42;
            case 7:
              goto LABEL_43;
            default:
              v40 = SNLPOSLoggerForCategory(4);
              v41 = os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
              v17 = "<UNDEFINED_COMPONENT>";
              v18 = "<UNDEFINED_COMPONENT>";
              if (v41)
              {
                LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
                WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2048;
                *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = v37;
                _os_log_impl(&dword_1C2196000, v40, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v45, 0x16u);
                v18 = "<UNDEFINED_COMPONENT>";
              }
              break;
          }
          break;
      }
LABEL_44:
      LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      v21 = "[%s] %s: Initialised espresso v1 ITFM model using original v1 assets.";
      goto LABEL_55;
    }
  }
  else
  {
    std::__fs::filesystem::operator/[abi:ne180100](&v45.__pn_, (uint64_t)this, this + 5);
    std::__fs::filesystem::__status(&v45, 0);
    if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__pn_.__r_.__value_.__l.__data_);
    if (!__p.__r_.__value_.__s.__data_[0] || __p.__r_.__value_.__s.__data_[0] == 255)
    {
      v5 = SNLPOSLoggerForCategory(2);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        return;
      v6 = SLODWORD(this[2].__pn_.__r_.__value_.__r.__words[2]);
      if (v6 >= 8)
      {
        v20 = SNLPOSLoggerForCategory(4);
        v7 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = v6;
          _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v45, 0x16u);
        }
      }
      else
      {
        v7 = off_1E7BED840[v6];
      }
      LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
      v21 = "[%s] Unable to initialize the ITFM model using Espresso v1";
      v22 = v5;
      v23 = OS_LOG_TYPE_ERROR;
      v24 = 12;
      goto LABEL_56;
    }
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, this + 5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v45.__pn_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v45.__pn_ = __p;
    v25 = operator new();
    itfm_inference_orchestrator::inference_engine::EspressoITFMModel::EspressoITFMModel(v25, (uint64_t)&v45, this[1].__pn_.__r_.__value_.__r.__words);
    *a2 = v25;
    if (SHIBYTE(v45.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = SNLPOSLoggerForCategory(2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v26 = this[2].__pn_.__r_.__value_.__r.__words[2];
      v27 = "UNKNOWN";
      v28 = "SSU";
      v29 = "LVC";
      v30 = "PSC";
      v31 = "OWL";
      v32 = "UaaP";
      v33 = "NLv4";
      v34 = "NLv4";
      v35 = "SNLC";
      switch(v26)
      {
        case 0:
          break;
        case 1:
LABEL_34:
          v34 = "SNLC";
          v33 = v35;
          break;
        case 2:
LABEL_48:
          v34 = "OWL";
          v33 = v31;
          break;
        case 3:
LABEL_49:
          v34 = "UaaP";
          v33 = v32;
          break;
        case 4:
LABEL_50:
          v34 = "PSC";
          v33 = v30;
          break;
        case 5:
LABEL_51:
          v34 = "LVC";
          v33 = v29;
          break;
        case 6:
LABEL_52:
          v34 = "SSU";
          v33 = v28;
          break;
        case 7:
LABEL_53:
          v34 = "UNKNOWN";
          v33 = v27;
          break;
        default:
          v38 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
            WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = v26;
            _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v45, 0x16u);
          }
          v39 = this[2].__pn_.__r_.__value_.__r.__words[2];
          v35 = "<UNDEFINED_COMPONENT>";
          v32 = "<UNDEFINED_COMPONENT>";
          v31 = "<UNDEFINED_COMPONENT>";
          v30 = "<UNDEFINED_COMPONENT>";
          v29 = "<UNDEFINED_COMPONENT>";
          v28 = "<UNDEFINED_COMPONENT>";
          v27 = "<UNDEFINED_COMPONENT>";
          v33 = "<UNDEFINED_COMPONENT>";
          v34 = "NLv4";
          switch(v39)
          {
            case 0:
              goto LABEL_54;
            case 1:
              goto LABEL_34;
            case 2:
              goto LABEL_48;
            case 3:
              goto LABEL_49;
            case 4:
              goto LABEL_50;
            case 5:
              goto LABEL_51;
            case 6:
              goto LABEL_52;
            case 7:
              goto LABEL_53;
            default:
              v42 = SNLPOSLoggerForCategory(4);
              v43 = os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
              v33 = "<UNDEFINED_COMPONENT>";
              v34 = "<UNDEFINED_COMPONENT>";
              if (v43)
              {
                LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
                *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
                WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2048;
                *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = v39;
                _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v45, 0x16u);
                v34 = "<UNDEFINED_COMPONENT>";
              }
              break;
          }
          break;
      }
LABEL_54:
      LODWORD(v45.__pn_.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v45.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      WORD2(v45.__pn_.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v45.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v34;
      v21 = "[%s] %s: Initialised Espresso v1 ITFM model using E5-ML v1 assets (fallback mechanism). This implies an issu"
            "e with E5-ML asset generation. ITFM inference can proceed, but may not be as performant as expected.";
LABEL_55:
      v22 = v9;
      v23 = OS_LOG_TYPE_DEBUG;
      v24 = 22;
LABEL_56:
      _os_log_impl(&dword_1C2196000, v22, v23, v21, (uint8_t *)&v45, v24);
    }
  }
}

void sub_1C22BEAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _QWORD *v21;

  if (a15 < 0)
    operator delete(__p);
  *v21 = 0;
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::~RelativeThresholdMatchingSpansFilter(nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter *this)
{
  JUMPOUT(0x1C3BB9B44);
}

uint64_t nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::filterMatchingSpans@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  double v7;
  __int128 *v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  unint64_t v18;
  uint64_t *v19;
  double v20;
  double v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  _QWORD *v27;
  _QWORD *v28;
  int hasProbability;
  double v30;
  __int128 *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  NSObject *v36;
  void **v37;
  std::string *v38;
  NSObject *v39;
  const char *v40;
  uint32_t v41;
  NSObject *v42;
  void **v43;
  std::string *v44;
  NSObject *v45;
  void **v46;
  uint64_t v47;
  uint64_t v48;
  void *__p[2];
  char v53;
  _BYTE v54[32];
  int v55;
  __int128 v56;
  __int128 v57;
  int v58[4];
  std::string v59;
  std::string *v60;
  _BYTE buf[12];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  double v65;
  __int16 v66;
  _BOOL4 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v56 = 0u;
  v57 = 0u;
  v58[0] = 1065353216;
  v5 = *(_QWORD **)a2;
  v4 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 == v4)
  {
    memset(v54, 0, sizeof(v54));
    v55 = 1065353216;
    goto LABEL_35;
  }
  do
  {
    v6 = v5[5];
    if (!v6
      || !*(_QWORD *)(v6 + 40)
      || !nlv4_inference_orchestrator::span_matching::hasProbability((uint64_t)v5, (int *)(a1 + 8)))
    {
      goto LABEL_30;
    }
    v7 = *(double *)(*(_QWORD *)(**(_QWORD **)(v5[8] + 56) + 24) + 8);
    v8 = (__int128 *)v5[6];
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v54, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)&v54[16] = *((_QWORD *)v8 + 2);
      *(_OWORD *)v54 = v9;
    }
    v10 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v57 + 8, (uint64_t)v54);
    v11 = *((_QWORD *)&v56 + 1);
    if (!*((_QWORD *)&v56 + 1)
      || ((v12 = v10,
           v13 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v56 + 8)),
           v13.i16[0] = vaddlv_u8(v13),
           v14 = v13.u32[0],
           v13.u32[0] > 1uLL)
        ? (v10 >= *((_QWORD *)&v56 + 1)
         ? (v15 = v10 % *((_QWORD *)&v56 + 1))
         : (v15 = v10))
        : (v15 = (*((_QWORD *)&v56 + 1) - 1) & v10),
          (v16 = *(unsigned __int8 ***)(v56 + 8 * v15)) == 0 || (v17 = *v16) == 0))
    {
LABEL_27:
      *(_QWORD *)buf = v54;
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&v56, v54, (__int128 **)buf)+ 5) = v7;
      goto LABEL_28;
    }
    while (1)
    {
      v18 = *((_QWORD *)v17 + 1);
      if (v18 == v12)
        break;
      if (v14 > 1)
      {
        if (v18 >= v11)
          v18 %= v11;
      }
      else
      {
        v18 &= v11 - 1;
      }
      if (v18 != v15)
        goto LABEL_27;
LABEL_24:
      v17 = *(unsigned __int8 **)v17;
      if (!v17)
        goto LABEL_27;
    }
    if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v58, v17 + 16, v54) & 1) == 0)
      goto LABEL_24;
    *(_QWORD *)buf = v54;
    if (*((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&v56, v54, (__int128 **)buf)+ 5) < v7)goto LABEL_27;
LABEL_28:
    if ((v54[23] & 0x80000000) != 0)
      operator delete(*(void **)v54);
LABEL_30:
    v5 += 11;
  }
  while (v5 != v4);
  v19 = (uint64_t *)v57;
  memset(v54, 0, sizeof(v54));
  v55 = 1065353216;
  if ((_QWORD)v57)
  {
    do
    {
      v20 = *(double *)(a1 + 16);
      v21 = *((double *)v19 + 5);
      *(_QWORD *)buf = v19 + 2;
      *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v54, (unsigned __int8 *)v19 + 16, (__int128 **)buf)+ 5) = v20 * v21;
      v19 = (uint64_t *)*v19;
    }
    while (v19);
  }
LABEL_35:
  v24 = *(int *)(a1 + 8);
  v23 = (int *)(a1 + 8);
  v22 = v24;
  if (v24 >= 8)
  {
    v26 = SNLPOSLoggerForCategory(4);
    v25 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
      v62 = 2048;
      v63 = v22;
      _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v25 = off_1E7BED840[v22];
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v25);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v27 = *(_QWORD **)a2;
  v28 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v28)
  {
    while (2)
    {
      hasProbability = nlv4_inference_orchestrator::span_matching::hasProbability((uint64_t)v27, v23);
      v30 = 0.0;
      if (hasProbability)
        v30 = *(double *)(*(_QWORD *)(**(_QWORD **)(v27[8] + 56) + 24) + 8);
      v31 = (__int128 *)v27[6];
      if (*((char *)v31 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v59, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
      }
      else
      {
        v32 = *v31;
        v59.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
        *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v32;
      }
      v33 = v27[5];
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 40);
        v35 = v34 == 0;
        if (v34 && ((hasProbability ^ 1) & 1) == 0)
        {
          v60 = &v59;
          v35 = v30 > *((double *)std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)v54, (unsigned __int8 *)&v59, (__int128 **)&v60)+ 5);
          goto LABEL_51;
        }
      }
      else
      {
        v35 = 1;
      }
      if (hasProbability)
      {
LABEL_51:
        v36 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          v37 = __p;
          if (v53 < 0)
            v37 = (void **)__p[0];
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v38 = &v59;
          else
            v38 = (std::string *)v59.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = v37;
          v62 = 2080;
          v63 = (uint64_t)v38;
          v64 = 2048;
          v65 = v30;
          v66 = 1024;
          v67 = v35;
          v39 = v36;
          v40 = "[%s] Span %s [score %f] was kept?: %{BOOL}d";
          v41 = 38;
          goto LABEL_65;
        }
      }
      else
      {
        v42 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          v43 = __p;
          if (v53 < 0)
            v43 = (void **)__p[0];
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &v59;
          else
            v44 = (std::string *)v59.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v43;
          v62 = 2080;
          v63 = (uint64_t)v44;
          v64 = 1024;
          LODWORD(v65) = v35;
          v39 = v42;
          v40 = "[%s] Span %s [no score] was kept?: %{BOOL}d";
          v41 = 28;
LABEL_65:
          _os_log_impl(&dword_1C2196000, v39, OS_LOG_TYPE_DEBUG, v40, buf, v41);
        }
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v59.__r_.__value_.__l.__data_);
        if (!v35)
          goto LABEL_71;
      }
      else if (!v35)
      {
LABEL_71:
        v27 += 11;
        if (v27 == v28)
          goto LABEL_72;
        continue;
      }
      break;
    }
    std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v27);
    goto LABEL_71;
  }
LABEL_72:
  v45 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
  {
    v46 = __p;
    if (v53 < 0)
      v46 = (void **)__p[0];
    v47 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    v48 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v46;
    v62 = 2048;
    v63 = v47;
    v64 = 2048;
    v65 = *(double *)&v48;
    _os_log_impl(&dword_1C2196000, v45, OS_LOG_TYPE_DEBUG, "[%s] Span filtering: %lu out of %lu spans kept", buf, 0x20u);
  }
  if (v53 < 0)
    operator delete(__p[0]);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v54);
  return std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&v56);
}

void sub_1C22BF17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::hasProbability(uint64_t a1, int *a2)
{
  uint64_t v3;
  char *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  _BYTE *v10;
  const char *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v17;
  _BYTE *v18;
  _BYTE buf[12];
  __int16 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  if (v3 >= 8)
  {
    v5 = SNLPOSLoggerForCategory(4);
    v4 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
      v20 = 2048;
      v21 = v3;
      _os_log_impl(&dword_1C2196000, v5, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v4 = off_1E7BED840[v3];
  }
  std::string::basic_string[abi:ne180100]<0>(buf, v4);
  v6 = *(_QWORD *)(a1 + 64);
  if (!v6)
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v12 = buf;
      if (v22 < 0)
        v12 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v12;
      v11 = "[%s] [WARN] MatchingSpan has no USO graph";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v7 = *(_QWORD *)(v6 + 56);
  if (v7 == *(_QWORD *)(v6 + 64))
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v13 = buf;
      if (v22 < 0)
        v13 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v13;
      v11 = "[%s] [WARN] MatchingSpan has USO graph with no identifiers";
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  v8 = *(_QWORD *)(*(_QWORD *)v7 + 24);
  if (!v8)
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v14 = buf;
      if (v22 < 0)
        v14 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v14;
      v11 = "[%s] [WARN] probability missing from identifier";
      goto LABEL_25;
    }
LABEL_26:
    v15 = 0;
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v8 + 16) & 1) == 0)
  {
    v9 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = buf;
      if (v22 < 0)
        v10 = *(_BYTE **)buf;
      v17 = 136315138;
      v18 = v10;
      v11 = "[%s] [WARN] probability has no value";
LABEL_25:
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, v11, (uint8_t *)&v17, 0xCu);
      goto LABEL_26;
    }
    goto LABEL_26;
  }
  v15 = 1;
LABEL_27:
  if (v22 < 0)
    operator delete(*(void **)buf);
  return v15;
}

char *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  unint64_t v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  _QWORD *v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(void ***)(*a1 + 8 * v3);
    if (v13)
    {
      v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v14 + 16, a2) & 1) != 0)return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3)
              break;
          }
          v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (char *)operator new(0x30uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = (std::string *)(v14 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v14 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  v19 = a1 + 2;
  *((_QWORD *)v14 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)*v19;
          if (*v19)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = v19;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v3);
  if (v38)
  {
    *(_QWORD *)v14 = *v38;
LABEL_75:
    *v38 = v14;
    goto LABEL_76;
  }
  *(_QWORD *)v14 = *v19;
  *v19 = v14;
  *(_QWORD *)(v37 + 8 * v3) = v19;
  if (*(_QWORD *)v14)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v14;
}

void sub_1C22BF8B0(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::span_matching::isSiriVocabularySpan(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  return v1 && *(_QWORD *)(v1 + 40) != 0;
}

uint64_t nlv4_inference_orchestrator::span_matching::scoreOfSpan(uint64_t a1, int *a2)
{
  if (nlv4_inference_orchestrator::span_matching::hasProbability(a1, a2))
    return *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 64) + 56) + 24) + 8);
  else
    return 0;
}

uint64_t nlv4_inference_orchestrator::span_matching::RelativeThresholdMatchingSpansFilter::RelativeThresholdMatchingSpansFilter(uint64_t a1, int *a2, double a3)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t v9;
  int v11;
  _BYTE *v12;
  __int16 v13;
  uint64_t v14;
  _BYTE buf[12];
  __int16 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E7BE95D8;
  *(_DWORD *)(a1 + 8) = *a2;
  *(double *)(a1 + 16) = a3;
  if (a3 < 0.0)
  {
    v4 = *a2;
    if (v4 >= 8)
    {
      v6 = SNLPOSLoggerForCategory(4);
      v5 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v16 = 2048;
        v17 = v4;
        _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v5 = off_1E7BED840[v4];
    }
    std::string::basic_string[abi:ne180100]<0>(buf, v5);
    v7 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = buf;
      if (v18 < 0)
        v8 = *(_BYTE **)buf;
      v9 = *(_QWORD *)(a1 + 16);
      v11 = 136315394;
      v12 = v8;
      v13 = 2048;
      v14 = v9;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] [WARN] Negative relative threshold supplied (%f), span filtering will behave strangely", (uint8_t *)&v11, 0x16u);
    }
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  return a1;
}

void uaap::TimeSpanHandler::~TimeSpanHandler(uaap::TimeSpanHandler *this)
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *uaap::TimeSpanHandler::handle(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  _QWORD *result;

  result = (_QWORD *)DDResultHasType();
  if ((_DWORD)result)
    return uaap::mapTimeSpanToItemizedUsos(a3, a4);
  return result;
}

_QWORD *uaap::mapTimeSpanToItemizedUsos(uint64_t a1, char **a2)
{
  CFHashCode v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uaap::UPDDTimeSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uaap::UPDDTimeSpan *v19;
  siri::ontology::UsoGraph *v20;
  uint64_t v21;
  uint64_t v22;
  uaap::UPDDTimeSpan *v23;
  uaap::UPDDTimeSpan *v24;
  uint64_t v25;
  int v26;

  v4 = CFHash(CFSTR("TimeSpan"));
  result = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::unique_ptr<uaap::UPDDSpan>>>>>::find<unsigned long>(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  if (result)
  {
    v6 = result;
    v8 = result[3];
    v7 = result[4];
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        result = *(_QWORD **)(v8 + 8 * v9);
        if (result)
        {
          if (result)
          {
            v10 = (siri::ontology::oname::graph::ontology_init *)result;
            v11 = (uaap::UPDDTimeSpan *)operator new();
            v25 = 0;
            v26 = 0;
            v12 = (siri::ontology::oname::graph::ontology_init *)MEMORY[0x1C3BB9154](v11, &v25);
            v24 = v11;
            v13 = *((_QWORD *)v10 + 6);
            if (v13
              && (v14 = *(const void **)(v13 + 24)) != 0
              && (v12 = (siri::ontology::oname::graph::ontology_init *)CFEqual(CFSTR("every"), v14), (_DWORD)v12))
            {
              v15 = *((_QWORD *)v11 + 11);
              v16 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
              uaap::TimeSpanHandler::resolveRecurringTimeSpan(v10, v11, v15, v16);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v24, a2);
              uaap::mapTimeSpansToItemizedUsos(a1, a2);
              uaap::mapTimeSpanSpansToItemizedUsos(a1, a2);
            }
            else
            {
              v17 = *((_QWORD *)v11 + 11);
              v18 = siri::ontology::oname::graph::ontology_init::Argument_entity(v12);
              uaap::TimeSpanHandler::resolveTimeSpan(v10, v11, v17, v18);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v24, a2);
              v19 = (uaap::UPDDTimeSpan *)operator new();
              v25 = 0;
              v26 = 0;
              MEMORY[0x1C3BB9154](v19, &v25);
              v23 = v19;
              uaap::TimeSpanHandler::resolveDateTimeRangeSpanGraph(v10, v19, v20);
              uaap::AbstractDateTimeHandler::addIfPopulated((uint64_t *)&v23, a2);
              if (v23)
              {
                v21 = MEMORY[0x1C3BB916C]();
                MEMORY[0x1C3BB9B44](v21, 0x10A0C403D23BABBLL);
              }
            }
            result = v24;
            if (v24)
            {
              v22 = MEMORY[0x1C3BB916C]();
              result = (_QWORD *)MEMORY[0x1C3BB9B44](v22, 0x10A0C403D23BABBLL);
            }
            v8 = v6[3];
            v7 = v6[4];
          }
        }
        ++v9;
      }
      while (v9 < (v7 - v8) >> 3);
    }
  }
  return result;
}

void sub_1C22BFD2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uaap::AbstractDateTimeHandler *uaap::TimeSpanHandler::resolveRecurringTimeSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *v4;
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  uaap::AbstractDateTimeHandler *v9;
  siri::ontology::UsoEntityNode *v10;
  uaap::UPDDSpan *v11;
  siri::ontology::oname::graph::ontology_init *v12;
  int v13;
  siri::ontology::UsoGraph *v14;
  siri::ontology::UsoEntityNode *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  uaap::UPDDSpan *v17;
  siri::ontology::UsoEntityNode *v18;
  uint64_t v19;

  v4 = 0;
  if (a1 && a2 && a3 && a4)
  {
    siri::ontology::oname::graph::ontology_init::Root(a1);
    v7 = siri::ontology::operator!=();
    if ((v7 & 1) != 0)
      return 0;
    siri::ontology::oname::graph::ontology_init::common_RecurringDateTime((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
    v4 = EntityNode;
    if ((*((_QWORD *)a1 + 7) || *((_QWORD *)a1 + 8) || *((_QWORD *)a1 + 10))
      && (siri::ontology::oname::graph::ontology_init::common_Duration(EntityNode),
          v9 = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode(),
          (EntityNode = uaap::TimeSpanHandler::resolveTimeSpanWithUnit(a1, a2, v9, v10)) != 0))
    {
      uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v9, a1, v11);
      siri::ontology::oname::graph::ontology_init::Argument_recurrencePeriod(v12);
      EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
      v13 = 1;
    }
    else
    {
      v13 = 0;
    }
    siri::ontology::oname::graph::ontology_init::common_DateTime(EntityNode);
    v14 = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
    v16 = uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, v14, v15);
    if (v16)
    {
      siri::ontology::oname::graph::ontology_init::Argument_recurrenceDateTimes(v16);
      siri::ontology::UsoGraphNode::setSuccessor();
      v19 = *((_QWORD *)a1 + 6);
      if (v19 && *(_QWORD *)(v19 + 24))
        uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, v14, v18);
    }
    else if (!v13)
    {
      return 0;
    }
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v4, a1, v17);
    siri::ontology::UsoGraphNode::setSuccessor();
  }
  return v4;
}

uaap::AbstractDateTimeHandler *uaap::TimeSpanHandler::resolveTimeSpan(siri::ontology::oname::graph::ontology_init *a1, uaap::UPDDTimeSpan *a2, uint64_t a3, uint64_t a4)
{
  uaap::AbstractDateTimeHandler *EntityNode;
  uint64_t v7;
  uaap::UPDDSpan *v8;
  siri::ontology::UsoEntityNode *v9;
  siri::ontology::UsoEntityNode *v10;
  uaap::UPDDSpan *v11;
  siri::ontology::UsoEntityNode *v12;
  siri::ontology::UsoEntityNode *v13;
  uint64_t v14;

  EntityNode = 0;
  if (!a1 || !a2 || !a3 || !a4)
    return EntityNode;
  siri::ontology::oname::graph::ontology_init::Root(a1);
  v7 = siri::ontology::operator!=();
  if ((v7 & 1) != 0)
    return 0;
  if (!*((_QWORD *)a1 + 7) && !*((_QWORD *)a1 + 8) && !*((_QWORD *)a1 + 10))
  {
    if (!*((_QWORD *)a1 + 12))
      return 0;
    goto LABEL_11;
  }
  siri::ontology::oname::graph::ontology_init::common_Duration((siri::ontology::oname::graph::ontology_init *)v7);
  EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v8);
  siri::ontology::UsoGraphNode::setSuccessor();
  v7 = (uint64_t)uaap::TimeSpanHandler::resolveTimeSpanWithUnit(a1, a2, EntityNode, v9);
  if (*((_QWORD *)a1 + 12))
  {
LABEL_11:
    siri::ontology::oname::graph::ontology_init::common_Time((siri::ontology::oname::graph::ontology_init *)v7);
    EntityNode = (uaap::AbstractDateTimeHandler *)siri::ontology::UsoGraph::createEntityNode();
    uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, a1, v11);
    siri::ontology::UsoGraphNode::setSuccessor();
    uaap::TimeHandler::resolveDateTimeRangeValue(a1, a2, EntityNode, v12);
    uaap::TimeHandler::resolveSpecialTimePeriod(a1, a2, EntityNode, v13);
  }
  v14 = *((_QWORD *)a1 + 6);
  if (v14 && *(_QWORD *)(v14 + 24))
    uaap::TimeHandler::resolveDateTimeQualifierListValue(a1, a2, EntityNode, v10);
  return EntityNode;
}

uaap::TimeHandler *uaap::TimeSpanHandler::resolveDateTimeRangeSpanGraph(uaap::TimeHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  uaap::TimeHandler *v3;
  siri::ontology::UsoGraph *EntityNode;
  siri::ontology::UsoEntityNode *v6;
  uaap::UPDDSpan *v7;
  siri::ontology::UsoGraph *v8;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::UsoEntityNode *v10;
  uint64_t v11;

  if (this)
  {
    v3 = this;
    if (*((_QWORD *)this + 12))
    {
      siri::ontology::oname::graph::ontology_init::common_DateTime(this);
      EntityNode = (siri::ontology::UsoGraph *)siri::ontology::UsoGraph::createEntityNode();
      this = uaap::TimeHandler::resolveDateTimeRangeValue(v3, a2, EntityNode, v6);
      if (this)
      {
        v8 = this;
        uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(EntityNode, v3, v7);
        siri::ontology::oname::graph::ontology_init::Argument_entity(v9);
        this = (uaap::TimeHandler *)siri::ontology::UsoGraphNode::setSuccessor();
        v11 = *((_QWORD *)v3 + 6);
        if (v11)
        {
          if (*(_QWORD *)(v11 + 24))
            return (uaap::TimeHandler *)uaap::TimeHandler::resolveDateTimeQualifierListValue(v3, a2, v8, v10);
        }
      }
    }
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveTimeSpanWithUnit(uaap::TimeSpanHandler *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *result;
  uint64_t v8;
  uint64_t v9;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;
  uint64_t v12;
  siri::ontology::oname::graph::ontology_init *v13;
  uint64_t v14;
  uint64_t v15;
  siri::ontology::oname::graph::ontology_init *v16;
  uint64_t v17;

  result = 0;
  if (this && a2 && a3)
  {
    if ((*((_QWORD *)this + 7) || *((_QWORD *)this + 8) || *((_QWORD *)this + 10))
      && (siri::ontology::oname::graph::ontology_init::common_Duration(0),
          v8 = siri::ontology::operator!=(),
          (v8 & 1) == 0))
    {
      v9 = *((_QWORD *)this + 10);
      if (v9)
      {
        v10 = *(siri::ontology::oname::graph::ontology_init **)(v9 + 24);
        v11 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Second((siri::ontology::oname::graph::ontology_init *)v8);
        result = uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v10, v11, (uint64_t)a2, (uint64_t)a3, this);
      }
      else
      {
        result = 0;
      }
      v12 = *((_QWORD *)this + 8);
      if (v12)
      {
        v13 = *(siri::ontology::oname::graph::ontology_init **)(v12 + 24);
        v14 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute(result);
        result = uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v13, v14, (uint64_t)a2, (uint64_t)a3, this);
      }
      v15 = *((_QWORD *)this + 7);
      if (v15)
      {
        v16 = *(siri::ontology::oname::graph::ontology_init **)(v15 + 24);
        v17 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Hour(result);
        return uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v16, v17, (uint64_t)a2, (uint64_t)a3, this);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(siri::ontology::oname::graph::ontology_init *a1, uint64_t a2, uint64_t a3, uint64_t a4, siri::ontology::UsoEntityNode *a5)
{
  uint64_t v7;
  siri::ontology::oname::graph::ontology_init *EntityNode;
  siri::ontology::oname::graph::ontology_init *v9;
  siri::ontology::oname::graph::ontology_init *v10;
  const __CFString *v11;
  siri::ontology::oname::graph::ontology_init *IntNode;
  uaap::UPDDSpan *v13;
  siri::ontology::oname::graph::ontology_init *v14;
  siri::ontology::oname::graph::ontology_init *v15;
  siri::ontology::oname::graph::ontology_init *v16;
  uaap::UPDDSpan *v17;

  siri::ontology::oname::graph::ontology_init::common_TimeUnit_Hour(a1);
  v7 = siri::ontology::operator!=();
  if ((_DWORD)v7)
  {
    siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute((siri::ontology::oname::graph::ontology_init *)v7);
    v7 = siri::ontology::operator!=();
    if ((_DWORD)v7)
    {
      siri::ontology::oname::graph::ontology_init::common_TimeUnit_Second((siri::ontology::oname::graph::ontology_init *)v7);
      v7 = siri::ontology::operator!=();
      if ((v7 & 1) != 0)
        return 0;
    }
  }
  siri::ontology::oname::graph::ontology_init::common_DurationComponent((siri::ontology::oname::graph::ontology_init *)v7);
  EntityNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_components(EntityNode);
  v9 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraphNode::setSuccessor();
  siri::ontology::oname::graph::ontology_init::common_Integer(v9);
  v10 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_value(v10);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::UPDDSpan::extractIntValueFromCFStringRef((const __CFString *)a1, v11);
  IntNode = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createIntNode();
  siri::ontology::oname::graph::ontology_init::Argument_integerValue(IntNode);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(IntNode, a5, v13);
  siri::ontology::oname::graph::ontology_init::common_TimeUnit(v14);
  v15 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_unit(v15);
  siri::ontology::UsoGraphNode::setSuccessor();
  v16 = (siri::ontology::oname::graph::ontology_init *)siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::oname::graph::ontology_init::Argument_definedValue(v16);
  siri::ontology::UsoGraphNode::setSuccessor();
  uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(v16, a5, v17);
  return EntityNode;
}

BOOL uaap::TimeSpanHandler::isRecurringTime(_BOOL8 this, uaap::UPDDTimeSpan *a2)
{
  uint64_t v2;
  const void *v3;

  if (this)
  {
    v2 = *(_QWORD *)(this + 48);
    return v2 && (v3 = *(const void **)(v2 + 24)) != 0 && CFEqual(CFSTR("every"), v3) != 0;
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveMinutesBeforeTimeSpanWithUnit(CFTypeRef *this, uaap::UPDDSpan *a2, siri::ontology::UsoGraph *a3, siri::ontology::UsoEntityNode *a4)
{
  siri::ontology::oname::graph::ontology_init *v7;
  uint64_t v8;
  siri::ontology::oname::graph::ontology_init *v10;
  uint64_t v11;

  if (!this)
    return 0;
  if (!a2)
    return 0;
  if (!a3)
    return 0;
  v7 = (siri::ontology::oname::graph::ontology_init *)CFEqual(this[1], CFSTR("MinutesBefore"));
  if (!(_DWORD)v7)
    return 0;
  siri::ontology::oname::graph::ontology_init::common_Duration(v7);
  v8 = siri::ontology::operator!=();
  if ((v8 & 1) != 0)
    return 0;
  v10 = (siri::ontology::oname::graph::ontology_init *)this[3];
  v11 = siri::ontology::oname::graph::ontology_init::common_TimeUnit_Minute((siri::ontology::oname::graph::ontology_init *)v8);
  return uaap::TimeSpanHandler::_buildDurationComponentWithValueAndUnit(v10, v11, (uint64_t)a2, (uint64_t)a3, (siri::ontology::UsoEntityNode *)this);
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveTimeSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanHandler::resolveTimeSpan(v4, a2, v5, v6);
  }
  return this;
}

siri::ontology::oname::graph::ontology_init *uaap::TimeSpanHandler::resolveRecurringTimeSpanGraph(siri::ontology::oname::graph::ontology_init *this, uaap::UPDDTimeSpan *a2, siri::ontology::UsoGraph *a3)
{
  siri::ontology::oname::graph::ontology_init *v4;
  uint64_t v5;
  uint64_t v6;

  if (this)
  {
    v4 = this;
    v5 = *((_QWORD *)a2 + 11);
    v6 = siri::ontology::oname::graph::ontology_init::Argument_entity(this);
    return uaap::TimeSpanHandler::resolveRecurringTimeSpan(v4, a2, v5, v6);
  }
  return this;
}

void sub_1C22C0D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t **a11, unsigned __int8 a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32)
{
  uint64_t v32;
  uint64_t v33;

  if (*(char *)(v33 - 233) < 0)
    operator delete(*(void **)(v33 - 256));
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v32);
  nlohmann::basic_json<std::map,std::vector,std::string,BOOL,long long,unsigned long long,double,std::allocator,nlohmann::adl_serializer,std::vector<unsigned char>>::json_value::destroy(a11, a12);
  if (a19 < 0)
    operator delete(a14);
  std::ifstream::~ifstream(&a32);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::pair<std::basic_regex<char,std::regex_traits<char>>,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::inference_engine::BertModelLoadingError::~BertModelLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::EmbedderOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  std::string *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  void *v13[5];
  void *__p;
  char v15;
  char v16;

  v8 = std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)a1, "config.json");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(v8 + 1, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 48), "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 72), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 96), "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 120), "version.yaml");
  LODWORD(v13[0]) = 2;
  snlp::common::config::loadConfig(a1 + 144, a4, (int *)v13);
  *(_QWORD *)(a1 + 184) = 0;
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  v12 = 2;
  snlp::common::config::loadConfig((uint64_t)v13, a4, &v12);
  v9 = operator new();
  LOBYTE(__p) = 0;
  v16 = 0;
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::EspressoBertModel(v9, a3, (uint64_t)&__p, v13, a2);
  if (v16 && v15 < 0)
    operator delete(__p);
  v10 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v9;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)v13);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::validateBertModelLoading((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)a1);
  return a1;
}

void sub_1C22C10E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  void **v28;
  std::mutex *v29;
  uint64_t v31;

  std::mutex::~mutex(v29);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v28);
  v31 = *(_QWORD *)(v23 + 184);
  *(_QWORD *)(v23 + 184) = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v27);
  if (*(char *)(v23 + 143) < 0)
    operator delete(*v26);
  if (*(char *)(v23 + 119) < 0)
    operator delete(*v25);
  if (*(char *)(v23 + 95) < 0)
    operator delete(*v24);
  if (*(char *)(v23 + 71) < 0)
    operator delete(*a9);
  if (*(char *)(v23 + 47) < 0)
    operator delete(*a10);
  if (*(char *)(v23 + 23) < 0)
    operator delete(*(void **)v23);
  _Unwind_Resume(a1);
}

void sub_1C22C1200()
{
  JUMPOUT(0x1C22C11D4);
}

void sub_1C22C1208()
{
  JUMPOUT(0x1C22C11E8);
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::EmbedderOrchestrator(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD v16[5];
  std::string v17;
  char v18;

  v11 = std::__fs::filesystem::path::path[abi:ne180100]<char [12],void>((std::string *)a1, "config.json") + 1;
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>(v11, "reformulations.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 48), "bert.mlmodelc");
  std::__fs::filesystem::path::path[abi:ne180100]<char [19],void>((std::string *)(a1 + 72), "model.espresso.net");
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>((std::string *)(a1 + 96), "src_vocab.txt");
  std::__fs::filesystem::path::path[abi:ne180100]<char [13],void>((std::string *)(a1 + 120), "version.yaml");
  LODWORD(v16[0]) = 2;
  snlp::common::config::loadConfig(a1 + 144, a4, (int *)v16);
  *(_QWORD *)(a1 + 184) = 0;
  nlv4_inference_orchestrator::pre_processing::Reformulator::Reformulator((_QWORD *)(a1 + 192));
  *(_QWORD *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  v15 = 2;
  snlp::common::config::loadConfig((uint64_t)v16, a4, &v15);
  v12 = operator new();
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v17 = *(std::string *)a6;
  v18 = 1;
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::EspressoBertModel(v12, a3, (uint64_t)&v17, v16, a2);
  if (v18 && SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v13 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v12;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)v16);
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::validateBertModelLoading((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)a1);
  return a1;
}

void sub_1C22C13FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  void **v30;
  std::mutex *v31;
  uint64_t v33;

  MEMORY[0x1C3BB9B44](v26, 0x10B3C4028DAAE2CLL);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)&a14);
  std::mutex::~mutex(v31);
  nlv4_inference_orchestrator::pre_processing::Reformulator::~Reformulator(v30);
  v33 = *(_QWORD *)(v25 + 184);
  *(_QWORD *)(v25 + 184) = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table(v29);
  if (*(char *)(v25 + 143) < 0)
    operator delete(*v28);
  if (*(char *)(v25 + 119) < 0)
    operator delete(*v27);
  if (*(char *)(v25 + 95) < 0)
    operator delete(*a10);
  if (*(char *)(v25 + 71) < 0)
    operator delete(*a11);
  if (*(char *)(v25 + 47) < 0)
    operator delete(*a12);
  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  _Unwind_Resume(a1);
}

void sub_1C22C1518()
{
  JUMPOUT(0x1C22C14D8);
}

void sub_1C22C1520()
{
  JUMPOUT(0x1C22C14ECLL);
}

void sub_1C22C1528()
{
  JUMPOUT(0x1C22C1500);
}

uint64_t std::optional<std::vector<int>>::operator=[abi:ne180100]<std::vector<int>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<nlv4_inference_orchestrator::orchestration::Token>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t i;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x249249249249249)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    std::vector<nlv4_inference_orchestrator::orchestration::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(v8, (uint64_t)__str, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::orchestration::Token>,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*,nlv4_inference_orchestrator::orchestration::Token*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(__str, a3, v9);
  for (i = *(_QWORD *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<nlv4_inference_orchestrator::orchestration::Token>::destroy[abi:ne180100](i))
  {
    i -= 112;
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1C22C1720(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C22C1728(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__optional_storage_base<std::vector<int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::vector<int>,false> const&>(uint64_t a1, uint64_t a2)
{
  void *v3;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v3;
      operator delete(v3);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType::~EspressoBertModelInputType(nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *this)
{
  void *v2;
  void *v3;
  void **v4;

  if (*((_BYTE *)this + 160))
  {
    v2 = (void *)*((_QWORD *)this + 17);
    if (v2)
    {
      *((_QWORD *)this + 18) = v2;
      operator delete(v2);
    }
  }
  if (*((_BYTE *)this + 128))
  {
    v4 = (void **)((char *)this + 104);
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
  if (*((_BYTE *)this + 96))
  {
    v3 = (void *)*((_QWORD *)this + 9);
    if (v3)
    {
      *((_QWORD *)this + 10) = v3;
      operator delete(v3);
    }
  }
  v4 = (void **)((char *)this + 48);
  std::vector<nlv4_inference_orchestrator::orchestration::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(a2, a3, v9);
  v15 = *(char **)(a1 + 8);
  if (v15 != v14)
  {
    v16 = *(char **)(a1 + 8);
    do
    {
      v18 = (void *)*((_QWORD *)v16 - 3);
      v16 -= 24;
      v17 = v18;
      if (v18)
      {
        *((_QWORD *)v15 - 2) = v17;
        operator delete(v17);
      }
      v15 = v16;
    }
    while (v16 != v14);
  }
  *(_QWORD *)(a1 + 8) = v14;
}

void sub_1C22C19D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1C22C19D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if ((char *)v5 != a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a3, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *,nlv4_inference_orchestrator::orchestration::Token *>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  __int128 v6;
  __int128 v7;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      v6 = *(_OWORD *)((char *)&v5[1].__r_.__value_.__r.__words[1] + 3);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[1] + 3) = v6;
      if (this != v5)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&this[2].__r_.__value_.__r.__words[1], (std::string *)v5[2].__r_.__value_.__l.__size_, (__int128 *)v5[2].__r_.__value_.__r.__words[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[2].__r_.__value_.__r.__words[2] - v5[2].__r_.__value_.__l.__size_) >> 3));
      v7 = *(_OWORD *)&v5[4].__r_.__value_.__l.__data_;
      *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[3].__r_.__value_.__r.__words[1];
      *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v7;
      this = (std::string *)((char *)this + 112);
      v5 = (std::string *)((char *)v5 + 112);
    }
    while (v5 != a2);
  }
  return this;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *end;
  __int128 *v14;
  uint64_t v15;

  v6 = (__int128 *)__str;
  p_end_cap = (uint64_t)&a1->__end_cap_;
  begin = a1->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::pair<std::string_view,int>>::__vallocate[abi:ne180100](a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v6, a3, a1->__end_);
LABEL_15:
    a1->__end_ = v12;
    return;
  }
  end = a1->__end_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3) < a4)
  {
    v14 = (__int128 *)(&__str->__r_.__value_.__l.__data_ + (((char *)end - (char *)begin) >> 3));
    if (end != begin)
    {
      v15 = 8 * (((char *)end - (char *)begin) >> 3);
      do
      {
        std::string::operator=(begin, (const std::string *)v6);
        v6 = (__int128 *)((char *)v6 + 24);
        ++begin;
        v15 -= 24;
      }
      while (v15);
      begin = a1->__end_;
    }
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(p_end_cap, v14, a3, begin);
    goto LABEL_15;
  }
  if (__str != (std::string *)a3)
  {
    do
    {
      std::string::operator=(begin, (const std::string *)v6);
      v6 = (__int128 *)((char *)v6 + 24);
      ++begin;
    }
    while (v6 != a3);
    end = a1->__end_;
  }
  while (end != begin)
  {
    if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(end[-1].__r_.__value_.__l.__data_);
    --end;
  }
  a1->__end_ = begin;
}

void sub_1C22C1C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getEmbeddingsBySentence(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this@<X0>, const nlv4_inference_orchestrator::orchestration::EmbedderRequest *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6[2];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  _BYTE v12[80];
  _BYTE v13[88];
  void *__p[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[80];
  _BYTE v21[80];
  _BYTE v22[168];
  uint64_t v23[3];
  uint64_t v24;

  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::preprocessRequest((uint64_t)this, (uint64_t)a2, (uint64_t)v22);
  __p[0] = 0;
  __p[1] = 0;
  v20[72] = 0;
  v21[0] = 0;
  v21[72] = 0;
  v15 = 0;
  v18 = 0uLL;
  v19 = 0;
  v20[0] = 0;
  std::mutex::lock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::forwardAggregatedBySentence(*((nlv4_inference_orchestrator::inference_engine::EspressoBertModel **)this + 23), (const nlv4_inference_orchestrator::inference_engine::EspressoBertModelInputType *)v22, (uint64_t)v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_OWORD *)__p = *(_OWORD *)v6;
  v15 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  v16 = v8;
  v17 = v9;
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  v18 = *(_OWORD *)v10;
  v19 = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10[0]) = 0;
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v20, (uint64_t)v12);
  std::__optional_storage_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>>((uint64_t)v21, (uint64_t)v13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v12);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  std::mutex::unlock((std::mutex *)((char *)this + 240));
  nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::postProcessBertOutput((uint64_t)a2, (uint64_t *)__p, v23, (uint64_t)&v24, a3);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v21);
  std::__optional_destruct_base<nlv4_inference_orchestrator::orchestration::EmbeddingTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)v22);
}

void sub_1C22C1E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  nlv4_inference_orchestrator::inference_engine::EspressoBertModelOutputType::~EspressoBertModelOutputType(&a39);
  nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput::~BertPreprocessingOutput((nlv4_inference_orchestrator::orchestration::BertPreprocessingOutput *)&a68);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::isSubOwlModel(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 16))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::getFeaturePoolingMaskRank(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 64))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::tryEnableSentenceFeatures(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 48))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::areSentenceFeaturesEnabled(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 32))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::tryEnableSubwordFeatures(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 56))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

uint64_t nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::areSubwordFeaturesEnabled(nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 23) + 8) + 40))(*(_QWORD *)(*((_QWORD *)this + 23) + 8));
}

void nlv4_inference_orchestrator::orchestration::EmbedderOrchestrator::decodeSubwordTokens(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  nlv4_inference_orchestrator::inference_engine::EspressoBertModel::decodeSubwordPieces(*(_QWORD *)(a1 + 184), a2);
}

void sub_1C22C2B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1C22C2DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

unint64_t snlp::common::text_uso_graph::bottomUpTreeHash(siri::ontology::UsoGraph **this, const UsoGraphNode *a2)
{
  unint64_t v3;
  snlp::common::text_uso_graph **v4;
  snlp::common::text_uso_graph **v5;
  snlp::common::text_uso_graph *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char v23;
  void *v24;
  snlp::common::text_uso_graph **v25;
  char v26;
  void *__p;
  char *v28;
  char *v29;

  __p = 0;
  v28 = 0;
  v29 = 0;
  siri::ontology::UsoGraph::getSuccessorsWithEdges(this[1], (const UsoGraphNode *)this);
  v4 = (snlp::common::text_uso_graph **)v24;
  v5 = v25;
  if (v24 != v25)
  {
    do
    {
      v6 = v4[1];
      v7 = snlp::common::text_uso_graph::bottomUpTreeHash(*v4, (const UsoGraphNode *)v3);
      v8 = boost::hash<std::string>::operator()((char *)v6 + 32);
      v9 = 3864292196u
         - 0x395B586CA42E166BLL
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v8) ^ ((0xC6A4A7935BD1E995 * v8) >> 47))) ^ v7);
      v10 = v28;
      if (v28 >= v29)
      {
        v12 = (char *)__p;
        v13 = (v28 - (_BYTE *)__p) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v15 = v29 - (_BYTE *)__p;
        if ((v29 - (_BYTE *)__p) >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v3 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v3 = v14;
        if (v3)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v29, v3);
          v12 = (char *)__p;
          v10 = v28;
        }
        else
        {
          v16 = 0;
        }
        v17 = (unint64_t *)&v16[8 * v13];
        *v17 = v9;
        v11 = (char *)(v17 + 1);
        while (v10 != v12)
        {
          v18 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *--v17 = v18;
        }
        __p = v17;
        v28 = v11;
        v29 = &v16[8 * v3];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_QWORD *)v28 = v9;
        v11 = v10 + 8;
      }
      v28 = v11;
      v4 += 2;
    }
    while (v4 != v5);
    v4 = (snlp::common::text_uso_graph **)v24;
  }
  if (v4)
  {
    v25 = v4;
    operator delete(v4);
  }
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*this + 6))(&v24, this);
  v19 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v23, (uint64_t)&v24);
  if (v26 < 0)
    operator delete(v24);
  std::__sort<std::__less<unsigned long,unsigned long> &,unsigned long *>();
  if (__p != v28)
  {
    v20 = (char *)__p;
    do
    {
      v21 = *(_QWORD *)v20;
      v20 += 8;
      v19 = 3864292196u
          - 0x395B586CA42E166BLL
          * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v21) ^ ((0xC6A4A7935BD1E995 * v21) >> 47))) ^ v19);
    }
    while (v20 != v28);
  }
  if (__p)
  {
    v28 = (char *)__p;
    operator delete(__p);
  }
  return v19;
}

void sub_1C22C3F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::createInvalidTensorNameErrorMessage(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  uint64_t v21;
  std::locale::id *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  uint64_t v30;
  _QWORD v32[2];
  _QWORD v33[11];
  char v34;
  uint64_t v35;
  std::locale v36;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v32);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Invalid tensor name: ", 21);
  v7 = *(char *)(a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *(_QWORD *)a2;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a2 + 23);
  else
    v9 = *(_QWORD *)(a2 + 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Tensor description: ", 20);
  v13 = *(char *)(a1 + 23);
  if (v13 >= 0)
    v14 = a1;
  else
    v14 = *(_QWORD *)a1;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a1 + 23);
  else
    v15 = *(_QWORD *)(a1 + 8);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Valid options are: [", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v19 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  v20 = *a3;
  v21 = a3[1];
  if (*a3 != v21)
  {
    v22 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v23 = *(char *)(v20 + 23);
      if (v23 >= 0)
        v24 = v20;
      else
        v24 = *(_QWORD *)v20;
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(v20 + 23);
      else
        v25 = *(_QWORD *)(v20 + 8);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
      v27 = std::locale::use_facet(&v36, v22);
      ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
      std::locale::~locale(&v36);
      std::ostream::put();
      std::ostream::flush();
      v20 += 24;
    }
    while (v20 != v21);
  }
  v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(_QWORD *)(*v28 - 24)));
  v29 = std::locale::use_facet(&v36, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v36);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  v32[0] = *MEMORY[0x1E0DE4F50];
  v30 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v33[0] = v30;
  v33[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete((void *)v33[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v35);
}

void sub_1C22C42E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::locale::~locale((std::locale *)(v9 - 72));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::inference_engine::isFeaturePoolingRankValid(int a1)
{
  return (a1 & 0xFFFFFFFE) == 2;
}

void sub_1C22C43A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1C22C52C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  void *v52;
  void *v53;

  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a47)
  {
    a48 = (uint64_t)a47;
    operator delete(a47);
  }
  v52 = (void *)STACK[0x3C0];
  if (STACK[0x3C0])
  {
    STACK[0x3C8] = (unint64_t)v52;
    operator delete(v52);
  }
  v53 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v53;
    operator delete(v53);
  }
  nl_featurization::FeaturizerOutput::~FeaturizerOutput((nl_featurization::FeaturizerOutput *)&STACK[0x248]);
  nl_featurization::FeaturizerInput::~FeaturizerInput((void **)&STACK[0x290]);
  a47 = &STACK[0x2C0];
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  STACK[0x290] = (unint64_t)&STACK[0x320];
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);

  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((void **)&STACK[0x380]);
  _Unwind_Resume(a1);
}

void nl_featurization::FeaturizerOutput::~FeaturizerOutput(nl_featurization::FeaturizerOutput *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  v4 = (void **)this;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void nl_featurization::FeaturizerInput::~FeaturizerInput(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<nl_featurization::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t nl_featurization::tensor::Tensor<unsigned long>::computeAddress(uint64_t *a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::runtime_error *exception;

  v4 = (a4 - (uint64_t)a3) >> 3;
  if (v4 != a2 - a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Given coordinates do not match tensor shape");
LABEL_18:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a2 == a1)
    return 0;
  v5 = a2 - a1;
  if (v4 <= 1)
    v6 = 1;
  else
    v6 = (a4 - (uint64_t)a3) >> 3;
  v7 = (unint64_t *)a3;
  v8 = (unint64_t *)a1;
  do
  {
    v10 = *v7++;
    v9 = v10;
    v11 = *v8++;
    if (v9 >= v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Coordinates exceed bounds of tensor");
      goto LABEL_18;
    }
    --v6;
  }
  while (v6);
  if (v5 <= 1)
    v5 = 1;
  v12 = v5 - 1;
  v13 = 1;
  do
  {
    if (v4 <= v12)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v14 = *a3++;
    v6 += v14 * v13;
    v15 = *a1++;
    v13 *= v15;
    --v5;
  }
  while (v5);
  return v6;
}

void sub_1C22C57C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<nl_featurization::Token>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      v6 = *(_OWORD *)(v3 - 32);
      *(_QWORD *)(v4 - 16) = *(_QWORD *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v6;
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      *(_QWORD *)(v3 - 32) = 0;
      *(_BYTE *)(v4 - 8) = *(_BYTE *)(v3 - 8);
      v4 -= 48;
      v3 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v7 = *result;
  *result = v5;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<nl_featurization::Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v4 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 9) < 0)
      {
        operator delete(*(void **)(v2 - 32));
        v4 = *(_QWORD *)(a1 + 16);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1C22C5D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;

  std::vector<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::span_matching::MatchedSpan>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nl_featurization::span_matching::MatchedSpan>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<nl_featurization::span_matching::MatchedSpan>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>,std::reverse_iterator<nl_featurization::span_matching::MatchedSpan*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __n128 result;

  while (a3 != a5)
  {
    v8 = *(_QWORD *)(a3 - 32);
    a3 -= 32;
    *(_QWORD *)(a7 - 32) = v8;
    a7 -= 32;
    result = *(__n128 *)(a3 + 8);
    *(_QWORD *)(a7 + 24) = *(_QWORD *)(a3 + 24);
    *(__n128 *)(a7 + 8) = result;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::constructUDA(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  std::string v22;
  __int128 v23;
  uint64_t v24;
  std::string __p;
  __int128 v26;
  _OWORD v27[4];
  void **v28[5];

  v3 = *(_QWORD *)(a1 + 328);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v22 = *(std::string *)a2;
  v23 = 0uLL;
  v24 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  memset(v27, 0, 56);
  v26 = 0u;
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(_QWORD *)(v3 + 96);
  if (v5 >= v4)
  {
    v11 = *(_QWORD *)(v3 + 88);
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v11) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x1C71C71C71C71C7)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - v11) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xE38E38E38E38E3)
      v15 = 0x1C71C71C71C71C7;
    else
      v15 = v13;
    v28[4] = (void **)(v3 + 104);
    if (v15)
      v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v15);
    else
      v16 = 0;
    v17 = v15 + 144 * v12;
    v28[0] = (void **)v15;
    v28[1] = (void **)v17;
    v28[3] = (void **)(v15 + 144 * v16);
    v18 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    memset(&v22, 0, sizeof(v22));
    v19 = v23;
    *(_QWORD *)(v17 + 40) = v24;
    *(_OWORD *)(v17 + 24) = v19;
    v24 = 0;
    v23 = 0uLL;
    v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v17 + 48) = v20;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v17 + 72) = v26;
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    *(_OWORD *)(v17 + 88) = v27[0];
    *(_QWORD *)(v17 + 104) = *(_QWORD *)&v27[1];
    memset(v27, 0, 24);
    v21 = *(_OWORD *)((char *)&v27[2] + 8);
    *(_OWORD *)(v17 + 112) = *(_OWORD *)((char *)&v27[1] + 8);
    *(_OWORD *)(v17 + 128) = v21;
    v28[2] = (void **)(v17 + 144);
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v3 + 88), v28);
    v10 = *(_QWORD *)(v3 + 96);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v28);
  }
  else
  {
    v6 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
    *(_OWORD *)v5 = v6;
    memset(&v22, 0, sizeof(v22));
    v7 = v24;
    *(_OWORD *)(v5 + 24) = v23;
    *(_QWORD *)(v5 + 40) = v7;
    v24 = 0;
    v23 = 0uLL;
    v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v5 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v5 + 48) = v8;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v5 + 72) = v26;
    *(_QWORD *)(v5 + 88) = 0;
    *(_QWORD *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = 0;
    *(_OWORD *)(v5 + 88) = v27[0];
    *(_QWORD *)(v5 + 104) = *(_QWORD *)&v27[1];
    memset(v27, 0, 24);
    v9 = *(_OWORD *)((char *)&v27[2] + 8);
    *(_OWORD *)(v5 + 112) = *(_OWORD *)((char *)&v27[1] + 8);
    *(_OWORD *)(v5 + 128) = v9;
    v10 = v5 + 144;
  }
  *(_QWORD *)(v3 + 96) = v10;
  v28[0] = (void **)v27;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v28);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_1C22C615C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::constructIntent(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  std::string v42;
  __int128 v43;
  uint64_t v44;
  std::string __p;
  __int128 v46;
  __int128 v47;
  _OWORD v48[3];
  void **v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;

  v4 = *(uint64_t **)(a1 + 328);
  if (*(char *)(a1 + 239) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)(a1 + 216), *(_QWORD *)(a1 + 224));
  else
    v42 = *(std::string *)(a1 + 216);
  v43 = 0uLL;
  v44 = 0;
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  memset(v48, 0, 40);
  v47 = 0u;
  v46 = 0u;
  v5 = v4[13];
  v6 = v4[12];
  if (v6 >= v5)
  {
    v12 = v4[11];
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v12) >> 4);
    v14 = v13 + 1;
    if (v13 + 1 > 0x1C71C71C71C71C7)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v12) >> 4);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0xE38E38E38E38E3)
      v16 = 0x1C71C71C71C71C7;
    else
      v16 = v14;
    v53 = v4 + 13;
    if (v16)
      v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v16);
    else
      v17 = 0;
    v18 = v16 + 144 * v13;
    v49 = (void **)v16;
    v50 = v18;
    v52 = v16 + 144 * v17;
    v19 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v19;
    memset(&v42, 0, sizeof(v42));
    v20 = v43;
    *(_QWORD *)(v18 + 40) = v44;
    *(_OWORD *)(v18 + 24) = v20;
    v44 = 0;
    v43 = 0uLL;
    v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v18 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v18 + 48) = v21;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v18 + 72) = v46;
    *(_QWORD *)(v18 + 96) = 0;
    *(_QWORD *)(v18 + 104) = 0;
    *(_QWORD *)(v18 + 88) = 0;
    *(_OWORD *)(v18 + 88) = v47;
    *(_QWORD *)(v18 + 104) = *(_QWORD *)&v48[0];
    v47 = 0uLL;
    *(_QWORD *)&v48[0] = 0;
    v22 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v18 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v18 + 128) = v22;
    v51 = v18 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v4 + 11, &v49);
    v11 = v4[12];
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v49);
  }
  else
  {
    v7 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)v6 = v7;
    memset(&v42, 0, sizeof(v42));
    v8 = v44;
    *(_OWORD *)(v6 + 24) = v43;
    *(_QWORD *)(v6 + 40) = v8;
    v44 = 0;
    v43 = 0uLL;
    v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v6 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v6 + 48) = v9;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v6 + 72) = v46;
    *(_QWORD *)(v6 + 88) = 0;
    *(_QWORD *)(v6 + 96) = 0;
    *(_QWORD *)(v6 + 104) = 0;
    *(_OWORD *)(v6 + 88) = v47;
    *(_QWORD *)(v6 + 104) = *(_QWORD *)&v48[0];
    v47 = 0uLL;
    *(_QWORD *)&v48[0] = 0;
    v10 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v6 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v6 + 128) = v10;
    v11 = v6 + 144;
  }
  v4[12] = v11;
  v49 = (void **)&v47;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 96);
  *(_QWORD *)(a1 + 328) = v23 - 144;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v42 = *(std::string *)a2;
  v43 = 0uLL;
  v44 = 0;
  if (*(char *)(a1 + 263) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 240), *(_QWORD *)(a1 + 248));
  else
    __p = *(std::string *)(a1 + 240);
  memset(v48, 0, 40);
  v47 = 0u;
  v46 = 0u;
  v24 = *(_QWORD *)(v23 - 40);
  v25 = *(_QWORD *)(v23 - 48);
  if (v25 >= v24)
  {
    v31 = *(_QWORD *)(v23 - 56);
    v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v25 - v31) >> 4);
    v33 = v32 + 1;
    if (v32 + 1 > 0x1C71C71C71C71C7)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v24 - v31) >> 4);
    if (2 * v34 > v33)
      v33 = 2 * v34;
    if (v34 >= 0xE38E38E38E38E3)
      v35 = 0x1C71C71C71C71C7;
    else
      v35 = v33;
    v53 = (uint64_t *)(v23 - 40);
    if (v35)
      v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v35);
    else
      v36 = 0;
    v37 = v35 + 144 * v32;
    v49 = (void **)v35;
    v50 = v37;
    v52 = v35 + 144 * v36;
    v38 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(_QWORD *)(v37 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)v37 = v38;
    memset(&v42, 0, sizeof(v42));
    v39 = v43;
    *(_QWORD *)(v37 + 40) = v44;
    *(_OWORD *)(v37 + 24) = v39;
    v44 = 0;
    v43 = 0uLL;
    v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v37 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v37 + 48) = v40;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v37 + 72) = v46;
    *(_QWORD *)(v37 + 96) = 0;
    *(_QWORD *)(v37 + 104) = 0;
    *(_QWORD *)(v37 + 88) = 0;
    *(_OWORD *)(v37 + 88) = v47;
    *(_QWORD *)(v37 + 104) = *(_QWORD *)&v48[0];
    v47 = 0uLL;
    *(_QWORD *)&v48[0] = 0;
    v41 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v37 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v37 + 128) = v41;
    v51 = v37 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)(v23 - 56), &v49);
    v30 = *(_QWORD *)(v23 - 48);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v49);
  }
  else
  {
    v26 = *(_OWORD *)&v42.__r_.__value_.__l.__data_;
    *(_QWORD *)(v25 + 16) = *((_QWORD *)&v42.__r_.__value_.__l + 2);
    *(_OWORD *)v25 = v26;
    memset(&v42, 0, sizeof(v42));
    v27 = v44;
    *(_OWORD *)(v25 + 24) = v43;
    *(_QWORD *)(v25 + 40) = v27;
    v44 = 0;
    v43 = 0uLL;
    v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v25 + 64) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)(v25 + 48) = v28;
    memset(&__p, 0, sizeof(__p));
    *(_OWORD *)(v25 + 72) = v46;
    *(_QWORD *)(v25 + 88) = 0;
    *(_QWORD *)(v25 + 96) = 0;
    *(_QWORD *)(v25 + 104) = 0;
    *(_OWORD *)(v25 + 88) = v47;
    *(_QWORD *)(v25 + 104) = *(_QWORD *)&v48[0];
    v47 = 0uLL;
    *(_QWORD *)&v48[0] = 0;
    v29 = *(_OWORD *)((char *)&v48[1] + 8);
    *(_OWORD *)(v25 + 112) = *(_OWORD *)((char *)v48 + 8);
    *(_OWORD *)(v25 + 128) = v29;
    v30 = v25 + 144;
  }
  *(_QWORD *)(v23 - 48) = v30;
  v49 = (void **)&v47;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44) < 0)
    operator delete((void *)v43);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(*(_QWORD *)(a1 + 328) + 96) - 144;
}

void sub_1C22C6734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::PlyStateHandler::doMergePath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, _BYTE *a6)
{
  uint64_t v10;
  std::string::size_type v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  std::string::size_type size;
  std::string *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string *v36;
  std::string::size_type v37;
  std::string v38;
  char v39;

  v10 = a1;
  memset(&v38, 0, sizeof(v38));
  if (*(_DWORD *)(a4 + 288) == 1)
  {
    v11 = *(_QWORD *)(a4 + 96);
    v12 = *(_QWORD *)(a4 + 248);
    if (v12 > v11)
      std::string::basic_string(&v38, *(const std::string **)(a1 + 320), v11, v12 - v11, (std::allocator<char> *)&v39);
  }
  v13 = *a5;
  v14 = a5[1];
  if (*a5 != v14)
  {
    v15 = 0;
    v16 = 0;
    v17 = a6[23];
    if (v17 >= 0)
      v18 = a6[23];
    else
      v18 = *((_QWORD *)a6 + 1);
    if (v17 < 0)
      a6 = *(_BYTE **)a6;
    size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v38.__r_.__value_.__l.__size_;
    v37 = size;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v38;
    else
      v20 = (std::string *)v38.__r_.__value_.__r.__words[0];
    while (1)
    {
      v21 = *(unsigned __int8 *)(v13 + 71);
      if ((v21 & 0x80u) == 0)
        v22 = *(unsigned __int8 *)(v13 + 71);
      else
        v22 = *(_QWORD *)(v13 + 56);
      if (v22 != v18)
        goto LABEL_47;
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v13 + 48), a6, *(_QWORD *)(v13 + 56)))
          goto LABEL_47;
      }
      else if (*(_BYTE *)(v13 + 71))
      {
        v23 = 0;
        while (*(unsigned __int8 *)(v13 + v23 + 48) == a6[v23])
        {
          if (v21 == ++v23)
            goto LABEL_26;
        }
        goto LABEL_47;
      }
LABEL_26:
      if (*(char *)(v13 + 47) < 0)
      {
        if (!*(_QWORD *)(v13 + 32))
        {
LABEL_30:
          v24 = v20;
          v25 = v18;
          v26 = a2;
          v27 = v16;
          v28 = v10;
          v29 = a3;
          v30 = *(unsigned __int8 *)(v13 + 47);
          v31 = *(_QWORD *)(v13 + 32);
          if ((v30 & 0x80u) == 0)
            v32 = *(unsigned __int8 *)(v13 + 47);
          else
            v32 = *(_QWORD *)(v13 + 32);
          if (v32 == v37)
          {
            if ((v30 & 0x80) != 0)
            {
              v36 = v24;
              if (!memcmp(*(const void **)(v13 + 24), v24, v31))
                v15 |= v31 != 0;
              a3 = v29;
              v10 = v28;
              v16 = v27;
              a2 = v26;
              v18 = v25;
              v20 = v36;
            }
            else
            {
              a3 = v29;
              v10 = v28;
              v16 = v27;
              a2 = v26;
              v18 = v25;
              v20 = v24;
              if (*(_BYTE *)(v13 + 47))
              {
                v33 = 0;
                while (*(unsigned __int8 *)(v13 + v33 + 24) == v24->__r_.__value_.__s.__data_[v33])
                {
                  if (*(unsigned __int8 *)(v13 + 47) == ++v33)
                    goto LABEL_39;
                }
              }
              else
              {
LABEL_39:
                v15 |= v30 != 0;
              }
            }
          }
          else
          {
            a3 = v29;
            v10 = v28;
            v16 = v27;
            a2 = v26;
            v18 = v25;
            v20 = v24;
          }
          goto LABEL_44;
        }
      }
      else if (!*(_BYTE *)(v13 + 47))
      {
        goto LABEL_30;
      }
      v16 = 1;
LABEL_44:
      v13 += 144;
      if (v13 == v14)
        goto LABEL_47;
    }
  }
  LOBYTE(v16) = 0;
  LOBYTE(v15) = 0;
LABEL_47:
  if ((_DWORD)a2 && (_DWORD)a3)
  {
    if (*(_BYTE *)(v10 + 356))
    {
      a2 = 0;
    }
    else if ((*(_QWORD *)(v10 + 400) < 2uLL) | v16 & 1)
    {
      v34 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v34 = v38.__r_.__value_.__l.__size_;
      a2 = (v34 != 0) & v15;
    }
    else
    {
      a2 = 1;
    }
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  return a2;
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::mergePathToTree(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::string *v4;
  std::string *p_p;
  uint64_t *v6;
  unint64_t v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string::size_type v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  std::string::size_type v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  std::string *i;
  int v39;
  const std::string::value_type *v40;
  std::string::size_type size;
  std::string *v42;
  std::string::size_type v43;
  char v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  std::string *v50;
  std::string *v51;
  uint64_t *v52;
  std::string::size_type v53;
  std::string *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string *v59;
  __int128 v60;
  unint64_t v61;
  uint64_t *v62;
  __int128 v63;
  unint64_t v64;
  unint64_t v65;
  std::string *v66;
  std::string *v67;
  __int128 v68;
  std::string *v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  std::string::size_type v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  __int128 v92;
  std::string::size_type v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  std::string::size_type v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  std::string *v107;
  uint64_t v108;
  uint64_t *v110;
  std::string *v111;
  std::string *v112;
  std::string *v113;
  std::string v114;
  std::string v115;
  void *v116;
  char v117;
  void *__p;
  char v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[5];
  std::string v123;
  unint64_t v124;
  std::string *v125;
  unint64_t v126;
  std::string v127;
  std::string v128;
  unint64_t v129;
  uint64_t *v130;
  _QWORD v131[5];

  v2 = a2;
  v131[2] = *MEMORY[0x1E0C80C00];
  v124 = 0;
  v125 = 0;
  v4 = (std::string *)&v116;
  p_p = (std::string *)&__p;
  v126 = 0;
  v108 = a1 + 360;
  v6 = *(uint64_t **)(a1 + 328);
  v107 = (std::string *)(a1 + 24);
  while (*(_QWORD *)(a1 + 400))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * (*(_QWORD *)(a1 + 392) / 0xAAuLL))
       + 24 * (*(_QWORD *)(a1 + 392) % 0xAAuLL);
    if (*(char *)(v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v8 = *(_OWORD *)v7;
      v123.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&v123.__r_.__value_.__l.__data_ = v8;
    }
    std::deque<std::string>::pop_front(v108);
    v110 = v6;
    if (*(_QWORD *)(a1 + 400) || *(_DWORD *)(v2 + 288))
    {
      v9 = v125;
      if ((unint64_t)v125 >= v126)
      {
        v11 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v124, (__int128 *)&v123);
      }
      else
      {
        if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v125, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
        }
        else
        {
          v10 = *(_OWORD *)&v123.__r_.__value_.__l.__data_;
          v125->__r_.__value_.__r.__words[2] = v123.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
        }
        v11 = v9 + 1;
      }
      v125 = v11;
      if (v124 >= (unint64_t)&v11[-2])
        v25 = v124;
      else
        v25 = (uint64_t)&v11[-2];
      v112 = 0;
      v113 = 0;
      v111 = 0;
      v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      v128.__r_.__value_.__s.__data_[8] = 0;
      if (v11 == (std::string *)v25)
        goto LABEL_43;
      v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - v25) >> 3);
      if (v26 >= 0xAAAAAAAAAAAAAABLL)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v111 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v26);
      v112 = v111;
      v113 = &v111[v27];
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
      v131[0] = v111;
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
      v115.__r_.__value_.__l.__size_ = (std::string::size_type)v131;
      v115.__r_.__value_.__r.__words[2] = (std::string::size_type)&v127;
      LOBYTE(v116) = 0;
      v28 = v111;
      do
      {
        if (*(char *)(v25 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v28, *(const std::string::value_type **)v25, *(_QWORD *)(v25 + 8));
          v28 = (std::string *)v127.__r_.__value_.__r.__words[0];
        }
        else
        {
          v29 = *(_OWORD *)v25;
          v28->__r_.__value_.__r.__words[2] = *(_QWORD *)(v25 + 16);
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
        }
        v25 += 24;
        v127.__r_.__value_.__r.__words[0] = (std::string::size_type)++v28;
      }
      while ((std::string *)v25 != v11);
      LOBYTE(v116) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::basic_string<char16_t>>,std::basic_string<char16_t>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v115);
      v112 = v28;
      v30 = v111;
      if (v111 == v28)
      {
LABEL_43:
        std::string::basic_string[abi:ne180100]<0>(&v114, "");
      }
      else
      {
        if (SHIBYTE(v111->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v128, v111->__r_.__value_.__l.__data_, v111->__r_.__value_.__l.__size_);
        }
        else
        {
          v31 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
          v128.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v128.__r_.__value_.__l.__data_ = v31;
        }
        if (*(char *)(a1 + 47) < 0)
          std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)(a1 + 24), *(_QWORD *)(a1 + 32));
        else
          v127 = *v107;
        for (i = v30 + 1; i != v28; v6 = v110)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t)&v115, (const void **)&v128.__r_.__value_.__l.__data_, (const void **)&v127.__r_.__value_.__l.__data_);
          v39 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
          if (v39 >= 0)
            v40 = (const std::string::value_type *)i;
          else
            v40 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
          if (v39 >= 0)
            size = HIBYTE(i->__r_.__value_.__r.__words[2]);
          else
            size = i->__r_.__value_.__l.__size_;
          v42 = std::string::append(&v115, v40, size);
          v43 = v42->__r_.__value_.__r.__words[0];
          v131[0] = v42->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v131 + 7) = *(std::string::size_type *)((char *)&v42->__r_.__value_.__r.__words[1] + 7);
          v44 = HIBYTE(v42->__r_.__value_.__r.__words[2]);
          v42->__r_.__value_.__l.__size_ = 0;
          v42->__r_.__value_.__r.__words[2] = 0;
          v42->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
          v128.__r_.__value_.__r.__words[0] = v43;
          v128.__r_.__value_.__l.__size_ = v131[0];
          *(std::string::size_type *)((char *)&v128.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v131 + 7);
          *((_BYTE *)&v128.__r_.__value_.__s + 23) = v44;
          ++i;
        }
        v114 = v128;
        memset(&v128, 0, sizeof(v128));
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v127.__r_.__value_.__l.__data_);
          if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v128.__r_.__value_.__l.__data_);
        }
      }
      v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
      std::vector<std::string const>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
      v45 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(*(uint64_t **)(*(_QWORD *)(a1 + 336) + 16), (unsigned __int8 **)&v114);
      v46 = v45;
      v48 = v6[11];
      v47 = v6[12];
      v49 = v6 + 11;
      if (v47 != v48)
      {
        v50 = v4;
        v51 = p_p;
        v52 = v45;
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = HIBYTE(v123.__r_.__value_.__r.__words[2]);
        else
          v53 = v123.__r_.__value_.__l.__size_;
        if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &v123;
        else
          v54 = (std::string *)v123.__r_.__value_.__r.__words[0];
        do
        {
          v55 = *(unsigned __int8 *)(v47 - 73);
          if ((v55 & 0x80u) == 0)
            v56 = *(unsigned __int8 *)(v47 - 73);
          else
            v56 = *(_QWORD *)(v47 - 88);
          if (v56 == v53)
          {
            if ((v55 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v47 - 96), v54, *(_QWORD *)(v47 - 88)))
                goto LABEL_92;
            }
            else
            {
              if (!*(_BYTE *)(v47 - 73))
                goto LABEL_92;
              v57 = 0;
              while (*(unsigned __int8 *)(v47 + v57 - 96) == v54->__r_.__value_.__s.__data_[v57])
              {
                if (v55 == ++v57)
                  goto LABEL_92;
              }
            }
          }
          v47 -= 144;
        }
        while (v47 != v48);
        v47 = v48;
LABEL_92:
        v6 = v110;
        v46 = v52;
        p_p = v51;
        v4 = v50;
      }
      if (nlv4_inference_orchestrator::trees::PlyStateHandler::doMergePath(a1, v47 != v48, v46 != 0, a2, v49, &v123))
      {
        v6 = (uint64_t *)(v47 - 144);
        if (*(_QWORD *)(a1 + 400))
        {
          v58 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * (*(_QWORD *)(a1 + 392) / 0xAAuLL))
              + 24 * (*(_QWORD *)(a1 + 392) % 0xAAuLL);
          v59 = v125;
          if ((unint64_t)v125 >= v126)
          {
            v66 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v124, (__int128 *)v58);
          }
          else
          {
            if (*(char *)(v58 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v125, *(const std::string::value_type **)v58, *(_QWORD *)(v58 + 8));
            }
            else
            {
              v60 = *(_OWORD *)v58;
              v125->__r_.__value_.__r.__words[2] = *(_QWORD *)(v58 + 16);
              *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
            }
            v66 = v59 + 1;
          }
          v125 = v66;
          v2 = a2;
          std::deque<std::string>::pop_front(v108);
          v37 = 2;
LABEL_148:
          if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v114.__r_.__value_.__l.__data_);
          goto LABEL_150;
        }
        v37 = 2;
      }
      else
      {
        if (*(_QWORD *)(a1 + 400))
        {
          v61 = *(_QWORD *)(*(_QWORD *)(a1 + 368) + 8 * (*(_QWORD *)(a1 + 392) / 0xAAuLL))
              + 24 * (*(_QWORD *)(a1 + 392) % 0xAAuLL);
          v62 = v46;
          if (*(char *)(v61 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v127, *(const std::string::value_type **)v61, *(_QWORD *)(v61 + 8));
          }
          else
          {
            v63 = *(_OWORD *)v61;
            v127.__r_.__value_.__r.__words[2] = *(_QWORD *)(v61 + 16);
            *(_OWORD *)&v127.__r_.__value_.__l.__data_ = v63;
          }
          std::deque<std::string>::pop_front(v108);
          v67 = v125;
          if ((unint64_t)v125 >= v126)
          {
            v69 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v124, (__int128 *)&v127);
          }
          else
          {
            if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v125, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
            }
            else
            {
              v68 = *(_OWORD *)&v127.__r_.__value_.__l.__data_;
              v125->__r_.__value_.__r.__words[2] = v127.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v67->__r_.__value_.__l.__data_ = v68;
            }
            v69 = v67 + 1;
          }
          v125 = v69;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v115, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
          else
            v115 = v127;
          v4->__r_.__value_.__r.__words[0] = 0;
          v4->__r_.__value_.__l.__size_ = 0;
          v4->__r_.__value_.__r.__words[2] = 0;
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(p_p, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
          else
            *p_p = v123;
          memset(v122, 0, sizeof(v122));
          v120 = 0u;
          v121 = 0u;
          v70 = v6[13];
          v71 = v6[12];
          if (v71 >= v70)
          {
            v77 = 0x8E38E38E38E38E39 * ((uint64_t)(v71 - *v49) >> 4);
            v78 = v77 + 1;
            if (v77 + 1 > 0x1C71C71C71C71C7)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v79 = 0x8E38E38E38E38E39 * ((uint64_t)(v70 - *v49) >> 4);
            if (2 * v79 > v78)
              v78 = 2 * v79;
            if (v79 >= 0xE38E38E38E38E3)
              v80 = 0x1C71C71C71C71C7;
            else
              v80 = v78;
            v130 = v6 + 13;
            if (v80)
              v80 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v80);
            else
              v81 = 0;
            v82 = v80 + 144 * v77;
            v128.__r_.__value_.__r.__words[0] = v80;
            v128.__r_.__value_.__l.__size_ = v82;
            v129 = v80 + 144 * v81;
            v83 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            *(_QWORD *)(v82 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
            *(_OWORD *)v82 = v83;
            memset(&v115, 0, sizeof(v115));
            v84 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            *(_QWORD *)(v82 + 40) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
            *(_OWORD *)(v82 + 24) = v84;
            v4->__r_.__value_.__l.__size_ = 0;
            v4->__r_.__value_.__r.__words[2] = 0;
            v4->__r_.__value_.__r.__words[0] = 0;
            v85 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            *(_QWORD *)(v82 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
            *(_OWORD *)(v82 + 48) = v85;
            p_p->__r_.__value_.__r.__words[0] = 0;
            p_p->__r_.__value_.__l.__size_ = 0;
            p_p->__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)(v82 + 72) = v120;
            *(_QWORD *)(v82 + 96) = 0;
            *(_QWORD *)(v82 + 104) = 0;
            *(_QWORD *)(v82 + 88) = 0;
            *(_OWORD *)(v82 + 88) = v121;
            *(_QWORD *)(v82 + 104) = v122[0];
            v121 = 0uLL;
            v122[0] = 0;
            v86 = *(_OWORD *)&v122[3];
            *(_OWORD *)(v82 + 112) = *(_OWORD *)&v122[1];
            *(_OWORD *)(v82 + 128) = v86;
            v128.__r_.__value_.__r.__words[2] = v82 + 144;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v49, &v128);
            v76 = v110[12];
            std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v128);
            v6 = v110;
          }
          else
          {
            v72 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            *(_QWORD *)(v71 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
            *(_OWORD *)v71 = v72;
            memset(&v115, 0, sizeof(v115));
            v73 = v4->__r_.__value_.__r.__words[2];
            *(_OWORD *)(v71 + 24) = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            *(_QWORD *)(v71 + 40) = v73;
            v4->__r_.__value_.__l.__size_ = 0;
            v4->__r_.__value_.__r.__words[2] = 0;
            v4->__r_.__value_.__r.__words[0] = 0;
            v74 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            *(_QWORD *)(v71 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
            *(_OWORD *)(v71 + 48) = v74;
            p_p->__r_.__value_.__l.__size_ = 0;
            p_p->__r_.__value_.__r.__words[2] = 0;
            p_p->__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)(v71 + 72) = v120;
            *(_QWORD *)(v71 + 88) = 0;
            *(_QWORD *)(v71 + 96) = 0;
            *(_QWORD *)(v71 + 104) = 0;
            *(_OWORD *)(v71 + 88) = v121;
            *(_QWORD *)(v71 + 104) = v122[0];
            v121 = 0uLL;
            v122[0] = 0;
            v75 = *(_OWORD *)&v122[3];
            *(_OWORD *)(v71 + 112) = *(_OWORD *)&v122[1];
            *(_OWORD *)(v71 + 128) = v75;
            v76 = v71 + 144;
          }
          v6[12] = v76;
          v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          v2 = a2;
          if (v119 < 0)
            operator delete(__p);
          if (v117 < 0)
            operator delete(v116);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          v87 = v6[12];
          if (v62)
            *(_BYTE *)(a1 + 356) = 0;
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          v37 = 0;
          v6 = (uint64_t *)(v87 - 144);
          goto LABEL_148;
        }
        if (*(_DWORD *)(a2 + 288) != 1)
        {
          v37 = 3;
          v2 = a2;
          goto LABEL_148;
        }
        v64 = *(_QWORD *)(a2 + 96);
        v65 = *(_QWORD *)(a2 + 248);
        if (v65 > v64)
        {
          std::string::basic_string(&v127, *(const std::string **)(a1 + 320), *(_QWORD *)(a2 + 96), v65 - v64, (std::allocator<char> *)&v115);
          memset(&v115, 0, sizeof(v115));
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(v4, v127.__r_.__value_.__l.__data_, v127.__r_.__value_.__l.__size_);
          else
            *v4 = v127;
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(p_p, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
          else
            *p_p = v123;
          *(_QWORD *)&v120 = v64;
          *((_QWORD *)&v120 + 1) = v65;
          v122[0] = 0;
          v121 = 0uLL;
          v88 = *(_QWORD *)(a2 + 264);
          v122[1] = *(_QWORD *)(a2 + 112);
          v122[2] = v88;
          v89 = *(_QWORD *)(a2 + 280);
          v122[3] = *(_QWORD *)(a2 + 128);
          v122[4] = v89;
          v90 = v6[13];
          v91 = v6[12];
          if (v91 >= v90)
          {
            v97 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *v49) >> 4);
            v98 = v97 + 1;
            if (v97 + 1 > 0x1C71C71C71C71C7)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v99 = 0x8E38E38E38E38E39 * ((uint64_t)(v90 - *v49) >> 4);
            if (2 * v99 > v98)
              v98 = 2 * v99;
            if (v99 >= 0xE38E38E38E38E3)
              v100 = 0x1C71C71C71C71C7;
            else
              v100 = v98;
            v130 = v6 + 13;
            if (v100)
              v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v100);
            else
              v101 = 0;
            v102 = v100 + 144 * v97;
            v128.__r_.__value_.__r.__words[0] = v100;
            v128.__r_.__value_.__l.__size_ = v102;
            v129 = v100 + 144 * v101;
            v103 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            *(_QWORD *)(v102 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
            *(_OWORD *)v102 = v103;
            memset(&v115, 0, sizeof(v115));
            v104 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            *(_QWORD *)(v102 + 40) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
            *(_OWORD *)(v102 + 24) = v104;
            v4->__r_.__value_.__l.__size_ = 0;
            v4->__r_.__value_.__r.__words[2] = 0;
            v4->__r_.__value_.__r.__words[0] = 0;
            v105 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            *(_QWORD *)(v102 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
            *(_OWORD *)(v102 + 48) = v105;
            p_p->__r_.__value_.__r.__words[0] = 0;
            p_p->__r_.__value_.__l.__size_ = 0;
            p_p->__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)(v102 + 72) = v120;
            *(_QWORD *)(v102 + 96) = 0;
            *(_QWORD *)(v102 + 104) = 0;
            *(_QWORD *)(v102 + 88) = 0;
            *(_OWORD *)(v102 + 88) = v121;
            *(_QWORD *)(v102 + 104) = v122[0];
            v121 = 0uLL;
            v122[0] = 0;
            v106 = *(_OWORD *)&v122[3];
            *(_OWORD *)(v102 + 112) = *(_OWORD *)&v122[1];
            *(_OWORD *)(v102 + 128) = v106;
            v128.__r_.__value_.__r.__words[2] = v102 + 144;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v49, &v128);
            v96 = v110[12];
            std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v128);
            v6 = v110;
          }
          else
          {
            v92 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            *(_QWORD *)(v91 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
            *(_OWORD *)v91 = v92;
            memset(&v115, 0, sizeof(v115));
            v93 = v4->__r_.__value_.__r.__words[2];
            *(_OWORD *)(v91 + 24) = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
            *(_QWORD *)(v91 + 40) = v93;
            v4->__r_.__value_.__l.__size_ = 0;
            v4->__r_.__value_.__r.__words[2] = 0;
            v4->__r_.__value_.__r.__words[0] = 0;
            v94 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
            *(_QWORD *)(v91 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
            *(_OWORD *)(v91 + 48) = v94;
            p_p->__r_.__value_.__l.__size_ = 0;
            p_p->__r_.__value_.__r.__words[2] = 0;
            p_p->__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)(v91 + 72) = v120;
            *(_QWORD *)(v91 + 88) = 0;
            *(_QWORD *)(v91 + 96) = 0;
            *(_QWORD *)(v91 + 104) = 0;
            *(_OWORD *)(v91 + 88) = v121;
            *(_QWORD *)(v91 + 104) = v122[0];
            v121 = 0uLL;
            v122[0] = 0;
            v95 = *(_OWORD *)&v122[3];
            *(_OWORD *)(v91 + 112) = *(_OWORD *)&v122[1];
            *(_OWORD *)(v91 + 128) = v95;
            v96 = v91 + 144;
          }
          v6[12] = v96;
          v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
          v2 = a2;
          if (v119 < 0)
            operator delete(__p);
          if (v117 < 0)
            operator delete(v116);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v127.__r_.__value_.__l.__data_);
          v37 = 3;
          goto LABEL_148;
        }
        v37 = 3;
      }
      v2 = a2;
      goto LABEL_148;
    }
    if (*(char *)(v2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
    else
      v115 = *(std::string *)v2;
    v4->__r_.__value_.__r.__words[0] = 0;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(p_p, v123.__r_.__value_.__l.__data_, v123.__r_.__value_.__l.__size_);
    else
      *p_p = v123;
    memset(v122, 0, sizeof(v122));
    v120 = 0u;
    v121 = 0u;
    v12 = v6[13];
    v13 = v6[12];
    if (v13 >= v12)
    {
      v19 = v6[11];
      v20 = 0x8E38E38E38E38E39 * ((uint64_t)(v13 - v19) >> 4);
      v21 = v20 + 1;
      if (v20 + 1 > 0x1C71C71C71C71C7)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v22 = 0x8E38E38E38E38E39 * ((uint64_t)(v12 - v19) >> 4);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0xE38E38E38E38E3)
        v23 = 0x1C71C71C71C71C7;
      else
        v23 = v21;
      v130 = v6 + 13;
      if (v23)
        v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v23);
      else
        v24 = 0;
      v32 = v23 + 144 * v20;
      v128.__r_.__value_.__r.__words[0] = v23;
      v128.__r_.__value_.__l.__size_ = v32;
      v129 = v23 + 144 * v24;
      v33 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
      *(_QWORD *)(v32 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
      *(_OWORD *)v32 = v33;
      memset(&v115, 0, sizeof(v115));
      v34 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *(_QWORD *)(v32 + 40) = *((_QWORD *)&v4->__r_.__value_.__l + 2);
      *(_OWORD *)(v32 + 24) = v34;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      v35 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *(_QWORD *)(v32 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
      *(_OWORD *)(v32 + 48) = v35;
      p_p->__r_.__value_.__r.__words[0] = 0;
      p_p->__r_.__value_.__l.__size_ = 0;
      p_p->__r_.__value_.__r.__words[2] = 0;
      *(_OWORD *)(v32 + 72) = v120;
      *(_QWORD *)(v32 + 96) = 0;
      *(_QWORD *)(v32 + 104) = 0;
      *(_QWORD *)(v32 + 88) = 0;
      *(_OWORD *)(v32 + 88) = v121;
      *(_QWORD *)(v32 + 104) = v122[0];
      v121 = 0uLL;
      v122[0] = 0;
      v36 = *(_OWORD *)&v122[3];
      *(_OWORD *)(v32 + 112) = *(_OWORD *)&v122[1];
      *(_OWORD *)(v32 + 128) = v36;
      v128.__r_.__value_.__r.__words[2] = v32 + 144;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v6 + 11, &v128);
      v18 = v6[12];
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v128);
      v2 = a2;
    }
    else
    {
      v14 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
      *(_QWORD *)(v13 + 16) = *((_QWORD *)&v115.__r_.__value_.__l + 2);
      *(_OWORD *)v13 = v14;
      memset(&v115, 0, sizeof(v115));
      v15 = v4->__r_.__value_.__r.__words[2];
      *(_OWORD *)(v13 + 24) = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      *(_QWORD *)(v13 + 40) = v15;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      v4->__r_.__value_.__r.__words[0] = 0;
      v16 = *(_OWORD *)&p_p->__r_.__value_.__l.__data_;
      *(_QWORD *)(v13 + 64) = *((_QWORD *)&p_p->__r_.__value_.__l + 2);
      *(_OWORD *)(v13 + 48) = v16;
      p_p->__r_.__value_.__l.__size_ = 0;
      p_p->__r_.__value_.__r.__words[2] = 0;
      p_p->__r_.__value_.__r.__words[0] = 0;
      *(_OWORD *)(v13 + 72) = v120;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)(v13 + 96) = 0;
      *(_QWORD *)(v13 + 104) = 0;
      *(_OWORD *)(v13 + 88) = v121;
      *(_QWORD *)(v13 + 104) = v122[0];
      v121 = 0uLL;
      v122[0] = 0;
      v17 = *(_OWORD *)&v122[3];
      *(_OWORD *)(v13 + 112) = *(_OWORD *)&v122[1];
      *(_OWORD *)(v13 + 128) = v17;
      v18 = v13 + 144;
    }
    v6[12] = v18;
    v128.__r_.__value_.__r.__words[0] = (std::string::size_type)&v121;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v128);
    if (v119 < 0)
      operator delete(__p);
    if (v117 < 0)
      operator delete(v116);
    if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v115.__r_.__value_.__l.__data_);
    v37 = 3;
LABEL_150:
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    if (v37 == 3)
      break;
  }
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
}

void sub_1C22C7934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a28);
  if (*(char *)(v39 - 169) < 0)
    operator delete(*(void **)(v39 - 192));
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v39 - 217) < 0)
    operator delete(*(void **)(v39 - 240));
  *(_QWORD *)(v39 - 240) = v39 - 216;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 240));
  _Unwind_Resume(a1);
}

void std::deque<std::string>::pop_front(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = *(_QWORD *)(a1 + 32);
  }
  v4 = *(_QWORD *)(a1 + 40) - 1;
  v5 = v2 + 1;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  if (v5 >= 0x154)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
}

uint64_t *std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t *v2;
  char v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;

  v2 = a1;
  if (a1)
  {
    v3 = *((_BYTE *)a2 + 23);
    if (v3 >= 0)
      v4 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v4 = a2[1];
    if (v3 >= 0)
      v5 = (unsigned __int8 *)a2;
    else
      v5 = *a2;
    do
    {
      v6 = *((unsigned __int8 *)v2 + 39);
      if ((v6 & 0x80u) == 0)
        v7 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 39);
      else
        v7 = (unsigned __int8 *)v2[3];
      if (v7 == v4)
      {
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v2[2], v5, v2[3]))
            return v2;
        }
        else
        {
          if (!*((_BYTE *)v2 + 39))
            return v2;
          v8 = 0;
          while (*((unsigned __int8 *)v2 + v8 + 16) == v5[v8])
          {
            if (v6 == ++v8)
              return v2;
          }
        }
      }
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return v2;
}

uint64_t nlv4_inference_orchestrator::trees::PlyStateHandler::resetPath(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  uint64_t result;

  *((_BYTE *)this + 356) = 0;
  result = std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>((uint64_t)this + 360);
  if (*((_BYTE *)this + 352))
    *((_BYTE *)this + 352) = 0;
  return result;
}

uint64_t std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 32);
  v3 = *(_QWORD *)(result + 8);
  v4 = *(_QWORD *)(result + 16);
  if (v4 == v3)
  {
    v5 = 0;
    v9 = 0;
    v6 = (uint64_t *)(result + 40);
    v7 = *(_QWORD *)(result + 40);
    v8 = (uint64_t *)(v3 + 8 * ((v2 + v7) / 0xAA));
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
    v6 = (uint64_t *)(result + 40);
    v7 = *(_QWORD *)(result + 40);
    v8 = (uint64_t *)(v3 + 8 * ((v2 + v7) / 0xAA));
    result = *v8;
    v9 = *v8 + 24 * ((v2 + v7) % 0xAA);
  }
  if (v9 != v5)
  {
    v10 = (uint64_t *)(v3 + 8 * (v2 / 0xAA));
    result = 170 * (v8 - v10) - 0x5555555555555555 * ((uint64_t)(v9 - *v8) >> 3);
    v11 = *v10;
    v12 = (uint64_t)(v5 - *v10) >> 3;
    v13 = result + 0x5555555555555555 * v12;
    if (v13 >= 1)
    {
      v14 = v11 + 24 * (v2 % 0xAA);
      if (v4 == v3)
        v15 = 0;
      else
        v15 = v14;
      if (v5 == v15)
        v16 = 0;
      else
        v16 = 0x5555555555555555 * ((uint64_t)(v15 - v11) >> 3) - 0x5555555555555555 * v12;
      v20 = v10;
      v21 = v15;
      std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](&v20, v16);
      v17 = v21;
      if (v21 != v9)
      {
        v18 = v20;
        do
        {
          if (*(char *)(v17 + 23) < 0)
            operator delete(*(void **)v17);
          v17 += 24;
          if (v17 - *v18 == 4080)
          {
            v19 = v18[1];
            ++v18;
            v17 = v19;
          }
        }
        while (v17 != v9);
        v7 = *v6;
      }
      *v6 = v7 - v13;
      do
        result = std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100](v1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(std::string *result, std::string *__str, std::string *a3, std::string **a4, std::string *this)
{
  std::string **v6;
  const std::string *v7;
  _QWORD *words;
  std::string *v9;
  std::string *v10;
  int64_t v11;
  const std::string *v12;
  uint64_t v13;
  std::string *v14;
  std::string *v15;

  v6 = a4;
  v7 = __str;
  words = result->__r_.__value_.__r.__words;
  if (__str == a3)
  {
    v9 = __str;
  }
  else
  {
    v9 = a3;
    v10 = *a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)this + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3)) < v11)
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3);
      if (v11)
      {
        v12 = v7 + v11;
        v13 = 24 * v11;
        do
        {
          result = std::string::operator=(this++, v7++);
          v13 -= 24;
        }
        while (v13);
        v7 = v12;
      }
      if (v7 == v9)
        break;
      v14 = v6[1];
      ++v6;
      v10 = v14;
      this = v14;
    }
    if (&(*v6)[170] == this)
    {
      v15 = v6[1];
      ++v6;
      this = v15;
    }
  }
  *words = v9;
  words[1] = v6;
  words[2] = this;
  return result;
}

uint64_t **std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  if (a2)
  {
    v2 = *result;
    v3 = ((uint64_t)result[1] - **result) / 24 + a2;
    if ((uint64_t)v3 < 1)
    {
      v6 = 169 - v3;
      v7 = &v2[-(v6 / 0xAA)];
      *result = v7;
      v4 = *v7;
      v5 = 169 - v6 % 0xAA;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA];
      v5 = v3 % 0xAA;
    }
    result[1] = (uint64_t *)(v4 + 24 * v5);
  }
  return result;
}

BOOL std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v1 = a1[2];
  if (v1 == v2)
    v3 = 0;
  else
    v3 = 170 * ((v1 - v2) >> 3) - 1;
  v4 = v3 - (a1[5] + a1[4]);
  if (v4 >= 0x154)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
  return v4 > 0x153;
}

void std::deque<std::string>::__add_back_capacity(_QWORD *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  _QWORD *j;
  char *v57;
  __int128 v58;
  uint64_t i;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  int64_t v72;
  char *v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  void *v84;
  __int128 v85;
  __int128 v86;
  _QWORD *v87;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  v5 = (v3 == (char *)a1[1]) + a2;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = a1[4];
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v9 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          *(_QWORD *)&v85 = operator new(0xFF0uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v85);
          if (!--v9)
            goto LABEL_70;
        }
        for (i = 0; i != v9; ++i)
        {
          *(_QWORD *)&v85 = operator new(0xFF0uLL);
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v85);
          if (a1[2] - a1[1] == 8)
            v60 = 169;
          else
            v60 = 170;
          v61 = v60 + a1[4];
          a1[4] = v61;
        }
        v8 += v9;
      }
      else
      {
LABEL_70:
        v61 = a1[4];
      }
      a1[4] = v61 - 170 * v8;
      if (v8)
      {
        v62 = (char *)a1[2];
        do
        {
          v63 = (_QWORD *)a1[1];
          v66 = *v63;
          v64 = (char *)(v63 + 1);
          v65 = v66;
          a1[1] = v64;
          if (v62 == (char *)a1[3])
          {
            v67 = (uint64_t)&v64[-*a1];
            if ((unint64_t)v64 <= *a1)
            {
              if (v62 == (char *)*a1)
                v74 = 1;
              else
                v74 = (uint64_t)&v62[-*a1] >> 2;
              v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
              v77 = &v75[8 * (v74 >> 2)];
              v78 = (uint64_t *)a1[1];
              v62 = v77;
              v79 = a1[2] - (_QWORD)v78;
              if (v79)
              {
                v62 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
                v80 = 8 * (v79 >> 3);
                v81 = &v75[8 * (v74 >> 2)];
                do
                {
                  v82 = *v78++;
                  *(_QWORD *)v81 = v82;
                  v81 += 8;
                  v80 -= 8;
                }
                while (v80);
              }
              v83 = (char *)*a1;
              *a1 = v75;
              a1[1] = v77;
              a1[2] = v62;
              a1[3] = &v75[8 * v76];
              if (v83)
              {
                operator delete(v83);
                v62 = (char *)a1[2];
              }
            }
            else
            {
              v68 = v67 >> 3;
              v22 = v67 >> 3 < -1;
              v69 = (v67 >> 3) + 2;
              if (v22)
                v70 = v69;
              else
                v70 = v68 + 1;
              v71 = &v64[-8 * (v70 >> 1)];
              v72 = v62 - v64;
              if (v62 != v64)
              {
                memmove(&v64[-8 * (v70 >> 1)], v64, v62 - v64);
                v62 = (char *)a1[1];
              }
              v73 = &v62[-8 * (v70 >> 1)];
              v62 = &v71[v72];
              a1[1] = v73;
              a1[2] = &v71[v72];
            }
          }
          *(_QWORD *)v62 = v65;
          v62 = (char *)(a1[2] + 8);
          a1[2] = v62;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = (char *)(v9 + v11);
      else
        v13 = (char *)v12;
      v14 = v11 - v8;
      v87 = a1 + 3;
      if (v13)
        v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>((unint64_t)v13);
      else
        v15 = 0;
      v38 = -170 * v8;
      *(_QWORD *)&v85 = v13;
      *((_QWORD *)&v85 + 1) = &v13[8 * v14];
      *(_QWORD *)&v86 = *((_QWORD *)&v85 + 1);
      *((_QWORD *)&v86 + 1) = &v13[8 * v15];
      do
      {
        v84 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v85, &v84);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v86;
        do
        {
          if (v40 == *((char **)&v86 + 1))
          {
            v41 = (char *)*((_QWORD *)&v85 + 1);
            v42 = (void *)v85;
            if (*((_QWORD *)&v85 + 1) <= (unint64_t)v85)
            {
              if (v40 == (char *)v85)
                v48 = 1;
              else
                v48 = (uint64_t)&v40[-v85] >> 2;
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v48);
              v52 = v40 - v41;
              v51 = v40 == v41;
              v40 = &v49[8 * (v48 >> 2)];
              if (!v51)
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *(_QWORD *)v41;
                  v41 += 8;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              *(_QWORD *)&v85 = v49;
              *((_QWORD *)&v85 + 1) = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v86 = v40;
              *((_QWORD *)&v86 + 1) = &v49[8 * v50];
              if (v42)
                operator delete(v42);
            }
            else
            {
              v43 = (uint64_t)(*((_QWORD *)&v85 + 1) - v85) >> 3;
              if (v43 >= -1)
                v44 = v43 + 1;
              else
                v44 = v43 + 2;
              v45 = *((_QWORD *)&v85 + 1) - 8 * (v44 >> 1);
              v46 = &v40[-*((_QWORD *)&v85 + 1)];
              if (v40 != *((char **)&v85 + 1))
              {
                memmove((void *)(*((_QWORD *)&v85 + 1) - 8 * (v44 >> 1)), *((const void **)&v85 + 1), (size_t)&v40[-*((_QWORD *)&v85 + 1)]);
                v40 = v41;
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v46[v45];
              *((_QWORD *)&v85 + 1) = v47;
              *(_QWORD *)&v86 = &v46[v45];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v86 + 8);
          *(_QWORD *)&v86 = v86 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      for (j = (_QWORD *)a1[2];
            j != (_QWORD *)a1[1];
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)&v85, j))
      {
        --j;
      }
      v57 = (char *)*a1;
      v58 = v86;
      *(_OWORD *)a1 = v85;
      *((_OWORD *)a1 + 1) = v58;
      a1[4] += v38;
      if (v57)
        operator delete(v57);
    }
  }
}

void sub_1C22C84C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::trees::PlyStateHandler::isFinished(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  return 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 39) + 8) - **((_QWORD **)this + 39)) >> 4) <= *((unsigned int *)this + 86);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::readTag(nlv4_inference_orchestrator::trees::PlyStateHandler *this, uint64_t a2)
{
  unsigned __int8 **v4;
  uint64_t v5;
  int v6;
  int v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  char *v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  char *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  char *v54;
  int v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  _QWORD *v62;
  char *v63;
  unsigned __int8 *v64;
  int v65;
  char *v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  std::string *p_p;
  char *v75;
  int64_t v76;
  int64_t size;
  char *v78;
  char *v79;
  std::string::size_type v80;
  char *v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  BOOL v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  int64_t v98;
  char *v99;
  int v100;
  std::string *v101;
  int64_t v102;
  char *v103;
  char *v104;
  char *v105;
  _BYTE *v106;
  int64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  std::string::size_type v111;
  int v112;
  void *v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  _QWORD *i;
  void *v119;
  __int128 v120;
  __int128 v121;
  unint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  void *v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  std::string *v137;
  __int128 v138;
  uint64_t v139;
  size_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  unsigned __int8 *v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  unsigned __int8 *v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  unsigned __int8 *v154;
  unsigned __int8 *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  uint64_t v161;
  const void *v162;
  unsigned __int8 *v163;
  int v164;
  BOOL v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unsigned __int8 *v171;
  uint64_t v172;
  char *v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  unsigned __int8 *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  int v186;
  int v187;
  int v188;
  int v189;
  char v190;
  uint64_t v191;
  _BYTE *v192;
  int v193;
  char *v194;
  int64_t v195;
  char *v196;
  char *v197;
  std::string::size_type v198;
  int v199;
  void *v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  int64_t v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  std::string __p;
  void *v219;
  _BYTE v220[32];
  char *v221;

  if (*((_BYTE *)this + 357))
  {
    v4 = (unsigned __int8 **)((char *)this + 96);
    v5 = *(unsigned __int8 *)(a2 + 23);
    v6 = (char)v5;
    v7 = *(unsigned __int8 *)(a2 + 23);
    v8 = *(_QWORD *)(a2 + 8);
    if ((v5 & 0x80u) == 0)
      v9 = *(unsigned __int8 *)(a2 + 23);
    else
      v9 = *(_QWORD *)(a2 + 8);
    v10 = *((unsigned __int8 *)this + 119);
    v11 = (char)v10;
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)this + 13);
    if (v9 == v10)
    {
      if (v11 >= 0)
        v12 = (unsigned __int8 *)this + 96;
      else
        v12 = *v4;
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)a2, v12, *(_QWORD *)(a2 + 8)))
          goto LABEL_112;
      }
      else
      {
        if (!v7)
          goto LABEL_112;
        v13 = (unsigned __int8 *)a2;
        v14 = *(unsigned __int8 *)(a2 + 23);
        while (*v13 == *v12)
        {
          ++v13;
          ++v12;
          if (!--v14)
            goto LABEL_112;
        }
      }
    }
    v27 = *((unsigned __int8 *)this + 143);
    v28 = (char)v27;
    if ((v27 & 0x80u) != 0)
      v27 = *((_QWORD *)this + 16);
    if (v9 == v27)
    {
      if (v28 >= 0)
        v29 = (unsigned __int8 *)this + 120;
      else
        v29 = (unsigned __int8 *)*((_QWORD *)this + 15);
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)a2, v29, v8))
          goto LABEL_112;
      }
      else
      {
        if (!v7)
          goto LABEL_112;
        v30 = (unsigned __int8 *)a2;
        v31 = v5;
        while (*v30 == *v29)
        {
          ++v30;
          ++v29;
          if (!--v31)
            goto LABEL_112;
        }
      }
    }
    v32 = *((unsigned __int8 *)this + 215);
    v33 = (char)v32;
    if ((v32 & 0x80u) != 0)
      v32 = *((_QWORD *)this + 25);
    if (v9 == v32)
    {
      if (v33 >= 0)
        v34 = (unsigned __int8 *)this + 192;
      else
        v34 = (unsigned __int8 *)*((_QWORD *)this + 24);
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)a2, v34, v8))
          goto LABEL_112;
      }
      else
      {
        if (!v7)
          goto LABEL_112;
        v35 = (unsigned __int8 *)a2;
        v36 = v5;
        while (*v35 == *v34)
        {
          ++v35;
          ++v34;
          if (!--v36)
            goto LABEL_112;
        }
      }
    }
    v41 = *((unsigned __int8 *)this + 167);
    v42 = (char)v41;
    if ((v41 & 0x80u) != 0)
      v41 = *((_QWORD *)this + 19);
    if (v9 == v41)
    {
      if (v42 >= 0)
        v43 = (unsigned __int8 *)this + 144;
      else
        v43 = (unsigned __int8 *)*((_QWORD *)this + 18);
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)a2, v43, v8))
          goto LABEL_112;
      }
      else
      {
        if (!v7)
          goto LABEL_112;
        v44 = (unsigned __int8 *)a2;
        while (*v44 == *v43)
        {
          ++v44;
          ++v43;
          if (!--v5)
            goto LABEL_112;
        }
      }
    }
    v45 = *(unsigned __int8 **)a2;
    if (v6 >= 0)
      v45 = (unsigned __int8 *)a2;
    v46 = (char *)*((_QWORD *)this + 6);
    v47 = *((char *)this + 71);
    if (v47 >= 0)
      v46 = (char *)this + 48;
    v48 = *((_QWORD *)this + 7);
    if (v47 >= 0)
      v48 = *((unsigned __int8 *)this + 71);
    if (v9 && v48)
    {
      v49 = v48 - 1;
      v50 = v9 - 1;
      v51 = v46;
      v52 = v45;
      while (*v52 == *v51)
      {
        ++v51;
        if (v50)
        {
          ++v52;
          v53 = v49--;
          --v50;
          if (v53)
            continue;
        }
        goto LABEL_98;
      }
    }
    else
    {
      v51 = v46;
LABEL_98:
      if (v51 == &v46[v48])
        goto LABEL_112;
    }
    v54 = (char *)this + 288;
    v55 = *((char *)this + 311);
    v56 = v55 < 0;
    if (v55 < 0)
      v54 = (char *)*((_QWORD *)this + 36);
    v57 = *((unsigned __int8 *)this + 311);
    if (v56)
      v57 = *((_QWORD *)this + 37);
    if (v9 && v57)
    {
      v58 = v57 - 1;
      v59 = v9 - 1;
      v60 = v54;
      while (*v45 == *v60)
      {
        ++v60;
        if (v59)
        {
          ++v45;
          v61 = v58--;
          --v59;
          if (v61)
            continue;
        }
        goto LABEL_111;
      }
      goto LABEL_230;
    }
    v60 = v54;
LABEL_111:
    if (v60 != &v54[v57])
    {
LABEL_230:
      v139 = *(unsigned __int8 *)(a2 + 23);
      v140 = *(_QWORD *)(a2 + 8);
      if ((v139 & 0x80u) == 0)
        v141 = *(unsigned __int8 *)(a2 + 23);
      else
        v141 = *(_QWORD *)(a2 + 8);
      v142 = *((unsigned __int8 *)this + 119);
      v143 = (char)v142;
      if ((v142 & 0x80u) != 0)
        v142 = *((_QWORD *)this + 13);
      if (v141 != v142)
        goto LABEL_246;
      if (v143 >= 0)
        v144 = (unsigned __int8 *)this + 96;
      else
        v144 = *v4;
      if ((v139 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, v144, *(_QWORD *)(a2 + 8)))
          goto LABEL_246;
      }
      else if (*(_BYTE *)(a2 + 23))
      {
        v145 = (unsigned __int8 *)a2;
        v146 = *(unsigned __int8 *)(a2 + 23);
        while (*v145 == *v144)
        {
          ++v145;
          ++v144;
          if (!--v146)
            goto LABEL_258;
        }
LABEL_246:
        v147 = *((unsigned __int8 *)this + 143);
        v148 = (char)v147;
        if ((v147 & 0x80u) != 0)
          v147 = *((_QWORD *)this + 16);
        if (v141 != v147)
          goto LABEL_260;
        if (v148 >= 0)
          v149 = (unsigned __int8 *)this + 120;
        else
          v149 = (unsigned __int8 *)*((_QWORD *)this + 15);
        if ((v139 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v149, v140))
            goto LABEL_260;
        }
        else if ((_DWORD)v139)
        {
          v150 = (unsigned __int8 *)a2;
          v151 = v139;
          while (*v150 == *v149)
          {
            ++v150;
            ++v149;
            if (!--v151)
              goto LABEL_272;
          }
LABEL_260:
          v152 = *((unsigned __int8 *)this + 215);
          v153 = (char)v152;
          if ((v152 & 0x80u) != 0)
            v152 = *((_QWORD *)this + 25);
          if (v141 == v152)
          {
            if (v153 >= 0)
              v154 = (unsigned __int8 *)this + 192;
            else
              v154 = (unsigned __int8 *)*((_QWORD *)this + 24);
            if ((v139 & 0x80) == 0)
            {
              if ((_DWORD)v139)
              {
                v155 = (unsigned __int8 *)a2;
                v156 = v139;
                while (*v155 == *v154)
                {
                  ++v155;
                  ++v154;
                  if (!--v156)
                    goto LABEL_286;
                }
                goto LABEL_274;
              }
LABEL_286:
              *((_BYTE *)this + 356) = 1;
              return;
            }
            if (!memcmp(*(const void **)a2, v154, v140))
              goto LABEL_286;
          }
LABEL_274:
          v157 = *((unsigned __int8 *)this + 191);
          v158 = (char)v157;
          if ((v157 & 0x80u) != 0)
            v157 = *((_QWORD *)this + 22);
          if (v141 == v157)
          {
            if (v158 >= 0)
              v159 = (unsigned __int8 *)this + 168;
            else
              v159 = (unsigned __int8 *)*((_QWORD *)this + 21);
            if ((v139 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)a2, v159, v140))
                return;
            }
            else
            {
              if (!(_DWORD)v139)
                return;
              v160 = (unsigned __int8 *)a2;
              v161 = v139;
              while (*v160 == *v159)
              {
                ++v160;
                ++v159;
                if (!--v161)
                  return;
              }
            }
          }
          v162 = *(const void **)a2;
          if ((v139 & 0x80u) == 0)
            v163 = (unsigned __int8 *)a2;
          else
            v163 = *(unsigned __int8 **)a2;
          v164 = *((char *)this + 311);
          v165 = v164 < 0;
          v166 = (char *)*((_QWORD *)this + 36);
          if (v164 >= 0)
            v166 = (char *)this + 288;
          v167 = *((unsigned __int8 *)this + 311);
          if (v165)
            v167 = *((_QWORD *)this + 37);
          if (v141 && v167)
          {
            v168 = v167 - 1;
            v169 = v141 - 1;
            v170 = v166;
            v171 = v163;
            while (*v171 == *v170)
            {
              ++v170;
              if (v169)
              {
                ++v171;
                v172 = v168--;
                --v169;
                if (v172)
                  continue;
              }
              goto LABEL_303;
            }
LABEL_304:
            v173 = (char *)*((_QWORD *)this + 9);
            v174 = *((char *)this + 95);
            if (v174 >= 0)
              v173 = (char *)this + 72;
            v175 = *((_QWORD *)this + 10);
            if (v174 >= 0)
              v175 = *((unsigned __int8 *)this + 95);
            if (v141 && v175)
            {
              v176 = v175 - 1;
              v177 = v141 - 1;
              v178 = v173;
              while (*v163 == *v178)
              {
                ++v178;
                if (v177)
                {
                  ++v163;
                  v179 = v176--;
                  --v177;
                  if (v179)
                    continue;
                }
                goto LABEL_316;
              }
              goto LABEL_317;
            }
            v178 = v173;
LABEL_316:
            if (v178 != &v173[v175])
            {
LABEL_317:
              v180 = *((_QWORD *)this + 34);
              if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)this + 33), v180, (unsigned __int8 **)a2) != v180)return;
              v181 = *((unsigned __int8 *)this + 167);
              v182 = (char)v181;
              if ((v181 & 0x80u) != 0)
                v181 = *((_QWORD *)this + 19);
              if (v141 == v181)
              {
                if (v182 >= 0)
                  v183 = (unsigned __int8 *)this + 144;
                else
                  v183 = (unsigned __int8 *)*((_QWORD *)this + 18);
                if ((v139 & 0x80) != 0)
                {
                  if (!memcmp(v162, v183, v140))
                    return;
                }
                else
                {
                  if (!(_DWORD)v139)
                    return;
                  v184 = v139 - 1;
                  v185 = (unsigned __int8 *)a2;
                  do
                  {
                    v187 = *v185++;
                    v186 = v187;
                    v189 = *v183++;
                    v188 = v189;
                    v86 = v184-- != 0;
                    v190 = v86;
                  }
                  while (v186 == v188 && (v190 & 1) != 0);
                  if (v186 == v188)
                    return;
                }
              }
              if (!boost::algorithm::starts_with<std::string,std::string>((unsigned __int8 *)a2, (unsigned __int8 *)this + 48))nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments((uint64_t)this, (uint64_t *)a2);
              return;
            }
            return;
          }
          v170 = v166;
LABEL_303:
          if (v170 != &v166[v167])
            goto LABEL_304;
          if ((v139 & 0x80) != 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v220, *(const std::string::value_type **)a2, v140);
          }
          else
          {
            *(_OWORD *)v220 = *(_OWORD *)a2;
            *(_QWORD *)&v220[16] = *(_QWORD *)(a2 + 16);
          }
          v191 = v220[23];
          if (v220[23] >= 0)
            v192 = v220;
          else
            v192 = *(_BYTE **)v220;
          if (v220[23] < 0)
            v191 = *(_QWORD *)&v220[8];
          v193 = *((char *)this + 311);
          if (v193 >= 0)
            v194 = (char *)this + 288;
          else
            v194 = (char *)*((_QWORD *)this + 36);
          if (v193 >= 0)
            v195 = *((unsigned __int8 *)this + 311);
          else
            v195 = *((_QWORD *)this + 37);
          if (v195)
          {
            v196 = &v192[v191];
            if (v191 >= v195)
            {
              v199 = *v194;
              v200 = v192;
              do
              {
                v201 = v191 - v195;
                if (v201 == -1)
                  break;
                v202 = (char *)memchr(v200, v199, v201 + 1);
                if (!v202)
                  break;
                v197 = v202;
                if (!memcmp(v202, v194, v195))
                  goto LABEL_351;
                v200 = v197 + 1;
                v191 = v196 - (v197 + 1);
              }
              while (v191 >= v195);
            }
            v197 = v196;
LABEL_351:
            if (v197 == v196)
              v198 = -1;
            else
              v198 = v197 - v192;
          }
          else
          {
            v198 = 0;
          }
          std::string::erase((std::string *)v220, v198, v195);
          nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments((uint64_t)this, (uint64_t *)v220);
LABEL_356:
          if ((v220[23] & 0x80000000) != 0)
            operator delete(*(void **)v220);
          return;
        }
LABEL_272:
        *((_DWORD *)this + 87) = *((_DWORD *)this + 86);
        *((_BYTE *)this + 352) = 1;
        return;
      }
LABEL_258:
      ++*((_DWORD *)this + 86);
      return;
    }
LABEL_112:
    if (!*((_QWORD *)this + 50))
      goto LABEL_230;
    v62 = (_QWORD *)((char *)this + 360);
    v63 = (char *)*((_QWORD *)this + 6);
    if (v6 >= 0)
      v64 = (unsigned __int8 *)a2;
    else
      v64 = *(unsigned __int8 **)a2;
    v65 = *((char *)this + 71);
    if (v65 >= 0)
      v66 = (char *)this + 48;
    else
      v66 = (char *)*((_QWORD *)this + 6);
    v67 = *((_QWORD *)this + 7);
    v68 = *((unsigned __int8 *)this + 71);
    if (v65 >= 0)
      v69 = *((unsigned __int8 *)this + 71);
    else
      v69 = *((_QWORD *)this + 7);
    if (v9 && v69)
    {
      v70 = v69 - 1;
      v71 = v9 - 1;
      v72 = v66;
      while (*v64 == *v72)
      {
        ++v72;
        if (v71)
        {
          ++v64;
          v73 = v70--;
          --v71;
          if (v73)
            continue;
        }
        goto LABEL_130;
      }
      goto LABEL_228;
    }
    v72 = v66;
LABEL_130:
    if (v72 != &v66[v69])
      goto LABEL_228;
    if ((v7 & 0x80) != 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, v8);
      v68 = *((unsigned __int8 *)this + 71);
      v63 = (char *)*((_QWORD *)this + 6);
      v67 = *((_QWORD *)this + 7);
      LOBYTE(v65) = *((_BYTE *)this + 71);
    }
    else
    {
      __p = *(std::string *)a2;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((v65 & 0x80u) == 0)
      v75 = (char *)this + 48;
    else
      v75 = v63;
    if ((v65 & 0x80u) == 0)
      v76 = v68;
    else
      v76 = v67;
    if (v76)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      v78 = (char *)p_p + size;
      if (size >= v76)
      {
        v100 = *v75;
        v101 = p_p;
        do
        {
          v102 = size - v76;
          if (v102 == -1)
            break;
          v103 = (char *)memchr(v101, v100, v102 + 1);
          if (!v103)
            break;
          v79 = v103;
          if (!memcmp(v103, v75, v76))
            goto LABEL_149;
          v101 = (std::string *)(v79 + 1);
          size = v78 - (v79 + 1);
        }
        while (size >= v76);
      }
      v79 = v78;
LABEL_149:
      if (v79 == v78)
        v80 = -1;
      else
        v80 = v79 - (char *)p_p;
    }
    else
    {
      v80 = 0;
    }
    std::string::erase(&__p, v80, v76);
    v81 = (char *)*((_QWORD *)this + 46);
    v82 = (char *)*((_QWORD *)this + 47);
    v83 = (v82 - v81) >> 3;
    if (v82 == v81)
      v84 = 0;
    else
      v84 = 170 * v83 - 1;
    v85 = *((_QWORD *)this + 49);
    if (v84 != *((_QWORD *)this + 50) + v85)
    {
LABEL_220:
      if (v82 == v81)
      {
        v137 = 0;
      }
      else
      {
        v136 = *((_QWORD *)this + 50) + *((_QWORD *)this + 49);
        v137 = (std::string *)(*(_QWORD *)&v81[8 * (v136 / 0xAA)] + 24 * (v136 % 0xAA));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v137, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v138 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v137->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137->__r_.__value_.__l.__data_ = v138;
      }
      ++*((_QWORD *)this + 50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
LABEL_228:
      nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree(this);
      *((_BYTE *)this + 356) = 0;
      std::deque<std::string>::__assign_with_size_random_access[abi:ne180100]<std::string const*>((uint64_t)this + 360);
      if (*((_BYTE *)this + 352))
        *((_BYTE *)this + 352) = 0;
      goto LABEL_230;
    }
    v86 = v85 >= 0xAA;
    v87 = v85 - 170;
    if (v86)
    {
      *((_QWORD *)this + 49) = v87;
      v90 = *(_QWORD *)v81;
      v88 = v81 + 8;
      v89 = v90;
      *((_QWORD *)this + 46) = v88;
      if (v82 != *((char **)this + 48))
        goto LABEL_218;
      v91 = (uint64_t)&v88[-*v62];
      if ((unint64_t)v88 > *v62)
      {
        v92 = v91 >> 3;
        v56 = v91 >> 3 < -1;
        v93 = (v91 >> 3) + 2;
        if (v56)
          v94 = v93;
        else
          v94 = v92 + 1;
        v95 = -(v94 >> 1);
        v96 = v94 >> 1;
        v97 = &v88[-8 * v96];
        v98 = v82 - v88;
        if (v82 != v88)
        {
          memmove(&v88[-8 * v96], v88, v82 - v88);
          v82 = (char *)*((_QWORD *)this + 46);
        }
        v99 = &v82[8 * v95];
        v82 = &v97[v98];
        goto LABEL_167;
      }
      if (v82 == (char *)*v62)
        v122 = 1;
      else
        v122 = (uint64_t)&v82[-*v62] >> 2;
      v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v122);
      v124 = &v123[8 * (v122 >> 2)];
      v126 = &v123[8 * v125];
      v127 = (uint64_t *)*((_QWORD *)this + 46);
      v82 = v124;
      v128 = *((_QWORD *)this + 47) - (_QWORD)v127;
      if (v128)
      {
        v82 = &v124[v128 & 0xFFFFFFFFFFFFFFF8];
        v129 = 8 * (v128 >> 3);
        v130 = &v123[8 * (v122 >> 2)];
        do
        {
          v131 = *v127++;
          *(_QWORD *)v130 = v131;
          v130 += 8;
          v129 -= 8;
        }
        while (v129);
      }
    }
    else
    {
      v104 = (char *)*((_QWORD *)this + 48);
      v105 = (char *)*((_QWORD *)this + 45);
      if (v83 >= (v104 - v105) >> 3)
      {
        if (v104 == v105)
          v116 = 1;
        else
          v116 = (v104 - v105) >> 2;
        v221 = (char *)this + 384;
        *(_QWORD *)v220 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v116);
        *(_QWORD *)&v220[8] = *(_QWORD *)v220 + 8 * v83;
        *(_QWORD *)&v220[16] = *(_QWORD *)&v220[8];
        *(_QWORD *)&v220[24] = *(_QWORD *)v220 + 8 * v117;
        v219 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v220, &v219);
        for (i = (_QWORD *)*((_QWORD *)this + 47);
              i != *((_QWORD **)this + 46);
              std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v220, i))
        {
          --i;
        }
        v120 = *(_OWORD *)v220;
        v121 = *(_OWORD *)&v220[16];
        *(_QWORD *)v220 = *v62;
        v119 = *(void **)v220;
        *(_QWORD *)&v220[8] = i;
        *(_OWORD *)v62 = v120;
        *(_OWORD *)((char *)this + 376) = v121;
        if (v119)
          operator delete(v119);
        goto LABEL_219;
      }
      if (v104 != v82)
      {
        *(_QWORD *)v220 = operator new(0xFF0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back((_QWORD *)this + 45, v220);
LABEL_219:
        v81 = (char *)*((_QWORD *)this + 46);
        v82 = (char *)*((_QWORD *)this + 47);
        goto LABEL_220;
      }
      *(_QWORD *)v220 = operator new(0xFF0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)this + 360, v220);
      v133 = (_QWORD *)*((_QWORD *)this + 46);
      v82 = (char *)*((_QWORD *)this + 47);
      v135 = *v133;
      v134 = (char *)(v133 + 1);
      v89 = v135;
      *((_QWORD *)this + 46) = v134;
      if (v82 != *((char **)this + 48))
      {
LABEL_218:
        *(_QWORD *)v82 = v89;
        *((_QWORD *)this + 47) += 8;
        goto LABEL_219;
      }
      v203 = (uint64_t)&v134[-*v62];
      if ((unint64_t)v134 > *v62)
      {
        v204 = v203 >> 3;
        v56 = v203 >> 3 < -1;
        v205 = (v203 >> 3) + 2;
        if (v56)
          v206 = v205;
        else
          v206 = v204 + 1;
        v207 = -(v206 >> 1);
        v208 = v206 >> 1;
        v209 = &v134[-8 * v208];
        v210 = v82 - v134;
        if (v82 != v134)
        {
          memmove(&v134[-8 * v208], v134, v82 - v134);
          v134 = (char *)*((_QWORD *)this + 46);
        }
        v82 = &v209[v210];
        v99 = &v134[8 * v207];
LABEL_167:
        *((_QWORD *)this + 46) = v99;
        *((_QWORD *)this + 47) = v82;
        goto LABEL_218;
      }
      if (v82 == (char *)*v62)
        v211 = 1;
      else
        v211 = (uint64_t)&v82[-*v62] >> 2;
      v123 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v211);
      v124 = &v123[8 * (v211 >> 2)];
      v126 = &v123[8 * v212];
      v213 = (uint64_t *)*((_QWORD *)this + 46);
      v82 = v124;
      v214 = *((_QWORD *)this + 47) - (_QWORD)v213;
      if (v214)
      {
        v82 = &v124[v214 & 0xFFFFFFFFFFFFFFF8];
        v215 = 8 * (v214 >> 3);
        v216 = &v123[8 * (v211 >> 2)];
        do
        {
          v217 = *v213++;
          *(_QWORD *)v216 = v217;
          v216 += 8;
          v215 -= 8;
        }
        while (v215);
      }
    }
    v132 = (void *)*((_QWORD *)this + 45);
    *((_QWORD *)this + 45) = v123;
    *((_QWORD *)this + 46) = v124;
    *((_QWORD *)this + 47) = v82;
    *((_QWORD *)this + 48) = v126;
    if (v132)
    {
      operator delete(v132);
      v82 = (char *)*((_QWORD *)this + 47);
    }
    goto LABEL_218;
  }
  v15 = *((_QWORD *)this + 34);
  if (std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(*((_QWORD *)this + 33), v15, (unsigned __int8 **)a2) != v15)
  {
    nlv4_inference_orchestrator::trees::PlyStateHandler::constructUDA((uint64_t)this, a2);
    return;
  }
  v17 = (char *)this + 72;
  v16 = (char *)*((_QWORD *)this + 9);
  v18 = *(char *)(a2 + 23);
  if (v18 >= 0)
    v19 = (unsigned __int8 *)a2;
  else
    v19 = *(unsigned __int8 **)a2;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a2 + 23);
  else
    v20 = *(_QWORD *)(a2 + 8);
  v21 = *((char *)this + 95);
  if (v21 >= 0)
    v22 = (char *)this + 72;
  else
    v22 = (char *)*((_QWORD *)this + 9);
  v23 = *((_QWORD *)this + 10);
  v24 = *((unsigned __int8 *)this + 95);
  if (v21 >= 0)
    v25 = *((unsigned __int8 *)this + 95);
  else
    v25 = *((_QWORD *)this + 10);
  if (v20)
    v26 = v25 == 0;
  else
    v26 = 1;
  if (!v26)
  {
    v37 = v25 - 1;
    v38 = v20 - 1;
    v39 = v22;
    while (*v19 == *v39)
    {
      ++v39;
      if (v38)
      {
        ++v19;
        v40 = v37--;
        --v38;
        if (v40)
          continue;
      }
      goto LABEL_37;
    }
    return;
  }
  v39 = v22;
LABEL_37:
  if (v39 == &v22[v25])
  {
    if (v18 < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v220, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v24 = *((unsigned __int8 *)this + 95);
      v16 = (char *)*((_QWORD *)this + 9);
      v23 = *((_QWORD *)this + 10);
      LOBYTE(v21) = *((_BYTE *)this + 95);
    }
    else
    {
      *(_OWORD *)v220 = *(_OWORD *)a2;
      *(_QWORD *)&v220[16] = *(_QWORD *)(a2 + 16);
    }
    if (v220[23] >= 0)
      v106 = v220;
    else
      v106 = *(_BYTE **)v220;
    if ((v21 & 0x80u) == 0)
    {
      v107 = v24;
    }
    else
    {
      v17 = v16;
      v107 = v23;
    }
    if (v107)
    {
      if (v220[23] >= 0)
        v108 = v220[23];
      else
        v108 = *(_QWORD *)&v220[8];
      v109 = &v106[v108];
      if (v108 >= v107)
      {
        v112 = *v17;
        v113 = v106;
        do
        {
          v114 = v108 - v107;
          if (v114 == -1)
            break;
          v115 = (char *)memchr(v113, v112, v114 + 1);
          if (!v115)
            break;
          v110 = v115;
          if (!memcmp(v115, v17, v107))
            goto LABEL_190;
          v113 = v110 + 1;
          v108 = v109 - (v110 + 1);
        }
        while (v108 >= v107);
      }
      v110 = v109;
LABEL_190:
      if (v110 == v109)
        v111 = -1;
      else
        v111 = v110 - v106;
    }
    else
    {
      v111 = 0;
    }
    std::string::erase((std::string *)v220, v111, v107);
    nlv4_inference_orchestrator::trees::PlyStateHandler::constructIntent((uint64_t)this, (uint64_t)v220);
    *((_BYTE *)this + 357) = 1;
    goto LABEL_356;
  }
}

void sub_1C22C9384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;

  operator delete(v21);
  if (__p)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(a1);
}

BOOL boost::algorithm::starts_with<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned __int8 *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;

  v2 = *(unsigned __int8 **)a1;
  if ((a1[23] & 0x80u) != 0)
  {
    v3 = *((_QWORD *)a1 + 1);
  }
  else
  {
    v2 = a1;
    v3 = a1[23];
  }
  v4 = (char)a2[23];
  v5 = v4 < 0;
  v6 = *(unsigned __int8 **)a2;
  if (v4 >= 0)
    v6 = a2;
  v7 = a2[23];
  if (v5)
    v7 = *((_QWORD *)a2 + 1);
  if (v3)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v12 = v6;
    return v12 == &v6[v7];
  }
  else
  {
    v10 = v7 - 1;
    v11 = v3 - 1;
    v12 = v6;
    while (*v2 == *v12)
    {
      ++v12;
      if (v11)
      {
        ++v2;
        v13 = v10--;
        --v11;
        if (v13)
          continue;
      }
      return v12 == &v6[v7];
    }
    return 0;
  }
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::flushPathFragmentsOnStackToTree(nlv4_inference_orchestrator::trees::PlyStateHandler *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  std::string __p[4];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[96];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::string v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[9];
  int v36;

  v1 = *((_QWORD *)this + 50);
  if (v1)
  {
    if ((v1 & 1) != 0)
    {
      if (*((_BYTE *)this + 352))
      {
        v11 = *((_DWORD *)this + 87);
      }
      else
      {
        v11 = *((_DWORD *)this + 86);
        *((_DWORD *)this + 87) = v11;
        *((_BYTE *)this + 352) = 1;
      }
      v14 = **((_QWORD **)this + 39);
      if (0x8E38E38E38E38E39 * ((*(_QWORD *)(*((_QWORD *)this + 39) + 8) - v14) >> 4) <= v11)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v15 = (_OWORD *)(v14 + 144 * v11);
      MEMORY[0x1C3BB8524](__p, v15);
      v16 = v15[6];
      v17 = v15[8];
      v25 = v15[7];
      v26 = v17;
      v24 = v16;
      v18 = *((unsigned int *)this + 86);
      v19 = **((_QWORD **)this + 39);
      if (0x8E38E38E38E38E39 * ((*(_QWORD *)(*((_QWORD *)this + 39) + 8) - v19) >> 4) <= v18)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v20 = (_OWORD *)(v19 + 144 * v18);
      MEMORY[0x1C3BB8524](v27, v20);
      v21 = v20[6];
      v22 = v20[8];
      v29 = v20[7];
      v30 = v22;
      v28 = v21;
      MEMORY[0x1C3BB8524](&v31, __p);
      v32 = v24;
      v33 = v25;
      v34 = v26;
      MEMORY[0x1C3BB8524](v35, v27);
      v35[6] = v28;
      v35[7] = v29;
      v35[8] = v30;
      v36 = 1;
      nlv4_inference_orchestrator::trees::PlyStateHandler::mergePathToTree((uint64_t)this, (uint64_t)&v31);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,nlv4_inference_orchestrator::trees::PayloadStartEnd>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v31);
      MEMORY[0x1C3BB8530](v27);
      MEMORY[0x1C3BB8530](__p);
    }
    else
    {
      v3 = v1 - 1;
      v4 = v3 + *((_QWORD *)this + 49);
      v5 = *((_QWORD *)this + 46);
      v6 = v4 / 0xAA;
      v7 = *(_QWORD *)(v5 + 8 * (v4 / 0xAA));
      v8 = v4 % 0xAA;
      v9 = (__int128 *)(v7 + 24 * v8);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        v5 = *((_QWORD *)this + 46);
        v3 = *((_QWORD *)this + 50) - 1;
        v12 = v3 + *((_QWORD *)this + 49);
        v6 = v12 / 0xAA;
        v8 = v12 % 0xAA;
      }
      else
      {
        v10 = *v9;
        __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v10;
      }
      v13 = *(_QWORD *)(v5 + 8 * v6) + 24 * v8;
      if (*(char *)(v13 + 23) < 0)
      {
        operator delete(*(void **)v13);
        v3 = *((_QWORD *)this + 50) - 1;
      }
      *((_QWORD *)this + 50) = v3;
      std::deque<std::string>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 45);
      nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments((uint64_t)this, (uint64_t *)__p);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v31, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
      else
        v31 = __p[0];
      v36 = 0;
      nlv4_inference_orchestrator::trees::PlyStateHandler::mergePathToTree((uint64_t)this, (uint64_t)&v31);
      std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,nlv4_inference_orchestrator::trees::PayloadStartEnd>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v31);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C22C96F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::trees::PlyStateHandler::addNewPathFragments(uint64_t a1, uint64_t *a2)
{
  std::string::size_type v4;
  int64x2_t *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  std::string::size_type v39;
  unint64_t v40;
  unint64_t v41;
  std::string *v42;
  std::string *v43;
  _QWORD *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  uint64_t v48;
  __int128 v49;
  _QWORD *v50;
  std::string::size_type v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  __int128 v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  const std::string *v71;
  uint64_t v72;
  std::string *v73;
  uint64_t v74;
  unint64_t v75;
  std::string::size_type v76;
  char *i;
  char *size;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  size_t v83;
  void *v84;
  std::string::size_type v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  std::string::size_type v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  char *v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  char *v101;
  std::string::size_type v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  std::string::size_type v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  char *v113;
  std::string **v114;
  uint64_t v115;
  std::string *v116;
  std::string *v117;
  int64x2_t v118;
  std::string *v119;
  std::string **v120;
  std::string *v121;
  std::string *v122;
  std::string *v123;
  __int128 v124;
  unint64_t v125;
  __int128 v126;
  _QWORD *v127;
  std::string::size_type v128;
  std::string *v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 **v133;
  __int128 *v134;
  __int128 *v135;
  __int128 *v136;
  uint64_t v137;
  __int128 *v138;
  __int128 *v139;
  __int128 *v140;
  unint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  std::string::size_type v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  __int128 v150;
  uint64_t v151;
  void *v152;
  std::string v153;
  char *v154;
  uint64_t v155;
  _QWORD __dst[4];

  __dst[3] = *MEMORY[0x1E0C80C00];
  v150 = 0uLL;
  v151 = 0;
  v5 = (int64x2_t *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(char *)(a1 + 47);
  v7 = v6 < 0;
  if (v6 >= 0)
    v4 = a1 + 24;
  v8 = *(unsigned __int8 *)(a1 + 47);
  if (v7)
    v8 = *(_QWORD *)(a1 + 32);
  v153.__r_.__value_.__r.__words[0] = v4;
  v153.__r_.__value_.__l.__size_ = v4 + v8;
  boost::algorithm::detail::is_any_ofF<char>::is_any_ofF<boost::iterator_range<std::__wrap_iter<char const*>>>(__dst, (uint64_t)&v153);
  boost::algorithm::split<std::vector<std::string>,std::string const&,boost::algorithm::detail::is_any_ofF<char>>(&v150, a2, __dst, 1);
  if (__dst[2] >= 0x11uLL && __dst[0])
    MEMORY[0x1C3BB9B20](__dst[0], 0x1000C8077774924);
  v9 = *(_QWORD *)(a1 + 392);
  v10 = *(_QWORD *)(a1 + 400);
  v11 = v9 + v10;
  v12 = (v9 + v10) / 0xAA;
  v13 = *(_QWORD *)(a1 + 368);
  v14 = *(_QWORD *)(a1 + 376);
  if (v14 == v13)
  {
    v15 = 0;
    v20 = 0;
    v17 = (std::string *)*((_QWORD *)&v150 + 1);
    v16 = (std::string *)v150;
    v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 3);
    v18 = v9 / 0xAA;
    v19 = (_QWORD *)(v13 + 8 * (v9 / 0xAA));
  }
  else
  {
    v15 = *(_QWORD *)(v13 + 8 * v12) + 24 * (v11 - 170 * v12);
    v17 = (std::string *)*((_QWORD *)&v150 + 1);
    v16 = (std::string *)v150;
    v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 3);
    v18 = v9 / 0xAA;
    v19 = (_QWORD *)(v13 + 8 * (v9 / 0xAA));
    v20 = *v19 + 24 * (v9 % 0xAA);
  }
  if (v15 == v20)
    v21 = 0;
  else
    v21 = 170 * ((uint64_t)(v13 + 8 * v12 - (_QWORD)v19) >> 3)
        - 0x5555555555555555 * ((v15 - *(_QWORD *)(v13 + 8 * v12)) >> 3)
        + 0x5555555555555555 * ((uint64_t)(v20 - *v19) >> 3);
  v22 = v5 + 21;
  v146 = v21;
  if (v21 < v10 - v21)
  {
    v23 = v147 - v9;
    if (v147 > v9)
    {
      v24 = (v14 - v13) >> 3;
      v25 = 170 * v24 - 1;
      if (v14 == v13)
      {
        v25 = 0;
        ++v23;
      }
      if (v23 % 0xAA)
        v26 = v23 / 0xAA + 1;
      else
        v26 = v23 / 0xAA;
      v27 = v25 - v11;
      v28 = ((v25 - v11) * (unsigned __int128)0xC0C0C0C0C0C0C0C1) >> 64;
      if (v26 >= v27 / 0xAA)
        v29 = v28 >> 7;
      else
        v29 = v26;
      if (v26 <= v28 >> 7)
      {
        for (v5[23].i64[0] = v9 + 170 * v29; v29; --v29)
        {
          v48 = *(_QWORD *)(a1 + 376);
          v153.__r_.__value_.__r.__words[0] = *(_QWORD *)(v48 - 8);
          *(_QWORD *)(a1 + 376) = v48 - 8;
          std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v5[21].i64, &v153);
        }
      }
      else
      {
        v30 = v26 - v29;
        v31 = *(_QWORD *)(a1 + 360);
        v32 = *(_QWORD *)(a1 + 384) - v31;
        if (v26 - v29 <= (v32 >> 3) - v24)
        {
          if (v30)
          {
            if (v13 == v31)
            {
LABEL_78:
              v66 = v30;
              do
              {
                v153.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xFF0uLL);
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v22, &v153);
                --v66;
              }
              while (v66);
              v29 += v30;
              v9 = v22[2].u64[0];
            }
            else
            {
              while (1)
              {
                v153.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0xFF0uLL);
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v22, &v153);
                v64 = *(_QWORD *)(a1 + 368);
                v65 = *(_QWORD *)(a1 + 376) - v64 == 8 ? 169 : 170;
                v9 = v65 + *(_QWORD *)(a1 + 392);
                *(_QWORD *)(a1 + 392) = v9;
                if (!--v30)
                  break;
                if (v64 == v22->i64[0])
                  goto LABEL_78;
              }
            }
          }
          for (v22[2].i64[0] = v9 + 170 * v29; v29; --v29)
          {
            v67 = *(_QWORD *)(a1 + 376);
            v153.__r_.__value_.__r.__words[0] = *(_QWORD *)(v67 - 8);
            *(_QWORD *)(a1 + 376) = v67 - 8;
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v22, &v153);
          }
        }
        else
        {
          v33 = v14 == v13;
          if (v32 >> 2 <= v30 + v24)
            v34 = v30 + v24;
          else
            v34 = v32 >> 2;
          v155 = a1 + 384;
          if (v34)
            v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v34);
          else
            v35 = 0;
          v75 = 170 * v26 - v33;
          v153.__r_.__value_.__r.__words[0] = v34;
          v153.__r_.__value_.__l.__size_ = v34;
          v153.__r_.__value_.__r.__words[2] = v34;
          v154 = (char *)(v34 + 8 * v35);
          do
          {
            v152 = operator new(0xFF0uLL);
            std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v153, &v152);
            --v30;
          }
          while (v30);
          v145 = v75;
          v76 = *(_QWORD *)(a1 + 376);
          for (i = (char *)v153.__r_.__value_.__r.__words[2]; v29; --v29)
          {
            if (i == v154)
            {
              size = (char *)v153.__r_.__value_.__l.__size_;
              v79 = (void *)v153.__r_.__value_.__r.__words[0];
              if (v153.__r_.__value_.__l.__size_ <= v153.__r_.__value_.__r.__words[0])
              {
                if (i == v153.__r_.__value_.__l.__data_)
                  v86 = 1;
                else
                  v86 = (uint64_t)&i[-v153.__r_.__value_.__r.__words[0]] >> 2;
                v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v86);
                v89 = (std::string::size_type)&v87[8 * (v86 >> 2)];
                v91 = i - size;
                v90 = i == size;
                i = (char *)v89;
                v21 = v146;
                if (!v90)
                {
                  i = (char *)(v89 + (v91 & 0xFFFFFFFFFFFFFFF8));
                  v92 = 8 * (v91 >> 3);
                  v93 = (_QWORD *)v89;
                  do
                  {
                    v94 = *(_QWORD *)size;
                    size += 8;
                    *v93++ = v94;
                    v92 -= 8;
                  }
                  while (v92);
                }
                v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
                v153.__r_.__value_.__l.__size_ = v89;
                v153.__r_.__value_.__r.__words[2] = (std::string::size_type)i;
                v154 = &v87[8 * v88];
                if (v79)
                  operator delete(v79);
              }
              else
              {
                v80 = (uint64_t)(v153.__r_.__value_.__l.__size_ - v153.__r_.__value_.__r.__words[0]) >> 3;
                if (v80 >= -1)
                  v81 = v80 + 1;
                else
                  v81 = v80 + 2;
                v82 = v153.__r_.__value_.__l.__size_ - 8 * (v81 >> 1);
                v83 = (size_t)&i[-v153.__r_.__value_.__l.__size_];
                if (i != (char *)v153.__r_.__value_.__l.__size_)
                {
                  v84 = (void *)(v153.__r_.__value_.__l.__size_ - 8 * (v81 >> 1));
                  memmove(v84, (const void *)v153.__r_.__value_.__l.__size_, v83);
                  v82 = (std::string::size_type)v84;
                  i = size;
                }
                v85 = (std::string::size_type)&i[-8 * (v81 >> 1)];
                i = (char *)(v82 + v83);
                v153.__r_.__value_.__l.__size_ = v85;
                v153.__r_.__value_.__r.__words[2] = v82 + v83;
                v21 = v146;
              }
            }
            *(_QWORD *)i = *(_QWORD *)(v76 - 8);
            i = (char *)(v153.__r_.__value_.__r.__words[2] + 8);
            v153.__r_.__value_.__r.__words[2] += 8;
            v76 = *(_QWORD *)(a1 + 376) - 8;
            *(_QWORD *)(a1 + 376) = v76;
          }
          v95 = *(uint64_t **)(a1 + 368);
          if (v95 == (uint64_t *)v76)
          {
            v95 = (uint64_t *)v76;
          }
          else
          {
            do
            {
              if (i == v154)
              {
                v96 = (char *)v153.__r_.__value_.__l.__size_;
                v97 = (void *)v153.__r_.__value_.__r.__words[0];
                if (v153.__r_.__value_.__l.__size_ <= v153.__r_.__value_.__r.__words[0])
                {
                  if (i == v153.__r_.__value_.__l.__data_)
                    v103 = 1;
                  else
                    v103 = (uint64_t)&i[-v153.__r_.__value_.__r.__words[0]] >> 2;
                  v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v103);
                  v106 = (std::string::size_type)&v104[8 * (v103 >> 2)];
                  v107 = i - v96;
                  v90 = i == v96;
                  i = (char *)v106;
                  v21 = v146;
                  if (!v90)
                  {
                    i = (char *)(v106 + (v107 & 0xFFFFFFFFFFFFFFF8));
                    v108 = 8 * (v107 >> 3);
                    v109 = (_QWORD *)v106;
                    do
                    {
                      v110 = *(_QWORD *)v96;
                      v96 += 8;
                      *v109++ = v110;
                      v108 -= 8;
                    }
                    while (v108);
                  }
                  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
                  v153.__r_.__value_.__l.__size_ = v106;
                  v153.__r_.__value_.__r.__words[2] = (std::string::size_type)i;
                  v154 = &v104[8 * v105];
                  if (v97)
                    operator delete(v97);
                }
                else
                {
                  v98 = (uint64_t)(v153.__r_.__value_.__l.__size_ - v153.__r_.__value_.__r.__words[0]) >> 3;
                  if (v98 >= -1)
                    v99 = v98 + 1;
                  else
                    v99 = v98 + 2;
                  v100 = v153.__r_.__value_.__l.__size_ - 8 * (v99 >> 1);
                  v101 = &i[-v153.__r_.__value_.__l.__size_];
                  if (i != (char *)v153.__r_.__value_.__l.__size_)
                  {
                    memmove((void *)(v153.__r_.__value_.__l.__size_ - 8 * (v99 >> 1)), (const void *)v153.__r_.__value_.__l.__size_, (size_t)&i[-v153.__r_.__value_.__l.__size_]);
                    i = v96;
                  }
                  v102 = (std::string::size_type)&i[-8 * (v99 >> 1)];
                  i = &v101[v100];
                  v153.__r_.__value_.__l.__size_ = v102;
                  v153.__r_.__value_.__r.__words[2] = (std::string::size_type)&v101[v100];
                  v21 = v146;
                }
              }
              v111 = *v95++;
              *(_QWORD *)i = v111;
              i = (char *)(v153.__r_.__value_.__r.__words[2] + 8);
              v153.__r_.__value_.__r.__words[2] += 8;
            }
            while (v95 != *(uint64_t **)(a1 + 376));
            v76 = *(_QWORD *)(a1 + 368);
          }
          v112 = *(void **)(a1 + 360);
          *v22 = *(int64x2_t *)&v153.__r_.__value_.__l.__data_;
          v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
          v153.__r_.__value_.__l.__size_ = v76;
          v153.__r_.__value_.__r.__words[2] = (std::string::size_type)v95;
          v113 = v154;
          *(_QWORD *)(a1 + 376) = i;
          *(_QWORD *)(a1 + 384) = v113;
          *(_QWORD *)(a1 + 392) += v145;
          if (v112)
            operator delete(v112);
        }
      }
      v9 = *(_QWORD *)(a1 + 392);
      v13 = *(_QWORD *)(a1 + 368);
      v14 = *(_QWORD *)(a1 + 376);
      v18 = v9 / 0xAA;
    }
    v114 = (std::string **)(v13 + 8 * v18);
    v115 = v147;
    if (v14 == v13)
      v116 = 0;
    else
      v116 = &(*v114)[v9 % 0xAA];
    if (v147 <= v21)
    {
      v121 = v116;
      v120 = (std::string **)(v13 + 8 * v18);
      if (!v147)
        goto LABEL_176;
    }
    else
    {
      if (v21 >= v147 >> 1)
        v117 = &v16[v147 - v21];
      else
        v117 = &v17[-v21];
      if (v117 == v16)
      {
        v125 = v21;
        v121 = v116;
        v120 = v114;
        v115 = v125;
        if (!v125)
          goto LABEL_176;
      }
      else
      {
        v118 = (int64x2_t)xmmword_1C230B4D0;
        v119 = v117;
        v120 = v114;
        v121 = v116;
        do
        {
          if (v121 == *v120)
          {
            v122 = *--v120;
            v121 = v122 + 170;
          }
          --v121;
          v123 = v119 - 1;
          if (SHIBYTE(v119[-1].__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v121, v119[-1].__r_.__value_.__l.__data_, v119[-1].__r_.__value_.__l.__size_);
            v118 = (int64x2_t)xmmword_1C230B4D0;
          }
          else
          {
            v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
            v121->__r_.__value_.__r.__words[2] = v119[-1].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v124;
          }
          v22[2] = vaddq_s64(v22[2], v118);
          v119 = v123;
        }
        while (v123 != v16);
        v16 = v117;
        v115 = v146;
        if (!v146)
          goto LABEL_176;
      }
    }
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
    v153.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
    v149 = v115;
    std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100]((uint64_t **)&v153, v115);
    v126 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
    if ((std::string *)v153.__r_.__value_.__l.__size_ != v116)
    {
      v128 = v153.__r_.__value_.__l.__size_;
      v127 = (_QWORD *)v153.__r_.__value_.__r.__words[0];
      do
      {
        if (v121 == *v120)
        {
          v129 = *--v120;
          v121 = v129 + 170;
        }
        if (v128 == *v127)
        {
          v130 = *--v127;
          v128 = v130 + 4080;
        }
        --v121;
        v131 = *(_OWORD *)(v128 - 24);
        v121->__r_.__value_.__r.__words[2] = *(_QWORD *)(v128 - 8);
        *(_OWORD *)&v121->__r_.__value_.__l.__data_ = v131;
        *(_QWORD *)(v128 - 16) = 0;
        *(_QWORD *)(v128 - 8) = 0;
        *(_QWORD *)(v128 - 24) = 0;
        v22[2] = vaddq_s64(v22[2], (int64x2_t)xmmword_1C230B4D0);
        v128 -= 24;
      }
      while ((std::string *)v128 != v116);
    }
    if (v149 < v146)
    {
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
      v153.__r_.__value_.__l.__size_ = (std::string::size_type)v116;
      std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100]((uint64_t **)&v153, v146);
      v132 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
      if ((_QWORD)v126 == v153.__r_.__value_.__r.__words[0])
      {
        v139 = (__int128 *)*((_QWORD *)&v126 + 1);
        v140 = (__int128 *)v153.__r_.__value_.__l.__size_;
        v136 = (__int128 *)v114;
        v137 = (uint64_t)v116;
      }
      else
      {
        v133 = (__int128 **)(v126 + 8);
        v134 = (__int128 *)(*(_QWORD *)v126 + 4080);
        v135 = (__int128 *)*((_QWORD *)&v126 + 1);
        v136 = (__int128 *)v114;
        v137 = (uint64_t)v116;
        while (1)
        {
          std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>((__int128 **)&v153, v135, v134, v136, v137);
          v137 = v153.__r_.__value_.__r.__words[2];
          v136 = (__int128 *)v153.__r_.__value_.__l.__size_;
          if (v133 == (__int128 **)v132)
            break;
          v138 = *v133++;
          v135 = v138;
          v134 = v138 + 255;
        }
        v139 = *(__int128 **)v132;
        v140 = (__int128 *)*((_QWORD *)&v132 + 1);
      }
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>((__int128 **)&v153, v139, v140, v136, v137);
      v116 = (std::string *)v153.__r_.__value_.__r.__words[2];
      v114 = (std::string **)v153.__r_.__value_.__l.__size_;
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string const*,std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>,0>(&v153, v16, v17, v114, v116);
    goto LABEL_176;
  }
  v36 = 170 * ((v14 - v13) >> 3) - 1;
  if (v14 == v13)
    v36 = 0;
  v37 = v36 - v11;
  if (v147 > v37)
  {
    std::deque<std::string>::__add_back_capacity((int64x2_t *)v5[21].i64, v147 - v37);
    v10 = *(_QWORD *)(a1 + 400);
    v13 = *(_QWORD *)(a1 + 368);
    v14 = *(_QWORD *)(a1 + 376);
    v11 = *(_QWORD *)(a1 + 392) + v10;
  }
  v38 = (_QWORD *)(v13 + 8 * (v11 / 0xAA));
  if (v14 == v13)
    v39 = 0;
  else
    v39 = *v38 + 24 * (v11 % 0xAA);
  v40 = v10 - v21;
  v41 = v147;
  if (v40 >= v147)
  {
    v45 = (std::string *)v39;
    v44 = (_QWORD *)(v13 + 8 * (v11 / 0xAA));
    if (!v147)
      goto LABEL_176;
    goto LABEL_58;
  }
  if (v40 >= v147 >> 1)
    v42 = &v17[v40 - v147];
  else
    v42 = &v16[v40];
  if (v42 == v17)
  {
    v45 = (std::string *)v39;
    v44 = (_QWORD *)(v13 + 8 * (v11 / 0xAA));
  }
  else
  {
    v43 = v42;
    v44 = (_QWORD *)(v13 + 8 * (v11 / 0xAA));
    v45 = (std::string *)v39;
    do
    {
      if (SHIBYTE(v43->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v45, v43->__r_.__value_.__l.__data_, v43->__r_.__value_.__l.__size_);
      }
      else
      {
        v46 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v45->__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      }
      if ((std::string *)((char *)++v45 - *v44) == (std::string *)4080)
      {
        v47 = (std::string *)v44[1];
        ++v44;
        v45 = v47;
      }
      ++v43;
      ++*(_QWORD *)(a1 + 400);
    }
    while (v43 != v17);
    v17 = v42;
  }
  v41 = v40;
  if (v40)
  {
LABEL_58:
    v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    v153.__r_.__value_.__l.__size_ = v39;
    v148 = v41;
    std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100]((uint64_t **)&v153, -(uint64_t)v41);
    v49 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
    if (v153.__r_.__value_.__l.__size_ != v39)
    {
      v51 = v153.__r_.__value_.__l.__size_;
      v50 = (_QWORD *)v153.__r_.__value_.__r.__words[0];
      do
      {
        v52 = *(_OWORD *)v51;
        v45->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v52;
        ++v45;
        *(_QWORD *)(v51 + 8) = 0;
        *(_QWORD *)(v51 + 16) = 0;
        *(_QWORD *)v51 = 0;
        if ((std::string *)((char *)v45 - *v44) == (std::string *)4080)
        {
          v53 = (std::string *)v44[1];
          ++v44;
          v45 = v53;
        }
        v51 += 24;
        if (v51 - *v50 == 4080)
        {
          v54 = v50[1];
          ++v50;
          v51 = v54;
        }
        ++*(_QWORD *)(a1 + 400);
      }
      while (v51 != v39);
    }
    if (v148 < v40)
    {
      v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
      v153.__r_.__value_.__l.__size_ = v39;
      std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100]((uint64_t **)&v153, -(uint64_t)v40);
      v55 = *(_OWORD *)&v153.__r_.__value_.__l.__data_;
      if (v153.__r_.__value_.__r.__words[0] == (_QWORD)v49)
      {
        v63 = v153.__r_.__value_.__l.__size_;
        v62 = *((_QWORD *)&v49 + 1);
        v59 = v38;
        v60 = v39;
      }
      else
      {
        v57 = (uint64_t *)(v49 - 8);
        v56 = *(_QWORD *)v49;
        v58 = *((_QWORD *)&v49 + 1);
        v59 = v38;
        v60 = v39;
        while (1)
        {
          std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(&v153, v56, v58, v59, v60);
          v60 = v153.__r_.__value_.__r.__words[2];
          v59 = (_QWORD *)v153.__r_.__value_.__l.__size_;
          if (v57 == (uint64_t *)v55)
            break;
          v61 = *v57--;
          v56 = v61;
          v58 = v61 + 4080;
        }
        v62 = *(_QWORD *)v55 + 4080;
        v63 = *((_QWORD *)&v55 + 1);
      }
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(&v153, v63, v62, v59, v60);
      v39 = v153.__r_.__value_.__r.__words[2];
      v38 = (_QWORD *)v153.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      v68 = *v38;
      while (1)
      {
        v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v68) >> 3);
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3)) >= v69)
          v70 = v69;
        else
          v70 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 3);
        if (v70)
        {
          v71 = v17 - 1;
          v72 = -24 * v70;
          v73 = (std::string *)(v39 - 24);
          do
          {
            std::string::operator=(v73--, v71--);
            v72 += 24;
          }
          while (v72);
        }
        v17 -= v70;
        if (v17 == v16)
          break;
        v74 = *--v38;
        v68 = v74;
        v39 = v74 + 4080;
      }
    }
  }
LABEL_176:
  v141 = *(_QWORD *)(a1 + 392);
  v142 = *(_QWORD *)(a1 + 368);
  v143 = (_QWORD *)(v142 + 8 * (v141 / 0xAA));
  if (*(_QWORD *)(a1 + 376) == v142)
    v144 = 0;
  else
    v144 = *v143 + 24 * (v141 % 0xAA);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)v143;
  v153.__r_.__value_.__l.__size_ = v144;
  std::__deque_iterator<std::string,std::string*,std::string&,std::string**,long,170l>::operator+=[abi:ne180100]((uint64_t **)&v153, v146);
  v153.__r_.__value_.__r.__words[0] = (std::string::size_type)&v150;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v153);
}

void sub_1C22CA2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  a16 = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v5 = a5;
  v6 = a4;
  v7 = a2;
  if (a2 != a3)
  {
    v9 = *a4;
    v10 = a5;
    v11 = a3;
    while (1)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
      v13 = (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 3)) >= v12 ? v12 : 0xAAAAAAAAAAAAAAABLL * ((v11 - v7) >> 3);
      if (v13)
      {
        v14 = (__int128 *)(v11 - 24);
        v15 = -24 * v13;
        do
        {
          v5 = v10 - 24;
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)v5);
          v16 = *v14;
          *(_QWORD *)(v5 + 16) = *((_QWORD *)v14 + 2);
          *(_OWORD *)v5 = v16;
          *((_BYTE *)v14 + 23) = 0;
          *(_BYTE *)v14 = 0;
          v14 = (__int128 *)((char *)v14 - 24);
          v10 = v5;
          v15 += 24;
        }
        while (v15);
      }
      else
      {
        v5 = v10;
      }
      v11 -= 24 * v13;
      if (v11 == v7)
        break;
      v17 = *--v6;
      v9 = v17;
      v10 = v17 + 4080;
    }
    if (*v6 + 4080 == v5)
    {
      v18 = v6[1];
      ++v6;
      v5 = v18;
    }
    v7 = a3;
  }
  *a1 = v7;
  a1[1] = v6;
  a1[2] = v5;
}

void std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::__deque_iterator<std::string,std::string *,std::string&,std::string **,long,170l>,0>(__int128 **a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v9;
  uint64_t v10;
  int64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4;
  v7 = a2;
  if (a2 == a3)
  {
    v9 = a2;
  }
  else
  {
    v9 = a3;
    v10 = *(_QWORD *)a4;
    while (1)
    {
      v11 = 0xAAAAAAAAAAAAAAABLL * ((v10 - a5 + 4080) >> 3);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3)) < v11)
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v7) >> 3);
      if (v11)
      {
        v12 = (__int128 *)((char *)v7 + 24 * v11);
        do
        {
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          v13 = *v7;
          *(_QWORD *)(a5 + 16) = *((_QWORD *)v7 + 2);
          *(_OWORD *)a5 = v13;
          a5 += 24;
          *((_BYTE *)v7 + 23) = 0;
          *(_BYTE *)v7 = 0;
          v7 = (__int128 *)((char *)v7 + 24);
        }
        while (v7 != v12);
        v7 = v12;
      }
      if (v7 == v9)
        break;
      v14 = *((_QWORD *)v6 + 1);
      v6 = (__int128 *)((char *)v6 + 8);
      v10 = v14;
      a5 = v14;
    }
    if (*(_QWORD *)v6 + 4080 == a5)
    {
      v15 = *((_QWORD *)v6 + 1);
      v6 = (__int128 *)((char *)v6 + 8);
      a5 = v15;
    }
  }
  *a1 = v9;
  a1[1] = v6;
  a1[2] = (__int128 *)a5;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,nlv4_inference_orchestrator::trees::PayloadStartEnd>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_1E7BED6D0 + v2))(&v4, a1);
  *(_DWORD *)(a1 + 288) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN27nlv4_inference_orchestrator5trees15PayloadStartEndEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN27nlv4_inference_orchestrator5trees15PayloadStartEndEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSD_SG_EEEEEEDcSK_DpT0_(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1C3BB8530](a2 + 144);
  JUMPOUT(0x1C3BB8530);
}

os_log_t createLogForCategoryString(const char *category)
{
  return os_log_create("com.apple.sirinaturallanguageparsing", category);
}

_QWORD *nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::SetIdentityPromoter(_QWORD *a1, _OWORD **a2)
{
  _QWORD *v4;

  v4 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_SetIdentityPromoter");
  std::string::basic_string[abi:ne180100]<0>(v4 + 3, "common_Person.ReferenceTarget_setIdentity");
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, "setIdentity");
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(a1 + 9, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  return a1;
}

void sub_1C22CAA9C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

uint64_t nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::promote(nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void **v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 __p;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  std::string v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  std::string v53;
  __int128 v54;
  __int128 v55;
  std::string *v56;
  char v57;
  std::string v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  std::string v64;
  __int128 v65;
  __int128 v66;
  _QWORD v67[4];

  v67[1] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)a2 + 11);
  v3 = (uint64_t *)((char *)a2 + 88);
  if (v2 == *((_QWORD *)a2 + 12))
    return 0;
  v4 = *(_QWORD *)(v2 + 88);
  if (v4 == *(_QWORD *)(v2 + 96))
    return 0;
  v6 = *(_QWORD *)(v4 + 88);
  v5 = *(_QWORD *)(v4 + 96);
  if (v6 == v5)
    return 0;
  v9 = *((char *)this + 71);
  v10 = (_QWORD *)((char *)this + 48);
  if (v9 >= 0)
    v11 = *((unsigned __int8 *)this + 71);
  else
    v11 = *((_QWORD *)this + 7);
  while (1)
  {
    v12 = *(unsigned __int8 *)(v6 + 71);
    if ((v12 & 0x80u) == 0)
      v13 = *(unsigned __int8 *)(v6 + 71);
    else
      v13 = *(_QWORD *)(v6 + 56);
    if (v13 != v11)
      goto LABEL_21;
    v14 = v9 >= 0 ? (unsigned __int8 *)v10 : (unsigned __int8 *)*v10;
    if ((v12 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v6 + 71))
      goto LABEL_23;
    v15 = 0;
    while (*(unsigned __int8 *)(v6 + v15 + 48) == v14[v15])
    {
      if (v12 == ++v15)
        goto LABEL_23;
    }
LABEL_21:
    v6 += 144;
    if (v6 == v5)
      return 0;
  }
  if (memcmp(*(const void **)(v6 + 48), v14, *(_QWORD *)(v6 + 56)))
    goto LABEL_21;
LABEL_23:
  if (*((char *)this + 47) < 0)
    std::string::__init_copy_ctor_external(&v47, *((const std::string::value_type **)this + 3), *((_QWORD *)this + 4));
  else
    v47 = *(std::string *)((_BYTE *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(&v48, "");
  std::string::basic_string[abi:ne180100]<0>(&v50, "task");
  memset(&v53, 0, sizeof(v53));
  v52 = 0u;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>(&v53, *(__int128 **)(v6 + 88), *(__int128 **)(v6 + 96), 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(v6 + 96) - *(_QWORD *)(v6 + 88)) >> 4));
  v54 = 0u;
  v55 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v36, "UserStatedTask");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "ROOT");
  v58 = v47;
  v60 = v49;
  v42 = 0uLL;
  memset(&v47, 0, sizeof(v47));
  v59 = v48;
  v48 = 0uLL;
  v49 = 0;
  v61 = v50;
  v17 = v51;
  v51 = 0;
  v50 = 0uLL;
  v63 = v52;
  v64 = v53;
  v62 = v17;
  memset(&v53, 0, sizeof(v53));
  v65 = v54;
  v66 = v55;
  v43 = 0uLL;
  v44 = 0;
  v56 = (std::string *)&v43;
  v57 = 0;
  *(_QWORD *)&v43 = operator new(0x90uLL);
  *((_QWORD *)&v43 + 1) = v43;
  v44 = v43 + 144;
  *((_QWORD *)&v43 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)&v44, (nlv4_inference_orchestrator::trees::TreeNode *)&v58, (nlv4_inference_orchestrator::trees::TreeNode *)v67, (std::string *)v43);
  v45 = 0u;
  v46 = 0u;
  v56 = &v64;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)v61);
  if (SHIBYTE(v60) < 0)
    operator delete((void *)v59);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  v18 = *((_QWORD *)a2 + 13);
  v19 = *((_QWORD *)a2 + 12);
  if (v19 >= v18)
  {
    v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - *v3) >> 4);
    v26 = v25 + 1;
    if (v25 + 1 > 0x1C71C71C71C71C7)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v18 - *v3) >> 4);
    if (2 * v27 > v26)
      v26 = 2 * v27;
    if (v27 >= 0xE38E38E38E38E3)
      v28 = 0x1C71C71C71C71C7;
    else
      v28 = v26;
    *((_QWORD *)&v59 + 1) = (char *)a2 + 104;
    if (v28)
      v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v28);
    else
      v29 = 0;
    v30 = v28 + 144 * v25;
    v58.__r_.__value_.__r.__words[0] = v28;
    v58.__r_.__value_.__l.__size_ = v30;
    *(_QWORD *)&v59 = v28 + 144 * v29;
    v31 = *(_OWORD *)v36;
    *(_QWORD *)(v30 + 16) = v37;
    *(_OWORD *)v30 = v31;
    v36[1] = 0;
    v37 = 0;
    v36[0] = 0;
    v32 = v38;
    *(_QWORD *)(v30 + 40) = v39;
    *(_OWORD *)(v30 + 24) = v32;
    v39 = 0;
    v38 = 0uLL;
    v33 = __p;
    *(_QWORD *)(v30 + 64) = v41;
    *(_OWORD *)(v30 + 48) = v33;
    __p = 0uLL;
    v41 = 0;
    *(_OWORD *)(v30 + 72) = v42;
    *(_QWORD *)(v30 + 96) = 0;
    *(_QWORD *)(v30 + 104) = 0;
    *(_QWORD *)(v30 + 88) = 0;
    *(_OWORD *)(v30 + 88) = v43;
    *(_QWORD *)(v30 + 104) = v44;
    v43 = 0uLL;
    v44 = 0;
    v34 = v46;
    *(_OWORD *)(v30 + 112) = v45;
    *(_OWORD *)(v30 + 128) = v34;
    v58.__r_.__value_.__r.__words[2] = v30 + 144;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v3, &v58);
    v24 = *((_QWORD *)a2 + 12);
    std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v58);
  }
  else
  {
    v20 = *(_OWORD *)v36;
    *(_QWORD *)(v19 + 16) = v37;
    *(_OWORD *)v19 = v20;
    v36[1] = 0;
    v37 = 0;
    v36[0] = 0;
    v21 = v39;
    *(_OWORD *)(v19 + 24) = v38;
    *(_QWORD *)(v19 + 40) = v21;
    v39 = 0;
    v38 = 0uLL;
    v22 = __p;
    *(_QWORD *)(v19 + 64) = v41;
    *(_OWORD *)(v19 + 48) = v22;
    v41 = 0;
    __p = 0uLL;
    *(_OWORD *)(v19 + 72) = v42;
    *(_QWORD *)(v19 + 88) = 0;
    *(_QWORD *)(v19 + 96) = 0;
    *(_QWORD *)(v19 + 104) = 0;
    *(_OWORD *)(v19 + 88) = v43;
    *(_QWORD *)(v19 + 104) = v44;
    v43 = 0uLL;
    v44 = 0;
    v23 = v46;
    *(_OWORD *)(v19 + 112) = v45;
    *(_OWORD *)(v19 + 128) = v23;
    v24 = v19 + 144;
  }
  *((_QWORD *)a2 + 12) = v24;
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v39) < 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
  v36[0] = &v53;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  v35 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((__int128 *)(v6 + 144), *(__int128 **)(v4 + 96), v6);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100](v4 + 88, v35);
  return 1;
}

void sub_1C22CB0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSUMatcherDirectories::toString(snlp::ssu::matcher::SSUMatcherDirectories *this)
{
  _QWORD *v2;
  uint64_t v3;
  snlp::ssu::matcher::SSUMatcherDirectories *v4;
  _QWORD *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  char *v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"SSUMatcherDirectories[", 22);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"cacheDirectoryPath=", 19);
  v3 = *((unsigned __int8 *)this + 23);
  if ((v3 & 0x80u) == 0)
    v4 = this;
  else
    v4 = *(snlp::ssu::matcher::SSUMatcherDirectories **)this;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)this + 1);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v2, v4, (_BYTE *)v4 + v3, 0x22u, 0x5Cu);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", modelAssetsPath=", 18);
  v6 = *((char *)this + 47);
  if (v6 >= 0)
    v7 = (char *)this + 24;
  else
    v7 = (_BYTE *)*((_QWORD *)this + 3);
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)this + 47);
  else
    v8 = *((_QWORD *)this + 4);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v5, v7, &v7[v8], 0x22u, 0x5Cu);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", datasetAssetsPath=", 20);
  v12 = (_BYTE *)*((_QWORD *)this + 6);
  v11 = (char *)this + 48;
  v10 = v12;
  v13 = v11[23];
  if (v13 >= 0)
    v14 = v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = v11[23];
  else
    v15 = *((_QWORD *)v11 + 1);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(v9, v14, &v14[v15], 0x22u, 0x5Cu);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v16;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v21);
}

void sub_1C22CB32C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::cache::initializeEmptyDirectoryV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  std::string v4;
  std::string __p;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[20];

  v8[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::ofstream::basic_ofstream(&v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v4, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kTemporaryDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v4);
  std::__fs::filesystem::__create_directory((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  v6 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v6 + *(_QWORD *)(v6 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1C3BB970C](&v7);
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](v8);
}

void sub_1C22CB4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void sub_1C22CB51C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  JUMPOUT(0x1C22CB514);
}

void sub_1C22CB54C()
{
  JUMPOUT(0x1C22CB514);
}

_QWORD *std::ofstream::~ofstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F48];
  v3 = *MEMORY[0x1E0DE4F48];
  *a1 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1C3BB970C](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](a1 + 52);
  return a1;
}

void snlp::ssu::cache::renameAllCacheFiles(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v12;
  const std::__fs::filesystem::directory_entry *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *cntrl;
  uint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__fs::filesystem::path v24;
  void *v25[2];
  char v26;
  std::__fs::filesystem::path __to;
  std::string __p;
  char v29;
  std::string v30;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v31;
  std::__shared_weak_count *v32;
  char v33;
  std::__fs::filesystem::recursive_directory_iterator v34;
  std::shared_ptr<std::__fs::filesystem::recursive_directory_iterator::__shared_imp>::element_type *v35;
  std::__shared_weak_count *v36;
  BOOL v37;
  std::string v38;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::SSUCacheDirectory::kLocalesDirectoryName);
  std::__fs::filesystem::operator/[abi:ne180100](&v38, a1, (std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MEMORY[0x1C3BB997C](&v35, &v38, 0, 0);
  v4 = v35;
  v5 = v36;
  if (!v36)
  {
    v34.__imp_.__ptr_ = v35;
    v34.__imp_.__cntrl_ = 0;
    v34.__rec_ = v37;
LABEL_14:
    v31 = 0;
    v32 = 0;
    v33 = 0;
    goto LABEL_15;
  }
  p_shared_owners = (unint64_t *)&v36->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v8 = v36;
  v34.__imp_.__ptr_ = v4;
  v34.__imp_.__cntrl_ = v5;
  v34.__rec_ = v37;
  if (!v36)
    goto LABEL_14;
  v9 = (unint64_t *)&v36->__shared_owners_;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  v31 = 0;
  v32 = 0;
  v33 = 0;
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_15:
  v12 = v31;
  while (v34.__imp_.__ptr_ != v12)
  {
    v13 = std::__fs::filesystem::recursive_directory_iterator::__dereference(&v34);
    if (std::__fs::filesystem::directory_entry::is_regular_file[abi:ne180100](&v13->__p_))
    {
      std::__fs::filesystem::path::filename[abi:ne180100](&v13->__p_, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v30 = __p;
      }
      v14 = *(_QWORD *)(a2 + 24);
      if (!v14)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v14 + 48))(&__p, v14, &v30);
      if (v29)
      {
        std::__fs::filesystem::path::parent_path[abi:ne180100](&v13->__p_, (uint64_t)v25);
        if (!v29)
          std::__throw_bad_optional_access[abi:ne180100]();
        std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v24.__pn_, (char *)&__p);
        std::__fs::filesystem::operator/[abi:ne180100](&__to.__pn_, (uint64_t)v25, &v24);
        if (SHIBYTE(v24.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__pn_.__r_.__value_.__l.__data_);
        if (v26 < 0)
          operator delete(v25[0]);
        std::__fs::filesystem::__rename(&v13->__p_, &__to, 0);
        if (SHIBYTE(__to.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__to.__pn_.__r_.__value_.__l.__data_);
        if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
    }
    std::__fs::filesystem::recursive_directory_iterator::__increment(&v34, 0);
  }
  v15 = v32;
  if (v32)
  {
    v16 = (unint64_t *)&v32->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  cntrl = v34.__imp_.__cntrl_;
  if (v34.__imp_.__cntrl_)
  {
    v19 = &v34.__imp_.__cntrl_->__shared_owners_;
    do
      v20 = __ldaxr((unint64_t *)v19);
    while (__stlxr(v20 - 1, (unint64_t *)v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
      std::__shared_weak_count::__release_weak(cntrl);
    }
  }
  v21 = v36;
  if (v36)
  {
    v22 = (unint64_t *)&v36->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1C22CB8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (*(char *)(v40 - 33) < 0)
    operator delete(*(void **)(v40 - 56));
  _Unwind_Resume(exception_object);
}

void snlp::ssu::cache::makeV3CacheFileName(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  if (*((char *)a1 + 23) >= 0)
    v8 = *((unsigned __int8 *)a1 + 23);
  else
    v8 = (size_t)a1[1];
  v9 = &v24;
  std::string::basic_string[abi:ne180100]((uint64_t)&v24, v8 + 1);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0)
      v10 = a1;
    else
      v10 = *a1;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 46;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)a2;
  else
    v12 = *(const std::string::value_type **)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = std::string::append(&v24, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = std::string::append(&v25, ".");
  v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  v18 = *(char *)(a3 + 23);
  if (v18 >= 0)
    v19 = (const std::string::value_type *)a3;
  else
    v19 = *(const std::string::value_type **)a3;
  if (v18 >= 0)
    v20 = *(unsigned __int8 *)(a3 + 23);
  else
    v20 = *(_QWORD *)(a3 + 8);
  v21 = std::string::append(&v26, v19, v20);
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v27, ".ssu_cache_file");
  *a4 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

void sub_1C22CBB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 57) < 0)
    operator delete(*(void **)(v28 - 80));
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::ssu::cache::migrateDirectoryV1ToV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::string v6;
  std::string __p;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[20];

  v12[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v6, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v6);
  std::ofstream::basic_ofstream(&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v8[0] = &off_1E7BEC640;
  v9 = v8;
  snlp::ssu::cache::renameAllCacheFiles((uint64_t)this, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v6, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v6);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v10 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v10 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1C3BB970C](&v11);
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](v12);
}

void sub_1C22CBD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ofstream::~ofstream(&a25);
  _Unwind_Resume(a1);
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7BEC640;
  return result;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7BEC640;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::sub_match<const char *> *v5;
  void *v6;
  unint64_t v7;
  void **v8;
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string v16;
  void *v17[2];
  uint64_t v18;
  std::regex_traits<char> v19[2];
  std::__shared_weak_count *v20;
  std::string v21;
  void *v22[8];
  void *__p;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _BYTE v27[8];
  uint64_t v28;
  char v29;
  std::locale v30[2];

  v30[1] = *(std::locale *)MEMORY[0x1E0C80C00];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)v22, "([0-9a-f]+)%s");
  v19[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v19[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v19[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v22, v19);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v21, (uint64_t *)v22);
  if (v29)
  {
    std::locale::~locale(v30);
    v29 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v27);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  if (v22[3])
    operator delete(v22[3]);
  v19[0].__loc_.__locale_ = (std::locale::__imp *)v22;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v19);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v19, (uint64_t)&v21);
  v22[6] = 0;
  v22[7] = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27[0] = 0;
  v28 = 0;
  memset(v22, 0, 41);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::sub_match<const char *> *)a1;
  else
    v5 = *(std::sub_match<const char *> **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if ((std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v5, (std::sub_match<const char *> *)((char *)v5 + v4), (uint64_t)v22, (uint64_t)v19) & 1) != 0)
  {
    v6 = v22[0];
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22[1] - (char *)v22[0]) >> 3);
    if (v7 <= 1)
      v8 = v22;
    else
      v8 = (void **)v22[0];
    if (*((_BYTE *)v8 + 40))
    {
      if (v7 <= 1)
        v9 = v22;
      else
        v9 = (void **)v22[0];
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v17, (char *)v9[3], (char *)v9[4], (_BYTE *)v9[4] - (_BYTE *)v9[3]);
    }
    else
    {
      v17[0] = 0;
      v17[1] = 0;
      v18 = 0;
    }
    std::to_string(&v16, 0);
    std::string::basic_string[abi:ne180100]<0>(v13, "unknown");
    snlp::ssu::cache::makeV3CacheFileName((const void **)v17, (uint64_t)v13, (uint64_t)&v16, &v15);
    *a2 = v15;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
    if (v14 < 0)
      operator delete(v13[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    v6 = v22[0];
  }
  if (v6)
    operator delete(v6);
  v10 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::locale::~locale(&v19[0].__loc_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1C22CC0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;

  if (v35)
    operator delete(v35);
  v37 = (std::__shared_weak_count *)a28;
  if (a28)
  {
    v38 = (unint64_t *)(a28 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  std::locale::~locale(&a22);
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV1ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target_type()
{
}

uint64_t snlp::ssu::cache::migrateDirectoryV2ToV3(snlp::ssu::cache *this, const std::__fs::filesystem::path *a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::string v6;
  std::string __p;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[20];

  v12[19] = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v6, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v6);
  std::ofstream::basic_ofstream(&v10);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v8[0] = &off_1E7BEC698;
  v9 = v8;
  snlp::ssu::cache::renameAllCacheFiles((uint64_t)this, (uint64_t)v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = 4;
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_10;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_10:
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v6, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v6);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v6, (uint64_t)&snlp::ssu::cache::kFormatVersionV2Name);
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)this, (std::__fs::filesystem::path *)&v6);
  std::__fs::filesystem::__remove((const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v10 = *MEMORY[0x1E0DE4F48];
  *(uint64_t *)((char *)&v10 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x1C3BB970C](&v11);
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](v12);
}

void sub_1C22CC3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  std::ofstream::~ofstream(&a25);
  _Unwind_Resume(a1);
}

void sub_1C22CC480(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  JUMPOUT(0x1C22CC478);
}

void sub_1C22CC4B0()
{
  JUMPOUT(0x1C22CC478);
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::~__func()
{
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7BEC698;
  return result;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7BEC698;
}

void std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::operator()(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::sub_match<const char *> *v5;
  char *v6;
  unint64_t v7;
  void **v8;
  void **v9;
  char **v10;
  char *v11;
  char **v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16[2];
  char v17;
  std::string v18;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  std::regex_traits<char> v23[2];
  std::__shared_weak_count *v24;
  std::string v25;
  void *v26[8];
  void *__p;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE v31[8];
  uint64_t v32;
  char v33;
  std::locale v34[2];

  v34[1] = *(std::locale *)MEMORY[0x1E0C80C00];
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::basic_format((uint64_t *)v26, "([0-9a-f]+)%s([0-9]+)%s");
  v23[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSeparator;
  v23[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v23[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v26, v23);
  v23[0].__loc_.__locale_ = (std::locale::__imp *)&snlp::ssu::cache::SSUCacheDirectory::kCacheFileSuffix;
  v23[0].__ct_ = (const std::ctype<char> *)boost::io::detail::call_put_head<char,std::char_traits<char>,std::string_view const>;
  v23[0].__col_ = (const std::collate<char> *)boost::io::detail::call_put_last<char,std::char_traits<char>,std::string_view const>;
  boost::io::detail::feed_impl<char,std::char_traits<char>,std::allocator<char>,boost::io::detail::put_holder<char,std::char_traits<char>> const&>((uint64_t *)v26, v23);
  boost::basic_format<char,std::char_traits<char>,std::allocator<char>>::str(&v25, (uint64_t *)v26);
  if (v33)
  {
    std::locale::~locale(v34);
    v33 = 0;
  }
  boost::io::basic_altstringbuf<char,std::char_traits<char>,std::allocator<char>>::~basic_altstringbuf((uint64_t)v31);
  if (SHIBYTE(v29) < 0)
    operator delete(__p);
  if (v26[3])
    operator delete(v26[3]);
  v23[0].__loc_.__locale_ = (std::locale::__imp *)v26;
  std::vector<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v23, (uint64_t)&v25);
  v26[6] = 0;
  v26[7] = 0;
  LOBYTE(__p) = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31[0] = 0;
  v32 = 0;
  memset(v26, 0, 41);
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0)
    v5 = (std::sub_match<const char *> *)a1;
  else
    v5 = *(std::sub_match<const char *> **)a1;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if ((std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v5, (std::sub_match<const char *> *)((char *)v5 + v4), (uint64_t)v26, (uint64_t)v23) & 1) != 0)
  {
    v6 = (char *)v26[0];
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26[1] - (char *)v26[0]) >> 3);
    if (v7 <= 1)
      v8 = v26;
    else
      v8 = (void **)v26[0];
    if (*((_BYTE *)v8 + 40))
    {
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v21, (char *)v8[3], (char *)v8[4], (_BYTE *)v8[4] - (_BYTE *)v8[3]);
    }
    else
    {
      v21[0] = 0;
      v21[1] = 0;
      v22 = 0;
    }
    v9 = &v26[5];
    if (v7 > 2)
      v9 = (void **)(v6 + 64);
    if (*(_BYTE *)v9)
    {
      v10 = (char **)&v26[3];
      if (v7 > 2)
        v10 = (char **)(v6 + 48);
      v11 = *v10;
      v12 = (char **)(v6 + 56);
      if (v7 <= 2)
        v12 = (char **)&v26[4];
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(v19, v11, *v12, *v12 - v11);
    }
    else
    {
      v19[0] = 0;
      v19[1] = 0;
      v20 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "unknown");
    snlp::ssu::cache::makeV3CacheFileName((const void **)v21, (uint64_t)v16, (uint64_t)v19, &v18);
    *a2 = v18;
    a2[1].__r_.__value_.__s.__data_[0] = 1;
    if (v17 < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
  else
  {
    a2->__r_.__value_.__s.__data_[0] = 0;
    a2[1].__r_.__value_.__s.__data_[0] = 0;
    v6 = (char *)v26[0];
  }
  if (v6)
    operator delete(v6);
  v13 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::locale::~locale(&v23[0].__loc_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
}

void sub_1C22CC7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  void *v38;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;

  if (a24 < 0)
    operator delete(__p);
  if (v38)
    operator delete(v38);
  v40 = (std::__shared_weak_count *)a31;
  if (a31)
  {
    v41 = (unint64_t *)(a31 + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  std::locale::~locale(&a25);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0,std::allocator<snlp::ssu::cache::migrateDirectoryV2ToV3(std::__fs::filesystem::path const&)::$_0>,std::optional<std::string> ()(std::string const&)>::target_type()
{
}

BOOL snlp::ssu::cache::initializeDirectoryV3(std::__fs::filesystem::path *this, const std::__fs::filesystem::path *a2)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  const std::__fs::filesystem::path *v5;
  unsigned __int8 v6;
  NSObject *v7;
  _BOOL8 result;
  std::__fs::filesystem::path *v9;
  NSObject *v10;
  NSObject *v11;
  const std::__fs::filesystem::path *v12;
  std::__fs::filesystem::path *v13;
  NSObject *v14;
  const std::__fs::filesystem::path *v15;
  std::__fs::filesystem::path *v16;
  std::string __p;
  uint64_t v18;
  std::__fs::filesystem::path v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  std::__fs::filesystem::__status(this, 0);
  if (__p.__r_.__value_.__s.__data_[0] == 2)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV3Name);
    std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
    std::__fs::filesystem::__status(&v19, 0);
    v3 = v18;
    if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v3 && v3 != 255)
    {
      v10 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(v19.__pn_.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "Using existing v3 format directory", (uint8_t *)&v19, 2u);
      }
    }
    else
    {
      std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV2Name);
      std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
      std::__fs::filesystem::__status(&v19, 0);
      v4 = v18;
      if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v4 && v4 != 255)
      {
        v11 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = this;
          else
            v13 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
          LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
          _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Migrating existing v2 directory: %s", (uint8_t *)&v19, 0xCu);
        }
        snlp::ssu::cache::migrateDirectoryV2ToV3((snlp::ssu::cache *)this, v12);
      }
      else
      {
        std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&__p, (uint64_t)&snlp::ssu::cache::kFormatVersionV1Name);
        std::__fs::filesystem::operator/[abi:ne180100](&v19.__pn_, (uint64_t)this, (std::__fs::filesystem::path *)&__p);
        std::__fs::filesystem::__status(&v19, 0);
        v6 = v18;
        if (SHIBYTE(v19.__pn_.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__pn_.__r_.__value_.__l.__data_);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v6 && v6 != 255)
        {
          v14 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = this;
            else
              v16 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
            LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v16;
            _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "Migrating existing v1 directory: %s", (uint8_t *)&v19, 0xCu);
          }
          snlp::ssu::cache::migrateDirectoryV1ToV3((snlp::ssu::cache *)this, v15);
        }
        else
        {
          snlp::ssu::cache::initializeEmptyDirectoryV3((snlp::ssu::cache *)this, v5);
        }
      }
    }
    return 1;
  }
  else
  {
    v7 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
    if (result)
    {
      if ((this->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = this;
      else
        v9 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
      LODWORD(v19.__pn_.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v19.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "Not a directory: %s", (uint8_t *)&v19, 0xCu);
      return 0;
    }
  }
  return result;
}

void sub_1C22CCC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 __p, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  uint64_t v24;

  if (a20 < 0)
    operator delete((void *)__p);
  if (a14 < 0)
    operator delete(a9);
  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(exception_object);
    v23 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v24;
      _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_ERROR, "Hit filesystem during cache directory initialization with error: %s)", (uint8_t *)&__p, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22CCB38);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t EdgeName;
  unsigned __int8 v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  int v13;
  void **v14;
  void **v15;
  void **v16;
  uint64_t v17;
  NSObject *v18;
  _QWORD *v19;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  uint8_t buf[4];
  _QWORD *v26;
  __int16 v27;
  void **v28;
  __int16 v29;
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  EdgeName = siri::ontology::UsoVocabManager::getEdgeName();
  v9 = v8;
  v10 = SNLPOSLoggerForCategory(1);
  v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = (_QWORD *)(EdgeName + 8);
      if (*(char *)(EdgeName + 31) < 0)
        v12 = (_QWORD *)*v12;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(v23, a2);
      v13 = v24;
      v14 = (void **)v23[0];
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a4 + 48))(__p, a4);
      v15 = v23;
      if (v13 < 0)
        v15 = v14;
      if (v22 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      v26 = v12;
      v27 = 2080;
      v28 = v15;
      v29 = 2080;
      v30 = v16;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Attaching %s edge, binding %s to %s.", buf, 0x20u);
      if (v22 < 0)
        operator delete(__p[0]);
      if (v24 < 0)
        operator delete(v23[0]);
    }
    siri::ontology::UsoGraphNode::setSuccessor();
    v17 = 1;
    v18 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEBUG, "Insertion of subtree was successful.", buf, 2u);
    }
  }
  else
  {
    v17 = 0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0)
        v19 = (_QWORD *)a3;
      else
        v19 = *(_QWORD **)a3;
      *(_DWORD *)buf = 136315138;
      v26 = v19;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEFAULT, "Warning: could not look up ontology name for edge '%s'", buf, 0xCu);
      return 0;
    }
  }
  return v17;
}

void sub_1C22CCF8C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 buf)
{
  void *v20;
  NSObject *v21;
  uint64_t v22;

  if (a17 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    v20 = __cxa_begin_catch(a1);
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
      LODWORD(buf) = 136642819;
      *(_QWORD *)((char *)&buf + 4) = v22;
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEBUG, "Could not insert subtree: %{sensitive}s ", (uint8_t *)&buf, 0xCu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22CCF4CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointIncludingParent(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t *a5, std::string *a6, uint64_t a7)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  void *v19;
  int v20;
  std::string *v21;
  __int128 v22;
  NSObject *v23;
  std::string *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  siri::ontology::UsoGraph *v30;
  std::string::size_type v31;
  UsoGraphNode *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t Successors;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  std::string::size_type v59;
  uint64_t v60;
  int v61;
  unsigned __int8 *v62;
  std::string *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t *__p;
  uint64_t v76[2];
  siri::ontology::UsoGraph *v77;
  char v78;
  std::string v79;
  std::string v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (*(_QWORD *)(a2 + 32) / 0x1AuLL)) + 152 * (*(_QWORD *)(a2 + 32) % 0x1AuLL);
  v13 = *(_QWORD *)(v11 + 88);
  v12 = *(_QWORD *)(v11 + 96);
  if (v13 != v12)
  {
    while (1)
    {
      if (*(char *)(a7 + 23) < 0)
        std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
      else
        v79 = *(std::string *)a7;
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v79.__r_.__value_.__r.__words[2]);
      else
        size = v79.__r_.__value_.__l.__size_;
      v15 = *(unsigned __int8 *)(v13 + 71);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(v13 + 56);
      if (size == v15)
      {
        if (v16 >= 0)
          v17 = (unsigned __int8 *)(v13 + 48);
        else
          v17 = *(unsigned __int8 **)(v13 + 48);
        if ((*((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v19 = (void *)v79.__r_.__value_.__r.__words[0];
          v20 = memcmp(v79.__r_.__value_.__l.__data_, v17, v79.__r_.__value_.__l.__size_);
          operator delete(v19);
          if (!v20)
            break;
          goto LABEL_23;
        }
        if (!*((_BYTE *)&v79.__r_.__value_.__s + 23))
          break;
        v18 = 0;
        while (v79.__r_.__value_.__s.__data_[v18] == v17[v18])
        {
          if (HIBYTE(v79.__r_.__value_.__r.__words[2]) == ++v18)
            goto LABEL_25;
        }
      }
      if ((*((_BYTE *)&v79.__r_.__value_.__s + 23) & 0x80) != 0)
        operator delete(v79.__r_.__value_.__l.__data_);
LABEL_23:
      v13 += 144;
      if (v13 == v12)
      {
        v13 = v12;
        break;
      }
    }
  }
LABEL_25:
  if (v13 == *(_QWORD *)(v11 + 96))
    return 0;
  std::operator+<char>();
  v21 = std::string::append(&v80, "\n");
  v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v79.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
  v23 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    v24 = &v79;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = (std::string *)v79.__r_.__value_.__r.__words[0];
    LODWORD(v80.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v80.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v80, 0xCu);
  }
  v25 = (std::__shared_weak_count *)a4[1];
  v76[0] = *a4;
  v76[1] = (uint64_t)v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(p_shared_owners);
    while (__stxr(v27 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity((unsigned __int8 *)a7, v13, a5, (unsigned __int8 *)v11, v76, a6, &v77);
  if (v25)
  {
    v28 = (unint64_t *)&v25->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v78)
  {
    v47 = 0;
    goto LABEL_108;
  }
  v30 = v77;
  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(*((_QWORD *)v77 + 11) + 8), *((const UsoGraphNode **)v77 + 11));
  v31 = v80.__r_.__value_.__l.__size_ - v80.__r_.__value_.__r.__words[0];
  if (v80.__r_.__value_.__r.__words[0])
  {
    v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
    operator delete(v80.__r_.__value_.__l.__data_);
  }
  if (v31 != 8)
  {
    v47 = 0;
    goto LABEL_106;
  }
  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(*((_QWORD *)v30 + 11) + 8), *((const UsoGraphNode **)v30 + 11));
  v32 = *(UsoGraphNode **)v80.__r_.__value_.__l.__data_;
  v80.__r_.__value_.__l.__size_ = v80.__r_.__value_.__r.__words[0];
  operator delete(v80.__r_.__value_.__l.__data_);
  (*((void (**)(std::string *__return_ptr, UsoGraphNode *))v32->var0 + 6))(&v80, v32);
  v33 = (std::__shared_weak_count *)a4[1];
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfTimeDateReplacementHackApplies(a1, v32, v11 + 48);
  v37 = v36;
  if (!v33)
    goto LABEL_51;
  v38 = (unint64_t *)&v33->__shared_owners_;
  do
    v39 = __ldaxr(v38);
  while (__stlxr(v39 - 1, v38));
  if (!v39)
  {
    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
    std::__shared_weak_count::__release_weak(v33);
    if (v37)
      goto LABEL_52;
  }
  else
  {
LABEL_51:
    if (v36)
    {
LABEL_52:
      if (!v78)
        std::__throw_bad_optional_access[abi:ne180100]();
      v40 = siri::ontology::UsoGraph::deepCopyToGraph(v77, v32, a3);
      v41 = *(_QWORD *)(v11 + 144);
      v42 = (std::__shared_weak_count *)a4[1];
      if (v42)
      {
        v43 = (unint64_t *)&v42->__shared_owners_;
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(v40, v40, a1, v41);
      if (!v42)
        goto LABEL_101;
      v45 = (unint64_t *)&v42->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      goto LABEL_99;
    }
  }
  if (nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfCommonIntegerHackApplies(a1, (siri::ontology::UsoGraph **)v32, (unsigned __int8 *)(v11 + 48)))
  {
    if (!v78)
      std::__throw_bad_optional_access[abi:ne180100]();
    v48 = siri::ontology::UsoGraph::deepCopyToGraph(v77, v32, a3);
    Successors = siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v48 + 8), (const UsoGraphNode *)v48);
    v50 = *__p;
    v51 = *(_QWORD *)(v11 + 144);
    v52 = (std::__shared_weak_count *)a4[1];
    if (v52)
    {
      v53 = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(Successors, v50, v11 + 48, v51);
    if (v52)
    {
      v55 = (unint64_t *)&v52->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (__p)
      operator delete(__p);
    goto LABEL_101;
  }
  v57 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  v58 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  else
    v59 = v80.__r_.__value_.__l.__size_;
  v60 = *(unsigned __int8 *)(v11 + 23);
  v61 = (char)v60;
  if ((v60 & 0x80u) != 0)
    v60 = *(_QWORD *)(v11 + 8);
  if (v59 == v60)
  {
    if (v61 >= 0)
      v62 = (unsigned __int8 *)v11;
    else
      v62 = *(unsigned __int8 **)v11;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    {
      v64 = (void *)v80.__r_.__value_.__r.__words[0];
      if (!memcmp(v80.__r_.__value_.__l.__data_, v62, v80.__r_.__value_.__l.__size_))
      {
        v47 = 0;
        goto LABEL_104;
      }
    }
    else
    {
      if (!*((_BYTE *)&v80.__r_.__value_.__s + 23))
      {
        v47 = 0;
        goto LABEL_105;
      }
      v63 = &v80;
      while (v63->__r_.__value_.__s.__data_[0] == *v62)
      {
        v63 = (std::string *)((char *)v63 + 1);
        ++v62;
        if (!--v57)
        {
          v47 = 0;
          goto LABEL_102;
        }
      }
    }
  }
  if (!v78)
    std::__throw_bad_optional_access[abi:ne180100]();
  v65 = siri::ontology::UsoGraph::deepCopyToGraph(v77, v32, a3);
  v66 = *(_QWORD *)(v11 + 144);
  v42 = (std::__shared_weak_count *)a4[1];
  if (v42)
  {
    v67 = (unint64_t *)&v42->__shared_owners_;
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode(v65, v65, v11 + 48, v66);
  if (v42)
  {
    v69 = (unint64_t *)&v42->__shared_owners_;
    do
      v46 = __ldaxr(v69);
    while (__stlxr(v46 - 1, v69));
LABEL_99:
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
LABEL_101:
  std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(a2);
  v47 = 1;
  v58 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
LABEL_102:
  if (v58 < 0)
  {
    v64 = (void *)v80.__r_.__value_.__r.__words[0];
LABEL_104:
    operator delete(v64);
  }
LABEL_105:
  if (v78)
  {
LABEL_106:
    if (v77)
    {
      v70 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v70, 0x10A0C403D23BABBLL);
    }
  }
LABEL_108:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  return v47;
}

void sub_1C22CD6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (*(char *)(v34 - 105) < 0)
    operator delete(*(void **)(v34 - 128));
  if ((_BYTE)a26)
    std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a25);
  if (a34 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfTimeDateReplacementHackApplies(uint64_t a1, const void *a2, std::string::size_type a3)
{
  uint64_t EdgeName;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  NSObject *v12;
  _BOOL8 v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  BOOL v30;
  std::string __p;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  EdgeName = siri::ontology::UsoVocabManager::getEdgeName();
  if (!v7)
  {
    v12 = SNLPOSLoggerForCategory(1);
    v13 = 0;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      return v13;
    if (*(char *)(a3 + 23) >= 0)
      v14 = a3;
    else
      v14 = *(_QWORD *)a3;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v14;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEFAULT, "Warning: could not look up ontology name for parent argument '%s'", (uint8_t *)&__p, 0xCu);
    return 0;
  }
  v8 = EdgeName;
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 16))(a2) != 2)
    return 0;
  if (!v9)
    __cxa_bad_cast();
  v10 = v9[3];
  if (*(char *)(v10 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v10 + 8), *(_QWORD *)(v10 + 16));
  }
  else
  {
    v11 = *(_OWORD *)(v10 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v10 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
  }
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 48), (unsigned __int8 *)&__p))goto LABEL_32;
  v15 = *(unsigned __int8 *)(a1 + 47);
  if ((v15 & 0x80u) == 0)
    v16 = *(unsigned __int8 *)(a1 + 47);
  else
    v16 = *(_QWORD *)(a1 + 32);
  v17 = *(unsigned __int8 *)(v8 + 31);
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(v8 + 16);
  if (v16 == v17)
  {
    v19 = (const void **)(a1 + 24);
    v22 = *(unsigned __int8 **)(v8 + 8);
    v21 = (unsigned __int8 *)(v8 + 8);
    v20 = v22;
    if (v18 >= 0)
      v23 = v21;
    else
      v23 = v20;
    if ((v15 & 0x80) != 0)
    {
      v13 = memcmp(*v19, v23, *(_QWORD *)(a1 + 32)) == 0;
    }
    else if (*(_BYTE *)(a1 + 47))
    {
      v24 = v15 - 1;
      do
      {
        v26 = *(unsigned __int8 *)v19;
        v19 = (const void **)((char *)v19 + 1);
        v25 = v26;
        v28 = *v23++;
        v27 = v28;
        v30 = v24-- != 0;
        v13 = v25 == v27;
      }
      while (v25 == v27 && v30);
    }
    else
    {
      v13 = 1;
    }
  }
  else
  {
LABEL_32:
    v13 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v13;
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::checkIfCommonIntegerHackApplies(uint64_t a1, siri::ontology::UsoGraph **a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  unsigned __int8 v9;
  const void **v10;
  void **v11;
  _BOOL4 v12;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v20;

  v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 200), a3);
  (*((void (**)(void **__return_ptr, siri::ontology::UsoGraph **))*a2 + 6))(__p, a2);
  v6 = *(unsigned __int8 *)(a1 + 263);
  if ((v6 & 0x80u) == 0)
    v7 = (void *)*(unsigned __int8 *)(a1 + 263);
  else
    v7 = *(void **)(a1 + 248);
  v8 = v20;
  v9 = v20;
  if ((v20 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  if (v7 != (void *)v8)
    goto LABEL_16;
  v10 = (const void **)(a1 + 240);
  if ((v20 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(_QWORD *)(a1 + 248)))
      goto LABEL_16;
  }
  else if (*(_BYTE *)(a1 + 263))
  {
    while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      v11 = (void **)((char *)v11 + 1);
      if (!--v6)
        goto LABEL_21;
    }
LABEL_16:
    v12 = 0;
    if ((v9 & 0x80) == 0)
      return v5 && v12;
    goto LABEL_17;
  }
LABEL_21:
  siri::ontology::UsoGraph::getSuccessors(a2[1], (const UsoGraphNode *)a2);
  v14 = v17;
  if (v18 - (_QWORD)v17 != 8)
  {
    v12 = 0;
    if (!v17)
      goto LABEL_29;
    goto LABEL_28;
  }
  siri::ontology::UsoGraph::getSuccessors(a2[1], (const UsoGraphNode *)a2);
  if (v16 == v15)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 16))(*v15) == 4;
  if (v15)
    operator delete(v15);
  v14 = v17;
  if (v17)
LABEL_28:
    operator delete(v14);
LABEL_29:
  if ((v20 & 0x80) != 0)
LABEL_17:
    operator delete(__p[0]);
  return v5 && v12;
}

void sub_1C22CDB0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(uint64_t a1)
{
  int64x2_t v2;

  std::allocator<nlv4_inference_orchestrator::trees::TreeNode>::destroy[abi:ne180100](*(_QWORD *)(*(_QWORD *)(a1 + 8)
                                                                                                + 8
                                                                                                * (*(_QWORD *)(a1 + 32)
                                                                                                 / 0x1AuLL)) + 152 * (*(_QWORD *)(a1 + 32) % 0x1AuLL));
  v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1C230B570);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x34uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 26;
  }
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointOnly(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t *a5, std::string *a6, uint64_t a7)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type size;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  int v21;
  int v22;
  void *v24;
  int v25;
  _BOOL8 v26;
  std::string *v28;
  __int128 v29;
  NSObject *v30;
  void **v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  siri::ontology::UsoGraph *v37;
  std::string::size_type v38;
  uint64_t v39;
  const UsoGraphNode **v40;
  std::string::size_type v41;
  const UsoGraphNode *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  void *__p;
  std::string v54;
  uint64_t v55[2];
  siri::ontology::UsoGraph *v56;
  char v57;
  void *v58[2];
  int64_t v59;
  std::string v60;
  std::string v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * (v13 / 0x1A));
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    v60 = *(std::string *)a7;
  v15 = v14 + 152 * (v13 % 0x1A);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    size = v60.__r_.__value_.__l.__size_;
  v17 = *(unsigned __int8 *)(v15 + 71);
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(v15 + 56);
  if (size != v17)
  {
    if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    return 0;
  }
  if (v18 >= 0)
    v19 = (unsigned __int8 *)(v15 + 48);
  else
    v19 = *(unsigned __int8 **)(v15 + 48);
  if ((*((_BYTE *)&v60.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((_BYTE *)&v60.__r_.__value_.__s + 23))
      goto LABEL_28;
    v20 = 0;
    do
    {
      v21 = v60.__r_.__value_.__s.__data_[v20];
      v22 = v19[v20];
    }
    while (v21 == v22 && HIBYTE(v60.__r_.__value_.__r.__words[2]) - 1 != v20++);
    if (v21 == v22)
      goto LABEL_28;
    return 0;
  }
  v24 = (void *)v60.__r_.__value_.__r.__words[0];
  v25 = memcmp(v60.__r_.__value_.__l.__data_, v19, v60.__r_.__value_.__l.__size_);
  operator delete(v24);
  if (v25)
    return 0;
LABEL_28:
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(v15 + 144) + 48))(&v60);
  std::operator+<char>();
  v28 = std::string::append(&v61, "\n");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v59 = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)v58 = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  v30 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    v31 = v58;
    if (v59 < 0)
      v31 = (void **)v58[0];
    LODWORD(v61.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v61.__r_.__value_.__r.__words + 4) = (std::string::size_type)v31;
    _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v61, 0xCu);
  }
  v32 = (std::__shared_weak_count *)a4[1];
  v55[0] = *a4;
  v55[1] = (uint64_t)v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(p_shared_owners);
    while (__stxr(v34 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::trees::SpanUsoInserter::findSpanEntity((unsigned __int8 *)a7, v15, a5, (unsigned __int8 *)&v60, v55, a6, &v56);
  if (v32)
  {
    v35 = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (!v57)
  {
    v26 = 0;
    goto LABEL_71;
  }
  v37 = v56;
  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(*((_QWORD *)v56 + 11) + 8), *((const UsoGraphNode **)v56 + 11));
  v38 = v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0];
  v26 = v61.__r_.__value_.__l.__size_ - v61.__r_.__value_.__r.__words[0] == 8;
  if (v61.__r_.__value_.__r.__words[0])
  {
    v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
    operator delete(v61.__r_.__value_.__l.__data_);
  }
  if (v38 != 8)
    goto LABEL_67;
  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(*((_QWORD *)v37 + 11) + 8), *((const UsoGraphNode **)v37 + 11));
  v39 = *(_QWORD *)v61.__r_.__value_.__l.__data_;
  v61.__r_.__value_.__l.__size_ = v61.__r_.__value_.__r.__words[0];
  operator delete(v61.__r_.__value_.__l.__data_);
  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(v39 + 8), (const UsoGraphNode *)v39);
  v41 = v61.__r_.__value_.__l.__size_;
  v40 = (const UsoGraphNode **)v61.__r_.__value_.__r.__words[0];
  if (v61.__r_.__value_.__r.__words[0] == v61.__r_.__value_.__l.__size_)
    goto LABEL_64;
  do
  {
    if (!v57)
      std::__throw_bad_optional_access[abi:ne180100]();
    v42 = *v40;
    v43 = siri::ontology::UsoGraph::deepCopyToGraph(v56, *v40, a3);
    siri::ontology::UsoGraph::getPredecessorsWithEdges((siri::ontology::UsoGraph *)v42->var1, v42);
    v44 = __p;
    v45 = *((_QWORD *)__p + 1);
    if (*(char *)(v45 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(v45 + 32), *(_QWORD *)(v45 + 40));
      v44 = __p;
      if (!__p)
        goto LABEL_52;
    }
    else
    {
      v54 = *(std::string *)(v45 + 32);
    }
    operator delete(v44);
LABEL_52:
    v46 = *(_QWORD *)(v15 + 144);
    v47 = (std::__shared_weak_count *)a4[1];
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryAttachSubtreeViaEdgeToNode((uint64_t)v44, v43, (uint64_t)&v54, v46);
    if (v47)
    {
      v50 = (unint64_t *)&v47->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
    ++v40;
  }
  while (v40 != (const UsoGraphNode **)v41);
  v40 = (const UsoGraphNode **)v61.__r_.__value_.__r.__words[0];
LABEL_64:
  if (v40)
  {
    v61.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
    operator delete(v40);
  }
  std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front(a2);
  if (v57)
  {
LABEL_67:
    if (v56)
    {
      v52 = MEMORY[0x1C3BB916C]();
      MEMORY[0x1C3BB9B44](v52, 0x10A0C403D23BABBLL);
    }
  }
  else
  {
    v26 = 1;
  }
LABEL_71:
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return v26;
}

void sub_1C22CE0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](&a24);
  if (a31 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::UsoGraphBuilder::reinsertUsoEntity(uint64_t a1, uint64_t a2, siri::ontology::UsoGraph *a3, uint64_t *a4, uint64_t *a5, std::string *a6)
{
  uint64_t i;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL8 v20;
  NSObject *v21;
  const char *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v31[2];
  uint64_t v32[2];
  void *v33[2];
  char v34;
  void *v35[5];
  void *__p;
  char v37;
  uint8_t buf[24];
  _QWORD v39[3];
  _QWORD v40[4];

  v40[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v33, "usoEntityInsertionPoint");
  std::string::basic_string[abi:ne180100]<0>(buf, "common_Time");
  std::string::basic_string[abi:ne180100]<0>(v39, "common_Time12HourClock");
  std::string::basic_string[abi:ne180100]<0>(v40, "common_Time24HourClock");
  std::unordered_set<std::string>::unordered_set((uint64_t)v35, buf, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v40[i + 2]) < 0)
      operator delete((void *)v40[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  v13 = (std::__shared_weak_count *)a4[1];
  v32[0] = *a4;
  v32[1] = (uint64_t)v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointIncludingParent(a1, a2, a3, v32, a5, a6, (uint64_t)v33);
  v17 = v16;
  if (!v13)
    goto LABEL_12;
  v18 = (unint64_t *)&v13->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v17)
      goto LABEL_13;
  }
  else
  {
LABEL_12:
    if ((_DWORD)v16)
    {
LABEL_13:
      v20 = 1;
      v21 = SNLPOSLoggerForCategory(1);
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        goto LABEL_28;
      *(_WORD *)buf = 0;
      v22 = "Replaced the whole reinsertion subtree including the parent.";
      goto LABEL_27;
    }
  }
  v23 = *a4;
  v24 = (std::__shared_weak_count *)a4[1];
  v31[0] = v23;
  v31[1] = (uint64_t)v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v20 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::tryReplaceInsertionPointOnly(v16, a2, a3, v31, a5, a6, (uint64_t)v33);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v20)
  {
    v20 = 1;
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v22 = "Replaced only the reinsertion point itself.";
LABEL_27:
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEBUG, v22, buf, 2u);
    }
  }
LABEL_28:
  if (v37 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((void **)v35[2]);
  v29 = v35[0];
  v35[0] = 0;
  if (v29)
    operator delete(v29);
  if (v34 < 0)
    operator delete(v33[0]);
  return v20;
}

void sub_1C22CE440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  nlv4_inference_orchestrator::trees::SpanUsoInserter::~SpanUsoInserter(&__p);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::SpanUsoInserter::~SpanUsoInserter(void **this)
{
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::trees::UsoGraphBuilder::buildUsoGraphFromTreeNode@<X0>(uint64_t a1@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  siri::ontology::UsoGraph *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t EdgeName;
  char v32;
  uint64_t v33;
  std::string::size_type v34;
  std::string::size_type v35;
  uint64_t NodeName;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  NSObject *v50;
  void **v51;
  uint64_t result;
  char v53;
  void *v54;
  char v55;
  _QWORD v56[2];
  _QWORD v57[2];
  std::string v58;
  void *v59[2];
  unsigned __int8 v60;
  uint64_t v61[2];
  uint64_t v62;
  int v63;
  std::string v64;
  __int128 v65;
  uint64_t v66;
  __int128 __p;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  uint8_t buf[32];
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v62 = 1;
  v63 = 0;
  v10 = operator new();
  MEMORY[0x1C3BB9154](v10, &v62);
  *a5 = v10;
  v11 = *(_QWORD *)(v10 + 88);
  v75 = 0u;
  memset(buf, 0, sizeof(buf));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v64, a2);
  v12 = *(_QWORD *)&buf[8];
  v13 = 26 * ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)&buf[8]) >> 3) - 1;
  v73 = v11;
  if (*(_QWORD *)&buf[16] == *(_QWORD *)&buf[8])
    v13 = 0;
  v14 = *((_QWORD *)&v75 + 1) + v75;
  if (v13 == *((_QWORD *)&v75 + 1) + (_QWORD)v75)
  {
    std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(buf);
    v12 = *(_QWORD *)&buf[8];
    v14 = *((_QWORD *)&v75 + 1) + v75;
  }
  v15 = *(_QWORD *)(v12 + 8 * (v14 / 0x1A)) + 152 * (v14 % 0x1A);
  v16 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
  *(_QWORD *)(v15 + 16) = *((_QWORD *)&v64.__r_.__value_.__l + 2);
  *(_OWORD *)v15 = v16;
  memset(&v64, 0, sizeof(v64));
  v17 = v65;
  *(_QWORD *)(v15 + 40) = v66;
  *(_OWORD *)(v15 + 24) = v17;
  v66 = 0;
  v65 = 0uLL;
  v18 = __p;
  *(_QWORD *)(v15 + 64) = v68;
  *(_OWORD *)(v15 + 48) = v18;
  v68 = 0;
  __p = 0uLL;
  *(_OWORD *)(v15 + 72) = v69;
  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)(v15 + 88) = 0;
  *(_OWORD *)(v15 + 88) = v70;
  *(_QWORD *)(v15 + 104) = v71;
  v70 = 0uLL;
  v71 = 0;
  v19 = v72[1];
  *(_OWORD *)(v15 + 112) = v72[0];
  *(_OWORD *)(v15 + 128) = v19;
  *(_QWORD *)(v15 + 144) = v73;
  ++*((_QWORD *)&v75 + 1);
  v58.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  if (SHIBYTE(v68) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v66) < 0)
    operator delete((void *)v65);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (!*((_QWORD *)&v75 + 1))
  {
LABEL_64:
    std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)buf);
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v64);
    siri::ontology::UsoGraph::prettyPrint();
    v50 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      v51 = v55 >= 0 ? &v54 : (void **)v54;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = "NLv4";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "[insights-snlp-nlv4]: ";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v51;
      _os_log_impl(&dword_1C2196000, v50, OS_LOG_TYPE_DEBUG, "[%s] %sBuilt USO graph:\n %s", buf, 0x20u);
      if (v55 < 0)
        operator delete(v54);
    }
    v64.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words
                              + *(_QWORD *)(v64.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                + 24);
    v64.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
    if (SBYTE7(v70) < 0)
      operator delete((void *)v69);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x1C3BB9A90](v72);
  }
  v53 = 0;
  while (1)
  {
    v20 = v75;
    v21 = *(_QWORD *)(*(_QWORD *)&buf[8] + 8 * ((unint64_t)v75 / 0x1A));
    v22 = (siri::ontology::UsoGraph *)*a5;
    v23 = (std::__shared_weak_count *)a3[1];
    v61[0] = *a3;
    v61[1] = (uint64_t)v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    v26 = nlv4_inference_orchestrator::trees::UsoGraphBuilder::reinsertUsoEntity(a1, (uint64_t)buf, v22, v61, a4, (std::string *)a2);
    v27 = v26;
    if (v23)
    {
      v28 = (unint64_t *)&v23->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
        break;
    }
    if (!v26)
      goto LABEL_21;
LABEL_63:
    if (!*((_QWORD *)&v75 + 1))
      goto LABEL_64;
  }
  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
  std::__shared_weak_count::__release_weak(v23);
  if (v27)
    goto LABEL_63;
LABEL_21:
  v30 = v21 + 152 * (v20 % 0x1A);
  EdgeName = siri::ontology::UsoVocabManager::getEdgeName();
  if (!v32)
    return std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)buf);
  v33 = EdgeName;
  if (*(char *)(v30 + 23) < 0)
  {
    if (!*(_QWORD *)(v30 + 8))
      goto LABEL_50;
  }
  else if (!*(_BYTE *)(v30 + 23))
  {
    goto LABEL_50;
  }
  if (*(char *)(a1 + 135) < 0)
  {
    v35 = *(_QWORD *)(a1 + 112);
    v34 = *(_QWORD *)(a1 + 120);
  }
  else
  {
    v34 = *(unsigned __int8 *)(a1 + 135);
    v35 = a1 + 112;
  }
  v64.__r_.__value_.__r.__words[0] = v35;
  v64.__r_.__value_.__l.__size_ = v34;
  nlv4_inference_orchestrator::trees::split(&v58, (std::string *)(v21 + 152 * (v20 % 0x1A)), (const void **)&v64.__r_.__value_.__l.__data_);
  NodeName = siri::ontology::UsoVocabManager::getNodeName();
  v38 = v37;
  if (v37)
  {
    v39 = v60;
    if ((v60 & 0x80u) != 0)
      v39 = (unint64_t)v59[1];
    if (v39)
    {
      v40 = (std::__shared_weak_count *)a3[1];
      v57[0] = *a3;
      v57[1] = v40;
      if (v40)
      {
        v41 = (unint64_t *)&v40->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::addTaskNode(NodeName, v33, NodeName, (uint64_t)v59, (uint64_t)v57, buf);
      if (v40)
      {
        v43 = (unint64_t *)&v40->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
    }
    else
    {
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::addEntityNode(NodeName, v33, NodeName, buf);
    }
  }
  else
  {
    v53 = 1;
  }
  if ((char)v60 < 0)
    operator delete(v59[0]);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  if (v38)
  {
LABEL_50:
    if (*(char *)(v30 + 47) < 0)
    {
      if (!*(_QWORD *)(v30 + 32))
      {
LABEL_62:
        std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::pop_front((uint64_t)buf);
        goto LABEL_63;
      }
    }
    else if (!*(_BYTE *)(v30 + 47))
    {
      goto LABEL_62;
    }
    v45 = (std::__shared_weak_count *)a3[1];
    v56[0] = *a3;
    v56[1] = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::addPayloadNode(a1, v33, (uint64_t)v56, buf);
    if (v45)
    {
      v48 = (unint64_t *)&v45->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    goto LABEL_62;
  }
  result = std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)buf);
  if ((v53 & 1) == 0)
    return std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](a5);
  return result;
}

void sub_1C22CEB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint8_t buf)
{
  uint64_t *v29;

  std::ostringstream::~ostringstream((uint64_t)&buf);
  std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void sub_1C22CEBBC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 a29)
{
  uint64_t v29;
  void *v32;
  NSObject *v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  uint64_t v37;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a19);
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100](v29 - 160);
  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    v33 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 16))(v32);
      LODWORD(a29) = 136315138;
      *(_QWORD *)((char *)&a29 + 4) = v34;
      _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a29, 0xCu);
    }
  }
  else
  {
    if (a2 != 1)
      JUMPOUT(0x1C22CEB88);
    v35 = __cxa_begin_catch(a1);
    v36 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      v37 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 16))(v35);
      LODWORD(a29) = 136315138;
      *(_QWORD *)((char *)&a29 + 4) = v37;
      _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_DEBUG, " Warning: Could not generate USO graph: %s", (uint8_t *)&a29, 0xCu);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C22CE9DCLL);
}

void sub_1C22CEC04()
{
  JUMPOUT(0x1C22CEC10);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addEntityNode(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t OperatorNode;
  const nlv4_inference_orchestrator::trees::TreeNode *v7;
  const nlv4_inference_orchestrator::trees::TreeNode *j;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t EntityNode;
  const nlv4_inference_orchestrator::trees::TreeNode *v20;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  std::string v22;
  __int128 v23;
  uint64_t v24;
  __int128 __p;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void **v33[2];

  v5 = *(_QWORD *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  if ((*(_DWORD *)(a3 + 32) - 5) > 1)
  {
    EntityNode = siri::ontology::UsoGraph::createEntityNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    v20 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
    for (i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
          v20 != i;
          v20 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v20 + 144))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v22, v20);
      v32 = EntityNode;
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(a4, (__int128 *)&v22);
      v33[0] = (void **)&v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v33);
      if (SHIBYTE(v26) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    OperatorNode = siri::ontology::UsoGraph::createOperatorNode();
    siri::ontology::UsoGraphNode::setSuccessor();
    v7 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
    for (j = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
          v7 != j;
          v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144))
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v22, v7);
      v9 = a4[1];
      v10 = a4[2] == v9;
      v11 = 26 * ((a4[2] - v9) >> 3) - 1;
      v32 = OperatorNode;
      if (v10)
        v12 = 0;
      else
        v12 = v11;
      v13 = a4[5] + a4[4];
      if (v12 == v13)
      {
        std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a4);
        v9 = a4[1];
        v13 = a4[5] + a4[4];
      }
      v14 = *(_QWORD *)(v9 + 8 * (v13 / 0x1A)) + 152 * (v13 % 0x1A);
      v15 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(_QWORD *)(v14 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)v14 = v15;
      memset(&v22, 0, sizeof(v22));
      v16 = v23;
      *(_QWORD *)(v14 + 40) = v24;
      *(_OWORD *)(v14 + 24) = v16;
      v24 = 0;
      v23 = 0uLL;
      v17 = __p;
      *(_QWORD *)(v14 + 64) = v26;
      *(_OWORD *)(v14 + 48) = v17;
      v26 = 0;
      __p = 0uLL;
      *(_OWORD *)(v14 + 72) = v27;
      *(_QWORD *)(v14 + 96) = 0;
      *(_QWORD *)(v14 + 104) = 0;
      *(_QWORD *)(v14 + 88) = 0;
      *(_OWORD *)(v14 + 88) = v28;
      *(_QWORD *)(v14 + 104) = v29;
      v28 = 0uLL;
      v29 = 0;
      v18 = v31;
      *(_OWORD *)(v14 + 112) = v30;
      *(_OWORD *)(v14 + 128) = v18;
      *(_QWORD *)(v14 + 144) = v32;
      ++a4[5];
      v33[0] = (void **)&v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](v33);
      if (SHIBYTE(v26) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C22CEFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addTaskNode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t TaskNode;
  const nlv4_inference_orchestrator::trees::TreeNode *v12;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::runtime_error *exception;
  std::string *v25;
  __int128 v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;
  __int128 __p;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  std::string v38;

  v7 = a6[4];
  v8 = *(_QWORD *)(a6[1] + 8 * (v7 / 0x1A));
  siri::ontology::UsoVocabManager::getVerbName();
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v25 = std::string::append(&v38, " not found in ontology.");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v27);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v8 + 152 * (v7 % 0x1A);
  TaskNode = siri::ontology::UsoGraph::createTaskNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  v12 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 88);
  for (i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v10 + 96);
        v12 != i;
        v12 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v12 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v27, v12);
    v14 = a6[1];
    v15 = a6[2] == v14;
    v16 = 26 * ((a6[2] - v14) >> 3) - 1;
    v37 = TaskNode;
    if (v15)
      v17 = 0;
    else
      v17 = v16;
    v18 = a6[5] + a6[4];
    if (v17 == v18)
    {
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a6);
      v14 = a6[1];
      v18 = a6[5] + a6[4];
    }
    v19 = *(_QWORD *)(v14 + 8 * (v18 / 0x1A)) + 152 * (v18 % 0x1A);
    v20 = *(_OWORD *)&v27.__r_.__value_.__l.__data_;
    *(_QWORD *)(v19 + 16) = *((_QWORD *)&v27.__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v20;
    memset(&v27, 0, sizeof(v27));
    v21 = v28;
    *(_QWORD *)(v19 + 40) = v29;
    *(_OWORD *)(v19 + 24) = v21;
    v29 = 0;
    v28 = 0uLL;
    v22 = __p;
    *(_QWORD *)(v19 + 64) = v31;
    *(_OWORD *)(v19 + 48) = v22;
    v31 = 0;
    __p = 0uLL;
    *(_OWORD *)(v19 + 72) = v32;
    *(_QWORD *)(v19 + 96) = 0;
    *(_QWORD *)(v19 + 104) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    *(_OWORD *)(v19 + 88) = v33;
    *(_QWORD *)(v19 + 104) = v34;
    v33 = 0uLL;
    v34 = 0;
    v23 = v36;
    *(_OWORD *)(v19 + 112) = v35;
    *(_OWORD *)(v19 + 128) = v23;
    *(_QWORD *)(v19 + 144) = v37;
    ++a6[5];
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    if (SHIBYTE(v31) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1C22CF2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 89) < 0)
  {
    operator delete(*(void **)(v16 - 112));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addPayloadNode(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v7;
  uint64_t NodeName;
  char v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;

  v7 = *(_QWORD *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  NodeName = siri::ontology::UsoVocabManager::getNodeName();
  if (v9)
  {
    nlv4_inference_orchestrator::trees::UsoGraphBuilder::addDefinedValuePayloadNode(NodeName, a2, NodeName, a4);
  }
  else
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v7 + 144) + 16))(*(_QWORD *)(v7 + 144)) == 2)
    {
      if (!v10)
        __cxa_bad_cast();
      v11 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(*(uint64_t **)(a1 + 176), (unsigned __int8 **)(v10[3] + 8)) != 0;
    }
    else
    {
      v11 = 0;
    }
    v12 = std::__find_impl[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::__hash_const_iterator<std::__hash_node<std::string,void *> *>,std::string,std::__identity>(*(uint64_t **)(a1 + 216), (unsigned __int8 **)(v7 + 48));
    if (v11 || v12)
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::addIntegerPayloadNode((uint64_t)v12, a2, a4);
    else
      nlv4_inference_orchestrator::trees::UsoGraphBuilder::addStringPayloadNode(0, a2, a4);
  }
}

void sub_1C22CF478(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int16 a9)
{
  NSObject *v9;

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    v9 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      a9 = 0;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "Failed to cast entity node to entity node; SiriOntology reports a non-entity node as an entity node.",
        (uint8_t *)&a9,
        2u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1C22CF458);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addDefinedValuePayloadNode(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  uint64_t EntityNode;
  const nlv4_inference_orchestrator::trees::TreeNode *v7;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  std::string v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  _QWORD v14[8];
  void **v15;

  v5 = *(_QWORD *)(a4[1] + 8 * (a4[4] / 0x1AuLL)) + 152 * (a4[4] % 0x1AuLL);
  EntityNode = siri::ontology::UsoGraph::createEntityNode();
  siri::ontology::UsoGraphNode::setSuccessor();
  v7 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 88);
  for (i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v5 + 96);
        v7 != i;
        v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v9, v7);
    v14[7] = EntityNode;
    std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(a4, (__int128 *)&v9);
    v15 = (void **)v14;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v15);
    if (v13 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_1C22CF5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addIntegerPayloadNode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t IntNode;
  std::string::size_type v5;
  std::string::pointer data;
  std::string::size_type size;
  std::string::size_type v8;
  uint64_t v9;
  const nlv4_inference_orchestrator::trees::TreeNode *v10;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const std::string *v22;
  uint64_t v23;
  void **v24;
  std::string v25;
  __int128 v26;
  uint64_t v27;
  __int128 __p;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v22 = (const std::string *)(*(_QWORD *)(a3[1] + 8 * (a3[4] / 0x1AuLL)) + 152 * (a3[4] % 0x1AuLL));
  std::stoi(v22 + 1, 0, 10);
  IntNode = siri::ontology::UsoGraph::createIntNode();
  v5 = v22[4].__r_.__value_.__r.__words[2];
  data = v22[5].__r_.__value_.__l.__data_;
  size = v22[5].__r_.__value_.__l.__size_;
  v8 = v22[5].__r_.__value_.__r.__words[2];
  v9 = operator new();
  siri::ontology::UsoUtteranceAlignment::UsoUtteranceAlignment(v9, v5, (int)data, size, v8);
  v23 = v9;
  siri::ontology::UsoEntityNode::addUtteranceAlignment();
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&v23);
  siri::ontology::UsoGraphNode::setSuccessor();
  v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)v22[3].__r_.__value_.__r.__words[2];
  for (i = (const nlv4_inference_orchestrator::trees::TreeNode *)v22[4].__r_.__value_.__l.__data_;
        v10 != i;
        v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v10 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v25, v10);
    v12 = a3[1];
    v13 = a3[2] == v12;
    v14 = 26 * ((a3[2] - v12) >> 3) - 1;
    v35 = IntNode;
    if (v13)
      v15 = 0;
    else
      v15 = v14;
    v16 = a3[5] + a3[4];
    if (v15 == v16)
    {
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a3);
      v12 = a3[1];
      v16 = a3[5] + a3[4];
    }
    v17 = *(_QWORD *)(v12 + 8 * (v16 / 0x1A)) + 152 * (v16 % 0x1A);
    v18 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
    *(_QWORD *)(v17 + 16) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
    *(_OWORD *)v17 = v18;
    memset(&v25, 0, sizeof(v25));
    v19 = v26;
    *(_QWORD *)(v17 + 40) = v27;
    *(_OWORD *)(v17 + 24) = v19;
    v27 = 0;
    v26 = 0uLL;
    v20 = __p;
    *(_QWORD *)(v17 + 64) = v29;
    *(_OWORD *)(v17 + 48) = v20;
    v29 = 0;
    __p = 0uLL;
    *(_OWORD *)(v17 + 72) = v30;
    *(_QWORD *)(v17 + 96) = 0;
    *(_QWORD *)(v17 + 104) = 0;
    *(_QWORD *)(v17 + 88) = 0;
    *(_OWORD *)(v17 + 88) = v31;
    *(_QWORD *)(v17 + 104) = v32;
    v31 = 0uLL;
    v32 = 0;
    v21 = v34;
    *(_OWORD *)(v17 + 112) = v33;
    *(_OWORD *)(v17 + 128) = v21;
    *(_QWORD *)(v17 + 144) = v35;
    ++a3[5];
    v24 = (void **)&v31;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v24);
    if (SHIBYTE(v29) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C22CF8B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf)
{
  NSObject *v15;
  const char *v16;

  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&a11);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    v15 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a10 + 47) < 0)
        a9 = (_QWORD *)*a9;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a9;
      v16 = "Warning: Failed to convert string %s to integer.";
LABEL_11:
      _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, v16, (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(a1);
    __cxa_begin_catch(a1);
    v15 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a10 + 47) < 0)
        a9 = (_QWORD *)*a9;
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = a9;
      v16 = "Warning: Integer %s out of range for USO integer nodes.";
      goto LABEL_11;
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1C22CF878);
}

void nlv4_inference_orchestrator::trees::UsoGraphBuilder::addStringPayloadNode(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  __int128 v5;
  uint64_t StringNode;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  const nlv4_inference_orchestrator::trees::TreeNode *v12;
  const nlv4_inference_orchestrator::trees::TreeNode *i;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::string __p;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;

  v4 = *(_QWORD *)(a3[1] + 8 * (a3[4] / 0x1AuLL)) + 152 * (a3[4] % 0x1AuLL);
  if (*(char *)(v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 24), *(_QWORD *)(v4 + 32));
  }
  else
  {
    v5 = *(_OWORD *)(v4 + 24);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 + 40);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
  }
  LOBYTE(v25) = 1;
  StringNode = siri::ontology::UsoGraph::createStringNode();
  if ((_BYTE)v25 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *(_DWORD *)(v4 + 112);
  v8 = *(_DWORD *)(v4 + 120);
  v9 = *(_DWORD *)(v4 + 128);
  v10 = *(_DWORD *)(v4 + 136);
  v11 = operator new();
  siri::ontology::UsoUtteranceAlignment::UsoUtteranceAlignment(v11, v7, v8, v9, v10);
  v35 = v11;
  siri::ontology::UsoEntityNode::addUtteranceAlignment();
  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100](&v35);
  siri::ontology::UsoGraphNode::setSuccessor();
  v12 = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v4 + 88);
  for (i = *(const nlv4_inference_orchestrator::trees::TreeNode **)(v4 + 96);
        v12 != i;
        v12 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v12 + 144))
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&__p, v12);
    v14 = a3[1];
    v15 = a3[2] == v14;
    v16 = 26 * ((a3[2] - v14) >> 3) - 1;
    v34 = StringNode;
    if (v15)
      v17 = 0;
    else
      v17 = v16;
    v18 = a3[5] + a3[4];
    if (v17 == v18)
    {
      std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a3);
      v14 = a3[1];
      v18 = a3[5] + a3[4];
    }
    v19 = *(_QWORD *)(v14 + 8 * (v18 / 0x1A)) + 152 * (v18 % 0x1A);
    v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(v19 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)v19 = v20;
    memset(&__p, 0, sizeof(__p));
    v21 = v25;
    *(_QWORD *)(v19 + 40) = v26;
    *(_OWORD *)(v19 + 24) = v21;
    v26 = 0;
    v25 = 0uLL;
    v22 = v27;
    *(_QWORD *)(v19 + 64) = v28;
    *(_OWORD *)(v19 + 48) = v22;
    v28 = 0;
    v27 = 0uLL;
    *(_OWORD *)(v19 + 72) = v29;
    *(_QWORD *)(v19 + 96) = 0;
    *(_QWORD *)(v19 + 104) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    *(_OWORD *)(v19 + 88) = v30;
    *(_QWORD *)(v19 + 104) = v31;
    v30 = 0uLL;
    v31 = 0;
    v23 = v33;
    *(_OWORD *)(v19 + 112) = v32;
    *(_OWORD *)(v19 + 128) = v23;
    *(_QWORD *)(v19 + 144) = v34;
    ++a3[5];
    v36 = (void **)&v30;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v36);
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C22CFCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  std::unique_ptr<siri::ontology::UsoUtteranceAlignment>::reset[abi:ne180100]((uint64_t *)(v15 - 104));
  _Unwind_Resume(a1);
}

void std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void *v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t i;
  _QWORD *v67;
  char *v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  __int128 v97;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    a1[4] = v4;
    v5 = (_QWORD *)a1[1];
    v6 = (char *)a1[2];
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3])
      goto LABEL_41;
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v40 = 1;
      else
        v40 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v40);
      v42 = &v41[8 * (v40 >> 2)];
      v44 = &v41[8 * v43];
      v45 = (uint64_t *)a1[1];
      v6 = v42;
      v46 = a1[2] - (_QWORD)v45;
      if (v46)
      {
        v6 = &v42[v46 & 0xFFFFFFFFFFFFFFF8];
        v47 = 8 * (v46 >> 3);
        v48 = &v41[8 * (v40 >> 2)];
        do
        {
          v49 = *v45++;
          *(_QWORD *)v48 = v49;
          v48 += 8;
          v47 -= 8;
        }
        while (v47);
      }
      goto LABEL_29;
    }
LABEL_5:
    v11 = v10 >> 3;
    v12 = v10 >> 3 < -1;
    v13 = (v10 >> 3) + 2;
    if (v12)
      v14 = v13;
    else
      v14 = v11 + 1;
    v15 = -(v14 >> 1);
    v16 = v14 >> 1;
    v17 = &v7[-8 * v16];
    v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      v7 = (char *)a1[1];
    }
    v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  v20 = (char *)a1[2];
  v19 = (char *)a1[3];
  v21 = (char *)*a1;
  v22 = (char *)a1[1];
  v23 = (v20 - v22) >> 3;
  v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    v25 = operator new(0xF70uLL);
    v26 = v25;
    if (v19 != v20)
    {
      *(_QWORD *)v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22)
        v51 = 1;
      else
        v51 = (v19 - v22) >> 2;
      v52 = 2 * v51;
      v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v51);
      v22 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
      v55 = (uint64_t *)a1[1];
      v56 = v22;
      v57 = a1[2] - (_QWORD)v55;
      if (v57)
      {
        v56 = &v22[v57 & 0xFFFFFFFFFFFFFFF8];
        v58 = 8 * (v57 >> 3);
        v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v60 = *v55++;
          *(_QWORD *)v59 = v60;
          v59 += 8;
          v58 -= 8;
        }
        while (v58);
      }
      v61 = (char *)*a1;
      *a1 = v53;
      a1[1] = v22;
      a1[2] = v56;
      a1[3] = &v53[8 * v54];
      if (v61)
      {
        operator delete(v61);
        v22 = (char *)a1[1];
      }
    }
    *((_QWORD *)v22 - 1) = v26;
    v7 = (char *)a1[1];
    v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(_QWORD *)v6 = v8;
      goto LABEL_42;
    }
    v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v85 = 1;
      else
        v85 = (uint64_t)&v6[-*a1] >> 2;
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v85);
      v42 = &v41[8 * (v85 >> 2)];
      v44 = &v41[8 * v86];
      v87 = (uint64_t *)a1[1];
      v6 = v42;
      v88 = a1[2] - (_QWORD)v87;
      if (v88)
      {
        v6 = &v42[v88 & 0xFFFFFFFFFFFFFFF8];
        v89 = 8 * (v88 >> 3);
        v90 = &v41[8 * (v85 >> 2)];
        do
        {
          v91 = *v87++;
          *(_QWORD *)v90 = v91;
          v90 += 8;
          v89 -= 8;
        }
        while (v89);
      }
LABEL_29:
      v50 = (char *)*a1;
      *a1 = v41;
      a1[1] = v42;
      a1[2] = v6;
      a1[3] = v44;
      if (v50)
      {
        operator delete(v50);
        v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  v27 = v24 >> 2;
  if (v19 == v21)
    v28 = 1;
  else
    v28 = v27;
  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v28);
  v31 = v30;
  v32 = &v29[8 * v23];
  *(_QWORD *)&v33 = v29;
  *((_QWORD *)&v33 + 1) = v32;
  v95 = v33;
  v34 = operator new(0xF70uLL);
  *(_QWORD *)&v35 = v32;
  *((_QWORD *)&v35 + 1) = &v29[8 * v31];
  if (v23 == v31)
  {
    v36 = 8 * v23;
    *(_QWORD *)&v37 = v95;
    if (v20 - v22 >= 1)
    {
      v38 = v36 >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v32 -= 8 * (v39 >> 1);
      *(_QWORD *)&v35 = v32;
      *((_QWORD *)&v37 + 1) = v32;
      goto LABEL_50;
    }
    v62 = v36 >> 2;
    if (v20 == v22)
      v63 = 1;
    else
      v63 = v62;
    v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v63);
    v32 = &v64[8 * (v63 >> 2)];
    *(_QWORD *)&v37 = v64;
    *((_QWORD *)&v37 + 1) = v32;
    *(_QWORD *)&v35 = v32;
    *((_QWORD *)&v35 + 1) = &v64[8 * v65];
    if (!v29)
      goto LABEL_50;
    v92 = v35;
    v95 = v37;
    operator delete(v29);
    v35 = v92;
  }
  v37 = v95;
LABEL_50:
  *(_QWORD *)v32 = v34;
  *(_QWORD *)&v35 = v35 + 8;
  for (i = a1[2]; i != a1[1]; i -= 8)
  {
    v67 = (_QWORD *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1) == (_QWORD)v37)
    {
      v69 = (_BYTE *)v35;
      if ((unint64_t)v35 >= *((_QWORD *)&v35 + 1))
      {
        if (*((_QWORD *)&v35 + 1) == *((_QWORD *)&v37 + 1))
          v74 = 1;
        else
          v74 = (uint64_t)(*((_QWORD *)&v35 + 1) - *((_QWORD *)&v37 + 1)) >> 2;
        v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v74);
        v68 = &v75[(2 * v74 + 6) & 0xFFFFFFFFFFFFFFF8];
        v77 = v68;
        v78 = v69 - (_BYTE *)v67;
        if (v69 != (_BYTE *)v67)
        {
          v77 = &v68[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = v68;
          v81 = v67;
          do
          {
            v82 = *v81++;
            *(_QWORD *)v80 = v82;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
        *(_QWORD *)&v37 = v75;
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = v77;
        *((_QWORD *)&v35 + 1) = &v75[8 * v76];
        if (v67)
        {
          v93 = v35;
          v97 = v37;
          operator delete(v67);
          v35 = v93;
          v37 = v97;
        }
      }
      else
      {
        v70 = (uint64_t)(*((_QWORD *)&v35 + 1) - v35) >> 3;
        if (v70 >= -1)
          v71 = v70 + 1;
        else
          v71 = v70 + 2;
        v72 = v71 >> 1;
        v73 = v35 + 8 * (v71 >> 1);
        v68 = (char *)(v73 - (v35 - *((_QWORD *)&v37 + 1)));
        if ((_QWORD)v35 == *((_QWORD *)&v37 + 1))
        {
          v69 = (_BYTE *)*((_QWORD *)&v37 + 1);
        }
        else
        {
          v94 = *((_QWORD *)&v35 + 1);
          v96 = v37;
          memmove((void *)(v73 - (v35 - *((_QWORD *)&v37 + 1))), *((const void **)&v37 + 1), v35 - *((_QWORD *)&v37 + 1));
          *((_QWORD *)&v35 + 1) = v94;
          *(_QWORD *)&v37 = v96;
        }
        *((_QWORD *)&v37 + 1) = v68;
        *(_QWORD *)&v35 = &v69[8 * v72];
      }
    }
    else
    {
      v68 = (char *)*((_QWORD *)&v37 + 1);
    }
    v83 = *(_QWORD *)(i - 8);
    *((_QWORD *)v68 - 1) = v83;
    *((_QWORD *)&v37 + 1) -= 8;
  }
  v84 = (char *)*a1;
  *(_OWORD *)a1 = v37;
  *((_OWORD *)a1 + 1) = v35;
  if (v84)
    operator delete(v84);
}

void sub_1C22D01D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::emplace_back<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoEntityNode *>>(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  __int128 v13;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::tuple<nlv4_inference_orchestrator::trees::TreeNode,siri::ontology::UsoGraphNode *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  v9 = *a2;
  *(_QWORD *)(v8 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v8 = v9;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v10 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(v8 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v11 = a2[3];
  *(_QWORD *)(v8 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)(v8 + 48) = v11;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 6) = 0;
  *(_OWORD *)(v8 + 72) = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 88) = *(__int128 *)((char *)a2 + 88);
  *(_QWORD *)(v8 + 104) = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *((_QWORD *)a2 + 13) = 0;
  result = (__n128)a2[7];
  v13 = a2[8];
  *(__n128 *)(v8 + 112) = result;
  *(_OWORD *)(v8 + 128) = v13;
  *(_QWORD *)(v8 + 144) = *((_QWORD *)a2 + 18);
  ++a1[5];
  return result;
}

void psc_inference_orchestrator::orchestration::PSCOrchestrator::handle(itfm_inference_orchestrator::vocabulary::Vocabulary **a1@<X0>, const sirinluinternalitfm::ITFMParserRequest **a2@<X1>, uint64_t a3@<X8>)
{
  const sirinluinternalitfm::ITFMParserRequest *v6;
  const sirinluinternalitfm::ITFMParserRequest *v7;
  _BYTE v8[56];
  char v9;

  psc_inference_orchestrator::orchestration::PSCOverrideGenerator::generateOverrideResponse(a1 + 208, *a2, v8);
  if (v9)
  {
    MEMORY[0x1C3BB85A8](a3, v8);
  }
  else
  {
    v6 = *a2;
    *a2 = 0;
    v7 = v6;
    itfm_inference_orchestrator::orchestration::ITFMOrchestrator::handle((itfm_inference_orchestrator::orchestration::ITFMOrchestrator *)a1, &v7, a3);
    if (v6)
      (*(void (**)(const sirinluinternalitfm::ITFMParserRequest *))(*(_QWORD *)v6 + 8))(v6);
  }
  if (v9)
    MEMORY[0x1C3BB85C0](v8);
}

void sub_1C22D03C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (a18)
    MEMORY[0x1C3BB85C0](&a11);
  _Unwind_Resume(exception_object);
}

void psc_inference_orchestrator::orchestration::PSCOrchestrator::~PSCOrchestrator(psc_inference_orchestrator::orchestration::PSCOrchestrator *this)
{
  *(_QWORD *)this = &off_1E7BE94C8;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 1664);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
}

{
  *(_QWORD *)this = &off_1E7BE94C8;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 1664);
  itfm_inference_orchestrator::orchestration::ITFMOrchestrator::~ITFMOrchestrator(this);
  JUMPOUT(0x1C3BB9B44);
}

void snlp::common::espresso_inference::e5ml::MILCompiler::compileToE5ML(int *a1, uint64_t a2, unsigned __int8 *a3)
{
  snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceCache(a1, a2, a3);
}

void sub_1C22D04E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, uint64_t a10, uint64_t a11, __int128 a12, std::string *a13, void *a14, __int128 a15, int64_t a16, void *a17, std::string::size_type a18, int a19, __int16 a20,char a21,unsigned __int8 a22)
{
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  const std::string::value_type *v32;
  std::string::size_type v33;
  std::string *v34;
  __int128 v35;
  NSObject *v36;
  const char *ComponentString;
  __int128 *v38;
  void *v39;
  char *v40;
  std::runtime_error *exception;

  if (a2)
  {
    if (a2 == 2)
    {
      v26 = __cxa_begin_catch(exception_object);
      v27 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
      std::string::basic_string[abi:ne180100]<0>(&a17, v27);
      if (*(char *)(v23 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
      }
      else
      {
        __p = *(_OWORD *)v23;
        a10 = *(_QWORD *)(v23 + 16);
      }
      v28 = std::string::insert((std::string *)&__p, 0, "Failed to find or load cached E5RT bundle for the model mil file at ");
      v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      a13 = (std::string *)v28->__r_.__value_.__r.__words[2];
      a12 = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      v30 = std::string::append((std::string *)&a12, ".  Cache lookup failed because the following error was encountered during cache lookup: ");
      v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      *(_QWORD *)(v25 - 64) = *((_QWORD *)&v30->__r_.__value_.__l + 2);
      *(_OWORD *)(v25 - 80) = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if ((a22 & 0x80u) == 0)
        v32 = (const std::string::value_type *)&a17;
      else
        v32 = (const std::string::value_type *)a17;
      if ((a22 & 0x80u) == 0)
        v33 = a22;
      else
        v33 = a18;
      v34 = std::string::append((std::string *)(v25 - 80), v32, v33);
      v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      a16 = v34->__r_.__value_.__r.__words[2];
      a15 = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(v25 - 57) < 0)
        operator delete(*(void **)(v25 - 80));
      if (SHIBYTE(a13) < 0)
        operator delete((void *)a12);
      if (SHIBYTE(a10) < 0)
        operator delete((void *)__p);
      v36 = SNLPOSLoggerForCategory(4);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        ComponentString = snlp::common::logging::getComponentString(*v24);
        v38 = &a15;
        if (a16 < 0)
          v38 = (__int128 *)a15;
        *(_DWORD *)(v25 - 80) = 136315394;
        *(_QWORD *)(v25 - 76) = ComponentString;
        *(_WORD *)(v25 - 68) = 2080;
        *(_QWORD *)(v25 - 66) = v38;
        _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)(v25 - 80), 0x16u);
      }
      snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceRecompilation((snlp::common::espresso_inference::e5ml::MILCompiler *)v24, v23, v22);
      if (SHIBYTE(a16) < 0)
        operator delete((void *)a15);
      if ((char)a22 < 0)
        operator delete(a17);
      __cxa_end_catch();
      JUMPOUT(0x1C22D04B4);
    }
    if (a2 == 1)
    {
      v39 = __cxa_begin_catch(exception_object);
      v40 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)v39 + 16))(v39);
      std::string::basic_string[abi:ne180100]<0>(&a17, v40);
      std::operator+<char>();
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, (const std::string *)&a15);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
    }
  }
  _Unwind_Resume(exception_object);
}

void snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceCache(int *a1, uint64_t a2, unsigned __int8 *a3)
{
  std::string *v6;
  __int128 v7;
  NSObject *v8;
  _BOOL8 v9;
  std::string::size_type v10;
  const char *v11;
  NSObject *v12;
  void **v13;
  snlp::common::espresso_inference::e5ml::MILSELFLogger *v14;
  const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *v15;
  NSObject *v16;
  os_signpost_id_t v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  _BOOL8 v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  std::string::size_type v25;
  int v26[4];
  void *__p[2];
  int64_t v28;
  std::string v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  v6 = std::string::insert(&v29, 0, "Attempting E5RT cache lookup for model at ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v28 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v8 = SNLPOSLoggerForCategory(4);
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v9)
  {
    v10 = *a1;
    if (v10 >= 8)
    {
      v12 = SNLPOSLoggerForCategory(4);
      v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
        WORD2(v29.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v29, 0x16u);
      }
    }
    else
    {
      v11 = off_1E7BED840[v10];
    }
    v13 = __p;
    if (v28 < 0)
      v13 = (void **)__p[0];
    LODWORD(v29.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v29.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(v29.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v29.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v29, 0x16u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions((snlp::common::espresso_inference::e5ml::MILCompiler *)v9, (E5RT::E5CompilerOptions **)&v29);
  E5RT::E5CompilerOptions::SetForceFetchFromCache((E5RT::E5CompilerOptions *)v29.__r_.__value_.__l.__data_);
  v14 = (snlp::common::espresso_inference::e5ml::MILSELFLogger *)(a1 + 2);
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(v14, v15);
  v16 = SNLPOSLoggerForCategory(7);
  v17 = os_signpost_id_generate(v16);
  v18 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v19 = v18;
    if (os_signpost_enabled(v18))
    {
      LOWORD(v26[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v19, OS_SIGNPOST_INTERVAL_BEGIN, v17, "E5RT Cache Lookup", "", (uint8_t *)v26, 2u);
    }
  }
  v20 = SNLPOSLoggerForCategory(0);
  v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v21)
  {
    LOWORD(v26[0]) = 0;
    _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEFAULT, "BEGIN \"E5RT Cache Lookup\"", (uint8_t *)v26, 2u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions((E5RT::E5Compiler *)v21, a2, a3);
  v22 = SNLPOSLoggerForCategory(7);
  if (v17 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v23 = v22;
    if (os_signpost_enabled(v22))
    {
      LOWORD(v26[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v23, OS_SIGNPOST_INTERVAL_END, v17, "E5RT Cache Lookup", "", (uint8_t *)v26, 2u);
    }
  }
  v24 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26[0]) = 0;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEFAULT, "END \"E5RT Cache Lookup\"", (uint8_t *)v26, 2u);
  }
  v26[0] = 1;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess((uint64_t)v14, v26);
  v25 = v29.__r_.__value_.__r.__words[0];
  v29.__r_.__value_.__r.__words[0] = 0;
  if (v25)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v25 + 8))(v25);
  if (SHIBYTE(v28) < 0)
    operator delete(__p[0]);
}

void sub_1C22D0C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(exception_object);
}

E5RT::E5CompilerOptions *snlp::common::espresso_inference::e5ml::MILCompiler::compileMilForceRecompilation(snlp::common::espresso_inference::e5ml::MILCompiler *a1, uint64_t a2, unsigned __int8 *a3)
{
  std::string *v6;
  __int128 v7;
  NSObject *v8;
  const snlp::common::selflogging::NLXSchemaNLXClientEventMetadata *v9;
  std::string::size_type v10;
  const char *v11;
  NSObject *v12;
  void **v13;
  snlp::common::espresso_inference::e5ml::MILSELFLogger *v14;
  NSObject *v15;
  os_signpost_id_t v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  _BOOL8 v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  E5RT::E5CompilerOptions *result;
  void *__p[2];
  int64_t v26;
  E5RT::E5CompilerOptions *v27;
  std::string v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions(a1, &v27);
  E5RT::E5CompilerOptions::SetForceRecompilation(v27);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v28 = *(std::string *)a2;
  v6 = std::string::insert(&v28, 0, "Attempting E5RT recompilation for model at ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v26 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  v8 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(int *)a1;
    if (v10 >= 8)
    {
      v12 = SNLPOSLoggerForCategory(4);
      v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
        WORD2(v28.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v28, 0x16u);
      }
    }
    else
    {
      v11 = off_1E7BED840[v10];
    }
    v13 = __p;
    if (v26 < 0)
      v13 = (void **)__p[0];
    LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)v11;
    WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v13;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v28, 0x16u);
  }
  v14 = (snlp::common::espresso_inference::e5ml::MILCompiler *)((char *)a1 + 8);
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFStart(v14, v9);
  v15 = SNLPOSLoggerForCategory(7);
  v16 = os_signpost_id_generate(v15);
  v17 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v18 = v17;
    if (os_signpost_enabled(v17))
    {
      LOWORD(v28.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v18, OS_SIGNPOST_INTERVAL_BEGIN, v16, "E5RT Recompilation from MIL", "", (uint8_t *)&v28, 2u);
    }
  }
  v19 = SNLPOSLoggerForCategory(0);
  v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v20)
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEFAULT, "BEGIN \"E5RT Recompilation from MIL\"", (uint8_t *)&v28, 2u);
  }
  snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions((E5RT::E5Compiler *)v20, a2, a3);
  v21 = SNLPOSLoggerForCategory(7);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v22 = v21;
    if (os_signpost_enabled(v21))
    {
      LOWORD(v28.__r_.__value_.__l.__data_) = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v22, OS_SIGNPOST_INTERVAL_END, v16, "E5RT Recompilation from MIL", "", (uint8_t *)&v28, 2u);
    }
  }
  v23 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_DEFAULT, "END \"E5RT Recompilation from MIL\"", (uint8_t *)&v28, 2u);
  }
  LODWORD(v28.__r_.__value_.__l.__data_) = 2;
  snlp::common::espresso_inference::e5ml::MILSELFLogger::logSELFSuccess((uint64_t)v14, (int *)&v28);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  result = v27;
  v27 = 0;
  if (result)
    return (E5RT::E5CompilerOptions *)(*(uint64_t (**)(E5RT::E5CompilerOptions *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C22D10D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  _Unwind_Resume(exception_object);
}

uint64_t snlp::common::espresso_inference::e5ml::MILCompiler::createCompilerBaseOptions@<X0>(snlp::common::espresso_inference::e5ml::MILCompiler *this@<X0>, E5RT::E5CompilerOptions **a2@<X8>)
{
  _QWORD *v3;
  void *__p;
  void *v6;
  _QWORD *v7;

  E5RT::E5CompilerOptions::Create(this);
  v3 = operator new(8uLL);
  __p = v3;
  *v3 = 1;
  v6 = v3 + 1;
  v7 = v3 + 1;
  E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bnns");
  E5RT::E5CompilerOptions::SetPreferredCpuBackend();
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  return E5RT::E5CompilerOptions::SetEnableReshapeWithMinimalAllocations(*a2);
}

void sub_1C22D128C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t v17;

  v17 = *v15;
  *v15 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(exception_object);
}

E5RT::ProgramLibrary *snlp::common::espresso_inference::e5ml::MILCompiler::compileMilWithCompilerOptions(E5RT::E5Compiler *a1, uint64_t a2, unsigned __int8 *a3)
{
  _QWORD *ExportedFunctions;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::string::size_type v12;
  E5RT::ProgramLibrary *result;
  std::string *v14;
  __int128 v15;
  std::runtime_error *exception;
  std::string *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  std::string v20;
  E5RT::ProgramLibrary *v21;

  E5RT::E5Compiler::GetCompiler(a1);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v20 = *(std::string *)a2;
  E5RT::E5Compiler::Compile();
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  ExportedFunctions = (_QWORD *)E5RT::ProgramLibrary::GetExportedFunctions(v21);
  if (!std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(ExportedFunctions, a3))
  {
    std::operator+<char>();
    v14 = std::string::append(&v19, " function could not be found in the E5-ML program.");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v20;
    else
      v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&v19, (char *)v17);
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DF8;
  }
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(ExportedFunctions, a3);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v18)
  {
    v10 = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  v12 = v20.__r_.__value_.__r.__words[0];
  v20.__r_.__value_.__r.__words[0] = 0;
  if (v12)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v12 + 8))(v12);
  result = v21;
  v21 = 0;
  if (result)
    return (E5RT::ProgramLibrary *)(*(uint64_t (**)(E5RT::ProgramLibrary *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C22D1500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  void *v23;
  int v24;
  uint64_t v25;
  uint64_t v27;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      if (a23 < 0)
        operator delete(a18);
      v27 = *(_QWORD *)(v25 - 56);
      *(_QWORD *)(v25 - 56) = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

void sub_1C22D15B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1C22D15ACLL);
}

void sub_1C22D1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);

  _Unwind_Resume(a1);
}

nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *std::unique_ptr<nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator>::reset[abi:ne180100](nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator **a1, nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *a2)
{
  nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::~NLv4InferenceOrchestrator(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator::~NLv4InferenceOrchestrator(nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  nlv4_inference_orchestrator::inference_engine::TransformerModelBuilder::~TransformerModelBuilder((void **)this + 319);
  nlv4_inference_orchestrator::trees::UsoGraphBuilder::~UsoGraphBuilder((void **)this + 282);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 2240);
  v2 = *((_QWORD *)this + 279);
  *((_QWORD *)this + 279) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::__tree<std::__value_type<std::__fs::filesystem::path,std::string>,std::__map_value_compare<std::__fs::filesystem::path,std::__value_type<std::__fs::filesystem::path,std::string>,std::less<std::__fs::filesystem::path>,true>,std::allocator<std::__value_type<std::__fs::filesystem::path,std::string>>>::destroy(*((_QWORD **)this + 276));
  if (*((_BYTE *)this + 2192) && *((char *)this + 2191) < 0)
    operator delete(*((void **)this + 271));
  MEMORY[0x1C3BB8674]((char *)this + 2136);
  v3 = *((_QWORD *)this + 265);
  *((_QWORD *)this + 265) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  nlv4_inference_orchestrator::context::ContextFeaturizer::~ContextFeaturizer((void **)this + 171);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::~MatchedSpansFeaturizer((void **)this + 98);
  std::mutex::~mutex((std::mutex *)((char *)this + 720));
  if (*((_BYTE *)this + 712))
  {
    v4 = *((_QWORD *)this + 88);
    *((_QWORD *)this + 88) = 0;
    if (v4)
      std::default_delete<nlv4_inference_orchestrator::vocabulary::Vocabulary>::operator()[abi:ne180100](v4);
  }
  v5 = (void **)((char *)this + 680);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)this + 640);
  if (*((char *)this + 591) < 0)
    operator delete(*((void **)this + 71));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  if (*((char *)this + 543) < 0)
    operator delete(*((void **)this + 65));
  if (*((char *)this + 519) < 0)
    operator delete(*((void **)this + 62));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 480);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 440);
  sirinluinternalsnlp_intermediate::NLv4AssetVersion::~NLv4AssetVersion((nlv4_inference_orchestrator::orchestration::NLv4InferenceOrchestrator *)((char *)this + 416));
  if (*((char *)this + 415) < 0)
    operator delete(*((void **)this + 49));
  if (*((char *)this + 391) < 0)
    operator delete(*((void **)this + 46));
  if (*((char *)this + 367) < 0)
    operator delete(*((void **)this + 43));
  if (*((char *)this + 343) < 0)
    operator delete(*((void **)this + 40));
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void sub_1C22D222C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  void *v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;

  if (a48 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  MEMORY[0x1C3BB9B44](v51, 0x10B2C40ABA1E16ELL);
  snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(&a21);
  if (a36 < 0)
    operator delete(a31);
  if (a2 == 3)
  {
    v55 = __cxa_begin_catch(a1);
    v56 = (void *)MEMORY[0x1E0CB3940];
    (*(void (**)(void *))(*(_QWORD *)v55 + 16))(v55);
    objc_msgSend(v56, "stringWithFormat:", CFSTR("Hit SNLP exception while constructing C++ orchestrator with asset directory %@: %s"));
    v57 = objc_claimAutoreleasedReturnValue();
    v58 = (void *)v57;
    if (v50)
    {
      v59 = (void *)MEMORY[0x1E0CB35C8];
      v60 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v52 - 200) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v52 - 192) = v60;
      *(_QWORD *)(v52 - 184) = v57;
      *(_QWORD *)(v52 - 176) = v57;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52 - 184, v52 - 200, 2);
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v59, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 2, v61);
      *v50 = (id)objc_claimAutoreleasedReturnValue();

    }
  }
  else
  {
    if (a2 != 2)
    {

      _Unwind_Resume(a1);
    }
    v62 = __cxa_begin_catch(a1);
    v63 = (void *)MEMORY[0x1E0CB3940];
    (*(void (**)(void *))(*(_QWORD *)v62 + 16))(v62);
    objc_msgSend(v63, "stringWithFormat:", CFSTR("NLv4 Asset Error when creating the C++ NLv4 orchestrator: %s"));
    v64 = objc_claimAutoreleasedReturnValue();
    v58 = (void *)v64;
    if (v50)
    {
      v65 = (void *)MEMORY[0x1E0CB35C8];
      v66 = *MEMORY[0x1E0CB2D68];
      *(_QWORD *)(v52 - 168) = *MEMORY[0x1E0CB2D50];
      *(_QWORD *)(v52 - 160) = v66;
      *(_QWORD *)(v52 - 152) = v64;
      *(_QWORD *)(v52 - 144) = v64;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v52 - 152, v52 - 168, 2);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v65, "errorWithDomain:code:userInfo:", CFSTR("SNLPNaturalLanguageParserErrorDomain"), 3, v67);
      *v50 = (id)objc_claimAutoreleasedReturnValue();

    }
  }

  __cxa_end_catch();
  JUMPOUT(0x1C22D204CLL);
}

void snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void sub_1C22D3400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;
  void *v24;
  uint64_t v25;

  MEMORY[0x1C3BB9B44](v25, 0x80C40D6874129);
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1C22D3764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22D38A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::TreeManipulations(std::string *this, __int128 *a2, _OWORD **a3, uint64_t a4, uint64_t a5, __int128 *a6)
{
  __int128 v11;
  uint64_t i;
  uint64_t j;
  uint64_t v15;
  std::string v16;
  std::string v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  this[1].__r_.__value_.__s.__data_[0] = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::requiredForLocale((unsigned __int8 **)this);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::ContactTypeSplit((nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *)&this[1].__r_.__value_.__r.__words[1], a3, (unsigned int **)a4);
  std::string::basic_string[abi:ne180100]<0>(this[9].__r_.__value_.__r.__words, "TreeManipulation_DefaultValueMediaPlaybackSpeed");
  v15 = a5;
  this[10].__r_.__value_.__r.__words[0] = 0;
  this[10].__r_.__value_.__l.__size_ = 0;
  this[10].__r_.__value_.__r.__words[2] = 0;
  std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(this[10].__r_.__value_.__r.__words, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3));
  LODWORD(this[11].__r_.__value_.__l.__data_) = 3;
  std::string::basic_string[abi:ne180100]<0>(&this[11].__r_.__value_.__l.__size_, "mediaPlaybackSpeed");
  std::string::basic_string[abi:ne180100]<0>(&this[12].__r_.__value_.__l.__size_, "common_Decimal");
  std::string::basic_string[abi:ne180100]<0>(&this[13].__r_.__value_.__l.__size_, "common_Number_DefaultValue");
  std::string::basic_string[abi:ne180100]<0>(&this[14].__r_.__value_.__l.__size_, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>(&this[15].__r_.__value_.__l.__size_, "common_Number");
  std::string::basic_string[abi:ne180100]<0>(&this[16].__r_.__value_.__l.__size_, "common_Setting");
  std::string::basic_string[abi:ne180100]<0>(&this[17].__r_.__value_.__l.__size_, "common_SettingValue");
  std::string::basic_string[abi:ne180100]<0>(&this[18].__r_.__value_.__l.__size_, "canonicalString");
  std::string::basic_string[abi:ne180100]<0>(&this[19].__r_.__value_.__l.__size_, "definedValue");
  std::string::basic_string[abi:ne180100]<0>(&this[20].__r_.__value_.__l.__size_, "integerValue");
  std::string::basic_string[abi:ne180100]<0>(&this[21].__r_.__value_.__l.__size_, "numericValue");
  std::string::basic_string[abi:ne180100]<0>(&this[22].__r_.__value_.__l.__size_, "settings");
  std::string::basic_string[abi:ne180100]<0>(&this[23].__r_.__value_.__l.__size_, "value");
  std::string::basic_string[abi:ne180100]<0>(&this[24].__r_.__value_.__l.__size_, "wholeValue");
  std::string::basic_string[abi:ne180100]<0>(&this[25].__r_.__value_.__l.__size_, "2");
  std::string::basic_string[abi:ne180100]<0>(&this[26].__r_.__value_.__l.__size_, "0.5");
  std::string::basic_string[abi:ne180100]<0>(&this[27].__r_.__value_.__l.__size_, "1.5");
  std::string::basic_string[abi:ne180100]<0>(&this[28].__r_.__value_.__l.__size_, "3");
  if (this[26].__r_.__value_.__s.__data_[7] < 0)
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)this[25].__r_.__value_.__l.__size_, this[25].__r_.__value_.__r.__words[2]);
  else
    v16 = *(std::string *)((char *)this + 608);
  if (this[29].__r_.__value_.__s.__data_[7] < 0)
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)this[28].__r_.__value_.__l.__size_, this[28].__r_.__value_.__r.__words[2]);
  else
    v17 = *(std::string *)((char *)this + 680);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[29].__r_.__value_.__l.__size_, (unsigned __int8 *)&v16, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v16 + i * 8 + 24));
  }
  if (this[27].__r_.__value_.__s.__data_[7] < 0)
    std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)this[26].__r_.__value_.__l.__size_, this[26].__r_.__value_.__r.__words[2]);
  else
    v16 = *(std::string *)((char *)this + 632);
  if (this[28].__r_.__value_.__s.__data_[7] < 0)
    std::string::__init_copy_ctor_external(&v17, (const std::string::value_type *)this[27].__r_.__value_.__l.__size_, this[27].__r_.__value_.__r.__words[2]);
  else
    v17 = *(std::string *)((char *)this + 656);
  std::unordered_set<std::string>::unordered_set((uint64_t)&this[31], (unsigned __int8 *)&v16, 2);
  for (j = 0; j != -6; j -= 3)
  {
    if (SHIBYTE(v17.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v16 + j * 8 + 24));
  }
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::PersonNameSplitHack(&this[32].__r_.__value_.__r.__words[2], a3, (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::GroupNameTransform(this[36].__r_.__value_.__r.__words, a3, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::ContactAddressDowncaster((uint64_t)&this[42].__r_.__value_.__l.__size_, a3, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::MinimumMaximumLabeller((uint64_t)&this[48].__r_.__value_.__r.__words[2], a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::OneShotReplyRemodeller((uint64_t)&this[55].__r_.__value_.__l.__size_, v15);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::ReplaceFromPersonRecipientHack((uint64_t)&this[58].__r_.__value_.__r.__words[2], a3, (const sirinluinternal::MatchingSpan **)a4, a6);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::SetNumberVerbReplacer((uint64_t)&this[74].__r_.__value_.__l.__size_, a4);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::SetIdentityPromoter(this[79].__r_.__value_.__r.__words, a3);
  return this;
}

void sub_1C22D3E4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23,void **a24,uint64_t a25,void **a26)
{
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29;
  void **v30;
  void **v31;
  uint64_t v32;

  if (*(char *)(v32 - 121) < 0)
    operator delete(*(void **)(v32 - 144));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v29);
  if (*(char *)(v26 + 703) < 0)
    operator delete(*v28);
  if (*(char *)(v26 + 679) < 0)
    operator delete(*v27);
  if (*(char *)(v26 + 655) < 0)
    operator delete(*v31);
  if (*(char *)(v26 + 631) < 0)
    operator delete(*v30);
  if (*(char *)(v26 + 607) < 0)
    operator delete(*a10);
  if (*(char *)(v26 + 583) < 0)
    operator delete(*a11);
  if (*(char *)(v26 + 559) < 0)
    operator delete(*a12);
  if (*(char *)(v26 + 535) < 0)
    operator delete(*a13);
  if (*(char *)(v26 + 511) < 0)
    operator delete(*a14);
  if (*(char *)(v26 + 487) < 0)
    operator delete(*a15);
  if (*(char *)(v26 + 463) < 0)
    operator delete(*a16);
  if (*(char *)(v26 + 439) < 0)
    operator delete(*a17);
  if (*(char *)(v26 + 415) < 0)
    operator delete(*a18);
  if (*(char *)(v26 + 391) < 0)
    operator delete(*a19);
  if (*(char *)(v26 + 367) < 0)
    operator delete(*a20);
  if (*(char *)(v26 + 343) < 0)
    operator delete(*a21);
  if (*(char *)(v26 + 319) < 0)
    operator delete(*a22);
  if (*(char *)(v26 + 295) < 0)
    operator delete(*a23);
  *(_QWORD *)(v32 - 144) = a25;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 144));
  if (*(char *)(v26 + 239) < 0)
    operator delete(*a24);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::~ContactTypeSplit(a26);
  if (*(char *)(v26 + 23) < 0)
    operator delete(*(void **)v26);
  _Unwind_Resume(a1);
}

void sub_1C22D412C()
{
  JUMPOUT(0x1C22D3FF8);
}

void sub_1C22D4134()
{
  JUMPOUT(0x1C22D400CLL);
}

void sub_1C22D413C()
{
  JUMPOUT(0x1C22D4020);
}

void sub_1C22D4144()
{
  JUMPOUT(0x1C22D4034);
}

void sub_1C22D414C()
{
  JUMPOUT(0x1C22D4048);
}

void sub_1C22D4154()
{
  JUMPOUT(0x1C22D405CLL);
}

void sub_1C22D415C()
{
  JUMPOUT(0x1C22D4070);
}

void sub_1C22D4164()
{
  JUMPOUT(0x1C22D4084);
}

void sub_1C22D416C()
{
  JUMPOUT(0x1C22D4098);
}

void sub_1C22D4174()
{
  JUMPOUT(0x1C22D40ACLL);
}

void sub_1C22D417C()
{
  JUMPOUT(0x1C22D40C0);
}

void sub_1C22D4184()
{
  JUMPOUT(0x1C22D40D4);
}

void sub_1C22D418C()
{
  JUMPOUT(0x1C22D40E8);
}

void sub_1C22D4194()
{
  JUMPOUT(0x1C22D40F8);
}

void sub_1C22D419C()
{
  JUMPOUT(0x1C22D410CLL);
}

void sub_1C22D41A4()
{
  JUMPOUT(0x1C22D4114);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::~SetNumberVerbReplacer(void **this)
{
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::~MinimumMaximumLabeller(void **this)
{
  if (*((_BYTE *)this + 152) && *((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::~ContactAddressDowncaster(void **this)
{
  void **v2;

  v2 = this + 16;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 13;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 10;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::~GroupNameTransform(void **this)
{
  void **v2;

  v2 = this + 16;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 13;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 10;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::~PersonNameSplitHack(void **this)
{
  void **v2;

  v2 = this + 7;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 4;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::~ContactTypeSplit(void **this)
{
  void **v2;

  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 18));
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<sirinluinternal::MatchingSpan>>>>::~__hash_table((uint64_t)(this + 13));
  v2 = this + 10;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;

  if (a4)
  {
    v6 = result;
    std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)v6[1];
    while (a2 != a3)
    {
      v7 = MEMORY[0x1C3BB847C](result, a2);
      a2 += 88;
      result = (_QWORD *)(v7 + 88);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1C22D44E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::TreeManipulations::applyManipulationSteps(uint64_t a1, nlv4_inference_orchestrator::trees::TreeNode *a2, uint64_t *a3)
{
  std::string *v6;
  int v7;
  NSObject *v8;
  std::string *p_p;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  _BOOL4 v13;
  NSObject *v14;
  std::string *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BOOL4 v19;
  NSObject *v20;
  std::string *v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  _BOOL4 v25;
  NSObject *v26;
  std::string *v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  std::string *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  NSObject *v38;
  std::string *v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  _BOOL4 v43;
  NSObject *v44;
  std::string *v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  _BOOL4 v49;
  NSObject *v50;
  std::string *v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  _BOOL4 v55;
  NSObject *v56;
  std::string *v57;
  unint64_t v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  NSObject *v62;
  std::string *v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::string __p;
  uint8_t buf[4];
  std::string *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v6 = (std::string *)(a1 + 32);
  v7 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit::splitContactTypes((nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactTypeSplit *)(a1 + 32), a2);
  v8 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (p_p = &__p)
      : (p_p = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = p_p,
        _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Tree after ContactTypeSplit step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v7)
      goto LABEL_20;
  }
  else if (!v7)
  {
    goto LABEL_20;
  }
  if (*(char *)(a1 + 55) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
  else
    __p = *v6;
  v10 = a3[1];
  if (v10 >= a3[2])
  {
    v12 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v11 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v10 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v10 = v11;
    }
    v12 = v10 + 24;
    a3[1] = v10 + 24;
  }
  a3[1] = v12;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_20:
  v13 = nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::splitPersonNames((nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *)(a1 + 784), a2);
  v14 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v15 = &__p)
      : (v15 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v15,
        _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "Tree after PersonNameSplitHack step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v13)
      goto LABEL_39;
  }
  else if (!v13)
  {
    goto LABEL_39;
  }
  if (*(char *)(a1 + 807) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 784), *(_QWORD *)(a1 + 792));
  else
    __p = *(std::string *)(a1 + 784);
  v16 = a3[1];
  if (v16 >= a3[2])
  {
    v18 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v16 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v16 = v17;
    }
    v18 = v16 + 24;
    a3[1] = v16 + 24;
  }
  a3[1] = v18;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_39:
  v19 = nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform::transform((nlv4_inference_orchestrator::post_processing::tree_manipulations::GroupNameTransform *)(a1 + 864), a2);
  v20 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v21 = &__p)
      : (v21 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v21,
        _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "Tree after GroupNameTransform step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v19)
      goto LABEL_58;
  }
  else if (!v19)
  {
    goto LABEL_58;
  }
  if (*(char *)(a1 + 887) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 864), *(_QWORD *)(a1 + 872));
  else
    __p = *(std::string *)(a1 + 864);
  v22 = a3[1];
  if (v22 >= a3[2])
  {
    v24 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v23 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v22 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v22 = v23;
    }
    v24 = v22 + 24;
    a3[1] = v22 + 24;
  }
  a3[1] = v24;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_58:
  v25 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ContactAddressDowncaster::downcast((char **)(a1 + 1016), a2);
  v26 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v27 = &__p)
      : (v27 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v27,
        _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_DEBUG, "Tree after ContactAddressDowncaster step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v25)
      goto LABEL_77;
  }
  else if (!v25)
  {
    goto LABEL_77;
  }
  if (*(char *)(a1 + 1039) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1016), *(_QWORD *)(a1 + 1024));
  else
    __p = *(std::string *)(a1 + 1016);
  v28 = a3[1];
  if (v28 >= a3[2])
  {
    v30 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v28 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v28 = v29;
    }
    v30 = v28 + 24;
    a3[1] = v28 + 24;
  }
  a3[1] = v30;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_77:
  v31 = nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::DefaultValueMediaPlaybackSpeed *)(a1 + 216), a2);
  v32 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v33 = &__p)
      : (v33 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v33,
        _os_log_impl(&dword_1C2196000, v32, OS_LOG_TYPE_DEBUG, "Tree after DefaultMediaPlaybackSpeed step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v31)
      goto LABEL_96;
  }
  else if (!v31)
  {
    goto LABEL_96;
  }
  if (*(char *)(a1 + 239) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 216), *(_QWORD *)(a1 + 224));
  else
    __p = *(std::string *)(a1 + 216);
  v34 = a3[1];
  if (v34 >= a3[2])
  {
    v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v34 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v34 = v35;
    }
    v36 = v34 + 24;
    a3[1] = v34 + 24;
  }
  a3[1] = v36;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_96:
  v37 = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter::promote((nlv4_inference_orchestrator::post_processing::tree_manipulations::SetIdentityPromoter *)(a1 + 1896), a2);
  v38 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v39 = &__p)
      : (v39 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v39,
        _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_DEBUG, "Tree after SetIdentityPromoter step:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v37)
      goto LABEL_115;
  }
  else if (!v37)
  {
    goto LABEL_115;
  }
  if (*(char *)(a1 + 1919) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1896), *(_QWORD *)(a1 + 1904));
  else
    __p = *(std::string *)(a1 + 1896);
  v40 = a3[1];
  if (v40 >= a3[2])
  {
    v42 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v40 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v40 = v41;
    }
    v42 = v40 + 24;
    a3[1] = v40 + 24;
  }
  a3[1] = v42;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_115:
  if (*(_BYTE *)(a1 + 24))
  {
    v43 = nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller::label((nlv4_inference_orchestrator::post_processing::tree_manipulations::MinimumMaximumLabeller *)(a1 + 1168), a2);
    v44 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG)
      && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
           (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        ? (v45 = &__p)
        : (v45 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          *(_DWORD *)buf = 136642819,
          v69 = v45,
          _os_log_impl(&dword_1C2196000, v44, OS_LOG_TYPE_DEBUG, "Tree after MinimumMaximumLabeller labelling:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (!v43)
        goto LABEL_135;
    }
    else if (!v43)
    {
      goto LABEL_135;
    }
    if (*(char *)(a1 + 1191) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1168), *(_QWORD *)(a1 + 1176));
    else
      __p = *(std::string *)(a1 + 1168);
    v46 = a3[1];
    if (v46 >= a3[2])
    {
      v48 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else
      {
        v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v46 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v46 = v47;
      }
      v48 = v46 + 24;
      a3[1] = v46 + 24;
    }
    a3[1] = v48;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_135:
  v49 = nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::OneShotReplyRemodeller *)(a1 + 1328), a2);
  v50 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v51 = &__p)
      : (v51 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v51,
        _os_log_impl(&dword_1C2196000, v50, OS_LOG_TYPE_DEBUG, "Tree after One Shot Reply check:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v49)
      goto LABEL_154;
  }
  else if (!v49)
  {
    goto LABEL_154;
  }
  if (*(char *)(a1 + 1351) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1328), *(_QWORD *)(a1 + 1336));
  else
    __p = *(std::string *)(a1 + 1328);
  v52 = a3[1];
  if (v52 >= a3[2])
  {
    v54 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v53 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v52 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v52 = v53;
    }
    v54 = v52 + 24;
    a3[1] = v52 + 24;
  }
  a3[1] = v54;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_154:
  v55 = nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer::apply((nlv4_inference_orchestrator::post_processing::tree_manipulations::SetNumberVerbReplacer *)(a1 + 1784), a2);
  v56 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v57 = &__p)
      : (v57 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v57,
        _os_log_impl(&dword_1C2196000, v56, OS_LOG_TYPE_DEBUG, "Tree after SetNumber verb replacement:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v55)
      goto LABEL_173;
  }
  else if (!v55)
  {
    goto LABEL_173;
  }
  if (*(char *)(a1 + 1807) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1784), *(_QWORD *)(a1 + 1792));
  else
    __p = *(std::string *)(a1 + 1784);
  v58 = a3[1];
  if (v58 >= a3[2])
  {
    v60 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v59 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v58 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v58 = v59;
    }
    v60 = v58 + 24;
    a3[1] = v58 + 24;
  }
  a3[1] = v60;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_173:
  v61 = nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack::replaceFromPersonRecipientInTree((nlv4_inference_orchestrator::post_processing::tree_manipulations::ReplaceFromPersonRecipientHack *)(a1 + 1408), a2);
  v62 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG)
    && ((nlv4_inference_orchestrator::trees::printTree((uint64_t)&__p, a2),
         (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      ? (v63 = &__p)
      : (v63 = (std::string *)__p.__r_.__value_.__r.__words[0]),
        *(_DWORD *)buf = 136642819,
        v69 = v63,
        _os_log_impl(&dword_1C2196000, v62, OS_LOG_TYPE_DEBUG, "Tree after fromPerson recipient replacement:\n%{sensitive}s", buf, 0xCu), SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0))
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v61)
      return;
  }
  else if (!v61)
  {
    return;
  }
  if (*(char *)(a1 + 1431) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 1408), *(_QWORD *)(a1 + 1416));
  else
    __p = *(std::string *)(a1 + 1408);
  v64 = a3[1];
  if (v64 >= a3[2])
  {
    v66 = std::vector<std::string>::__emplace_back_slow_path<std::string const>(a3, (__int128 *)&__p);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a3[1], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      v65 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v64 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v64 = v65;
    }
    v66 = v64 + 24;
    a3[1] = v64 + 24;
  }
  a3[1] = v66;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C22D50F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v14 + 8) = v15;
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::trees::printTree(uint64_t a1, const nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v3;
  std::locale::id *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  nlv4_inference_orchestrator::trees::TreeNode *i;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  std::string *v14;
  std::string::size_type size;
  _QWORD *v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  std::string v23;
  void *v24[2];
  unsigned __int8 v25;
  void *__p[2];
  unsigned __int8 v27;
  _QWORD v28[7];
  int v29;
  _QWORD v30[4];
  __int128 v31;
  _QWORD v32[11];
  char v33;
  uint64_t v34;
  std::locale v35;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v32);
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, a2);
  v29 = 0;
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::push_back(v30, (__int128 *)&v23);
  v35.__locale_ = (std::locale::__imp *)v28;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  if ((char)v27 < 0)
    operator delete(__p[0]);
  if ((char)v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v3 = *((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v5 = v3 + v31 - 1;
      v6 = *(_QWORD *)(v30[1] + 8 * (v5 / 0x1A));
      v7 = v5 % 0x1A;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v23, (const nlv4_inference_orchestrator::trees::TreeNode *)(v6 + 152 * (v5 % 0x1A)));
      v29 = *(_DWORD *)(v6 + 152 * v7 + 144);
      std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::pop_back(v30);
      for (i = (nlv4_inference_orchestrator::trees::TreeNode *)v28[1];
            i != (nlv4_inference_orchestrator::trees::TreeNode *)v28[0];
            std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::emplace_back<nlv4_inference_orchestrator::trees::TreeNode const&,unsigned int>(v30, i, &v35))
      {
        i = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)i - 144);
        LODWORD(v35.__locale_) = v29 + 1;
      }
      v9 = (4 * v29);
      if ((_DWORD)v9)
      {
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" ", 1);
          --v9;
        }
        while (v9);
      }
      if ((v27 & 0x80u) == 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v11 = v27;
      else
        v11 = (uint64_t)__p[1];
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v10, v11);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)": ", 2);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v23;
      else
        v14 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, size);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)".", 1);
      if ((v25 & 0x80u) == 0)
        v18 = v24;
      else
        v18 = (void **)v24[0];
      if ((v25 & 0x80u) == 0)
        v19 = v25;
      else
        v19 = (uint64_t)v24[1];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet(&v35, v4);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v35);
      std::ostream::put();
      std::ostream::flush();
      v35.__locale_ = (std::locale::__imp *)v28;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      if ((char)v27 < 0)
        operator delete(__p[0]);
      if ((char)v25 < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      v3 = *((_QWORD *)&v31 + 1);
    }
    while (*((_QWORD *)&v31 + 1));
  }
  std::stringbuf::str();
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)v30);
  v32[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v32[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v33 < 0)
    operator delete((void *)v32[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3BB9A90](&v34);
}

void sub_1C22D549C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  std::deque<std::pair<nlv4_inference_orchestrator::trees::TreeNode,unsigned int>>::~deque[abi:ne180100]((uint64_t)&a29);
  std::ostringstream::~ostringstream((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_1C22D55F8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void uaap::AbstractDateTimeHandler::addIfPopulated(uint64_t *a1, char **a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t *v20;
  uint64_t *v21;
  void *v22;
  void *v23;

  siri::ontology::UsoGraph::getSuccessors(*(siri::ontology::UsoGraph **)(*(_QWORD *)(*a1 + 88) + 8), *(const UsoGraphNode **)(*a1 + 88));
  if (v22)
    operator delete(v22);
  if (v22 != v23)
  {
    v5 = a2[1];
    v4 = (unint64_t)a2[2];
    if ((unint64_t)v5 >= v4)
    {
      v8 = (v5 - *a2) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v9 = v4 - (_QWORD)*a2;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
      {
        if (v11 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      v15 = *a1;
      *a1 = 0;
      *(_QWORD *)v13 = v15;
      v7 = v13 + 8;
      v17 = *a2;
      v16 = a2[1];
      if (v16 == *a2)
      {
        v19 = vdupq_n_s64((unint64_t)v16);
      }
      else
      {
        do
        {
          v18 = *((_QWORD *)v16 - 1);
          v16 -= 8;
          *(_QWORD *)v16 = 0;
          *((_QWORD *)v13 - 1) = v18;
          v13 -= 8;
        }
        while (v16 != v17);
        v19 = *(int64x2_t *)a2;
      }
      *a2 = v13;
      a2[1] = v7;
      a2[2] = v14;
      v21 = (uint64_t *)v19.i64[1];
      v20 = (uint64_t *)v19.i64[0];
      while (v21 != v20)
        std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100](--v21);
      if (v20)
        operator delete(v20);
    }
    else
    {
      v6 = *a1;
      *a1 = 0;
      *(_QWORD *)v5 = v6;
      v7 = v5 + 8;
    }
    a2[1] = v7;
  }
}

siri::ontology::UsoEntityNode *uaap::AbstractDateTimeHandler::appendUtteranceAlignmentToEntity(siri::ontology::UsoEntityNode *this, char **a2)
{
  char *v2;
  char *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;

  if (this)
  {
    v2 = *a2;
    v3 = a2[1];
    if (*a2 != v3)
    {
      if (v3 - v2 == 8)
      {
        if (!*(_QWORD *)v2)
          return this;
        return (siri::ontology::UsoEntityNode *)siri::ontology::UsoEntityNode::addUtteranceAlignment(this);
      }
      v4 = 0;
      v5 = 0x7FFFFFFF;
      do
      {
        v6 = *(_QWORD *)v2;
        if (*(_QWORD *)v2)
        {
          v8 = *(_DWORD *)(v6 + 40);
          v7 = *(_DWORD *)(v6 + 44);
          if (v8 < v5)
            v5 = v8;
          if (v7 > v4)
            v4 = v7;
        }
        v2 += 8;
      }
      while (v2 != v3);
      if (v5 < 0x7FFFFFFF)
        return (siri::ontology::UsoEntityNode *)siri::ontology::UsoEntityNode::addUtteranceAlignment(this);
    }
  }
  return this;
}

void snlp::common::utilities::getAlignmentUtf16StartEndIndexes(snlp::common::utilities *this@<X0>, _BYTE *a2@<X8>)
{
  siri::ontology::UsoUtteranceAlignment *UtteranceAlignment;
  uint64_t v5;
  __int128 v6;
  uint64_t **v7;
  uint64_t **v8;

  if (*((_QWORD *)this + 7) == *((_QWORD *)this + 8))
  {
    *a2 = 0;
    a2[16] = 0;
    return;
  }
  UtteranceAlignment = (siri::ontology::UsoUtteranceAlignment *)siri::ontology::UsoEntityNode::getUtteranceAlignment(this);
  siri::ontology::UsoUtteranceAlignment::getSpans(UtteranceAlignment);
  if (v7 == v8)
  {
    *a2 = 0;
    a2[16] = 0;
    if (!v7)
      return;
  }
  else
  {
    v5 = **v7;
    *(_QWORD *)&v6 = v5;
    *((_QWORD *)&v6 + 1) = HIDWORD(v5);
    *(_OWORD *)a2 = v6;
    a2[16] = 1;
  }
  operator delete(v7);
}

void snlp::common::utilities::getAlignmentUtf8StartEndIndexes(snlp::common::utilities *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  NSObject *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;
  _BYTE buf[22];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = *a3;
  if (v7 >= 8)
  {
    v9 = SNLPOSLoggerForCategory(4);
    v8 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v7;
      _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v8 = off_1E7BED840[v7];
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, v8);
  snlp::common::utilities::getAlignmentUtf16StartEndIndexes(a1, buf);
  v10 = buf[16];
  if (buf[16])
  {
    v11 = *(_QWORD *)&buf[8];
    snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(a2, *(unint64_t *)buf);
    v13 = v12;
    snlp::common::utilities::getUnicodeScalarAndUtf8Offsets(a2, v11);
    *(_QWORD *)a4 = v13;
    *(_QWORD *)(a4 + 8) = v14;
    v10 = 1;
  }
  else
  {
    *(_BYTE *)a4 = 0;
  }
  *(_BYTE *)(a4 + 16) = v10;
  if (v16 < 0)
    operator delete(__p);
}

void sub_1C22D5A64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf)
{
  _BYTE *v16;
  void *v18;
  NSObject *v19;
  void *p_p;
  uint64_t v21;

  if (a2 == 1)
  {
    v18 = __cxa_begin_catch(a1);
    v19 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      if (a15 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = p_p;
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v21;
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEBUG, "[%s] Warning: Failed to extract UTF-8 indexes from the app entity span graph string node alignment: %s", (uint8_t *)&buf, 0x16u);
    }
    *v16 = 0;
    v16[16] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C22D5A20);
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1C22D5C9C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::version::isValidAssetVersion(uint64_t a1)
{
  uint64_t v2;
  std::sub_match<const char *> *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::regex_traits<char> v9[2];
  std::__shared_weak_count *v10;
  void *__p[2];
  _BYTE v12[25];
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;

  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](v9, "[0-9A-Za-z](?:[0-9A-Za-z\\-]*[0-9A-Za-z])?");
  v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = (std::sub_match<const char *> *)a1;
  else
    v3 = *(std::sub_match<const char *> **)a1;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a1 + 8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  *(_OWORD *)__p = 0u;
  memset(v12, 0, sizeof(v12));
  v4 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v3, (std::sub_match<const char *> *)((char *)v3 + v2), (uint64_t)__p, (uint64_t)v9);
  if (__p[0])
    operator delete(__p[0]);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::locale::~locale(&v9[0].__loc_);
  return v4;
}

void sub_1C22D666C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _DWORD *a5)
{
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  void *v19;
  uint64_t v20;
  std::locale::id *v21;
  const std::locale::facet *v22;
  uint64_t v23;
  _QWORD *v24;
  std::string *p_str;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  unsigned __int8 **v32;
  unsigned __int8 *v33;
  unint64_t v34;
  char *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t prime;
  void *v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint8x8_t v47;
  unint64_t v48;
  uint8x8_t v49;
  uint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  void *v56;
  _QWORD *v58;
  _QWORD *v59;
  float *v60;
  const void *v61[2];
  std::string v62;
  __int128 __p;
  uint64_t v64;
  std::string __str;
  uint64_t v66[2];
  _QWORD v67[2];
  char v68;
  _QWORD v69[2];
  _BYTE v70[408];
  _QWORD v71[21];

  v71[19] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)a1 = *a5;
  *(_OWORD *)(a1 + 8) = 0u;
  v8 = (void **)(a1 + 8);
  *(_DWORD *)(a1 + 40) = 1065353216;
  v60 = (float *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = 0u;
  nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(a1 + 48, a2, 32);
  v9 = (std::__shared_weak_count *)a4[1];
  v66[0] = *a4;
  v66[1] = (uint64_t)v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::span_matching::SpanEncoder::SpanEncoder(a1 + 256, a5, v66);
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  nlv4_inference_orchestrator::span_matching::SpanTruncator::SpanTruncator(a1 + 392, a5);
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::SpanVocabLabelUtilities((nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities *)(a1 + 528));
  *(_QWORD *)(a1 + 568) = *a4;
  v14 = a4[1];
  *(_QWORD *)(a1 + 576) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v58 = (_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(*(_QWORD **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
    {
      for (i = 0; i != v17; ++i)
        *((_QWORD *)*v8 + i) = 0;
    }
    *v58 = 0;
  }
  v19 = *v8;
  *v8 = 0;
  if (v19)
    operator delete(v19);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v59 = (_QWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 40) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(0);
  std::ifstream::basic_ifstream(v69);
  v20 = v69[0];
  if ((v70[*(_QWORD *)(v69[0] - 24) + 16] & 5) == 0)
  {
    memset(&__str, 0, sizeof(__str));
    v21 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(v20 - 24)));
      v22 = std::locale::use_facet((const std::locale *)&v62, v21);
      v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale((std::locale *)&v62);
      v24 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v69, (uint64_t)&__str, v23);
      if ((*((_BYTE *)v24 + *(_QWORD *)(*v24 - 24) + 32) & 5) != 0)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_117;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_105;
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
          goto LABEL_105;
        p_str = &__str;
      }
      if (p_str->__r_.__value_.__s.__data_[0] != 35)
        break;
LABEL_105:
      v20 = v69[0];
    }
    v61[0] = " ";
    v61[1] = (const void *)1;
    nlv4_inference_orchestrator::trees::split(&v62, &__str, v61);
    v26 = (unint64_t *)(a1 + 32);
    v27 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v58, (uint64_t)&v62);
    v28 = v27;
    v29 = *(_QWORD *)(a1 + 16);
    if (v29)
    {
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v29);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.u32[0];
      if (v30.u32[0] > 1uLL)
      {
        v23 = v27;
        if (v27 >= v29)
          v23 = v27 % v29;
      }
      else
      {
        v23 = (v29 - 1) & v27;
      }
      v32 = (unsigned __int8 **)*((_QWORD *)*v8 + v23);
      if (v32)
      {
        v33 = *v32;
        if (*v32)
        {
          while (1)
          {
            v34 = *((_QWORD *)v33 + 1);
            if (v34 == v28)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v60, v33 + 16, (unsigned __int8 *)&v62) & 1) != 0)goto LABEL_101;
            }
            else
            {
              if (v31 > 1)
              {
                if (v34 >= v29)
                  v34 %= v29;
              }
              else
              {
                v34 &= v29 - 1;
              }
              if (v34 != v23)
              {
LABEL_44:
                v26 = (unint64_t *)(a1 + 32);
                break;
              }
            }
            v33 = *(unsigned __int8 **)v33;
            if (!v33)
              goto LABEL_44;
          }
        }
      }
    }
    v35 = (char *)operator new(0x40uLL);
    v67[0] = v35;
    v67[1] = a1 + 24;
    *(_QWORD *)v35 = 0;
    *((_QWORD *)v35 + 1) = v28;
    *(std::string *)(v35 + 16) = v62;
    memset(&v62, 0, sizeof(v62));
    *(_OWORD *)(v35 + 40) = __p;
    *((_QWORD *)v35 + 7) = v64;
    v64 = 0;
    __p = 0uLL;
    v68 = 1;
    v36 = (float)(*v26 + 1);
    v37 = *v60;
    if (v29 && (float)(v37 * (float)v29) >= v36)
    {
LABEL_91:
      v53 = (_QWORD *)*((_QWORD *)*v8 + v23);
      v54 = v67[0];
      if (v53)
      {
        *(_QWORD *)v67[0] = *v53;
      }
      else
      {
        *(_QWORD *)v67[0] = *v59;
        *v59 = v54;
        *((_QWORD *)*v8 + v23) = v59;
        if (!*(_QWORD *)v54)
          goto LABEL_100;
        v55 = *(_QWORD *)(*(_QWORD *)v54 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v55 >= v29)
            v55 %= v29;
        }
        else
        {
          v55 &= v29 - 1;
        }
        v53 = (char *)*v8 + 8 * v55;
      }
      *v53 = v54;
LABEL_100:
      v67[0] = 0;
      ++*v26;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)v67);
LABEL_101:
      if (SHIBYTE(v64) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      goto LABEL_105;
    }
    v38 = (v29 & (v29 - 1)) != 0;
    if (v29 < 3)
      v38 = 1;
    v39 = v38 | (2 * v29);
    v40 = vcvtps_u32_f32(v36 / v37);
    if (v39 <= v40)
      prime = (int8x8_t)v40;
    else
      prime = (int8x8_t)v39;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v29 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)&prime > v29)
      goto LABEL_57;
    if (*(_QWORD *)&prime < v29)
    {
      v48 = vcvtps_u32_f32((float)*v26 / *v60);
      if (v29 < 3 || (v49 = (uint8x8_t)vcnt_s8((int8x8_t)v29), v49.i16[0] = vaddlv_u8(v49), v49.u32[0] > 1uLL))
      {
        v48 = std::__next_prime(v48);
      }
      else
      {
        v50 = 1 << -(char)__clz(v48 - 1);
        if (v48 >= 2)
          v48 = v50;
      }
      if (*(_QWORD *)&prime <= v48)
        prime = (int8x8_t)v48;
      if (*(_QWORD *)&prime >= v29)
      {
        v29 = *(_QWORD *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_57:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v42 = operator new(8 * *(_QWORD *)&prime);
          v43 = *v8;
          *v8 = v42;
          if (v43)
            operator delete(v43);
          v44 = 0;
          *(int8x8_t *)(a1 + 16) = prime;
          do
            *((_QWORD *)*v8 + v44++) = 0;
          while (*(_QWORD *)&prime != v44);
          v45 = (_QWORD *)*v59;
          if (*v59)
          {
            v46 = v45[1];
            v47 = (uint8x8_t)vcnt_s8(prime);
            v47.i16[0] = vaddlv_u8(v47);
            if (v47.u32[0] > 1uLL)
            {
              if (v46 >= *(_QWORD *)&prime)
                v46 %= *(_QWORD *)&prime;
            }
            else
            {
              v46 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)*v8 + v46) = v59;
            v51 = (_QWORD *)*v45;
            if (*v45)
            {
              do
              {
                v52 = v51[1];
                if (v47.u32[0] > 1uLL)
                {
                  if (v52 >= *(_QWORD *)&prime)
                    v52 %= *(_QWORD *)&prime;
                }
                else
                {
                  v52 &= *(_QWORD *)&prime - 1;
                }
                if (v52 != v46)
                {
                  if (!*((_QWORD *)*v8 + v52))
                  {
                    *((_QWORD *)*v8 + v52) = v45;
                    goto LABEL_82;
                  }
                  *v45 = *v51;
                  *v51 = **((_QWORD **)*v8 + v52);
                  **((_QWORD **)*v8 + v52) = v51;
                  v51 = v45;
                }
                v52 = v46;
LABEL_82:
                v45 = v51;
                v51 = (_QWORD *)*v51;
                v46 = v52;
              }
              while (v51);
            }
          }
          v29 = (unint64_t)prime;
          goto LABEL_86;
        }
        v56 = *v8;
        *v8 = 0;
        if (v56)
          operator delete(v56);
        v29 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
    }
LABEL_86:
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v28 >= v29)
        v23 = v28 % v29;
      else
        v23 = v28;
    }
    else
    {
      v23 = (v29 - 1) & v28;
    }
    goto LABEL_91;
  }
LABEL_117:
  v69[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v69 + *(_QWORD *)(v69[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1C3BB970C](v70);
  std::istream::~istream();
  MEMORY[0x1C3BB9A90](v71);
  return a1;
}

void sub_1C22D6DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  uint64_t v36;
  uint64_t v37;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::basic_string<char16_t>,std::basic_string<char16_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a33);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo((void **)&a19.__locale_);
  if (a30 < 0)
    operator delete(__p);
  std::ifstream::~ifstream(&a36);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v37 + 568);
  std::__hash_table<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::__unordered_map_hasher<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::__unordered_map_equal<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>,std::equal_to<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,true>,std::allocator<std::__hash_value_type<snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType,std::string>>>::~__hash_table(a10);
  MEMORY[0x1C3BB8494](v37 + 440);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a11);
  nlv4_inference_orchestrator::span_matching::SpanEncoder::~SpanEncoder(a12);
  nlv4_inference_orchestrator::vocabulary::Vocabulary::~Vocabulary(a13);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v36);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanEncoder::SpanEncoder(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  std::string::basic_string[abi:ne180100]<0>((_QWORD *)a1, "[NO_SPAN]");
  v6 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = 0;
  }
  *(_DWORD *)(a1 + 40) = *a2;
  sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(a1 + 48));
  return a1;
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanTruncator::SpanTruncator(uint64_t a1, _DWORD *a2)
{
  uint64_t i;
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v6, "common_Integer");
  std::string::basic_string[abi:ne180100]<0>(v7, "common_MixedFraction");
  std::string::basic_string[abi:ne180100]<0>(v8, "common_ListPosition");
  std::unordered_set<std::string>::unordered_set(a1, (unsigned __int8 *)v6, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete((void *)v8[i]);
  }
  *(_DWORD *)(a1 + 40) = *a2;
  sirinluinternal::MatchingSpan::MatchingSpan((sirinluinternal::MatchingSpan *)(a1 + 48));
  return a1;
}

void sub_1C22D705C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0)
      operator delete(*(void **)(v1 + v3 + 48));
    v3 -= 24;
    if (v3 == -72)
      _Unwind_Resume(exception_object);
  }
}

nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities *nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::SpanVocabLabelUtilities(nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  std::string **v5;
  int *v6;
  int v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  std::string *v13;
  std::string *v14;
  _DWORD *v15;
  const std::string::value_type **v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  std::string *v26;
  unint64_t size;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  std::string *v32;
  unint64_t v33;
  uint64_t v34;
  std::string **v35;
  unint64_t v36;
  void *v37;
  uint64_t j;
  _DWORD v40[2];
  uint64_t v41[3];
  int v42;
  uint64_t v43[3];
  int v44;
  uint64_t v45[3];
  int v46;
  uint64_t v47[3];
  int v48;
  uint64_t v49[3];
  int v50;
  uint64_t v51[3];
  int v52;
  uint64_t v53[3];
  int v54;
  _QWORD v55[5];

  v55[3] = *MEMORY[0x1E0C80C00];
  v40[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(v41, "DataDetector");
  v42 = 2;
  std::string::basic_string[abi:ne180100]<0>(v43, "UserVocabMatcher");
  v44 = 3;
  std::string::basic_string[abi:ne180100]<0>(v45, "SingleTrieMatcher");
  v46 = 4;
  std::string::basic_string[abi:ne180100]<0>(v47, "ContextMatcher");
  v48 = 5;
  std::string::basic_string[abi:ne180100]<0>(v49, "OvertonMatcher");
  v50 = 6;
  std::string::basic_string[abi:ne180100]<0>(v51, "MRRDetector");
  v52 = 7;
  std::string::basic_string[abi:ne180100]<0>(v53, "MRRMatcher");
  v54 = 8;
  std::string::basic_string[abi:ne180100]<0>(v55, "RegexSpanMatcher");
  v3 = 0;
  v4 = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v5 = (std::string **)((char *)this + 16);
  *((_DWORD *)this + 8) = 1065353216;
  do
  {
    v6 = &v40[8 * v4];
    v7 = *v6;
    v8 = *((_QWORD *)this + 1);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v1 = v7;
        if (v8 <= v7)
          v1 = v7 % v8;
      }
      else
      {
        v1 = (v8 - 1) & v7;
      }
      v10 = *(uint64_t ***)(*(_QWORD *)this + 8 * v1);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)i + 4) == v7)
              goto LABEL_77;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v1)
              break;
          }
        }
      }
    }
    v13 = (std::string *)operator new(0x30uLL);
    v13->__r_.__value_.__r.__words[0] = 0;
    v13->__r_.__value_.__l.__size_ = v7;
    LODWORD(v13->__r_.__value_.__r.__words[2]) = v7;
    v14 = v13 + 1;
    v15 = &v40[8 * v4];
    v16 = (const std::string::value_type **)(v15 + 2);
    if (*((char *)v6 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *v16, *((_QWORD *)v15 + 2));
      v3 = *((_QWORD *)this + 3);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)v16;
      v13[1].__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 3);
    }
    v17 = (float)(unint64_t)(v3 + 1);
    v18 = *((float *)this + 8);
    if (!v8 || (float)(v18 * (float)v8) < v17)
    {
      v19 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v19 = 1;
      v20 = v19 | (2 * v8);
      v21 = vcvtps_u32_f32(v17 / v18);
      if (v20 <= v21)
        prime = (int8x8_t)v21;
      else
        prime = (int8x8_t)v20;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v8 = *((_QWORD *)this + 1);
      if (*(_QWORD *)&prime > v8)
        goto LABEL_33;
      if (*(_QWORD *)&prime < v8)
      {
        v29 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
        if (v8 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
        {
          v29 = std::__next_prime(v29);
        }
        else
        {
          v31 = 1 << -(char)__clz(v29 - 1);
          if (v29 >= 2)
            v29 = v31;
        }
        if (*(_QWORD *)&prime <= v29)
          prime = (int8x8_t)v29;
        if (*(_QWORD *)&prime >= v8)
        {
          v8 = *((_QWORD *)this + 1);
        }
        else
        {
          if (prime)
          {
LABEL_33:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v23 = operator new(8 * *(_QWORD *)&prime);
            v24 = *(void **)this;
            *(_QWORD *)this = v23;
            if (v24)
              operator delete(v24);
            v25 = 0;
            *((int8x8_t *)this + 1) = prime;
            do
              *(_QWORD *)(*(_QWORD *)this + 8 * v25++) = 0;
            while (*(_QWORD *)&prime != v25);
            v26 = *v5;
            if (*v5)
            {
              size = v26->__r_.__value_.__l.__size_;
              v28 = (uint8x8_t)vcnt_s8(prime);
              v28.i16[0] = vaddlv_u8(v28);
              if (v28.u32[0] > 1uLL)
              {
                if (size >= *(_QWORD *)&prime)
                  size %= *(_QWORD *)&prime;
              }
              else
              {
                size &= *(_QWORD *)&prime - 1;
              }
              *(_QWORD *)(*(_QWORD *)this + 8 * size) = v5;
              v32 = (std::string *)v26->__r_.__value_.__r.__words[0];
              if (v26->__r_.__value_.__r.__words[0])
              {
                do
                {
                  v33 = v32->__r_.__value_.__l.__size_;
                  if (v28.u32[0] > 1uLL)
                  {
                    if (v33 >= *(_QWORD *)&prime)
                      v33 %= *(_QWORD *)&prime;
                  }
                  else
                  {
                    v33 &= *(_QWORD *)&prime - 1;
                  }
                  if (v33 != size)
                  {
                    if (!*(_QWORD *)(*(_QWORD *)this + 8 * v33))
                    {
                      *(_QWORD *)(*(_QWORD *)this + 8 * v33) = v26;
                      goto LABEL_58;
                    }
                    v26->__r_.__value_.__r.__words[0] = v32->__r_.__value_.__r.__words[0];
                    v32->__r_.__value_.__r.__words[0] = **(_QWORD **)(*(_QWORD *)this + 8 * v33);
                    **(_QWORD **)(*(_QWORD *)this + 8 * v33) = v32;
                    v32 = v26;
                  }
                  v33 = size;
LABEL_58:
                  v26 = v32;
                  v32 = (std::string *)v32->__r_.__value_.__r.__words[0];
                  size = v33;
                }
                while (v32);
              }
            }
            v8 = (unint64_t)prime;
            goto LABEL_62;
          }
          v37 = *(void **)this;
          *(_QWORD *)this = 0;
          if (v37)
            operator delete(v37);
          v8 = 0;
          *((_QWORD *)this + 1) = 0;
        }
      }
LABEL_62:
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7)
          v1 = v7 % v8;
        else
          v1 = v7;
      }
      else
      {
        v1 = (v8 - 1) & v7;
      }
    }
    v34 = *(_QWORD *)this;
    v35 = *(std::string ***)(*(_QWORD *)this + 8 * v1);
    if (v35)
    {
      v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v35;
LABEL_75:
      *v35 = v13;
      goto LABEL_76;
    }
    v13->__r_.__value_.__r.__words[0] = (std::string::size_type)*v5;
    *v5 = v13;
    *(_QWORD *)(v34 + 8 * v1) = v5;
    if (v13->__r_.__value_.__r.__words[0])
    {
      v36 = *(_QWORD *)(v13->__r_.__value_.__r.__words[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v36 >= v8)
          v36 %= v8;
      }
      else
      {
        v36 &= v8 - 1;
      }
      v35 = (std::string **)(*(_QWORD *)this + 8 * v36);
      goto LABEL_75;
    }
LABEL_76:
    v3 = *((_QWORD *)this + 3) + 1;
    *((_QWORD *)this + 3) = v3;
LABEL_77:
    ++v4;
  }
  while (v4 != 8);
  for (j = 0; j != -32; j -= 4)
  {
    if (SHIBYTE(v55[j + 2]) < 0)
      operator delete((void *)v55[j]);
  }
  return this;
}

void sub_1C22D7644(_Unwind_Exception *exception_object, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;

  while (1)
  {
    if (*((char *)v9 - 1) < 0)
      operator delete((void *)*(v9 - 3));
    v9 -= 4;
    if (v9 == &a9)
      _Unwind_Resume(exception_object);
  }
}

void nlv4_inference_orchestrator::span_matching::SpanEncoder::~SpanEncoder(void **this)
{
  MEMORY[0x1C3BB8494](this + 6);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::MatchedSpansFeaturizer(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16[2];

  *(_DWORD *)a1 = *a4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  nlv4_inference_orchestrator::vocabulary::Vocabulary::Vocabulary(a1 + 48, a2, 32);
  v7 = (std::__shared_weak_count *)a3[1];
  v16[0] = *a3;
  v16[1] = (uint64_t)v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  nlv4_inference_orchestrator::span_matching::SpanEncoder::SpanEncoder(a1 + 256, a4, v16);
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  nlv4_inference_orchestrator::span_matching::SpanTruncator::SpanTruncator(a1 + 392, a4);
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::SpanVocabLabelUtilities((nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities *)(a1 + 528));
  v12 = a3[1];
  *(_QWORD *)(a1 + 568) = *a3;
  *(_QWORD *)(a1 + 576) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return a1;
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::featurize(int *a1, char *a2, const sirinluinternal::MatchingSpan **a3, uint64_t *a4, uint64_t a5, unsigned int a6)
{
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20[3];
  _BYTE buf[22];
  void *__p;
  _BYTE *v23;
  __int128 *v24[4];
  _BYTE v25[12];
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = *a1;
    if (v13 >= 8)
    {
      v15 = SNLPOSLoggerForCategory(4);
      v14 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v13;
        _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v14 = off_1E7BED840[v13];
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v14;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] Span Input", buf, 0xCu);
  }
  *(_DWORD *)buf = 0;
  nlv4_inference_orchestrator::span_matching::SpanEncoder::encode((uint64_t)(a1 + 64), a3, a4, buf, (uint64_t)v20);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanEncoding(a1, v20);
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::tensoriseTokens((unsigned int *)a1, v20, a6, (uint64_t)buf);
  if (buf != a2)
  {
    std::vector<sentencepiece::unigram::Lattice::Node *>::__assign_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(a2, *(char **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a2 + 24, (char *)__p, (uint64_t)v23, (v23 - (_BYTE *)__p) >> 2);
  }
  nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logFeatureTensor((unsigned int *)a1, (uint64_t **)a2);
  if (*(_BYTE *)(a5 + 24))
  {
    nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::insertToFeatureStore(a1, (uint64_t)a2, v24, (uint64_t *)a5);
  }
  else
  {
    v16 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = *a1;
      if (v17 >= 8)
      {
        v19 = SNLPOSLoggerForCategory(4);
        v18 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v25 = 136315394;
          *(_QWORD *)&v25[4] = "<UNDEFINED_COMPONENT>";
          v26 = 2048;
          v27 = v17;
          _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v25, 0x16u);
        }
      }
      else
      {
        v18 = off_1E7BED840[v17];
      }
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = v18;
      _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_DEBUG, "[%s] nlu_request_id not found so skipping insertion of span featurized response into FeatureStore", v25, 0xCu);
    }
  }
  *(_QWORD *)v25 = v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  *(_QWORD *)buf = v20;
  std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C22D7BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::pair<nlv4_inference_orchestrator::orchestration::IndexedToken,std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanEncoding(int *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  _BYTE *v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[11];
  char v24;
  uint64_t v25;
  _BYTE buf[12];
  __int16 v27;
  uint64_t v28;
  char v29;
  uint8_t v30[4];
  const char *v31;
  __int16 v32;
  _BYTE *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v22);
  v4 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v5)
  {
    do
    {
      if (v4[8])
      {
        v6 = v4[18];
        v7 = v4[19];
        while (v6 != v7)
        {
          v8 = v4[8];
          if (*(char *)(v8 + 23) < 0)
            v8 = *(_QWORD *)v8;
          v9 = strlen((const char *)v8);
          v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v8, v9);
          v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)": ", 2);
          v12 = (const char *)v6;
          if (*(char *)(v6 + 23) < 0)
            v12 = *(const char **)v6;
          v13 = strlen(v12);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n", 1);
          v6 += 32;
        }
      }
      v4 += 21;
    }
    while (v4 != v5);
  }
  v15 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = *a1;
    if (v16 >= 8)
    {
      v18 = SNLPOSLoggerForCategory(4);
      v17 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v27 = 2048;
        v28 = v16;
        _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v17 = off_1E7BED840[v16];
    }
    std::stringbuf::str();
    if (v29 >= 0)
      v19 = buf;
    else
      v19 = *(_BYTE **)buf;
    *(_DWORD *)v30 = 136315394;
    v31 = v17;
    v32 = 2080;
    v33 = v19;
    _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] Spans encoded over the tokens:\n%s", v30, 0x16u);
    if (v29 < 0)
      operator delete(*(void **)buf);
  }
  v22[0] = *MEMORY[0x1E0DE4F50];
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v23[0] = v20;
  v23[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v24 < 0)
    operator delete((void *)v23[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v25);
}

void sub_1C22D7E74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::tensoriseTokens(unsigned int *a1@<X0>, uint64_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;
  nlv4_inference_orchestrator::vocabulary::Vocabulary *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  std::string::size_type size;
  uint64_t v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  std::string::size_type v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  std::__split_buffer<std::string>::pointer end;
  __int128 v36;
  uint64_t v37;
  std::string::size_type v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t appended;
  std::__split_buffer<std::string>::pointer first;
  std::string::size_type *v43;
  std::string::size_type *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  std::string::size_type *v50;
  std::string::size_type *v51;
  std::string::size_type v52;
  std::__split_buffer<std::string> *v53;
  std::__split_buffer<std::string> *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string *v57;
  uint64_t v58;
  int v59;
  NSObject *v60;
  int v61;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  std::string *v69;
  std::string *v70;
  NSObject *v71;
  NSObject *v72;
  std::string *p_buf;
  uint64_t *v74;
  char *v75;
  unint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  unint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float *v91;
  unint64_t *v92;
  unint64_t v93;
  std::vector<std::string>::pointer v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::string *v101;
  uint64_t v102;
  std::string *v103;
  uint64_t v104;
  __int128 v105;
  std::string *v106;
  std::string *v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  std::vector<std::string>::pointer begin;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t j;
  _QWORD *v116;
  void *v117;
  std::__split_buffer<std::string>::pointer v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  std::string v126;
  void *__p[2];
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  void *v131;
  char v132;
  uint64_t v133;
  _QWORD v134[3];
  void *v135;
  std::string::size_type *v136;
  std::string::size_type *v137;
  void *v138;
  char *v139;
  std::string v140;
  std::vector<std::string> v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t *v145;
  std::__split_buffer<std::string> v146;
  uint64_t v147;
  std::string buf;
  char v149;
  uint64_t v150;

  v150 = *MEMORY[0x1E0C80C00];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  memset(&v141, 0, sizeof(v141));
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_QWORD *)(a4 + 64) = 0;
  if (*a2 == a2[1])
  {
    v7 = operator new(0x18uLL);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    __p[0] = 0;
    __p[1] = 0;
    v128 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(__p, v7, (uint64_t)(v7 + 3), 3uLL);
    v129 = 0uLL;
    v130 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v129, v142, (uint64_t)v143, (v143 - v142) >> 2);
    v8 = *(void **)a4;
    if (*(_QWORD *)a4)
    {
      *(_QWORD *)(a4 + 8) = v8;
      operator delete(v8);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
    }
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_QWORD *)(a4 + 16) = v128;
    __p[1] = 0;
    v128 = 0;
    __p[0] = 0;
    v9 = *(void **)(a4 + 24);
    if (v9)
    {
      *(_QWORD *)(a4 + 32) = v9;
      operator delete(v9);
      *(_QWORD *)(a4 + 24) = 0;
      *(_QWORD *)(a4 + 32) = 0;
      *(_QWORD *)(a4 + 40) = 0;
      v9 = __p[0];
    }
    *(_OWORD *)(a4 + 24) = v129;
    *(_QWORD *)(a4 + 40) = v130;
    v130 = 0;
    v129 = 0uLL;
    if (v9)
    {
      __p[1] = v9;
      operator delete(v9);
    }
    if ((std::vector<std::string> *)(a4 + 48) != &v141)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 48), v141.__begin_, (__int128 *)v141.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3));
    v10 = v7;
    goto LABEL_191;
  }
  if (*((char *)a1 + 279) < 0)
    std::string::__init_copy_ctor_external(&v140, *((const std::string::value_type **)a1 + 32), *((_QWORD *)a1 + 33));
  else
    v140 = *(std::string *)(a1 + 64);
  v11 = (nlv4_inference_orchestrator::vocabulary::Vocabulary *)(a1 + 12);
  v12 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)&v140);
  v13 = a2[1];
  v122 = *a2;
  v14 = 0xCF3CF3CF3CF3CF3DLL * ((v13 - *a2) >> 3);
  __p[0] = 0;
  v123 = v14;
  std::vector<unsigned long>::vector(&v138, v14, __p);
  v120 = v13;
  v135 = 0;
  v136 = 0;
  v137 = 0;
  memset(v134, 0, sizeof(v134));
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
  v15 = *a2;
  v124 = a2[1];
  if (*a2 != v124)
  {
    v16 = 0;
    do
    {
      memset(&buf, 0, sizeof(buf));
      v18 = *(_QWORD *)(v15 + 144);
      v17 = *(_QWORD *)(v15 + 152);
      while (v18 != v17)
      {
        nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels((_QWORD *)a1 + 66, v18, (_QWORD *)a1 + 1, (int *)a1, (std::vector<std::string>::pointer *)&v126);
        size = v126.__r_.__value_.__l.__size_;
        for (i = v126.__r_.__value_.__r.__words[0]; i != size; i += 24)
        {
          v21 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), i);
          if (*((_BYTE *)a1 + 152))
            v22 = v21 == *((_QWORD *)a1 + 18);
          else
            v22 = 0;
          if (!v22)
          {
            v27 = buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_ >= buf.__r_.__value_.__r.__words[2])
            {
              v29 = (uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5;
              if ((unint64_t)(v29 + 1) >> 59)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v30 = (uint64_t)(buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0]) >> 4;
              if (v30 <= v29 + 1)
                v30 = v29 + 1;
              if (buf.__r_.__value_.__r.__words[2] - buf.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFE0)
                v31 = 0x7FFFFFFFFFFFFFFLL;
              else
                v31 = v30;
              v146.__end_cap_.__value_ = (std::allocator<std::string> *)&buf.__r_.__value_.__r.__words[2];
              if (v31)
              {
                v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v31);
              }
              else
              {
                v33 = 0;
                v32 = 0;
              }
              end = (std::string *)((char *)v33 + 32 * v29);
              v146.__first_ = v33;
              v146.__begin_ = end;
              v146.__end_ = end;
              v146.__end_cap_.__value_ = (std::string *)((char *)v33 + 32 * v32);
              if (*(char *)(v18 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
                end = v146.__end_;
              }
              else
              {
                v36 = *(_OWORD *)v18;
                end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v36;
              }
              v33[1].__r_.__value_.__r.__words[4 * v29] = *(_QWORD *)(v18 + 24);
              v146.__end_ = (std::__split_buffer<std::string>::pointer)((char *)end + 32);
              std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer((uint64_t *)&buf, &v146);
              v34 = buf.__r_.__value_.__l.__size_;
              std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)&v146);
            }
            else
            {
              if (*(char *)(v18 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)buf.__r_.__value_.__l.__size_, *(const std::string::value_type **)v18, *(_QWORD *)(v18 + 8));
              }
              else
              {
                v28 = *(_OWORD *)v18;
                *(_QWORD *)(buf.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v18 + 16);
                *(_OWORD *)v27 = v28;
              }
              *(_QWORD *)(v27 + 24) = *(_QWORD *)(v18 + 24);
              v34 = v27 + 32;
            }
            buf.__r_.__value_.__l.__size_ = v34;
            break;
          }
          v23 = *(char *)(i + 23);
          if (v23 >= 0)
            v24 = i;
          else
            v24 = *(_QWORD *)i;
          if (v23 >= 0)
            v25 = *(unsigned __int8 *)(i + 23);
          else
            v25 = *(_QWORD *)(i + 8);
          v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v128, v24, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)",\n", 2);
        }
        v146.__first_ = &v126;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        v18 += 32;
      }
      nlv4_inference_orchestrator::span_matching::SpanTruncator::truncate((uint64_t)(a1 + 98), (uint64_t *)&buf, a3);
      v146.__begin_ = 0;
      v146.__end_ = 0;
      v146.__first_ = (std::__split_buffer<std::string>::pointer)&v146.__begin_;
      *(_OWORD *)&v126.__r_.__value_.__r.__words[1] = 0uLL;
      v126.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126.__r_.__value_.__l.__size_;
      v38 = buf.__r_.__value_.__l.__size_;
      v37 = buf.__r_.__value_.__r.__words[0];
      v39 = v138;
      v40 = *((_QWORD *)v138 + v16);
      while (v37 != v38)
      {
        appended = nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::appendExpandedSpanLabelsAndNumericalisedIndexes((int *)a1, (uint64_t **)&v146, (uint64_t **)&v126, v15, v37, v40, a3);
        v39 = v138;
        v40 = *((_QWORD *)v138 + v16) + appended;
        *((_QWORD *)v138 + v16) = v40;
        v37 += 32;
      }
      if (!v40)
      {
        v39[v16] = 1;
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>((uint64_t **)&v146, (unint64_t)(float)(unint64_t)v12, (unint64_t)(float)(unint64_t)v12);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v126, &v140, (uint64_t)&v140);
      }
      first = v146.__first_;
      if ((std::__split_buffer<std::string>::pointer *)v146.__first_ != &v146.__begin_)
      {
        v43 = v136;
        do
        {
          if (v43 >= v137)
          {
            v44 = (std::string::size_type *)v135;
            v45 = ((char *)v43 - (_BYTE *)v135) >> 3;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            v47 = (char *)v137 - (_BYTE *)v135;
            if (((char *)v137 - (_BYTE *)v135) >> 2 > v46)
              v46 = v47 >> 2;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
              v48 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v137, v48);
              v44 = (std::string::size_type *)v135;
              v43 = v136;
            }
            else
            {
              v49 = 0;
            }
            v50 = (std::string::size_type *)&v49[8 * v45];
            *v50 = first[1].__r_.__value_.__l.__size_;
            v51 = v50 + 1;
            while (v43 != v44)
            {
              v52 = *--v43;
              *--v50 = v52;
            }
            v135 = v50;
            v136 = v51;
            v137 = (std::string::size_type *)&v49[8 * v48];
            if (v44)
              operator delete(v44);
            v43 = v51;
          }
          else
          {
            *v43++ = first[1].__r_.__value_.__l.__size_;
          }
          v136 = v43;
          v53 = (std::__split_buffer<std::string> *)first->__r_.__value_.__l.__size_;
          if (v53)
          {
            do
            {
              v54 = v53;
              v53 = (std::__split_buffer<std::string> *)v53->__first_;
            }
            while (v53);
          }
          else
          {
            do
            {
              v54 = (std::__split_buffer<std::string> *)first->__r_.__value_.__r.__words[2];
              v22 = v54->__first_ == first;
              first = (std::__split_buffer<std::string>::pointer)v54;
            }
            while (!v22);
          }
          first = (std::__split_buffer<std::string>::pointer)v54;
        }
        while (v54 != (std::__split_buffer<std::string> *)&v146.__begin_);
      }
      v55 = v126.__r_.__value_.__r.__words[0];
      v145 = v134;
      if ((std::string::size_type *)v126.__r_.__value_.__l.__data_ != &v126.__r_.__value_.__r.__words[1])
      {
        do
        {
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100](&v145, (__int128 *)(v55 + 32));
          v56 = *(std::string **)(v55 + 8);
          if (v56)
          {
            do
            {
              v57 = v56;
              v56 = (std::string *)v56->__r_.__value_.__r.__words[0];
            }
            while (v56);
          }
          else
          {
            do
            {
              v57 = *(std::string **)(v55 + 16);
              v22 = v57->__r_.__value_.__r.__words[0] == v55;
              v55 = (std::string::size_type)v57;
            }
            while (!v22);
          }
          v55 = (std::string::size_type)v57;
        }
        while (v57 != (std::string *)&v126.__r_.__value_.__r.__words[1]);
      }
      ++v16;
      std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::destroy((char *)v126.__r_.__value_.__l.__size_);
      std::__tree<unsigned long>::destroy(v146.__begin_->__r_.__value_.__r.__words);
      v146.__first_ = &buf;
      std::vector<uaap_orchestration::grammar::RightLabel>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
      v15 += 168;
    }
    while (v15 != v124);
  }
  v58 = *a1;
  if (v58 > 6)
    v59 = 4;
  else
    v59 = dword_1C2313414[v58];
  v60 = SNLPOSLoggerForCategory(v59);
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
  {
    v61 = *a1;
    v62 = "UNKNOWN";
    v63 = "SSU";
    v64 = "LVC";
    v65 = "PSC";
    v66 = "OWL";
    v67 = "UaaP";
    v68 = "SNLC";
    v69 = (std::string *)"[insights-snlp-nlv4]: ";
    v70 = (std::string *)"NLv4";
    switch(*a1)
    {
      case 0u:
        break;
      case 1u:
LABEL_95:
        v69 = (std::string *)"[insights-snlp-snlc]: ";
        v70 = (std::string *)v68;
        break;
      case 2u:
LABEL_99:
        v69 = (std::string *)"[insights-snlp-owl]: ";
        v70 = (std::string *)v66;
        break;
      case 3u:
LABEL_100:
        v69 = (std::string *)"[insights-snlp-uaap]: ";
        v70 = (std::string *)v67;
        break;
      case 4u:
LABEL_102:
        v69 = (std::string *)"[insights-snlp-psc]: ";
        v70 = (std::string *)v65;
        break;
      case 5u:
LABEL_103:
        v69 = (std::string *)"[insights-snlp-lvc]: ";
        v70 = (std::string *)v64;
        break;
      case 6u:
LABEL_101:
        v69 = (std::string *)"[insights-snlp-ssu]: ";
        v70 = (std::string *)v63;
        break;
      case 7u:
LABEL_105:
        v72 = SNLPOSLoggerForCategory(4);
        v69 = (std::string *)"[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v61;
          _os_log_impl(&dword_1C2196000, v72, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
        }
        v70 = (std::string *)v62;
        break;
      default:
        v71 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"<UNDEFINED_COMPONENT>";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v61;
          _os_log_impl(&dword_1C2196000, v71, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&buf, 0x16u);
        }
        v61 = *a1;
        v68 = "<UNDEFINED_COMPONENT>";
        v69 = (std::string *)"[insights-snlp-nlv4]: ";
        v67 = "<UNDEFINED_COMPONENT>";
        v66 = "<UNDEFINED_COMPONENT>";
        v65 = "<UNDEFINED_COMPONENT>";
        v64 = "<UNDEFINED_COMPONENT>";
        v63 = "<UNDEFINED_COMPONENT>";
        v70 = (std::string *)"<UNDEFINED_COMPONENT>";
        switch(*a1)
        {
          case 0u:
            goto LABEL_108;
          case 1u:
            goto LABEL_95;
          case 2u:
            goto LABEL_99;
          case 3u:
            goto LABEL_100;
          case 4u:
            goto LABEL_102;
          case 5u:
            goto LABEL_103;
          case 6u:
            goto LABEL_101;
          default:
            v62 = "<UNDEFINED_COMPONENT>";
            goto LABEL_105;
        }
    }
LABEL_108:
    std::stringbuf::str();
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    LODWORD(v146.__first_) = 136315650;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v146.__first_ + 4) = v70;
    WORD2(v146.__begin_) = 2080;
    *(std::__split_buffer<std::string>::pointer *)((char *)&v146.__begin_ + 6) = v69;
    HIWORD(v146.__end_) = 2080;
    v146.__end_cap_.__value_ = p_buf;
    _os_log_impl(&dword_1C2196000, v60, OS_LOG_TYPE_DEBUG, "[%s] %sRejected OOV Spans: %s", (uint8_t *)&v146, 0x20u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  v74 = (uint64_t *)v138;
  if (v138 != v139)
  {
    v75 = (char *)v138 + 8;
    if ((char *)v138 + 8 != v139)
    {
      v76 = *(_QWORD *)v138;
      v77 = (char *)v138 + 8;
      do
      {
        v79 = *(_QWORD *)v77;
        v77 += 8;
        v78 = v79;
        v80 = v76 >= v79;
        if (v76 <= v79)
          v76 = v78;
        if (!v80)
          v74 = (uint64_t *)v75;
        v75 = v77;
      }
      while (v77 != v139);
    }
  }
  if (*((_BYTE *)a1 + 168))
    v81 = *((_QWORD *)a1 + 20);
  else
    v81 = 0;
  v82 = *v74;
  nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(v11, (std::string *)&v146);
  if (LOBYTE(v146.__end_cap_.__value_))
  {
    nlv4_inference_orchestrator::vocabulary::Vocabulary::getPadToken(v11, &buf);
    if (!v149)
      std::__throw_bad_optional_access[abi:ne180100]();
    v126 = buf;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v126, "");
  }
  if (LOBYTE(v146.__end_cap_.__value_) && SHIBYTE(v146.__end_) < 0)
    operator delete(v146.__first_);
  v83 = v82 * v123;
  *(float *)&v146.__first_ = (float)v81;
  std::vector<float>::resize(&v142, v82 * v123, &v146);
  if (v120 != v122)
  {
    v84 = 0;
    v85 = v142;
    v86 = (unint64_t *)v135;
    v87 = v138;
    v88 = v123;
    if (v123 <= 1)
      v88 = 1;
    do
    {
      v89 = v87[v84];
      if (v89)
      {
        v90 = 8 * v89;
        v91 = (float *)v85;
        v92 = v86;
        do
        {
          v93 = *v92++;
          *v91++ = (float)v93;
          v90 -= 8;
        }
        while (v90);
      }
      v86 += v89;
      ++v84;
      v85 += 4 * v82;
    }
    while (v84 != v88);
  }
  v94 = v141.__end_;
  v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3);
  v96 = v83 - v95;
  if (v83 <= v95)
  {
    if (v83 < v95)
    {
      v106 = &v141.__begin_[v83];
      while (v94 != v106)
      {
        if (SHIBYTE(v94[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v94[-1].__r_.__value_.__l.__data_);
        --v94;
      }
      v141.__end_ = v106;
    }
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_cap_.__value_ - (char *)v141.__end_) >> 3) >= v96)
  {
    v107 = &v141.__end_[v96];
    v108 = 24 * v83 - 8 * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3);
    do
    {
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v94, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
      }
      else
      {
        v109 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
        v94->__r_.__value_.__r.__words[2] = v126.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v94->__r_.__value_.__l.__data_ = v109;
      }
      ++v94;
      v108 -= 24;
    }
    while (v108);
    v141.__end_ = v107;
  }
  else
  {
    if (v83 > 0xAAAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v146.__end_cap_.__value_ = (std::allocator<std::string> *)&v141.__end_cap_;
    v97 = 0x5555555555555556 * (((char *)v141.__end_cap_.__value_ - (char *)v141.__begin_) >> 3);
    if (v97 <= v83)
      v97 = v82 * v123;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_cap_.__value_ - (char *)v141.__begin_) >> 3) >= 0x555555555555555)
      v98 = 0xAAAAAAAAAAAAAAALL;
    else
      v98 = v97;
    v99 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::archive::detail::basic_iarchive_impl::cobject_id>>((uint64_t)&v141.__end_cap_, v98);
    v100 = 3 * v95;
    v101 = v99 + v95;
    v146.__first_ = v99;
    v146.__begin_ = v101;
    v146.__end_ = v101;
    v146.__end_cap_.__value_ = &v99[v102];
    v103 = &v99[v83];
    v104 = 24 * v83 - 8 * v100;
    do
    {
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v101, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
      }
      else
      {
        v105 = *(_OWORD *)&v126.__r_.__value_.__l.__data_;
        v101->__r_.__value_.__r.__words[2] = v126.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101->__r_.__value_.__l.__data_ = v105;
      }
      ++v101;
      v104 -= 24;
    }
    while (v104);
    v146.__end_ = v103;
    std::vector<std::string>::__swap_out_circular_buffer(&v141, &v146);
    std::__split_buffer<std::string>::~__split_buffer(&v146);
  }
  if (v120 != v122)
  {
    v110 = 0;
    begin = v141.__begin_;
    v112 = v134[0];
    if (v123 <= 1)
      v113 = 1;
    else
      v113 = v123;
    do
    {
      v114 = *((_QWORD *)v138 + v110);
      if (v114)
      {
        for (j = 0; j != v114; ++j)
          std::string::operator=(&begin[j], (const std::string *)(v112 + j * 24));
      }
      v112 += 24 * v114;
      ++v110;
      begin += v82;
    }
    while (v110 != v113);
  }
  v116 = operator new(0x18uLL);
  *v116 = v123;
  v116[1] = 1;
  v116[2] = v82;
  memset(&v146, 0, 24);
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v146, v116, (uint64_t)(v116 + 3), 3uLL);
  v146.__end_cap_.__value_ = 0;
  v146.__end_cap_.__value_ = 0;
  v147 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v146.__end_cap_.__value_, v142, (uint64_t)v143, (v143 - v142) >> 2);
  v117 = *(void **)a4;
  if (*(_QWORD *)a4)
  {
    *(_QWORD *)(a4 + 8) = v117;
    operator delete(v117);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  *(_OWORD *)a4 = *(_OWORD *)&v146.__first_;
  *(_QWORD *)(a4 + 16) = v146.__end_;
  memset(&v146, 0, 24);
  v118 = *(std::__split_buffer<std::string>::pointer *)(a4 + 24);
  if (v118)
  {
    *(_QWORD *)(a4 + 32) = v118;
    operator delete(v118);
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    v118 = v146.__first_;
  }
  *(std::__compressed_pair<std::string *> *)(a4 + 24) = v146.__end_cap_;
  *(_QWORD *)(a4 + 40) = v147;
  v146.__end_cap_.__value_ = 0;
  v147 = 0;
  v146.__end_cap_.__value_ = 0;
  if (v118)
  {
    v146.__begin_ = v118;
    operator delete(v118);
  }
  if ((std::vector<std::string> *)(a4 + 48) != &v141)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a4 + 48), v141.__begin_, (__int128 *)v141.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v141.__end_ - (char *)v141.__begin_) >> 3));
  operator delete(v116);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  __p[0] = *(void **)MEMORY[0x1E0DE4F50];
  v119 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v128 = v119;
  *(_QWORD *)&v129 = MEMORY[0x1E0DE4FB8] + 16;
  if (v132 < 0)
    operator delete(v131);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&v133);
  __p[0] = v134;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v135)
  {
    v136 = (std::string::size_type *)v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = (char *)v138;
    operator delete(v138);
  }
  if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v140.__r_.__value_.__r.__words[0];
LABEL_191:
    operator delete(v10);
  }
  __p[0] = &v141;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v142)
  {
    v143 = v142;
    operator delete(v142);
  }
}

void sub_1C22D8CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  void *a72;
  uint64_t a73;
  void *a74;
  uint64_t a75;
  uint64_t v75;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v75 - 192));
  if (a30 < 0)
    operator delete(__p);
  a32 = (void *)*MEMORY[0x1E0DE4F50];
  v77 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(void **)((char *)&a32 + *((_QWORD *)a32 - 3)) = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  a34 = v77;
  a35 = MEMORY[0x1E0DE4FB8] + 16;
  if (a48 < 0)
    operator delete(a43);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&a51);
  a32 = &a70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a72)
  {
    a73 = (uint64_t)a72;
    operator delete(a72);
  }
  if (a74)
  {
    a75 = (uint64_t)a74;
    operator delete(a74);
  }
  if (SLOBYTE(STACK[0x217]) < 0)
    operator delete((void *)STACK[0x200]);
  a32 = (void *)(a11 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v78 = *(void **)(a11 + 24);
  if (v78)
  {
    *(_QWORD *)(a11 + 32) = v78;
    operator delete(v78);
  }
  v79 = *(void **)a11;
  if (*(_QWORD *)a11)
  {
    *(_QWORD *)(a11 + 8) = v79;
    operator delete(v79);
  }
  a32 = (void *)(v75 - 248);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  v80 = *(void **)(v75 - 224);
  if (v80)
  {
    *(_QWORD *)(v75 - 216) = v80;
    operator delete(v80);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logFeatureTensor(unsigned int *a1, uint64_t **a2)
{
  char *v3;
  char *v4;
  unsigned int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t i;
  unint64_t v24;
  unint64_t v25;
  unint64_t j;
  unint64_t v27;
  uint64_t *v28;
  float v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  signed int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  const char *v52;
  NSObject *v53;
  NSObject *v54;
  NSObject *v55;
  _BYTE *v56;
  uint64_t v57;
  _BYTE v58[12];
  __int16 v59;
  uint64_t v60;
  char v61;
  std::string __p;
  _BYTE *v63;
  uint8_t buf[12];
  __int16 v65;
  _BYTE v66[10];
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  void *v72;
  char v73;
  _QWORD v74[22];

  v74[20] = *MEMORY[0x1E0C80C00];
  v4 = (char *)*a2;
  v3 = (char *)a2[1];
  if (v3 - (char *)*a2 != 24)
  {
    v8 = SNLPOSLoggerForCategory(4);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      return;
    v9 = (int)*a1;
    if (v9 >= 8)
    {
      v15 = SNLPOSLoggerForCategory(4);
      v10 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v65 = 2048;
        *(_QWORD *)v66 = v9;
        _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v10 = off_1E7BED840[v9];
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v10;
    v16 = "[%s] Warning: Featurised spans shape not 3-dim";
LABEL_50:
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, v16, buf, 0xCu);
    return;
  }
  v6 = 1;
  while (v4 != v3)
  {
    v7 = *(_DWORD *)v4;
    v4 += 8;
    v6 *= v7;
  }
  v11 = v6;
  v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = (int)*a1;
    if (v13 >= 8)
    {
      v17 = SNLPOSLoggerForCategory(4);
      v14 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v65 = 2048;
        *(_QWORD *)v66 = v13;
        _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v14 = off_1E7BED840[v13];
    }
    v18 = **a2;
    v19 = (*a2)[1];
    v20 = (*a2)[2];
    *(_DWORD *)buf = 136316162;
    *(_QWORD *)&buf[4] = v14;
    v65 = 2048;
    *(_QWORD *)v66 = v18;
    *(_WORD *)&v66[8] = 2048;
    v67 = v19;
    v68 = 2048;
    v69 = v20;
    v70 = 2048;
    v71 = v11;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] [Span Tensor] shape=%lu,%lu,%lu num_elems=%lu", buf, 0x34u);
  }
  if (v11 != ((char *)a2[4] - (char *)a2[3]) >> 2)
  {
    v8 = SNLPOSLoggerForCategory(4);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      return;
    v40 = (int)*a1;
    if (v40 >= 8)
    {
      v53 = SNLPOSLoggerForCategory(4);
      v41 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v65 = 2048;
        *(_QWORD *)v66 = v40;
        _os_log_impl(&dword_1C2196000, v53, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v41 = off_1E7BED840[v40];
    }
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v41;
    v16 = "[%s] Warning: Span shape not consistent with data";
    goto LABEL_50;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)buf);
  v21 = (unint64_t *)*a2;
  v22 = **a2;
  if (v22)
  {
    for (i = 0; i < v22; ++i)
    {
      if (v21[1])
      {
        v24 = 0;
        do
        {
          v25 = v21[2];
          if (v25)
          {
            for (j = 0; j < v25; ++j)
            {
              v27 = j + v25 * (v24 + i * v21[1]);
              v28 = a2[3];
              if (v27 < ((char *)a2[4] - (char *)v28) >> 2)
              {
                v29 = *((float *)v28 + v27);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v66[2], (uint64_t)"[Span Token] i=", 15);
                v30 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" j=", 3);
                v31 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" k=", 3);
                v32 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" id=", 4);
                v33 = (_QWORD *)std::ostream::operator<<();
                v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" token=", 7);
                nlv4_inference_orchestrator::vocabulary::Vocabulary::denumericalizeToken((nlv4_inference_orchestrator::vocabulary::Vocabulary *)(a1 + 12), (unint64_t)v29, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  p_p = &__p;
                else
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                else
                  size = __p.__r_.__value_.__l.__size_;
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)p_p, size);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"\n", 1);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                v21 = (unint64_t *)*a2;
              }
              v25 = v21[2];
            }
          }
          ++v24;
        }
        while (v24 < v21[1]);
        v22 = *v21;
      }
    }
  }
  v38 = *a1;
  if (v38 > 6)
    v39 = 4;
  else
    v39 = dword_1C2313414[v38];
  v42 = SNLPOSLoggerForCategory(v39);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    v43 = *a1;
    v44 = "UNKNOWN";
    v45 = "SSU";
    v46 = "LVC";
    v47 = "PSC";
    v48 = "OWL";
    v49 = "UaaP";
    v50 = "SNLC";
    v51 = "[insights-snlp-nlv4]: ";
    v52 = "NLv4";
    switch(*a1)
    {
      case 0u:
        break;
      case 1u:
LABEL_46:
        v51 = "[insights-snlp-snlc]: ";
        v52 = v50;
        break;
      case 2u:
LABEL_54:
        v51 = "[insights-snlp-owl]: ";
        v52 = v48;
        break;
      case 3u:
LABEL_55:
        v51 = "[insights-snlp-uaap]: ";
        v52 = v49;
        break;
      case 4u:
LABEL_56:
        v51 = "[insights-snlp-psc]: ";
        v52 = v47;
        break;
      case 5u:
LABEL_57:
        v51 = "[insights-snlp-lvc]: ";
        v52 = v46;
        break;
      case 6u:
LABEL_58:
        v51 = "[insights-snlp-ssu]: ";
        v52 = v45;
        break;
      case 7u:
LABEL_60:
        v55 = SNLPOSLoggerForCategory(4);
        v51 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v58 = 136315394;
          *(_QWORD *)&v58[4] = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          v59 = 2048;
          v60 = v43;
          _os_log_impl(&dword_1C2196000, v55, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v58, 0x16u);
        }
        v52 = v44;
        break;
      default:
        v54 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v58 = 136315394;
          *(_QWORD *)&v58[4] = "<UNDEFINED_COMPONENT>";
          v59 = 2048;
          v60 = v43;
          _os_log_impl(&dword_1C2196000, v54, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", v58, 0x16u);
        }
        v43 = *(_DWORD *)"[insights-snlp-nlv4]: ";
        v50 = "<UNDEFINED_COMPONENT>";
        v51 = "[insights-snlp-nlv4]: ";
        v49 = "<UNDEFINED_COMPONENT>";
        v48 = "<UNDEFINED_COMPONENT>";
        v47 = "<UNDEFINED_COMPONENT>";
        v46 = "<UNDEFINED_COMPONENT>";
        v45 = "<UNDEFINED_COMPONENT>";
        v52 = "<UNDEFINED_COMPONENT>";
        switch(*(_DWORD *)"[insights-snlp-nlv4]: ")
        {
          case 0:
            goto LABEL_63;
          case 1:
            goto LABEL_46;
          case 2:
            goto LABEL_54;
          case 3:
            goto LABEL_55;
          case 4:
            goto LABEL_56;
          case 5:
            goto LABEL_57;
          case 6:
            goto LABEL_58;
          default:
            v44 = "<UNDEFINED_COMPONENT>";
            goto LABEL_60;
        }
    }
LABEL_63:
    std::stringbuf::str();
    if (v61 >= 0)
      v56 = v58;
    else
      v56 = *(_BYTE **)v58;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v51;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2080;
    v63 = v56;
    _os_log_impl(&dword_1C2196000, v42, OS_LOG_TYPE_DEBUG, "[%s] %s%s", (uint8_t *)&__p, 0x20u);
    if (v61 < 0)
      operator delete(*(void **)v58);
  }
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F50];
  v57 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  *(_QWORD *)&v66[2] = v57;
  v67 = MEMORY[0x1E0DE4FB8] + 16;
  if (v73 < 0)
    operator delete(v72);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](v74);
}

void sub_1C22D9704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v42;

  a22 = *MEMORY[0x1E0DE4F50];
  v42 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(uint64_t *)((char *)&a22 + *(_QWORD *)(a22 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  a24 = v42;
  a25 = MEMORY[0x1E0DE4FB8] + 16;
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C3BB9A90](&a41);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::insertToFeatureStore(int *a1, uint64_t a2, __int128 **a3, uint64_t *a4)
{
  int v8;
  BOOL inserted;
  NSObject *v11;
  uint64_t v12;
  const char *v13;
  BOOL v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v24;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v25;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (_os_feature_enabled_impl())
  {
    nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::createLoggingSpanFeaturizerResponse(a2, a3, &v26);
    v8 = *a1;
    if (*a1 == 4 || v8 == 1)
    {
      v24 = v26;
      nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeITFMSpanFeaturizerResponse((uint64_t *)&v24, a1, (sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)buf);
      if (v24)
        (*(void (**)(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *))(*(_QWORD *)v24 + 8))(v24);
      inserted = snlp::common::logging::feature_store_utilities::insertITFMSpanResponseToFeatureStore((uint64_t)buf, a4, (uint64_t)a1);
      MEMORY[0x1C3BB86EC](buf);
      if (inserted)
        goto LABEL_18;
    }
    else if (v8)
    {
      if (v26)
        (*(void (**)(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *))(*(_QWORD *)v26 + 8))(v26);
    }
    else
    {
      v25 = v26;
      nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeNLv4SpanFeaturizerResponse((uint64_t *)&v25, (sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)buf);
      if (v25)
        (*(void (**)(sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *))(*(_QWORD *)v25 + 8))(v25);
      v14 = snlp::common::logging::feature_store_utilities::insertNLv4SpanResponseToFeatureStore((uint64_t)buf, a4);
      sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)buf);
      if (v14)
      {
LABEL_18:
        v15 = SNLPOSLoggerForCategory(4);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          return;
        v16 = *a1;
        if (v16 >= 8)
        {
          v23 = SNLPOSLoggerForCategory(4);
          v17 = "<UNDEFINED_COMPONENT>";
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            v28 = "<UNDEFINED_COMPONENT>";
            v29 = 2048;
            v30 = v16;
            _os_log_impl(&dword_1C2196000, v23, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
          }
        }
        else
        {
          v17 = off_1E7BED840[v16];
        }
        *(_DWORD *)buf = 136315138;
        v28 = v17;
        v22 = "[%s] Successfully inserted span featurizer response into FeatureStore";
        goto LABEL_32;
      }
    }
  }
  else
  {
    v11 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v12 = *a1;
      if (v12 >= 8)
      {
        v18 = SNLPOSLoggerForCategory(4);
        v13 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          v28 = "<UNDEFINED_COMPONENT>";
          v29 = 2048;
          v30 = v12;
          _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v13 = off_1E7BED840[v12];
      }
      *(_DWORD *)buf = 136315138;
      v28 = v13;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "[%s] Skipping insertion of matched spans featurized response into FeatureStore because SNLPFeatureStoreEnabled feature flag is disabled", buf, 0xCu);
    }
  }
  v15 = SNLPOSLoggerForCategory(4);
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    return;
  v19 = *a1;
  if (v19 >= 8)
  {
    v21 = SNLPOSLoggerForCategory(4);
    v20 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v28 = "<UNDEFINED_COMPONENT>";
      v29 = 2048;
      v30 = v19;
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
    }
  }
  else
  {
    v20 = off_1E7BED840[v19];
  }
  *(_DWORD *)buf = 136315138;
  v28 = v20;
  v22 = "[%s] Unable to insert span featurizer response into FeatureStore";
LABEL_32:
  _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, v22, buf, 0xCu);
}

void sub_1C22D9B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse((sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<snlp::common::tensor::InferenceTensor,std::vector<std::string>>::~pair(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::createLoggingSpanFeaturizerResponse@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, sirinluinternalsnlp_intermediate::SpanFeaturizerResponse **a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  float *v20;
  float *v21;
  void **v22;
  _QWORD *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  int v33;
  __int128 *v34;
  __int128 *v35;
  unint64_t v36;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v37;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *v38;
  uint64_t result;

  v5 = (_QWORD *)operator new();
  sirinluinternalsnlp_intermediate::LinearizedTensor::LinearizedTensor((sirinluinternalsnlp_intermediate::LinearizedTensor *)v5);
  v6 = *(_QWORD **)a1;
  v7 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v7)
  {
    v8 = (void **)(v5 + 4);
    v9 = v5 + 6;
    v10 = (char *)v5[5];
    do
    {
      if ((unint64_t)v10 >= *v9)
      {
        v12 = (char *)*v8;
        v13 = (v10 - (_BYTE *)*v8) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v15 = *v9 - (_QWORD)v12;
        if (v15 >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 6), v16);
          v12 = (char *)v5[4];
          v10 = (char *)v5[5];
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = *v6;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v5[4] = v18;
        v5[5] = v11;
        v5[6] = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v10 = *v6;
        v11 = v10 + 4;
      }
      v5[5] = v11;
      ++v6;
      v10 = v11;
    }
    while (v6 != v7);
  }
  v20 = *(float **)(a1 + 24);
  v21 = *(float **)(a1 + 32);
  if (v20 != v21)
  {
    v22 = (void **)(v5 + 1);
    v23 = v5 + 3;
    v24 = (char *)v5[2];
    do
    {
      if ((unint64_t)v24 >= *v23)
      {
        v26 = (char *)*v22;
        v27 = (v24 - (_BYTE *)*v22) >> 2;
        v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 62)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v29 = *v23 - (_QWORD)v26;
        if (v29 >> 1 > v28)
          v28 = v29 >> 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
          v30 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v30 = v28;
        if (v30)
        {
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v5 + 3), v30);
          v26 = (char *)v5[1];
          v24 = (char *)v5[2];
        }
        else
        {
          v31 = 0;
        }
        v32 = &v31[4 * v27];
        *(_DWORD *)v32 = *v20;
        v25 = v32 + 4;
        while (v24 != v26)
        {
          v33 = *((_DWORD *)v24 - 1);
          v24 -= 4;
          *((_DWORD *)v32 - 1) = v33;
          v32 -= 4;
        }
        v5[1] = v32;
        v5[2] = v25;
        v5[3] = &v31[4 * v30];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_DWORD *)v24 = *v20;
        v25 = v24 + 4;
      }
      v5[2] = v25;
      ++v20;
      v24 = v25;
    }
    while (v20 != v21);
  }
  v34 = *a2;
  v35 = a2[1];
  if (*a2 != v35)
  {
    v36 = v5[8];
    do
    {
      if (v36 >= v5[9])
      {
        v36 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v5 + 7, v34);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)(v5 + 7), v34);
        v36 += 24;
      }
      v5[8] = v36;
      v34 = (__int128 *)((char *)v34 + 24);
    }
    while (v34 != v35);
  }
  v37 = (sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)operator new();
  v38 = (sirinluinternalsnlp_intermediate::SpanFeaturizerResponse *)sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::SpanFeaturizerResponse(v37);
  *a3 = v38;
  sirinluinternalsnlp_intermediate::SpanFeaturizerResponse::makeTensor(v38);
  result = *((_QWORD *)v37 + 1);
  *((_QWORD *)v37 + 1) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C22D9ECC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeNLv4SpanFeaturizerResponse@<X0>(uint64_t *a1@<X0>, sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::NLv4SpanFeaturizerResponse(a2);
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::makeResponse(a2);
  v4 = *a1;
  *a1 = 0;
  result = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C22D9F70(_Unwind_Exception *a1)
{
  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse *v1;

  sirinluinternalsnlp_intermediate::NLv4SpanFeaturizerResponse::~NLv4SpanFeaturizerResponse(v1);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::makeITFMSpanFeaturizerResponse(uint64_t *a1@<X0>, int *a2@<X1>, sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *a3@<X8>)
{
  sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = (sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse *)sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::ITFMSpanFeaturizerResponse(a3);
  sirinluinternalsnlp_intermediate::ITFMSpanFeaturizerResponse::makeResponse(v6);
  v7 = *a1;
  *a1 = 0;
  v8 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 2) = v7;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!*((_QWORD *)a3 + 1))
  {
    v9 = (_QWORD *)operator new();
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v10 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v9;
    if (v10)
      std::default_delete<std::string>::operator()[abi:ne180100](v10);
  }
  v11 = (_QWORD *)operator new();
  v12 = *a2;
  if (v12 >= 8)
  {
    v14 = SNLPOSLoggerForCategory(4);
    v13 = "<UNDEFINED_COMPONENT>";
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = 136315394;
      v17 = "<UNDEFINED_COMPONENT>";
      v18 = 2048;
      v19 = v12;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v16, 0x16u);
    }
  }
  else
  {
    v13 = off_1E7BED840[v12];
  }
  std::string::basic_string[abi:ne180100]<0>(v11, v13);
  v15 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v11;
  if (v15)
    std::default_delete<std::string>::operator()[abi:ne180100](v15);
}

void sub_1C22DA108(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1C3BB9B44](v2, 0x1012C40EC159624);
  MEMORY[0x1C3BB86EC](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1C22DA1A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::appendExpandedSpanLabelsAndNumericalisedIndexes(int *a1, uint64_t **a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  std::string *v14;
  std::vector<std::string>::pointer v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  uint64_t v27;
  std::vector<std::string>::pointer v28;
  std::string *v29;
  _BYTE buf[12];
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  nlv4_inference_orchestrator::span_matching::SpanVocabLabelUtilities::getExpandedSpanLabels((_QWORD *)a1 + 66, a5, (_QWORD *)a1 + 1, a1, &v28);
  v15 = v28;
  v14 = v29;
  if (v28 == v29)
  {
    v16 = 0;
  }
  else
  {
    v27 = a4;
    v16 = 0;
    while (1)
    {
      v17 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)v15);
      if (*((_BYTE *)a1 + 152))
        v18 = v17 == *((_QWORD *)a1 + 18);
      else
        v18 = 0;
      if (!v18)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(a3, v15, (uint64_t)v15);
        v19 = nlv4_inference_orchestrator::vocabulary::Vocabulary::numericalizeToken((uint64_t)(a1 + 12), (uint64_t)v15);
        v16 += std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(a2, v19, v19) & 1;
      }
      if (v16 + a6 >= a7)
        break;
      if (++v15 == v14)
        goto LABEL_26;
    }
    v20 = *(const char **)(v27 + 8);
    if (v20)
    {
      if (v20[23] < 0)
        v20 = *(const char **)v20;
    }
    else
    {
      v20 = "nullptr";
    }
    v21 = *(const char **)(*(_QWORD *)(a5 + 24) + 48);
    if (v21)
    {
      if (v21[23] < 0)
        v21 = *(const char **)v21;
    }
    else
    {
      v21 = "nullptr";
    }
    v22 = SNLPOSLoggerForCategory(4);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
    {
      v23 = (const char *)*a1;
      if (v23 >= 8)
      {
        v25 = SNLPOSLoggerForCategory(4);
        v24 = "<UNDEFINED_COMPONENT>";
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
          v31 = 2048;
          v32 = v23;
          _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
        }
      }
      else
      {
        v24 = off_1E7BED840[v23];
      }
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v24;
      v31 = 2080;
      v32 = v20;
      v33 = 2080;
      v34 = v21;
      v35 = 2048;
      v36 = v16;
      v37 = 2048;
      v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3);
      _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] Truncating the number of span labels for token='%s', span label='%s'. Using the first %lu out of %lu expanded label(s).", buf, 0x34u);
    }
  }
LABEL_26:
  *(_QWORD *)buf = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  return v16;
}

void sub_1C22DA450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long>(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        return 0;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__insert_node_at(a1, (uint64_t)v7, v6, v9);
    return 1;
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t *result;
  uint64_t *v11;
  std::string *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      result = (uint64_t *)std::less<void>::operator()[abi:ne180100]<std::string const&,std::string const&>(v8, a2);
      if (!(_DWORD)result)
        break;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v11 = (uint64_t *)operator new(0x38uLL);
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v6;
    *v9 = v11;
    v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      v11 = *v9;
    }
    result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

void sub_1C22DA60C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::span_matching::MatchedSpansFeaturizer::logSpanCoverage(int *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v16[2];
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  _BYTE buf[12];
  __int16 v21;
  uint64_t v22;
  char v23;
  uint8_t v24[4];
  const char *v25;
  __int16 v26;
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v16);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      if (*(_QWORD *)(v4 + 48))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"span '", 6);
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"' covers tokens [", 17);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
        v8 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)")\n", 2);
      }
      v4 += 88;
    }
    while (v4 != v5);
  }
  v9 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *a1;
    if (v10 >= 8)
    {
      v12 = SNLPOSLoggerForCategory(4);
      v11 = "<UNDEFINED_COMPONENT>";
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = "<UNDEFINED_COMPONENT>";
        v21 = 2048;
        v22 = v10;
        _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", buf, 0x16u);
      }
    }
    else
    {
      v11 = off_1E7BED840[v10];
    }
    std::stringbuf::str();
    if (v23 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    *(_DWORD *)v24 = 136315394;
    v25 = v11;
    v26 = 2080;
    v27 = v13;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "[%s] %s", v24, 0x16u);
    if (v23 < 0)
      operator delete(*(void **)buf);
  }
  v16[0] = *MEMORY[0x1E0DE4F50];
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v17[0] = v14;
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v19);
}

void sub_1C22DA898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB5B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB5B0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB688;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB688;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB760;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB760;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  int v12;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(&v10);
  v6 = *a3;
  v5 = a3[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3);
  v11 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v12 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      --v7;
      boost::archive::detail::basic_oarchive::end_preamble(a2);
      result = (uint64_t)boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a2, v9);
      v9 += 24;
    }
    while (v7);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(boost::archive::detail::basic_oarchive *a1)
{
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a1);
  if ((*(_BYTE *)(*((_QWORD *)a1 + 6) + *(_QWORD *)(**((_QWORD **)a1 + 6) - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return std::ostream::operator<<();
}

void sub_1C22DB094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB7A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB7A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  unint64_t v11;
  int v12;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(&v10);
  v6 = *a3;
  v5 = a3[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a3) >> 3);
  v11 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v12 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      --v7;
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v9, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
      v9 += 24;
    }
    while (v7);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB838;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB838;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11[4];
  uint64_t v12;
  int v13;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v11);
  v6 = *a3;
  v5 = a3[1];
  v7 = (v5 - *a3) >> 3;
  v12 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v13 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      --v7;
      v10 = v9 + 8;
      result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
      v9 = v10;
    }
    while (v7);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB9A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB9A0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBA78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBA78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectPlaintextPositiveExamples>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBB50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBB50;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t result;
  uint64_t *v6;
  unint64_t v8;
  char v9[4];
  unint64_t v10;
  int v11;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v9);
  v10 = 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
      result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save(a2 + 5, v6);
      v8 = v10--;
      v6 += 3;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, 8);
  if (result != 8)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C22DB6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v3[144];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a2, 4);
  if (result != 4)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v3, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v3);
  }
  return result;
}

void sub_1C22DB744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
  boost::archive::archive_exception::~archive_exception(&a10);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBB98;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBB98;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v8;
  char v9[4];
  unint64_t v10;
  int v11;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v9);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
      v8 = v10--;
      v6 += 24;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<std::vector<unsigned long>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBC28;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBC28;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::save_object_data(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8[4];
  uint64_t v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v8);
  v9 = (a3[1] - *a3) >> 3;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v9);
  v6 = *a3;
  if (*a3 != a3[1])
  {
    v7 = 8 * v9;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[5] + 96))(a2[5], v6, 8 * v9);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
    }
  }
  return result;
}

void sub_1C22DB9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB640;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB640;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 48, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB7F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB7F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  char v13[4];
  uint64_t v14;
  int v15;
  _BYTE v16[144];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v13);
  v6 = *a3;
  v5 = a3[1];
  v7 = (v5 - *a3) >> 2;
  v14 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v15 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      boost::archive::detail::basic_oarchive::end_preamble(a2);
      boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken((uint64_t)a2);
      v10 = (uint64_t *)*((_QWORD *)a2 + 6);
      v11 = *v10;
      v12 = (char *)v10 + *(_QWORD *)(*v10 - 24);
      if ((v12[32] & 5) != 0)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)v16, 13, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v16);
      }
      v9 += 4;
      *((_QWORD *)v12 + 2) = 9;
      *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFEFB | 0x100;
      result = std::ostream::operator<<();
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_1C22DBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBA30;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBA30;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 48, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBBE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBBE0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::save_object_data(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8[4];
  uint64_t v9;
  _BYTE v10[144];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v8);
  v9 = (a3[1] - *a3) >> 2;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v9);
  v6 = *a3;
  if (*a3 != a3[1])
  {
    v7 = 4 * v9;
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[5] + 96))(a2[5], v6, 4 * v9);
    if (result != v7)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v10, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v10);
    }
  }
  return result;
}

void sub_1C22DBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::exception a12)
{
  boost::archive::archive_exception::~archive_exception(&a12);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB5F8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB5F8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<float>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB9E8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB9E8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<unsigned long>>>::get_instance(void)::t);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<float>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB568;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB568;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB6D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB6D0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  unint64_t v11;
  int v12;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(&v10);
  v6 = *a3;
  v5 = a3[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a3) >> 4);
  v11 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v12 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      --v7;
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v9, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
      v9 += 48;
    }
    while (v7);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB4D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB4D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a2, a3);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, a3 + 24, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB718;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB718;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, unint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  unint64_t v9;
  char v10;
  unint64_t v11;
  int v12;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(&v10);
  v6 = *a3;
  v5 = a3[1];
  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a3) >> 4);
  v11 = v7;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(a2);
  v12 = 0;
  result = boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(a2);
  if (v5 != v6)
  {
    v9 = *a3;
    do
    {
      --v7;
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v9, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
      v9 += 48;
    }
    while (v7);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB520;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB520;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

_QWORD *boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a2, a3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  return boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(a2, a3 + 24);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB958;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB958;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2, unint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBAC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBAC0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v8;
  char v9[4];
  unint64_t v10;
  int v11;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v9);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_instance(void)::t);
      v8 = v10--;
      v6 += 48;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectIntent>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB8C8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB8C8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t *a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save((_QWORD *)a2 + 5, a3);
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, (unint64_t)(a3 + 3), (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_instance(void)::t);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntent>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEBB08;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEBB08;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::save_object_data(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v8;
  char v9[4];
  unint64_t v10;
  int v11;

  (*(void (**)(char *__return_ptr))(*(_QWORD *)a1 + 40))(v9);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 4);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::collection_size_type>(a2[5], (uint64_t)&v10);
  v11 = 0;
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  result = boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<boost::serialization::item_version_type>(a2[5], (uint64_t)&v11);
  v6 = *a3;
  if (v10--)
  {
    do
    {
      boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance();
      result = boost::archive::detail::basic_oarchive::save_object((boost::archive::detail::basic_oarchive_impl **)a2, v6, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_instance(void)::t);
      v8 = v10--;
      v6 += 48;
    }
    while (v8);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,std::vector<snlp::ssu::cache::SSUCacheObjectParameter>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB910;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB910;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t *a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save((_QWORD *)a2 + 5, a3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save((_QWORD *)a2 + 5, a3 + 3);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectParameter>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB490;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB490;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v4);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(_QWORD *)a1 = &off_1E7BEB880;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  *(_QWORD *)a1 = &off_1E7BEB880;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::save_object_data(uint64_t a1, boost::archive::detail::basic_oarchive *a2, uint64_t a3)
{
  uint64_t v6;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 40))(&v6);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((_QWORD *)a2 + 5, a3);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((_QWORD *)a2 + 5, a3 + 8);
  boost::archive::detail::basic_oarchive::end_preamble(a2);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((_QWORD *)a2 + 5, a3 + 16);
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::tracking(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>::is_polymorphic()
{
  return 0;
}

std::string *snlp::ssu::cache::SSUCacheFileWriteStream::SSUCacheFileWriteStream(std::string *this, __int128 *a2, __int128 *a3, std::string::size_type a4, std::string::size_type a5, int a6)
{
  __int128 v11;
  uint64_t data_low;
  uint64_t v13;
  void **v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v18[3];
  __int128 *v19;
  __int128 **v20;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v11 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v11;
  }
  std::ofstream::basic_ofstream(this[1].__r_.__value_.__r.__words);
  snlp::ssu::cache::SSUCacheFileWriteStream::buildArchive((uint64_t *)&this[1], a6, (uint64_t)&this[24].__r_.__value_.__r.__words[2]);
  this[30].__r_.__value_.__l.__size_ = a4;
  this[30].__r_.__value_.__r.__words[2] = a5;
  this[31].__r_.__value_.__s.__data_[16] = 0;
  *(_OWORD *)&this[31].__r_.__value_.__l.__data_ = 0u;
  v18[0] = 1;
  v18[1] = a4;
  v18[2] = a5;
  v19 = (__int128 *)v18;
  data_low = LODWORD(this[30].__r_.__value_.__l.__data_);
  if ((_DWORD)data_low == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v20 = &v19;
  ((void (*)(__int128 ***, std::string::size_type *))off_1E7BED880[data_low])(&v20, &this[24].__r_.__value_.__r.__words[2]);
  v16 = *a3;
  v17 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v19 = &v16;
  v13 = LODWORD(this[30].__r_.__value_.__l.__data_);
  if ((_DWORD)v13 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v20 = &v19;
  ((void (*)(__int128 ***, std::string::size_type *))off_1E7BED890[v13])(&v20, &this[24].__r_.__value_.__r.__words[2]);
  v15 = (void **)&v16;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v15);
  return this;
}

void sub_1C22DCFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::string *a10, std::string *a11, uint64_t a12, __int128 a13, std::string::size_type a14)
{
  void *v14;
  std::runtime_error *exception;
  const std::string::value_type *v16;
  std::string *v17;
  __int128 v18;
  void *v19;
  std::runtime_error *v20;
  const std::string::value_type *v21;
  std::string *v22;
  __int128 v23;

  if (a2 == 2)
  {
    v14 = __cxa_begin_catch(exception_object);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a10, "I/O stream exception: ");
    v16 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
    v17 = std::string::append((std::string *)&a10, v16);
    v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    a14 = v17->__r_.__value_.__r.__words[2];
    a13 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&a13);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
  }
  if (a2 == 1)
  {
    v19 = __cxa_begin_catch(exception_object);
    v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&a10, "Boost serialization exception: ");
    v21 = (const std::string::value_type *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 16))(v19);
    v22 = std::string::append((std::string *)&a10, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    a14 = v22->__r_.__value_.__r.__words[2];
    a13 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, (const std::string *)&a13);
    v20->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9AB0;
  }
  _Unwind_Resume(exception_object);
}

void sub_1C22DD16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C22DD200(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C22DD228);
}

void snlp::ssu::cache::SSUCacheFileWriteStream::buildArchive(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  boost::archive *v4;
  int v5;
  std::locale *v6;

  if (a2)
  {
    v4 = boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl((boost::archive::detail::basic_oarchive *)a3, a1, 0);
    *(_QWORD *)a3 = off_1E7BEBF58;
    boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init(v4);
    v5 = 1;
  }
  else
  {
    v6 = boost::archive::binary_oarchive_impl<boost::archive::binary_oarchive,char,std::char_traits<char>>::binary_oarchive_impl((std::locale *)a3, a1, 0);
    *(_QWORD *)a3 = off_1E7BEC008;
    boost::archive::basic_binary_oarchive<boost::archive::binary_oarchive>::init((boost::archive *)v6);
    boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::init((_QWORD *)(a3 + 40));
    v5 = 0;
  }
  *(_DWORD *)(a3 + 128) = v5;
}

void sub_1C22DD2AC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oarchive *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(v1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive((uint64_t)v1 + 48);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectIntentList>(snlp::ssu::cache::SSUCacheObjectIntentList)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectIntentList>(snlp::ssu::cache::SSUCacheObjectIntentList)::{lambda(snlp::ssu::cache::SSUCacheObjectIntentList&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectIntentList>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectHeader>(snlp::ssu::cache::SSUCacheObjectHeader)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectHeader>(snlp::ssu::cache::SSUCacheObjectHeader)::{lambda(snlp::ssu::cache::SSUCacheObjectHeader&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectHeader>>::get_instance(void)::t);
}

void boost::archive::binary_oarchive::~binary_oarchive(boost::archive::binary_oarchive *this)
{
  std::locale *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(v1 + 5);
}

{
  std::locale *v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::~basic_binary_oprimitive(v1 + 5);
  JUMPOUT(0x1C3BB9B44);
}

void boost::archive::text_oarchive::~text_oarchive(boost::archive::text_oarchive *this)
{
  uint64_t v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1 + 48);
}

{
  uint64_t v1;

  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(v1 + 48);
  JUMPOUT(0x1C3BB9B44);
}

void snlp::ssu::cache::SSUCacheFileWriteStream::path(snlp::ssu::cache::SSUCacheFileWriteStream *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::isAtEnd(snlp::ssu::cache::SSUCacheFileWriteStream *this)
{
  return *((_QWORD *)this + 93) == *((_QWORD *)this + 91)
      && *((_QWORD *)this + 94) == *((_QWORD *)this + 92)
      && *((_BYTE *)this + 760) != 0;
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchNegative(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[16];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  uint8_t *v13;
  uint8_t **v14;

  v2 = *(_QWORD *)(a1 + 744);
  v3 = *(_QWORD *)(a1 + 728);
  if (v2 == v3)
  {
    v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "Client tried to write the next negative cached encodings batch when there are none remaining to be written", buf, 2u);
    }
  }
  else
  {
    *(_OWORD *)buf = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_OWORD *)__p = *(_OWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    v13 = buf;
    v5 = *(unsigned int *)(a1 + 720);
    if ((_DWORD)v5 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v14 = &v13;
    ((void (*)(uint8_t ***, uint64_t))off_1E7BED8A0[v5])(&v14, a1 + 592);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    v6 = *(_QWORD *)(a1 + 744) + 1;
    *(_QWORD *)(a1 + 744) = v6;
    if (v6 == *(_QWORD *)(a1 + 728))
      snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(a1, 4660);
  }
  return v2 != v3;
}

void sub_1C22DD624(uint64_t a1, std::string *a2, std::string *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *__p, uint64_t a9)
{
  __break(1u);
}

void sub_1C22DD79C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C22DD830(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C22DD858);
}

uint64_t snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;

  v4 = &v5;
  v5 = a2;
  v2 = *(unsigned int *)(a1 + 720);
  if ((_DWORD)v2 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v6 = &v4;
  return (*(&off_1E7BED8B0 + v2))((int)&v6, (boost::archive::detail::basic_oarchive *)(a1 + 592));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(unsigned long)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(uint64_t **a1, boost::archive::detail::basic_oarchive *this)
{
  uint64_t v3;

  v3 = **a1;
  boost::archive::detail::basic_oarchive::end_preamble(this);
  return boost::archive::basic_binary_oprimitive<boost::archive::binary_oarchive,char,std::char_traits<char>>::save<unsigned long>((_QWORD *)this + 5, v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(unsigned long)::{lambda(unsigned long&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
  return boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchNegative>>::get_instance(void)::t);
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeBatchPositive(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _BOOL8 result;
  const char *v4;
  uint64_t v6;
  uint64_t v7;
  uint8_t buf[16];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  uint8_t *v14;
  uint8_t **v15;

  if (*(_QWORD *)(a1 + 744) >= *(_QWORD *)(a1 + 728))
  {
    if (*(_QWORD *)(a1 + 752) == *(_QWORD *)(a1 + 736))
    {
      v2 = SNLPOSLoggerForCategory(8);
      result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_WORD *)buf = 0;
        v4 = "Client tried to write the next positive cached encodings batch when there are none remaining to be written";
        goto LABEL_7;
      }
    }
    else
    {
      *(_OWORD *)buf = *(_OWORD *)a2;
      v9 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_OWORD *)v10 = *(_OWORD *)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_OWORD *)__p = *(_OWORD *)(a2 + 48);
      v13 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      v14 = buf;
      v6 = *(unsigned int *)(a1 + 720);
      if ((_DWORD)v6 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v15 = &v14;
      ((void (*)(uint8_t ***, uint64_t))off_1E7BED8C0[v6])(&v15, a1 + 592);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v10[0])
      {
        v10[1] = v10[0];
        operator delete(v10[0]);
      }
      if (*(_QWORD *)buf)
      {
        *(_QWORD *)&buf[8] = *(_QWORD *)buf;
        operator delete(*(void **)buf);
      }
      v7 = *(_QWORD *)(a1 + 752) + 1;
      *(_QWORD *)(a1 + 752) = v7;
      if (v7 == *(_QWORD *)(a1 + 736))
        snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<unsigned long>(a1, 22136);
      return 1;
    }
  }
  else
  {
    v2 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (result)
    {
      *(_WORD *)buf = 0;
      v4 = "Client tried to write a positive cached encodings batch when there are still negative batches remaining to be written";
LABEL_7:
      _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, v4, buf, 2u);
      return 0;
    }
  }
  return result;
}

void sub_1C22DDB04(uint64_t a1, std::string *a2, std::string *a3)
{
  __break(1u);
}

void sub_1C22DDC64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C22DDCF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C22DDD20);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive)::{lambda(snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive>>::get_instance(void)::t);
}

BOOL snlp::ssu::cache::SSUCacheFileWriteStream::writeDebugInformation(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _BOOL8 result;
  const char *v4;
  uint64_t v6;
  void **v7[4];
  uint8_t buf[16];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint8_t *v12;
  uint8_t **v13;

  if (*(_QWORD *)(a1 + 744) < *(_QWORD *)(a1 + 728))
  {
    v2 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v4 = "Client tried to write positive plaintext examples when there are still negative batches remaining to be written";
LABEL_10:
    _os_log_impl(&dword_1C2196000, v2, OS_LOG_TYPE_ERROR, v4, buf, 2u);
    return 0;
  }
  if (*(_QWORD *)(a1 + 752) < *(_QWORD *)(a1 + 736))
  {
    v2 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v4 = "Client tried to write positive plaintext examples when there are still positive batches remaining to be written";
    goto LABEL_10;
  }
  if (*(_BYTE *)(a1 + 760))
  {
    v2 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v2, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_WORD *)buf = 0;
    v4 = "Client tried to write debug information when this have already been written";
    goto LABEL_10;
  }
  *(_OWORD *)buf = *(_OWORD *)a2;
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = buf;
  v6 = *(unsigned int *)(a1 + 720);
  if ((_DWORD)v6 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v13 = &v12;
  ((void (*)(uint8_t ***, uint64_t))off_1E7BED8D0[v6])(&v13, a1 + 592);
  v7[0] = (void **)&v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v7);
  v7[0] = (void **)buf;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](v7);
  result = 1;
  *(_BYTE *)(a1 + 760) = 1;
  return result;
}

void sub_1C22DDF24(uint64_t a1, std::string *a2, std::string *a3)
{
  __break(1u);
}

void sub_1C22DE078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      __cxa_end_catch();
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1C22DE10C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  __cxa_free_exception(v15);
  __cxa_end_catch();
  JUMPOUT(0x1C22DE134);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(snlp::ssu::cache::SSUCacheObjectDebugInformation)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::binary_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<void snlp::ssu::cache::SSUCacheFileWriteStream::writeObjectToStream<snlp::ssu::cache::SSUCacheObjectDebugInformation>(snlp::ssu::cache::SSUCacheObjectDebugInformation)::{lambda(snlp::ssu::cache::SSUCacheObjectDebugInformation&&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,boost::archive::binary_oarchive,std::__variant_detail::_Trait::text_oarchive> &>(unint64_t **a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v3;

  v3 = **a1;
  boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, v3, (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,snlp::ssu::cache::SSUCacheObjectDebugInformation>>::get_instance(void)::t);
}

void sub_1C22DE214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22DE28C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22DE304(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22DE37C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22DE444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C22DE524(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C22DE604(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C22DE6E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C22DE774(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22DE840(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1C22DE8F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1C22DEAC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getUtf8Indices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((_QWORD *)this + 12);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getUtf16Indices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((_QWORD *)this + 14);
}

uint64_t nlv4_inference_orchestrator::orchestration::IndexedToken::getScalarIndices(nlv4_inference_orchestrator::orchestration::IndexedToken *this)
{
  return *((_QWORD *)this + 16);
}

void snlp::ssu::trigger::SSUTriggerAppName::~SSUTriggerAppName(void **this)
{
  *this = off_1E7BE9BB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E7BE9BB0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3BB9B44);
}

uint64_t snlp::ssu::trigger::SSUTriggerAppName::isTriggered(unsigned __int8 **this, const snlp::ssu::proto::SSUValidatedRequest *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;

  snlp::ssu::proto::SSUValidatedRequest::getAppNameMatchingSpanBundleIds(a2, a2, &v6);
  v3 = v7;
  v4 = v3 != std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v6, v7, this + 1);
  v8 = (void **)&v6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v4 | (v4 << 32);
}

__n128 snlp::ssu::trigger::SSUTriggerAppName::SSUTriggerAppName(uint64_t a1, __n128 *a2)
{
  __n128 result;

  *(_QWORD *)a1 = off_1E7BE9BB0;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *(_QWORD *)a1 = off_1E7BE9BB0;
  result = *a2;
  *(_QWORD *)(a1 + 24) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  return result;
}

uint64_t snlp::ssu::espresso::SSUNessieModule::SSUNessieModule(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13[5];
  char v14;
  int v15;
  _OWORD v16[2];
  int v17;

  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v15 = 6;
  LOBYTE(v13[0]) = 0;
  v14 = 0;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::EspressoE5MLModule(a1, a2, (uint64_t)v16, &v15, (unsigned __int8 *)a1, v13);
  std::__optional_destruct_base<snlp::common::selflogging::NLXSchemaNLXClientEventMetadata,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v13);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)v16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 352), "padding_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 376), "token_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 400), "encodings");
  *(_QWORD *)(a1 + 424) = a3;
  *(_QWORD *)(a1 + 432) = 850045863;
  *(_QWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors((snlp::ssu::espresso::SSUNessieModule *)a1, a4);
  v7 = *(std::__shared_weak_count **)(a1 + 184);
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  _os_feature_enabled_impl();
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::allocateMemoryToPorts((E5RT::ExecutionStreamOperation **)a1);
  return a1;
}

void sub_1C22DEEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  void **v10;
  void **v11;
  void **v12;
  std::mutex *v13;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::mutex::~mutex(v13);
  if (v9[423] < 0)
    operator delete(*v12);
  if (v9[399] < 0)
    operator delete(*v11);
  if (v9[375] < 0)
    operator delete(*v10);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::~EspressoE5MLModule((snlp::common::espresso_inference::e5ml::EspressoE5MLModule *)v9);
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors(snlp::ssu::espresso::SSUNessieModule *this, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  char *__p;
  char *v15;
  _OWORD v16[2];
  int v17;
  char v18[16];
  _BYTE buf[12];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  E5RT::TensorDataType::TensorDataType();
  memset(v16, 0, sizeof(v16));
  v17 = 1065353216;
  v4 = *((_QWORD *)this + 53);
  v5 = (char *)operator new(0x10uLL);
  v15 = v5 + 16;
  *(_QWORD *)v5 = a2;
  *((_QWORD *)v5 + 1) = v4;
  __p = v5;
  v6 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    if (v15 == __p || (unint64_t)(v15 - __p) <= 8)
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
    v8 = *(_QWORD *)__p;
    v7 = *((_QWORD *)__p + 1);
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = v8;
    v20 = 2048;
    v21 = v7;
    _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "Using new padding mask and token IDs shapes: {%lu, %lu}", buf, 0x16u);
  }
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)buf = (char *)this + 352;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)this + 352, (__int128 **)buf);
  v10 = *((_QWORD *)v9 + 5);
  *((_QWORD *)v9 + 5) = v13;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  E5RT::TensorDescriptor::CreateTensorDesc();
  *(_QWORD *)buf = (char *)this + 376;
  v11 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)this + 376, (__int128 **)buf);
  v12 = *((_QWORD *)v11 + 5);
  *((_QWORD *)v11 + 5) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  E5RT::ExecutionStreamOperation::ReshapeOperation();
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<E5RT::OperandDescriptor const>>>>::~__hash_table((uint64_t)v16);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v18);
}

void sub_1C22DF14C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  __break(1u);
}

void sub_1C22DF1FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (*(char *)(v16 - 41) < 0)
    operator delete(*(void **)(v16 - 64));
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v15)
  {
LABEL_8:
    __cxa_end_catch();
    JUMPOUT(0x1C22DF298);
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void sub_1C22DF25C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1C22DF2C0);
}

void sub_1C22DF26C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  if (a12)
    operator delete(a12);
  JUMPOUT(0x1C22DF2B0);
}

void sub_1C22DF2C8()
{
  JUMPOUT(0x1C22DF2C0);
}

void snlp::ssu::espresso::SSUNessieModule::forward(snlp::ssu::espresso::SSUNessieModule *this@<X0>, uint64_t **a2@<X1>, _OWORD *a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint8_t buf[4];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = (std::mutex *)((char *)this + 432);
  std::mutex::lock((std::mutex *)((char *)this + 432));
  if (a2[1] == *a2)
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v7 = **a2;
  v8 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v17 = v7;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "Reshaping input descriptors to use batch size %lu", buf, 0xCu);
  }
  snlp::ssu::espresso::SSUNessieModule::reshapeInputDescriptors(this, v7);
  v9 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEBUG, "Calling Espresso to perform model inference", buf, 2u);
  }
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::bindPorts((E5RT::ExecutionStreamOperation **)this);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)(a2 + 6));
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  v15 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  E5RT::ExecutionStream::ExecuteStreamSync(*((E5RT::ExecutionStream **)this + 3));
  E5RT::ExecutionStream::ResetStream(*((E5RT::ExecutionStream **)this + 3));
  snlp::ssu::espresso::SSUNessieModule::getOutputs(this, a3);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::unbindPorts((E5RT::ExecutionStreamOperation **)this);
  std::mutex::unlock(v6);
}

void sub_1C22DF4B0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *v2;

  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double snlp::ssu::espresso::SSUNessieModule::getOutputs@<D0>(snlp::ssu::espresso::SSUNessieModule *this@<X0>, _OWORD *a2@<X8>)
{
  unsigned __int8 *v4;
  _QWORD *OutputPorts;
  unsigned __int8 *v6;
  E5RT::TensorDescriptor *v7;
  unint64_t NumElements;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  double result;
  E5RT::OperandDescriptor *v13;
  std::__shared_weak_count *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v4 = (unsigned __int8 *)this + 400;
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::getOutput((uint64_t)this, (unsigned __int8 *)this + 400, (std::string *)&v15);
  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(*((E5RT::ExecutionStreamOperation **)this + 22));
  v6 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(OutputPorts, v4);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)v6 + 5));
  v7 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor(v13);
  NumElements = E5RT::TensorDescriptor::GetNumElements(v7);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)())v14->__on_zero_shared)();
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::vector<float>::resize((_QWORD *)&v16 + 1, NumElements);
  v11 = v16;
  *a2 = v15;
  a2[1] = v11;
  result = *(double *)&v17;
  a2[2] = v17;
  return result;
}

void sub_1C22DF5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType::~ITFMModuleOutputType((itfm_inference_orchestrator::inference_engine::ITFMModuleOutputType *)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::espresso::SSUNessieModule::setInputs(snlp::ssu::espresso::SSUNessieModule *this, const snlp::ssu::espresso::SSUNessieModuleInputs *a2)
{
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 376, (uint64_t)a2 + 48);
  snlp::common::espresso_inference::e5ml::EspressoE5MLModule::setInput((uint64_t)this, (unsigned __int8 *)this + 352, (uint64_t)a2);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromNLContext(nlv4_inference_orchestrator::placeholder::VerbExtractor *this@<X0>, const sirinluexternal::NLContext *a2@<X1>, std::string *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  UsoGraph *v14;
  uint64_t v15;
  uint64_t v16;
  const sirinluexternal::UserDialogAct *v17;
  uint64_t v18;
  const sirinluexternal::UserDialogAct **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  UsoGraph *v23;
  uint64_t v24;
  UsoGraph *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  UsoGraph *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  int v33;

  v4 = (_QWORD *)*((_QWORD *)a2 + 11);
  if (v4 == *((_QWORD **)a2 + 12))
  {
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v6 = (_QWORD *)*v4;
  v32 = 1;
  v33 = 0;
  v7 = *(_QWORD *)this;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v30 = v7;
    v31 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    v30 = *(_QWORD *)this;
    v31 = 0;
  }
  v13 = v6[5];
  if (v13 && *(_QWORD *)(v13 + 8))
  {
    v14 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v14, &v32);
    v29 = v14;
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v30, *(const sirinluexternal::UsoGraph **)(v6[5] + 8), v14);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v14, a3);
LABEL_15:
    v15 = MEMORY[0x1C3BB916C](v14);
    MEMORY[0x1C3BB9B44](v15, 0x10A0C403D23BABBLL);
    goto LABEL_33;
  }
  v16 = v6[4];
  if (v16)
  {
    v17 = *(const sirinluexternal::UserDialogAct **)(v16 + 8);
    if (v17)
    {
      nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(this, v17, a3);
      goto LABEL_33;
    }
  }
  v18 = v6[1];
  if (v18)
  {
    v20 = v18 + 8;
    v19 = *(const sirinluexternal::UserDialogAct ***)(v18 + 8);
    if (*(const sirinluexternal::UserDialogAct ***)(v20 + 8) != v19)
    {
      nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(this, *v19, a3);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  v21 = v6[3];
  if (v21)
  {
    if (*(_QWORD *)(v21 + 16) != *(_QWORD *)(v21 + 8))
    {
      v14 = (UsoGraph *)operator new();
      MEMORY[0x1C3BB9154](v14, &v32);
      v29 = v14;
      siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v30, **(const sirinluexternal::UsoGraph ***)(v21 + 8), v14);
      nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v14, a3);
      goto LABEL_15;
    }
    goto LABEL_32;
  }
  v22 = v6[8];
  if (v22 && *(_QWORD *)(v22 + 8))
  {
    std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>((uint64_t *)&v29, (uint64_t)&v32);
    v23 = v29;
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v30, *(const sirinluexternal::UsoGraph **)(v6[8] + 8), v29);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v23, a3);
LABEL_31:
    std::unique_ptr<siri::ontology::UsoGraph>::reset[abi:ne180100]((uint64_t *)&v29);
    goto LABEL_33;
  }
  v24 = v6[7];
  if (v24 && *(_QWORD *)(v24 + 16))
  {
    std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>((uint64_t *)&v29, (uint64_t)&v32);
    v25 = v29;
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v30, *(const sirinluexternal::UsoGraph **)(v6[7] + 16), v29);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v25, a3);
    goto LABEL_31;
  }
LABEL_32:
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_33:
  v26 = v31;
  if (v31)
  {
    v27 = (unint64_t *)&v31->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1C22DF8CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _BYTE *v10;

  __cxa_begin_catch(a1);
  *v10 = 0;
  v10[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C22DF880);
}

void sub_1C22DF940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph(const siri::ontology::UsoGraph *a1@<X1>, std::string *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  const struct __class_type_info *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int v23;

  v21 = 0u;
  v22 = 0u;
  v23 = 1065353216;
  v4 = (_QWORD *)*((_QWORD *)a1 + 11);
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v16 = v4;
  std::deque<siri::ontology::UsoGraphNode const*>::push_back(&v18, &v16);
  v5 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v6 = (const struct __class_type_info *)MEMORY[0x1E0DA35A8];
    do
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v18 + 1)
                                 + (((unint64_t)(v5 + v20 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v5 + v20 - 1) & 0x1FF));
      if (!v7)
        break;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) == 1)
      {
        if (v8)
        {
          v13 = v8[13];
          if (*(char *)(v13 + 63) < 0)
          {
            std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v13 + 40), *(_QWORD *)(v13 + 48));
          }
          else
          {
            v14 = *(_OWORD *)(v13 + 40);
            a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 56);
            *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v14;
          }
          v12 = 1;
          goto LABEL_18;
        }
      }
      if ((_QWORD)v19 == *((_QWORD *)&v18 + 1))
        v9 = 0;
      else
        v9 = (((_QWORD)v19 - *((_QWORD *)&v18 + 1)) << 6) - 1;
      if ((unint64_t)(v9 - (--*((_QWORD *)&v20 + 1) + v20)) >= 0x400)
      {
        operator delete(*(void **)(v19 - 8));
        *(_QWORD *)&v19 = v19 - 8;
      }
      siri::ontology::UsoGraph::getSuccessorsWithEdges(*(siri::ontology::UsoGraph **)(v7 + 8), (const UsoGraphNode *)v7);
      v10 = v16;
      v11 = v17;
      if (v16 != v17)
      {
        do
        {
          v15 = *v10;
          std::deque<siri::ontology::UsoGraphNode const*>::push_back(&v18, &v15);
          v10 += 2;
        }
        while (v10 != v11);
        v10 = v16;
      }
      if (v10)
      {
        v17 = v10;
        operator delete(v10);
      }
      v5 = *((_QWORD *)&v20 + 1);
    }
    while (*((_QWORD *)&v20 + 1));
  }
  v12 = 0;
  a2->__r_.__value_.__s.__data_[0] = 0;
LABEL_18:
  a2[1].__r_.__value_.__s.__data_[0] = v12;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)&v18);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(0);
}

void nlv4_inference_orchestrator::placeholder::VerbExtractor::getVerbFromUserDialogAct(nlv4_inference_orchestrator::placeholder::VerbExtractor *this@<X0>, const sirinluexternal::UserDialogAct *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  UsoGraph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  int v27;

  v26 = 1;
  v27 = 0;
  v5 = *(_QWORD *)this;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v24 = v5;
    v25 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v24 = *(_QWORD *)this;
    v25 = 0;
  }
  v11 = *((_QWORD *)a2 + 1);
  if (v11 && *(_QWORD *)(v11 + 16))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 1) + 16), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
LABEL_34:
    v20 = MEMORY[0x1C3BB916C](v12);
    MEMORY[0x1C3BB9B44](v20, 0x10A0C403D23BABBLL);
    goto LABEL_35;
  }
  v13 = *((_QWORD *)a2 + 6);
  if (v13 && *(_QWORD *)(v13 + 16))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 6) + 16), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v14 = *((_QWORD *)a2 + 4);
  if (v14 && *(_QWORD *)(v14 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 4) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v15 = *((_QWORD *)a2 + 10);
  if (v15 && *(_QWORD *)(v15 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 10) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v16 = *((_QWORD *)a2 + 2);
  if (v16 && *(_QWORD *)(v16 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 2) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v17 = *((_QWORD *)a2 + 9);
  if (v17 && *(_QWORD *)(v17 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 9) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v18 = *((_QWORD *)a2 + 8);
  if (v18 && *(_QWORD *)(v18 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 8) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  v19 = *((_QWORD *)a2 + 7);
  if (v19 && *(_QWORD *)(v19 + 8))
  {
    v12 = (UsoGraph *)operator new();
    MEMORY[0x1C3BB9154](v12, &v26);
    siri::ontology::UsoGraphProtoReader::fromProtobuf((siri::ontology::UsoGraphProtoReader *)&v24, *(const sirinluexternal::UsoGraph **)(*((_QWORD *)a2 + 7) + 8), v12);
    nlv4_inference_orchestrator::placeholder::VerbExtractor::extractVerbFromUsoGraph((const siri::ontology::UsoGraph *)v12, a3);
    goto LABEL_34;
  }
  a3->__r_.__value_.__s.__data_[0] = 0;
  a3[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_35:
  v21 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1C22DFF74(void *a1)
{
  _BYTE *v1;
  uint64_t v2;

  MEMORY[0x1C3BB9B44](v2, 0x10A0C403D23BABBLL);
  __cxa_begin_catch(a1);
  *v1 = 0;
  v1[24] = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C22DFF1CLL);
}

void sub_1C22E0014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<siri::ontology::UsoGraph,siri::ontology::OntologyVersion const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = MEMORY[0x1C3BB9154](v4, a2);
  *a1 = v4;
  return result;
}

void sub_1C22E0078(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3BB9B44](v1, 0x10A0C403D23BABBLL);
  _Unwind_Resume(a1);
}

void std::deque<siri::ontology::UsoGraphNode const*>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t i;
  _QWORD *v79;
  char *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;

  v4 = (char *)a1[2];
  v5 = (char *)a1[1];
  v6 = v4 - v5;
  if (v4 == v5)
    v7 = 0;
  else
    v7 = ((v4 - v5) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 >= 0x200)
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v5;
      v11 = v5 + 8;
      v12 = v13;
      a1[1] = v11;
      if ((char *)a1[3] == v4)
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v4 == (char *)*a1)
            v42 = 1;
          else
            v42 = (uint64_t)&v4[-*a1] >> 2;
          v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v42);
          v45 = &v43[8 * (v42 >> 2)];
          v46 = (uint64_t *)a1[1];
          v4 = v45;
          v47 = a1[2] - (_QWORD)v46;
          if (v47)
          {
            v4 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            v48 = 8 * (v47 >> 3);
            v49 = &v43[8 * (v42 >> 2)];
            do
            {
              v50 = *v46++;
              *(_QWORD *)v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          v51 = (char *)*a1;
          *a1 = v43;
          a1[1] = v45;
          a1[2] = v4;
          a1[3] = &v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            v4 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v4 - v11;
          if (v4 == v11)
          {
            v23 = v4;
          }
          else
          {
            memmove(&v11[-8 * v20], v11, v4 - v11);
            v23 = (char *)a1[1];
          }
          v4 = &v21[v22];
          a1[1] = &v23[8 * v19];
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v4 = v12;
LABEL_82:
      a1[2] += 8;
LABEL_83:
      v5 = (char *)a1[1];
      v8 = a1[5];
      v10 = a1[4] + v8;
      goto LABEL_84;
    }
    v24 = v6 >> 3;
    v25 = (char *)a1[3];
    v26 = (char *)*a1;
    v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 < (unint64_t)(v27 >> 3))
    {
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v4)
      {
        if (v26 == v5)
        {
          if (v4 == v5)
            v52 = 1;
          else
            v52 = v27 >> 2;
          v53 = 2 * v52;
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v52);
          v5 = &v54[(v53 + 6) & 0xFFFFFFFFFFFFFFF8];
          v56 = (uint64_t *)a1[1];
          v57 = v5;
          v58 = a1[2] - (_QWORD)v56;
          if (v58)
          {
            v57 = &v5[v58 & 0xFFFFFFFFFFFFFFF8];
            v59 = 8 * (v58 >> 3);
            v60 = v5;
            do
            {
              v61 = *v56++;
              *(_QWORD *)v60 = v61;
              v60 += 8;
              v59 -= 8;
            }
            while (v59);
          }
          v62 = (char *)*a1;
          *a1 = v54;
          a1[1] = v5;
          a1[2] = v57;
          a1[3] = &v54[8 * v55];
          if (v62)
          {
            operator delete(v62);
            v5 = (char *)a1[1];
          }
        }
        *((_QWORD *)v5 - 1) = v29;
        v63 = (char *)a1[1];
        v64 = (char *)a1[2];
        a1[1] = v63 - 8;
        v65 = *((_QWORD *)v63 - 1);
        a1[1] = v63;
        if (v64 == (char *)a1[3])
        {
          v66 = (uint64_t)&v63[-*a1];
          if ((unint64_t)v63 <= *a1)
          {
            if (v64 == (char *)*a1)
              v97 = 1;
            else
              v97 = (uint64_t)&v64[-*a1] >> 2;
            v98 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v97);
            v100 = &v98[8 * (v97 >> 2)];
            v101 = (uint64_t *)a1[1];
            v64 = v100;
            v102 = a1[2] - (_QWORD)v101;
            if (v102)
            {
              v64 = &v100[v102 & 0xFFFFFFFFFFFFFFF8];
              v103 = 8 * (v102 >> 3);
              v104 = &v98[8 * (v97 >> 2)];
              do
              {
                v105 = *v101++;
                *(_QWORD *)v104 = v105;
                v104 += 8;
                v103 -= 8;
              }
              while (v103);
            }
            v106 = (char *)*a1;
            *a1 = v98;
            a1[1] = v100;
            a1[2] = v64;
            a1[3] = &v98[8 * v99];
            if (v106)
            {
              operator delete(v106);
              v64 = (char *)a1[2];
            }
          }
          else
          {
            v67 = v66 >> 3;
            v16 = v66 >> 3 < -1;
            v68 = (v66 >> 3) + 2;
            if (v16)
              v69 = v68;
            else
              v69 = v67 + 1;
            v70 = -(v69 >> 1);
            v71 = v69 >> 1;
            v72 = &v63[-8 * v71];
            v73 = v64 - v63;
            if (v64 != v63)
            {
              memmove(&v63[-8 * v71], v63, v64 - v63);
              v63 = (char *)a1[1];
            }
            v64 = &v72[v73];
            a1[1] = &v63[8 * v70];
            a1[2] = &v72[v73];
          }
        }
        *(_QWORD *)v64 = v65;
      }
      else
      {
        *(_QWORD *)v4 = v28;
      }
      goto LABEL_82;
    }
    if (v25 == v26)
      v30 = 1;
    else
      v30 = v27 >> 2;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v30);
    v33 = v32;
    v34 = &v31[8 * v24];
    *(_QWORD *)&v35 = v31;
    *((_QWORD *)&v35 + 1) = v34;
    v110 = v35;
    v36 = operator new(0x1000uLL);
    *(_QWORD *)&v37 = v34;
    *((_QWORD *)&v37 + 1) = &v31[8 * v33];
    if (v24 == v33)
    {
      v38 = 8 * v24;
      *(_QWORD *)&v39 = v110;
      if (v6 >= 1)
      {
        v40 = v38 >> 3;
        if (v40 >= -1)
          v41 = v40 + 1;
        else
          v41 = v40 + 2;
        v34 -= 8 * (v41 >> 1);
        *(_QWORD *)&v37 = v34;
        *((_QWORD *)&v39 + 1) = v34;
        goto LABEL_56;
      }
      v74 = v38 >> 2;
      if (v4 == v5)
        v75 = 1;
      else
        v75 = v74;
      v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v75);
      v34 = &v76[8 * (v75 >> 2)];
      *(_QWORD *)&v39 = v76;
      *((_QWORD *)&v39 + 1) = v34;
      *(_QWORD *)&v37 = v34;
      *((_QWORD *)&v37 + 1) = &v76[8 * v77];
      if (!v31)
        goto LABEL_56;
      v107 = v37;
      v110 = v39;
      operator delete(v31);
      v37 = v107;
    }
    v39 = v110;
LABEL_56:
    *(_QWORD *)v34 = v36;
    *(_QWORD *)&v37 = v37 + 8;
    for (i = a1[2]; i != a1[1]; i -= 8)
    {
      v79 = (_QWORD *)*((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
      {
        v81 = (_BYTE *)v37;
        if ((unint64_t)v37 >= *((_QWORD *)&v37 + 1))
        {
          if (*((_QWORD *)&v37 + 1) == *((_QWORD *)&v39 + 1))
            v86 = 1;
          else
            v86 = (uint64_t)(*((_QWORD *)&v37 + 1) - *((_QWORD *)&v39 + 1)) >> 2;
          v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v86);
          v80 = &v87[(2 * v86 + 6) & 0xFFFFFFFFFFFFFFF8];
          v89 = v80;
          v90 = v81 - (_BYTE *)v79;
          if (v81 != (_BYTE *)v79)
          {
            v89 = &v80[v90 & 0xFFFFFFFFFFFFFFF8];
            v91 = 8 * (v90 >> 3);
            v92 = v80;
            v93 = v79;
            do
            {
              v94 = *v93++;
              *(_QWORD *)v92 = v94;
              v92 += 8;
              v91 -= 8;
            }
            while (v91);
          }
          *(_QWORD *)&v39 = v87;
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = v89;
          *((_QWORD *)&v37 + 1) = &v87[8 * v88];
          if (v79)
          {
            v108 = v37;
            v112 = v39;
            operator delete(v79);
            v37 = v108;
            v39 = v112;
          }
        }
        else
        {
          v82 = (uint64_t)(*((_QWORD *)&v37 + 1) - v37) >> 3;
          if (v82 >= -1)
            v83 = v82 + 1;
          else
            v83 = v82 + 2;
          v84 = v83 >> 1;
          v85 = v37 + 8 * (v83 >> 1);
          v80 = (char *)(v85 - (v37 - *((_QWORD *)&v39 + 1)));
          if ((_QWORD)v37 == *((_QWORD *)&v39 + 1))
          {
            v81 = (_BYTE *)*((_QWORD *)&v39 + 1);
          }
          else
          {
            v109 = *((_QWORD *)&v37 + 1);
            v111 = v39;
            memmove((void *)(v85 - (v37 - *((_QWORD *)&v39 + 1))), *((const void **)&v39 + 1), v37 - *((_QWORD *)&v39 + 1));
            *((_QWORD *)&v37 + 1) = v109;
            *(_QWORD *)&v39 = v111;
          }
          *((_QWORD *)&v39 + 1) = v80;
          *(_QWORD *)&v37 = &v81[8 * v84];
        }
      }
      else
      {
        v80 = (char *)*((_QWORD *)&v39 + 1);
      }
      v95 = *(_QWORD *)(i - 8);
      *((_QWORD *)v80 - 1) = v95;
      *((_QWORD *)&v39 + 1) -= 8;
    }
    v96 = (char *)*a1;
    *(_OWORD *)a1 = v39;
    *((_OWORD *)a1 + 1) = v37;
    if (v96)
      operator delete(v96);
    goto LABEL_83;
  }
LABEL_84:
  *(_QWORD *)(*(_QWORD *)&v5[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_1C22E05EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11)
{
  void *v11;

  operator delete(v11);
  if ((_QWORD)a11)
    operator delete((void *)a11);
  _Unwind_Resume(a1);
}

BOOL nlv4_inference_orchestrator::trees::TreeNode::isLeafNode(nlv4_inference_orchestrator::trees::TreeNode *this)
{
  return *((_QWORD *)this + 11) == *((_QWORD *)this + 12);
}

_QWORD *nlv4_inference_orchestrator::trees::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;

  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"TreeNode[", 9);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"label:'", 7);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"', ", 3);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"value:'", 7);
  v11 = *(char *)(a2 + 47);
  if (v11 >= 0)
    v12 = a2 + 24;
  else
    v12 = *(_QWORD *)(a2 + 24);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 47);
  else
    v13 = *(_QWORD *)(a2 + 32);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"', ", 3);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"parentArgument:'", 16);
  v19 = *(_QWORD *)(a2 + 48);
  v18 = a2 + 48;
  v17 = v19;
  v20 = *(char *)(v18 + 23);
  if (v20 >= 0)
    v21 = v18;
  else
    v21 = v17;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(v18 + 23);
  else
    v22 = *(_QWORD *)(v18 + 8);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v21, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"', ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"UTF-8 code unit indices:[", 25);
  v25 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)", ", 2);
  v26 = (_QWORD *)std::ostream::operator<<();
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"UTF-16 code unit indices:[", 26);
  v28 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)", ", 2);
  v29 = (_QWORD *)std::ostream::operator<<();
  v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"), ", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Unicode code point indices:[", 28);
  v31 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
  v32 = (_QWORD *)std::ostream::operator<<();
  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"]", 1);
}

uint64_t snlp::common::text_uso_graph::SpacedTextTreeLexer::lex(uint64_t a1, const std::string *a2, uint64_t a3)
{
  std::string::size_type size;
  std::sub_match<const char *> *p_p;
  int v7;
  std::string::size_type v8;
  std::string *v9;
  void **v10;
  std::string::size_type v11;
  std::sub_match<const char *> *v12;
  int v13;
  std::string::size_type v14;
  std::string *v15;
  void **v16;
  std::string::size_type v17;
  std::sub_match<const char *> *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  void **v22;
  uint64_t v23;
  std::string::size_type v24;
  int v25;
  std::sub_match<const char *> *v26;
  int v27;
  std::string::size_type v28;
  std::string *v29;
  void **v30;
  std::string::size_type v31;
  std::sub_match<const char *> *v32;
  int v33;
  std::string::size_type v34;
  std::string *v35;
  void **v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  BOOL v40;
  char **v41;
  char **v42;
  uint64_t v43;
  std::string::size_type v44;
  std::sub_match<const char *> *v45;
  int v46;
  std::string::size_type v47;
  std::string *v48;
  void **v49;
  std::string::size_type v50;
  std::string::size_type v51;
  std::sub_match<const char *> *v52;
  int v53;
  std::string::size_type v54;
  std::string *v55;
  void **v56;
  int v57;
  uint64_t v58;
  std::string *v60;
  std::string v61;
  void *v62[2];
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  char *v68;
  char v69;
  char v70;
  uint64_t v71;
  std::string __p;
  std::string __str[2];
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;

  nlv4_inference_orchestrator::trees::trimWhitespace(&__p, a2);
  v60 = (std::string *)(a1 + 8);
  do
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
      goto LABEL_202;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    *(_OWORD *)v62 = 0u;
    memset(v63, 0, 25);
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    memset(__str, 0, 32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = (std::sub_match<const char *> *)&__p;
    else
      p_p = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    *(_OWORD *)((char *)&__str[1].__r_.__value_.__l.__data_ + 1) = 0uLL;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 32, p_p, (std::sub_match<const char *> *)((char *)p_p + size), (std::vector<std::csub_match> *)__str, 0);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &__p;
    else
      v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = __p.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v9, (uint64_t)v9 + v8, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v7)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
        v10 = v62;
      else
        v10 = (void **)v62[0];
      if (*((_BYTE *)v10 + 40))
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v10[3], (char *)v10[4], (_BYTE *)v10[4] - (_BYTE *)v10[3]);
      else
        memset(__str, 0, 24);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a3 + 16))(a3, __str);
    }
    else
    {
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      memset(__str, 0, 41);
      v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = (std::sub_match<const char *> *)&__p;
      else
        v12 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v11 = __p.__r_.__value_.__l.__size_;
      v13 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 96, v12, (std::sub_match<const char *> *)((char *)v12 + v11), (std::vector<std::csub_match> *)__str, 0);
      v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &__p;
      else
        v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v14 = __p.__r_.__value_.__l.__size_;
      std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v15, (uint64_t)v15 + v14, (uint64_t *)__str, 0);
      if (__str[0].__r_.__value_.__r.__words[0])
        operator delete(__str[0].__r_.__value_.__l.__data_);
      if (v13)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
          v16 = v62;
        else
          v16 = (void **)v62[0];
        if (*((_BYTE *)v16 + 40))
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v16[3], (char *)v16[4], (_BYTE *)v16[4] - (_BYTE *)v16[3]);
        else
          memset(__str, 0, 24);
        v23 = std::stoi(__str, 0, 10);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v23);
      }
      else
      {
        v74 = 0;
        v75 = 0;
        v76 = 0;
        v77 = 0;
        v78 = 0;
        v79 = 0;
        v80 = 0;
        v81 = 0;
        memset(__str, 0, 41);
        v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = (std::sub_match<const char *> *)&__p;
        else
          v18 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v17 = __p.__r_.__value_.__l.__size_;
        v19 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 160, v18, (std::sub_match<const char *> *)((char *)v18 + v17), (std::vector<std::csub_match> *)__str, 0);
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v21 = &__p;
        else
          v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = __p.__r_.__value_.__l.__size_;
        std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v21, (uint64_t)v21 + v20, (uint64_t *)__str, 0);
        if (__str[0].__r_.__value_.__r.__words[0])
          operator delete(__str[0].__r_.__value_.__l.__data_);
        if (!v19)
          goto LABEL_186;
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
          v22 = v62;
        else
          v22 = (void **)v62[0];
        if (*((_BYTE *)v22 + 40))
          std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v22[3], (char *)v22[4], (_BYTE *)v22[4] - (_BYTE *)v22[3]);
        else
          memset(__str, 0, 24);
        (**(void (***)(uint64_t, std::string *))a3)(a3, __str);
      }
    }
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v69)
      std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
    else
      memset(__str, 0, 24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = __str[0];
    v24 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    v25 = SHIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v24 = __p.__r_.__value_.__l.__size_;
    if (!v24)
      goto LABEL_185;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    memset(__str, 0, 41);
    if (v25 >= 0)
      v26 = (std::sub_match<const char *> *)&__p;
    else
      v26 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    v27 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 352, v26, (std::sub_match<const char *> *)((char *)v26 + v24), (std::vector<std::csub_match> *)__str, 0);
    v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = &__p;
    else
      v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v28 = __p.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v29, (uint64_t)v29 + v28, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v27)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
        v30 = v62;
      else
        v30 = (void **)v62[0];
      if (*((_BYTE *)v30 + 40))
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v30[3], (char *)v30[4], (_BYTE *)v30[4] - (_BYTE *)v30[3]);
      else
        memset(__str, 0, 24);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a3 + 40))(a3, __str);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      if (v69)
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      else
        memset(__str, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str[0];
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    memset(__str, 0, 41);
    v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v32 = (std::sub_match<const char *> *)&__p;
    else
      v32 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v31 = __p.__r_.__value_.__l.__size_;
    v33 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 416, v32, (std::sub_match<const char *> *)((char *)v32 + v31), (std::vector<std::csub_match> *)__str, 0);
    v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &__p;
    else
      v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = __p.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v35, (uint64_t)v35 + v34, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v33)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
        v36 = v62;
      else
        v36 = (void **)v62[0];
      if (*((_BYTE *)v36 + 40))
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v36[3], (char *)v36[4], (_BYTE *)v36[4] - (_BYTE *)v36[3]);
      else
        memset(__str, 0, 24);
      v37 = std::stoi(__str, 0, 10);
      v38 = 0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3);
      v39 = (char *)v62[0] + 64;
      if (v38 <= 2)
        v39 = (char *)&v63[1] + 8;
      if (*v39)
      {
        v40 = v38 > 2;
        v41 = (char **)v63 + 1;
        if (v40)
          v41 = (char **)((char *)v62[0] + 48);
        v42 = (char **)((char *)v62[0] + 56);
        if (!v40)
          v42 = (char **)&v63[1];
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(&v61, *v41, *v42, *v42 - *v41);
      }
      else
      {
        memset(&v61, 0, sizeof(v61));
      }
      v43 = std::stoi(&v61, 0, 10);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 48))(a3, v37, v43);
      if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v61.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      if (v69)
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      else
        memset(__str, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str[0];
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    memset(__str, 0, 41);
    v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = (std::sub_match<const char *> *)&__p;
    else
      v45 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v44 = __p.__r_.__value_.__l.__size_;
    v46 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 288, v45, (std::sub_match<const char *> *)((char *)v45 + v44), (std::vector<std::csub_match> *)__str, 0);
    v47 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v48 = &__p;
    else
      v48 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v47 = __p.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v48, (uint64_t)v48 + v47, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v46)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
        v49 = v62;
      else
        v49 = (void **)v62[0];
      if (*((_BYTE *)v49 + 40))
      {
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v49[3], (char *)v49[4], (_BYTE *)v49[4] - (_BYTE *)v49[3]);
        if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
        else
          v50 = __str[0].__r_.__value_.__l.__size_;
      }
      else
      {
        v50 = 0;
        memset(__str, 0, 24);
      }
      (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)a3 + 32))(a3, v50);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      if (v69)
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      else
        memset(__str, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str[0];
    }
    v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v51 = __p.__r_.__value_.__l.__size_;
    if (!v51)
    {
LABEL_185:
      v57 = 3;
      goto LABEL_198;
    }
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v80 = 0;
    v81 = 0;
    memset(__str, 0, 41);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = (std::sub_match<const char *> *)&__p;
    else
      v52 = (std::sub_match<const char *> *)__p.__r_.__value_.__r.__words[0];
    v53 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a1 + 224, v52, (std::sub_match<const char *> *)((char *)v52 + v51), (std::vector<std::csub_match> *)__str, 0);
    v54 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &__p;
    else
      v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v54 = __p.__r_.__value_.__l.__size_;
    std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)v62, (uint64_t)v55, (uint64_t)v55 + v54, (uint64_t *)__str, 0);
    if (__str[0].__r_.__value_.__r.__words[0])
      operator delete(__str[0].__r_.__value_.__l.__data_);
    if (v53)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v62[1] - (char *)v62[0]) >> 3) <= 1)
        v56 = v62;
      else
        v56 = (void **)v62[0];
      if (*((_BYTE *)v56 + 40))
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, (char *)v56[3], (char *)v56[4], (_BYTE *)v56[4] - (_BYTE *)v56[3]);
      else
        memset(__str, 0, 24);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a3 + 8))(a3, __str);
      if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str[0].__r_.__value_.__l.__data_);
      if (v69)
        std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__str, v67, v68, v68 - v67);
      else
        memset(__str, 0, 24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v57 = 0;
      __p = __str[0];
      goto LABEL_198;
    }
LABEL_186:
    std::operator+<char>();
    if (*(char *)(a1 + 31) < 0)
      operator delete(v60->__r_.__value_.__l.__data_);
    *(_OWORD *)&v60->__r_.__value_.__l.__data_ = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&__str[0].__r_.__value_.__l + 2);
    v57 = 1;
LABEL_198:
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
  }
  while (!v57);
  if (v57 == 3)
  {
LABEL_202:
    v58 = 1;
    goto LABEL_204;
  }
  v58 = 0;
LABEL_204:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v58;
}

void sub_1C22E1350()
{
  _Unwind_Exception *v0;
  void *v1;
  void *v2;
  char v3;

  if (v1)
    operator delete(v1);
  if (v3 < 0)
    operator delete(v2);
  _Unwind_Resume(v0);
}

void sub_1C22E1368()
{
  __cxa_end_catch();
  JUMPOUT(0x1C22E1370);
}

uint64_t snlp::common::text_uso_graph::SpacedTextTreeLexer::getErrorMessage(snlp::common::text_uso_graph::SpacedTextTreeLexer *this)
{
  return (uint64_t)this + 8;
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanTruncator::truncate(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a3 < (unint64_t)((a2[1] - *a2) >> 5))
  {
    v5 = result;
    v6 = *(unsigned int *)(result + 40);
    if (v6 > 6)
      v7 = 4;
    else
      v7 = dword_1C2313414[v6];
    v8 = SNLPOSLoggerForCategory(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(v5 + 40);
      v10 = "UNKNOWN";
      v11 = "SSU";
      v12 = "LVC";
      v13 = "PSC";
      v14 = "OWL";
      v15 = "UaaP";
      v16 = "SNLC";
      v17 = "[insights-snlp-nlv4]: ";
      v18 = "NLv4";
      switch(v9)
      {
        case 0:
          break;
        case 1:
LABEL_7:
          v17 = "[insights-snlp-snlc]: ";
          v18 = v16;
          break;
        case 2:
LABEL_11:
          v17 = "[insights-snlp-owl]: ";
          v18 = v14;
          break;
        case 3:
LABEL_12:
          v17 = "[insights-snlp-uaap]: ";
          v18 = v15;
          break;
        case 4:
LABEL_13:
          v17 = "[insights-snlp-psc]: ";
          v18 = v13;
          break;
        case 5:
LABEL_14:
          v17 = "[insights-snlp-lvc]: ";
          v18 = v12;
          break;
        case 6:
LABEL_15:
          v17 = "[insights-snlp-ssu]: ";
          v18 = v11;
          break;
        case 7:
LABEL_17:
          v20 = SNLPOSLoggerForCategory(4);
          v17 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            v22 = 136315394;
            v23 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            v24 = 2048;
            v25 = (const char *)v9;
            _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v22, 0x16u);
          }
          v18 = v10;
          break;
        default:
          v19 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v22 = 136315394;
            v23 = "<UNDEFINED_COMPONENT>";
            v24 = 2048;
            v25 = (const char *)v9;
            _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v22, 0x16u);
          }
          v9 = *(_DWORD *)(v5 + 40);
          v16 = "<UNDEFINED_COMPONENT>";
          v17 = "[insights-snlp-nlv4]: ";
          v15 = "<UNDEFINED_COMPONENT>";
          v14 = "<UNDEFINED_COMPONENT>";
          v13 = "<UNDEFINED_COMPONENT>";
          v12 = "<UNDEFINED_COMPONENT>";
          v11 = "<UNDEFINED_COMPONENT>";
          v18 = "<UNDEFINED_COMPONENT>";
          switch(v9)
          {
            case 0:
              goto LABEL_20;
            case 1:
              goto LABEL_7;
            case 2:
              goto LABEL_11;
            case 3:
              goto LABEL_12;
            case 4:
              goto LABEL_13;
            case 5:
              goto LABEL_14;
            case 6:
              goto LABEL_15;
            default:
              v10 = "<UNDEFINED_COMPONENT>";
              goto LABEL_17;
          }
      }
LABEL_20:
      v21 = (a2[1] - *a2) >> 5;
      v22 = 136315906;
      v23 = v18;
      v24 = 2080;
      v25 = v17;
      v26 = 2048;
      v27 = v21;
      v28 = 1024;
      v29 = a3;
      _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sThe model has received %lu spans. Truncating this list of spans to %u spans.", (uint8_t *)&v22, 0x26u);
    }
    return nlv4_inference_orchestrator::span_matching::SpanTruncator::truncateSpans((char *)v5, a2, a3);
  }
  return result;
}

uint64_t nlv4_inference_orchestrator::span_matching::SpanTruncator::truncateSpans(char *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::string *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  std::string *v21;
  uint64_t v22;
  std::string *v23;
  uint64_t v24;
  __int128 v25;
  std::string *v26;
  char *v27;
  uint64_t v28;
  __int128 v29;
  char *__s;
  _BYTE v32[88];
  void *__p[2];
  std::string::size_type v34;
  _BYTE *v35;
  _QWORD v36[2];
  std::string *v37;
  char *v38;
  uint64_t *v39;

  v6 = *a2;
  v7 = a2[1];
  v8 = 126 - 2 * __clz((uint64_t)(v7 - v6) >> 5);
  __s = a1;
  if (v7 == v6)
    v9 = 0;
  else
    v9 = v8;
  std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(v6, v7, (nlv4_inference_orchestrator::span_matching::SpanTruncator **)&__s, v9, 1);
  v10 = 0;
  v11 = 0;
  while ((a2[1] - *a2) >> 5 > (unint64_t)v10)
  {
    v12 = *(_QWORD **)(*a2 + 32 * v10 + 24);
    v11 += (uint64_t)(v12[2] - v12[1]) >> 2 << (v12[7] != 0);
    ++v10;
    if (v11 >= a3)
      goto LABEL_9;
  }
  v10 = a3;
LABEL_9:
  nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpans((unsigned int *)a1, a2, v10);
  __s = "";
  MEMORY[0x1C3BB847C](v32, a1 + 48);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v35 = v32;
  v13 = *a2;
  v14 = (std::string *)a2[1];
  v15 = ((uint64_t)v14 - *a2) >> 5;
  if (v10 <= v15)
  {
    if (v10 < v15)
    {
      v26 = (std::string *)(v13 + 32 * v10);
      while (v14 != v26)
      {
        if (v14[-1].__r_.__value_.__s.__data_[15] < 0)
          operator delete((void *)v14[-2].__r_.__value_.__r.__words[2]);
        v14 = (std::string *)((char *)v14 - 32);
      }
      a2[1] = (uint64_t)v26;
    }
  }
  else
  {
    v16 = a2[2];
    if (v10 - v15 <= (v16 - (uint64_t)v14) >> 5)
    {
      v27 = (char *)v14 + 32 * (v10 - v15);
      v28 = 32 * v10 - 32 * v15;
      do
      {
        if (SHIBYTE(v34) < 0)
        {
          std::string::__init_copy_ctor_external(v14, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v29 = *(_OWORD *)__p;
          v14->__r_.__value_.__r.__words[2] = v34;
          *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v29;
        }
        v14[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v14 = (std::string *)((char *)v14 + 32);
        v28 -= 32;
      }
      while (v28);
      a2[1] = (uint64_t)v27;
    }
    else
    {
      v39 = a2 + 2;
      v17 = v16 - v13;
      v18 = v17 >> 4;
      if (v17 >> 4 <= (unint64_t)v10)
        v18 = v10;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v19 = 0x7FFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v19);
      v21 = (std::string *)&v20[32 * v15];
      v36[0] = v20;
      v36[1] = v21;
      v37 = v21;
      v38 = &v20[32 * v22];
      v23 = (std::string *)&v20[32 * v10];
      v24 = 32 * v10 - 32 * v15;
      do
      {
        if (SHIBYTE(v34) < 0)
        {
          std::string::__init_copy_ctor_external(v21, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        }
        else
        {
          v25 = *(_OWORD *)__p;
          v21->__r_.__value_.__r.__words[2] = v34;
          *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v25;
        }
        v21[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v35;
        v21 = (std::string *)((char *)v21 + 32);
        v24 -= 32;
      }
      while (v24);
      v37 = v23;
      std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::__swap_out_circular_buffer(a2, v36);
      std::__split_buffer<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>::~__split_buffer((uint64_t)v36);
    }
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__p[0]);
  return MEMORY[0x1C3BB8494](v32);
}

void sub_1C22E1928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  MEMORY[0x1C3BB8494](v27);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(uint64_t a1, unint64_t a2, nlv4_inference_orchestrator::span_matching::SpanTruncator **a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  const sirinluinternal::MatchingSpan *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  _BOOL4 v32;
  void **v33;
  __int128 v34;
  BOOL v35;
  BOOL v36;
  const sirinluinternal::MatchingSpan *v37;
  char v38;
  sirinluinternal::MatchingSpan *v39;
  BOOL v40;
  unint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  BOOL v44;
  __int128 v45;
  uint64_t v46;
  _BOOL4 v47;
  BOOL v48;
  void **v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  sirinluinternal::MatchingSpan *v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  nlv4_inference_orchestrator::span_matching::SpanTruncator *v72;
  _BOOL4 v73;
  uint64_t v74;
  const sirinluinternal::MatchingSpan *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BOOL4 v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  void **v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  __int128 v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void *v96;
  char v97;
  const sirinluinternal::MatchingSpan *v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char v106;
  sirinluinternal::MatchingSpan *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v111;
  unint64_t v112;
  sirinluinternal::MatchingSpan **v113;
  sirinluinternal::MatchingSpan **v114;
  void **v115;
  void **v116;
  unint64_t v117;
  void *v118;
  char v120;
  void *v121;
  const sirinluinternal::MatchingSpan *v122;
  uint64_t v123;
  int64_t v124;
  char v125;
  _BYTE v126[15];
  _BYTE v127[15];
  _BYTE v128[15];
  __int128 v129;
  __int128 v130;
  __int128 v131;
  _BYTE v132[15];
  _BYTE v133[15];
  _BYTE v134[15];
  _BYTE v135[15];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

void sub_1C22E25C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  int v14;
  void *v15;

  if (v14 < 0)
    operator delete(v15);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpans(unsigned int *a1, uint64_t *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  NSObject *v8;
  signed int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  NSObject *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  signed int v27;
  const char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v6 = a1[10];
  if (v6 > 6)
    v7 = 4;
  else
    v7 = dword_1C2313414[v6];
  v8 = SNLPOSLoggerForCategory(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = a1[10];
    v10 = "UNKNOWN";
    v11 = "SSU";
    v12 = "LVC";
    v13 = "PSC";
    v14 = "OWL";
    v15 = "UaaP";
    v16 = "SNLC";
    v17 = "[insights-snlp-nlv4]: ";
    v18 = "NLv4";
    switch(v9)
    {
      case 0:
        break;
      case 1:
LABEL_6:
        v17 = "[insights-snlp-snlc]: ";
        v18 = v16;
        break;
      case 2:
LABEL_10:
        v17 = "[insights-snlp-owl]: ";
        v18 = v14;
        break;
      case 3:
LABEL_11:
        v17 = "[insights-snlp-uaap]: ";
        v18 = v15;
        break;
      case 4:
LABEL_12:
        v17 = "[insights-snlp-psc]: ";
        v18 = v13;
        break;
      case 5:
LABEL_13:
        v17 = "[insights-snlp-lvc]: ";
        v18 = v12;
        break;
      case 6:
LABEL_14:
        v17 = "[insights-snlp-ssu]: ";
        v18 = v11;
        break;
      case 7:
LABEL_16:
        v20 = SNLPOSLoggerForCategory(4);
        v17 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          v41 = 136315394;
          v42 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          v43 = 2048;
          v44 = (const char *)v9;
          _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        v18 = v10;
        break;
      default:
        v19 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v41 = 136315394;
          v42 = "<UNDEFINED_COMPONENT>";
          v43 = 2048;
          v44 = (const char *)v9;
          _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        v9 = a1[10];
        v16 = "<UNDEFINED_COMPONENT>";
        v17 = "[insights-snlp-nlv4]: ";
        v15 = "<UNDEFINED_COMPONENT>";
        v14 = "<UNDEFINED_COMPONENT>";
        v13 = "<UNDEFINED_COMPONENT>";
        v12 = "<UNDEFINED_COMPONENT>";
        v11 = "<UNDEFINED_COMPONENT>";
        v18 = "<UNDEFINED_COMPONENT>";
        switch(v9)
        {
          case 0:
            goto LABEL_19;
          case 1:
            goto LABEL_6;
          case 2:
            goto LABEL_10;
          case 3:
            goto LABEL_11;
          case 4:
            goto LABEL_12;
          case 5:
            goto LABEL_13;
          case 6:
            goto LABEL_14;
          default:
            v10 = "<UNDEFINED_COMPONENT>";
            goto LABEL_16;
        }
    }
LABEL_19:
    v41 = 136315394;
    v42 = v18;
    v43 = 2080;
    v44 = v17;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] %sThe following spans were kept after truncation:\n", (uint8_t *)&v41, 0x16u);
  }
  v21 = a3;
  if (a3)
  {
    v22 = 0;
    v23 = 24;
    do
    {
      if (v22 >= (a2[1] - *a2) >> 5)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan((nlv4_inference_orchestrator::span_matching::SpanTruncator *)a1, *(const sirinluinternal::MatchingSpan **)(*a2 + v23));
      ++v22;
      v23 += 32;
    }
    while (v21 != v22);
  }
  v24 = a1[10];
  if (v24 > 6)
    v25 = 4;
  else
    v25 = dword_1C2313414[v24];
  v26 = SNLPOSLoggerForCategory(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    v27 = a1[10];
    v28 = "UNKNOWN";
    v29 = "SSU";
    v30 = "LVC";
    v31 = "PSC";
    v32 = "OWL";
    v33 = "UaaP";
    v34 = "SNLC";
    v35 = "[insights-snlp-nlv4]: ";
    v36 = "NLv4";
    switch(v27)
    {
      case 0:
        break;
      case 1:
LABEL_29:
        v35 = "[insights-snlp-snlc]: ";
        v36 = v34;
        break;
      case 2:
LABEL_33:
        v35 = "[insights-snlp-owl]: ";
        v36 = v32;
        break;
      case 3:
LABEL_34:
        v35 = "[insights-snlp-uaap]: ";
        v36 = v33;
        break;
      case 4:
LABEL_35:
        v35 = "[insights-snlp-psc]: ";
        v36 = v31;
        break;
      case 5:
LABEL_36:
        v35 = "[insights-snlp-lvc]: ";
        v36 = v30;
        break;
      case 6:
LABEL_37:
        v35 = "[insights-snlp-ssu]: ";
        v36 = v29;
        break;
      case 7:
LABEL_39:
        v38 = SNLPOSLoggerForCategory(4);
        v35 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          v41 = 136315394;
          v42 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          v43 = 2048;
          v44 = (const char *)v27;
          _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        v36 = v28;
        break;
      default:
        v37 = SNLPOSLoggerForCategory(4);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          v41 = 136315394;
          v42 = "<UNDEFINED_COMPONENT>";
          v43 = 2048;
          v44 = (const char *)v27;
          _os_log_impl(&dword_1C2196000, v37, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v41, 0x16u);
        }
        v27 = a1[10];
        v34 = "<UNDEFINED_COMPONENT>";
        v35 = "[insights-snlp-nlv4]: ";
        v33 = "<UNDEFINED_COMPONENT>";
        v32 = "<UNDEFINED_COMPONENT>";
        v31 = "<UNDEFINED_COMPONENT>";
        v30 = "<UNDEFINED_COMPONENT>";
        v29 = "<UNDEFINED_COMPONENT>";
        v36 = "<UNDEFINED_COMPONENT>";
        switch(v27)
        {
          case 0:
            goto LABEL_42;
          case 1:
            goto LABEL_29;
          case 2:
            goto LABEL_33;
          case 3:
            goto LABEL_34;
          case 4:
            goto LABEL_35;
          case 5:
            goto LABEL_36;
          case 6:
            goto LABEL_37;
          default:
            v28 = "<UNDEFINED_COMPONENT>";
            goto LABEL_39;
        }
    }
LABEL_42:
    v41 = 136315394;
    v42 = v36;
    v43 = 2080;
    v44 = v35;
    _os_log_impl(&dword_1C2196000, v26, OS_LOG_TYPE_DEBUG, "[%s] %sThe following spans were removed during truncation:\n", (uint8_t *)&v41, 0x16u);
  }
  v39 = *a2;
  if (v21 < (a2[1] - *a2) >> 5)
  {
    v40 = (32 * v21) | 0x18;
    do
    {
      nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan((nlv4_inference_orchestrator::span_matching::SpanTruncator *)a1, *(const sirinluinternal::MatchingSpan **)(v39 + v40));
      ++v21;
      v39 = *a2;
      v40 += 32;
    }
    while (v21 < (a2[1] - *a2) >> 5);
  }
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::logSpan(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, const sirinluinternal::MatchingSpan *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  NSObject *v7;
  int v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  int v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  NSObject *v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t *v32;
  int v33;
  int v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  NSObject *v38;
  uint64_t *v39;
  int v40;
  const char *v41;
  __int16 v42;
  const char *v43;
  __int16 v44;
  uint64_t *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *((unsigned int *)this + 10);
  if ((~*((unsigned __int8 *)a2 + 80) & 3) != 0)
  {
    if (v4 > 6)
      v6 = 4;
    else
      v6 = dword_1C2313414[v4];
    v18 = SNLPOSLoggerForCategory(v6);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = *((_DWORD *)this + 10);
      v20 = "UNKNOWN";
      v21 = "SSU";
      v22 = "LVC";
      v23 = "PSC";
      v24 = "OWL";
      v25 = "UaaP";
      v26 = "SNLC";
      v27 = "[insights-snlp-nlv4]: ";
      v28 = "NLv4";
      switch(v19)
      {
        case 0:
          break;
        case 1:
LABEL_13:
          v27 = "[insights-snlp-snlc]: ";
          v28 = v26;
          break;
        case 2:
LABEL_25:
          v27 = "[insights-snlp-owl]: ";
          v28 = v24;
          break;
        case 3:
LABEL_26:
          v27 = "[insights-snlp-uaap]: ";
          v28 = v25;
          break;
        case 4:
LABEL_27:
          v27 = "[insights-snlp-psc]: ";
          v28 = v23;
          break;
        case 5:
LABEL_28:
          v27 = "[insights-snlp-lvc]: ";
          v28 = v22;
          break;
        case 6:
LABEL_29:
          v27 = "[insights-snlp-ssu]: ";
          v28 = v21;
          break;
        case 7:
LABEL_38:
          v38 = SNLPOSLoggerForCategory(4);
          v27 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          {
            v40 = 136315394;
            v41 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            v42 = 2048;
            v43 = (const char *)v19;
            _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          v28 = v20;
          break;
        default:
          v30 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            v40 = 136315394;
            v41 = "<UNDEFINED_COMPONENT>";
            v42 = 2048;
            v43 = (const char *)v19;
            _os_log_impl(&dword_1C2196000, v30, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          v19 = *((_DWORD *)this + 10);
          v26 = "<UNDEFINED_COMPONENT>";
          v27 = "[insights-snlp-nlv4]: ";
          v25 = "<UNDEFINED_COMPONENT>";
          v24 = "<UNDEFINED_COMPONENT>";
          v23 = "<UNDEFINED_COMPONENT>";
          v22 = "<UNDEFINED_COMPONENT>";
          v21 = "<UNDEFINED_COMPONENT>";
          v28 = "<UNDEFINED_COMPONENT>";
          switch(v19)
          {
            case 0:
              goto LABEL_41;
            case 1:
              goto LABEL_13;
            case 2:
              goto LABEL_25;
            case 3:
              goto LABEL_26;
            case 4:
              goto LABEL_27;
            case 5:
              goto LABEL_28;
            case 6:
              goto LABEL_29;
            default:
              v20 = "<UNDEFINED_COMPONENT>";
              goto LABEL_38;
          }
      }
LABEL_41:
      v39 = (uint64_t *)*((_QWORD *)a2 + 6);
      if (*((char *)v39 + 23) < 0)
        v39 = (uint64_t *)*v39;
      v40 = 136315650;
      v41 = v28;
      v42 = 2080;
      v43 = v27;
      v44 = 2080;
      v45 = v39;
      v35 = "[%s] %s  Span with label %s.\n";
      v36 = v18;
      v37 = 32;
      goto LABEL_44;
    }
  }
  else
  {
    if (v4 > 6)
      v5 = 4;
    else
      v5 = dword_1C2313414[v4];
    v7 = SNLPOSLoggerForCategory(v5);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8 = *((_DWORD *)this + 10);
      v9 = "UNKNOWN";
      v10 = "SSU";
      v11 = "LVC";
      v12 = "PSC";
      v13 = "OWL";
      v14 = "UaaP";
      v15 = "SNLC";
      v16 = "[insights-snlp-nlv4]: ";
      v17 = "NLv4";
      switch(v8)
      {
        case 0:
          break;
        case 1:
LABEL_9:
          v16 = "[insights-snlp-snlc]: ";
          v17 = v15;
          break;
        case 2:
LABEL_17:
          v16 = "[insights-snlp-owl]: ";
          v17 = v13;
          break;
        case 3:
LABEL_18:
          v16 = "[insights-snlp-uaap]: ";
          v17 = v14;
          break;
        case 4:
LABEL_19:
          v16 = "[insights-snlp-psc]: ";
          v17 = v12;
          break;
        case 5:
LABEL_20:
          v16 = "[insights-snlp-lvc]: ";
          v17 = v11;
          break;
        case 6:
LABEL_21:
          v16 = "[insights-snlp-ssu]: ";
          v17 = v10;
          break;
        case 7:
LABEL_31:
          v31 = SNLPOSLoggerForCategory(4);
          v16 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            v40 = 136315394;
            v41 = "[insights-snlp-<UNDEFINED_COMPONENT>]: ";
            v42 = 2048;
            v43 = (const char *)v8;
            _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          v17 = v9;
          break;
        default:
          v29 = SNLPOSLoggerForCategory(4);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v40 = 136315394;
            v41 = "<UNDEFINED_COMPONENT>";
            v42 = 2048;
            v43 = (const char *)v8;
            _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_ERROR, "[%s] The component %zu is invalid", (uint8_t *)&v40, 0x16u);
          }
          v8 = *((_DWORD *)this + 10);
          v15 = "<UNDEFINED_COMPONENT>";
          v16 = "[insights-snlp-nlv4]: ";
          v14 = "<UNDEFINED_COMPONENT>";
          v13 = "<UNDEFINED_COMPONENT>";
          v12 = "<UNDEFINED_COMPONENT>";
          v11 = "<UNDEFINED_COMPONENT>";
          v10 = "<UNDEFINED_COMPONENT>";
          v17 = "<UNDEFINED_COMPONENT>";
          switch(v8)
          {
            case 0:
              goto LABEL_34;
            case 1:
              goto LABEL_9;
            case 2:
              goto LABEL_17;
            case 3:
              goto LABEL_18;
            case 4:
              goto LABEL_19;
            case 5:
              goto LABEL_20;
            case 6:
              goto LABEL_21;
            default:
              v9 = "<UNDEFINED_COMPONENT>";
              goto LABEL_31;
          }
      }
LABEL_34:
      v32 = (uint64_t *)*((_QWORD *)a2 + 6);
      if (*((char *)v32 + 23) < 0)
        v32 = (uint64_t *)*v32;
      v34 = *((_DWORD *)a2 + 18);
      v33 = *((_DWORD *)a2 + 19);
      v40 = 136316162;
      v41 = v17;
      v42 = 2080;
      v43 = v16;
      v44 = 2080;
      v45 = v32;
      v46 = 1024;
      v47 = v33;
      v48 = 1024;
      v49 = v34;
      v35 = "[%s] %s  Span with label %s across indices (%u, %u).\n";
      v36 = v7;
      v37 = 44;
LABEL_44:
      _os_log_impl(&dword_1C2196000, v36, OS_LOG_TYPE_DEBUG, v35, (uint8_t *)&v40, v37);
    }
  }
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, sirinluinternal::MatchingSpan *a2, const sirinluinternal::MatchingSpan *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  BOOL v8;
  BOOL isReinsertionDataDetectorSpan;
  __int128 *v10;
  __int128 v11;
  _DWORD *v12;
  _DWORD *v13;
  BOOL v14;
  unsigned int v15;
  __int128 *v16;
  __int128 v17;
  _BOOL8 v18;
  std::string::size_type size;
  std::string *v21;
  std::string::size_type v22;
  std::string *p_p;
  size_t v24;
  int v25;
  BOOL v26;
  std::string __p;
  BOOL v28;
  BOOL v29;
  std::string v30;

  v6 = (_DWORD *)*((_QWORD *)a2 + 1);
  v7 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v6 != v7)
  {
    while (*v6 != 2)
    {
      if (++v6 == v7)
      {
        v6 = (_DWORD *)*((_QWORD *)a2 + 2);
        break;
      }
    }
  }
  v8 = v6 == v7;
  isReinsertionDataDetectorSpan = nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(this, a2);
  v10 = (__int128 *)*((_QWORD *)a2 + 6);
  v28 = v8;
  v29 = !isReinsertionDataDetectorSpan;
  if (*((char *)v10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v30.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v11;
  }
  v12 = (_DWORD *)*((_QWORD *)a3 + 1);
  v13 = (_DWORD *)*((_QWORD *)a3 + 2);
  if (v12 != v13)
  {
    while (*v12 != 2)
    {
      if (++v12 == v13)
      {
        v12 = (_DWORD *)*((_QWORD *)a3 + 2);
        break;
      }
    }
  }
  v14 = nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(this, a3);
  v15 = v12 == v13;
  v16 = (__int128 *)*((_QWORD *)a3 + 6);
  v26 = !v14;
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    v15 = v12 == v13;
  }
  else
  {
    v17 = *v16;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
  }
  if (v28 < v15)
    goto LABEL_19;
  if (v15 < v28)
  {
LABEL_17:
    v18 = 0;
    goto LABEL_20;
  }
  if (v29 >= v26)
  {
    if (v26 < v29)
      goto LABEL_17;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    else
      size = v30.__r_.__value_.__l.__size_;
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v30;
    else
      v21 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v22 = __p.__r_.__value_.__l.__size_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (v22 >= size)
      v24 = size;
    else
      v24 = v22;
    v25 = memcmp(v21, p_p, v24);
    if (v25)
      v18 = v25 < 0;
    else
      v18 = size < v22;
  }
  else
  {
LABEL_19:
    v18 = 1;
  }
LABEL_20:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  return v18;
}

void sub_1C22E3360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, nlv4_inference_orchestrator::span_matching::SpanTruncator **a4)
{
  const sirinluinternal::MatchingSpan **v8;
  const sirinluinternal::MatchingSpan **v9;
  BOOL v10;
  _BOOL8 result;
  const sirinluinternal::MatchingSpan *v12;
  __int128 v13;
  const sirinluinternal::MatchingSpan *v14;
  sirinluinternal::MatchingSpan *v15;
  __int128 v16;
  sirinluinternal::MatchingSpan *v17;
  sirinluinternal::MatchingSpan *v18;
  sirinluinternal::MatchingSpan *v19;
  __int128 v20;
  const sirinluinternal::MatchingSpan *v21;
  sirinluinternal::MatchingSpan *v22;
  __int128 v23;
  const sirinluinternal::MatchingSpan *v24;
  const sirinluinternal::MatchingSpan *v25;
  sirinluinternal::MatchingSpan *v26;
  __int128 v27;
  sirinluinternal::MatchingSpan *v28;
  const sirinluinternal::MatchingSpan *v29;

  v8 = a2 + 3;
  v9 = a1 + 3;
  v10 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a2[3], a1[3]);
  result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a3[3], *v8);
  if (v10)
  {
    if (result)
    {
      v12 = a1[2];
      v13 = *(_OWORD *)a1;
      v14 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
    }
    else
    {
      v22 = a1[2];
      v23 = *(_OWORD *)a1;
      v24 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v24;
      *(_OWORD *)a2 = v23;
      a2[2] = v22;
      v25 = a1[3];
      a1[3] = a2[3];
      a2[3] = v25;
      result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a3[3], v25);
      if (!result)
        return result;
      v26 = a2[2];
      v27 = *(_OWORD *)a2;
      v28 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v28;
      *(_OWORD *)a3 = v27;
      a3[2] = v26;
      v9 = v8;
    }
    v8 = a3 + 3;
    goto LABEL_10;
  }
  if (result)
  {
    v15 = a2[2];
    v16 = *(_OWORD *)a2;
    v17 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v17;
    *(_OWORD *)a3 = v16;
    a3[2] = v15;
    v18 = a2[3];
    a2[3] = a3[3];
    a3[3] = v18;
    result = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a4, a2[3], *v9);
    if (result)
    {
      v19 = a1[2];
      v20 = *(_OWORD *)a1;
      v21 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v21;
      *(_OWORD *)a2 = v20;
      a2[2] = v19;
LABEL_10:
      v29 = *v9;
      *v9 = *v8;
      *v8 = v29;
    }
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, __int128 *a4, nlv4_inference_orchestrator::span_matching::SpanTruncator **a5)
{
  __n128 result;
  sirinluinternal::MatchingSpan *v11;
  __int128 v12;
  sirinluinternal::MatchingSpan *v13;
  sirinluinternal::MatchingSpan *v14;
  sirinluinternal::MatchingSpan *v15;
  __int128 v16;
  sirinluinternal::MatchingSpan *v17;
  sirinluinternal::MatchingSpan *v18;
  sirinluinternal::MatchingSpan *v19;
  sirinluinternal::MatchingSpan *v20;
  sirinluinternal::MatchingSpan *v21;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, a2, a3, a5);
  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, *((sirinluinternal::MatchingSpan **)a4 + 3), a3[3]))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (sirinluinternal::MatchingSpan *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    v14 = a3[3];
    a3[3] = (sirinluinternal::MatchingSpan *)*((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = v14;
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, a3[3], a2[3]))
    {
      v15 = a2[2];
      v16 = *(_OWORD *)a2;
      v17 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v17;
      *(_OWORD *)a3 = v16;
      a3[2] = v15;
      v18 = a2[3];
      a2[3] = a3[3];
      a3[3] = v18;
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a5, a2[3], a1[3]))
      {
        v19 = a1[2];
        result = *(__n128 *)a1;
        v20 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v20;
        *(__n128 *)a2 = result;
        a2[2] = v19;
        v21 = a1[3];
        a1[3] = a2[3];
        a2[3] = v21;
      }
    }
  }
  return result;
}

__n128 std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>(const sirinluinternal::MatchingSpan **a1, sirinluinternal::MatchingSpan **a2, sirinluinternal::MatchingSpan **a3, __int128 *a4, __int128 *a5, nlv4_inference_orchestrator::span_matching::SpanTruncator **a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  sirinluinternal::MatchingSpan *v17;
  __int128 v18;
  sirinluinternal::MatchingSpan *v19;
  sirinluinternal::MatchingSpan *v20;
  sirinluinternal::MatchingSpan *v21;
  __int128 v22;
  sirinluinternal::MatchingSpan *v23;
  sirinluinternal::MatchingSpan *v24;
  sirinluinternal::MatchingSpan *v25;
  sirinluinternal::MatchingSpan *v26;
  sirinluinternal::MatchingSpan *v27;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(a1, a2, a3, a4, a6);
  if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, *((sirinluinternal::MatchingSpan **)a5 + 3), *((const sirinluinternal::MatchingSpan **)a4 + 3)))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    v16 = *((_QWORD *)a4 + 3);
    *((_QWORD *)a4 + 3) = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 3) = v16;
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, *((sirinluinternal::MatchingSpan **)a4 + 3), a3[3]))
    {
      v17 = a3[2];
      v18 = *(_OWORD *)a3;
      v19 = (sirinluinternal::MatchingSpan *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v19;
      *a4 = v18;
      *((_QWORD *)a4 + 2) = v17;
      v20 = a3[3];
      a3[3] = (sirinluinternal::MatchingSpan *)*((_QWORD *)a4 + 3);
      *((_QWORD *)a4 + 3) = v20;
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, a3[3], a2[3]))
      {
        v21 = a2[2];
        v22 = *(_OWORD *)a2;
        v23 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v23;
        *(_OWORD *)a3 = v22;
        a3[2] = v21;
        v24 = a2[3];
        a2[3] = a3[3];
        a3[3] = v24;
        if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a6, a2[3], a1[3]))
        {
          v25 = a1[2];
          result = *(__n128 *)a1;
          v26 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          a1[2] = v26;
          *(__n128 *)a2 = result;
          a2[2] = v25;
          v27 = a1[3];
          a1[3] = a2[3];
          a2[3] = v27;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>(uint64_t a1, uint64_t a2, nlv4_inference_orchestrator::span_matching::SpanTruncator **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  sirinluinternal::MatchingSpan *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[15];

  v6 = (a2 - a1) >> 5;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(a2 - 8), *(const sirinluinternal::MatchingSpan **)(a1 + 24)))
      {
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_OWORD *)a1;
        v10 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a2 - 32) = v9;
        *(_QWORD *)(a2 - 16) = v8;
        v11 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v11;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a2 - 32), a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (__int128 *)(a2 - 32), a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,0>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), (__int128 *)(a1 + 96), (__int128 *)(a2 - 32), a3);
      return 1;
    default:
      v12 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*>((const sirinluinternal::MatchingSpan **)a1, (sirinluinternal::MatchingSpan **)(a1 + 32), (sirinluinternal::MatchingSpan **)(a1 + 64), a3);
      v13 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, *(sirinluinternal::MatchingSpan **)(v13 + 24), *(const sirinluinternal::MatchingSpan **)(v12 + 24)))
    {
      v22 = *(_QWORD *)v13;
      *(_QWORD *)v24 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)&v24[7] = *(_QWORD *)(v13 + 15);
      v23 = *(_BYTE *)(v13 + 23);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = *(sirinluinternal::MatchingSpan **)(v13 + 24);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = (void **)(a1 + v17 + 96);
        if (*(char *)(a1 + v17 + 119) < 0)
          operator delete(*v19);
        *(_OWORD *)v19 = *(_OWORD *)(v18 + 64);
        *(_QWORD *)(a1 + v17 + 112) = *(_QWORD *)(v18 + 80);
        *(_BYTE *)(v18 + 87) = 0;
        *(_BYTE *)(v18 + 64) = 0;
        *(_QWORD *)(v18 + 120) = *(_QWORD *)(v18 + 88);
        if (v17 == -64)
          break;
        v20 = nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)const::$_0::operator()(*a3, v16, *(const sirinluinternal::MatchingSpan **)(a1 + v17 + 56));
        v17 -= 32;
        if (!v20)
        {
          v21 = a1 + v17 + 96;
          goto LABEL_14;
        }
      }
      v21 = a1;
LABEL_14:
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      *(_QWORD *)v21 = v22;
      *(_QWORD *)(v21 + 8) = *(_QWORD *)v24;
      *(_QWORD *)(v21 + 15) = *(_QWORD *)&v24[7];
      *(_BYTE *)(v21 + 23) = v23;
      *(_QWORD *)(v21 + 24) = v16;
      if (++v15 == 8)
        return v13 + 32 == a2;
    }
    v12 = v13;
    v14 += 32;
    v13 += 32;
    if (v13 == a2)
      return 1;
  }
}

void sub_1C22E3A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, int a10, int a11)
{
  if (a11 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::isReinsertionDataDetectorSpan(nlv4_inference_orchestrator::span_matching::SpanTruncator *this, const sirinluinternal::MatchingSpan *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)a2 + 1);
  v2 = (_DWORD *)*((_QWORD *)a2 + 2);
  if (v3 != v2)
  {
    while (*v3)
    {
      if (++v3 == v2)
      {
        v3 = (_DWORD *)*((_QWORD *)a2 + 2);
        break;
      }
    }
  }
  return v3 != v2
      && std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, *((unsigned __int8 **)a2 + 6)) != 0;
}

void nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(nlv4_inference_orchestrator::span_matching::SpanTruncator *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  nlv4_inference_orchestrator::span_matching::SpanTruncator *v6;

  v3 = *a2;
  v2 = a2[1];
  v4 = 126 - 2 * __clz((uint64_t)(v2 - v3) >> 5);
  v6 = a1;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = v4;
  std::__introsort<std::_ClassicAlgPolicy,nlv4_inference_orchestrator::span_matching::SpanTruncator::sortBySpanLabelAndSpanType(std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>> &)::$_0 &,std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>*,false>(v3, v2, &v6, v5, 1);
}

BOOL nlv4_inference_orchestrator::span_matching::SpanTruncator::isUserVocabSpan(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(a2 + 8);
  v3 = *(_DWORD **)(a2 + 16);
  if (v2 != v3)
  {
    while (*v2 != 2)
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(a2 + 16);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void snlp::common::text_uso_graph::UDATextTreeParser::node(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::runtime_error *exception;
  std::runtime_error *v11;
  std::string *v12;
  __int128 v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string v19;
  std::string v20;
  void *__p[2];
  _BYTE v22[25];
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  std::string v31[2];
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;

  v2 = a2;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  *(_OWORD *)__p = 0u;
  memset(v22, 0, sizeof(v22));
  v4 = a1 + 120;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  memset(v31, 0, 32);
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(_QWORD *)a2;
    v5 = v6;
  }
  *(_OWORD *)((char *)&v31[1].__r_.__value_.__l.__data_ + 1) = 0uLL;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, (std::sub_match<const char *> *)a2, (std::sub_match<const char *> *)(a2 + v5), (std::vector<std::csub_match> *)v31, 0);
  v8 = *(unsigned __int8 *)(v2 + 23);
  if ((v8 & 0x80u) == 0)
    v9 = v2;
  else
    v9 = *(_QWORD *)v2;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(v2 + 8);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((uint64_t)__p, v9, v9 + v8, (uint64_t *)v31, 0);
  if (v31[0].__r_.__value_.__r.__words[0])
    operator delete(v31[0].__r_.__value_.__l.__data_);
  if (v7)
  {
    if (*(_BYTE *)(a1 + 88))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if (!*(_BYTE *)(a1 + 88))
        std::__throw_bad_optional_access[abi:ne180100]();
      std::operator+<char>();
      v12 = std::string::append(&v19, " but is being redefined as ");
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = *(char *)(v2 + 23);
      if (v14 >= 0)
        v15 = (const std::string::value_type *)v2;
      else
        v15 = *(const std::string::value_type **)v2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v2 + 23);
      else
        v16 = *(_QWORD *)(v2 + 8);
      v17 = std::string::append(&v20, v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v31[0].__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31[0].__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, v31);
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
    }
    std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(a1 + 64), (const std::string *)v2);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 88))
    {
      v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v11, v31);
      v11->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
    }
    (***(void (****)(_QWORD, uint64_t))(a1 + 96))(*(_QWORD *)(a1 + 96), v2);
  }
  if (__p[0])
    operator delete(__p[0]);
}

void sub_1C22E3D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  int v23;
  void *v24;
  uint64_t v25;

  if (*(char *)(v25 - 137) < 0)
    operator delete(*(void **)(v25 - 160));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_10:
      if (a23)
        operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v24);
  goto LABEL_10;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::edge(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::runtime_error *exception;
  _QWORD v21[2];

  if (!*(_BYTE *)(a1 + 88))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(exception, "User dialog act not yet specified");
  }
  v4 = siri::ontology::oname::graph::ontology_init::Argument_task((siri::ontology::oname::graph::ontology_init *)a1);
  v5 = *(unsigned __int8 *)(v4 + 31);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(v4 + 31);
  else
    v6 = *(_QWORD *)(v4 + 16);
  v7 = a2[23];
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (v6 != v7)
    return (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 96) + 8))(*(_QWORD *)(a1 + 96), a2);
  v9 = (const void **)(v4 + 8);
  if (v8 >= 0)
    v10 = a2;
  else
    v10 = *(unsigned __int8 **)a2;
  if ((v5 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, *(_QWORD *)(v4 + 16)))
      return (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 96) + 8))(*(_QWORD *)(a1 + 96), a2);
    goto LABEL_17;
  }
  if (!*(_BYTE *)(v4 + 31))
  {
LABEL_17:
    v11 = operator new();
    v12 = v11;
    v13 = *(std::__shared_weak_count **)(a1 + 112);
    v21[0] = *(_QWORD *)(a1 + 104);
    v21[1] = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    snlp::common::text_uso_graph::UsoGraphTextTreeParser::UsoGraphTextTreeParser(v11, v21, *(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 56));
    if (v13)
    {
      v16 = (unint64_t *)&v13->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v18 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v12;
    if (v18)
      std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v18);
    return (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 96) + 8))(*(_QWORD *)(a1 + 96), a2);
  }
  while (*(unsigned __int8 *)v9 == *v10)
  {
    v9 = (const void **)((char *)v9 + 1);
    ++v10;
    if (!--v5)
      goto LABEL_17;
  }
  return (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(a1 + 96) + 8))(*(_QWORD *)(a1 + 96), a2);
}

void sub_1C22E3FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3BB9B44](v9, 0x10B3C404687FECELL);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::stringValue(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::integerValue(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::indentation(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::alias(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 96);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::textAlignment(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

_QWORD *snlp::common::text_uso_graph::UDATextTreeParser::toTreeDebug@<X0>(snlp::common::text_uso_graph::UDATextTreeParser *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 12);
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

std::runtime_error *_ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
  return result;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::UDATextTreeParser(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a1 = off_1E7BE9C78;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v3 = a2[1];
  *(_QWORD *)(a1 + 104) = *a2;
  *(_QWORD *)(a1 + 112) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)(a1 + 120), "^(accepted|acknowledged|cancelled|delegated|rejected|user_stated_task|wanted_to_pause|wanted_to_proceed|wanted_to_repeat|UserAccepted|UserAcknowledged|UserCancelled|DelegatedUserDialogAct|UserRejected|UserStatedTask|UserWantedToPause|UserWantedToProceed|UserWantedToRepeat)");
  return a1;
}

void sub_1C22E4154(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v4 = v3;
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100](v4);
  v6 = *(_QWORD *)(v2 + 96);
  *(_QWORD *)(v2 + 96) = 0;
  if (v6)
    std::default_delete<snlp::common::text_uso_graph::UsoGraphTextTreeParser>::operator()[abi:ne180100](v6);
  if (*(_BYTE *)(v2 + 88))
  {
    if (*(char *)(v2 + 87) < 0)
      operator delete(*(void **)(v2 + 64));
  }
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::getAliasMap(snlp::common::text_uso_graph::UDATextTreeParser *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return v1 + 112;
  else
    return (uint64_t)this + 8;
}

uint64_t snlp::common::text_uso_graph::UDATextTreeParser::releaseUserDialogAct@<X0>(snlp::common::text_uso_graph::UDATextTreeParser *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  siri::ontology::UsoGraphProtoWriter *v5;
  const UsoGraph *v6;
  uint64_t v7;
  siri::ontology::UsoGraphProtoWriter *v8;
  uint64_t v9;
  sirinluexternal::UserAccepted **v10;
  sirinluexternal::UserAccepted *v11;
  uint64_t v12;
  uint64_t v13;
  sirinluexternal::UserAccepted *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::runtime_error *exception;
  std::runtime_error *v20;
  std::string v21;
  uint64_t v22;
  siri::ontology::UsoGraphProtoWriter *v23;

  if (!*((_BYTE *)this + 88))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN4snlp6common14text_uso_graph21UDATextTreeParseErrorCI1St13runtime_errorEPKc(exception, "UDA not yet specified");
  }
  v4 = (char *)this + 48;
  v5 = (siri::ontology::UsoGraphProtoWriter *)operator new();
  MEMORY[0x1C3BB9154](v5, v4);
  v23 = v5;
  v7 = *((_QWORD *)this + 12);
  if (v7)
  {
    v8 = *(siri::ontology::UsoGraphProtoWriter **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = 0;
    v23 = v8;
    v9 = MEMORY[0x1C3BB916C](v5);
    MEMORY[0x1C3BB9B44](v9, 0x10A0C403D23BABBLL);
    v5 = v8;
  }
  siri::ontology::UsoGraphProtoWriter::toProtobuf(v5, v6);
  v10 = (sirinluexternal::UserAccepted **)operator new();
  *a2 = sirinluexternal::UserDialogAct::UserDialogAct((sirinluexternal::UserDialogAct *)v10);
  if (std::operator==[abi:ne180100]<std::string,char [9]>((uint64_t)this + 64, "accepted")
    || std::operator==[abi:ne180100]<std::string,char [13]>((uint64_t)this + 64, "UserAccepted"))
  {
    sirinluexternal::UserDialogAct::makeAccepted((sirinluexternal::UserDialogAct *)v10);
    sirinluexternal::UserAccepted::makeReference(v10[1]);
    v11 = v10[1];
    goto LABEL_7;
  }
  if (std::operator==[abi:ne180100]<std::string,char [13]>((uint64_t)this + 64, "acknowledged")
    || std::operator==[abi:ne180100]<std::string,char [17]>((uint64_t)this + 64, "UserAcknowledged"))
  {
    sirinluexternal::UserDialogAct::makeAcknowledged((sirinluexternal::UserDialogAct *)v10);
    sirinluexternal::UserAcknowledged::makeReference(v10[2]);
    v14 = v10[2];
    goto LABEL_12;
  }
  if (std::operator==[abi:ne180100]<std::string,char [10]>((uint64_t)this + 64, "cancelled")
    || std::operator==[abi:ne180100]<std::string,char [13]>((uint64_t)this + 64, "UserCanceled"))
  {
    sirinluexternal::UserDialogAct::makeCancelled((sirinluexternal::UserDialogAct *)v10);
    sirinluexternal::UserCancelled::makeReference(v10[4]);
    v14 = v10[4];
    goto LABEL_12;
  }
  if (!std::operator==[abi:ne180100]<std::string,char [10]>((uint64_t)this + 64, "delegated")
    && !std::operator==[abi:ne180100]<std::string,char [19]>((uint64_t)this + 64, "DelegatedDialogAct"))
  {
    if (std::operator==[abi:ne180100]<std::string,char [9]>((uint64_t)this + 64, "rejected")
      || std::operator==[abi:ne180100]<std::string,char [13]>((uint64_t)this + 64, "UserRejected"))
    {
      sirinluexternal::UserDialogAct::makeRejected((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserRejected::makeReference(v10[6]);
      v11 = v10[6];
LABEL_7:
      v12 = v22;
      v22 = 0;
      v13 = *((_QWORD *)v11 + 2);
      *((_QWORD *)v11 + 2) = v12;
      if (!v13)
        goto LABEL_16;
LABEL_13:
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      goto LABEL_14;
    }
    if (std::operator==[abi:ne180100]<std::string,char [17]>((uint64_t)this + 64, "user_stated_task")
      || std::operator==[abi:ne180100]<std::string,char [15]>((uint64_t *)this + 8))
    {
      sirinluexternal::UserDialogAct::makeUserStatedTask((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserStatedTask::makeTask(v10[7]);
      v14 = v10[7];
    }
    else if (std::operator==[abi:ne180100]<std::string,char [16]>((uint64_t *)this + 8)
           || std::operator==[abi:ne180100]<std::string,char [18]>((uint64_t)this + 64, "UserWantedToPause"))
    {
      sirinluexternal::UserDialogAct::makeWantedToPause((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserWantedToPause::makeReference(v10[8]);
      v14 = v10[8];
    }
    else if (std::operator==[abi:ne180100]<std::string,char [18]>((uint64_t)this + 64, "wanted_to_proceed")
           || std::operator==[abi:ne180100]<std::string,char [20]>((uint64_t *)this + 8))
    {
      sirinluexternal::UserDialogAct::makeWantedToProceed((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserWantedToProceed::makeReference(v10[9]);
      v14 = v10[9];
    }
    else
    {
      if (!std::operator==[abi:ne180100]<std::string,char [17]>((uint64_t)this + 64, "wanted_to_repeat")
        && !std::operator==[abi:ne180100]<std::string,char [19]>((uint64_t)this + 64, "UserWantedToRepeat"))
      {
        v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        if (!*((_BYTE *)this + 88))
          std::__throw_bad_optional_access[abi:ne180100]();
        std::operator+<char>();
        std::runtime_error::runtime_error(v20, &v21);
        v20->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9D10;
      }
      sirinluexternal::UserDialogAct::makeWantedToRepeat((sirinluexternal::UserDialogAct *)v10);
      sirinluexternal::UserWantedToRepeat::makeReference(v10[10]);
      v14 = v10[10];
    }
LABEL_12:
    v15 = v22;
    v22 = 0;
    v13 = *((_QWORD *)v14 + 1);
    *((_QWORD *)v14 + 1) = v15;
    if (!v13)
      goto LABEL_16;
    goto LABEL_13;
  }
  sirinluexternal::UserDialogAct::makeDelegated((sirinluexternal::UserDialogAct *)v10);
LABEL_14:
  v16 = v22;
  v22 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
LABEL_16:
  v17 = MEMORY[0x1C3BB916C](v5);
  return MEMORY[0x1C3BB9B44](v17, 0x10A0C403D23BABBLL);
}

void sub_1C22E45A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  int v20;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
    {
LABEL_6:
      *v17 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (a16)
        (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
      std::unique_ptr<siri::ontology::UsoGraph const>::reset[abi:ne180100](&a17, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

BOOL std::operator==[abi:ne180100]<std::string,char [9]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [13]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [17]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [10]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [19]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [15]>(uint64_t *a1)
{
  int v1;

  if (!*((_BYTE *)a1 + 24))
    return 0;
  v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 14)
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 14)
  {
    return 0;
  }
  return *a1 == 0x7461745372657355 && *(uint64_t *)((char *)a1 + 6) == 0x6B73615464657461;
}

BOOL std::operator==[abi:ne180100]<std::string,char [16]>(uint64_t *a1)
{
  int v1;

  if (!*((_BYTE *)a1 + 24))
    return 0;
  v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 15)
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 15)
  {
    return 0;
  }
  return *a1 == 0x745F6465746E6177 && *(uint64_t *)((char *)a1 + 7) == 0x65737561705F6F74;
}

BOOL std::operator==[abi:ne180100]<std::string,char [18]>(uint64_t a1, char *__s)
{
  _QWORD *v3;
  size_t v4;

  if (!*(_BYTE *)(a1 + 24))
    return 0;
  v3 = (_QWORD *)a1;
  v4 = strlen(__s);
  if ((*((char *)v3 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)v3 + 23))
      return 0;
    return memcmp(v3, __s, v4) == 0;
  }
  if (v4 == v3[1])
  {
    if (v4 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v3 = (_QWORD *)*v3;
    return memcmp(v3, __s, v4) == 0;
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::string,char [20]>(uint64_t *a1)
{
  int v1;

  if (!*((_BYTE *)a1 + 24))
    return 0;
  v1 = *((char *)a1 + 23);
  if (v1 < 0)
  {
    if (a1[1] != 19)
      return 0;
    a1 = (uint64_t *)*a1;
  }
  else if (v1 != 19)
  {
    return 0;
  }
  return *a1 == 0x746E615772657355
      && a1[1] == 0x636F72506F546465
      && *(uint64_t *)((char *)a1 + 11) == 0x646565636F72506FLL;
}

std::string *snlp::ssu::matcher::SSURequestHandler::SSURequestHandler(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v13 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v13;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v14 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v14;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v15 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v15;
  }
  std::unordered_map<SSUCategoryType,snlp::ssu::similarity::SSUSimilaritySearchConfiguration>::unordered_map((uint64_t)&this[3], (uint64_t)a4 + 24);
  *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = *(_OWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_OWORD *)&this[5].__r_.__value_.__r.__words[1] = *(_OWORD *)a6;
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_OWORD *)&this[6].__r_.__value_.__l.__data_ = *(_OWORD *)a7;
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  return this;
}

void sub_1C22E4C00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::matcher::SSURequestHandler::buildResponseForApps(uint64_t a1@<X0>, uint64_t *a2@<X1>, snlp::ssu::proto::SSUValidatedRequest *a3@<X2>, uint64_t *a4@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  std::string *v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  std::string::size_type v25;
  int v26;
  std::string *v27;
  __int128 v28;
  NSObject *v29;
  _QWORD *v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  _BYTE *v39;
  _DWORD *v40;
  unint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t i;
  int v46;
  uint64_t v47;
  int v48;
  char v49;
  int v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _BYTE *v64;
  void *v65;
  unint64_t v66;
  _QWORD *v67;
  __int128 v68;
  NSObject *v69;
  _BOOL4 v70;
  std::string::size_type size;
  std::string::size_type j;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  int64x2_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  NSObject *v93;
  sirinluinternalssu::SSUResponse *v94;
  NSObject *v95;
  sirinluinternalssu::SSUResponse *v96;
  uint64_t v97;
  uint64_t *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  char *v106;
  __int128 *v108;
  char *v109;
  _BYTE v110[7];
  _BYTE v111[7];
  _BYTE v112[7];
  uint64_t v113;
  uint64_t v114;
  _QWORD v115[6];
  char v116;
  char *v117;
  char *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::string v121;
  void *v122;
  char v123;
  std::__shared_weak_count *v124;
  uint64_t v125[3];
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  std::string::size_type v129[2];
  std::string v130;
  std::__shared_weak_count *v131;
  void *v132;
  char v133;
  uint64_t v134;
  void **v135[3];
  unint64_t v136;
  _QWORD v137[2];
  std::string buf;
  std::string::size_type v139;
  _QWORD v140[2];
  int v141;
  void **v142;
  char v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v6 = *(std::__shared_weak_count **)(a1 + 120);
  v108 = (__int128 *)(a1 + 48);
  v129[0] = *(_QWORD *)(a1 + 112);
  v129[1] = (std::string::size_type)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  snlp::ssu::cache::SSUCacheFileReadStreamManager::SSUCacheFileReadStreamManager(&v130, v108, v129, (__int128 *)a1);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v11 = *a2;
  v12 = a2[1];
  if (v12 != *a2)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - *a2) >> 3);
    if (v13 > 0x666666666666666)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v140[0] = &v128;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(v13);
    buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__r.__words[0];
    v139 = buf.__r_.__value_.__r.__words[0] + 40 * v14;
    std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(&v126, &buf);
    std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer((uint64_t)&buf);
    v11 = *a2;
    v12 = a2[1];
  }
  if (v11 != v12)
  {
    while ((snlp::ssu::cache::SSUCacheFileReadStreamManager::openReadStream((uint64_t)&v130, v11) & 1) != 0)
    {
      v15 = v127;
      if (v127 >= v128)
      {
        v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v127 - v126) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0x666666666666666)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x999999999999999ALL * ((uint64_t)(v128 - v126) >> 3) > v20)
          v20 = 0x999999999999999ALL * ((uint64_t)(v128 - v126) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v128 - v126) >> 3) >= 0x333333333333333)
          v21 = 0x666666666666666;
        else
          v21 = v20;
        v140[0] = &v128;
        if (v21)
        {
          v23 = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppCategory>>(v21);
        }
        else
        {
          v23 = 0;
          v22 = 0;
        }
        v25 = (std::string::size_type)&v23[40 * v19];
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        buf.__r_.__value_.__l.__size_ = v25;
        buf.__r_.__value_.__r.__words[2] = v25;
        v139 = (std::string::size_type)&v23[40 * v22];
        v26 = *(_DWORD *)v11;
        *(_BYTE *)(v25 + 4) = *(_BYTE *)(v11 + 4);
        *(_DWORD *)v25 = v26;
        v27 = (std::string *)(v25 + 8);
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
          v25 = buf.__r_.__value_.__r.__words[2];
        }
        else
        {
          v28 = *(_OWORD *)(v11 + 8);
          *(_QWORD *)(v25 + 24) = *(_QWORD *)(v11 + 24);
          *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        }
        v23[40 * v19 + 32] = *(_BYTE *)(v11 + 32);
        buf.__r_.__value_.__r.__words[2] = v25 + 40;
        std::vector<snlp::ssu::app::SSUAppCategory>::__swap_out_circular_buffer(&v126, &buf);
        v24 = v127;
        std::__split_buffer<snlp::ssu::app::SSUAppCategory>::~__split_buffer((uint64_t)&buf);
      }
      else
      {
        v16 = *(_DWORD *)v11;
        *(_BYTE *)(v127 + 4) = *(_BYTE *)(v11 + 4);
        *(_DWORD *)v15 = v16;
        v17 = (std::string *)(v15 + 8);
        if (*(char *)(v11 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(v11 + 8), *(_QWORD *)(v11 + 16));
        }
        else
        {
          v18 = *(_OWORD *)(v11 + 8);
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(v11 + 24);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
        }
        *(_BYTE *)(v15 + 32) = *(_BYTE *)(v11 + 32);
        v24 = v15 + 40;
      }
      v127 = v24;
      v11 += 40;
      if (v11 == v12)
        goto LABEL_45;
    }
    v29 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 71) < 0)
        v108 = *(__int128 **)v108;
      v30 = (_QWORD *)(v11 + 8);
      if (*(char *)(v11 + 31) < 0)
        v30 = (_QWORD *)*v30;
      v31 = *(unsigned __int8 *)(v11 + 32);
      if (v31 <= 3)
        v32 = EnumNamesSSUCategoryType(void)::names[v31];
      else
        v32 = "";
      v33 = a1;
      if (*(char *)(a1 + 23) < 0)
        v33 = *(_QWORD *)a1;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v108;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      v139 = (std::string::size_type)v32;
      LOWORD(v140[0]) = 2080;
      *(_QWORD *)((char *)v140 + 2) = v33;
      _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_ERROR, "Error opening cache file read stream for locale=%s, appBundleId=%s, category=%s, encoderAssetVersion=%s. Skipping entire appCategory.", (uint8_t *)&buf, 0x2Au);
    }
  }
LABEL_45:
  snlp::ssu::matcher::SSURequestHandler::generateAllAppCandidates(&v126, (uint64_t)a3, (uint64_t)&v130, v125);
  snlp::ssu::proto::SSUValidatedRequest::getRequestId(a3, &buf);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 144) + 16))(&v119);
  snlp::ssu::matcher::SSUCandidateEncoder::SSUCandidateEncoder(&v121, (__int128 *)a1, (__int128 *)&buf, (uint64_t)&v119);
  v34 = v120;
  if (v120)
  {
    v35 = (unint64_t *)&v120->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  snlp::ssu::matcher::SSUCandidateEncoder::computeEncodedAppCandidates((snlp::ssu::matcher::SSUCandidateEncoder *)&v121, *(__int128 **)(*(_QWORD *)a3 + 80), v125, (uint64_t *)&v117);
  if (v117 != v118)
  {
    snlp::ssu::matcher::SSURequestHandler::loadGlobalNegatives((snlp::ssu::matcher::SSURequestHandler *)a1, (uint64_t)v115);
    if (v116)
    {
      v37 = (_QWORD *)operator new();
      sirinluinternalssu::SSUResponse::SSUResponse((sirinluinternalssu::SSUResponse *)v37);
      v38 = v117;
      v106 = v118;
      if (v117 != v118)
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        do
        {
          snlp::ssu::cache::SSUCacheFileReadStreamManager::releaseReadStream(&v130, v38, &v114);
          if (!v116)
            std::__throw_bad_optional_access[abi:ne180100]();
          v113 = v114;
          v114 = 0;
          snlp::ssu::matcher::SSURequestHandler::buildParsesForApp(a1, v115, (uint64_t)v38, &v113, (uint64_t)&buf);
          v42 = v113;
          v113 = 0;
          if (v42)
            std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v42);
          v43 = v139;
          v44 = v140[0];
          v109 = v38;
          for (i = v41; v43 != v44; v43 += 256)
          {
            v46 = *(unsigned __int8 *)(v43 + 112);
            v47 = *(unsigned __int8 *)(v43 + 208);
            v48 = *(_DWORD *)v38;
            v49 = v38[32];
            v50 = v141;
            *(void ***)((char *)v135 + 4) = v142;
            BYTE4(v135[1]) = v143;
            v51 = *(float *)(v43 + 216);
            if (v46)
              v52 = 2;
            else
              v52 = 1;
            v53 = v52 | (v47 << 32);
            if ((unint64_t)v40 >= i)
            {
              v55 = ((char *)v40 - v39) >> 6;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 58)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if ((uint64_t)(i - (_QWORD)v39) >> 5 > v56)
                v56 = (uint64_t)(i - (_QWORD)v39) >> 5;
              if (i - (unint64_t)v39 >= 0x7FFFFFFFFFFFFFC0)
                v57 = 0x3FFFFFFFFFFFFFFLL;
              else
                v57 = v56;
              if (v57)
                v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>>(v57);
              else
                v58 = 0;
              v59 = v57 + (v55 << 6);
              *(_DWORD *)v59 = v48;
              *(_BYTE *)(v59 + 4) = v49;
              *(_DWORD *)(v59 + 8) = v50;
              *(void ***)(v59 + 12) = v135[0];
              *(void ***)(v59 + 17) = *(void ***)((char *)v135 + 5);
              *(double *)(v59 + 32) = v51;
              *(_BYTE *)(v59 + 40) = 1;
              *(_QWORD *)(v59 + 48) = v53;
              *(_BYTE *)(v59 + 56) = 1;
              if (v40 == (_DWORD *)v39)
              {
                v64 = (_BYTE *)(v57 + (v55 << 6));
                v38 = v109;
              }
              else
              {
                v60 = v57 + (v55 << 6);
                v38 = v109;
                do
                {
                  v61 = *((_OWORD *)v40 - 4);
                  v62 = *((_OWORD *)v40 - 3);
                  v63 = *((_OWORD *)v40 - 2);
                  v64 = (_BYTE *)(v60 - 64);
                  *(_OWORD *)(v60 - 20) = *(_OWORD *)(v40 - 5);
                  *(_OWORD *)(v60 - 48) = v62;
                  *(_OWORD *)(v60 - 32) = v63;
                  *(_OWORD *)(v60 - 64) = v61;
                  v40 -= 16;
                  v60 -= 64;
                }
                while (v40 != (_DWORD *)v39);
              }
              i = v57 + (v58 << 6);
              v40 = (_DWORD *)(v59 + 64);
              if (v39)
              {
                v65 = v39;
                v66 = i;
                operator delete(v65);
                i = v66;
              }
              v39 = v64;
            }
            else
            {
              *v40 = v48;
              *((_BYTE *)v40 + 4) = v49;
              v40[2] = v50;
              v54 = *(uint64_t *)((char *)v135 + 5);
              *(void ***)(v40 + 3) = v135[0];
              *(_QWORD *)((char *)v40 + 17) = v54;
              *(_DWORD *)((char *)v40 + 25) = *(_DWORD *)v112;
              v40[7] = *(_DWORD *)&v112[3];
              *((double *)v40 + 4) = v51;
              *((_BYTE *)v40 + 40) = 1;
              *(_DWORD *)((char *)v40 + 41) = *(_DWORD *)v111;
              v40[11] = *(_DWORD *)&v111[3];
              *((_QWORD *)v40 + 6) = v53;
              *((_BYTE *)v40 + 56) = 1;
              v40[15] = *(_DWORD *)&v110[3];
              *(_DWORD *)((char *)v40 + 57) = *(_DWORD *)v110;
              v40 += 16;
              v38 = v109;
            }
          }
          v41 = i;
          v67 = v38 + 8;
          v68 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          v69 = SNLPOSLoggerForCategory(8);
          v70 = os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG);
          if ((_QWORD)v68 == *((_QWORD *)&v68 + 1))
          {
            if (v70)
            {
              if (v109[31] < 0)
                v67 = (_QWORD *)*v67;
              LODWORD(v135[0]) = 136315650;
              *(void ***)((char *)v135 + 4) = (void **)"SSU";
              WORD2(v135[1]) = 2080;
              *(void ***)((char *)&v135[1] + 6) = (void **)"[insights-snlp-ssu]: ";
              HIWORD(v135[2]) = 2080;
              v136 = (unint64_t)v67;
              _os_log_impl(&dword_1C2196000, v69, OS_LOG_TYPE_DEBUG, "[%s] %sNo SSU parses for app '%s'", (uint8_t *)v135, 0x20u);
            }
          }
          else
          {
            if (v70)
            {
              if (v109[31] < 0)
                v67 = (_QWORD *)*v67;
              LODWORD(v135[0]) = 136315906;
              *(void ***)((char *)v135 + 4) = (void **)"SSU";
              WORD2(v135[1]) = 2080;
              *(void ***)((char *)&v135[1] + 6) = (void **)"[insights-snlp-ssu]: ";
              HIWORD(v135[2]) = 2048;
              v136 = 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 5);
              LOWORD(v137[0]) = 2080;
              *(_QWORD *)((char *)v137 + 2) = v67;
              _os_log_impl(&dword_1C2196000, v69, OS_LOG_TYPE_DEBUG, "[%s] %sOutputting %lu SSU parses for app '%s'", (uint8_t *)v135, 0x2Au);
            }
            size = buf.__r_.__value_.__l.__size_;
            for (j = buf.__r_.__value_.__r.__words[0]; j != size; j += 96)
            {
              v73 = operator new();
              MEMORY[0x1C3BB8458](v73, j);
              v75 = (uint64_t *)v37[2];
              v74 = v37[3];
              if ((unint64_t)v75 >= v74)
              {
                v77 = v37[1];
                v78 = ((uint64_t)v75 - v77) >> 3;
                if ((unint64_t)(v78 + 1) >> 61)
                  std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                v79 = v74 - v77;
                v80 = v79 >> 2;
                if (v79 >> 2 <= (unint64_t)(v78 + 1))
                  v80 = v78 + 1;
                if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8)
                  v81 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v81 = v80;
                v137[0] = v37 + 3;
                if (v81)
                  v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v81);
                else
                  v82 = 0;
                v83 = v81 + 8 * v78;
                v84 = v81 + 8 * v82;
                v136 = v84;
                *(_QWORD *)v83 = v73;
                v76 = (void **)(v83 + 8);
                v135[2] = (void **)(v83 + 8);
                v86 = (_QWORD *)v37[1];
                v85 = (_QWORD *)v37[2];
                if (v85 == v86)
                {
                  v88 = vdupq_n_s64((unint64_t)v85);
                }
                else
                {
                  do
                  {
                    v87 = *--v85;
                    *v85 = 0;
                    *(_QWORD *)(v83 - 8) = v87;
                    v83 -= 8;
                  }
                  while (v85 != v86);
                  v88 = *(int64x2_t *)(v37 + 1);
                  v76 = v135[2];
                  v84 = v136;
                }
                v37[1] = v83;
                v37[2] = v76;
                *(int64x2_t *)&v135[1] = v88;
                v89 = v37[3];
                v37[3] = v84;
                v136 = v89;
                v135[0] = (void **)v88.i64[0];
                std::__split_buffer<std::unique_ptr<sirinluexternal::UserParse>>::~__split_buffer((uint64_t)v135);
              }
              else
              {
                *v75 = v73;
                v76 = (void **)(v75 + 1);
              }
              v37[2] = v76;
            }
          }
          v135[0] = (void **)&v139;
          std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100](v135);
          v135[0] = (void **)&buf;
          std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](v135);
          if (v114)
            std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v114);
          v38 = v109 + 64;
        }
        while (v109 + 64 != v106);
        *a4 = (uint64_t)v37;
        a4[1] = 0;
        a4[2] = 0;
        a4[3] = 0;
        v90 = (char *)v40 - v39;
        if (v40 != (_DWORD *)v39)
        {
          if (v90 < 0)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>>(v90 >> 6);
          a4[1] = (uint64_t)v91;
          a4[2] = (uint64_t)v91;
          a4[3] = (uint64_t)&v91[64 * v92];
          memmove(v91, v39, v90 - 4);
          a4[2] = (uint64_t)&v91[64 * (v90 >> 6)];
        }
        if (v39)
          operator delete(v39);
        goto LABEL_127;
      }
      v98 = a4;
      *a4 = (uint64_t)v37;
    }
    else
    {
      v95 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1C2196000, v95, OS_LOG_TYPE_ERROR, "Error loading global negatives. Returning empty response.", (uint8_t *)&buf, 2u);
      }
      v96 = (sirinluinternalssu::SSUResponse *)operator new();
      v97 = sirinluinternalssu::SSUResponse::SSUResponse(v96);
      v98 = a4;
      *a4 = v97;
    }
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = 0;
LABEL_127:
    std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v115);
    goto LABEL_128;
  }
  v93 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1C2196000, v93, OS_LOG_TYPE_DEBUG, "No encoded app candidates were computed. Returning empty response.", (uint8_t *)&buf, 2u);
  }
  v94 = (sirinluinternalssu::SSUResponse *)operator new();
  *a4 = sirinluinternalssu::SSUResponse::SSUResponse(v94);
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
LABEL_128:
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v117;
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  v99 = v124;
  if (v124)
  {
    v100 = (unint64_t *)&v124->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v123 < 0)
    operator delete(v122);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v121.__r_.__value_.__l.__data_);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
  std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v126;
  std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::~__hash_table((uint64_t)&v134);
  if (v133 < 0)
    operator delete(v132);
  v102 = v131;
  if (v131)
  {
    v103 = (unint64_t *)&v131->__shared_owners_;
    do
      v104 = __ldaxr(v103);
    while (__stlxr(v104 - 1, v103));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v130.__r_.__value_.__l.__data_);
}

void sub_1C22E5870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  _QWORD *v56;
  uint64_t v57;

  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a28);
  *(_QWORD *)(v57 - 192) = &a35;
  std::vector<snlp::ssu::matcher::SSUCandidateEncoder::EncodedAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  snlp::ssu::matcher::SSUCandidateEncoder::~SSUCandidateEncoder(&a40);
  *(_QWORD *)(v57 - 192) = &a48;
  std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)(v57 - 192));
  *v56 = &a51;
  std::vector<snlp::ssu::app::SSUAppCategory>::__destroy_vector::operator()[abi:ne180100]((void ***)&a40);
  snlp::ssu::cache::SSUCacheFileReadStreamManager::~SSUCacheFileReadStreamManager(&a56);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::generateAllAppCandidates(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  uint64_t Stream;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  uint64_t v29[3];
  void **v30[5];
  _BYTE buf[24];
  uint64_t v32;
  __int128 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v37[3] = *MEMORY[0x1E0C80C00];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v28 = (void **)(a4 + 2);
  v7 = *a1;
  v8 = a1[1];
  if (v8 != *a1)
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 3);
    if (HIBYTE(v9))
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    *(_QWORD *)&v33 = a4 + 2;
    *(_QWORD *)buf = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v9);
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    *(_QWORD *)&buf[16] = *(_QWORD *)buf;
    v32 = *(_QWORD *)buf + (v11 << 8);
    std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(a4, buf);
    std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer((uint64_t)buf);
    v7 = *a1;
    v8 = a1[1];
  }
  for (; v7 != v8; v7 += 40)
  {
    v12 = (_QWORD *)(v7 + 8);
    snlp::ssu::proto::SSUValidatedRequest::getAppEntityMatchingSpanInfos(a2, (const sirinluinternal::MatchingSpan *)(v7 + 8), (uint64_t)v29);
    v13 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = (_QWORD *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v14 = (_QWORD *)*v12;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "SSU";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "[insights-snlp-ssu]: ";
      *(_WORD *)&buf[22] = 2048;
      v32 = 0x2E8BA2E8BA2E8BA3 * ((v29[1] - v29[0]) >> 3);
      LOWORD(v33) = 2080;
      *(_QWORD *)((char *)&v33 + 2) = v14;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "[%s] %sFound %lu relevant appEntity spans for app '%s'", buf, 0x2Au);
    }
    Stream = snlp::ssu::cache::SSUCacheFileReadStreamManager::getReadStream(a3, (char *)v7);
    if (Stream)
    {
      snlp::ssu::candidate::builder::generateAppCandidates(v7, *(_QWORD *)(*(_QWORD *)a2 + 80), v29, (snlp::ssu::cache::SSUCacheObjectIntentList *)(Stream + 704), (uint64_t)buf);
      v17 = a4[1];
      v16 = a4[2];
      if (v17 >= v16)
      {
        v22 = (uint64_t)(v17 - *a4) >> 8;
        if ((unint64_t)(v22 + 1) >> 56)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v23 = v16 - *a4;
        v24 = v23 >> 7;
        if (v23 >> 7 <= (unint64_t)(v22 + 1))
          v24 = v22 + 1;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFF00)
          v25 = 0xFFFFFFFFFFFFFFLL;
        else
          v25 = v24;
        v30[4] = v28;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v25);
        else
          v26 = 0;
        v27 = (void **)(v25 + (v22 << 8));
        v30[0] = (void **)v25;
        v30[1] = v27;
        v30[3] = (void **)(v25 + (v26 << 8));
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>((uint64_t)v27, (int *)buf);
        v30[2] = v27 + 32;
        std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(a4, v30);
        v18 = a4[1];
        std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer((uint64_t)v30);
      }
      else
      {
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(a4[1], (int *)buf);
        v18 = v17 + 256;
        a4[1] = v18;
      }
      a4[1] = v18;
      v30[0] = (void **)v37;
      std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](v30);
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
      if (v34 < 0)
        operator delete(*((void **)&v33 + 1));
      if (SHIBYTE(v32) < 0)
        operator delete(*(void **)&buf[8]);
    }
    else
    {
      v19 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v7 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v20 = *(unsigned __int8 *)(v7 + 32);
        v21 = "";
        if (v20 <= 3)
          v21 = EnumNamesSSUCategoryType(void)::names[v20];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_ERROR, "Logic error: could not get read stream for app=%s, category=%s. Skipping adding candidates.", buf, 0x16u);
      }
    }
    *(_QWORD *)buf = v29;
    std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_1C22E5DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::loadGlobalNegatives(snlp::ssu::matcher::SSURequestHandler *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::string __p;
  __int128 v5;
  uint64_t v6;
  std::__fs::filesystem::path v7;
  _BYTE v8[8];

  v3 = (char *)this + 24;
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)v3, &v7);
  snlp::ssu::app::SSUFileWrapper::SSUFileWrapper((snlp::ssu::app::SSUFileWrapper *)v8, (const std::__fs::filesystem::path *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__pn_.__r_.__value_.__l.__data_);
  *((_BYTE *)&v7.__pn_.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&v7, "global_negatives");
  snlp::ssu::app::SSUFileWrapper::getNegativeExampleEncodedVectors((uint64_t)v8, 0, (uint64_t)&v7, (uint64_t)&__p);
  if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__pn_.__r_.__value_.__l.__data_);
  *(std::string *)a2 = __p;
  *(_OWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 40) = v6;
  *(_BYTE *)(a2 + 48) = 1;
  snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper((snlp::ssu::app::SSUFileWrapper *)v8);
}

void sub_1C22E5ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  snlp::ssu::app::SSUFileWrapper::~SSUFileWrapper((snlp::ssu::app::SSUFileWrapper *)(v23 - 24));
  _Unwind_Resume(a1);
}

void snlp::ssu::matcher::SSURequestHandler::buildParsesForApp(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  char v46;
  _QWORD v47[5];
  __int128 buf;
  uint64_t v49;
  void *v50;
  unint64_t *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  void *__p;
  char v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v10 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v11 = a3 + 8;
    if (*(char *)(a3 + 31) < 0)
      v11 = *(_QWORD *)(a3 + 8);
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = v11;
    _os_log_impl(&dword_1C2196000, v10, OS_LOG_TYPE_DEBUG, "Building parses for app: %s", (uint8_t *)&buf, 0xCu);
  }
  v12 = *a4;
  *a4 = 0;
  v41 = v12;
  snlp::ssu::matcher::SSURequestHandler::buildSortedAppResults(a1, a2, a3, &v41, (uint64_t)&v42);
  v41 = 0;
  if (v12)
    std::default_delete<snlp::ssu::cache::SSUCacheFileReadStream>::operator()[abi:ne180100](v12);
  snlp::ssu::matcher::SSURequestHandler::buildParsesForAppResults(a3, &v42, &v39);
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v13 = v42;
  v14 = v43;
  if (v43 != v42)
  {
    v15 = 0x8E38E38E38E38E39 * ((v43 - v42) >> 5);
    if (HIBYTE(v15))
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v51 = &v38;
    *(_QWORD *)&buf = std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v15);
    *((_QWORD *)&buf + 1) = buf;
    v49 = buf;
    v50 = (void *)(buf + (v16 << 8));
    std::vector<snlp::ssu::similarity::SSUMatchInfo>::__swap_out_circular_buffer(&v36, &buf);
    std::__split_buffer<snlp::ssu::similarity::SSUMatchInfo>::~__split_buffer((uint64_t)&buf);
    v13 = v42;
    v14 = v43;
  }
  for (; v13 != v14; v13 += 288)
  {
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&buf, (const snlp::ssu::similarity::SSUMatchInfo *)(v13 + 24));
    v17 = v37;
    if (v37 >= v38)
    {
      v19 = (uint64_t)(v37 - v36) >> 8;
      if ((unint64_t)(v19 + 1) >> 56)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v20 = (uint64_t)(v38 - v36) >> 7;
      if (v20 <= v19 + 1)
        v20 = v19 + 1;
      if (v38 - v36 >= 0x7FFFFFFFFFFFFF00)
        v21 = 0xFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      v47[4] = &v38;
      if (v21)
        v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v21);
      else
        v22 = 0;
      v23 = v21 + (v19 << 8);
      v47[0] = v21;
      v47[1] = v23;
      v47[3] = v21 + (v22 << 8);
      std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(v23, &buf);
      v47[2] = v23 + 256;
      std::vector<snlp::ssu::similarity::SSUMatchInfo>::__swap_out_circular_buffer(&v36, v47);
      v18 = v37;
      std::__split_buffer<snlp::ssu::similarity::SSUMatchInfo>::~__split_buffer((uint64_t)v47);
    }
    else
    {
      std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(v37, &buf);
      v18 = v17 + 256;
    }
    v37 = v18;
    if (v57 && v56 < 0)
      operator delete(__p);
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v54);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v53);
    if (v52 < 0)
      operator delete(v50);
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  v24 = v39;
  v25 = v40;
  *(_QWORD *)&buf = a5;
  BYTE8(buf) = 0;
  if (v40 != v39)
  {
    v26 = 0xAAAAAAAAAAAAAAABLL * ((v40 - v39) >> 5);
    if (v26 >= 0x2AAAAAAAAAAAAABLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluexternal::UserParse>>(v26);
    *(_QWORD *)a5 = v27;
    *(_QWORD *)(a5 + 8) = v27;
    *(_QWORD *)(a5 + 16) = &v27[96 * v28];
    do
    {
      v24 += 96;
      v29 = MEMORY[0x1C3BB8458]() + 96;
    }
    while (v24 != v25);
    *(_QWORD *)(a5 + 8) = v29;
  }
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  v30 = v36;
  v31 = v37;
  *(_QWORD *)&buf = a5 + 24;
  BYTE8(buf) = 0;
  v32 = v37 - v36;
  if (v37 != v36)
  {
    if (v32 < 0)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(v32 >> 8);
    v34 = 0;
    *(_QWORD *)(a5 + 24) = v33;
    *(_QWORD *)(a5 + 32) = v33;
    *(_QWORD *)(a5 + 40) = &v33[256 * v35];
    do
    {
      snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&v33[v34], (const snlp::ssu::similarity::SSUMatchInfo *)(v30 + v34));
      v34 += 256;
    }
    while (v30 + v34 != v31);
    *(_QWORD *)(a5 + 32) = &v33[v34];
  }
  *(_DWORD *)(a5 + 48) = v44;
  *(_QWORD *)(a5 + 56) = v45;
  *(_BYTE *)(a5 + 64) = v46;
  *(_QWORD *)&buf = &v36;
  std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(_QWORD *)&buf = &v39;
  std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  *(_QWORD *)&buf = &v42;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
}

void sub_1C22E62FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 96;
      v7 = v4 - 96;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void snlp::ssu::matcher::SSURequestHandler::BuildParsesResult::~BuildParsesResult(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<snlp::ssu::similarity::SSUMatchInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this;
  std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<snlp::ssu::candidate::SSUAppCandidates>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 256;
        std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<snlp::ssu::app::SSUAppCategory const,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void snlp::ssu::matcher::SSUCandidateEncoder::~SSUCandidateEncoder(void **this)
{
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void snlp::ssu::cache::SSUCacheFileReadStreamManager::~SSUCacheFileReadStreamManager(void **this)
{
  std::__hash_table<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::__unordered_map_hasher<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,snlp::ssu::app::SSUAppCategoryHash,std::equal_to<snlp::ssu::app::SSUAppCategory>,true>,std::__unordered_map_equal<snlp::ssu::app::SSUAppCategory,std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>,std::equal_to<snlp::ssu::app::SSUAppCategory>,snlp::ssu::app::SSUAppCategoryHash,true>,std::allocator<std::__hash_value_type<snlp::ssu::app::SSUAppCategory,std::unique_ptr<snlp::ssu::cache::SSUCacheFileReadStream>>>>::~__hash_table((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 232);
  std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 136);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void snlp::ssu::matcher::SSURequestHandler::buildSortedAppResults(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t **v7;
  int8x8_t v8;
  uint64_t *v9;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  uint64_t **v15;
  uint64_t *i;
  unint64_t v17;
  NSObject *v18;
  uint64_t **v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  _BOOL8 v30;
  NSObject *v31;
  uint64_t **v32;
  NSObject *v33;
  uint64_t **v35;
  uint8_t v36[8];
  char *v37;
  char *v38;
  char *v39;
  _BYTE v40[48];
  char v41;
  _BYTE buf[12];
  __int16 v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[6];

  v47[4] = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t **)(a3 + 8);
  v8 = *(int8x8_t *)(a1 + 80);
  if (v8)
  {
    v9 = a4;
    v12 = *(char *)(a3 + 32);
    v13 = (uint8x8_t)vcnt_s8(v8);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = *(char *)(a3 + 32);
      if (*(_QWORD *)&v8 <= v12)
        v14 = v12 % *(_QWORD *)&v8;
    }
    else
    {
      v14 = (*(_QWORD *)&v8 - 1) & v12;
    }
    v15 = *(uint64_t ***)(*(_QWORD *)(a1 + 72) + 8 * v14);
    if (v15)
    {
      for (i = *v15; i; i = (uint64_t *)*i)
      {
        v17 = i[1];
        if (v17 == v12)
        {
          if (*((unsigned __int8 *)i + 16) == v12)
          {
            v22 = *a4;
            v38 = 0;
            v39 = 0;
            v37 = 0;
            v23 = *(_QWORD *)(v22 + 704);
            v24 = *(_QWORD *)(v22 + 712);
            *(_QWORD *)buf = &v37;
            buf[8] = 0;
            if (v24 != v23)
            {
              v25 = 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 4);
              v35 = (uint64_t **)(a3 + 8);
              if (v25 >= 0x555555555555556)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::cache::SSUCacheObjectParameter>>(v25);
              v27 = 0;
              v37 = v26;
              v38 = v26;
              v39 = &v26[48 * v28];
              do
              {
                std::allocator<snlp::ssu::cache::SSUCacheObjectIntent>::construct[abi:ne180100]<snlp::ssu::cache::SSUCacheObjectIntent,snlp::ssu::cache::SSUCacheObjectIntent&>((std::string *)&v26[v27], (__int128 *)(v23 + v27));
                v27 += 48;
              }
              while (v23 + v27 != v24);
              v38 = &v26[v27];
              v9 = a4;
              v7 = v35;
            }
            v29 = SNLPOSLoggerForCategory(8);
            v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG);
            if (v30)
              snlp::ssu::matcher::SSURequestHandler::logCacheFileInfo(v30, v7, *v9, (snlp::ssu::cache::SSUCacheObjectIntentList *)&v37);
            snlp::ssu::similarity::SSUSimilaritySearchApp::SSUSimilaritySearchApp((uint64_t)buf, *(_BYTE *)(a3 + 4), (__int128 *)(i + 3), (uint64_t)&v37);
            if (snlp::ssu::matcher::SSURequestHandler::processAllBatches(a1, a2, (snlp::ssu::similarity::SSUSimilaritySearchApp *)buf, (snlp::ssu::cache::SSUCacheFileReadStream *)*v9, (uint64_t)v7, a3))
            {
              snlp::ssu::similarity::SSUSimilaritySearchApp::getSearchResult((snlp::ssu::similarity::SSUSimilaritySearchApp *)buf, (_QWORD *)a5);
              if (*(_QWORD *)a5 != *(_QWORD *)(a5 + 8))
              {
                snlp::ssu::cache::SSUCacheFileReadStream::readDebugInformation((snlp::ssu::cache::SSUCacheFileReadStream *)*v9, (uint64_t)v40);
                if (v41)
                {
                  snlp::ssu::matcher::SSURequestHandler::attachDebugInformation((uint64_t **)a5, v40);
                }
                else
                {
                  v33 = SNLPOSLoggerForCategory(8);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                  {
                    *(_WORD *)v36 = 0;
                    _os_log_impl(&dword_1C2196000, v33, OS_LOG_TYPE_DEBUG, "Debug information not available in cache file. Output parses will not have a plaintext positive example in identifiers.", v36, 2u);
                  }
                }
                std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v40);
              }
            }
            else
            {
              v31 = SNLPOSLoggerForCategory(8);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                if (*(char *)(a3 + 31) >= 0)
                  v32 = v7;
                else
                  v32 = *(uint64_t ***)(a3 + 8);
                *(_DWORD *)v40 = 136315138;
                *(_QWORD *)&v40[4] = v32;
                _os_log_impl(&dword_1C2196000, v31, OS_LOG_TYPE_ERROR, "Error searching similarities for %s. Skipping entire app.", v40, 0xCu);
              }
              *(_BYTE *)(a5 + 32) = 0;
              *(_BYTE *)(a5 + 40) = 0;
              *(_QWORD *)(a5 + 8) = 0;
              *(_QWORD *)(a5 + 16) = 0;
              *(_QWORD *)a5 = 0;
              *(_DWORD *)(a5 + 24) = 0;
            }
            *(_QWORD *)v40 = v47;
            std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
            std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
            *(_QWORD *)v40 = &v45;
            std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
            *(_QWORD *)buf = &v37;
            std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            return;
          }
        }
        else
        {
          if (v13.u32[0] > 1uLL)
          {
            if (v17 >= *(_QWORD *)&v8)
              v17 %= *(_QWORD *)&v8;
          }
          else
          {
            v17 &= *(_QWORD *)&v8 - 1;
          }
          if (v17 != v14)
            break;
        }
      }
    }
  }
  v18 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a3 + 31) >= 0)
      v19 = v7;
    else
      v19 = *(uint64_t ***)(a3 + 8);
    v20 = *(unsigned __int8 *)(a3 + 32);
    if (v20 <= 3)
      v21 = EnumNamesSSUCategoryType(void)::names[v20];
    else
      v21 = "";
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v19;
    v43 = 2080;
    v44 = v21;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_ERROR, "Could not find similarity search configuration for app %s and category %s. Skipping entire app.", buf, 0x16u);
  }
  *(_BYTE *)(a5 + 32) = 0;
  *(_BYTE *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *(_DWORD *)(a5 + 24) = 0;
}

void sub_1C22E6B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,__int128 buf)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;

  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a15);
  a15 = v23;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  snlp::ssu::similarity::SSUSimilaritySearchApp::~SSUSimilaritySearchApp((snlp::ssu::similarity::SSUSimilaritySearchApp *)&buf);
  *(_QWORD *)&buf = &a12;
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (a2 == 1)
  {
    v28 = __cxa_begin_catch(a1);
    v29 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v24 + 31) >= 0)
        v30 = v25;
      else
        v30 = *(_QWORD *)(v24 + 8);
      v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
      LODWORD(buf) = 136315394;
      *(_QWORD *)((char *)&buf + 4) = v30;
      WORD6(buf) = 2080;
      *(_QWORD *)((char *)&buf + 14) = v31;
      _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_ERROR, "Error reading cache file for %s: %s. Skipping entire app.", (uint8_t *)&buf, 0x16u);
    }
    *(_BYTE *)(v23 + 32) = 0;
    *(_BYTE *)(v23 + 40) = 0;
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)v23 = 0;
    *(_DWORD *)(v23 + 24) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1C22E68B8);
  }
  _Unwind_Resume(a1);
}

uint64_t snlp::ssu::matcher::SSURequestHandler::buildParsesForAppResults@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X8>)
{
  siri::ontology *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  siri::ontology *v32;
  siri::ontology *v33;
  uint64_t v34;
  void **p_data;
  void **v36;
  void **v37;
  void **v38;
  uint64_t *v39;

  snlp::ssu::parse::SSUGraphBuilder::graphBuilderForAppCategory(a1, &v33);
  v5 = v33;
  v32 = v33;
  v33 = 0;
  v6 = *a2;
  v7 = a2[1];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v7 != v6)
  {
    v8 = 0x8E38E38E38E38E39 * ((v7 - v6) >> 5);
    if (v8 > 0x2AAAAAAAAAAAAAALL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v39 = a3 + 2;
    p_data = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluexternal::UserParse>>(v8);
    v36 = p_data;
    v37 = p_data;
    v38 = &p_data[12 * v9];
    std::vector<sirinluexternal::UserParse>::__swap_out_circular_buffer(a3, &p_data);
    std::__split_buffer<sirinluexternal::UserParse>::~__split_buffer((uint64_t)&p_data);
    v6 = *a2;
    v7 = a2[1];
  }
  if (v6 != v7)
  {
    do
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      if (*(_BYTE *)(v6 + 232))
      {
        v39 = &v31;
        v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluinternal::MatchingSpan>>(1uLL);
        v11 = v10;
        p_data = (void **)&v10->__r_.__value_.__l.__data_;
        v36 = (void **)&v10->__r_.__value_.__l.__data_;
        v37 = (void **)&v10->__r_.__value_.__l.__data_;
        v38 = (void **)(&v10->__r_.__value_.__l.__data_ + 11 * v12);
        if (*(char *)(v6 + 167) < 0)
        {
          std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(v6 + 144), *(_QWORD *)(v6 + 152));
        }
        else
        {
          v13 = *(_OWORD *)(v6 + 144);
          v10->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 160);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        v14 = *(_OWORD *)(v6 + 168);
        v11[1].__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v11[1].__r_.__value_.__l.__data_ = v14;
        v11[2].__r_.__value_.__r.__words[0] = 0;
        v11[2].__r_.__value_.__l.__size_ = 0;
        std::vector<siri::ontology::UsoIdentifier>::__init_with_size[abi:ne180100]<siri::ontology::UsoIdentifier*,siri::ontology::UsoIdentifier*>((std::string *)((char *)v11 + 40), *(_QWORD *)(v6 + 184), *(_QWORD *)(v6 + 192), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v6 + 192) - *(_QWORD *)(v6 + 184)) >> 3));
        v15 = (std::string *)((char *)v11 + 64);
        if (*(char *)(v6 + 231) < 0)
        {
          std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(v6 + 208), *(_QWORD *)(v6 + 216));
        }
        else
        {
          v16 = *(_OWORD *)(v6 + 208);
          v11[3].__r_.__value_.__l.__size_ = *(_QWORD *)(v6 + 224);
          *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        }
        v37 += 11;
        std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__swap_out_circular_buffer(&v29, &p_data);
        v17 = v30;
        std::__split_buffer<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::~__split_buffer((uint64_t)&p_data);
        v30 = v17;
      }
      snlp::ssu::parse::SSUParseBuilder::buildParse(&v32, v6, v6 + 48, &v29, v6 + 248, &v34, *(float *)(v6 + 280));
      v18 = v34;
      v19 = a3[1];
      v20 = a3[2];
      if (v19 >= v20)
      {
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a3) >> 5);
        v23 = v22 + 1;
        if (v22 + 1 > 0x2AAAAAAAAAAAAAALL)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a3) >> 5);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0x155555555555555)
          v25 = 0x2AAAAAAAAAAAAAALL;
        else
          v25 = v23;
        v39 = a3 + 2;
        if (v25)
          v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluexternal::UserParse>>(v25);
        else
          v26 = 0;
        v27 = (void **)(v25 + 96 * v22);
        p_data = (void **)v25;
        v36 = v27;
        v38 = (void **)(v25 + 96 * v26);
        MEMORY[0x1C3BB844C](v27, v18);
        v37 = v27 + 12;
        std::vector<sirinluexternal::UserParse>::__swap_out_circular_buffer(a3, &p_data);
        v21 = a3[1];
        std::__split_buffer<sirinluexternal::UserParse>::~__split_buffer((uint64_t)&p_data);
        v18 = v34;
      }
      else
      {
        v21 = MEMORY[0x1C3BB844C]() + 96;
        a3[1] = v21;
      }
      a3[1] = v21;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      p_data = (void **)&v29;
      std::vector<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo>::__destroy_vector::operator()[abi:ne180100](&p_data);
      v6 += 288;
    }
    while (v6 != v7);
    v5 = v32;
  }
  if (v5)
    (*(void (**)(siri::ontology *))(*(_QWORD *)v5 + 8))(v5);
  result = (uint64_t)v33;
  if (v33)
    return (*(uint64_t (**)(siri::ontology *))(*(_QWORD *)v33 + 8))(v33);
  return result;
}

void sub_1C22E6FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  std::vector<sirinluexternal::UserParse>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(a1);
}

snlp::ssu::similarity::SSUMatchInfo *snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo(snlp::ssu::similarity::SSUMatchInfo *this, const snlp::ssu::similarity::SSUMatchInfo *a2)
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)a2;
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)this = v4;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)((char *)this + 24) = v5;
  }
  std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 2, (__int128 *)a2 + 3);
  std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100]((std::string *)this + 5, (uint64_t)a2 + 120);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 54);
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100]((std::string *)((char *)this + 224), (__int128 *)a2 + 14);
  return this;
}

void sub_1C22E710C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](v4);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v3);
  if (*(char *)(v2 + 47) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUMatchInfo::~SSUMatchInfo(void **this)
{
  if (*((_BYTE *)this + 248) && *((char *)this + 247) < 0)
    operator delete(this[28]);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 15));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 288;
        std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 272) && *(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUMatchInfo>>(unint64_t a1)
{
  if (HIBYTE(a1))
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a1 << 8);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<sirinluexternal::UserParse>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a1);
}

__n128 std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  result = *(__n128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(__n128 *)(a1 + 24) = result;
  *((_QWORD *)a2 + 4) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v6 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 72, (uint64_t *)a2 + 9);
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  if (*((_BYTE *)a2 + 208))
  {
    v7 = *(__int128 *)((char *)a2 + 120);
    *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(a1 + 120) = v7;
    *((_QWORD *)a2 + 16) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *((_QWORD *)a2 + 15) = 0;
    *(_OWORD *)(a1 + 144) = a2[9];
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
    *((_QWORD *)a2 + 20) = 0;
    *((_QWORD *)a2 + 21) = 0;
    *((_QWORD *)a2 + 22) = 0;
    result = *(__n128 *)((char *)a2 + 184);
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
    *(__n128 *)(a1 + 184) = result;
    *((_QWORD *)a2 + 24) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *(_BYTE *)(a1 + 208) = 1;
  }
  result.n128_u32[0] = *((_DWORD *)a2 + 54);
  *(_BYTE *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 216) = result.n128_u32[0];
  *(_BYTE *)(a1 + 248) = 0;
  if (*((_BYTE *)a2 + 248))
  {
    result = (__n128)a2[14];
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
    *(__n128 *)(a1 + 224) = result;
    *((_QWORD *)a2 + 29) = 0;
    *((_QWORD *)a2 + 30) = 0;
    *((_QWORD *)a2 + 28) = 0;
    *(_BYTE *)(a1 + 248) = 1;
  }
  return result;
}

void std::vector<snlp::ssu::similarity::SSUMatchInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 256;
    v4 -= 16;
    std::allocator<snlp::ssu::similarity::SSUMatchInfo>::construct[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,snlp::ssu::similarity::SSUMatchInfo>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<snlp::ssu::similarity::SSUMatchInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 256;
    std::allocator<snlp::ssu::similarity::SSUMatchInfo>::destroy[abi:ne180100](i - 256);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<sirinluexternal::UserParse>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    result = MEMORY[0x1C3BB844C](result - 96, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<sirinluexternal::UserParse>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 96);
    *(_QWORD *)(a1 + 16) = i - 96;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t snlp::ssu::matcher::SSURequestHandler::logCacheFileInfo(uint64_t a1, uint64_t **a2, uint64_t a3, snlp::ssu::cache::SSUCacheObjectIntentList *a4)
{
  unint64_t i;
  std::string *p_buf;
  char *v8;
  std::string::size_type *p_size;
  std::string *v10;
  std::string::size_type size;
  _QWORD *v12;
  NSObject *v13;
  int v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  void **v21;
  uint64_t v22;
  std::string v25;
  void *__p;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  _QWORD v30[11];
  char v31;
  uint64_t v32;
  std::string buf;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  void **v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v29);
  for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 4); ++i)
  {
    snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(a4, i, &buf);
    std::string::basic_string[abi:ne180100]<0>(&__p, "<error: missing intent>");
    if (BYTE4(v38))
      p_buf = &buf;
    else
      p_buf = (std::string *)&__p;
    v8 = &v28;
    if (BYTE4(v38))
      v8 = (char *)&buf.__r_.__value_.__r.__words[2] + 7;
    if (*v8 < 0)
    {
      if (BYTE4(v38))
        p_size = &buf.__r_.__value_.__l.__size_;
      else
        p_size = (std::string::size_type *)&v27;
      std::string::__init_copy_ctor_external(&v25, p_buf->__r_.__value_.__l.__data_, *p_size);
    }
    else
    {
      v25 = *p_buf;
    }
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v25;
    else
      v10 = (std::string *)v25.__r_.__value_.__r.__words[0];
    if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
    else
      size = v25.__r_.__value_.__l.__size_;
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v10, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", ", 2);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(__p);
    std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf);
  }
  v13 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    v14 = *((char *)a2 + 23);
    v15 = (uint64_t **)*a2;
    v17 = *(_QWORD *)a4;
    v16 = *((_QWORD *)a4 + 1);
    v18 = *(_QWORD *)(a3 + 744);
    v19 = *(_QWORD *)(a3 + 736);
    std::stringbuf::str();
    v20 = (std::string::size_type)(v14 >= 0 ? a2 : v15);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    v21 = v28 >= 0 ? &__p : (void **)__p;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v20;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                               * ((v16 - v17) >> 4);
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    v34 = v18;
    v35 = 2048;
    v36 = v19;
    v37 = 2080;
    v38 = v21;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "App %s has numUniqueIntents=%lu, numPositiveBatches=%lu, numNegativeBatches=%lu, intent names: %s", (uint8_t *)&buf, 0x34u);
    if (v28 < 0)
      operator delete(__p);
  }
  v29[0] = *MEMORY[0x1E0DE4F50];
  v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v29 + *(_QWORD *)(v29[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v30[0] = v22;
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C3BB9A90](&v32);
}

void sub_1C22E78AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processAllBatches(uint64_t a1, _QWORD *a2, snlp::ssu::similarity::SSUSimilaritySearchApp *a3, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t a5, uint64_t a6)
{
  char v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!snlp::ssu::matcher::SSURequestHandler::processCacheFileBatches(a1, a3, this, a5, a6))
  {
    v13 = SNLPOSLoggerForCategory(8);
    result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    if (*(char *)(a5 + 23) >= 0)
      v16 = a5;
    else
      v16 = *(_QWORD *)a5;
    v19 = 136315138;
    v20 = v16;
    v17 = "Error processing cache file batches for app %s.";
LABEL_19:
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0xCu);
    return 0;
  }
  v11 = snlp::ssu::matcher::SSURequestHandler::processGlobalNegatives(a1, (uint64_t)a3, a2, (uint64_t *)a5, a6);
  v12 = SNLPOSLoggerForCategory(8);
  v13 = v12;
  if ((v11 & 1) == 0)
  {
    result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    if (*(char *)(a5 + 23) >= 0)
      v18 = a5;
    else
      v18 = *(_QWORD *)a5;
    v19 = 136315138;
    v20 = v18;
    v17 = "Error processing global negatives for app %s.";
    goto LABEL_19;
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a5 + 23) >= 0)
      v14 = a5;
    else
      v14 = *(_QWORD *)a5;
    v19 = 136315138;
    v20 = v14;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "Successfully processed cache file batches and global negatives for app %s.", (uint8_t *)&v19, 0xCu);
  }
  return 1;
}

void snlp::ssu::matcher::SSURequestHandler::attachDebugInformation(uint64_t **a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  NSObject *v13;
  unint64_t v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  uint32_t v18;
  NSObject *v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t *v23;
  unint64_t v24;
  uint8_t buf[4];
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  uint64_t *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v5 = v2[4];
      if (v5 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3))
      {
        v13 = SNLPOSLoggerForCategory(8);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v14 = (unint64_t)v2;
          if (*((char *)v2 + 23) < 0)
            v14 = *v2;
          v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3);
          *(_DWORD *)buf = 134218498;
          v26 = v5;
          v27 = 2048;
          v28 = v15;
          v29 = 2080;
          v30 = v14;
          v16 = v13;
          v17 = "App result batch provenance has batchIndex=%lu, but this is greater than indexes.size()=%lu. Skipping at"
                "taching debug information for intent %s.";
          v18 = 32;
          goto LABEL_22;
        }
      }
      else
      {
        v6 = v2[5];
        v7 = (_QWORD *)(*a2 + 24 * v5);
        if (v6 >= (uint64_t)(v7[1] - *v7) >> 3)
        {
          v19 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            v20 = (unint64_t)v2;
            if (*((char *)v2 + 23) < 0)
              v20 = *v2;
            v21 = (uint64_t)(v7[1] - *v7) >> 3;
            *(_DWORD *)buf = 134218754;
            v26 = v6;
            v27 = 2048;
            v28 = v5;
            v29 = 2048;
            v30 = v21;
            v31 = 2080;
            v32 = v20;
            v16 = v19;
            v17 = "App result batch provenance has encodingIndexWithinBatch=%lu for batchIndex=%lu, but this is greater t"
                  "han indexesForBatch.size()=%lu. Skipping attaching debug information for intent %s.";
            v18 = 42;
            goto LABEL_22;
          }
        }
        else
        {
          v8 = *(_QWORD *)(*v7 + 8 * v6);
          v9 = a2[3];
          if (v8 < 0xAAAAAAAAAAAAAAABLL * ((a2[4] - v9) >> 3))
          {
            v10 = v9 + 24 * v8;
            v11 = SNLPOSLoggerForCategory(8);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              v12 = v10;
              if (*(char *)(v10 + 23) < 0)
                v12 = *(_QWORD *)v10;
              *(_DWORD *)buf = 136315138;
              v26 = v12;
              _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Attaching plaintext example to match info: %s", buf, 0xCu);
            }
            std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>((std::string *)(v2 + 31), (const std::string *)v10);
            goto LABEL_23;
          }
          v22 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            v23 = v2;
            if (*((char *)v2 + 23) < 0)
              v23 = (uint64_t *)*v2;
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[4] - a2[3]) >> 3);
            *(_DWORD *)buf = 134219010;
            v26 = v5;
            v27 = 2048;
            v28 = v6;
            v29 = 2048;
            v30 = v8;
            v31 = 2048;
            v32 = v24;
            v33 = 2080;
            v34 = v23;
            v16 = v22;
            v17 = "App result batch provenance has batchIndex=%lu, encodingIndexWithinBatch=%lu and exampleIndex=%lu, but"
                  " this is greater than  debugInformation.plaintextPositiveExamples.examples.size()=%lu. Skipping attach"
                  "ing debug information for intent %s.";
            v18 = 52;
LABEL_22:
            _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_ERROR, v17, buf, v18);
          }
        }
      }
LABEL_23:
      v2 += 36;
    }
    while (v2 != v3);
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectDebugInformation,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 48))
  {
    v3 = (void **)(a1 + 24);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v3 = (void **)a1;
    std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  return a1;
}

void std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](v4 - 264);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 256))
  {
    if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
      operator delete(*(void **)(a1 + 224));
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 48);
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::~SSUSimilaritySearchApp(snlp::ssu::similarity::SSUSimilaritySearchApp *this)
{
  void **v2;

  v2 = (void **)((char *)this + 336);
  std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 72);
  v2 = (void **)((char *)this + 48);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&v2);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processCacheFileBatches(int a1, snlp::ssu::similarity::SSUSimilaritySearchApp *a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  NSObject *v12;
  _BOOL8 result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v10 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  do
  {
    if (v10 >= *((_QWORD *)this + 92))
    {
      v15 = 0;
      do
      {
        if (v15 >= *((_QWORD *)this + 93))
          return 1;
      }
      while (snlp::ssu::matcher::SSURequestHandler::processPositiveBatch(a1, a2, this, (uint64_t *)a4, v15++, a5));
      v12 = SNLPOSLoggerForCategory(8);
      result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
      if (!result)
        return result;
      if (*(char *)(a4 + 23) >= 0)
        v17 = a4;
      else
        v17 = *(_QWORD *)a4;
      v18 = 136315138;
      v19 = v17;
      goto LABEL_17;
    }
  }
  while (snlp::ssu::matcher::SSURequestHandler::processNegativeBatch(a1, (uint64_t)a2, this, (uint64_t *)a4, v10++, a5));
  v12 = SNLPOSLoggerForCategory(8);
  result = os_log_type_enabled(v12, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  if (*(char *)(a4 + 23) >= 0)
    v14 = a4;
  else
    v14 = *(_QWORD *)a4;
  v18 = 136315138;
  v19 = v14;
LABEL_17:
  _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_ERROR, "Error processing batch for %s. Skipping entire app.", (uint8_t *)&v18, 0xCu);
  return 0;
}

uint64_t snlp::ssu::matcher::SSURequestHandler::processGlobalNegatives(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  int v10;
  NSObject *v11;
  uint64_t v12;
  _BOOL8 v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t *v16;
  void *__p;
  void *v19;
  uint64_t v20;
  uint8_t v21[4];
  uint64_t *v22;
  _BYTE buf[12];
  char v24;
  unsigned __int8 v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a3[1] - *a3 != 16)
  {
    v11 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = (uint64_t)(a3[1] - *a3) >> 3;
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v12;
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_ERROR, "Unexpected global negatives tensor rank: %lu", buf, 0xCu);
    }
    return 0;
  }
  if (!*(_QWORD *)*a3)
  {
    v14 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "Skipping global negative processing since there are no global negative examples", buf, 2u);
    }
    return 1;
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  v6 = *(_QWORD *)(a5 + 40);
  v7 = *(_QWORD *)(a5 + 48);
  if (v6 == v7)
    return 1;
  while (1)
  {
    snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)a3, v6 + 192, buf);
    v10 = v25;
    if (v25)
      break;
    snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(a2, &xmmword_1C230B590, (uint64_t *)&__p, v6);
    if (!v10)
    {
      v6 += 240;
      if (v6 != v7)
        continue;
    }
    goto LABEL_22;
  }
  v15 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (*((char *)a4 + 23) >= 0)
      v16 = a4;
    else
      v16 = (uint64_t *)*a4;
    *(_DWORD *)v21 = 136315138;
    v22 = v16;
    _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_ERROR, "Error computing global negatives similarity for app %s.", v21, 0xCu);
  }
  if (v10 && v24 < 0)
    operator delete(*(void **)buf);
LABEL_22:
  v13 = v10 == 0;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v13;
}

void sub_1C22E82E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processNegativeBatch(int a1, uint64_t a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t *v14;
  _BOOL8 v15;
  NSObject *v16;
  uint64_t *v17;
  void *__p;
  void *v20;
  uint64_t v21;
  uint8_t v22[56];
  __int128 v23;
  _BYTE buf[12];
  char v25;
  unsigned __int8 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchNegative(this, (uint64_t)v22);
  if (v22[48])
  {
    __p = 0;
    v20 = 0;
    v21 = 0;
    v10 = *(_QWORD *)(a6 + 40);
    v11 = *(_QWORD *)(a6 + 48);
    if (v10 == v11)
    {
      v15 = 1;
    }
    else
    {
      while (1)
      {
        snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)v22, v10 + 192, buf);
        v12 = v26;
        if (v26)
          break;
        *(_QWORD *)&v23 = 0;
        *((_QWORD *)&v23 + 1) = a5;
        snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(a2, &v23, (uint64_t *)&__p, v10);
        if (!v12)
        {
          v10 += 240;
          if (v10 != v11)
            continue;
        }
        goto LABEL_22;
      }
      v16 = SNLPOSLoggerForCategory(8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a4 + 23) >= 0)
          v17 = a4;
        else
          v17 = (uint64_t *)*a4;
        LODWORD(v23) = 136315138;
        *(_QWORD *)((char *)&v23 + 4) = v17;
        _os_log_impl(&dword_1C2196000, v16, OS_LOG_TYPE_ERROR, "Error computing similarity for app %s.", (uint8_t *)&v23, 0xCu);
      }
      if (v12 && v25 < 0)
        operator delete(*(void **)buf);
LABEL_22:
      v15 = v12 == 0;
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
    }
  }
  else
  {
    v13 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v14 = a4;
      else
        v14 = (uint64_t *)*a4;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "Error reading negative batch for app %s.", buf, 0xCu);
    }
    v15 = 0;
  }
  std::__optional_destruct_base<snlp::common::tensor::InferenceTensor,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v22);
  return v15;
}

void sub_1C22E84E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  _Unwind_Resume(exception_object);
}

BOOL snlp::ssu::matcher::SSURequestHandler::processPositiveBatch(int a1, snlp::ssu::similarity::SSUSimilaritySearchApp *a2, snlp::ssu::cache::SSUCacheFileReadStream *this, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  snlp::ssu::candidate::SSUCandidate *v10;
  snlp::ssu::candidate::SSUCandidate *v11;
  int v12;
  NSObject *v13;
  uint64_t *v14;
  _BYTE *v15;
  _BOOL8 v16;
  NSObject *v17;
  uint64_t *v18;
  void *__p;
  void *v21;
  uint64_t v22;
  uint8_t v23[80];
  _BYTE buf[22];
  _BYTE v25[12];
  char v26;
  unsigned __int8 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  snlp::ssu::cache::SSUCacheFileReadStream::readNextBatchPositive(this, (uint64_t)v23);
  if (v23[72])
  {
    __p = 0;
    v21 = 0;
    v22 = 0;
    v10 = *(snlp::ssu::candidate::SSUCandidate **)(a6 + 40);
    v11 = *(snlp::ssu::candidate::SSUCandidate **)(a6 + 48);
    if (v10 == v11)
    {
      v16 = 1;
    }
    else
    {
      do
      {
        snlp::ssu::similarity::SSUSimilarityScore::computeSimilarity((float **)&__p, (uint64_t)v23, (uint64_t)v10 + 192, v25);
        v12 = v27;
        if (v27)
        {
          v13 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            if (!v27)
              std::__throw_bad_optional_access[abi:ne180100]();
            if (*((char *)a4 + 23) >= 0)
              v14 = a4;
            else
              v14 = (uint64_t *)*a4;
            v15 = v25;
            if (v26 < 0)
              v15 = *(_BYTE **)v25;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v14;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v15;
            _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_ERROR, "Error computing similarity for app %s: %s", buf, 0x16u);
          }
        }
        else
        {
          *(_QWORD *)buf = 0;
          *(_QWORD *)&buf[8] = a5;
          snlp::ssu::similarity::SSUSimilaritySearchApp::processPositiveBatch(a2, (__int128 *)buf, (uint64_t)v23, (uint64_t *)&__p, v10);
        }
        if (v27 && v26 < 0)
          operator delete(*(void **)v25);
        if (v12)
          break;
        v10 = (snlp::ssu::candidate::SSUCandidate *)((char *)v10 + 240);
      }
      while (v10 != v11);
      v16 = v12 == 0;
      if (__p)
      {
        v21 = __p;
        operator delete(__p);
      }
    }
  }
  else
  {
    v17 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0)
        v18 = a4;
      else
        v18 = (uint64_t *)*a4;
      *(_DWORD *)v25 = 136315138;
      *(_QWORD *)&v25[4] = v18;
      _os_log_impl(&dword_1C2196000, v17, OS_LOG_TYPE_ERROR, "Error reading positive batch for app %s.", v25, 0xCu);
    }
    v16 = 0;
  }
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v23);
  return v16;
}

void sub_1C22E8748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectEncodingsBatchPositive,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v2 = *(void **)(a1 + 48);
    if (v2)
    {
      *(_QWORD *)(a1 + 56) = v2;
      operator delete(v2);
    }
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      *(_QWORD *)(a1 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)(a1 + 8) = v4;
      operator delete(v4);
    }
  }
  return a1;
}

void snlp::ssu::candidate::SSUAppCandidates::~SSUAppCandidates(void **this)
{
  void **v2;

  v2 = this + 29;
  std::vector<snlp::ssu::candidate::SSUCandidate>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 17));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 8));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

__n128 std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(uint64_t a1, int *a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  v5 = *(_OWORD *)(a2 + 2);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 8) = v5;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v6 = *(_OWORD *)(a2 + 10);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 40) = v6;
  *((_QWORD *)a2 + 6) = 0;
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 5) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  if (*((_BYTE *)a2 + 128))
  {
    v7 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 88, (uint64_t *)a2 + 11);
    *(_BYTE *)(a1 + 128) = 1;
  }
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*((_BYTE *)a2 + 224))
  {
    v8 = *(_OWORD *)(a2 + 34);
    *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
    *(_OWORD *)(a1 + 136) = v8;
    *((_QWORD *)a2 + 18) = 0;
    *((_QWORD *)a2 + 19) = 0;
    *((_QWORD *)a2 + 17) = 0;
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    *((_QWORD *)a2 + 22) = 0;
    *((_QWORD *)a2 + 23) = 0;
    *((_QWORD *)a2 + 24) = 0;
    v9 = *(_OWORD *)(a2 + 50);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)(a1 + 200) = v9;
    *((_QWORD *)a2 + 26) = 0;
    *((_QWORD *)a2 + 27) = 0;
    *((_QWORD *)a2 + 25) = 0;
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  result = *(__n128 *)(a2 + 58);
  *(__n128 *)(a1 + 232) = result;
  *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 29) = 0;
  *((_QWORD *)a2 + 30) = 0;
  *((_QWORD *)a2 + 31) = 0;
  return result;
}

void std::vector<snlp::ssu::candidate::SSUAppCandidates>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (int *)*a1;
  v4 = (int *)a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 256;
    v4 -= 64;
    std::allocator<snlp::ssu::candidate::SSUAppCandidates>::construct[abi:ne180100]<snlp::ssu::candidate::SSUAppCandidates,snlp::ssu::candidate::SSUAppCandidates>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t std::__split_buffer<snlp::ssu::candidate::SSUAppCandidates>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 256;
    std::allocator<snlp::ssu::candidate::SSUAppCandidates>::destroy[abi:ne180100](i - 256);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

nlv4_inference_orchestrator::trees::TreeDecompressor *nlv4_inference_orchestrator::trees::TreeDecompressor::decompress(nlv4_inference_orchestrator::trees::TreeDecompressor *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v2;
  nlv4_inference_orchestrator::trees::TreeDecompressor *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  _OWORD *v8;
  uint64_t v9;
  const nlv4_inference_orchestrator::trees::TreeNode *v10;
  __int128 v11;
  _OWORD *v12;
  char *v13;
  std::string v14;
  __int128 v15;
  uint64_t v16;
  __int128 __p;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  void **v24;

  v2 = *((_QWORD *)a2 + 11);
  v13 = (char *)a2 + 88;
  if (*((_QWORD *)a2 + 12) != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = (char *)a2 + 24;
    v7 = (char *)a2 + 48;
    v12 = (_OWORD *)((char *)a2 + 72);
    v8 = (_OWORD *)((char *)a2 + 112);
    v9 = 48;
    do
    {
      v10 = (const nlv4_inference_orchestrator::trees::TreeNode *)(v2 + v9 - 48);
      if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v4, (unsigned __int8 *)(v2 + v9)))
      {
        nlv4_inference_orchestrator::trees::TreeDecompressor::decompressNode(v4, a2, v10, &v14);
        if (*((char *)a2 + 23) < 0)
          operator delete(*(void **)a2);
        *(std::string *)a2 = v14;
        *((_BYTE *)&v14.__r_.__value_.__s + 23) = 0;
        v14.__r_.__value_.__s.__data_[0] = 0;
        if (*((char *)a2 + 47) < 0)
          operator delete(*(void **)v6);
        *(_OWORD *)v6 = v15;
        *((_QWORD *)v6 + 2) = v16;
        HIBYTE(v16) = 0;
        LOBYTE(v15) = 0;
        if (*((char *)a2 + 71) < 0)
          operator delete(*(void **)v7);
        *(_OWORD *)v7 = __p;
        *((_QWORD *)v7 + 2) = v18;
        HIBYTE(v18) = 0;
        LOBYTE(__p) = 0;
        *v12 = v19;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__vdeallocate((uint64_t)v13);
        *(_OWORD *)((char *)a2 + 88) = v20;
        *((_QWORD *)a2 + 13) = v21;
        v21 = 0;
        v20 = 0uLL;
        v11 = v23;
        *v8 = v22;
        v8[1] = v11;
        v24 = (void **)&v20;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v24);
        if (SHIBYTE(v18) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v16) < 0)
          operator delete((void *)v15);
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v14.__r_.__value_.__l.__data_);
      }
      this = (nlv4_inference_orchestrator::trees::TreeDecompressor *)nlv4_inference_orchestrator::trees::TreeDecompressor::decompress(v4, v10);
      ++v5;
      v2 = *((_QWORD *)a2 + 11);
      v9 += 144;
    }
    while (v5 < 0x8E38E38E38E38E39 * ((*((_QWORD *)a2 + 12) - v2) >> 4));
  }
  return this;
}

void nlv4_inference_orchestrator::trees::TreeDecompressor::decompressNode(nlv4_inference_orchestrator::trees::TreeDecompressor *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, const nlv4_inference_orchestrator::trees::TreeNode *a3@<X2>, std::string *a4@<X8>)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  __int128 *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string::pointer data;
  uint64_t *v14;
  __int128 v15;
  __int128 *v16;
  __int128 v17;
  char v18;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  std::string *v30;
  std::string::pointer v31;
  std::string::size_type v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  __int128 v39;
  std::string::size_type v40;
  std::string::pointer v41;
  std::string::pointer v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  std::string::size_type v49;
  std::string::pointer v50;
  std::string::pointer v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  std::string *v58;
  __int128 v59;
  std::string::size_type v60;
  std::string::pointer v61;
  std::string::pointer v62;
  std::string::size_type v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  std::string::pointer v70;
  char v71;
  uint64_t v72;
  const nlv4_inference_orchestrator::trees::TreeNode *v73;
  char v74;
  uint64_t v75;
  unsigned __int8 *v76;
  char v77;
  uint64_t v78;
  unsigned __int8 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  nlv4_inference_orchestrator::trees::TreeDecompressor *v90;
  unsigned __int8 *v91;
  const nlv4_inference_orchestrator::trees::TreeNode *v92;
  std::string *v93;
  uint64_t v94;
  uint64_t v95;
  std::string *v96;
  __int128 *v97;
  uint64_t v98;
  std::string *v99;
  uint64_t v100;
  std::string *v101;
  std::string __str;
  std::string v103;
  std::string v104;
  __int128 v105;
  std::string *v106[7];
  std::string v107;
  std::string v108;
  std::string __p;
  __int128 v110;
  _QWORD v111[7];
  char v112;
  std::string v113;
  std::string v114;
  __int128 *v115;
  __int128 *v116;
  uint64_t v117;
  std::string **v118;
  std::string v119;
  unint64_t v120;
  std::string::size_type *p_size;

  v8 = (unsigned __int8 *)a3 + 48;
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, (unsigned __int8 *)a3 + 48))
  {
    v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(this, v8);
    if (!v9)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v90 = this;
    v91 = v8;
    v92 = a3;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    std::vector<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*,nlv4_inference_orchestrator::trees::TreeDecompressor::DecompressionEntry*>(&v115, *((_QWORD *)v9 + 5), *((_QWORD *)v9 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v9 + 6) - *((_QWORD *)v9 + 5)) >> 4));
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a4, a2);
    v10 = v115;
    v93 = a4;
    v11 = a4;
    v97 = v116;
    if (v115 == v116)
      goto LABEL_128;
    v11 = a4;
    do
    {
      v12 = v11[3].__r_.__value_.__r.__words[2];
      data = v11[4].__r_.__value_.__l.__data_;
      v14 = (uint64_t *)&v11[3].__r_.__value_.__r.__words[2];
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v15 = *v10;
        v113.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v15;
      }
      v16 = (__int128 *)((char *)v10 + 24);
      if (*((char *)v10 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&v114, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
      }
      else
      {
        v17 = *v16;
        v114.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 5);
        *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v17;
      }
      v18 = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      if ((std::string::pointer)v12 == data)
      {
        v29 = 0;
        if ((*((_BYTE *)&v114.__r_.__value_.__s + 23) & 0x80) != 0)
          goto LABEL_50;
        goto LABEL_51;
      }
      v99 = v11;
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v114.__r_.__value_.__r.__words[2]);
      else
        size = v114.__r_.__value_.__l.__size_;
      if ((v114.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &v114;
      else
        v20 = (std::string *)v114.__r_.__value_.__r.__words[0];
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = HIBYTE(v113.__r_.__value_.__r.__words[2]);
      else
        v21 = v113.__r_.__value_.__l.__size_;
      if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v113;
      else
        v22 = (std::string *)v113.__r_.__value_.__r.__words[0];
      while (1)
      {
        v23 = *(unsigned __int8 *)(v12 + 23);
        if ((v23 & 0x80u) == 0)
          v24 = *(unsigned __int8 *)(v12 + 23);
        else
          v24 = *(_QWORD *)(v12 + 8);
        if (v24 != size)
          goto LABEL_46;
        if ((v23 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v12, v20, *(_QWORD *)(v12 + 8)))
            goto LABEL_46;
        }
        else if (*(_BYTE *)(v12 + 23))
        {
          v25 = 0;
          while (*(unsigned __int8 *)(v12 + v25) == v20->__r_.__value_.__s.__data_[v25])
          {
            if (v23 == ++v25)
              goto LABEL_35;
          }
          goto LABEL_46;
        }
LABEL_35:
        v26 = *(unsigned __int8 *)(v12 + 71);
        if ((v26 & 0x80u) == 0)
          v27 = *(unsigned __int8 *)(v12 + 71);
        else
          v27 = *(_QWORD *)(v12 + 56);
        if (v27 != v21)
          goto LABEL_46;
        if ((v26 & 0x80) != 0)
          break;
        if (!*(_BYTE *)(v12 + 71))
          goto LABEL_48;
        v28 = 0;
        while (*(unsigned __int8 *)(v12 + v28 + 48) == v22->__r_.__value_.__s.__data_[v28])
        {
          if (v26 == ++v28)
            goto LABEL_48;
        }
LABEL_46:
        v12 += 144;
        if ((std::string::pointer)v12 == data)
        {
          v29 = 0;
          goto LABEL_49;
        }
      }
      if (memcmp(*(const void **)(v12 + 48), v22, *(_QWORD *)(v12 + 56)))
        goto LABEL_46;
LABEL_48:
      v29 = 1;
LABEL_49:
      v11 = v99;
      if (v18 < 0)
LABEL_50:
        operator delete(v114.__r_.__value_.__l.__data_);
LABEL_51:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v113.__r_.__value_.__l.__data_);
        if ((v29 & 1) == 0)
          goto LABEL_77;
LABEL_53:
        v107.__r_.__value_.__s.__data_[0] = 0;
        v112 = 0;
        v30 = v11;
        v32 = v11[3].__r_.__value_.__r.__words[2];
        v31 = v11[4].__r_.__value_.__l.__data_;
        v33 = *((_BYTE *)v10 + 47);
        if ((std::string::pointer)v32 != v31)
        {
          if (v33 >= 0)
            v34 = *((unsigned __int8 *)v10 + 47);
          else
            v34 = *((_QWORD *)v10 + 4);
          do
          {
            v35 = *(unsigned __int8 *)(v32 + 23);
            if ((v35 & 0x80u) == 0)
              v36 = *(unsigned __int8 *)(v32 + 23);
            else
              v36 = *(_QWORD *)(v32 + 8);
            if (v36 == v34)
            {
              if (v33 >= 0)
                v37 = (unsigned __int8 *)v10 + 24;
              else
                v37 = *(unsigned __int8 **)v16;
              if ((v35 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v32, v37, *(_QWORD *)(v32 + 8)))
                {
LABEL_79:
                  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v107, (const nlv4_inference_orchestrator::trees::TreeNode *)v32);
                  v112 = 1;
                  goto LABEL_126;
                }
              }
              else
              {
                if (!*(_BYTE *)(v32 + 23))
                  goto LABEL_79;
                v38 = 0;
                while (*(unsigned __int8 *)(v32 + v38) == v37[v38])
                {
                  if (v35 == ++v38)
                    goto LABEL_79;
                }
              }
            }
            v32 += 144;
          }
          while ((std::string::pointer)v32 != v31);
        }
        if (v33 < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
        }
        else
        {
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v16;
          __str.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 5);
        }
        memset(&v103, 0, sizeof(v103));
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v48 = *v10;
          v104.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v48;
        }
        v105 = 0u;
        memset(v106, 0, sizeof(v106));
        v49 = v30[4].__r_.__value_.__l.__size_;
        v50 = v30[4].__r_.__value_.__l.__data_;
        if ((unint64_t)v50 >= v49)
        {
          v52 = 0x8E38E38E38E38E39 * ((uint64_t)&v50[-*v14] >> 4);
          v53 = v52 + 1;
          if (v52 + 1 > 0x1C71C71C71C71C7)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - *v14) >> 4);
          if (2 * v54 > v53)
            v53 = 2 * v54;
          if (v54 >= 0xE38E38E38E38E3)
            v55 = 0x1C71C71C71C71C7;
          else
            v55 = v53;
          p_size = &v30[4].__r_.__value_.__l.__size_;
          if (v55)
            v55 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v55);
          else
            v56 = 0;
          v119.__r_.__value_.__r.__words[0] = v55;
          v119.__r_.__value_.__l.__size_ = v55 + 144 * v52;
          v119.__r_.__value_.__r.__words[2] = v119.__r_.__value_.__l.__size_;
          v120 = v55 + 144 * v56;
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v119.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&__str);
          v119.__r_.__value_.__r.__words[2] += 144;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v14, &v119);
          v51 = v30[4].__r_.__value_.__l.__data_;
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&v119);
        }
        else
        {
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v30[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&__str);
          v51 = v50 + 144;
          v30[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 144);
        }
        v30[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v51;
        v119.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v32 = (std::string::size_type)(v51 - 144);
LABEL_126:
        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v107);
        v11 = (std::string *)v32;
      }
      else
      {
        if ((v29 & 1) != 0)
          goto LABEL_53;
LABEL_77:
        if (*((char *)v10 + 47) < 0)
        {
          std::string::__init_copy_ctor_external(&v107, *((const std::string::value_type **)v10 + 3), *((_QWORD *)v10 + 4));
        }
        else
        {
          *(_OWORD *)&v107.__r_.__value_.__l.__data_ = *v16;
          v107.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 5);
        }
        memset(&v108, 0, sizeof(v108));
        if (*((char *)v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v39 = *v10;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
        }
        v110 = 0u;
        memset(v111, 0, sizeof(v111));
        v40 = v11[4].__r_.__value_.__l.__size_;
        v41 = v11[4].__r_.__value_.__l.__data_;
        if ((unint64_t)v41 >= v40)
        {
          v43 = 0x8E38E38E38E38E39 * ((uint64_t)&v41[-*v14] >> 4);
          v44 = v43 + 1;
          if (v43 + 1 > 0x1C71C71C71C71C7)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v45 = 0x8E38E38E38E38E39 * ((uint64_t)(v40 - *v14) >> 4);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0xE38E38E38E38E3)
            v46 = 0x1C71C71C71C71C7;
          else
            v46 = v44;
          v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[4].__r_.__value_.__l.__size_;
          if (v46)
            v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v46);
          else
            v47 = 0;
          __str.__r_.__value_.__r.__words[0] = v46;
          __str.__r_.__value_.__l.__size_ = v46 + 144 * v43;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          v103.__r_.__value_.__r.__words[0] = v46 + 144 * v47;
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)__str.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer(v14, &__str);
          v42 = v11[4].__r_.__value_.__l.__data_;
          std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v11[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
          v42 = v41 + 144;
          v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v41 + 144);
        }
        v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
        v11 = (std::string *)(v42 - 144);
      }
      v10 += 3;
    }
    while (v10 != v97);
LABEL_128:
    v57 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v90, v91);
    if (!v57)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v58 = v93;
    if ((char)v57[87] < 0)
      std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v57 + 8), *((_QWORD *)v57 + 9));
    else
      v119 = *(std::string *)(v57 + 64);
    memset(&v107, 0, sizeof(v107));
    if (*((char *)v92 + 47) < 0)
      std::string::__init_copy_ctor_external(&v108, *((const std::string::value_type **)v92 + 3), *((_QWORD *)v92 + 4));
    else
      v108 = *(std::string *)((_BYTE *)v92 + 1);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v119.__r_.__value_.__l.__data_, v119.__r_.__value_.__l.__size_);
    else
      __p = v119;
    v110 = *(_OWORD *)((char *)v92 + 72);
    memset(v111, 0, 24);
    v59 = *((_OWORD *)v92 + 8);
    *(_OWORD *)&v111[3] = *((_OWORD *)v92 + 7);
    *(_OWORD *)&v111[5] = v59;
    v60 = v11[4].__r_.__value_.__l.__size_;
    v61 = v11[4].__r_.__value_.__l.__data_;
    if ((unint64_t)v61 >= v60)
    {
      v63 = v11[3].__r_.__value_.__r.__words[2];
      v64 = 0x8E38E38E38E38E39 * ((uint64_t)&v61[-v63] >> 4);
      if (v64 + 1 > 0x1C71C71C71C71C7)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v65 = 0x8E38E38E38E38E39 * ((uint64_t)(v60 - v63) >> 4);
      v66 = 2 * v65;
      if (2 * v65 <= v64 + 1)
        v66 = v64 + 1;
      if (v65 >= 0xE38E38E38E38E3)
        v67 = 0x1C71C71C71C71C7;
      else
        v67 = v66;
      v103.__r_.__value_.__l.__size_ = (std::string::size_type)&v11[4].__r_.__value_.__l.__size_;
      if (v67)
        v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v67);
      else
        v68 = 0;
      __str.__r_.__value_.__r.__words[0] = v67;
      __str.__r_.__value_.__l.__size_ = v67 + 144 * v64;
      __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
      v103.__r_.__value_.__r.__words[0] = v67 + 144 * v68;
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)__str.__r_.__value_.__l.__size_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
      __str.__r_.__value_.__r.__words[2] += 144;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)&v11[3].__r_.__value_.__r.__words[2], &__str);
      v62 = v11[4].__r_.__value_.__l.__data_;
      std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)&__str);
      v58 = v93;
    }
    else
    {
      nlv4_inference_orchestrator::trees::TreeNode::TreeNode((std::string *)v11[4].__r_.__value_.__l.__data_, (const nlv4_inference_orchestrator::trees::TreeNode *)&v107);
      v62 = v61 + 144;
      v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)(v61 + 144);
    }
    v11[4].__r_.__value_.__r.__words[0] = (std::string::size_type)v62;
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&__str, (const nlv4_inference_orchestrator::trees::TreeNode *)(v58[4].__r_.__value_.__r.__words[0] - 144));
    v70 = (std::string::pointer)v58[3].__r_.__value_.__r.__words[2];
    v69 = v58[4].__r_.__value_.__l.__data_;
    if (v70 != v69)
    {
      v71 = *((_BYTE *)v92 + 23);
      if (v71 >= 0)
        v72 = *((unsigned __int8 *)v92 + 23);
      else
        v72 = *((_QWORD *)v92 + 1);
      if (v71 >= 0)
        v73 = v92;
      else
        v73 = *(const nlv4_inference_orchestrator::trees::TreeNode **)v92;
      v74 = *((_BYTE *)v92 + 47);
      if (v74 >= 0)
        v75 = *((unsigned __int8 *)v92 + 47);
      else
        v75 = *((_QWORD *)v92 + 4);
      if (v74 >= 0)
        v76 = (unsigned __int8 *)v92 + 24;
      else
        v76 = (unsigned __int8 *)*((_QWORD *)v92 + 3);
      v77 = *((_BYTE *)v92 + 71);
      if (v77 >= 0)
        v78 = *((unsigned __int8 *)v92 + 71);
      else
        v78 = *((_QWORD *)v92 + 7);
      if (v77 >= 0)
        v79 = v91;
      else
        v79 = (unsigned __int8 *)*((_QWORD *)v92 + 6);
      v100 = *((_QWORD *)v92 + 10);
      v101 = (std::string *)*((_QWORD *)v92 + 9);
      v96 = (std::string *)*((_QWORD *)v92 + 15);
      v98 = *((_QWORD *)v92 + 14);
      v94 = *((_QWORD *)v92 + 17);
      v95 = *((_QWORD *)v92 + 16);
      while (1)
      {
        v80 = v70[23];
        if ((v80 & 0x80u) == 0)
          v81 = v70[23];
        else
          v81 = *((_QWORD *)v70 + 1);
        if (v81 != v72)
          goto LABEL_210;
        if ((v80 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v70, v73, *((_QWORD *)v70 + 1)))
            goto LABEL_210;
        }
        else if (v70[23])
        {
          v82 = 0;
          while (v70[v82] == *((_BYTE *)v73 + v82))
          {
            if (v80 == ++v82)
              goto LABEL_182;
          }
          goto LABEL_210;
        }
LABEL_182:
        v83 = v70[47];
        if ((v83 & 0x80u) == 0)
          v84 = v70[47];
        else
          v84 = *((_QWORD *)v70 + 4);
        if (v84 != v75)
          goto LABEL_210;
        if ((v83 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v70 + 3), v76, *((_QWORD *)v70 + 4)))
            goto LABEL_210;
        }
        else if (v70[47])
        {
          v85 = 0;
          while (v70[v85 + 24] == v76[v85])
          {
            if (v83 == ++v85)
              goto LABEL_193;
          }
          goto LABEL_210;
        }
LABEL_193:
        v86 = v70[71];
        if ((v86 & 0x80u) == 0)
          v87 = v70[71];
        else
          v87 = *((_QWORD *)v70 + 7);
        if (v87 != v78)
          goto LABEL_210;
        if ((v86 & 0x80) != 0)
        {
          if (memcmp(*((const void **)v70 + 6), v79, *((_QWORD *)v70 + 7)))
            goto LABEL_210;
        }
        else if (v70[71])
        {
          v88 = 0;
          while (v70[v88 + 48] == v79[v88])
          {
            if (v86 == ++v88)
              goto LABEL_204;
          }
          goto LABEL_210;
        }
LABEL_204:
        if (*((std::string **)v70 + 9) == v101
          && *((_QWORD *)v70 + 10) == v100
          && *((_QWORD *)v70 + 14) == v98
          && *((std::string **)v70 + 15) == v96
          && *((_QWORD *)v70 + 16) == v95
          && *((_QWORD *)v70 + 17) == v94)
        {
          std::string::operator=((std::string *)v70, &__str);
          std::string::operator=((std::string *)v70 + 1, &v103);
          std::string::operator=((std::string *)v70 + 2, &v104);
          *(_OWORD *)(v70 + 72) = v105;
          if (v70 != (std::string::pointer)&__str)
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode*,nlv4_inference_orchestrator::trees::TreeNode*>((uint64_t)(v70 + 88), v106[0], (__int128 *)v106[1], 0x8E38E38E38E38E39 * (((char *)v106[1] - (char *)v106[0]) >> 4));
          v89 = *(_OWORD *)&v106[5];
          *((_OWORD *)v70 + 7) = *(_OWORD *)&v106[3];
          *((_OWORD *)v70 + 8) = v89;
          v58 = v93;
          v70 = v93[4].__r_.__value_.__l.__data_;
          break;
        }
LABEL_210:
        v70 += 144;
        if (v70 == v69)
        {
          v70 = v69;
          v58 = v93;
          break;
        }
      }
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)&v58[3].__r_.__value_.__r.__words[2], (void **)v70 - 18);
    v118 = v106;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v108.__r_.__value_.__l.__data_);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v107.__r_.__value_.__l.__data_);
    if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v119.__r_.__value_.__l.__data_);
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  }
  else
  {
    nlv4_inference_orchestrator::trees::TreeNode::TreeNode(a4, a2);
  }
}

void sub_1C22E98AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  uint64_t v60;

  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a25);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a49);
  if (*(char *)(v60 - 105) < 0)
    operator delete(*(void **)(v60 - 128));
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(a13);
  a49 = (void *)(v60 - 160);
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

_QWORD *nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::PersonNameSplitHack(_QWORD *a1, _OWORD **a2, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **a3)
{
  _QWORD *v6;

  v6 = std::string::basic_string[abi:ne180100]<0>(a1, "TreeManipulation_PersonNameSplit");
  v6[4] = 0;
  v6[3] = "person_name_split";
  v6[5] = 0;
  v6[6] = 0;
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__init_with_size[abi:ne180100]<nlv4_inference_orchestrator::orchestration::IndexedToken*,nlv4_inference_orchestrator::orchestration::IndexedToken*>(v6 + 4, *a2, a2[1], 0x8E38E38E38E38E39 * (a2[1] - *a2));
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getPersonMatchingSpans((uint64_t)a1, a3, a1 + 7);
  return a1;
}

void sub_1C22E9AC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::vector<nlv4_inference_orchestrator::orchestration::IndexedToken>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getPersonMatchingSpans(uint64_t a1@<X0>, nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **a2@<X1>, uint64_t *a3@<X8>)
{
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *v5;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v5 = *a2;
  v6 = a2[1];
  while (v5 != v6)
  {
    if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isPersonMatchingSpan(v5, (const sirinluinternal::MatchingSpan *)a2))std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100](a3, (uint64_t)v5);
    v5 = (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *)((char *)v5 + 88);
  }
  v7 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a1 + 24);
    v9 = 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3);
    v10 = 136315394;
    v11 = v8;
    v12 = 2048;
    v13 = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] After filtering, we have %lu person matching spans", (uint8_t *)&v10, 0x16u);
  }
}

void sub_1C22E9C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::getDescription(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

BOOL nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::splitPersonNames(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this, nlv4_inference_orchestrator::trees::TreeNode *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::utils *v7;
  const nlv4_inference_orchestrator::trees::TreeNode *v8;
  _BOOL4 isCommonPersonNode;
  nlv4_inference_orchestrator::trees::TreeNode *v10;
  nlv4_inference_orchestrator::trees::TreeNode *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  const nlv4_inference_orchestrator::trees::TreeNode **v19;
  nlv4_inference_orchestrator::trees::TreeNode *v20;
  nlv4_inference_orchestrator::trees::TreeNode *v21;
  NSObject *v22;
  _BOOL8 result;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  BOOL v27;
  nlv4_inference_orchestrator::trees::TreeNode *v28;
  uint8_t buf[32];
  __int128 v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v30 = 0u;
  memset(buf, 0, sizeof(buf));
  v28 = a2;
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
  v4 = *((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v5 = 0;
    do
    {
      v6 = v4 - 1;
      v7 = *(nlv4_inference_orchestrator::post_processing::tree_manipulations::utils **)(*(_QWORD *)(*(_QWORD *)&buf[8] + (((unint64_t)(v30 + v6) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                                       + 8 * ((v30 + v6) & 0x1FF));
      *((_QWORD *)&v30 + 1) = v6;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
      isCommonPersonNode = nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(v7, v8);
      v11 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v7 + 11);
      v10 = (nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)v7 + 12);
      while (v11 != v10)
      {
        v28 = v11;
        std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
        v11 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v11 + 144);
      }
      v5 += isCommonPersonNode;
      v4 = *((_QWORD *)&v30 + 1);
    }
    while (*((_QWORD *)&v30 + 1));
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
    if (v5 > 1)
    {
      v12 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = *((_QWORD *)this + 3);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v13;
        _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] Splitting common_Person nodes in-place", buf, 0xCu);
      }
      v14 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = *((_QWORD *)this + 3);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] Iterating through all tree nodes", buf, 0xCu);
      }
      v30 = 0u;
      memset(buf, 0, sizeof(buf));
      v28 = a2;
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
      v16 = *((_QWORD *)&v30 + 1);
      if (*((_QWORD *)&v30 + 1))
      {
        LOBYTE(v17) = 0;
        do
        {
          v18 = v16 - 1;
          v19 = *(const nlv4_inference_orchestrator::trees::TreeNode ***)(*(_QWORD *)(*(_QWORD *)&buf[8]
                                                                                    + (((unint64_t)(v30 + v18) >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                        + 8 * ((v30 + v18) & 0x1FF));
          *((_QWORD *)&v30 + 1) = v18;
          std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::__maybe_remove_back_spare[abi:ne180100](buf);
          v27 = 0;
          nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleTreeNode(this, v19, &v27);
          v17 = v17 || v27;
          v21 = v19[11];
          v20 = v19[12];
          while (v21 != v20)
          {
            v28 = v21;
            std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::push_back(buf, &v28);
            v21 = (nlv4_inference_orchestrator::trees::TreeNode *)((char *)v21 + 144);
          }
          v16 = *((_QWORD *)&v30 + 1);
        }
        while (*((_QWORD *)&v30 + 1));
      }
      else
      {
        v17 = 0;
      }
      std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
      v25 = SNLPOSLoggerForCategory(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = *((_QWORD *)this + 3);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v26;
        _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_DEBUG, "[%s] Finished iterating through all tree nodes", buf, 0xCu);
      }
      return v17;
    }
  }
  else
  {
    std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)buf);
    v5 = 0;
  }
  v22 = SNLPOSLoggerForCategory(1);
  result = os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG);
  if (result)
  {
    v24 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v24;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 2;
    _os_log_impl(&dword_1C2196000, v22, OS_LOG_TYPE_DEBUG, "[%s] Since the model itself predicted only %lu common_Person nodes (lower than the threshold of %lu), do not apply the name split hack", buf, 0x20u);
    return 0;
  }
  return result;
}

void sub_1C22E9F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::deque<std::reference_wrapper<nlv4_inference_orchestrator::trees::TreeNode>>::~deque[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleTreeNode(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this, const nlv4_inference_orchestrator::trees::TreeNode **a2, BOOL *a3)
{
  BOOL *v3;
  nlv4_inference_orchestrator::trees::TreeNode *v4;
  uint64_t v5;
  uint64_t *v6;
  const nlv4_inference_orchestrator::trees::TreeNode *v7;
  const nlv4_inference_orchestrator::trees::TreeNode **v9;
  const nlv4_inference_orchestrator::trees::TreeNode **v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  const nlv4_inference_orchestrator::trees::TreeNode **v21;
  const nlv4_inference_orchestrator::trees::TreeNode **v22;
  const nlv4_inference_orchestrator::trees::TreeNode *v23;
  NSObject *v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  void **v28;
  NSObject *v29;
  uint64_t v30;
  const nlv4_inference_orchestrator::trees::TreeNode *v32;
  const nlv4_inference_orchestrator::trees::TreeNode *v33;
  uint64_t v34;
  _BYTE buf[12];
  _BYTE v36[22];
  uint64_t v37;

  v3 = a3;
  v4 = (nlv4_inference_orchestrator::trees::TreeNode *)a2;
  v37 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 3);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v7 = a2[11];
  v6 = (uint64_t *)(a2 + 11);
  if (v7 == a2[12])
  {
    v9 = 0;
    v25 = 0;
  }
  else
  {
    v30 = v5;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if (nlv4_inference_orchestrator::post_processing::tree_manipulations::utils::isCommonPersonNode(v7, (const nlv4_inference_orchestrator::trees::TreeNode *)a2))
      {
        nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleCommonPersonSubtree(this, v7, v36);
        v12 = *(_QWORD *)v36;
        v13 = *(_QWORD *)&v36[8];
        v14 = SNLPOSLoggerForCategory(1);
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG);
        if (v12 == v13)
        {
          if (v15)
          {
            v17 = *((_QWORD *)this + 3);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v17;
            _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] Could not split this common_Person node", buf, 0xCu);
          }
          *(_QWORD *)buf = v36;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        else
        {
          if (v15)
          {
            v16 = *((_QWORD *)this + 3);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v16;
            _os_log_impl(&dword_1C2196000, v14, OS_LOG_TYPE_DEBUG, "[%s] Successfully spawned replacement common_Person nodes", buf, 0xCu);
          }
          std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(*(const nlv4_inference_orchestrator::trees::TreeNode **)v36, *(const nlv4_inference_orchestrator::trees::TreeNode **)&v36[8], (uint64_t *)&v32);
          *(_QWORD *)buf = v36;
          std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if ((unint64_t)v10 >= v11)
          {
            v18 = v10 - v9;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if ((uint64_t)(v11 - (_QWORD)v9) >> 2 > v19)
              v19 = (uint64_t)(v11 - (_QWORD)v9) >> 2;
            if (v11 - (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
              v20 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v20 = v19;
            if (v20)
              v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char> *>>(v20);
            else
              a2 = 0;
            v21 = (const nlv4_inference_orchestrator::trees::TreeNode **)(v20 + 8 * v18);
            *v21 = v7;
            v22 = v21 + 1;
            while (v10 != v9)
            {
              v23 = *--v10;
              *--v21 = v23;
            }
            v11 = v20 + 8 * (_QWORD)a2;
            if (v9)
              operator delete(v9);
            v9 = v21;
            v10 = v22;
          }
          else
          {
            *v10++ = v7;
          }
        }
      }
      v7 = (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)v7 + 144);
    }
    while (v7 != *((const nlv4_inference_orchestrator::trees::TreeNode **)v4 + 12));
    if (v9 == v10)
    {
      v25 = 0;
      v5 = v30;
      v3 = a3;
    }
    else
    {
      v24 = SNLPOSLoggerForCategory(1);
      v5 = v30;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v36 = 136315394;
        *(_QWORD *)&v36[4] = v30;
        *(_WORD *)&v36[12] = 2048;
        *(_QWORD *)&v36[14] = v10 - v9;
        _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "[%s] Deleting %lu nodes", v36, 0x16u);
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::reverse_iterator<std::__wrap_iter<std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*> *>>,false>(v10, (unint64_t *)v10, (uint64_t)v9, (unint64_t *)v9, 126 - 2 * __clz(v10 - v9), 1);
      v26 = (uint64_t *)v9;
      do
      {
        v27 = *v26++;
        v28 = (void **)std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *,nlv4_inference_orchestrator::trees::TreeNode *>((__int128 *)(v27 + 144), *((__int128 **)v4 + 12), v27);
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__base_destruct_at_end[abi:ne180100]((uint64_t)v6, v28);
      }
      while (v26 != (uint64_t *)v10);
      v25 = 1;
      v3 = a3;
    }
  }
  if (v32 != v33)
  {
    v29 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v36 = 136315394;
      *(_QWORD *)&v36[4] = v5;
      *(_WORD *)&v36[12] = 2048;
      *(_QWORD *)&v36[14] = 0x8E38E38E38E38E39 * ((v33 - v32) >> 4);
      _os_log_impl(&dword_1C2196000, v29, OS_LOG_TYPE_DEBUG, "[%s] Inserting %lu spawned nodes", v36, 0x16u);
    }
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::reserve(v6, 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v4 + 12) - *((_QWORD *)v4 + 11)) >> 4)- 0x71C71C71C71C71C7 * ((v33 - v32) >> 4));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::__wrap_iter<nlv4_inference_orchestrator::trees::TreeNode const*>,std::back_insert_iterator<std::vector<nlv4_inference_orchestrator::trees::TreeNode>>,0>(v32, v33, v6);
    v25 = 1;
  }
  *(_QWORD *)v36 = &v32;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  if (v9)
    operator delete(v9);
  *v3 = v25;
}

void sub_1C22EA3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  void *v17;

  a17 = (void **)&a14;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (v17)
    operator delete(v17);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::handleCommonPersonSubtree(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, const nlv4_inference_orchestrator::trees::TreeNode *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  NSObject *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const void **v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  NSObject *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int v33;
  NSObject *v34;
  _BYTE *v35;
  uint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _BOOL4 v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const nlv4_inference_orchestrator::trees::TreeNode *v54;
  uint64_t v55;
  std::string::size_type v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  unint64_t v65;
  const char *v66;
  NSObject *v67;
  uint64_t v68;
  __int128 v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _BYTE buf[12];
  __int16 v75;
  uint64_t v76;
  char v77;
  char v78;
  _BYTE v79[24];
  unint64_t v80;
  unint64_t *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v7 = SNLPOSLoggerForCategory(1);
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG);
  if (v8)
  {
    v9 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v9;
    _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_DEBUG, "[%s] Handling common_Person subtree", buf, 0xCu);
  }
  v10 = *((_QWORD *)a2 + 11);
  if (*((_QWORD *)a2 + 12) - v10 != 144)
  {
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v22;
LABEL_23:
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
    }
LABEL_24:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return;
  }
  v11 = siri::ontology::oname::graph::ontology_init::Argument_name((siri::ontology::oname::graph::ontology_init *)v8);
  v12 = *(unsigned __int8 *)(v10 + 71);
  if ((v12 & 0x80u) == 0)
    v13 = *(unsigned __int8 *)(v10 + 71);
  else
    v13 = *(_QWORD *)(v10 + 56);
  v14 = *(unsigned __int8 *)(v11 + 31);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v11 + 16);
  if (v13 != v14)
  {
LABEL_21:
    v21 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v24 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v24;
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  v16 = (const void **)(v10 + 48);
  v19 = *(unsigned __int8 **)(v11 + 8);
  v17 = (unsigned __int8 *)(v11 + 8);
  v18 = v19;
  if (v15 >= 0)
    v20 = v17;
  else
    v20 = v18;
  if ((v12 & 0x80) != 0)
  {
    if (memcmp(*v16, v20, *(_QWORD *)(v10 + 56)))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(v10 + 71))
  {
    while (*(unsigned __int8 *)v16 == *v20)
    {
      v16 = (const void **)((char *)v16 + 1);
      ++v20;
      if (!--v12)
        goto LABEL_26;
    }
    goto LABEL_21;
  }
LABEL_26:
  v25 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    v26 = *((_QWORD *)this + 3);
    v27 = (_QWORD *)(v10 + 24);
    if (*(char *)(v10 + 47) < 0)
      v27 = (_QWORD *)*v27;
    *(_DWORD *)buf = 136315395;
    *(_QWORD *)&buf[4] = v26;
    v75 = 2085;
    v76 = (uint64_t)v27;
    _os_log_impl(&dword_1C2196000, v25, OS_LOG_TYPE_DEBUG, "[%s] common_Person.name value: %{sensitive}s", buf, 0x16u);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, *((char **)this + 3));
  v28 = *((_QWORD *)this + 4);
  v29 = *((_QWORD *)this + 5) - v28;
  if (!v29)
  {
LABEL_34:
    v33 = 1;
    v34 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = buf;
      if (v77 < 0)
        v35 = *(_BYTE **)buf;
      v36 = *(_QWORD *)(v10 + 72);
      *(_DWORD *)v79 = 136315394;
      *(_QWORD *)&v79[4] = v35;
      *(_WORD *)&v79[12] = 2048;
      *(_QWORD *)&v79[14] = v36;
      v37 = "[%s] Warning: could not find start token index corresponding to node.startCharIndex=%lu";
LABEL_46:
      _os_log_impl(&dword_1C2196000, v34, OS_LOG_TYPE_DEFAULT, v37, v79, 0x16u);
    }
LABEL_47:
    v30 = 0;
    goto LABEL_48;
  }
  v30 = 0;
  v31 = v29 >> 4;
  v32 = (uint64_t *)(v28 + 104);
  while (*(v32 - 1) != *(_QWORD *)(v10 + 72))
  {
    ++v30;
    v32 += 18;
    if (v30 >= 0x8E38E38E38E38E39 * v31)
      goto LABEL_34;
  }
  v38 = 0x8E38E38E38E38E39 * v31;
  if (v30 >= v38)
  {
LABEL_42:
    v33 = 1;
    v34 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v40 = buf;
      if (v77 < 0)
        v40 = *(_BYTE **)buf;
      v41 = *(_QWORD *)(v10 + 80);
      *(_DWORD *)v79 = 136315394;
      *(_QWORD *)&v79[4] = v40;
      *(_WORD *)&v79[12] = 2048;
      *(_QWORD *)&v79[14] = v41;
      v37 = "[%s] Warning: could not find end token index corresponding to node.endCharIndex=%lu";
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  v3 = v30;
  while (1)
  {
    v39 = *v32;
    v32 += 18;
    ++v3;
    if (v39 == *(_QWORD *)(v10 + 80))
      break;
    if (v38 == v3)
      goto LABEL_42;
  }
  v33 = 0;
LABEL_48:
  if (v77 < 0)
    operator delete(*(void **)buf);
  if (v33)
    goto LABEL_24;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findPersonMatchingSpansMinimalPartition(this, v30, v3, (uint64_t)&v71);
  if (v73)
  {
    v42 = v72 - v71;
    v43 = SNLPOSLoggerForCategory(1);
    v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG);
    if (v42 != 88)
    {
      if (v44)
      {
        if (!v73)
          std::__throw_bad_optional_access[abi:ne180100]();
        v50 = *((_QWORD *)this + 3);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v50;
        v75 = 2048;
        v76 = 0x2E8BA2E8BA2E8BA3 * ((v72 - v71) >> 3);
        _os_log_impl(&dword_1C2196000, v43, OS_LOG_TYPE_DEBUG, "[%s] This common_Person has been partitioned into %lu sub-spans.", buf, 0x16u);
      }
      v69 = 0uLL;
      v70 = 0;
      if (!v73)
        std::__throw_bad_optional_access[abi:ne180100]();
      v51 = v71;
      v52 = v72;
      if (v71 == v72)
      {
        v65 = 0;
        v64 = 0uLL;
LABEL_90:
        *(_OWORD *)a3 = v64;
        a3[2] = v65;
        v70 = 0;
        v69 = 0uLL;
      }
      else
      {
        while (1)
        {
          v53 = *((char *)a2 + 71);
          v54 = v53 >= 0
              ? (const nlv4_inference_orchestrator::trees::TreeNode *)((char *)a2 + 48)
              : (const nlv4_inference_orchestrator::trees::TreeNode *)*((_QWORD *)a2 + 6);
          v55 = v53 >= 0 ? *((unsigned __int8 *)a2 + 71) : *((_QWORD *)a2 + 7);
          if (*(char *)(v10 + 47) < 0)
          {
            v57 = *(_QWORD *)(v10 + 24);
            v56 = *(_QWORD *)(v10 + 32);
          }
          else
          {
            v56 = *(unsigned __int8 *)(v10 + 47);
            v57 = v10 + 24;
          }
          nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::generateCommonPersonNode(this, v51, (uint64_t)v54, v55, v57, v56, *(_QWORD *)(v10 + 72), (uint64_t)buf);
          if (!v78)
            break;
          v58 = *((_QWORD *)&v69 + 1);
          if (*((_QWORD *)&v69 + 1) >= v70)
          {
            v60 = 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v69 + 1) - v69) >> 4);
            v61 = v60 + 1;
            if (v60 + 1 > 0x1C71C71C71C71C7)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v70 - v69) >> 4) > v61)
              v61 = 0x1C71C71C71C71C72 * ((uint64_t)(v70 - v69) >> 4);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v70 - v69) >> 4) >= 0xE38E38E38E38E3)
              v62 = 0x1C71C71C71C71C7;
            else
              v62 = v61;
            v81 = &v70;
            if (v62)
              v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::trees::TreeNode>>(v62);
            else
              v63 = 0;
            *(_QWORD *)v79 = v62;
            *(_QWORD *)&v79[8] = v62 + 144 * v60;
            *(_QWORD *)&v79[16] = *(_QWORD *)&v79[8];
            v80 = v62 + 144 * v63;
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*(std::string **)&v79[8], (const nlv4_inference_orchestrator::trees::TreeNode *)buf);
            *(_QWORD *)&v79[16] += 144;
            std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__swap_out_circular_buffer((uint64_t *)&v69, v79);
            v59 = *((_QWORD *)&v69 + 1);
            std::__split_buffer<nlv4_inference_orchestrator::trees::TreeNode>::~__split_buffer((uint64_t)v79);
          }
          else
          {
            nlv4_inference_orchestrator::trees::TreeNode::TreeNode(*((std::string **)&v69 + 1), (const nlv4_inference_orchestrator::trees::TreeNode *)buf);
            v59 = v58 + 144;
          }
          *((_QWORD *)&v69 + 1) = v59;
          std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
          v51 += 88;
          if (v51 == v52)
          {
            v64 = v69;
            v65 = v70;
            goto LABEL_90;
          }
        }
        v66 = *(const char **)(v51 + 32);
        if (v66)
        {
          if (v66[23] < 0)
            v66 = *(const char **)v66;
        }
        else
        {
          v66 = "nullptr";
        }
        v67 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
        {
          v68 = *((_QWORD *)this + 3);
          *(_DWORD *)v79 = 136315395;
          *(_QWORD *)&v79[4] = v68;
          *(_WORD *)&v79[12] = 2085;
          *(_QWORD *)&v79[14] = v66;
          _os_log_impl(&dword_1C2196000, v67, OS_LOG_TYPE_DEFAULT, "[%s] Warning: Failed to generate a node for matching span (input=%{sensitive}s)", v79, 0x16u);
        }
        *a3 = 0;
        a3[1] = 0;
        a3[2] = 0;
        std::__optional_destruct_base<nlv4_inference_orchestrator::trees::TreeNode,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      }
      *(_QWORD *)buf = &v69;
      std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      goto LABEL_99;
    }
    if (v44)
    {
      v45 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v45;
      v46 = "[%s] This common_Person cannot be split into multiple sub-spans. Skipping.";
      v47 = v43;
LABEL_57:
      _os_log_impl(&dword_1C2196000, v47, OS_LOG_TYPE_DEBUG, v46, buf, 0xCu);
    }
  }
  else
  {
    v48 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      v49 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v49;
      v46 = "[%s] Could not find _any_ partition for this common_Person (including a single-span one). Skipping.";
      v47 = v48;
      goto LABEL_57;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
LABEL_99:
  if (v73)
  {
    *(_QWORD *)buf = &v71;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_1C22EAB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
  if (a16)
  {
    a17 = &a13;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  }
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findPersonMatchingSpansMinimalPartition(nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *this@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void (***v22)(_QWORD);
  void (***v23)(_QWORD);
  BOOL v24;
  uint64_t v25;
  void *v26;
  void (***v27)(_QWORD);
  void (***v28)(_QWORD);
  void (**v29)(_QWORD);
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (***v35)(_QWORD);
  void (***v36)(_QWORD);
  void (**v37)(_QWORD);
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  NSObject *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack *v47;
  uint8_t *v48;
  uint8_t v49[32];
  _BYTE buf[22];
  __int16 v51;
  unint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    v9 = *((_QWORD *)this + 3);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v9;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = a2;
    v51 = 2048;
    v52 = a3;
    _os_log_impl(&dword_1C2196000, v8, OS_LOG_TYPE_DEBUG, "[%s] Finding person matching span partitions for range %lu -> %lu", buf, 0x20u);
  }
  v10 = *((_QWORD *)this + 7);
  for (i = *((_QWORD *)this + 8); v10 != i; v10 += 88)
  {
    v12 = *(const char **)(v10 + 32);
    if (v12)
    {
      if (v12[23] < 0)
        v12 = *(const char **)v12;
    }
    else
    {
      v12 = "nullptr";
    }
    v13 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      v14 = *((_QWORD *)this + 3);
      *(_DWORD *)buf = 136315395;
      *(_QWORD *)&buf[4] = v14;
      *(_WORD *)&buf[12] = 2085;
      *(_QWORD *)&buf[14] = v12;
      _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEBUG, "[%s]  - span: %{sensitive}s", buf, 0x16u);
    }
  }
  memset(v49, 0, 24);
  nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions((uint64_t)this, (uint64_t *)v49, a2, a3, buf);
  v48 = v49;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v15 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    v16 = *((_QWORD *)this + 3);
    *(_DWORD *)v49 = 136315394;
    *(_QWORD *)&v49[4] = v16;
    *(_WORD *)&v49[12] = 2048;
    *(_QWORD *)&v49[14] = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
    _os_log_impl(&dword_1C2196000, v15, OS_LOG_TYPE_DEBUG, "[%s] Found %lu possible person partitions:", v49, 0x16u);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 24) = 0;
  v17 = *(uint64_t **)buf;
  v18 = *(uint64_t **)&buf[8];
  if (*(_QWORD *)buf == *(_QWORD *)&buf[8])
    goto LABEL_61;
  v47 = this;
  do
  {
    if (*(_BYTE *)(a4 + 24))
    {
      v19 = *v17;
      v20 = v17[1];
      v21 = 0x2E8BA2E8BA2E8BA3 * ((v20 - *v17) >> 3);
      v23 = *(void (****)(_QWORD))a4;
      v22 = *(void (****)(_QWORD))(a4 + 8);
      v24 = v21 >= 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v22 - *(_QWORD *)a4) >> 3) || v17 == (uint64_t *)a4;
      if (!v24)
      {
        v25 = *(_QWORD *)(a4 + 16);
        if (0x2E8BA2E8BA2E8BA3 * ((v25 - (uint64_t)v23) >> 3) >= v21)
        {
          if (v19 != v20)
          {
            do
            {
              sirinluinternal::MatchingSpan::operator=();
              v19 += 88;
              v23 += 11;
            }
            while (v19 != v20);
            v22 = *(void (****)(_QWORD))(a4 + 8);
          }
          if (v22 != v23)
          {
            v35 = v22 - 11;
            v36 = v22 - 11;
            do
            {
              v37 = *v36;
              v36 -= 11;
              (*v37)(v35);
              v24 = v35 == v23;
              v35 = v36;
            }
            while (!v24);
          }
          *(_QWORD *)(a4 + 8) = v23;
        }
        else
        {
          if (v23)
          {
            v26 = *(void **)a4;
            if (v22 != v23)
            {
              v27 = v22 - 11;
              v28 = v22 - 11;
              do
              {
                v29 = *v28;
                v28 -= 11;
                (*v29)(v27);
                v24 = v27 == v23;
                v27 = v28;
              }
              while (!v24);
              v26 = *(void **)a4;
              this = v47;
            }
            *(_QWORD *)(a4 + 8) = v23;
            operator delete(v26);
            v25 = 0;
            *(_QWORD *)a4 = 0;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
          }
          if (v21 > 0x2E8BA2E8BA2E8BALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v30 = 0x2E8BA2E8BA2E8BA3 * (v25 >> 3);
          v31 = 2 * v30;
          if (2 * v30 <= v21)
            v31 = v21;
          if (v30 >= 0x1745D1745D1745DLL)
            v32 = 0x2E8BA2E8BA2E8BALL;
          else
            v32 = v31;
          std::vector<sirinluinternal::MatchingSpan>::__vallocate[abi:ne180100]((_QWORD *)a4, v32);
          v33 = *(_QWORD *)(a4 + 8);
          while (v19 != v20)
          {
            v34 = MEMORY[0x1C3BB847C](v33, v19);
            v19 += 88;
            v33 = v34 + 88;
          }
          *(_QWORD *)(a4 + 8) = v33;
        }
      }
    }
    else
    {
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>((_QWORD *)a4, *v17, v17[1], 0x2E8BA2E8BA2E8BA3 * ((v17[1] - *v17) >> 3));
      *(_BYTE *)(a4 + 24) = 1;
    }
    v17 += 3;
  }
  while (v17 != v18);
  if (!*(_BYTE *)(a4 + 24))
  {
LABEL_61:
    v45 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      v46 = *((_QWORD *)this + 3);
      *(_DWORD *)v49 = 136315138;
      *(_QWORD *)&v49[4] = v46;
      _os_log_impl(&dword_1C2196000, v45, OS_LOG_TYPE_DEBUG, "[%s] Did not find minimal partition", v49, 0xCu);
    }
  }
  else
  {
    v38 = SNLPOSLoggerForCategory(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
    {
      v39 = *((_QWORD *)this + 3);
      *(_DWORD *)v49 = 136315138;
      *(_QWORD *)&v49[4] = v39;
      _os_log_impl(&dword_1C2196000, v38, OS_LOG_TYPE_DEBUG, "[%s] Found minimal partition:", v49, 0xCu);
    }
    if (!*(_BYTE *)(a4 + 24))
      std::__throw_bad_optional_access[abi:ne180100]();
    v40 = *(_QWORD *)a4;
    v41 = *(_QWORD *)(a4 + 8);
    if (*(_QWORD *)a4 != v41)
    {
      do
      {
        v42 = *(const char **)(v40 + 32);
        if (v42)
        {
          if (v42[23] < 0)
            v42 = *(const char **)v42;
        }
        else
        {
          v42 = "nullptr";
        }
        v43 = SNLPOSLoggerForCategory(1);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          v44 = *((_QWORD *)this + 3);
          *(_DWORD *)v49 = 136315395;
          *(_QWORD *)&v49[4] = v44;
          *(_WORD *)&v49[12] = 2085;
          *(_QWORD *)&v49[14] = v42;
          _os_log_impl(&dword_1C2196000, v43, OS_LOG_TYPE_DEBUG, "[%s]  - component: %{sensitive}s", v49, 0x16u);
        }
        v40 += 88;
      }
      while (v40 != v41);
    }
  }
  *(_QWORD *)v49 = buf;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)v49);
}

void sub_1C22EB19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  if (*(_BYTE *)(v21 + 24))
  {
    a17 = (void **)v21;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&a17);
  }
  a17 = (void **)&a21;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::generateCommonPersonNode(siri::ontology::oname::graph::ontology_init *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string::size_type a6@<X5>, std::string::size_type a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v18;
  _QWORD *v19;
  std::string::size_type v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  NSObject *v24;
  std::string::size_type v25;
  const char *v26;
  BOOL v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *p_dst;
  std::string::size_type v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _BOOL8 v36;
  std::string::size_type v37;
  char *v38;
  uint64_t v39;
  std::string::size_type v40;
  __int128 v41;
  std::string __dst;
  void **v44;
  std::string v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  uint64_t v50;
  std::string buf[2];
  void *v52[2];
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  std::string v62;
  std::string::size_type v63;
  std::string::size_type v64;
  _QWORD v65[11];

  v65[8] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned int *)(a2 + 76);
  v11 = *((_QWORD *)a1 + 4);
  v12 = 0x8E38E38E38E38E39 * ((*((_QWORD *)a1 + 5) - v11) >> 4);
  if (v12 <= v10 || (v13 = (*(_DWORD *)(a2 + 72) - 1), v12 <= v13))
    std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  memset(&v62, 0, sizeof(v62));
  memset(v65, 0, 24);
  v18 = siri::ontology::oname::graph::ontology_init::Argument_name(a1);
  std::string::operator=(&v62, (const std::string *)(v18 + 8));
  v19 = (_QWORD *)(v11 + 144 * v10);
  v20 = v19[12];
  v63 = v20;
  v65[3] = v19[14];
  v65[5] = v19[16];
  v21 = (_QWORD *)(v11 + 144 * v13);
  v22 = v21[13];
  v64 = v22;
  v65[4] = v21[15];
  v65[6] = v21[17];
  v23 = v20 - a7;
  if (v20 < a7)
  {
    v24 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
LABEL_19:
      *(_BYTE *)a8 = 0;
      *(_BYTE *)(a8 + 144) = 0;
      goto LABEL_20;
    }
    v25 = *((_QWORD *)a1 + 3);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v25;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = a7;
    v26 = "[%s] newNameNode.startCharIndex (%lu) is less than originalNameStartCharIndex (%lu)";
LABEL_18:
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_ERROR, v26, (uint8_t *)buf, 0x20u);
    goto LABEL_19;
  }
  v27 = v22 >= v20;
  v28 = v22 - v20;
  if (v28 == 0 || !v27)
  {
    v24 = SNLPOSLoggerForCategory(1);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      goto LABEL_19;
    v32 = *((_QWORD *)a1 + 3);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v32;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = v64;
    v26 = "[%s] newNameNode character indices imply an empty or impossible substring (%lu -> %lu)";
    goto LABEL_18;
  }
  if (a6 < v23)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  if (a6 - v23 >= v28)
    v29 = v28;
  else
    v29 = a6 - v23;
  if (v29 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v29 >= 0x17)
  {
    v33 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v29 | 7) != 0x17)
      v33 = v29 | 7;
    v34 = v33 + 1;
    p_dst = (std::string *)operator new(v33 + 1);
    __dst.__r_.__value_.__l.__size_ = v29;
    __dst.__r_.__value_.__r.__words[2] = v34 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v29;
    p_dst = &__dst;
    if (!v29)
      goto LABEL_31;
  }
  memmove(p_dst, (const void *)(a5 + v23), v29);
LABEL_31:
  p_dst->__r_.__value_.__s.__data_[v29] = 0;
  std::string::operator=((std::string *)((char *)&v60 + 8), &__dst);
  v35 = SNLPOSLoggerForCategory(1);
  v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG);
  if (v36)
  {
    v37 = *((_QWORD *)a1 + 3);
    if (v61 >= 0)
      v38 = (char *)&v60 + 8;
    else
      v38 = (char *)*((_QWORD *)&v60 + 1);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315907;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v37;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v63;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2048;
    buf[1].__r_.__value_.__r.__words[0] = v64;
    LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 2085;
    *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v38;
    _os_log_impl(&dword_1C2196000, v35, OS_LOG_TYPE_DEBUG, "[%s] Generated new common_Person.name node with startCharIndex=%lu, endCharIndex=%lu, value=%{sensitive}s", (uint8_t *)buf, 0x2Au);
  }
  v56 = 0;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)v52 = 0u;
  v55 = 0uLL;
  v53 = 0;
  v39 = siri::ontology::oname::graph::ontology_init::common_Person((siri::ontology::oname::graph::ontology_init *)v36);
  std::string::operator=(buf, (const std::string *)(v39 + 8));
  MEMORY[0x1C3BB9640](v52, a3, a4);
  v54 = 0uLL;
  v57 = 0u;
  v58 = 0u;
  nlv4_inference_orchestrator::trees::TreeNode::TreeNode(&v45, (const nlv4_inference_orchestrator::trees::TreeNode *)&v59);
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__assign_with_size[abi:ne180100]<nlv4_inference_orchestrator::trees::TreeNode const*,nlv4_inference_orchestrator::trees::TreeNode const*>((uint64_t)&v55, (nlv4_inference_orchestrator::trees::TreeNode *)&v45, (nlv4_inference_orchestrator::trees::TreeNode *)buf, 1uLL);
  v44 = (void **)&v50;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100](&v44);
  if (v49 < 0)
    operator delete(__p);
  if (v47 < 0)
    operator delete(v46);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v40 = buf[1].__r_.__value_.__r.__words[2];
  *(std::string *)a8 = buf[0];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = 0uLL;
  *(_OWORD *)(a8 + 24) = *(_OWORD *)&buf[1].__r_.__value_.__l.__data_;
  *(_QWORD *)(a8 + 40) = v40;
  memset(&buf[0].__r_.__value_.__r.__words[2], 0, 32);
  *(_QWORD *)(a8 + 64) = v53;
  *(_OWORD *)(a8 + 48) = *(_OWORD *)v52;
  v52[1] = 0;
  v53 = 0;
  v52[0] = 0;
  *(_OWORD *)(a8 + 72) = v54;
  *(_OWORD *)(a8 + 88) = v55;
  *(_QWORD *)(a8 + 104) = v56;
  v55 = 0uLL;
  v56 = 0;
  v41 = v58;
  *(_OWORD *)(a8 + 112) = v57;
  *(_OWORD *)(a8 + 128) = v41;
  *(_BYTE *)(a8 + 144) = 1;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v55;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[0]);
  if (SHIBYTE(buf[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_20:
  buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
  std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(v61) < 0)
    operator delete(*((void **)&v60 + 1));
  if (SBYTE7(v60) < 0)
    operator delete((void *)v59);
}

void sub_1C22EB704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  uint64_t v36;

  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a18);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode(&a36);
  if (a16 < 0)
    operator delete(__p);
  nlv4_inference_orchestrator::trees::TreeNode::~TreeNode((void **)(v36 - 256));
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  uint64_t v36;
  uint64_t *v38;
  uint64_t *v39;
  __int128 v40;
  void *v41;
  void **v42;
  void **v43;
  void **v44;
  void **v45;
  _QWORD *v46;

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v6 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  if (v6 != v5)
  {
    v7 = a4;
    v8 = a3;
    v10 = a5 + 2;
    v36 = *(_QWORD *)(a1 + 64);
    do
    {
      v11 = *(unsigned int *)(v6 + 76);
      if (v11 == v8 && *(_DWORD *)(v6 + 72) == v7)
      {
        v40 = 0uLL;
        v41 = 0;
        std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(&v40, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100]((uint64_t *)&v40, v6);
        v12 = (_QWORD *)a5[1];
        v13 = a5[2];
        if ((unint64_t)v12 >= v13)
        {
          v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *a5) >> 3);
          v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a5) >> 3);
          if (2 * v17 > v16)
            v16 = 2 * v17;
          if (v17 >= 0x555555555555555)
            v18 = 0xAAAAAAAAAAAAAAALL;
          else
            v18 = v16;
          v46 = v10;
          v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v18);
          v20 = &v19[3 * v15];
          v42 = v19;
          v43 = v20;
          v45 = &v19[3 * v21];
          *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
          *(_OWORD *)v20 = v40;
          v20[2] = v41;
          v40 = 0uLL;
          v41 = 0;
          v44 = v20 + 3;
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
          v14 = (_QWORD *)a5[1];
          std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
        }
        else
        {
          *v12 = 0;
          v12[1] = 0;
          v12[2] = 0;
          *(_OWORD *)v12 = v40;
          v12[2] = v41;
          v40 = 0uLL;
          v41 = 0;
          v14 = v12 + 3;
          a5[1] = v12 + 3;
        }
        a5[1] = v14;
        v42 = (void **)&v40;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v42);
        v11 = *(unsigned int *)(v6 + 76);
        v5 = v36;
      }
      if (v11 == v8 && *(unsigned int *)(v6 + 72) < v7)
      {
        v40 = 0uLL;
        v41 = 0;
        std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(&v40, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
        std::vector<sirinluinternal::MatchingSpan>::push_back[abi:ne180100]((uint64_t *)&v40, v6);
        nlv4_inference_orchestrator::post_processing::tree_manipulations::PersonNameSplitHack::findAllMatchingSpanPartitions(&v38, a1, &v40, *(unsigned int *)(v6 + 72), v7);
        v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5[1] - *a5) >> 3);
        v24 = v38;
        v23 = v39;
        v25 = v22 - 0x5555555555555555 * (v39 - v38);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a5[2] - *a5) >> 3) < v25)
        {
          if (v25 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
            std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
          v46 = v10;
          v42 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v25);
          v43 = &v42[3 * v22];
          v44 = v43;
          v45 = &v42[3 * v26];
          std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
          std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
          v24 = v38;
          v23 = v39;
        }
        if (v24 != v23)
        {
          v27 = (_QWORD *)a5[1];
          do
          {
            if ((unint64_t)v27 >= *v10)
            {
              v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v27 - *a5) >> 3);
              v29 = v28 + 1;
              if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_38;
              if (0x5555555555555556 * ((uint64_t)(*v10 - *a5) >> 3) > v29)
                v29 = 0x5555555555555556 * ((uint64_t)(*v10 - *a5) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a5) >> 3) >= 0x555555555555555)
                v30 = 0xAAAAAAAAAAAAAAALL;
              else
                v30 = v29;
              v46 = v10;
              if (v30)
                v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v30);
              else
                v31 = 0;
              v32 = (void **)(v30 + 24 * v28);
              v42 = (void **)v30;
              v43 = v32;
              v44 = v32;
              v45 = (void **)(v30 + 24 * v31);
              *v32 = 0;
              v32[1] = 0;
              v32[2] = 0;
              std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v32, *v24, v24[1], 0x2E8BA2E8BA2E8BA3 * ((v24[1] - *v24) >> 3));
              v44 += 3;
              std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v42);
              v27 = (_QWORD *)a5[1];
              std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer((uint64_t)&v42);
            }
            else
            {
              *v27 = 0;
              v27[1] = 0;
              v27[2] = 0;
              std::vector<sirinluinternal::MatchingSpan>::__init_with_size[abi:ne180100]<sirinluinternal::MatchingSpan*,sirinluinternal::MatchingSpan*>(v27, *v24, v24[1], 0x2E8BA2E8BA2E8BA3 * ((v24[1] - *v24) >> 3));
              v27 += 3;
              a5[1] = v27;
            }
            a5[1] = v27;
            v24 += 3;
          }
          while (v24 != v23);
        }
        v42 = (void **)&v38;
        std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&v42);
        v42 = (void **)&v40;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v42);
        v8 = a3;
        v7 = a4;
        v5 = v36;
      }
      v6 += 88;
    }
    while (v6 != v5);
  }
}

void sub_1C22EBBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,void ***a21)
{
  a21 = (void ***)&a14;
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  a14 = &a17;
  std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](&a17);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<sirinluinternal::MatchingSpan>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::vector<sirinluinternal::MatchingSpan>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void **v4;
  void **v6;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v6 = v4;
    std::vector<sirinluinternal::MatchingSpan>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

BOOL snlp::ssu::similarity::SSUBatchProvenance::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

BOOL snlp::ssu::similarity::SSUBatchProvenance::operator!=(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 != *(_DWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

uint64_t snlp::ssu::similarity::SSUAppResult::operator>(const void **a1, const void **a2)
{
  float v2;
  float v3;
  int v5;
  int v6;
  size_t v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  int v12;

  v2 = *((float *)a2 + 70);
  v3 = *((float *)a1 + 70);
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  v5 = *((char *)a1 + 23);
  v6 = *((char *)a2 + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)a2 + 23);
  else
    v7 = (size_t)a2[1];
  if (v6 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v5 >= 0)
    v9 = *((unsigned __int8 *)a1 + 23);
  else
    v9 = (size_t)a1[1];
  if (v5 >= 0)
    v10 = a1;
  else
    v10 = *a1;
  if (v9 >= v7)
    v11 = v7;
  else
    v11 = v9;
  v12 = memcmp(v8, v10, v11);
  if (v12)
    return v12 < 0;
  else
    return v7 < v9;
}

uint64_t snlp::ssu::similarity::SSUSimilaritySearchApp::SSUSimilaritySearchApp(uint64_t a1, char a2, __int128 *a3, uint64_t a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;

  *(_BYTE *)a1 = a2;
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
    if (v10 >= 0xF83E0F83E0F83FLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v11 = operator new(88 * (v9 >> 4));
    *(_QWORD *)(a1 + 336) = v11;
    *(_QWORD *)(a1 + 344) = v11;
    v12 = &v11[264 * v10];
    *(_QWORD *)(a1 + 352) = v12;
    do
    {
      *v11 = 0;
      v11[256] = 0;
      v11 += 264;
    }
    while (v11 != v12);
    *(_QWORD *)(a1 + 344) = v12;
  }
  *(_DWORD *)(a1 + 360) = 0;
  return a1;
}

void sub_1C22EBEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  std::vector<std::optional<snlp::ssu::similarity::SSUMatchInfo>>::__destroy_vector::operator()[abi:ne180100](&a9);
  std::__optional_destruct_base<snlp::ssu::similarity::SSUMatchInfo,false>::~__optional_destruct_base[abi:ne180100](v9);
  std::vector<snlp::ssu::cache::SSUCacheObjectIntent>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::processNegativeBatch(uint64_t a1, __int128 *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  float v14;
  __int128 v16;
  unint64_t v17;
  std::string v18;
  std::string v19[3];
  std::string v20[4];
  float v21;
  void *__p;
  char v23;
  char v24;

  v5 = *a3;
  v4 = a3[1];
  v6 = v4 == *a3;
  *(_DWORD *)(a1 + 360) += (unint64_t)(v4 - *a3) >> 2;
  if (!v6)
  {
    v10 = 0;
    v11 = a1 + 72;
    v12 = (__int128 *)(a4 + 24);
    v13 = a4 + 96;
    do
    {
      v14 = *(float *)(v5 + 4 * v10);
      if (!*(_BYTE *)(a1 + 328) || v14 > *(float *)(a1 + 288))
      {
        v16 = *a2;
        v17 = v10;
        if (*(char *)(a4 + 23) < 0)
          std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
        else
          v18 = *(std::string *)a4;
        std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](v19, v12);
        std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v20, v13);
        v21 = v14;
        LOBYTE(__p) = 0;
        v24 = 0;
        std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(v11, (uint64_t)&v16);
        if (v24 && v23 < 0)
          operator delete(__p);
        std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
        std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v19);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        v5 = *a3;
        v4 = a3[1];
      }
      ++v10;
    }
    while (v10 < (v4 - v5) >> 2);
  }
}

void sub_1C22EC088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v19);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;
  __int128 v14;

  v4 = *(unsigned __int8 *)(a1 + 256);
  v5 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a1 + 24;
  v7 = (__int128 *)(a2 + 24);
  if (v4)
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v6);
    v8 = *v7;
    *(_QWORD *)(v6 + 16) = *((_QWORD *)v7 + 2);
    *(_OWORD *)v6 = v8;
    *(_BYTE *)(a2 + 47) = 0;
    *(_BYTE *)(a2 + 24) = 0;
    std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(a1 + 48, (__int128 *)(a2 + 48));
    std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(a1 + 120, (__int128 *)(a2 + 120));
    *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 224, (__n128 *)(a2 + 224));
  }
  else
  {
    v9 = *v7;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v6 = v9;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (*(_BYTE *)(a2 + 112))
    {
      v10 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 72, (uint64_t *)(a2 + 72));
      *(_BYTE *)(a1 + 112) = 1;
    }
    *(_BYTE *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 208) = 0;
    if (*(_BYTE *)(a2 + 208))
    {
      v11 = *(_OWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = v11;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 120) = 0;
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 168) = 0;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
      *(_QWORD *)(a2 + 160) = 0;
      *(_QWORD *)(a2 + 168) = 0;
      *(_QWORD *)(a2 + 176) = 0;
      v12 = *(_OWORD *)(a2 + 184);
      *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = v12;
      *(_QWORD *)(a2 + 192) = 0;
      *(_QWORD *)(a2 + 200) = 0;
      *(_QWORD *)(a2 + 184) = 0;
      *(_BYTE *)(a1 + 208) = 1;
    }
    v13 = *(_DWORD *)(a2 + 216);
    *(_BYTE *)(a1 + 224) = 0;
    *(_DWORD *)(a1 + 216) = v13;
    *(_BYTE *)(a1 + 248) = 0;
    if (*(_BYTE *)(a2 + 248))
    {
      v14 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 224) = v14;
      *(_QWORD *)(a2 + 232) = 0;
      *(_QWORD *)(a2 + 240) = 0;
      *(_QWORD *)(a2 + 224) = 0;
      *(_BYTE *)(a1 + 248) = 1;
    }
    *(_BYTE *)(a1 + 256) = 1;
  }
  return a1;
}

void std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(unsigned __int8 *)(a1 + 64) == *((unsigned __int8 *)a2 + 64))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__move_assign(a1 + 24, (uint64_t *)a2 + 3);
    }
  }
  else if (*(_BYTE *)(a1 + 64))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a1 + 24, (uint64_t *)a2 + 3);
    *(_BYTE *)(a1 + 64) = 1;
  }
}

__n128 std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void **v9;
  __n128 result;
  __int128 v11;

  if (*(unsigned __int8 *)(a1 + 88) == *((unsigned __int8 *)a2 + 88))
  {
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = (void **)(a1 + 40);
      v6 = *(void **)(a1 + 40);
      *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
      if (v6)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = v6;
        if ((void *)v7 != v6)
        {
          do
          {
            v7 -= 120;
            std::allocator<siri::ontology::UsoIdentifier>::destroy[abi:ne180100](v7);
          }
          while ((void *)v7 != v6);
          v8 = *v5;
        }
        *(_QWORD *)(a1 + 48) = v6;
        operator delete(v8);
        *v5 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      v9 = (void **)(a1 + 64);
      if (*(char *)(a1 + 87) < 0)
        operator delete(*v9);
      result = (__n128)a2[4];
      *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
      *(__n128 *)v9 = result;
      *((_BYTE *)a2 + 87) = 0;
      *((_BYTE *)a2 + 64) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 88))
  {
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::reset[abi:ne180100](a1);
  }
  else
  {
    v11 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v11;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    result = (__n128)a2[4];
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
    *(__n128 *)(a1 + 64) = result;
    *((_QWORD *)a2 + 9) = 0;
    *((_QWORD *)a2 + 10) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  return result;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::processPositiveBatch(snlp::ssu::similarity::SSUSimilaritySearchApp *this, __int128 *a2, uint64_t a3, uint64_t *a4, snlp::ssu::candidate::SSUCandidate *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  char *v17;
  __int128 *v18;
  __int128 v20;
  unint64_t v21;
  std::string v22;
  std::string v23[3];
  std::string v24[4];
  float v25;
  void *__p;
  char v27;
  char v28;

  v5 = *a4;
  v6 = a4[1] - *a4;
  *((_DWORD *)this + 90) += v6 >> 2;
  if (v6)
  {
    v11 = 0;
    v17 = (char *)a5 + 96;
    v18 = (__int128 *)((char *)a5 + 24);
    do
    {
      v12 = *(_QWORD *)(a3 + 48);
      if (v11 >= (*(_QWORD *)(a3 + 56) - v12) >> 3)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v13 = *(_QWORD *)(v12 + 8 * v11);
      v14 = *((_QWORD *)this + 42);
      if (0xF83E0F83E0F83E1 * ((*((_QWORD *)this + 43) - v14) >> 3) <= v13)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v15 = *(float *)(v5 + 4 * v11);
      v16 = v14 + 264 * v13;
      if ((!*(_BYTE *)(v16 + 256) || v15 > *(float *)(v16 + 216))
        && snlp::ssu::similarity::SSUSimilaritySearchApp::isCandidateRelevantToIntent(this, a5, v13))
      {
        v20 = *a2;
        v21 = v11;
        if (*((char *)a5 + 23) < 0)
          std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
        else
          v22 = *(std::string *)a5;
        std::__optional_copy_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__optional_copy_base[abi:ne180100](v23, v18);
        std::__optional_copy_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__optional_copy_base[abi:ne180100](v24, (uint64_t)v17);
        v25 = v15;
        LOBYTE(__p) = 0;
        v28 = 0;
        std::optional<snlp::ssu::similarity::SSUMatchInfo>::operator=[abi:ne180100]<snlp::ssu::similarity::SSUMatchInfo,void>(v16, (uint64_t)&v20);
        if (v28 && v27 < 0)
          operator delete(__p);
        std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v24);
        std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v23);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v22.__r_.__value_.__l.__data_);
      }
      ++v11;
      v5 = *a4;
    }
    while (v11 < (a4[1] - *a4) >> 2);
  }
}

void sub_1C22EC668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v21);
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL snlp::ssu::similarity::SSUSimilaritySearchApp::isCandidateRelevantToIntent(snlp::ssu::similarity::SSUSimilaritySearchApp *this, const snlp::ssu::candidate::SSUCandidate *a2, unint64_t a3)
{
  _BOOL8 v5;
  NSObject *v6;
  std::string v8[2];
  char v9;
  std::string buf;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)a2 + 88))
    return 1;
  snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex((snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48), a3, v8);
  if (v9)
  {
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&buf, v8[0].__r_.__value_.__l.__data_, v8[0].__r_.__value_.__l.__size_);
    else
      buf = v8[0];
    if (!*((_BYTE *)a2 + 88))
      std::__throw_bad_optional_access[abi:ne180100]();
    v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)a2 + 6, (unsigned __int8 *)&buf) != 0;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a3;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_ERROR, "Logic error: SSUCacheObjectIntentList::getIntentWithIndex returned std::nullopt for index %lu", (uint8_t *)&buf, 0xCu);
    }
    v5 = 0;
  }
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v8);
  return v5;
}

void sub_1C22EC7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::getSearchResult(snlp::ssu::similarity::SSUSimilaritySearchApp *this@<X0>, _QWORD *a2@<X8>)
{
  std::string::size_type v2;
  float HighestNegativeScoreClipped;
  unint64_t v5;
  snlp::ssu::cache::SSUCacheObjectIntentList *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  std::string *v13;
  float v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  void **v19;
  NSObject *v20;
  std::string *v21;
  float v22;
  float v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  std::string *v29;
  std::string *v30;
  std::string *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  std::string::size_type v37;
  unint64_t v38;
  uint8x8_t v39;
  unint64_t v40;
  unsigned __int8 **v41;
  unsigned __int8 *i;
  unint64_t v43;
  char *v44;
  std::string *v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t prime;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD **v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *j;
  unint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  void *v65;
  uint64_t **k;
  _QWORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  NSObject *v73;
  std::string *v74;
  std::string *v75;
  std::string *m;
  NSObject *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type size;
  std::string::size_type v81;
  double v82;
  double v83;
  double v84;
  char v85;
  _QWORD *v86;
  std::string *v87;
  std::string *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v94[2];
  char v95;
  void *__p[2];
  char v97;
  std::string v98;
  std::string v99[2];
  char v100;
  void *v101[2];
  __int128 v102;
  float v103;
  std::string *v104;
  std::string *v105;
  unint64_t v106;
  std::string v107;
  std::string *v108;
  _BYTE v109[10];
  __int16 v110;
  double v111;
  __int16 v112;
  double v113;
  __int16 v114;
  void **v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  void **v121;
  _BYTE buf[22];
  __int16 v123;
  std::string *v124;
  __int16 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  void **v130;
  void *v131;
  char v132;
  _DWORD v133[44];
  char v134;
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  HighestNegativeScoreClipped = snlp::ssu::similarity::SSUSimilaritySearchApp::getHighestNegativeScoreClipped(this);
  v5 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
  *(_OWORD *)v101 = 0u;
  v102 = 0u;
  v103 = 1.0;
  while (v5 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 4))
  {
    snlp::ssu::cache::SSUCacheObjectIntentList::getIntentWithIndex(v6, v5, v99);
    if (v100)
    {
      if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v98, v99[0].__r_.__value_.__l.__data_, v99[0].__r_.__value_.__l.__size_);
      else
        v98 = v99[0];
      v8 = *((_QWORD *)this + 42);
      if (0xF83E0F83E0F83E1 * ((*((_QWORD *)this + 43) - v8) >> 3) <= v5)
        std::vector<nlv4_inference_orchestrator::trees::TreeNode>::__throw_out_of_range[abi:ne180100]();
      v9 = v8 + 264 * v5;
      v10 = *(unsigned __int8 *)(v9 + 256);
      v11 = SNLPOSLoggerForCategory(8);
      v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG);
      if (v10)
      {
        if (v12)
        {
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v13 = &v98;
          else
            v13 = (std::string *)v98.__r_.__value_.__r.__words[0];
          v14 = *(float *)(v9 + 216);
          snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString((_DWORD *)v9, &v107);
          v15 = SHIBYTE(v107.__r_.__value_.__r.__words[2]);
          v2 = v107.__r_.__value_.__r.__words[0];
          v17 = *(_QWORD *)(v9 + 8);
          v16 = *(_QWORD *)(v9 + 16);
          snlp::ssu::candidate::SSUCandidate::toString((uint64_t *)__p, (snlp::ssu::candidate::SSUCandidate *)(v9 + 24));
          if (v15 >= 0)
            v18 = &v107;
          else
            v18 = (std::string *)v2;
          v19 = __p;
          if (v97 < 0)
            v19 = (void **)__p[0];
          *(_DWORD *)buf = 136316418;
          *(_QWORD *)&buf[4] = v13;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&buf[14] = v14;
          v123 = 2080;
          v124 = v18;
          v125 = 2048;
          v126 = v17;
          v127 = 2048;
          v128 = v16;
          v129 = 2080;
          v130 = v19;
          _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "Highest matching positive example for intent %s has score %f (batch type %s, batch index %lu, encoding index %lu). This is associated with candidate %s. Attempting to build app result.", buf, 0x3Eu);
          if (v97 < 0)
            operator delete(__p[0]);
          v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
        }
        snlp::ssu::similarity::SSUSimilaritySearchApp::buildAppResult((uint64_t)this, (float *)v9, (uint64_t)&v98, (uint64_t)buf, HighestNegativeScoreClipped);
        if (v134)
        {
          v20 = SNLPOSLoggerForCategory(8);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v98;
            else
              v21 = (std::string *)v98.__r_.__value_.__r.__words[0];
            if (!v134)
              std::__throw_bad_optional_access[abi:ne180100]();
            v22 = *(float *)(v9 + 216);
            v23 = *(float *)&v133[42];
            snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString((_DWORD *)v9, __p);
            v2 = v97;
            v24 = (void **)__p[0];
            v26 = *(_QWORD *)(v9 + 8);
            v25 = *(_QWORD *)(v9 + 16);
            snlp::ssu::candidate::SSUCandidate::toString((uint64_t *)v94, (snlp::ssu::candidate::SSUCandidate *)(v9 + 24));
            v27 = __p;
            if ((v2 & 0x80000000) != 0)
              v27 = v24;
            LODWORD(v107.__r_.__value_.__l.__data_) = 136317442;
            v28 = v94;
            if (v95 < 0)
              v28 = (void **)v94[0];
            *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
            WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
            HIWORD(v107.__r_.__value_.__r.__words[2]) = 2080;
            v108 = v21;
            *(_WORD *)v109 = 2048;
            *(double *)&v109[2] = v22;
            v110 = 2048;
            v111 = v23;
            v112 = 2048;
            v113 = HighestNegativeScoreClipped;
            v114 = 2080;
            v115 = v27;
            v116 = 2048;
            v117 = v26;
            v118 = 2048;
            v119 = v25;
            v120 = 2080;
            v121 = v28;
            _os_log_impl(&dword_1C2196000, v20, OS_LOG_TYPE_DEBUG, "[%s] %sOutputting app result for intent %s with raw score=%f, calibrated score=%f, highestNegativeScoreClipped=%f (batch type %s, batch index %lu, encoding index %lu). This is associated with candidate %s.", (uint8_t *)&v107, 0x66u);
            if (v95 < 0)
              operator delete(v94[0]);
            v6 = (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 48);
            if (v97 < 0)
              operator delete(__p[0]);
          }
          if (!v134)
            std::__throw_bad_optional_access[abi:ne180100]();
          v29 = v105;
          if ((unint64_t)v105 >= v106)
          {
            v32 = 0x8E38E38E38E38E39 * (((char *)v105 - (char *)v104) >> 5);
            v33 = v32 + 1;
            if (v32 + 1 > 0xE38E38E38E38E3)
              std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v106 - (_QWORD)v104) >> 5) > v33)
              v33 = 0x1C71C71C71C71C72 * ((uint64_t)(v106 - (_QWORD)v104) >> 5);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v106 - (_QWORD)v104) >> 5) >= 0x71C71C71C71C71)
              v34 = 0xE38E38E38E38E3;
            else
              v34 = v33;
            *(_QWORD *)v109 = &v106;
            if (v34)
              v34 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v34);
            else
              v35 = 0;
            v107.__r_.__value_.__r.__words[0] = v34;
            v107.__r_.__value_.__l.__size_ = v34 + 288 * v32;
            v107.__r_.__value_.__r.__words[2] = v107.__r_.__value_.__l.__size_;
            v108 = (std::string *)(v34 + 288 * v35);
            std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>((std::string *)v107.__r_.__value_.__l.__size_, (__int128 *)buf);
            v107.__r_.__value_.__r.__words[2] += 288;
            std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer((uint64_t *)&v104, &v107);
            v30 = v105;
            std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer((uint64_t)&v107);
          }
          else
          {
            std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>(v105, (__int128 *)buf);
            v30 = v29 + 12;
          }
          v105 = v30;
          goto LABEL_136;
        }
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v107, v98.__r_.__value_.__l.__data_, v98.__r_.__value_.__l.__size_);
        else
          v107 = v98;
        LODWORD(v108) = *(_DWORD *)(v9 + 216);
        v36 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v102 + 8, (uint64_t)&v107);
        v37 = v36;
        v38 = (unint64_t)v101[1];
        if (v101[1])
        {
          v39 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]);
          v39.i16[0] = vaddlv_u8(v39);
          v40 = v39.u32[0];
          if (v39.u32[0] > 1uLL)
          {
            v2 = v36;
            if ((void *)v36 >= v101[1])
              v2 = v36 % (unint64_t)v101[1];
          }
          else
          {
            v2 = ((unint64_t)v101[1] - 1) & v36;
          }
          v41 = (unsigned __int8 **)*((_QWORD *)v101[0] + v2);
          if (v41)
          {
            for (i = *v41; i; i = *(unsigned __int8 **)i)
            {
              v43 = *((_QWORD *)i + 1);
              if (v43 == v37)
              {
                if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v103, i + 16, (unsigned __int8 *)&v107) & 1) != 0)goto LABEL_134;
              }
              else
              {
                if (v40 > 1)
                {
                  if (v43 >= v38)
                    v43 %= v38;
                }
                else
                {
                  v43 &= v38 - 1;
                }
                if (v43 != v2)
                  break;
              }
            }
          }
        }
        v44 = (char *)operator new(0x30uLL);
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = v37;
        v45 = (std::string *)(v44 + 16);
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v45, v107.__r_.__value_.__l.__data_, v107.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v45->__r_.__value_.__l.__data_ = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
          *((_QWORD *)v44 + 4) = *((_QWORD *)&v107.__r_.__value_.__l + 2);
        }
        *((_DWORD *)v44 + 10) = (_DWORD)v108;
        v46 = (float)(unint64_t)(*((_QWORD *)&v102 + 1) + 1);
        if (!v38 || (float)(v103 * (float)v38) < v46)
        {
          v47 = (v38 & (v38 - 1)) != 0;
          if (v38 < 3)
            v47 = 1;
          v48 = v47 | (2 * v38);
          v49 = vcvtps_u32_f32(v46 / v103);
          if (v48 <= v49)
            prime = (int8x8_t)v49;
          else
            prime = (int8x8_t)v48;
          if (*(_QWORD *)&prime == 1)
          {
            prime = (int8x8_t)2;
          }
          else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
          {
            prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          }
          v38 = (unint64_t)v101[1];
          if ((void *)*(_QWORD *)&prime <= v101[1])
          {
            if ((void *)*(_QWORD *)&prime < v101[1])
            {
              v57 = vcvtps_u32_f32((float)*((unint64_t *)&v102 + 1) / v103);
              if (v101[1] < (void *)3
                || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v101[1]), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
              {
                v57 = std::__next_prime(v57);
              }
              else
              {
                v59 = 1 << -(char)__clz(v57 - 1);
                if (v57 >= 2)
                  v57 = v59;
              }
              if (*(_QWORD *)&prime <= v57)
                prime = (int8x8_t)v57;
              if (*(_QWORD *)&prime >= v38)
              {
                v38 = (unint64_t)v101[1];
              }
              else
              {
                if (prime)
                  goto LABEL_90;
                v65 = v101[0];
                v101[0] = 0;
                if (v65)
                  operator delete(v65);
                v38 = 0;
                v101[1] = 0;
              }
            }
          }
          else
          {
LABEL_90:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v51 = operator new(8 * *(_QWORD *)&prime);
            v52 = v101[0];
            v101[0] = v51;
            if (v52)
              operator delete(v52);
            v53 = 0;
            v101[1] = (void *)prime;
            do
              *((_QWORD *)v101[0] + v53++) = 0;
            while (*(_QWORD *)&prime != v53);
            v54 = (_QWORD **)v102;
            if ((_QWORD)v102)
            {
              v55 = *(_QWORD *)(v102 + 8);
              v56 = (uint8x8_t)vcnt_s8(prime);
              v56.i16[0] = vaddlv_u8(v56);
              if (v56.u32[0] > 1uLL)
              {
                if (v55 >= *(_QWORD *)&prime)
                  v55 %= *(_QWORD *)&prime;
              }
              else
              {
                v55 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)v101[0] + v55) = &v102;
              for (j = *v54; j; v55 = v61)
              {
                v61 = j[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(_QWORD *)&prime)
                    v61 %= *(_QWORD *)&prime;
                }
                else
                {
                  v61 &= *(_QWORD *)&prime - 1;
                }
                if (v61 != v55)
                {
                  if (!*((_QWORD *)v101[0] + v61))
                  {
                    *((_QWORD *)v101[0] + v61) = v54;
                    goto LABEL_115;
                  }
                  *v54 = (_QWORD *)*j;
                  *j = **((_QWORD **)v101[0] + v61);
                  **((_QWORD **)v101[0] + v61) = j;
                  j = v54;
                }
                v61 = v55;
LABEL_115:
                v54 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v38 = (unint64_t)prime;
          }
          if ((v38 & (v38 - 1)) != 0)
          {
            if (v37 >= v38)
              v2 = v37 % v38;
            else
              v2 = v37;
          }
          else
          {
            v2 = (v38 - 1) & v37;
          }
        }
        v62 = v101[0];
        v63 = (_QWORD *)*((_QWORD *)v101[0] + v2);
        if (v63)
        {
          *(_QWORD *)v44 = *v63;
          goto LABEL_132;
        }
        *(_QWORD *)v44 = v102;
        *(_QWORD *)&v102 = v44;
        v62[v2] = &v102;
        if (*(_QWORD *)v44)
        {
          v64 = *(_QWORD *)(*(_QWORD *)v44 + 8);
          if ((v38 & (v38 - 1)) != 0)
          {
            if (v64 >= v38)
              v64 %= v38;
          }
          else
          {
            v64 &= v38 - 1;
          }
          v63 = (char *)v101[0] + 8 * v64;
LABEL_132:
          *v63 = v44;
        }
        ++*((_QWORD *)&v102 + 1);
LABEL_134:
        if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v107.__r_.__value_.__l.__data_);
LABEL_136:
        std::__optional_destruct_base<snlp::ssu::similarity::SSUAppResult,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)buf);
      }
      else if (v12)
      {
        v31 = &v98;
        if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v31 = (std::string *)v98.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v31;
        _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, "No positive match score found for intent %s. No app result will be returned.", buf, 0xCu);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      goto LABEL_139;
    }
    v7 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v5;
      _os_log_impl(&dword_1C2196000, v7, OS_LOG_TYPE_ERROR, "Logic error: SSUCacheObjectIntentList::getIntentWithIndex returned std::nullopt for index %lu", buf, 0xCu);
    }
LABEL_139:
    std::__optional_destruct_base<snlp::ssu::cache::SSUCacheObjectIntent,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v99);
    ++v5;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  for (k = (uint64_t **)v102; k; k = (uint64_t **)*k)
  {
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)" - ", 3);
    v68 = *((char *)k + 39);
    if (v68 >= 0)
      v69 = (uint64_t)(k + 2);
    else
      v69 = (uint64_t)k[2];
    if (v68 >= 0)
      v70 = *((unsigned __int8 *)k + 39);
    else
      v70 = (uint64_t)k[3];
    v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, v69, v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)" (raw score=", 12);
    v72 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)")\n", 2);
  }
  v73 = SNLPOSLoggerForCategory(8);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    std::stringbuf::str();
    v74 = (v99[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? v99
        : (std::string *)v99[0].__r_.__value_.__r.__words[0];
    LODWORD(v107.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
    WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
    HIWORD(v107.__r_.__value_.__r.__words[2]) = 2080;
    v108 = v74;
    _os_log_impl(&dword_1C2196000, v73, OS_LOG_TYPE_DEBUG, "[%s] %sThese intents were all below-threshold:\n%s", (uint8_t *)&v107, 0x20u);
    if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99[0].__r_.__value_.__l.__data_);
  }
  snlp::ssu::similarity::SSUSimilaritySearchApp::sortAndTruncateResults((uint64_t)this, (uint64_t *)&v104);
  v75 = v104;
  for (m = v105; v75 != m; v75 += 12)
  {
    v77 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      v78 = (std::string::size_type)v75;
      if (SHIBYTE(v75->__r_.__value_.__r.__words[2]) < 0)
        v78 = v75->__r_.__value_.__r.__words[0];
      snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString(&v75[1], v99);
      v79 = v99;
      if ((v99[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v79 = (std::string *)v99[0].__r_.__value_.__r.__words[0];
      size = v75[1].__r_.__value_.__l.__size_;
      v81 = v75[1].__r_.__value_.__r.__words[2];
      v82 = *(float *)&v75[10].__r_.__value_.__l.__data_;
      v83 = *(float *)&v75[11].__r_.__value_.__r.__words[2];
      LODWORD(v107.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)v107.__r_.__value_.__r.__words + 4) = v78;
      WORD2(v107.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v107.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v79;
      HIWORD(v107.__r_.__value_.__r.__words[2]) = 2048;
      v108 = (std::string *)size;
      *(_WORD *)v109 = 2048;
      *(_QWORD *)&v109[2] = v81;
      v110 = 2048;
      v111 = v82;
      v112 = 2048;
      v113 = v83;
      _os_log_impl(&dword_1C2196000, v77, OS_LOG_TYPE_DEBUG, "Returning app result for intent %s with batchType=%s, batchIndex=%lu, encodingIndexWithinBatch=%lu, similarityScore=%f, calibratedScore=%f", (uint8_t *)&v107, 0x3Eu);
      if (SHIBYTE(v99[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v99[0].__r_.__value_.__l.__data_);
    }
  }
  if (*((_BYTE *)this + 328))
  {
    v84 = *((float *)this + 72);
    v85 = 1;
  }
  else
  {
    v85 = 0;
    v84 = 0.0;
  }
  v86 = a2;
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v87 = v104;
  v88 = v105;
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v107.__r_.__value_.__s.__data_[8] = 0;
  if (v105 != v104)
  {
    v89 = 0x8E38E38E38E38E39 * (((char *)v105 - (char *)v104) >> 5);
    if (v89 > 0xE38E38E38E38E3)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v89);
    v91 = 0;
    *a2 = v90;
    a2[1] = v90;
    a2[2] = &v90[288 * v92];
    do
    {
      std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>((std::string *)&v90[v91 * 24], (__int128 *)&v87[v91]);
      v91 += 12;
    }
    while (&v87[v91] != v88);
    v86 = a2;
    a2[1] = &v90[v91 * 24];
  }
  *((_DWORD *)v86 + 6) = *((_DWORD *)this + 90);
  *((double *)v86 + 4) = v84;
  *((_BYTE *)v86 + 40) = v85;
  *(_QWORD *)buf = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
  if (v132 < 0)
    operator delete(v131);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3BB9A90](v133);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)v101);
  *(_QWORD *)buf = &v104;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1C22ED59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::ostringstream::~ostringstream((uint64_t)&a63);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a41);
  a63 = (uint64_t)&a46;
  std::vector<snlp::ssu::similarity::SSUAppResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  _Unwind_Resume(a1);
}

float snlp::ssu::similarity::SSUSimilaritySearchApp::getHighestNegativeScoreClipped(snlp::ssu::similarity::SSUSimilaritySearchApp *this)
{
  float v2;
  float v3;
  NSObject *v4;
  void **v5;
  NSObject *v6;
  double v7;
  void *__p[2];
  char v10;
  uint8_t buf[4];
  double v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  uint8_t v21[4];
  _BYTE v22[12];
  uint64_t v23;
  void *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  void *v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 328))
  {
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)v21, (snlp::ssu::similarity::SSUSimilaritySearchApp *)((char *)this + 72));
    v2 = v28;
    v3 = fmaxf(*((float *)this + 10), v28);
    v4 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString(v21, __p);
      v5 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 134219010;
      v12 = v2;
      v13 = 2080;
      v14 = v5;
      v15 = 2048;
      v16 = *(_QWORD *)&v22[4];
      v17 = 2048;
      v18 = v23;
      v19 = 2048;
      v20 = v3;
      _os_log_impl(&dword_1C2196000, v4, OS_LOG_TYPE_DEBUG, "Highest matching negative example has score %f (batch type %s, batch index %lu, encoding index %lu). Using max(negativeScoreClipMinimum, score) = %f.", buf, 0x34u);
      if (v10 < 0)
        operator delete(__p[0]);
    }
    if (v31 && v30 < 0)
      operator delete(v29);
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v27);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
    if (v25 < 0)
      operator delete(v24);
  }
  else
  {
    v3 = *((float *)this + 10);
    v6 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *((float *)this + 10);
      *(_DWORD *)v21 = 134217984;
      *(double *)v22 = v7;
      _os_log_impl(&dword_1C2196000, v6, OS_LOG_TYPE_DEBUG, "There is no negative example. Using minimum score %f.", v21, 0xCu);
    }
  }
  return v3;
}

void sub_1C22ED8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  snlp::ssu::similarity::SSUMatchInfo::~SSUMatchInfo((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *snlp::ssu::similarity::SSUSimilaritySearchApp::batchTypeString@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  const char *v5;

  result = std::string::basic_string[abi:ne180100]<0>(a2, "UNKNOWN");
  if (*a1 == 1)
  {
    v5 = "GLOBAL";
  }
  else
  {
    if (*a1)
      return result;
    v5 = "APP";
  }
  return (_QWORD *)MEMORY[0x1C3BB9634](a2, v5);
}

void sub_1C22ED938(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::buildAppResult(uint64_t a1@<X0>, float *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  float v10;
  NSObject *v11;
  float v12;
  double v13;
  double v14;
  const char *v15;
  double v16;
  double v17;
  float v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  _BOOL4 v22;
  const char *v23;
  const char *v24;
  std::string v25;
  double v26;
  __int16 v27;
  double v28;
  __int16 v29;
  _QWORD v30[3];
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  char v36;
  float v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = a2[54];
  if (v10 <= *(float *)(a1 + 24))
  {
    v12 = 1.0 / (expf(-(float)(*(float *)(a1 + 8) * (float)(v10 - a5))) + 1.0);
    v11 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v16 = a2[54];
      v17 = *(float *)(a1 + 8);
      LODWORD(v25.__r_.__value_.__l.__data_) = 134218752;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v12;
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      v26 = a5;
      v27 = 2048;
      v28 = v17;
      v15 = "Computed calibrated score %f using match similarity score %f, highestNegativeScoreClipped %f and sigmoid param %f.";
      goto LABEL_6;
    }
  }
  else
  {
    v11 = SNLPOSLoggerForCategory(8);
    v12 = 1.0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v13 = a2[54];
      v14 = *(float *)(a1 + 24);
      LODWORD(v25.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      v26 = v13;
      v27 = 2048;
      v28 = v14;
      v15 = "[%s] %sThe match similarity score (%f) is above the exact match threshold (%f). Setting calibratedScore=1.0.";
LABEL_6:
      _os_log_impl(&dword_1C2196000, v11, OS_LOG_TYPE_DEBUG, v15, (uint8_t *)&v25, 0x2Au);
    }
  }
  if (*(_BYTE *)a1 && *(_BYTE *)(a1 + 20))
  {
    v18 = *(float *)(a1 + 16);
    v19 = SNLPOSLoggerForCategory(8);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(v25.__r_.__value_.__l.__data_) = 134217984;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v18;
      _os_log_impl(&dword_1C2196000, v19, OS_LOG_TYPE_DEBUG, "Using APP_SHORTCUT always-trigger threshold (%f) since app is in allowlist", (uint8_t *)&v25, 0xCu);
    }
    v20 = 1;
  }
  else
  {
    v20 = 0;
    v18 = *(float *)(a1 + 12);
  }
  v21 = SNLPOSLoggerForCategory(8);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG);
  if (v12 <= v18)
  {
    if (v22)
    {
      *(double *)&v24 = COERCE_DOUBLE("FALSE");
      LODWORD(v25.__r_.__value_.__l.__data_) = 134218498;
      *(double *)((char *)v25.__r_.__value_.__r.__words + 4) = v12;
      if (v20)
        *(double *)&v24 = COERCE_DOUBLE("TRUE");
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2048;
      *(double *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v18;
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2080;
      v26 = *(double *)&v24;
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEBUG, "Not emitting an app result since the match calibrated score (%f) is below the threshold (%f, useAppShortcutAlwaysTriggerThreshold=%s)", (uint8_t *)&v25, 0x20u);
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 288) = 0;
  }
  else
  {
    if (v22)
    {
      v23 = "FALSE";
      LODWORD(v25.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)"SSU";
      WORD2(v25.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"[insights-snlp-ssu]: ";
      if (v20)
        v23 = "TRUE";
      HIWORD(v25.__r_.__value_.__r.__words[2]) = 2048;
      v26 = v12;
      v27 = 2048;
      v28 = v18;
      v29 = 2080;
      v30[0] = v23;
      _os_log_impl(&dword_1C2196000, v21, OS_LOG_TYPE_DEBUG, "[%s] %sEmitting an app result since the match calibrated score (%f) is above the threshold (%f, useAppShortcutAlwaysTriggerThreshold=%s)", (uint8_t *)&v25, 0x34u);
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v25 = *(std::string *)a3;
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&v26, (const snlp::ssu::similarity::SSUMatchInfo *)a2);
    v37 = v12;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)a4, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
    else
      *(std::string *)a4 = v25;
    snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)(a4 + 24), (const snlp::ssu::similarity::SSUMatchInfo *)&v26);
    *(float *)(a4 + 280) = v37;
    *(_BYTE *)(a4 + 288) = 1;
    if (v36 && v35 < 0)
      operator delete(__p);
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v33);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v32);
    if (v31 < 0)
      operator delete(*(void **)((char *)v30 + 4));
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1C22EDD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  snlp::ssu::similarity::SSUAppResult::~SSUAppResult(&__p);
  _Unwind_Resume(a1);
}

float std::allocator<snlp::ssu::similarity::SSUAppResult>::construct[abi:ne180100]<snlp::ssu::similarity::SSUAppResult,snlp::ssu::similarity::SSUAppResult&>(std::string *this, __int128 *a2)
{
  __int128 v4;
  float result;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  snlp::ssu::similarity::SSUMatchInfo::SSUMatchInfo((snlp::ssu::similarity::SSUMatchInfo *)&this[1], (const snlp::ssu::similarity::SSUMatchInfo *)((char *)a2 + 24));
  result = *((float *)a2 + 70);
  *(float *)&this[11].__r_.__value_.__r.__words[2] = result;
  return result;
}

void sub_1C22EDE14(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<snlp::ssu::similarity::SSUAppResult,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 288))
  {
    if (*(_BYTE *)(a1 + 272) && *(char *)(a1 + 271) < 0)
      operator delete(*(void **)(a1 + 248));
    std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 144);
    std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](a1 + 72);
    if (*(char *)(a1 + 71) < 0)
      operator delete(*(void **)(a1 + 48));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

void snlp::ssu::similarity::SSUSimilaritySearchApp::sortAndTruncateResults(uint64_t a1, uint64_t *a2)
{
  const void **v4;
  const void **v5;
  uint64_t v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  void *v10;
  BOOL v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t *v27;

  v4 = (const void **)*a2;
  v5 = (const void **)a2[1];
  v6 = (uint64_t)v5 - *a2;
  v7 = 0x8E38E38E38E38E39 * (v6 >> 5);
  if (v6 < 1)
  {
LABEL_5:
    v12 = 0;
    v9 = 0;
  }
  else
  {
    v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v9 = 0x8E38E38E38E38E39 * (v6 >> 5);
    while (1)
    {
      v10 = operator new(288 * v9, v8);
      if (v10)
        break;
      v11 = v9 > 1;
      v9 >>= 1;
      if (!v11)
        goto LABEL_5;
    }
    v12 = v10;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v4, v5, (uint64_t)&v23, v7, (uint64_t)v12, v9);
  if (v12)
    operator delete(v12);
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *a2;
  v15 = a2[1];
  if (0x8E38E38E38E38E39 * ((v15 - *a2) >> 5) > v13)
  {
    v16 = v14 + 288 * v13;
    if (v15 != v16)
    {
      do
      {
        v15 -= 288;
        std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](v15);
      }
      while (v15 != v16);
      v14 = *a2;
    }
    a2[1] = v16;
    v17 = *(int64x2_t *)(a2 + 1);
    v18 = vshrq_n_s64(vsubq_s64(v17, vdupq_n_s64(v14)), 5uLL);
    v19 = 0x8E38E38E38E38E39 * v18.i64[0];
    v20 = v19;
    if (0x8E38E38E38E38E39 * v18.i64[1] > v19)
    {
      v27 = a2 + 2;
      if (v17.i64[0] == v14)
      {
        v21 = 0;
        v22 = 0;
      }
      else
      {
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(v19);
      }
      v23 = v21;
      v24 = &v21[288 * v20];
      v25 = v24;
      v26 = &v21[288 * v22];
      std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer(a2, &v23);
      std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer((uint64_t)&v23);
    }
  }
}

void sub_1C22EE05C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1C22EE040);
}

void sub_1C22EE06C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::similarity::SSUAppResult>>(unint64_t a1)
{
  if (a1 >= 0xE38E38E38E38E4)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(288 * a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  const void **v6;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  const void **v15;
  uint64_t v16;
  char *v17;
  const void **v18;
  const void **v19;
  __int128 v20;
  const void **v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  const void *v32;
  void **v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  int v41;
  int v42;
  __int128 v43;
  uint64_t v44;
  void **v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  void **v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  void **v66;
  __int128 v67;
  uint64_t v68;
  void *v69[2];
  const void *v70;
  __int128 v71;
  const void *v72;
  __int128 v73;
  const void *v74;
  __int128 v75;
  const void *v76;
  uint64_t v77;
  char v78;
  char v79;
  __int128 v80;
  __int128 v81;
  const void *v82;
  __int128 v83;
  const void *v84;
  char v85;
  int v86;
  __n128 __p;
  const void *v88;
  char v89;
  int v90;

  if (a4 >= 2)
  {
    v6 = a2;
    if (a4 == 2)
    {
      if (snlp::ssu::similarity::SSUAppResult::operator>(a2 - 36, a1))
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((uint64_t)a1, (__int128 *)v6 - 18);
    }
    else if ((uint64_t)a4 <= 0)
    {
      if (a1 != a2)
      {
        v15 = a1 + 36;
        if (a1 + 36 != a2)
        {
          v16 = 0;
          v17 = &v79;
          v18 = a1;
          do
          {
            v19 = v15;
            if (snlp::ssu::similarity::SSUAppResult::operator>(v15, v18))
            {
              v20 = *(_OWORD *)v19;
              v70 = v19[2];
              *(_OWORD *)v69 = v20;
              v19[1] = 0;
              v19[2] = 0;
              *v19 = 0;
              v71 = *(_OWORD *)(v18 + 39);
              v72 = v18[41];
              v73 = *((_OWORD *)v18 + 21);
              v74 = v18[44];
              v18[42] = 0;
              v18[43] = 0;
              v18[44] = 0;
              LOBYTE(v75) = 0;
              v78 = 0;
              if (*((_BYTE *)v18 + 424))
              {
                v76 = v18[47];
                v75 = *(_OWORD *)(v18 + 45);
                v18[46] = 0;
                v18[47] = 0;
                v18[45] = 0;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)&v77, (uint64_t *)v18 + 48);
                v78 = 1;
              }
              v21 = v6;
              v79 = 0;
              v85 = 0;
              if (*((_BYTE *)v18 + 520))
              {
                *(_OWORD *)v17 = *((_OWORD *)v18 + 27);
                *((_QWORD *)v17 + 2) = v18[56];
                v18[55] = 0;
                v18[56] = 0;
                v18[54] = 0;
                v80 = *(_OWORD *)(v18 + 57);
                v81 = *(_OWORD *)(v18 + 59);
                v82 = v18[61];
                v18[59] = 0;
                v18[60] = 0;
                v18[61] = 0;
                v22 = *((_OWORD *)v18 + 31);
                v84 = v18[64];
                v83 = v22;
                v18[62] = 0;
                v18[63] = 0;
                v18[64] = 0;
                v85 = 1;
              }
              v23 = v17;
              v86 = *((_DWORD *)v18 + 132);
              __p.n128_u8[0] = 0;
              v89 = 0;
              if (*((_BYTE *)v18 + 560))
              {
                v88 = v18[69];
                __p = *(__n128 *)(v18 + 67);
                v18[69] = 0;
                v18[67] = 0;
                v18[68] = 0;
                v89 = 1;
              }
              v90 = *((_DWORD *)v18 + 142);
              v24 = v16;
              while (1)
              {
                v25 = (char *)a1 + v24;
                v26 = (void **)((char *)a1 + v24 + 288);
                if (*((char *)a1 + v24 + 311) < 0)
                  operator delete(*v26);
                *(_OWORD *)v26 = *(_OWORD *)v25;
                *(const void **)((char *)a1 + v24 + 304) = (const void *)*((_QWORD *)v25 + 2);
                v25[23] = 0;
                *v25 = 0;
                *(_OWORD *)(v25 + 312) = *(_OWORD *)(v25 + 24);
                *((_QWORD *)v25 + 41) = *((_QWORD *)v25 + 5);
                v27 = v25 + 336;
                if (v25[359] < 0)
                  operator delete(*(void **)v27);
                v28 = v25 + 48;
                v29 = (char *)a1 + v24;
                *(_OWORD *)v27 = *(_OWORD *)v28;
                *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
                *((_BYTE *)a1 + v24 + 71) = 0;
                *v28 = 0;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>((uint64_t)a1 + v24 + 360, (__int128 *)((char *)a1 + v24 + 72));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>((uint64_t)(v29 + 432), (__int128 *)v29 + 9);
                *((_DWORD *)v29 + 132) = *((_DWORD *)v29 + 60);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)(v29 + 536), (__n128 *)(v29 + 248));
                *((_DWORD *)v29 + 142) = *((_DWORD *)v29 + 70);
                if (!v24)
                  break;
                v24 -= 288;
                if ((snlp::ssu::similarity::SSUAppResult::operator>((const void **)v69, (const void **)((char *)a1 + v24)) & 1) == 0)
                {
                  v30 = (uint64_t)a1 + v24 + 288;
                  goto LABEL_27;
                }
              }
              v30 = (uint64_t)a1;
LABEL_27:
              v17 = v23;
              v6 = v21;
              if (*(char *)(v30 + 23) < 0)
                operator delete(*(void **)v30);
              v31 = *(_OWORD *)v69;
              *(_QWORD *)(v30 + 16) = v70;
              *(_OWORD *)v30 = v31;
              HIBYTE(v70) = 0;
              LOBYTE(v69[0]) = 0;
              v32 = v72;
              *(_OWORD *)(v30 + 24) = v71;
              *(_QWORD *)(v30 + 40) = v32;
              v33 = (void **)(v30 + 48);
              if (*(char *)(v30 + 71) < 0)
                operator delete(*v33);
              v34 = v73;
              *(_QWORD *)(v30 + 64) = v74;
              *(_OWORD *)v33 = v34;
              HIBYTE(v74) = 0;
              LOBYTE(v73) = 0;
              std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v30 + 72, &v75);
              std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v30 + 144, (__int128 *)v17);
              *(_DWORD *)(v30 + 240) = v86;
              std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v30 + 248, &__p);
              *(_DWORD *)(v30 + 280) = v90;
              if (v89 && SHIBYTE(v88) < 0)
                operator delete((void *)__p.n128_u64[0]);
              std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
              std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v75);
              if (SHIBYTE(v74) < 0)
                operator delete((void *)v73);
              if (SHIBYTE(v70) < 0)
                operator delete(v69[0]);
            }
            v15 = v19 + 36;
            v16 += 288;
            v18 = v19;
          }
          while (v19 + 36 != v6);
        }
      }
    }
    else
    {
      v12 = a4 >> 1;
      v13 = &a1[36 * (a4 >> 1)];
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, &a1[36 * (a4 >> 1)], a3, a4 >> 1, a5);
        v35 = a5 + 288 * v12;
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(&a1[36 * (a4 >> 1)], v6, a3, a4 - v12, v35);
        v69[0] = (void *)a4;
        v36 = a5 + 288 * a4;
        v37 = (uint64_t)(a1 + 18);
        v38 = v35;
        v39 = a5;
        while (v38 != v36)
        {
          v40 = (void **)(v37 - 144);
          v41 = snlp::ssu::similarity::SSUAppResult::operator>((const void **)v38, (const void **)v39);
          v42 = *(char *)(v37 - 121);
          if (v41)
          {
            if (v42 < 0)
              operator delete(*v40);
            v43 = *(_OWORD *)v38;
            *(_QWORD *)(v37 - 128) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v40 = v43;
            *(_BYTE *)(v38 + 23) = 0;
            *(_BYTE *)v38 = 0;
            v44 = *(_QWORD *)(v38 + 40);
            *(_OWORD *)(v37 - 120) = *(_OWORD *)(v38 + 24);
            *(_QWORD *)(v37 - 104) = v44;
            v45 = (void **)(v37 - 96);
            if (*(char *)(v37 - 73) < 0)
              operator delete(*v45);
            v46 = *(_OWORD *)(v38 + 48);
            *(_QWORD *)(v37 - 80) = *(_QWORD *)(v38 + 64);
            *(_OWORD *)v45 = v46;
            *(_BYTE *)(v38 + 71) = 0;
            *(_BYTE *)(v38 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 - 72, (__int128 *)(v38 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37, (__int128 *)(v38 + 144));
            *(_DWORD *)(v37 + 96) = *(_DWORD *)(v38 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + 104, (__n128 *)(v38 + 248));
            *(_DWORD *)(v37 + 136) = *(_DWORD *)(v38 + 280);
            v38 += 288;
          }
          else
          {
            if (v42 < 0)
              operator delete(*v40);
            v47 = *(_OWORD *)v39;
            *(_QWORD *)(v37 - 128) = *(_QWORD *)(v39 + 16);
            *(_OWORD *)v40 = v47;
            *(_BYTE *)(v39 + 23) = 0;
            *(_BYTE *)v39 = 0;
            v48 = *(_QWORD *)(v39 + 40);
            *(_OWORD *)(v37 - 120) = *(_OWORD *)(v39 + 24);
            *(_QWORD *)(v37 - 104) = v48;
            v49 = (void **)(v37 - 96);
            if (*(char *)(v37 - 73) < 0)
              operator delete(*v49);
            v50 = *(_OWORD *)(v39 + 48);
            *(_QWORD *)(v37 - 80) = *(_QWORD *)(v39 + 64);
            *(_OWORD *)v49 = v50;
            *(_BYTE *)(v39 + 71) = 0;
            *(_BYTE *)(v39 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 - 72, (__int128 *)(v39 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37, (__int128 *)(v39 + 144));
            *(_DWORD *)(v37 + 96) = *(_DWORD *)(v39 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + 104, (__n128 *)(v39 + 248));
            *(_DWORD *)(v37 + 136) = *(_DWORD *)(v39 + 280);
            v39 += 288;
          }
          v37 += 288;
          if (v39 == v35)
          {
            if (v38 != v36)
            {
              v51 = 0;
              do
              {
                v52 = v37 + v51;
                v53 = (void **)(v37 + v51 - 144);
                if (*(char *)(v37 + v51 - 121) < 0)
                  operator delete(*v53);
                v54 = v38 + v51;
                v55 = *(_OWORD *)(v38 + v51);
                *(_QWORD *)(v37 + v51 - 128) = *(_QWORD *)(v38 + v51 + 16);
                *(_OWORD *)v53 = v55;
                *(_BYTE *)(v54 + 23) = 0;
                *(_BYTE *)v54 = 0;
                v56 = *(_QWORD *)(v38 + v51 + 40);
                *(_OWORD *)(v52 - 120) = *(_OWORD *)(v38 + v51 + 24);
                *(_QWORD *)(v52 - 104) = v56;
                if (*(char *)(v52 - 73) < 0)
                  operator delete(*(void **)(v52 - 96));
                v57 = v52 - 96;
                v58 = *(_OWORD *)(v54 + 48);
                *(_QWORD *)(v57 + 16) = *(_QWORD *)(v54 + 64);
                *(_OWORD *)v57 = v58;
                *(_BYTE *)(v54 + 71) = 0;
                *(_BYTE *)(v54 + 48) = 0;
                v59 = v37 + v51;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 + v51 - 72, (__int128 *)(v54 + 72));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37 + v51, (__int128 *)(v54 + 144));
                *(_DWORD *)(v59 + 96) = *(_DWORD *)(v54 + 240);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + v51 + 104, (__n128 *)(v54 + 248));
                *(_DWORD *)(v59 + 136) = *(_DWORD *)(v54 + 280);
                v51 += 288;
              }
              while (v54 + 288 != v36);
            }
            goto LABEL_69;
          }
        }
        if (v39 != v35)
        {
          v60 = 0;
          do
          {
            v61 = v37 + v60;
            v62 = (void **)(v37 + v60 - 144);
            if (*(char *)(v37 + v60 - 121) < 0)
              operator delete(*v62);
            v63 = v39 + v60;
            v64 = *(_OWORD *)(v39 + v60);
            *(_QWORD *)(v37 + v60 - 128) = *(_QWORD *)(v39 + v60 + 16);
            *(_OWORD *)v62 = v64;
            *(_BYTE *)(v63 + 23) = 0;
            *(_BYTE *)v63 = 0;
            v65 = *(_QWORD *)(v39 + v60 + 40);
            *(_OWORD *)(v61 - 120) = *(_OWORD *)(v39 + v60 + 24);
            *(_QWORD *)(v61 - 104) = v65;
            v66 = (void **)(v61 - 96);
            if (*(char *)(v61 - 73) < 0)
              operator delete(*v66);
            v67 = *(_OWORD *)(v63 + 48);
            *(_QWORD *)(v61 - 80) = *(_QWORD *)(v63 + 64);
            *(_OWORD *)v66 = v67;
            *(_BYTE *)(v63 + 71) = 0;
            *(_BYTE *)(v63 + 48) = 0;
            v68 = v37 + v60;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v37 + v60 - 72, (__int128 *)(v63 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v37 + v60, (__int128 *)(v63 + 144));
            *(_DWORD *)(v68 + 96) = *(_DWORD *)(v63 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v37 + v60 + 104, (__n128 *)(v63 + 248));
            *(_DWORD *)(v68 + 136) = *(_DWORD *)(v63 + 280);
            v60 += 288;
          }
          while (v63 + 288 != v35);
        }
LABEL_69:
        if (a5)
          std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((unint64_t *)v69, a5);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, &a1[36 * (a4 >> 1)], a3, a4 >> 1, a5, a6);
        v14 = a4 - v12;
        std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v13, v6, a3, v14, a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v13, v6, a3, v12, v14, a5, a6);
      }
    }
  }
}

void sub_1C22EE8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  uint64_t v15;

  if (v15)
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(&a15, v15);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<snlp::ssu::similarity::SSUAppResult>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      v8 = v6 + v7;
      v9 = v6 + v7 - 288;
      v10 = v4 + v7;
      v11 = v4 + v7 - 288;
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(v9 + 16) = *(_QWORD *)(v4 + v7 - 272);
      *(_OWORD *)v9 = v12;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v13 = *(_OWORD *)(v4 + v7 - 264);
      *(_QWORD *)(v8 - 248) = *(_QWORD *)(v4 + v7 - 248);
      *(_OWORD *)(v6 + v7 - 264) = v13;
      v14 = *(_OWORD *)(v4 + v7 - 240);
      *(_QWORD *)(v8 - 224) = *(_QWORD *)(v4 + v7 - 224);
      *(_OWORD *)(v8 - 240) = v14;
      *(_QWORD *)(v10 - 232) = 0;
      *(_QWORD *)(v10 - 224) = 0;
      *(_QWORD *)(v10 - 240) = 0;
      *(_BYTE *)(v6 + v7 - 216) = 0;
      *(_BYTE *)(v8 - 152) = 0;
      if (*(_BYTE *)(v4 + v7 - 152))
      {
        v15 = *(_OWORD *)(v10 - 216);
        *(_QWORD *)(v6 + v7 - 200) = *(_QWORD *)(v10 - 200);
        *(_OWORD *)(v6 + v7 - 216) = v15;
        *(_QWORD *)(v10 - 208) = 0;
        *(_QWORD *)(v10 - 200) = 0;
        *(_QWORD *)(v10 - 216) = 0;
        result = (uint64_t *)std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v8 - 192, (uint64_t *)(v10 - 192));
        *(_BYTE *)(v8 - 152) = 1;
      }
      *(_BYTE *)(v8 - 144) = 0;
      *(_BYTE *)(v8 - 56) = 0;
      if (*(_BYTE *)(v10 - 56))
      {
        v16 = v4 + v7;
        v17 = *(_OWORD *)(v4 + v7 - 144);
        *(_QWORD *)(v8 - 128) = *(_QWORD *)(v4 + v7 - 128);
        *(_OWORD *)(v8 - 144) = v17;
        *(_QWORD *)(v16 - 136) = 0;
        *(_QWORD *)(v16 - 128) = 0;
        *(_QWORD *)(v16 - 144) = 0;
        v18 = v6 + v7;
        *(_OWORD *)(v18 - 120) = *(_OWORD *)(v4 + v7 - 120);
        *(_QWORD *)(v18 - 96) = 0;
        *(_QWORD *)(v18 - 88) = 0;
        *(_QWORD *)(v18 - 104) = 0;
        *(_OWORD *)(v18 - 104) = *(_OWORD *)(v4 + v7 - 104);
        *(_QWORD *)(v18 - 88) = *(_QWORD *)(v4 + v7 - 88);
        *(_QWORD *)(v16 - 104) = 0;
        *(_QWORD *)(v16 - 96) = 0;
        *(_QWORD *)(v16 - 88) = 0;
        v19 = *(_OWORD *)(v4 + v7 - 80);
        *(_QWORD *)(v18 - 64) = *(_QWORD *)(v4 + v7 - 64);
        *(_OWORD *)(v18 - 80) = v19;
        *(_QWORD *)(v16 - 72) = 0;
        *(_QWORD *)(v16 - 64) = 0;
        *(_QWORD *)(v16 - 80) = 0;
        *(_BYTE *)(v8 - 56) = 1;
      }
      v20 = v6 + v7;
      v21 = v4 + v7;
      *(_DWORD *)(v20 - 48) = *(_DWORD *)(v4 + v7 - 48);
      *(_BYTE *)(v6 + v7 - 40) = 0;
      *(_BYTE *)(v20 - 16) = 0;
      if (*(_BYTE *)(v4 + v7 - 16))
      {
        v22 = *(_OWORD *)(v21 - 40);
        *(_QWORD *)(v6 + v7 - 24) = *(_QWORD *)(v21 - 24);
        *(_OWORD *)(v6 + v7 - 40) = v22;
        *(_QWORD *)(v21 - 32) = 0;
        *(_QWORD *)(v21 - 24) = 0;
        *(_QWORD *)(v21 - 40) = 0;
        *(_BYTE *)(v20 - 16) = 1;
      }
      *(_DWORD *)(v20 - 8) = *(_DWORD *)(v21 - 8);
      v7 -= 288;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v23 = *v3;
  *v3 = v6;
  a2[1] = v23;
  v24 = v3[1];
  v3[1] = a2[2];
  a2[2] = v24;
  v25 = v3[2];
  v3[2] = a2[3];
  a2[3] = v25;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<snlp::ssu::similarity::SSUAppResult>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 288;
    std::allocator<snlp::ssu::similarity::SSUAppResult>::destroy[abi:ne180100](i - 288);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  uint64_t v7;
  void **v8;
  __int128 v9;
  void *v10[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  int v28;
  __n128 __p;
  uint64_t v30;
  char v31;
  int v32;

  *(_OWORD *)v10 = *(_OWORD *)a1;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v12 = *(_OWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v14 = *(_OWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  LOBYTE(v16) = 0;
  v19 = 0;
  if (*(_BYTE *)(a1 + 136))
  {
    v16 = *(_OWORD *)(a1 + 72);
    v17 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)&v18, (uint64_t *)(a1 + 96));
    v19 = 1;
  }
  LOBYTE(v20) = 0;
  v27 = 0;
  if (*(_BYTE *)(a1 + 232))
  {
    v20 = *(_OWORD *)(a1 + 144);
    v21 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *(_QWORD *)(a1 + 144) = 0;
    v22 = *(_OWORD *)(a1 + 168);
    v23 = *(_OWORD *)(a1 + 184);
    v24 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    v4 = *(_OWORD *)(a1 + 208);
    v26 = *(_QWORD *)(a1 + 224);
    v25 = v4;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v27 = 1;
  }
  v28 = *(_DWORD *)(a1 + 240);
  __p.n128_u8[0] = 0;
  v31 = 0;
  if (*(_BYTE *)(a1 + 272))
  {
    __p = *(__n128 *)(a1 + 248);
    v30 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)(a1 + 256) = 0;
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    v31 = 1;
  }
  v32 = *(_DWORD *)(a1 + 280);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v5 = (void **)(a1 + 48);
  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v7 = *((_QWORD *)a2 + 5);
  *(_OWORD *)(a1 + 24) = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  v8 = (void **)(a2 + 3);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v5);
  v9 = *(_OWORD *)v8;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v5 = v9;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(a1 + 72, (__int128 *)((char *)a2 + 72));
  std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(a1 + 144, a2 + 9);
  *(_DWORD *)(a1 + 240) = *((_DWORD *)a2 + 60);
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(a1 + 248, (__n128 *)((char *)a2 + 248));
  *(_DWORD *)(a1 + 280) = *((_DWORD *)a2 + 70);
  if (*((char *)a2 + 23) < 0)
    operator delete(*(void **)a2);
  *a2 = *(_OWORD *)v10;
  *((_QWORD *)a2 + 2) = v11;
  *(__int128 *)((char *)a2 + 24) = v12;
  *((_QWORD *)a2 + 5) = v13;
  if (*((char *)a2 + 71) < 0)
    operator delete(*v8);
  *(_OWORD *)v8 = *(_OWORD *)v14;
  *((_QWORD *)a2 + 8) = v15;
  std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>((uint64_t)a2 + 72, &v16);
  std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>((uint64_t)(a2 + 9), &v20);
  *((_DWORD *)a2 + 60) = v28;
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>((uint64_t)a2 + 248, &__p);
  *((_DWORD *)a2 + 70) = v32;
  if (v31 && SHIBYTE(v30) < 0)
    operator delete((void *)__p.n128_u64[0]);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v20);
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v16);
}

float std::__stable_sort_move<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  const void **v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  __int128 v16;
  _DWORD *v17;
  float *v18;
  const void **v19;
  int v20;
  _OWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;
  __int128 v46;
  float result;
  const void **v48;
  uint64_t v49;
  _OWORD *v50;
  const void **v51;
  _OWORD *v52;
  int v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  const void **v60;
  uint64_t v61;
  void **v62;
  __int128 v63;
  const void *v64;
  void **v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  const void **v90;
  uint64_t v91;
  const void **v92;
  _OWORD *v93;
  int v94;
  _OWORD *v95;
  _OWORD *v96;
  _OWORD *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  int v112;
  __int128 v113;
  uint64_t v114;
  __int128 *v115;
  uint64_t v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 *v121;
  __int128 v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  __int128 *v126;
  __int128 v127;
  uint64_t v128;
  const void **v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  const void **v135;
  __int128 v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  const void **v140;
  __int128 v141;

  if (a4)
  {
    v8 = a1;
    if (a4 == 2)
    {
      v19 = a2 - 36;
      v20 = snlp::ssu::similarity::SSUAppResult::operator>(a2 - 36, a1);
      v21 = (_OWORD *)(a5 + 24);
      v22 = (_OWORD *)(a5 + 48);
      v23 = (_OWORD *)(a5 + 72);
      if (v20)
      {
        v24 = *(_OWORD *)v19;
        *(_QWORD *)(a5 + 16) = *(a2 - 34);
        *(_OWORD *)a5 = v24;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *v19 = 0;
        v25 = *(_OWORD *)(a2 - 33);
        *(_QWORD *)(a5 + 40) = *(a2 - 31);
        *v21 = v25;
        v26 = *((_OWORD *)a2 - 15);
        *(_QWORD *)(a5 + 64) = *(a2 - 28);
        *v22 = v26;
        *(a2 - 29) = 0;
        *(a2 - 28) = 0;
        *(a2 - 30) = 0;
        *(_BYTE *)(a5 + 72) = 0;
        *(_BYTE *)(a5 + 136) = 0;
        if (*((_BYTE *)a2 - 152))
        {
          v27 = *(_OWORD *)(a2 - 27);
          *(_QWORD *)(a5 + 88) = *(a2 - 25);
          *v23 = v27;
          *(a2 - 26) = 0;
          *(a2 - 25) = 0;
          *(a2 - 27) = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a2 - 24);
          *(_BYTE *)(a5 + 136) = 1;
        }
        *(_BYTE *)(a5 + 144) = 0;
        *(_BYTE *)(a5 + 232) = 0;
        if (*((_BYTE *)a2 - 56))
        {
          v28 = *((_OWORD *)a2 - 9);
          *(_QWORD *)(a5 + 160) = *(a2 - 16);
          *(_OWORD *)(a5 + 144) = v28;
          *(a2 - 17) = 0;
          *(a2 - 16) = 0;
          *(a2 - 18) = 0;
          *(_OWORD *)(a5 + 168) = *(_OWORD *)(a2 - 15);
          *(_QWORD *)(a5 + 192) = 0;
          *(_QWORD *)(a5 + 200) = 0;
          *(_QWORD *)(a5 + 184) = 0;
          *(_OWORD *)(a5 + 184) = *(_OWORD *)(a2 - 13);
          *(_QWORD *)(a5 + 200) = *(a2 - 11);
          *(a2 - 13) = 0;
          *(a2 - 12) = 0;
          *(a2 - 11) = 0;
          v29 = *((_OWORD *)a2 - 5);
          *(_QWORD *)(a5 + 224) = *(a2 - 8);
          *(_OWORD *)(a5 + 208) = v29;
          *(a2 - 9) = 0;
          *(a2 - 8) = 0;
          *(a2 - 10) = 0;
          *(_BYTE *)(a5 + 232) = 1;
        }
        v30 = *((_DWORD *)a2 - 12);
        *(_BYTE *)(a5 + 248) = 0;
        *(_DWORD *)(a5 + 240) = v30;
        *(_BYTE *)(a5 + 272) = 0;
        if (*((_BYTE *)a2 - 16))
        {
          v31 = *(_OWORD *)(a2 - 5);
          *(_QWORD *)(a5 + 264) = *(a2 - 3);
          *(_OWORD *)(a5 + 248) = v31;
          *(a2 - 4) = 0;
          *(a2 - 3) = 0;
          *(a2 - 5) = 0;
          *(_BYTE *)(a5 + 272) = 1;
        }
        *(_DWORD *)(a5 + 280) = *((_DWORD *)a2 - 2);
        v32 = *(_OWORD *)v8;
        *(_QWORD *)(a5 + 304) = v8[2];
        *(_OWORD *)(a5 + 288) = v32;
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        v33 = *(_OWORD *)(v8 + 3);
        *(_QWORD *)(a5 + 328) = v8[5];
        *(_OWORD *)(a5 + 312) = v33;
        v34 = *((_OWORD *)v8 + 3);
        *(_QWORD *)(a5 + 352) = v8[8];
        *(_OWORD *)(a5 + 336) = v34;
        v8[7] = 0;
        v8[8] = 0;
        v8[6] = 0;
        *(_BYTE *)(a5 + 360) = 0;
        *(_BYTE *)(a5 + 424) = 0;
        if (*((_BYTE *)v8 + 136))
        {
          v35 = *(_OWORD *)(v8 + 9);
          *(_QWORD *)(a5 + 376) = v8[11];
          *(_OWORD *)(a5 + 360) = v35;
          v8[10] = 0;
          v8[11] = 0;
          v8[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 384, (uint64_t *)v8 + 12);
          *(_BYTE *)(a5 + 424) = 1;
        }
        *(_BYTE *)(a5 + 432) = 0;
        *(_BYTE *)(a5 + 520) = 0;
        if (*((_BYTE *)v8 + 232))
        {
          v36 = *((_OWORD *)v8 + 9);
          *(_QWORD *)(a5 + 448) = v8[20];
          *(_OWORD *)(a5 + 432) = v36;
          v8[19] = 0;
          v8[20] = 0;
          v8[18] = 0;
          *(_OWORD *)(a5 + 456) = *(_OWORD *)(v8 + 21);
          *(_QWORD *)(a5 + 480) = 0;
          *(_QWORD *)(a5 + 488) = 0;
          *(_QWORD *)(a5 + 472) = 0;
          *(_OWORD *)(a5 + 472) = *(_OWORD *)(v8 + 23);
          *(_QWORD *)(a5 + 488) = v8[25];
          v8[23] = 0;
          v8[24] = 0;
          v8[25] = 0;
          v37 = *((_OWORD *)v8 + 13);
          *(_QWORD *)(a5 + 512) = v8[28];
          *(_OWORD *)(a5 + 496) = v37;
          v8[27] = 0;
          v8[28] = 0;
          v8[26] = 0;
          *(_BYTE *)(a5 + 520) = 1;
        }
        *(_DWORD *)(a5 + 528) = *((_DWORD *)v8 + 60);
        *(_BYTE *)(a5 + 536) = 0;
        *(_BYTE *)(a5 + 560) = 0;
        if (*((_BYTE *)v8 + 272))
        {
          v38 = *(_OWORD *)(v8 + 31);
          *(_QWORD *)(a5 + 552) = v8[33];
          *(_OWORD *)(a5 + 536) = v38;
          v8[32] = 0;
          v8[33] = 0;
          v8[31] = 0;
          *(_BYTE *)(a5 + 560) = 1;
        }
        v18 = (float *)(v8 + 35);
      }
      else
      {
        v74 = *(_OWORD *)v8;
        *(_QWORD *)(a5 + 16) = v8[2];
        *(_OWORD *)a5 = v74;
        v8[1] = 0;
        v8[2] = 0;
        *v8 = 0;
        v75 = *(_OWORD *)(v8 + 3);
        *(_QWORD *)(a5 + 40) = v8[5];
        *v21 = v75;
        v76 = *((_OWORD *)v8 + 3);
        *(_QWORD *)(a5 + 64) = v8[8];
        *v22 = v76;
        v8[7] = 0;
        v8[8] = 0;
        v8[6] = 0;
        *(_BYTE *)(a5 + 72) = 0;
        *(_BYTE *)(a5 + 136) = 0;
        if (*((_BYTE *)v8 + 136))
        {
          v77 = *(_OWORD *)(v8 + 9);
          *(_QWORD *)(a5 + 88) = v8[11];
          *v23 = v77;
          v8[10] = 0;
          v8[11] = 0;
          v8[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)v8 + 12);
          *(_BYTE *)(a5 + 136) = 1;
        }
        *(_BYTE *)(a5 + 144) = 0;
        *(_BYTE *)(a5 + 232) = 0;
        if (*((_BYTE *)v8 + 232))
        {
          v78 = *((_OWORD *)v8 + 9);
          *(_QWORD *)(a5 + 160) = v8[20];
          *(_OWORD *)(a5 + 144) = v78;
          v8[19] = 0;
          v8[20] = 0;
          v8[18] = 0;
          *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
          *(_QWORD *)(a5 + 192) = 0;
          *(_QWORD *)(a5 + 200) = 0;
          *(_QWORD *)(a5 + 184) = 0;
          *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
          *(_QWORD *)(a5 + 200) = v8[25];
          v8[23] = 0;
          v8[24] = 0;
          v8[25] = 0;
          v79 = *((_OWORD *)v8 + 13);
          *(_QWORD *)(a5 + 224) = v8[28];
          *(_OWORD *)(a5 + 208) = v79;
          v8[27] = 0;
          v8[28] = 0;
          v8[26] = 0;
          *(_BYTE *)(a5 + 232) = 1;
        }
        v80 = *((_DWORD *)v8 + 60);
        *(_BYTE *)(a5 + 248) = 0;
        *(_DWORD *)(a5 + 240) = v80;
        *(_BYTE *)(a5 + 272) = 0;
        if (*((_BYTE *)v8 + 272))
        {
          v81 = *(_OWORD *)(v8 + 31);
          *(_QWORD *)(a5 + 264) = v8[33];
          *(_OWORD *)(a5 + 248) = v81;
          v8[32] = 0;
          v8[33] = 0;
          v8[31] = 0;
          *(_BYTE *)(a5 + 272) = 1;
        }
        *(_DWORD *)(a5 + 280) = *((_DWORD *)v8 + 70);
        v82 = *(_OWORD *)v19;
        *(_QWORD *)(a5 + 304) = *(a2 - 34);
        *(_OWORD *)(a5 + 288) = v82;
        *(a2 - 35) = 0;
        *(a2 - 34) = 0;
        *v19 = 0;
        v83 = *(_OWORD *)(a2 - 33);
        *(_QWORD *)(a5 + 328) = *(a2 - 31);
        *(_OWORD *)(a5 + 312) = v83;
        v84 = *((_OWORD *)a2 - 15);
        *(_QWORD *)(a5 + 352) = *(a2 - 28);
        *(_OWORD *)(a5 + 336) = v84;
        *(a2 - 29) = 0;
        *(a2 - 28) = 0;
        *(a2 - 30) = 0;
        *(_BYTE *)(a5 + 360) = 0;
        *(_BYTE *)(a5 + 424) = 0;
        if (*((_BYTE *)a2 - 152))
        {
          v85 = *(_OWORD *)(a2 - 27);
          *(_QWORD *)(a5 + 376) = *(a2 - 25);
          *(_OWORD *)(a5 + 360) = v85;
          *(a2 - 26) = 0;
          *(a2 - 25) = 0;
          *(a2 - 27) = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 384, (uint64_t *)a2 - 24);
          *(_BYTE *)(a5 + 424) = 1;
        }
        *(_BYTE *)(a5 + 432) = 0;
        *(_BYTE *)(a5 + 520) = 0;
        if (*((_BYTE *)a2 - 56))
        {
          v86 = *((_OWORD *)a2 - 9);
          *(_QWORD *)(a5 + 448) = *(a2 - 16);
          *(_OWORD *)(a5 + 432) = v86;
          *(a2 - 17) = 0;
          *(a2 - 16) = 0;
          *(a2 - 18) = 0;
          *(_OWORD *)(a5 + 456) = *(_OWORD *)(a2 - 15);
          *(_QWORD *)(a5 + 480) = 0;
          *(_QWORD *)(a5 + 488) = 0;
          *(_QWORD *)(a5 + 472) = 0;
          *(_OWORD *)(a5 + 472) = *(_OWORD *)(a2 - 13);
          *(_QWORD *)(a5 + 488) = *(a2 - 11);
          *(a2 - 13) = 0;
          *(a2 - 12) = 0;
          *(a2 - 11) = 0;
          v87 = *((_OWORD *)a2 - 5);
          *(_QWORD *)(a5 + 512) = *(a2 - 8);
          *(_OWORD *)(a5 + 496) = v87;
          *(a2 - 9) = 0;
          *(a2 - 8) = 0;
          *(a2 - 10) = 0;
          *(_BYTE *)(a5 + 520) = 1;
        }
        *(_DWORD *)(a5 + 528) = *((_DWORD *)a2 - 12);
        *(_BYTE *)(a5 + 536) = 0;
        *(_BYTE *)(a5 + 560) = 0;
        if (*((_BYTE *)a2 - 16))
        {
          v88 = *(_OWORD *)(a2 - 5);
          *(_QWORD *)(a5 + 552) = *(a2 - 3);
          *(_OWORD *)(a5 + 536) = v88;
          *(a2 - 4) = 0;
          *(a2 - 3) = 0;
          *(a2 - 5) = 0;
          *(_BYTE *)(a5 + 560) = 1;
        }
        v18 = (float *)(a2 - 1);
      }
      v17 = (_DWORD *)(a5 + 568);
      goto LABEL_79;
    }
    if (a4 == 1)
    {
      v9 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v9;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v10 = *(_OWORD *)(a1 + 3);
      *(_QWORD *)(a5 + 40) = a1[5];
      *(_OWORD *)(a5 + 24) = v10;
      v11 = *((_OWORD *)a1 + 3);
      *(_QWORD *)(a5 + 64) = a1[8];
      *(_OWORD *)(a5 + 48) = v11;
      a1[7] = 0;
      a1[8] = 0;
      a1[6] = 0;
      *(_BYTE *)(a5 + 72) = 0;
      *(_BYTE *)(a5 + 136) = 0;
      if (*((_BYTE *)a1 + 136))
      {
        v12 = *(_OWORD *)(a1 + 9);
        *(_QWORD *)(a5 + 88) = a1[11];
        *(_OWORD *)(a5 + 72) = v12;
        a1[10] = 0;
        a1[11] = 0;
        a1[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a1 + 12);
        *(_BYTE *)(a5 + 136) = 1;
      }
      *(_BYTE *)(a5 + 144) = 0;
      *(_BYTE *)(a5 + 232) = 0;
      if (*((_BYTE *)v8 + 232))
      {
        v13 = *((_OWORD *)v8 + 9);
        *(_QWORD *)(a5 + 160) = v8[20];
        *(_OWORD *)(a5 + 144) = v13;
        v8[19] = 0;
        v8[20] = 0;
        v8[18] = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
        *(_QWORD *)(a5 + 192) = 0;
        *(_QWORD *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 184) = 0;
        *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
        *(_QWORD *)(a5 + 200) = v8[25];
        v8[23] = 0;
        v8[24] = 0;
        v8[25] = 0;
        v14 = *((_OWORD *)v8 + 13);
        *(_QWORD *)(a5 + 224) = v8[28];
        *(_OWORD *)(a5 + 208) = v14;
        v8[27] = 0;
        v8[28] = 0;
        v8[26] = 0;
        *(_BYTE *)(a5 + 232) = 1;
      }
      v15 = *((_DWORD *)v8 + 60);
      *(_BYTE *)(a5 + 248) = 0;
      *(_DWORD *)(a5 + 240) = v15;
      *(_BYTE *)(a5 + 272) = 0;
      if (*((_BYTE *)v8 + 272))
      {
        v16 = *(_OWORD *)(v8 + 31);
        *(_QWORD *)(a5 + 264) = v8[33];
        *(_OWORD *)(a5 + 248) = v16;
        v8[32] = 0;
        v8[33] = 0;
        v8[31] = 0;
        *(_BYTE *)(a5 + 272) = 1;
      }
      v17 = (_DWORD *)(a5 + 280);
      v18 = (float *)(v8 + 35);
LABEL_79:
      result = *v18;
      *v17 = *(_DWORD *)v18;
      return result;
    }
    if ((uint64_t)a4 > 8)
    {
      v90 = &a1[36 * (a4 >> 1)];
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v90, a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(&v8[36 * (a4 >> 1)], a2, a3, a4 - (a4 >> 1), a5 + 288 * (a4 >> 1), a4 - (a4 >> 1));
      v91 = a5 + 144;
      v92 = v90;
      while (v92 != a2)
      {
        v93 = (_OWORD *)(v91 - 144);
        v94 = snlp::ssu::similarity::SSUAppResult::operator>(v92, v8);
        v95 = (_OWORD *)(v91 - 120);
        v96 = (_OWORD *)(v91 - 96);
        v97 = (_OWORD *)(v91 - 72);
        if (v94)
        {
          v98 = *(_OWORD *)v92;
          *(_QWORD *)(v91 - 128) = v92[2];
          *v93 = v98;
          v92[1] = 0;
          v92[2] = 0;
          *v92 = 0;
          v99 = *(_OWORD *)(v92 + 3);
          *(_QWORD *)(v91 - 104) = v92[5];
          *v95 = v99;
          v100 = *((_OWORD *)v92 + 3);
          *(_QWORD *)(v91 - 80) = v92[8];
          *v96 = v100;
          v92[7] = 0;
          v92[8] = 0;
          v92[6] = 0;
          *(_BYTE *)(v91 - 72) = 0;
          *(_BYTE *)(v91 - 8) = 0;
          if (*((_BYTE *)v92 + 136))
          {
            v101 = *(_OWORD *)(v92 + 9);
            *(_QWORD *)(v91 - 56) = v92[11];
            *v97 = v101;
            v92[10] = 0;
            v92[11] = 0;
            v92[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v91 - 48, (uint64_t *)v92 + 12);
            *(_BYTE *)(v91 - 8) = 1;
          }
          *(_BYTE *)v91 = 0;
          *(_BYTE *)(v91 + 88) = 0;
          if (*((_BYTE *)v92 + 232))
          {
            v102 = *((_OWORD *)v92 + 9);
            *(_QWORD *)(v91 + 16) = v92[20];
            *(_OWORD *)v91 = v102;
            v92[19] = 0;
            v92[20] = 0;
            v92[18] = 0;
            *(_OWORD *)(v91 + 24) = *(_OWORD *)(v92 + 21);
            *(_QWORD *)(v91 + 48) = 0;
            *(_QWORD *)(v91 + 56) = 0;
            *(_QWORD *)(v91 + 40) = 0;
            *(_OWORD *)(v91 + 40) = *(_OWORD *)(v92 + 23);
            *(_QWORD *)(v91 + 56) = v92[25];
            v92[23] = 0;
            v92[24] = 0;
            v92[25] = 0;
            v103 = *((_OWORD *)v92 + 13);
            *(_QWORD *)(v91 + 80) = v92[28];
            *(_OWORD *)(v91 + 64) = v103;
            v92[27] = 0;
            v92[28] = 0;
            v92[26] = 0;
            *(_BYTE *)(v91 + 88) = 1;
          }
          v104 = *((_DWORD *)v92 + 60);
          *(_BYTE *)(v91 + 104) = 0;
          *(_DWORD *)(v91 + 96) = v104;
          *(_BYTE *)(v91 + 128) = 0;
          if (*((_BYTE *)v92 + 272))
          {
            v105 = *(_OWORD *)(v92 + 31);
            *(_QWORD *)(v91 + 120) = v92[33];
            *(_OWORD *)(v91 + 104) = v105;
            v92[32] = 0;
            v92[33] = 0;
            v92[31] = 0;
            *(_BYTE *)(v91 + 128) = 1;
          }
          result = *((float *)v92 + 70);
          *(float *)(v91 + 136) = result;
          v92 += 36;
        }
        else
        {
          v106 = *(_OWORD *)v8;
          *(_QWORD *)(v91 - 128) = v8[2];
          *v93 = v106;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          v107 = *(_OWORD *)(v8 + 3);
          *(_QWORD *)(v91 - 104) = v8[5];
          *v95 = v107;
          v108 = *((_OWORD *)v8 + 3);
          *(_QWORD *)(v91 - 80) = v8[8];
          *v96 = v108;
          v8[7] = 0;
          v8[8] = 0;
          v8[6] = 0;
          *(_BYTE *)(v91 - 72) = 0;
          *(_BYTE *)(v91 - 8) = 0;
          if (*((_BYTE *)v8 + 136))
          {
            v109 = *(_OWORD *)(v8 + 9);
            *(_QWORD *)(v91 - 56) = v8[11];
            *v97 = v109;
            v8[10] = 0;
            v8[11] = 0;
            v8[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v91 - 48, (uint64_t *)v8 + 12);
            *(_BYTE *)(v91 - 8) = 1;
          }
          *(_BYTE *)v91 = 0;
          *(_BYTE *)(v91 + 88) = 0;
          if (*((_BYTE *)v8 + 232))
          {
            v110 = *((_OWORD *)v8 + 9);
            *(_QWORD *)(v91 + 16) = v8[20];
            *(_OWORD *)v91 = v110;
            v8[19] = 0;
            v8[20] = 0;
            v8[18] = 0;
            *(_OWORD *)(v91 + 24) = *(_OWORD *)(v8 + 21);
            *(_QWORD *)(v91 + 48) = 0;
            *(_QWORD *)(v91 + 56) = 0;
            *(_QWORD *)(v91 + 40) = 0;
            *(_OWORD *)(v91 + 40) = *(_OWORD *)(v8 + 23);
            *(_QWORD *)(v91 + 56) = v8[25];
            v8[23] = 0;
            v8[24] = 0;
            v8[25] = 0;
            v111 = *((_OWORD *)v8 + 13);
            *(_QWORD *)(v91 + 80) = v8[28];
            *(_OWORD *)(v91 + 64) = v111;
            v8[27] = 0;
            v8[28] = 0;
            v8[26] = 0;
            *(_BYTE *)(v91 + 88) = 1;
          }
          v112 = *((_DWORD *)v8 + 60);
          *(_BYTE *)(v91 + 104) = 0;
          *(_DWORD *)(v91 + 96) = v112;
          *(_BYTE *)(v91 + 128) = 0;
          if (*((_BYTE *)v8 + 272))
          {
            v113 = *(_OWORD *)(v8 + 31);
            *(_QWORD *)(v91 + 120) = v8[33];
            *(_OWORD *)(v91 + 104) = v113;
            v8[32] = 0;
            v8[33] = 0;
            v8[31] = 0;
            *(_BYTE *)(v91 + 128) = 1;
          }
          result = *((float *)v8 + 70);
          *(float *)(v91 + 136) = result;
          v8 += 36;
        }
        v91 += 288;
        if (v8 == v90)
        {
          if (v92 != a2)
          {
            v114 = 0;
            do
            {
              v115 = (__int128 *)&v92[v114];
              v116 = v91 + v114 * 8;
              v117 = *(_OWORD *)&v92[v114];
              *(_QWORD *)(v116 - 128) = v92[v114 + 2];
              *(_OWORD *)(v116 - 144) = v117;
              *((_QWORD *)v115 + 1) = 0;
              *((_QWORD *)v115 + 2) = 0;
              *(_QWORD *)v115 = 0;
              v118 = *(_OWORD *)&v92[v114 + 3];
              *(_QWORD *)(v116 - 104) = v92[v114 + 5];
              *(_OWORD *)(v116 - 120) = v118;
              v119 = *(_OWORD *)&v92[v114 + 6];
              *(_QWORD *)(v116 - 80) = v92[v114 + 8];
              *(_OWORD *)(v116 - 96) = v119;
              *((_QWORD *)v115 + 7) = 0;
              *((_QWORD *)v115 + 8) = 0;
              *((_QWORD *)v115 + 6) = 0;
              *(_BYTE *)(v91 + v114 * 8 - 72) = 0;
              *(_BYTE *)(v116 - 8) = 0;
              if (LOBYTE(v92[v114 + 17]))
              {
                v120 = *(__int128 *)((char *)v115 + 72);
                *(_QWORD *)(v91 + v114 * 8 - 56) = *((_QWORD *)v115 + 11);
                *(_OWORD *)(v91 + v114 * 8 - 72) = v120;
                *((_QWORD *)v115 + 10) = 0;
                *((_QWORD *)v115 + 11) = 0;
                *((_QWORD *)v115 + 9) = 0;
                std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v116 - 48, (uint64_t *)v115 + 12);
                *(_BYTE *)(v116 - 8) = 1;
              }
              *(_BYTE *)v116 = 0;
              *(_BYTE *)(v116 + 88) = 0;
              if (*((_BYTE *)v115 + 232))
              {
                v121 = (__int128 *)&v92[v114];
                v122 = *(_OWORD *)&v92[v114 + 18];
                *(_QWORD *)(v116 + 16) = v92[v114 + 20];
                *(_OWORD *)v116 = v122;
                *((_QWORD *)v121 + 19) = 0;
                *((_QWORD *)v121 + 20) = 0;
                *((_QWORD *)v121 + 18) = 0;
                v123 = v91 + v114 * 8;
                *(_OWORD *)(v123 + 24) = *(_OWORD *)&v92[v114 + 21];
                *(_QWORD *)(v123 + 48) = 0;
                *(_QWORD *)(v123 + 56) = 0;
                *(_QWORD *)(v123 + 40) = 0;
                *(_OWORD *)(v123 + 40) = *(_OWORD *)&v92[v114 + 23];
                *(_QWORD *)(v123 + 56) = v92[v114 + 25];
                *((_QWORD *)v121 + 23) = 0;
                *((_QWORD *)v121 + 24) = 0;
                *((_QWORD *)v121 + 25) = 0;
                v124 = *(_OWORD *)&v92[v114 + 26];
                *(_QWORD *)(v123 + 80) = v92[v114 + 28];
                *(_OWORD *)(v123 + 64) = v124;
                *((_QWORD *)v121 + 27) = 0;
                *((_QWORD *)v121 + 28) = 0;
                *((_QWORD *)v121 + 26) = 0;
                *(_BYTE *)(v116 + 88) = 1;
              }
              v125 = v91 + v114 * 8;
              *(_DWORD *)(v125 + 96) = *((_DWORD *)v115 + 60);
              *(_BYTE *)(v91 + v114 * 8 + 104) = 0;
              *(_BYTE *)(v125 + 128) = 0;
              if (*((_BYTE *)v115 + 272))
              {
                v126 = (__int128 *)&v92[v114];
                v127 = *(_OWORD *)&v92[v114 + 31];
                *(_QWORD *)(v91 + v114 * 8 + 120) = v92[v114 + 33];
                *(_OWORD *)(v91 + v114 * 8 + 104) = v127;
                *((_QWORD *)v126 + 32) = 0;
                *((_QWORD *)v126 + 33) = 0;
                *((_QWORD *)v126 + 31) = 0;
                *(_BYTE *)(v125 + 128) = 1;
              }
              result = *((float *)v115 + 70);
              *(float *)(v125 + 136) = result;
              v114 += 36;
            }
            while (v115 + 18 != (__int128 *)a2);
          }
          return result;
        }
      }
      if (v8 != v90)
      {
        v128 = 0;
        do
        {
          v129 = &v8[v128];
          v130 = v91 + v128 * 8;
          v131 = *(_OWORD *)&v8[v128];
          *(_QWORD *)(v130 - 128) = v8[v128 + 2];
          *(_OWORD *)(v130 - 144) = v131;
          v129[1] = 0;
          v129[2] = 0;
          *v129 = 0;
          v132 = *(_OWORD *)&v8[v128 + 3];
          *(_QWORD *)(v130 - 104) = v8[v128 + 5];
          *(_OWORD *)(v130 - 120) = v132;
          v133 = *(_OWORD *)&v8[v128 + 6];
          *(_QWORD *)(v130 - 80) = v8[v128 + 8];
          *(_OWORD *)(v130 - 96) = v133;
          v129[7] = 0;
          v129[8] = 0;
          v129[6] = 0;
          *(_BYTE *)(v91 + v128 * 8 - 72) = 0;
          *(_BYTE *)(v130 - 8) = 0;
          if (LOBYTE(v8[v128 + 17]))
          {
            v134 = *(_OWORD *)(v129 + 9);
            *(_QWORD *)(v91 + v128 * 8 - 56) = v129[11];
            *(_OWORD *)(v91 + v128 * 8 - 72) = v134;
            v129[10] = 0;
            v129[11] = 0;
            v129[9] = 0;
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v130 - 48, (uint64_t *)v129 + 12);
            *(_BYTE *)(v130 - 8) = 1;
          }
          *(_BYTE *)v130 = 0;
          *(_BYTE *)(v130 + 88) = 0;
          if (*((_BYTE *)v129 + 232))
          {
            v135 = &v8[v128];
            v136 = *(_OWORD *)&v8[v128 + 18];
            *(_QWORD *)(v130 + 16) = v8[v128 + 20];
            *(_OWORD *)v130 = v136;
            v135[19] = 0;
            v135[20] = 0;
            v135[18] = 0;
            v137 = v91 + v128 * 8;
            *(_OWORD *)(v137 + 24) = *(_OWORD *)&v8[v128 + 21];
            *(_QWORD *)(v137 + 48) = 0;
            *(_QWORD *)(v137 + 56) = 0;
            *(_QWORD *)(v137 + 40) = 0;
            *(_OWORD *)(v137 + 40) = *(_OWORD *)&v8[v128 + 23];
            *(_QWORD *)(v137 + 56) = v8[v128 + 25];
            v135[23] = 0;
            v135[24] = 0;
            v135[25] = 0;
            v138 = *(_OWORD *)&v8[v128 + 26];
            *(_QWORD *)(v137 + 80) = v8[v128 + 28];
            *(_OWORD *)(v137 + 64) = v138;
            v135[27] = 0;
            v135[28] = 0;
            v135[26] = 0;
            *(_BYTE *)(v130 + 88) = 1;
          }
          v139 = v91 + v128 * 8;
          *(_DWORD *)(v139 + 96) = *((_DWORD *)v129 + 60);
          *(_BYTE *)(v91 + v128 * 8 + 104) = 0;
          *(_BYTE *)(v139 + 128) = 0;
          if (*((_BYTE *)v129 + 272))
          {
            v140 = &v8[v128];
            v141 = *(_OWORD *)&v8[v128 + 31];
            *(_QWORD *)(v91 + v128 * 8 + 120) = v8[v128 + 33];
            *(_OWORD *)(v91 + v128 * 8 + 104) = v141;
            v140[32] = 0;
            v140[33] = 0;
            v140[31] = 0;
            *(_BYTE *)(v139 + 128) = 1;
          }
          result = *((float *)v129 + 70);
          *(float *)(v139 + 136) = result;
          v128 += 36;
        }
        while (v129 + 36 != v90);
      }
    }
    else if (a1 != a2)
    {
      v39 = *(_OWORD *)a1;
      *(_QWORD *)(a5 + 16) = a1[2];
      *(_OWORD *)a5 = v39;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = 0;
      v40 = *(_OWORD *)(a1 + 3);
      *(_QWORD *)(a5 + 40) = a1[5];
      *(_OWORD *)(a5 + 24) = v40;
      v41 = *((_OWORD *)a1 + 3);
      *(_QWORD *)(a5 + 64) = a1[8];
      *(_OWORD *)(a5 + 48) = v41;
      a1[7] = 0;
      a1[8] = 0;
      a1[6] = 0;
      *(_BYTE *)(a5 + 72) = 0;
      *(_BYTE *)(a5 + 136) = 0;
      if (*((_BYTE *)a1 + 136))
      {
        v42 = *(_OWORD *)(a1 + 9);
        *(_QWORD *)(a5 + 88) = a1[11];
        *(_OWORD *)(a5 + 72) = v42;
        a1[10] = 0;
        a1[11] = 0;
        a1[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(a5 + 96, (uint64_t *)a1 + 12);
        *(_BYTE *)(a5 + 136) = 1;
      }
      *(_BYTE *)(a5 + 144) = 0;
      *(_BYTE *)(a5 + 232) = 0;
      if (*((_BYTE *)v8 + 232))
      {
        v43 = *((_OWORD *)v8 + 9);
        *(_QWORD *)(a5 + 160) = v8[20];
        *(_OWORD *)(a5 + 144) = v43;
        v8[19] = 0;
        v8[20] = 0;
        v8[18] = 0;
        *(_OWORD *)(a5 + 168) = *(_OWORD *)(v8 + 21);
        *(_QWORD *)(a5 + 192) = 0;
        *(_QWORD *)(a5 + 200) = 0;
        *(_QWORD *)(a5 + 184) = 0;
        *(_OWORD *)(a5 + 184) = *(_OWORD *)(v8 + 23);
        *(_QWORD *)(a5 + 200) = v8[25];
        v8[23] = 0;
        v8[24] = 0;
        v8[25] = 0;
        v44 = *((_OWORD *)v8 + 13);
        *(_QWORD *)(a5 + 224) = v8[28];
        *(_OWORD *)(a5 + 208) = v44;
        v8[27] = 0;
        v8[28] = 0;
        v8[26] = 0;
        *(_BYTE *)(a5 + 232) = 1;
      }
      v45 = *((_DWORD *)v8 + 60);
      *(_BYTE *)(a5 + 248) = 0;
      *(_DWORD *)(a5 + 240) = v45;
      *(_BYTE *)(a5 + 272) = 0;
      if (*((_BYTE *)v8 + 272))
      {
        v46 = *(_OWORD *)(v8 + 31);
        *(_QWORD *)(a5 + 264) = v8[33];
        *(_OWORD *)(a5 + 248) = v46;
        v8[32] = 0;
        v8[33] = 0;
        v8[31] = 0;
        *(_BYTE *)(a5 + 272) = 1;
      }
      result = *((float *)v8 + 70);
      *(float *)(a5 + 280) = result;
      v48 = v8 + 36;
      if (v8 + 36 != a2)
      {
        v49 = 0;
        v50 = (_OWORD *)a5;
        do
        {
          v51 = v48;
          v52 = v50 + 18;
          v53 = snlp::ssu::similarity::SSUAppResult::operator>(v48, (const void **)v50);
          v54 = (_OWORD *)((char *)v50 + 312);
          v55 = v50 + 21;
          v56 = (_OWORD *)((char *)v50 + 360);
          if (v53)
          {
            *v52 = *v50;
            *((_QWORD *)v50 + 38) = *((_QWORD *)v50 + 2);
            *((_QWORD *)v50 + 1) = 0;
            *((_QWORD *)v50 + 2) = 0;
            *(_QWORD *)v50 = 0;
            *v54 = *(_OWORD *)((char *)v50 + 24);
            *((_QWORD *)v50 + 41) = *((_QWORD *)v50 + 5);
            *v55 = v50[3];
            *((_QWORD *)v50 + 44) = *((_QWORD *)v50 + 8);
            *((_QWORD *)v50 + 7) = 0;
            *((_QWORD *)v50 + 8) = 0;
            *((_QWORD *)v50 + 6) = 0;
            *((_BYTE *)v50 + 360) = 0;
            *((_BYTE *)v50 + 424) = 0;
            if (*((_BYTE *)v50 + 136))
            {
              *v56 = *(_OWORD *)((char *)v50 + 72);
              *((_QWORD *)v50 + 47) = *((_QWORD *)v50 + 11);
              *((_QWORD *)v50 + 10) = 0;
              *((_QWORD *)v50 + 11) = 0;
              *((_QWORD *)v50 + 9) = 0;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)(v50 + 24), (uint64_t *)v50 + 12);
              *((_BYTE *)v50 + 424) = 1;
            }
            *((_BYTE *)v50 + 432) = 0;
            *((_BYTE *)v50 + 520) = 0;
            if (*((_BYTE *)v50 + 232))
            {
              v50[27] = v50[9];
              *((_QWORD *)v50 + 56) = *((_QWORD *)v50 + 20);
              *((_QWORD *)v50 + 19) = 0;
              *((_QWORD *)v50 + 20) = 0;
              *((_QWORD *)v50 + 18) = 0;
              *(_OWORD *)((char *)v50 + 456) = *(_OWORD *)((char *)v50 + 168);
              *(_OWORD *)((char *)v50 + 472) = *(_OWORD *)((char *)v50 + 184);
              *((_QWORD *)v50 + 61) = *((_QWORD *)v50 + 25);
              *((_QWORD *)v50 + 23) = 0;
              *((_QWORD *)v50 + 24) = 0;
              v57 = v50[13];
              *((_QWORD *)v50 + 64) = *((_QWORD *)v50 + 28);
              v50[31] = v57;
              *((_QWORD *)v50 + 25) = 0;
              *((_QWORD *)v50 + 26) = 0;
              *((_QWORD *)v50 + 27) = 0;
              *((_QWORD *)v50 + 28) = 0;
              *((_BYTE *)v50 + 520) = 1;
            }
            *((_DWORD *)v50 + 132) = *((_DWORD *)v50 + 60);
            *((_BYTE *)v50 + 536) = 0;
            *((_BYTE *)v50 + 560) = 0;
            if (*((_BYTE *)v50 + 272))
            {
              *(_OWORD *)((char *)v50 + 536) = *(_OWORD *)((char *)v50 + 248);
              *((_QWORD *)v50 + 69) = *((_QWORD *)v50 + 33);
              *((_QWORD *)v50 + 32) = 0;
              *((_QWORD *)v50 + 33) = 0;
              *((_QWORD *)v50 + 31) = 0;
              *((_BYTE *)v50 + 560) = 1;
            }
            *((_DWORD *)v50 + 142) = *((_DWORD *)v50 + 70);
            v58 = a5;
            if (v50 != (_OWORD *)a5)
            {
              v59 = v49;
              while (1)
              {
                v58 = a5 + v59;
                v60 = (const void **)(a5 + v59 - 288);
                if (!snlp::ssu::similarity::SSUAppResult::operator>(v51, v60))
                  break;
                if (*(char *)(v58 + 23) < 0)
                  operator delete(*(void **)v58);
                v61 = a5 + v59;
                *(_OWORD *)v58 = *(_OWORD *)v60;
                *(_QWORD *)(v58 + 16) = *(_QWORD *)(a5 + v59 - 272);
                *(_BYTE *)(a5 + v59 - 265) = 0;
                *(_BYTE *)v60 = 0;
                *(_QWORD *)(v61 + 40) = *(_QWORD *)(a5 + v59 - 248);
                *(_OWORD *)(v61 + 24) = *(_OWORD *)(a5 + v59 - 264);
                v62 = (void **)(a5 + v59 + 48);
                if (*(char *)(a5 + v59 + 71) < 0)
                  operator delete(*v62);
                *(_OWORD *)v62 = *(_OWORD *)(v61 - 240);
                *(_QWORD *)(a5 + v59 + 64) = *(_QWORD *)(v61 - 224);
                *(_BYTE *)(v61 - 217) = 0;
                *(_BYTE *)(v61 - 240) = 0;
                std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v61 + 72, (__int128 *)(v61 - 216));
                std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v61 + 144, (__int128 *)(v61 - 144));
                *(_DWORD *)(v61 + 240) = *(_DWORD *)(v61 - 48);
                std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v61 + 248, (__n128 *)(v61 - 40));
                *(_DWORD *)(v61 + 280) = *(_DWORD *)(v61 - 8);
                v59 -= 288;
                if (!v59)
                {
                  v58 = a5;
                  break;
                }
              }
            }
            if (*(char *)(v58 + 23) < 0)
              operator delete(*(void **)v58);
            v63 = *(_OWORD *)v51;
            *(_QWORD *)(v58 + 16) = v51[2];
            *(_OWORD *)v58 = v63;
            *((_BYTE *)v51 + 23) = 0;
            *(_BYTE *)v51 = 0;
            v64 = v51[5];
            *(_OWORD *)(v58 + 24) = *(_OWORD *)(v51 + 3);
            *(_QWORD *)(v58 + 40) = v64;
            v65 = (void **)(v58 + 48);
            if (*(char *)(v58 + 71) < 0)
              operator delete(*v65);
            v66 = *((_OWORD *)v51 + 3);
            *(_QWORD *)(v58 + 64) = v51[8];
            *(_OWORD *)v65 = v66;
            *((_BYTE *)v51 + 71) = 0;
            *((_BYTE *)v51 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v58 + 72, (__int128 *)(v51 + 9));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v58 + 144, (__int128 *)v51 + 9);
            *(_DWORD *)(v58 + 240) = *((_DWORD *)v51 + 60);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v58 + 248, (__n128 *)(v51 + 31));
            result = *((float *)v51 + 70);
            *(float *)(v58 + 280) = result;
          }
          else
          {
            v67 = *(_OWORD *)v51;
            *((_QWORD *)v50 + 38) = v51[2];
            *v52 = v67;
            v51[1] = 0;
            v51[2] = 0;
            *v51 = 0;
            v68 = *(_OWORD *)(v8 + 39);
            *((_QWORD *)v50 + 41) = v8[41];
            *v54 = v68;
            v69 = *((_OWORD *)v8 + 21);
            *((_QWORD *)v50 + 44) = v8[44];
            *v55 = v69;
            v8[43] = 0;
            v8[44] = 0;
            v8[42] = 0;
            *((_BYTE *)v50 + 360) = 0;
            *((_BYTE *)v50 + 424) = 0;
            if (*((_BYTE *)v8 + 424))
            {
              v70 = *(_OWORD *)(v8 + 45);
              *((_QWORD *)v50 + 47) = v8[47];
              *v56 = v70;
              v8[46] = 0;
              v8[47] = 0;
              v8[45] = 0;
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table((uint64_t)(v50 + 24), (uint64_t *)v8 + 48);
              *((_BYTE *)v50 + 424) = 1;
            }
            *((_BYTE *)v50 + 432) = 0;
            *((_BYTE *)v50 + 520) = 0;
            if (*((_BYTE *)v8 + 520))
            {
              v71 = *((_OWORD *)v8 + 27);
              *((_QWORD *)v50 + 56) = v8[56];
              v50[27] = v71;
              v8[55] = 0;
              v8[56] = 0;
              v8[54] = 0;
              *(_OWORD *)((char *)v50 + 456) = *(_OWORD *)(v8 + 57);
              *((_QWORD *)v50 + 60) = 0;
              *((_QWORD *)v50 + 61) = 0;
              *((_QWORD *)v50 + 59) = 0;
              *(_OWORD *)((char *)v50 + 472) = *(_OWORD *)(v8 + 59);
              *((_QWORD *)v50 + 61) = v8[61];
              v8[59] = 0;
              v8[60] = 0;
              v8[61] = 0;
              v72 = *((_OWORD *)v8 + 31);
              *((_QWORD *)v50 + 64) = v8[64];
              v50[31] = v72;
              v8[63] = 0;
              v8[64] = 0;
              v8[62] = 0;
              *((_BYTE *)v50 + 520) = 1;
            }
            *((_DWORD *)v50 + 132) = *((_DWORD *)v8 + 132);
            *((_BYTE *)v50 + 536) = 0;
            *((_BYTE *)v50 + 560) = 0;
            if (*((_BYTE *)v8 + 560))
            {
              v73 = *(_OWORD *)(v8 + 67);
              *((_QWORD *)v50 + 69) = v8[69];
              *(_OWORD *)((char *)v50 + 536) = v73;
              v8[69] = 0;
              v8[68] = 0;
              v8[67] = 0;
              *((_BYTE *)v50 + 560) = 1;
            }
            result = *((float *)v8 + 142);
            *((float *)v50 + 142) = result;
          }
          v48 = v51 + 36;
          v49 += 288;
          v50 = v52;
          v8 = v51;
        }
        while (v51 + 36 != a2);
      }
    }
  }
  return result;
}

void std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(unint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  if (*a1)
  {
    v3 = 0;
    v4 = a2 + 144;
    do
    {
      if (*(_BYTE *)(v4 + 128) && *(char *)(v4 + 127) < 0)
        operator delete(*(void **)(v4 + 104));
      std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100](v4);
      std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100](v4 - 72);
      if (*(char *)(v4 - 73) < 0)
        operator delete(*(void **)(v4 - 96));
      if (*(char *)(v4 - 121) < 0)
        operator delete(*(void **)(v4 - 144));
      ++v3;
      v4 += 288;
    }
    while (v3 < *a1);
  }
}

void std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(const void **a1, const void **a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  const void **v17;
  const void **v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void **v22;
  unint64_t v23;
  const void **v24;
  int v25;
  const void **v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  const void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  const void **v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  const void **v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  const void **v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  void **v52;
  const void **v53;
  __int128 v54;
  const void *v55;
  void **v56;
  __int128 v57;
  uint64_t v58;
  unint64_t v59;
  const void **v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  const void **v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  const void **v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void **v77;
  int v78;
  int v79;
  __int128 v80;
  const void *v81;
  void **v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  void **v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  __int128 *v91;
  __int128 v92;
  uint64_t v93;
  void **v94;
  __int128 *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void **v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  void **v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const void **v114;
  unint64_t v116;

  if (!a6)
    return;
  v10 = a6;
  while (v10 > a8 && a5 > a8)
  {
    if (!a5)
      return;
    while ((snlp::ssu::similarity::SSUAppResult::operator>(a2, a1) & 1) == 0)
    {
      a1 += 36;
      if (!--a5)
        return;
    }
    v114 = a3;
    if (a5 >= v10)
    {
      if (a5 == 1)
      {
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>((uint64_t)a1, (__int128 *)a2);
        return;
      }
      if (a5 >= 0)
        v21 = a5;
      else
        v21 = a5 + 1;
      v20 = v21 >> 1;
      v18 = &a1[36 * (v21 >> 1)];
      v22 = a3;
      v17 = a2;
      if (a2 != v22)
      {
        v107 = v20;
        v111 = a8;
        v23 = 0x8E38E38E38E38E39 * (((char *)v114 - (char *)a2) >> 5);
        v17 = a2;
        do
        {
          v24 = &v17[36 * (v23 >> 1)];
          v25 = snlp::ssu::similarity::SSUAppResult::operator>(v24, v18);
          if (v25)
            v23 += ~(v23 >> 1);
          else
            v23 >>= 1;
          if (v25)
            v17 = v24 + 36;
        }
        while (v23);
        a8 = v111;
        v20 = v107;
      }
      v16 = 0x8E38E38E38E38E39 * (((char *)v17 - (char *)a2) >> 5);
    }
    else
    {
      if (v10 >= 0)
        v15 = v10;
      else
        v15 = v10 + 1;
      v16 = v15 >> 1;
      v17 = &a2[36 * (v15 >> 1)];
      v18 = a2;
      if (a2 != a1)
      {
        v109 = v15 >> 1;
        v19 = 0x8E38E38E38E38E39 * (((char *)a2 - (char *)a1) >> 5);
        v18 = a1;
        do
        {
          if (snlp::ssu::similarity::SSUAppResult::operator>(v17, &v18[36 * (v19 >> 1)]))
          {
            v19 >>= 1;
          }
          else
          {
            v18 += 36 * (v19 >> 1) + 36;
            v19 += ~(v19 >> 1);
          }
        }
        while (v19);
        v16 = v109;
      }
      v20 = 0x8E38E38E38E38E39 * (((char *)v18 - (char *)a1) >> 5);
    }
    if (v18 == a2)
    {
      v26 = v17;
    }
    else if (v17 == a2)
    {
      v26 = v18;
    }
    else
    {
      v108 = v20;
      v110 = v16;
      v112 = a8;
      v113 = a7;
      v26 = v18 + 36;
      v27 = (uint64_t)v18;
      v28 = (__int128 *)a2;
      while (1)
      {
        std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(v27, v28);
        v27 += 288;
        v28 += 18;
        if (v28 == (__int128 *)v17)
          break;
        if ((const void **)v27 == a2)
          a2 = (const void **)v28;
        v26 += 36;
      }
      if ((const void **)v27 != a2)
      {
        v29 = (__int128 *)a2;
        do
        {
          while (1)
          {
            std::swap[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(v27, v29);
            v27 += 288;
            v29 += 18;
            if (v29 == (__int128 *)v17)
              break;
            if ((const void **)v27 == a2)
              a2 = (const void **)v29;
          }
          v29 = (__int128 *)a2;
        }
        while ((const void **)v27 != a2);
      }
      a8 = v112;
      a7 = v113;
      v20 = v108;
      v16 = v110;
    }
    a5 -= v20;
    v10 -= v16;
    if (v20 + v16 >= a5 + v10)
    {
      v30 = v17;
      v31 = v20;
      v32 = a5;
      v33 = v16;
      std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(v26, v30, v114, a4, v32, v10, a7, a8);
      a2 = v18;
      v10 = v33;
      a5 = v31;
      a3 = v26;
    }
    else
    {
      std::__inplace_merge<std::_ClassicAlgPolicy,std::greater<snlp::ssu::similarity::SSUAppResult> &,std::__wrap_iter<snlp::ssu::similarity::SSUAppResult*>>(a1, v18, v26, a4, v20, v16, a7, a8);
      a1 = v26;
      a2 = v17;
      a3 = v114;
    }
    if (!v10)
      return;
  }
  if (a5 <= v10)
  {
    if (a1 != a2)
    {
      v58 = 0;
      v59 = 0;
      do
      {
        v60 = &a1[v58];
        v61 = a7 + v58 * 8;
        v62 = *(_OWORD *)&a1[v58];
        *(_QWORD *)(v61 + 16) = a1[v58 + 2];
        *(_OWORD *)v61 = v62;
        v60[1] = 0;
        v60[2] = 0;
        *v60 = 0;
        v63 = *(_OWORD *)&a1[v58 + 3];
        *(_QWORD *)(v61 + 40) = a1[v58 + 5];
        *(_OWORD *)(v61 + 24) = v63;
        v64 = *(_OWORD *)&a1[v58 + 6];
        *(_QWORD *)(v61 + 64) = a1[v58 + 8];
        *(_OWORD *)(v61 + 48) = v64;
        v60[7] = 0;
        v60[8] = 0;
        v60[6] = 0;
        *(_BYTE *)(a7 + v58 * 8 + 72) = 0;
        *(_BYTE *)(v61 + 136) = 0;
        if (LOBYTE(a1[v58 + 17]))
        {
          v65 = *(_OWORD *)(v60 + 9);
          *(_QWORD *)(a7 + v58 * 8 + 88) = v60[11];
          *(_OWORD *)(a7 + v58 * 8 + 72) = v65;
          v60[10] = 0;
          v60[11] = 0;
          v60[9] = 0;
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v61 + 96, (uint64_t *)v60 + 12);
          *(_BYTE *)(v61 + 136) = 1;
        }
        *(_BYTE *)(v61 + 144) = 0;
        *(_BYTE *)(v61 + 232) = 0;
        if (*((_BYTE *)v60 + 232))
        {
          v66 = &a1[v58];
          v67 = *(_OWORD *)&a1[v58 + 18];
          *(_QWORD *)(v61 + 160) = a1[v58 + 20];
          *(_OWORD *)(v61 + 144) = v67;
          v66[19] = 0;
          v66[20] = 0;
          v66[18] = 0;
          v68 = a7 + v58 * 8;
          *(_OWORD *)(v68 + 168) = *(_OWORD *)&a1[v58 + 21];
          *(_QWORD *)(v68 + 192) = 0;
          *(_QWORD *)(v68 + 200) = 0;
          *(_QWORD *)(v68 + 184) = 0;
          *(_OWORD *)(v68 + 184) = *(_OWORD *)&a1[v58 + 23];
          *(_QWORD *)(v68 + 200) = a1[v58 + 25];
          v66[23] = 0;
          v66[24] = 0;
          v66[25] = 0;
          v69 = *(_OWORD *)&a1[v58 + 26];
          *(_QWORD *)(v68 + 224) = a1[v58 + 28];
          *(_OWORD *)(v68 + 208) = v69;
          v66[27] = 0;
          v66[28] = 0;
          v66[26] = 0;
          *(_BYTE *)(v61 + 232) = 1;
        }
        v70 = a7 + v58 * 8;
        *(_DWORD *)(v70 + 240) = *((_DWORD *)v60 + 60);
        *(_BYTE *)(a7 + v58 * 8 + 248) = 0;
        *(_BYTE *)(v70 + 272) = 0;
        if (*((_BYTE *)v60 + 272))
        {
          v71 = &a1[v58];
          v72 = *(_OWORD *)&a1[v58 + 31];
          *(_QWORD *)(a7 + v58 * 8 + 264) = a1[v58 + 33];
          *(_OWORD *)(a7 + v58 * 8 + 248) = v72;
          v71[32] = 0;
          v71[33] = 0;
          v71[31] = 0;
          *(_BYTE *)(v70 + 272) = 1;
        }
        *(_DWORD *)(v70 + 280) = *((_DWORD *)v60 + 70);
        ++v59;
        v58 += 36;
      }
      while (v60 + 36 != a2);
      v73 = a7 + v58 * 8;
      v116 = v59;
      if (v73 != a7)
      {
        v74 = v73 - 288;
        v75 = (uint64_t)(a1 + 18);
        v76 = a7;
        while (a2 != a3)
        {
          v77 = (void **)(v75 - 144);
          v78 = snlp::ssu::similarity::SSUAppResult::operator>(a2, (const void **)v76);
          v79 = *(char *)(v75 - 121);
          if (v78)
          {
            if (v79 < 0)
              operator delete(*v77);
            v80 = *(_OWORD *)a2;
            *(_QWORD *)(v75 - 128) = a2[2];
            *(_OWORD *)v77 = v80;
            *((_BYTE *)a2 + 23) = 0;
            *(_BYTE *)a2 = 0;
            v81 = a2[5];
            *(_OWORD *)(v75 - 120) = *(_OWORD *)(a2 + 3);
            *(_QWORD *)(v75 - 104) = v81;
            v82 = (void **)(v75 - 96);
            if (*(char *)(v75 - 73) < 0)
              operator delete(*v82);
            v83 = *((_OWORD *)a2 + 3);
            *(_QWORD *)(v75 - 80) = a2[8];
            *(_OWORD *)v82 = v83;
            *((_BYTE *)a2 + 71) = 0;
            *((_BYTE *)a2 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 - 72, (__int128 *)(a2 + 9));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75, (__int128 *)a2 + 9);
            *(_DWORD *)(v75 + 96) = *((_DWORD *)a2 + 60);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + 104, (__n128 *)(a2 + 31));
            *(_DWORD *)(v75 + 136) = *((_DWORD *)a2 + 70);
            a2 += 36;
          }
          else
          {
            if (v79 < 0)
              operator delete(*v77);
            v84 = *(_OWORD *)v76;
            *(_QWORD *)(v75 - 128) = *(_QWORD *)(v76 + 16);
            *(_OWORD *)v77 = v84;
            *(_BYTE *)(v76 + 23) = 0;
            *(_BYTE *)v76 = 0;
            v85 = *(_QWORD *)(v76 + 40);
            *(_OWORD *)(v75 - 120) = *(_OWORD *)(v76 + 24);
            *(_QWORD *)(v75 - 104) = v85;
            v86 = (void **)(v75 - 96);
            if (*(char *)(v75 - 73) < 0)
              operator delete(*v86);
            v87 = *(_OWORD *)(v76 + 48);
            *(_QWORD *)(v75 - 80) = *(_QWORD *)(v76 + 64);
            *(_OWORD *)v86 = v87;
            *(_BYTE *)(v76 + 71) = 0;
            *(_BYTE *)(v76 + 48) = 0;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 - 72, (__int128 *)(v76 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75, (__int128 *)(v76 + 144));
            *(_DWORD *)(v75 + 96) = *(_DWORD *)(v76 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + 104, (__n128 *)(v76 + 248));
            *(_DWORD *)(v75 + 136) = *(_DWORD *)(v76 + 280);
            v76 += 288;
          }
          v75 += 288;
          if (v76 == v73)
            goto LABEL_124;
        }
        if (v76 != v73)
        {
          v98 = 0;
          do
          {
            v99 = v75 + v98;
            v100 = (void **)(v75 + v98 - 144);
            if (*(char *)(v75 + v98 - 121) < 0)
              operator delete(*v100);
            v101 = v76 + v98;
            v102 = *(_OWORD *)(v76 + v98);
            *(_QWORD *)(v75 + v98 - 128) = *(_QWORD *)(v76 + v98 + 16);
            *(_OWORD *)v100 = v102;
            *(_BYTE *)(v101 + 23) = 0;
            *(_BYTE *)v101 = 0;
            v103 = *(_QWORD *)(v76 + v98 + 40);
            *(_OWORD *)(v99 - 120) = *(_OWORD *)(v76 + v98 + 24);
            *(_QWORD *)(v99 - 104) = v103;
            v104 = (void **)(v99 - 96);
            if (*(char *)(v99 - 73) < 0)
              operator delete(*v104);
            v105 = *(_OWORD *)(v101 + 48);
            *(_QWORD *)(v99 - 80) = *(_QWORD *)(v101 + 64);
            *(_OWORD *)v104 = v105;
            *(_BYTE *)(v101 + 71) = 0;
            *(_BYTE *)(v101 + 48) = 0;
            v106 = v75 + v98;
            std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v75 + v98 - 72, (__int128 *)(v101 + 72));
            std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v75 + v98, (__int128 *)(v101 + 144));
            *(_DWORD *)(v106 + 96) = *(_DWORD *)(v101 + 240);
            std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v75 + v98 + 104, (__n128 *)(v101 + 248));
            *(_DWORD *)(v106 + 136) = *(_DWORD *)(v101 + 280);
            v98 += 288;
          }
          while (v101 != v74);
        }
      }
      goto LABEL_124;
    }
  }
  else if (a3 != a2)
  {
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = &a2[v34];
      v37 = a7 + v34 * 8;
      v38 = *(_OWORD *)&a2[v34];
      *(_QWORD *)(v37 + 16) = a2[v34 + 2];
      *(_OWORD *)v37 = v38;
      v36[1] = 0;
      v36[2] = 0;
      *v36 = 0;
      v39 = *(_OWORD *)&a2[v34 + 3];
      *(_QWORD *)(v37 + 40) = a2[v34 + 5];
      *(_OWORD *)(v37 + 24) = v39;
      v40 = *(_OWORD *)&a2[v34 + 6];
      *(_QWORD *)(v37 + 64) = a2[v34 + 8];
      *(_OWORD *)(v37 + 48) = v40;
      v36[7] = 0;
      v36[8] = 0;
      v36[6] = 0;
      *(_BYTE *)(a7 + v34 * 8 + 72) = 0;
      *(_BYTE *)(v37 + 136) = 0;
      if (LOBYTE(a2[v34 + 17]))
      {
        v41 = *(_OWORD *)(v36 + 9);
        *(_QWORD *)(a7 + v34 * 8 + 88) = v36[11];
        *(_OWORD *)(a7 + v34 * 8 + 72) = v41;
        v36[10] = 0;
        v36[11] = 0;
        v36[9] = 0;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__hash_table(v37 + 96, (uint64_t *)v36 + 12);
        *(_BYTE *)(v37 + 136) = 1;
      }
      *(_BYTE *)(v37 + 144) = 0;
      *(_BYTE *)(v37 + 232) = 0;
      if (*((_BYTE *)v36 + 232))
      {
        v42 = &a2[v34];
        v43 = *(_OWORD *)&a2[v34 + 18];
        *(_QWORD *)(v37 + 160) = a2[v34 + 20];
        *(_OWORD *)(v37 + 144) = v43;
        v42[19] = 0;
        v42[20] = 0;
        v42[18] = 0;
        v44 = a7 + v34 * 8;
        *(_OWORD *)(v44 + 168) = *(_OWORD *)&a2[v34 + 21];
        *(_QWORD *)(v44 + 192) = 0;
        *(_QWORD *)(v44 + 200) = 0;
        *(_QWORD *)(v44 + 184) = 0;
        *(_OWORD *)(v44 + 184) = *(_OWORD *)&a2[v34 + 23];
        *(_QWORD *)(v44 + 200) = a2[v34 + 25];
        v42[23] = 0;
        v42[24] = 0;
        v42[25] = 0;
        v45 = *(_OWORD *)&a2[v34 + 26];
        *(_QWORD *)(v44 + 224) = a2[v34 + 28];
        *(_OWORD *)(v44 + 208) = v45;
        v42[27] = 0;
        v42[28] = 0;
        v42[26] = 0;
        *(_BYTE *)(v37 + 232) = 1;
      }
      v46 = a7 + v34 * 8;
      *(_DWORD *)(v46 + 240) = *((_DWORD *)v36 + 60);
      *(_BYTE *)(a7 + v34 * 8 + 248) = 0;
      *(_BYTE *)(v46 + 272) = 0;
      if (*((_BYTE *)v36 + 272))
      {
        v47 = &a2[v34];
        v48 = *(_OWORD *)&a2[v34 + 31];
        *(_QWORD *)(a7 + v34 * 8 + 264) = a2[v34 + 33];
        *(_OWORD *)(a7 + v34 * 8 + 248) = v48;
        v47[32] = 0;
        v47[33] = 0;
        v47[31] = 0;
        *(_BYTE *)(v46 + 272) = 1;
      }
      *(_DWORD *)(v46 + 280) = *((_DWORD *)v36 + 70);
      ++v35;
      v34 += 36;
    }
    while (v36 + 36 != a3);
    v49 = a7 + v34 * 8;
    v116 = v35;
    if (a7 + v34 * 8 != a7)
    {
      v50 = (uint64_t)(a3 - 18);
      while (a2 != a1)
      {
        v51 = snlp::ssu::similarity::SSUAppResult::operator>((const void **)(v49 - 288), a2 - 36);
        v52 = (void **)(v50 - 144);
        if (v51)
          v53 = a2 - 36;
        else
          v53 = (const void **)(v49 - 288);
        if (v51)
          a2 -= 36;
        else
          v49 -= 288;
        if (*(char *)(v50 - 121) < 0)
          operator delete(*v52);
        v54 = *(_OWORD *)v53;
        *(_QWORD *)(v50 - 128) = v53[2];
        *(_OWORD *)v52 = v54;
        *((_BYTE *)v53 + 23) = 0;
        *(_BYTE *)v53 = 0;
        v55 = v53[5];
        *(_OWORD *)(v50 - 120) = *(_OWORD *)(v53 + 3);
        *(_QWORD *)(v50 - 104) = v55;
        v56 = (void **)(v50 - 96);
        if (*(char *)(v50 - 73) < 0)
          operator delete(*v56);
        v57 = *((_OWORD *)v53 + 3);
        *(_QWORD *)(v50 - 80) = v53[8];
        *(_OWORD *)v56 = v57;
        *((_BYTE *)v53 + 71) = 0;
        *((_BYTE *)v53 + 48) = 0;
        std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v50 - 72, (__int128 *)(v53 + 9));
        std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v50, (__int128 *)v53 + 9);
        *(_DWORD *)(v50 + 96) = *((_DWORD *)v53 + 60);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v50 + 104, (__n128 *)(v53 + 31));
        *(_DWORD *)(v50 + 136) = *((_DWORD *)v53 + 70);
        v50 -= 288;
        if (v49 == a7)
          goto LABEL_124;
      }
      v88 = 0;
      do
      {
        v89 = v50 + v88;
        v90 = (void **)(v50 + v88 - 144);
        if (*(char *)(v50 + v88 - 121) < 0)
          operator delete(*v90);
        v91 = (__int128 *)(v49 + v88 - 288);
        v92 = *v91;
        *(_QWORD *)(v50 + v88 - 128) = *(_QWORD *)(v49 + v88 - 272);
        *(_OWORD *)v90 = v92;
        *(_BYTE *)(v49 + v88 - 265) = 0;
        *(_BYTE *)v91 = 0;
        v93 = *(_QWORD *)(v49 + v88 - 248);
        *(_OWORD *)(v89 - 120) = *(_OWORD *)(v49 + v88 - 264);
        *(_QWORD *)(v89 - 104) = v93;
        v94 = (void **)(v89 - 96);
        if (*(char *)(v89 - 73) < 0)
          operator delete(*v94);
        v95 = (__int128 *)(v49 + v88 - 240);
        v96 = *v95;
        *(_QWORD *)(v89 - 80) = *(_QWORD *)(v49 + v88 - 224);
        *(_OWORD *)v94 = v96;
        *(_BYTE *)(v49 + v88 - 217) = 0;
        *(_BYTE *)v95 = 0;
        v97 = v50 + v88;
        std::__optional_storage_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>>(v50 + v88 - 72, (__int128 *)(v49 + v88 - 216));
        std::__optional_storage_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>>(v50 + v88, (__int128 *)(v49 + v88 - 144));
        *(_DWORD *)(v97 + 96) = *(_DWORD *)(v49 + v88 - 48);
        std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::string,false>>(v50 + v88 + 104, (__n128 *)(v49 + v88 - 40));
        *(_DWORD *)(v97 + 136) = *(_DWORD *)(v49 + v88 - 8);
        v88 -= 288;
      }
      while (v49 + v88 != a7);
    }
    goto LABEL_124;
  }
  v116 = 0;
LABEL_124:
  if (a7)
    std::__destruct_n::__process[abi:ne180100]<snlp::ssu::similarity::SSUAppResult>(&v116, a7);
}

void snlp::ssu::similarity::SSUAppResult::~SSUAppResult(void **this)
{
  if (*((_BYTE *)this + 272) && *((char *)this + 271) < 0)
    operator delete(this[31]);
  std::__optional_destruct_base<snlp::ssu::proto::SSUValidatedRequest::AppEntitySpanInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 18));
  std::__optional_destruct_base<snlp::ssu::candidate::SSUAlternativeCandidateInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

float snlp::ssu::similarity::SSUSimilaritySearchApp::computeCalibratedScore(snlp::ssu::similarity::SSUSimilaritySearchApp *this, float a2, float a3)
{
  return 1.0 / (expf(-(float)(*((float *)this + 2) * (float)(a3 - a2))) + 1.0);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::~EspressoTransformerE5MLModel(nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel *this)
{
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::~EspressoTransformerE5MLModel(this);
  JUMPOUT(0x1C3BB9B44);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E7BE9A60;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<int,unsigned int,float,BOOL,std::string>>>>::~__hash_table((uint64_t)this + 248);
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule>::reset[abi:ne180100]((uint64_t *)this + 26);
  std::unique_ptr<nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule>::reset[abi:ne180100]((uint64_t *)this + 25);
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::forward(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  NSObject *v5;
  os_signpost_id_t v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  unint64_t v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  os_signpost_id_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  _QWORD *v19;
  unsigned int NetworkConfig;
  float *v21;
  _QWORD *v22;
  _QWORD *v23;
  NSObject *v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  _QWORD *v32;
  _DWORD *v33;
  nlv4_inference_orchestrator::inference_engine::Trail *v34;
  nlv4_inference_orchestrator::inference_engine::Trail *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  nlv4_inference_orchestrator::inference_engine::Trail *v42;
  nlv4_inference_orchestrator::inference_engine::Trail *v43;
  nlv4_inference_orchestrator::inference_engine::Trail *v44;
  nlv4_inference_orchestrator::inference_engine::Trail *v45;
  void *v46;
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  float *v50;
  float *v51;
  unint64_t v52;
  float v53;
  nlv4_inference_orchestrator::inference_engine::Trail *v55;
  nlv4_inference_orchestrator::inference_engine::Trail *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  nlv4_inference_orchestrator::inference_engine::Trail *v71;
  nlv4_inference_orchestrator::inference_engine::Trail *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  nlv4_inference_orchestrator::inference_engine::Trail *v81;
  unint64_t v82;
  unint64_t v83;
  nlv4_inference_orchestrator::inference_engine::Trail *v84;
  nlv4_inference_orchestrator::inference_engine::Trail *v85;
  nlv4_inference_orchestrator::inference_engine::Trail *v86;
  nlv4_inference_orchestrator::inference_engine::Trail *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  nlv4_inference_orchestrator::inference_engine::Trail *i;
  NSObject *v93;
  NSObject *v94;
  NSObject *v95;
  uint64_t *v96;
  nlv4_inference_orchestrator::inference_engine::Trail *v97;
  nlv4_inference_orchestrator::inference_engine::Trail *j;
  int v99;
  void *v100;
  void *v101;
  char *v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  os_signpost_id_t spid;
  uint64_t v115;
  unint64_t v116;
  void *v117;
  float *v118;
  _DWORD *v119;
  nlv4_inference_orchestrator::inference_engine::Trail *v120;
  void **v121;
  uint64_t v122;
  uint64_t *v123;
  int v125;
  void *v126[3];
  void *__p;
  void *v128;
  void *v129;
  char *v130;
  char *v131;
  void *v132;
  void *v133;
  void *v134;
  nlv4_inference_orchestrator::inference_engine::Trail *v135;
  nlv4_inference_orchestrator::inference_engine::Trail *v136;
  void *v137;
  _QWORD *v138;
  char v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143[2];
  char *v144;
  unint64_t v145;
  unint64_t *v146;
  float v147;
  void *v148;
  float *v149;
  _QWORD v150[3];
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  nlv4_inference_orchestrator::inference_engine::Trail *v155;
  nlv4_inference_orchestrator::inference_engine::Trail *v156;
  _QWORD v157[2];
  void *v158;
  _QWORD *v159;
  unint64_t v160[2];
  void *v161[3];
  _QWORD v162[3];
  _QWORD v163[3];
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint8_t buf[8];
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD v171[3];
  _QWORD v172[3];
  _QWORD v173[3];
  _QWORD v174[3];
  _QWORD v175[3];
  _QWORD v176[3];
  _QWORD v177[3];
  _QWORD v178[3];
  _QWORD v179[3];
  nlv4_inference_orchestrator::inference_engine::Trail *v180[4];
  nlv4_inference_orchestrator::inference_engine::Trail *v181;
  nlv4_inference_orchestrator::inference_engine::Trail *v182;
  unint64_t v183;
  void *v184;
  _BYTE *v185;
  uint64_t v186;
  void *v187;
  _BYTE *v188;
  uint64_t v189;
  void *v190;
  _BYTE *v191;
  _QWORD *v192;
  void *v193;
  _BYTE *v194;
  void *v195;
  _BYTE *v196;
  void *v197;
  _BYTE *v198;
  void *v199;
  _BYTE *v200;
  void *v201;
  _BYTE *v202;
  _QWORD v203[3];
  _QWORD v204[3];
  _QWORD v205[3];
  _QWORD v206[3];
  _QWORD v207[3];
  _QWORD v208[3];
  _QWORD v209[3];
  _QWORD v210[3];
  _QWORD v211[3];
  void *v212[3];
  void *v213;
  _BYTE *v214;
  void *v215;
  _BYTE *v216;
  void *v217;
  _BYTE *v218;
  void *v219;
  _BYTE *v220;
  uint8_t v221[16];
  char *v222;
  char *v223;
  unint64_t *v224;
  uint64_t v225[6];
  uint64_t v226[6];
  _QWORD v227[3];
  _QWORD v228[3];
  uint64_t v229[6];
  _QWORD v230[3];
  _QWORD v231[5];

  v231[3] = *MEMORY[0x1E0C80C00];
  v5 = SNLPOSLoggerForCategory(7);
  v6 = os_signpost_id_generate(v5);
  v7 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v8 = v7;
    if (os_signpost_enabled(v7))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v6, "Encoder Inference", "", buf, 2u);
    }
  }
  v9 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v9, OS_LOG_TYPE_DEFAULT, "BEGIN \"Encoder Inference\"", buf, 2u);
  }
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPaddingMask((_QWORD *)a2, &v217);
  nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPositionIds(a2, &v213);
  memset(v203, 0, sizeof(v203));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v203, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  memset(v204, 0, sizeof(v204));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v204, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  memset(v205, 0, sizeof(v205));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v205, *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3);
  memset(v206, 0, sizeof(v206));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v206, *(const void **)(a2 + 72), *(_QWORD *)(a2 + 80), (uint64_t)(*(_QWORD *)(a2 + 80) - *(_QWORD *)(a2 + 72)) >> 2);
  memset(v207, 0, sizeof(v207));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v207, *(const void **)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3);
  memset(v208, 0, sizeof(v208));
  v122 = a2;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v208, *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 2);
  memset(v209, 0, sizeof(v209));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v209, v217, (uint64_t)v218, (v218 - (_BYTE *)v217) >> 3);
  memset(v210, 0, sizeof(v210));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v210, v219, (uint64_t)v220, (v220 - (_BYTE *)v219) >> 2);
  memset(v211, 0, sizeof(v211));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v211, v213, (uint64_t)v214, (v214 - (_BYTE *)v213) >> 3);
  memset(v212, 0, sizeof(v212));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v212, v215, (uint64_t)v216, (v216 - (_BYTE *)v215) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderE5MLModule::forward(*(E5RT::ExecutionStream ***)(a1 + 200), (const nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v203, &v195);
  v10 = *((_QWORD *)v199 + 1);
  v11 = SNLPOSLoggerForCategory(7);
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = v11;
    if (os_signpost_enabled(v11))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v12, OS_SIGNPOST_INTERVAL_END, v6, "Encoder Inference", "", buf, 2u);
    }
  }
  v13 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v13, OS_LOG_TYPE_DEFAULT, "END \"Encoder Inference\"", buf, 2u);
  }
  v14 = SNLPOSLoggerForCategory(7);
  v15 = os_signpost_id_generate(v14);
  v16 = SNLPOSLoggerForCategory(7);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v17 = v16;
    if (os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Decoder Inference", "", buf, 2u);
    }
  }
  v18 = SNLPOSLoggerForCategory(0);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1C2196000, v18, OS_LOG_TYPE_DEFAULT, "BEGIN \"Decoder Inference\"", buf, 2u);
  }
  v19 = operator new(8uLL);
  *v19 = 1;
  NetworkConfig = nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(a1, (unsigned __int8 *)(a1 + 152));
  v116 = v15 - 1;
  v21 = (float *)operator new(4uLL);
  *v21 = (float)NetworkConfig;
  v22 = operator new(8uLL);
  *v22 = 1;
  v119 = operator new(4uLL);
  *v119 = 0;
  v23 = operator new(0x10uLL);
  spid = v15;
  v192 = v23 + 2;
  *v23 = 1;
  v23[1] = v10;
  v190 = v23;
  v191 = v23 + 2;
  *(_DWORD *)buf = 0;
  v118 = v21;
  std::vector<float>::vector(&v193, v10, buf);
  v185 = 0;
  v184 = 0;
  v186 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v184, *(const void **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  v188 = 0;
  v187 = 0;
  v189 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v187, *(const void **)(a2 + 168), *(_QWORD *)(a2 + 176), (uint64_t)(*(_QWORD *)(a2 + 176) - *(_QWORD *)(a2 + 168)) >> 2);
  v125 = nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(a1, (unsigned __int8 *)(a1 + 176));
  v182 = 0;
  v181 = 0;
  v183 = 0;
  v168 = 0;
  *(_QWORD *)buf = 0;
  v169 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(buf, v19, (uint64_t)(v19 + 1), 1uLL);
  memset(v170, 0, sizeof(v170));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v170, v21, (uint64_t)(v21 + 1), 1uLL);
  memset(v171, 0, sizeof(v171));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v171, v199, (uint64_t)v200, (v200 - (_BYTE *)v199) >> 3);
  memset(v172, 0, sizeof(v172));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v172, v201, (uint64_t)v202, (v202 - (_BYTE *)v201) >> 2);
  memset(v173, 0, sizeof(v173));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v173, v190, (uint64_t)v191, (v191 - (_BYTE *)v190) >> 3);
  memset(v174, 0, sizeof(v174));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v174, v193, (uint64_t)v194, (v194 - (_BYTE *)v193) >> 2);
  memset(v175, 0, sizeof(v175));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v175, v195, (uint64_t)v196, (v196 - (_BYTE *)v195) >> 3);
  v123 = a3;
  memset(v176, 0, sizeof(v176));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v176, v197, (uint64_t)v198, (v198 - (_BYTE *)v197) >> 2);
  memset(v177, 0, sizeof(v177));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v177, v22, (uint64_t)(v22 + 1), 1uLL);
  memset(v178, 0, sizeof(v178));
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v178, v119, (uint64_t)(v119 + 1), 1uLL);
  memset(v179, 0, sizeof(v179));
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v179, v184, (uint64_t)v185, (v185 - (_BYTE *)v184) >> 3);
  memset(v180, 0, 24);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v180, v187, (uint64_t)v188, (v188 - (_BYTE *)v187) >> 2);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(*(E5RT::ExecutionStreamOperation ***)(a1 + 208), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf, v162);
  v24 = SNLPOSLoggerForCategory(1);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    v25 = *(_QWORD *)(a2 + 192);
    *(_DWORD *)v221 = 134217984;
    *(_QWORD *)&v221[4] = v25;
    _os_log_impl(&dword_1C2196000, v24, OS_LOG_TYPE_DEBUG, "Running beam search with beamWidth=%lu", v221, 0xCu);
  }
  v26 = *(_QWORD *)(a2 + 192);
  v160[0] = (uint64_t)(v163[1] - v163[0]) >> 2;
  v160[1] = v26;
  *(_DWORD *)v221 = 0;
  std::vector<float>::vector(v161, v160[0], v221);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v160, (uint64_t)v163, v221);
  v27 = *(void **)(a1 + 288);
  if (v27)
  {
    *(_QWORD *)(a1 + 296) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 288) = 0;
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
  }
  v117 = v19;
  *(_OWORD *)(a1 + 288) = *(_OWORD *)v221;
  *(_QWORD *)(a1 + 304) = v222;
  v121 = (void **)(a1 + 288);
  nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v160, a1 + 288, &v158);
  v28 = v158;
  v29 = v159;
  if (v158 != v159)
  {
    do
    {
      v30 = *v28;
      v31 = *v28 == v125 || *(_QWORD *)(a1 + 216) == 1;
      LOBYTE(v150[0]) = v31;
      v32 = operator new(8uLL);
      *v32 = v30;
      v143[1] = v32 + 1;
      v144 = (char *)(v32 + 1);
      v143[0] = v32;
      v33 = v28 + 1;
      nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v221, (uint64_t)v143, v33, v150, (uint64_t)&v164, (uint64_t)&v165, (uint64_t)&v166);
      operator delete(v32);
      v34 = v182;
      if ((unint64_t)v182 >= v183)
      {
        v36 = 0x34F72C234F72C235 * ((v182 - v181) >> 3);
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) > 0x11A7B9611A7B961)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        if (0x69EE58469EE5846ALL * ((uint64_t)(v183 - (_QWORD)v181) >> 3) > v37)
          v37 = 0x69EE58469EE5846ALL * ((uint64_t)(v183 - (_QWORD)v181) >> 3);
        if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v183 - (_QWORD)v181) >> 3)) >= 0x8D3DCB08D3DCB0)
          v38 = 0x11A7B9611A7B961;
        else
          v38 = v37;
        v146 = &v183;
        if (v38)
          v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v38);
        else
          v39 = 0;
        v143[0] = (void *)v38;
        v143[1] = (void *)(v38 + 232 * v36);
        v144 = (char *)v143[1];
        v145 = v38 + 232 * v39;
        nlv4_inference_orchestrator::inference_engine::Trail::Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143[1], (const nlv4_inference_orchestrator::inference_engine::Trail *)v221);
        v144 += 232;
        std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v181, v143);
        v35 = v182;
        std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v143);
      }
      else
      {
        nlv4_inference_orchestrator::inference_engine::Trail::Trail(v182, (const nlv4_inference_orchestrator::inference_engine::Trail *)v221);
        v35 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v34 + 232);
      }
      v182 = v35;
      nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v221);
      v28 = v33 + 2;
    }
    while (v28 != v29);
  }
  v40 = v122;
  if (*(_QWORD *)(a1 + 216) >= 2uLL)
  {
    v41 = 1;
    while (2)
    {
      v115 = v41;
      v156 = 0;
      v155 = 0;
      v157[0] = 0;
      v42 = v181;
      v43 = v182;
      v120 = v182;
      if (v181 != v182)
      {
        do
        {
          if (*((_BYTE *)v42 + 224))
          {
            v44 = v156;
            if ((unint64_t)v156 >= v157[0])
            {
              v77 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
              v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) > 0x11A7B9611A7B961)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3) > v78)
                v78 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3);
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3)) >= 0x8D3DCB08D3DCB0)
                v79 = 0x11A7B9611A7B961;
              else
                v79 = v78;
              v224 = v157;
              if (v79)
                v79 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v79);
              else
                v80 = 0;
              *(_QWORD *)v221 = v79;
              *(_QWORD *)&v221[8] = v79 + 232 * v77;
              v222 = *(char **)&v221[8];
              v223 = (char *)(v79 + 232 * v80);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*(nlv4_inference_orchestrator::inference_engine::Trail **)&v221[8], v42);
              v222 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, v221);
              v45 = v156;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v221);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, v42);
              v45 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v44 + 232);
            }
            v156 = v45;
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v45, 0x34F72C234F72C235 * ((v45 - v155) >> 3));
          }
          else
          {
            nlv4_inference_orchestrator::inference_engine::Trail::getLastPrediction(v42, v221);
            nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v42, v225);
            nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v42, v226);
            memset(v227, 0, sizeof(v227));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v227, v195, (uint64_t)v196, (v196 - (_BYTE *)v195) >> 3);
            memset(v228, 0, sizeof(v228));
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v228, v197, (uint64_t)v198, (v198 - (_BYTE *)v197) >> 2);
            nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v42, v229);
            memset(v230, 0, sizeof(v230));
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v230, v184, (uint64_t)v185, (v185 - (_BYTE *)v184) >> 3);
            memset(v231, 0, 24);
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v231, v187, (uint64_t)v188, (v188 - (_BYTE *)v187) >> 2);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderE5MLModule::forward(*(E5RT::ExecutionStreamOperation ***)(a1 + 208), (const nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)v221, v150);
            *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
            nlv4_inference_orchestrator::inference_engine::BeamSearch::applyLogSoftmax((uint64_t)v160, (uint64_t)&v151, v143);
            v46 = *v121;
            if (*v121)
            {
              *(_QWORD *)(a1 + 296) = v46;
              operator delete(v46);
              *v121 = 0;
              *(_QWORD *)(a1 + 296) = 0;
              *(_QWORD *)(a1 + 304) = 0;
            }
            *(_OWORD *)(a1 + 288) = *(_OWORD *)v143;
            *(_QWORD *)(a1 + 304) = v144;
            nlv4_inference_orchestrator::inference_engine::BeamSearch::getTopKTokenIndicesAndScores((uint64_t)v160, (uint64_t)v121, &v148);
            v143[0] = 0;
            v143[1] = 0;
            v144 = 0;
            std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *((const void **)v42 + 25), *((_QWORD *)v42 + 26), (uint64_t)(*((_QWORD *)v42 + 26) - *((_QWORD *)v42 + 25)) >> 3);
            v47 = v143[0];
            v48 = v143[1];
            v49 = *(_QWORD *)(a1 + 216);
            if (v143[0])
            {
              v143[1] = v143[0];
              operator delete(v143[0]);
            }
            v50 = (float *)v148;
            v51 = v149;
            if (v148 != v149)
            {
              v52 = (v48 - v47) >> 3;
              v53 = *(float *)v42;
              do
              {
                if (*(_QWORD *)v50 == v125 || v52 >= v49)
                {
                  v147 = v53 + v50[2];
                  v140 = 0;
                  v141 = 0;
                  v142 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v140, *((const void **)v42 + 25), *((_QWORD *)v42 + 26), (uint64_t)(*((_QWORD *)v42 + 26) - *((_QWORD *)v42 + 25)) >> 3);
                  v139 = 1;
                  nlv4_inference_orchestrator::inference_engine::Trail::getHidden(v42, &v134);
                  nlv4_inference_orchestrator::inference_engine::Trail::getMemory(v42, &v129);
                  nlv4_inference_orchestrator::inference_engine::Trail::getAttentionIndex(v42, v126);
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v143, (uint64_t)&v140, &v147, &v139, (uint64_t)&v134, (uint64_t)&v129, (uint64_t)v126);
                  if (__p)
                  {
                    v128 = __p;
                    operator delete(__p);
                  }
                  if (v126[0])
                  {
                    v126[1] = v126[0];
                    operator delete(v126[0]);
                  }
                  if (v132)
                  {
                    v133 = v132;
                    operator delete(v132);
                  }
                  if (v129)
                  {
                    v130 = (char *)v129;
                    operator delete(v129);
                  }
                  if (v137)
                  {
                    v138 = v137;
                    operator delete(v137);
                  }
                  if (v134)
                  {
                    v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)v134;
                    operator delete(v134);
                  }
                  if (v140)
                  {
                    v141 = v140;
                    operator delete(v140);
                  }
                  v55 = v156;
                  if ((unint64_t)v156 >= v157[0])
                  {
                    v65 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
                    v66 = v65 + 1;
                    if ((unint64_t)(v65 + 1) > 0x11A7B9611A7B961)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3) > v66)
                      v66 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3);
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3)) >= 0x8D3DCB08D3DCB0)
                      v67 = 0x11A7B9611A7B961;
                    else
                      v67 = v66;
                    v138 = v157;
                    if (v67)
                      v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v67);
                    else
                      v68 = 0;
                    v134 = (void *)v67;
                    v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v67 + 232 * v65);
                    v136 = v135;
                    v137 = (void *)(v67 + 232 * v68);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v135, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    v136 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v136 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, &v134);
                    v56 = v156;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v134);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    v56 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v55 + 232);
                  }
                  v156 = v56;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v56, 0x34F72C234F72C235 * ((v56 - v155) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                }
                else
                {
                  *(float *)v126 = v53 + v50[2];
                  v129 = 0;
                  v130 = 0;
                  v131 = 0;
                  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v129, *((const void **)v42 + 25), *((_QWORD *)v42 + 26), (uint64_t)(*((_QWORD *)v42 + 26) - *((_QWORD *)v42 + 25)) >> 3);
                  v57 = v130;
                  if (v130 >= v131)
                  {
                    v59 = (char *)v129;
                    v60 = (v130 - (_BYTE *)v129) >> 3;
                    v61 = v60 + 1;
                    if ((unint64_t)(v60 + 1) >> 61)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    v62 = v131 - (_BYTE *)v129;
                    if ((v131 - (_BYTE *)v129) >> 2 > v61)
                      v61 = v62 >> 2;
                    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
                      v63 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v63 = v61;
                    if (v63)
                    {
                      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v131, v63);
                      v59 = (char *)v129;
                      v57 = v130;
                    }
                    else
                    {
                      v64 = 0;
                    }
                    v69 = &v64[8 * v60];
                    *(_QWORD *)v69 = *(_QWORD *)v50;
                    v58 = v69 + 8;
                    while (v57 != v59)
                    {
                      v70 = *((_QWORD *)v57 - 1);
                      v57 -= 8;
                      *((_QWORD *)v69 - 1) = v70;
                      v69 -= 8;
                    }
                    v129 = v69;
                    v130 = v58;
                    v131 = &v64[8 * v63];
                    if (v59)
                      operator delete(v59);
                  }
                  else
                  {
                    *(_QWORD *)v130 = *(_QWORD *)v50;
                    v58 = v57 + 8;
                  }
                  v130 = v58;
                  LOBYTE(v134) = 0;
                  nlv4_inference_orchestrator::inference_engine::Trail::Trail((uint64_t)v143, (uint64_t)&v129, v126, &v134, (uint64_t)&v152, (uint64_t)&v153, (uint64_t)&v154);
                  v71 = v156;
                  if ((unint64_t)v156 >= v157[0])
                  {
                    v73 = 0x34F72C234F72C235 * ((v156 - v155) >> 3);
                    v74 = v73 + 1;
                    if ((unint64_t)(v73 + 1) > 0x11A7B9611A7B961)
                      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
                    if (0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3) > v74)
                      v74 = 0x69EE58469EE5846ALL * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3);
                    if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v157[0] - (_QWORD)v155) >> 3)) >= 0x8D3DCB08D3DCB0)
                      v75 = 0x11A7B9611A7B961;
                    else
                      v75 = v74;
                    v138 = v157;
                    if (v75)
                      v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v75);
                    else
                      v76 = 0;
                    v134 = (void *)v75;
                    v135 = (nlv4_inference_orchestrator::inference_engine::Trail *)(v75 + 232 * v73);
                    v136 = v135;
                    v137 = (void *)(v75 + 232 * v76);
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v135, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    v136 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v136 + 232);
                    std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v155, &v134);
                    v72 = v156;
                    std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)&v134);
                  }
                  else
                  {
                    nlv4_inference_orchestrator::inference_engine::Trail::Trail(v156, (const nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                    v72 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v71 + 232);
                  }
                  v156 = v72;
                  std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail> &,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v72, 0x34F72C234F72C235 * ((v72 - v155) >> 3));
                  nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)v143);
                  if (v129)
                  {
                    v130 = (char *)v129;
                    operator delete(v129);
                  }
                }
                v50 += 4;
              }
              while (v50 != v51);
              v50 = (float *)v148;
            }
            v40 = v122;
            v43 = v120;
            if (v50)
              operator delete(v50);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v150);
            nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)v221);
          }
          v42 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 + 232);
        }
        while (v42 != v43);
        v42 = v182;
        v81 = v181;
        if (v182 != v181)
        {
          do
          {
            v42 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v42 - 232);
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail(v42);
          }
          while (v42 != v81);
          v42 = v81;
        }
      }
      v182 = v42;
      v82 = *(_QWORD *)(v40 + 192);
      if (v82)
      {
        v83 = 0;
        v84 = v156;
        do
        {
          v85 = v155;
          if (v155 != v84)
          {
            v86 = v182;
            if ((unint64_t)v182 >= v183)
            {
              v88 = 0x34F72C234F72C235 * ((v182 - v181) >> 3);
              v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) > 0x11A7B9611A7B961)
                std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
              if (0x69EE58469EE5846ALL * ((uint64_t)(v183 - (_QWORD)v181) >> 3) > v89)
                v89 = 0x69EE58469EE5846ALL * ((uint64_t)(v183 - (_QWORD)v181) >> 3);
              if ((unint64_t)(0x34F72C234F72C235 * ((uint64_t)(v183 - (_QWORD)v181) >> 3)) >= 0x8D3DCB08D3DCB0)
                v90 = 0x11A7B9611A7B961;
              else
                v90 = v89;
              v224 = &v183;
              if (v90)
                v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<nlv4_inference_orchestrator::inference_engine::Trail>>(v90);
              else
                v91 = 0;
              *(_QWORD *)v221 = v90;
              *(_QWORD *)&v221[8] = v90 + 232 * v88;
              v222 = *(char **)&v221[8];
              v223 = (char *)(v90 + 232 * v91);
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(*(nlv4_inference_orchestrator::inference_engine::Trail **)&v221[8], v85);
              v222 += 232;
              std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__swap_out_circular_buffer((uint64_t *)&v181, v221);
              v87 = v182;
              std::__split_buffer<nlv4_inference_orchestrator::inference_engine::Trail>::~__split_buffer((uint64_t)v221);
            }
            else
            {
              nlv4_inference_orchestrator::inference_engine::Trail::Trail(v182, v155);
              v87 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v86 + 232);
            }
            v182 = v87;
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::less<nlv4_inference_orchestrator::inference_engine::Trail>,std::__wrap_iter<nlv4_inference_orchestrator::inference_engine::Trail*>>((uint64_t)v155, (uint64_t)v156, 0x34F72C234F72C235 * ((v156 - v155) >> 3));
            nlv4_inference_orchestrator::inference_engine::Trail::~Trail((nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v156 - 232));
            v156 = v84;
            v82 = *(_QWORD *)(v40 + 192);
          }
          ++v83;
        }
        while (v83 < v82);
        v42 = v182;
      }
      for (i = v181; ; i = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)i + 232))
      {
        if (i == v42)
        {
          *(_QWORD *)v221 = &v155;
          std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)v221);
          goto LABEL_156;
        }
        if (!*((_BYTE *)i + 224))
          break;
      }
      *(_QWORD *)v221 = &v155;
      std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)v221);
      v41 = v115 + 1;
      if (*(_QWORD *)(a1 + 216) > (unint64_t)(v115 + 1))
        continue;
      break;
    }
  }
LABEL_156:
  v93 = SNLPOSLoggerForCategory(7);
  if (v116 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v94 = v93;
    if (os_signpost_enabled(v93))
    {
      *(_WORD *)v221 = 0;
      _os_signpost_emit_with_name_impl(&dword_1C2196000, v94, OS_SIGNPOST_INTERVAL_END, spid, "Decoder Inference", "", v221, 2u);
    }
  }
  v95 = SNLPOSLoggerForCategory(0);
  v96 = v123;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v221 = 0;
    _os_log_impl(&dword_1C2196000, v95, OS_LOG_TYPE_DEFAULT, "END \"Decoder Inference\"", v221, 2u);
  }
  *v123 = 0;
  v123[1] = 0;
  v123[2] = 0;
  std::vector<std::pair<float,std::vector<unsigned long>>>::__assign_with_size[abi:ne180100]<std::pair<float,std::vector<unsigned long>> const*,std::pair<float,std::vector<unsigned long>> const*>(v123);
  v97 = v181;
  for (j = v182; v97 != j; v97 = (nlv4_inference_orchestrator::inference_engine::Trail *)((char *)v97 + 232))
  {
    v99 = *(_DWORD *)v97;
    v143[0] = 0;
    v143[1] = 0;
    v144 = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v143, *((const void **)v97 + 25), *((_QWORD *)v97 + 26), (uint64_t)(*((_QWORD *)v97 + 26) - *((_QWORD *)v97 + 25)) >> 3);
    v100 = v143[0];
    v101 = v143[1];
    v102 = v144;
    v143[1] = 0;
    v144 = 0;
    v143[0] = 0;
    v103 = v96[1];
    v104 = v96[2];
    if (v103 >= v104)
    {
      v106 = *v96;
      v107 = (uint64_t)(v103 - *v96) >> 5;
      v108 = v107 + 1;
      if ((unint64_t)(v107 + 1) >> 59)
        std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
      v109 = v104 - v106;
      if (v109 >> 4 > v108)
        v108 = v109 >> 4;
      if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFE0)
        v110 = 0x7FFFFFFFFFFFFFFLL;
      else
        v110 = v108;
      v224 = (unint64_t *)(v123 + 2);
      v111 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v110);
      v112 = &v111[32 * v107];
      *(_QWORD *)v221 = v111;
      *(_QWORD *)&v221[8] = v112;
      v223 = &v111[32 * v113];
      *(_DWORD *)v112 = v99;
      *((_QWORD *)v112 + 1) = v100;
      *((_QWORD *)v112 + 2) = 0;
      *((_QWORD *)v112 + 2) = v101;
      *((_QWORD *)v112 + 3) = v102;
      v222 = v112 + 32;
      v96 = v123;
      std::vector<std::pair<float,std::vector<unsigned long>>>::__swap_out_circular_buffer(v123, v221);
      v105 = v123[1];
      std::__split_buffer<std::pair<float,std::vector<unsigned long>>>::~__split_buffer((uint64_t)v221);
    }
    else
    {
      *(_DWORD *)v103 = v99;
      *(_QWORD *)(v103 + 8) = v100;
      *(_QWORD *)(v103 + 16) = v101;
      v105 = v103 + 32;
      *(_QWORD *)(v103 + 24) = v102;
    }
    v96[1] = v105;
    if (v143[0])
    {
      v143[1] = v143[0];
      operator delete(v143[0]);
    }
  }
  if (v158)
    operator delete(v158);
  if (v161[0])
  {
    v161[1] = v161[0];
    operator delete(v161[0]);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)v162);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)buf);
  *(_QWORD *)buf = &v181;
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v187)
  {
    v188 = v187;
    operator delete(v187);
  }
  if (v184)
  {
    v185 = v184;
    operator delete(v184);
  }
  if (v193)
  {
    v194 = v193;
    operator delete(v193);
  }
  if (v190)
  {
    v191 = v190;
    operator delete(v190);
  }
  operator delete(v119);
  operator delete(v22);
  operator delete(v118);
  operator delete(v117);
  if (v201)
  {
    v202 = v201;
    operator delete(v201);
  }
  if (v199)
  {
    v200 = v199;
    operator delete(v199);
  }
  if (v197)
  {
    v198 = v197;
    operator delete(v197);
  }
  if (v195)
  {
    v196 = v195;
    operator delete(v195);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)v203);
  if (v215)
  {
    v216 = v215;
    operator delete(v215);
  }
  if (v213)
  {
    v214 = v213;
    operator delete(v213);
  }
  if (v219)
  {
    v220 = v219;
    operator delete(v219);
  }
  if (v217)
  {
    v218 = v217;
    operator delete(v217);
  }
}

void sub_1C22F2164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v17 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v17;
    operator delete(v17);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType::~TransformerDecoderOutputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderOutputType *)&STACK[0x3B0]);
  nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType::~TransformerDecoderInputType((nlv4_inference_orchestrator::inference_engine::TransformerDecoderInputType *)&STACK[0x470]);
  STACK[0x470] = (unint64_t)&STACK[0x598];
  std::vector<nlv4_inference_orchestrator::inference_engine::Trail>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x470]);
  v18 = (void *)STACK[0x5C8];
  if (STACK[0x5C8])
  {
    STACK[0x5D0] = (unint64_t)v18;
    operator delete(v18);
  }
  v19 = (void *)STACK[0x5B0];
  if (STACK[0x5B0])
  {
    STACK[0x5B8] = (unint64_t)v19;
    operator delete(v19);
  }
  v20 = (void *)STACK[0x5F8];
  if (STACK[0x5F8])
  {
    STACK[0x600] = (unint64_t)v20;
    operator delete(v20);
  }
  v21 = (void *)STACK[0x5E0];
  if (STACK[0x5E0])
  {
    STACK[0x5E8] = (unint64_t)v21;
    operator delete(v21);
  }
  operator delete(a16);
  operator delete(a13);
  operator delete(a15);
  operator delete(a14);
  v22 = (void *)STACK[0x658];
  if (STACK[0x658])
  {
    STACK[0x660] = (unint64_t)v22;
    operator delete(v22);
  }
  v23 = (void *)STACK[0x640];
  if (STACK[0x640])
  {
    STACK[0x648] = (unint64_t)v23;
    operator delete(v23);
  }
  v24 = (void *)STACK[0x628];
  if (STACK[0x628])
  {
    STACK[0x630] = (unint64_t)v24;
    operator delete(v24);
  }
  v25 = (void *)STACK[0x610];
  if (STACK[0x610])
  {
    STACK[0x618] = (unint64_t)v25;
    operator delete(v25);
  }
  nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType::~TransformerEncoderModuleInputType((nlv4_inference_orchestrator::inference_engine::TransformerEncoderModuleInputType *)&STACK[0x670]);
  v26 = (void *)STACK[0x778];
  if (STACK[0x778])
  {
    STACK[0x780] = (unint64_t)v26;
    operator delete(v26);
  }
  v27 = (void *)STACK[0x760];
  if (STACK[0x760])
  {
    STACK[0x768] = (unint64_t)v27;
    operator delete(v27);
  }
  v28 = (void *)STACK[0x7A8];
  if (STACK[0x7A8])
  {
    STACK[0x7B0] = (unint64_t)v28;
    operator delete(v28);
  }
  v29 = (void *)STACK[0x790];
  if (STACK[0x790])
  {
    STACK[0x798] = (unint64_t)v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPaddingMask(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  float *v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  std::runtime_error *exception;
  char *p_p;
  std::string v9;
  void *__p;
  _BYTE *v11;
  char v12;

  v3 = (float *)a1[21];
  if (v3 == (float *)a1[22] || (v4 = a1[12], (unint64_t)(a1[13] - v4) <= 0xF))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "The padding mask could not be created because there were no utterance length data or context data provided.");
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v12 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    std::string::basic_string[abi:ne180100]<0>(&v9, p_p);
    std::runtime_error::runtime_error(exception, &v9);
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E7BE9DD0;
  }
  v5 = *(_QWORD *)(v4 + 8) + (unint64_t)*v3;
  LODWORD(v9.__r_.__value_.__l.__data_) = 1065353216;
  std::vector<float>::vector(&__p, v5, &v9);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v6 = operator new(0x10uLL);
  a2[1] = v6 + 2;
  a2[2] = v6 + 2;
  *v6 = 1;
  v6[1] = v5;
  *a2 = v6;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, __p, (uint64_t)v11, (v11 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_1C22F28D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)v20;
  if (*(_QWORD *)v20)
  {
    *(_QWORD *)(v20 + 8) = v22;
    operator delete(v22);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getPositionIds(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  void *v4;
  uint64_t v5;
  float v6;
  float *v7;
  _QWORD *v8;
  void *__p;
  void *v10;

  v3 = (unint64_t)**(float **)(a1 + 168);
  std::vector<float>::vector(&__p, v3);
  v4 = __p;
  v5 = (uint64_t)v10;
  if (__p != v10)
  {
    v6 = 0.0;
    v7 = (float *)__p;
    do
    {
      *v7++ = v6;
      v6 = v6 + 1.0;
    }
    while (v7 != (float *)v5);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v8 = operator new(0x10uLL);
  a2[1] = v8 + 2;
  a2[2] = v8 + 2;
  *v8 = 1;
  v8[1] = v3;
  *a2 = v8;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2 + 3, v4, v5, (v5 - (uint64_t)v4) >> 2);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1C22F2A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nlv4_inference_orchestrator::inference_engine::EspressoTransformerE5MLModel::getNetworkConfig(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  NSObject *v12;
  std::string *v13;
  void **v14;
  std::string v15;
  std::string v16;
  void *__p[2];
  int64_t v18;
  std::string v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)(a1 + 248);
  if (std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>((_QWORD *)(a1 + 248), a2))
  {
    v4 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
    if (!v4)
      goto LABEL_31;
    if (*((_DWORD *)v4 + 16) == 1)
    {
      v5 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, a2);
      if (v5)
      {
        if (*((_DWORD *)v5 + 16) != 1)
          std::__throw_bad_variant_access[abi:ne180100]();
        return *((unsigned int *)v5 + 10);
      }
LABEL_31:
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "component_name");
  v7 = std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::find<std::string>(v3, (unsigned __int8 *)__p);
  if (v7 && *((_DWORD *)v7 + 16) == 4)
  {
    if ((char)v7[63] < 0)
      std::string::__init_copy_ctor_external(&v16, *((const std::string::value_type **)v7 + 5), *((_QWORD *)v7 + 6));
    else
      v16 = *(std::string *)(v7 + 40);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "UNDEFINED_COMPONENT");
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  std::operator+<char>();
  v8 = std::string::append(&v15, ".\n");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v19, "Note that only parameters of unsigned integer type are currently expected by NLv4Parser.  This issue will likely cause NLv4 parser inference to fail.");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v18 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v12 = SNLPOSLoggerForCategory(4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = &v16;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    v14 = __p;
    if (v18 < 0)
      v14 = (void **)__p[0];
    LODWORD(v19.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v19.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
    WORD2(v19.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl(&dword_1C2196000, v12, OS_LOG_TYPE_DEBUG, "[%s] %s", (uint8_t *)&v19, 0x16u);
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1C22F2C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1C22F3100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  void *v41;
  uint64_t v42;

  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](v42 - 176);
  snlp::ssu::matcher::SSUAppInfo::~SSUAppInfo(&a20);
  objc_sync_exit(v41);

  _Unwind_Resume(a1);
}

void sub_1C22F3630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100](v38 - 160);
  objc_sync_exit(v35);

  _Unwind_Resume(a1);
}

void sub_1C22F3DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  void *v53;

  std::__optional_destruct_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a53);
  a53 = &a32;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a53);
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

void sub_1C22F4518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  void *v28;
  uint64_t v30;

  if (__p)
    operator delete(__p);
  if (a15)
    (*(void (**)(uint64_t))(*(_QWORD *)a15 + 8))(a15);
  MEMORY[0x1C3BB8428](&a19);
  v30 = a27;
  a27 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);

  _Unwind_Resume(a1);
}

void sub_1C22F47C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1C22F50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
  void *v42;

  a42 = (uint64_t)&a26;
  std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  if (a41)
  {
    a26 = (uint64_t)&a38;
    std::vector<snlp::ssu::app::SSUAppParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  }
  objc_sync_exit(obj);

  _Unwind_Resume(a1);
}

snlp::ssu::matcher::SSUMatcher *std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100](snlp::ssu::matcher::SSUMatcher **a1, snlp::ssu::matcher::SSUMatcher *a2)
{
  snlp::ssu::matcher::SSUMatcher *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    snlp::ssu::matcher::SSUMatcher::~SSUMatcher(result);
    JUMPOUT(0x1C3BB9B44);
  }
  return result;
}

void snlp::ssu::matcher::SSUMatcher::~SSUMatcher(snlp::ssu::matcher::SSUMatcher *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 344));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 280);
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<sentencepiece::SentencePieceText>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 24);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

__n128 std::__optional_storage_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,false>>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void *v5;
  __n128 result;
  void *v7;
  __int128 v8;

  if (*(unsigned __int8 *)(a1 + 56) == *((unsigned __int8 *)a2 + 56))
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
      v5 = *(void **)(a1 + 32);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      if (v5)
      {
        *(_QWORD *)(a1 + 40) = v5;
        operator delete(v5);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
      }
      result = (__n128)a2[2];
      *(__n128 *)(a1 + 32) = result;
      *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 6) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 56))
  {
    v7 = *(void **)(a1 + 32);
    if (v7)
    {
      *(_QWORD *)(a1 + 40) = v7;
      operator delete(v7);
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    result = (__n128)a2[2];
    *(__n128 *)(a1 + 32) = result;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 6) = 0;
    *(_BYTE *)(a1 + 56) = 1;
  }
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const*,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const*,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::allocator<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo>::construct[abi:ne180100]<snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo,snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo const&>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo::~SSUBackgroundUpdateAppInfo(snlp::ssu::selflogging::SSUBackgroundUpdateAppInfo *this)
{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void sub_1C22F5B84()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x1C22F5C30);
}

void sub_1C22F5BA8()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x1C22F5C30);
}

void sub_1C22F5BD4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1C22F5BE4(uint64_t a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100]((snlp::ssu::matcher::SSUMatcher **)va, 0);

  JUMPOUT(0x1C22F5C30);
}

void sub_1C22F5BFC()
{
  JUMPOUT(0x1C22F5C38);
}

void sub_1C22F5C04()
{
  JUMPOUT(0x1C22F5C40);
}

void sub_1C22F5C0C()
{
  JUMPOUT(0x1C22F5C48);
}

void sub_1C22F5C14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  void *v40;

  if (a39 < 0)
    operator delete(__p);

  if (a33 < 0)
    operator delete(a28);

  JUMPOUT(0x1C22F5CA0);
}

void sub_1C22F5C1C()
{
  JUMPOUT(0x1C22F5C84);
}

void sub_1C22F5C24()
{
  void *v0;

  JUMPOUT(0x1C22F5CACLL);
}

void sub_1C22F5C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,snlp::ssu::matcher::SSUMatcher *a27,void *a28)
{
  void *v28;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a22);
  std::unique_ptr<snlp::ssu::matcher::SSUMatcher>::reset[abi:ne180100](&a27, 0);
  snlp::common::selflogging::NLXSchemaNLXClientEventMetadata::~NLXSchemaNLXClientEventMetadata(&a28);

  _Unwind_Resume(a1);
}

void sub_1C22F5C60()
{
  void *v0;

  JUMPOUT(0x1C22F5C68);
}

void sub_1C22F5E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  void *v17;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void SentencepieceModelLoadingError::~SentencepieceModelLoadingError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C3BB9B44);
}

void nl_featurization::bio::BilouEncoder::encode(uint64_t a1@<X0>, unint64_t **a2@<X1>, uint64_t *a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  std::basic_string<char16_t>::size_type v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  __int128 *v38;
  uint64_t v39;
  uint64_t *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  std::basic_string<char16_t> v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  __int128 v52;
  std::basic_string<char16_t>::size_type v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  int v57;
  uint64_t v58[3];
  uint64_t v59[3];
  uint64_t v60[3];
  uint64_t v61[3];
  uint64_t v62[3];
  void ***v63;

  v9 = *a3;
  v8 = a3[1];
  if (*(char *)(a1 + 23) < 0)
    std::basic_string<char16_t>::__init_copy_ctor_external(&v47, *(const std::basic_string<char16_t>::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v47 = *(std::basic_string<char16_t> *)a1;
  std::unordered_set<std::basic_string<char16_t>>::unordered_set((uint64_t)&v42, a1 + 24);
  v10 = (v8 - v9) >> 3;
  v11 = 0x8E38E38E38E38E39 * v10;
  v48 = 0x8E38E38E38E38E39 * v10;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v40 = &v49;
  v41 = 0;
  if (v8 != v9)
  {
    std::vector<std::vector<std::pair<std::string,std::reference_wrapper<sirinluinternal::MatchingSpan const>>>>::__vallocate[abi:ne180100](&v49, 0x8E38E38E38E38E39 * v10);
    v12 = (char *)v50;
    v13 = 24 * ((24 * v11 - 24) / 0x18) + 24;
    bzero(v50, v13);
    v50 = &v12[v13];
  }
  v52 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
  v14 = v47.__r_.__value_.__r.__words[2];
  memset(&v47, 0, sizeof(v47));
  v15 = v42;
  v16 = v43;
  v42 = 0;
  v43 = 0;
  v53 = v14;
  v54 = v15;
  v55 = v16;
  v56[0] = v44;
  v56[1] = v45;
  v57 = v46;
  if (v45)
  {
    v17 = *(_QWORD *)(v44 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16)
        v17 %= v16;
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(_QWORD *)(v15 + 8 * v17) = v56;
    v44 = 0;
    v45 = 0;
  }
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v58, (char *)L"B");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v59, (char *)L"I");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v60, (char *)L"L");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v61, (char *)L"O");
  std::basic_string<char16_t>::basic_string[abi:ne180100]<0>(v62, (char *)L"U");
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&v42);
  v18 = *a2;
  v19 = a2[1];
  while (v18 != v19)
  {
    v20 = v18 + 2;
    nl_featurization::bio::TagBucketList::addBIOUL((int8x8_t *)&v48, (uint64_t)(v18 + 2), *v18, v18[1]);
    v18 = v20 + 3;
  }
  nl_featurization::bio::TagBucketList::getBucketLists((uint64_t)&v48, &v40);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v22 = *a3;
  v21 = a3[1];
  v37 = a4;
  LOBYTE(v38) = 0;
  if (v21 != v22)
  {
    v23 = 0x8E38E38E38E38E39 * ((v21 - v22) >> 3);
    if (v23 >= 0x38E38E38E38E38FLL)
      std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
    v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<snlp::ssu::app::SSUAppIntent>>(v23);
    v25 = 0;
    *a4 = v24;
    a4[1] = v24;
    a4[2] = &v24[72 * v26];
    do
    {
      v27 = &v24[v25];
      v28 = (__int128 *)(v22 + v25);
      if (*(char *)(v22 + v25 + 23) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external((std::basic_string<char16_t> *)&v24[v25], *(const std::basic_string<char16_t>::value_type **)v28, *((_QWORD *)v28 + 1));
      }
      else
      {
        v29 = *v28;
        *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
        *(_OWORD *)v27 = v29;
      }
      v30 = *(_OWORD *)(v22 + v25 + 24);
      v31 = *(_DWORD *)(v22 + v25 + 39);
      *(_QWORD *)&v24[v25 + 48] = 0;
      v32 = (uint64_t)&v24[v25 + 48];
      *(_DWORD *)(v32 - 9) = v31;
      *(_OWORD *)(v32 - 24) = v30;
      *(_QWORD *)(v32 + 8) = 0;
      *(_QWORD *)(v32 + 16) = 0;
      std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>(v32, *(__int128 **)(v22 + v25 + 48), *(__int128 **)(v22 + v25 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v22 + v25 + 56) - *(_QWORD *)(v22 + v25 + 48)) >> 3));
      v25 += 72;
    }
    while (v22 + v25 != v21);
    v33 = (char *)*a4;
    a4[1] = &v24[v25];
    if (&v24[v25] != v33)
    {
      v34 = 0;
      v35 = 0;
      v36 = 56;
      do
      {
        v38 = 0;
        v39 = 0;
        v37 = 0;
        std::vector<std::basic_string<char16_t>>::__init_with_size[abi:ne180100]<std::basic_string<char16_t>*,std::basic_string<char16_t>*>((uint64_t)&v37, (__int128 *)v40[v34], (__int128 *)v40[v34 + 1], 0xAAAAAAAAAAAAAAABLL * ((v40[v34 + 1] - v40[v34]) >> 3));
        std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)((char *)*a4 + v36 - 8));
        std::vector<std::basic_string<char16_t>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::basic_string<char16_t> const*>,std::__wrap_iter<std::basic_string<char16_t> const*>>((uint64_t *)((char *)*a4 + v36 - 8), *(std::basic_string<char16_t> **)((char *)*a4 + v36), (__int128 *)v37, v38, 0xAAAAAAAAAAAAAAABLL * (((char *)v38 - (char *)v37) >> 3));
        v63 = &v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
        ++v35;
        v36 += 72;
        v34 += 3;
      }
      while (v35 < 0x8E38E38E38E38E39 * (((_BYTE *)a4[1] - (_BYTE *)*a4) >> 3));
    }
  }
  v37 = (void **)&v40;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](&v37);
  nl_featurization::bio::TagBucketList::~TagBucketList((void **)&v48);
}

void sub_1C22F6270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)&a16);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::vector<nl_featurization::nlv4_types::Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<nl_featurization::nlv4_types::Token>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void nl_featurization::bio::TagBucketList::~TagBucketList(void **this)
{
  void **v2;

  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  std::__hash_table<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,snlp::common::espresso_inference::e5ml::WeightsHandler::EspressoWeightType>>>::~__hash_table((uint64_t)(this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this + 1;
  std::vector<uaap_orchestration::grammar::Path>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::allocator<nl_featurization::nlv4_types::Token>::destroy[abi:ne180100](uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::SpanProcessor(uint64_t a1, uint64_t *a2)
{
  nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie(a2, a1);
  return a1;
}

{
  nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie(a2, a1);
  return a1;
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::buildReverseMappingAndPatternTrie@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _QWORD *i;
  std::basic_string<char16_t>::value_type v7;
  unsigned int v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  std::logic_error *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::basic_string<char16_t> __p;
  void *v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int16 v23;
  void *v24[2];
  __int128 v25;
  int v26;
  _OWORD v27[2];
  int v28;

  memset(v27, 0, sizeof(v27));
  v28 = 1065353216;
  LOBYTE(v23) = 0;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  v26 = 1065353216;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v5 = 0;
  }
  else
  {
    v5 = 0;
    do
    {
      for (i = *(_QWORD **)(v3 + 40); i; i = (_QWORD *)*i)
      {
        normalize((uint64_t)(i + 2), 0, &__p);
        u16strCaseFold((uint64_t)&__p, v7, (uint64_t)&v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (!nl_featurization::span_matching::span_processor::validatePatternSubstring((uint64_t *)&v20, v3))
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          toString((uint64_t)(i + 2), &v18);
          v16 = std::string::insert(&v18, 0, "Encountered invalid substring: ");
          v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, (const std::string *)&__p);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E7BE5148, MEMORY[0x1E0DE4360]);
        }
        v8 = v22;
        if ((v22 & 0x80u) != 0)
          v8 = v21;
        if (v5 <= v8)
          v5 = v8;
        nl_featurization::pattern_trie::PatternTrie::insert(&v23, (uint64_t)&v20);
        __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v20;
        v9 = std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::__emplace_unique_key_args<std::basic_string<char16_t>,std::piecewise_construct_t const&,std::tuple<std::basic_string<char16_t> const&>,std::tuple<>>((uint64_t)v27, (unsigned __int16 *)&v20, (__int128 **)&__p);
        v10 = (uint64_t *)(v9 + 40);
        v11 = *((_QWORD *)v9 + 6);
        if (v11 >= *((_QWORD *)v9 + 7))
        {
          v12 = std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(v10, (__int128 *)v3);
        }
        else
        {
          std::vector<std::basic_string<char16_t>>::__construct_one_at_end[abi:ne180100]<std::basic_string<char16_t> const&>((uint64_t)v10, (__int128 *)v3);
          v12 = v11 + 24;
        }
        *((_QWORD *)v9 + 6) = v12;
        if ((char)v22 < 0)
          operator delete(v20);
      }
      v3 += 64;
    }
    while (v3 != v4);
  }
  std::unordered_map<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>::unordered_map(a2, (uint64_t)v27);
  *(_BYTE *)(a2 + 40) = v23;
  std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(a2 + 48, (uint64_t)v24);
  *(_DWORD *)(a2 + 88) = v5;
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node((_QWORD *)v25);
  v13 = v24[0];
  v24[0] = 0;
  if (v13)
    operator delete(v13);
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)v27);
}

void sub_1C22F676C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;
  uint64_t v35;

  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table(v35);
  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v34);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<std::basic_string<char16_t>>>>>::~__hash_table((uint64_t)&a34);
  _Unwind_Resume(a1);
}

BOOL nl_featurization::span_matching::span_processor::validatePatternSubstring(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  UChar32 v7;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  BOOL v13;
  std::logic_error *exception;
  std::string *v16;
  __int128 v17;
  std::string v18;
  std::string v19;

  v3 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1[1];
    if (!v4)
      goto LABEL_25;
    v3 = (uint64_t *)*a1;
  }
  else
  {
    v4 = *((unsigned __int8 *)a1 + 23);
    if (!*((_BYTE *)a1 + 23))
    {
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      toString(a2, &v18);
      v16 = std::string::insert(&v18, 0, "Encountered empty normalized matching substring for label: ");
      v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v19.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v19);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
      __cxa_throw(exception, (struct type_info *)off_1E7BE5148, MEMORY[0x1E0DE4360]);
    }
  }
  v5 = 0;
  while (1)
  {
    v6 = v5 + 1;
    v7 = *((unsigned __int16 *)v3 + v5);
    if ((v7 & 0xFC00) == 0xD800 && v6 != v4)
    {
      v9 = *((unsigned __int16 *)v3 + v6);
      v10 = (v9 & 0xFC00) == 56320;
      v11 = v9 + (v7 << 10) - 56613888;
      v6 = v10 ? v5 + 2 : v5 + 1;
      if (v10)
        v7 = v11;
    }
    if (v5)
    {
      v5 = v6;
      if (v6 < v4)
        continue;
    }
    v12 = u_isspace(v7);
    v13 = v12 || v6 >= v4;
    v5 = v6;
    if (v13)
      break;
  }
  return v12 == 0;
}

void sub_1C22F6978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t std::vector<std::basic_string<char16_t>>::__emplace_back_slow_path<std::basic_string<char16_t> const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  std::basic_string<char16_t> *v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v14[2];
  std::basic_string<char16_t> *v15;
  char *v16;
  uint64_t *v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v17 = v6;
  if (v7)
  {
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v7);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v10 = (std::basic_string<char16_t> *)&v9[24 * v2];
  v14[0] = v9;
  v14[1] = v10;
  v15 = v10;
  v16 = &v9[24 * v8];
  if (*((char *)a2 + 23) < 0)
  {
    std::basic_string<char16_t>::__init_copy_ctor_external(v10, *(const std::basic_string<char16_t>::value_type **)a2, *((_QWORD *)a2 + 1));
    v10 = v15;
  }
  else
  {
    v11 = *a2;
    v10->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v15 = v10 + 1;
  std::vector<std::basic_string<char16_t>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1C22F6AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::basic_string<char16_t>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = (uint64_t *)(a2 + 16);
  v6 = (_QWORD *)(a1 + 16);
LABEL_2:
  while (1)
  {
    v5 = (uint64_t *)*v5;
    if (!v5)
      return a1;
    v7 = *((unsigned __int16 *)v5 + 8);
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        v2 = *((unsigned __int16 *)v5 + 8);
        if (v8 <= v7)
          v2 = v7 % v8;
      }
      else
      {
        v2 = ((_DWORD)v8 - 1) & v7;
      }
      v10 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v2);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t **)*i)
        {
          v12 = (unint64_t)i[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)i + 8) == (_DWORD)v7)
              goto LABEL_2;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v2)
              break;
          }
        }
      }
    }
    v13 = operator new(0x48uLL);
    v24[0] = v13;
    v24[1] = a1 + 16;
    v25 = 0;
    *v13 = 0;
    v13[1] = v7;
    *((_WORD *)v13 + 8) = *((_WORD *)v5 + 8);
    *((_BYTE *)v13 + 24) = *((_BYTE *)v5 + 24);
    std::unordered_map<char16_t,nl_featurization::pattern_trie::PatternTrieNode>::unordered_map(v13 + 4, v5 + 4);
    v25 = 1;
    v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
    v15 = *(float *)(a1 + 32);
    if (!v8 || (float)(v15 * (float)v8) < v14)
    {
      v16 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3)
        v16 = 1;
      v17 = v16 | (2 * v8);
      v18 = vcvtps_u32_f32(v14 / v15);
      if (v17 <= v18)
        v19 = v18;
      else
        v19 = v17;
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v19);
      v8 = *(_QWORD *)(a1 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v8 <= v7)
          v2 = v7 % v8;
        else
          v2 = v7;
      }
      else
      {
        v2 = ((_DWORD)v8 - 1) & v7;
      }
    }
    v20 = *(_QWORD *)a1;
    v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
    if (v21)
    {
      *v13 = *v21;
    }
    else
    {
      *v13 = *v6;
      *v6 = v13;
      *(_QWORD *)(v20 + 8 * v2) = v6;
      if (!*v13)
        goto LABEL_40;
      v22 = *(_QWORD *)(*v13 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    }
    *v21 = v13;
LABEL_40:
    v24[0] = 0;
    ++*(_QWORD *)(a1 + 24);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100]((uint64_t)v24);
  }
}

void sub_1C22F6D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(*(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table(v1 + 4);
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__hash_table<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::__unordered_map_hasher<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::hash<char16_t>,std::equal_to<char16_t>,true>,std::__unordered_map_equal<char16_t,std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>,std::equal_to<char16_t>,std::hash<char16_t>,true>,std::allocator<std::__hash_value_type<char16_t,nl_featurization::pattern_trie::PatternTrieNode>>>::~__hash_table((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t nl_featurization::span_matching::span_processor::SpanProcessor::matchSpans@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[2];
  int v23;
  int32x2_t v24;
  std::basic_string<char16_t> v25;
  void **v26[5];

  memset(v22, 0, sizeof(v22));
  v23 = 1065353216;
  nl_featurization::span_matching::span_processor::SpanProcessor::findAndAddSpans(a1, a2, v22);
  v19 = 0;
  v20 = 0;
  v21 = 0;
  nl_featurization::span_matching::span_processor::SpanProcessor::selectSpansMatchingOptions(v6, (uint64_t)v22, a3, &v19);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v7 = v19;
  v8 = v20;
  if (v19 != v20)
  {
    v9 = 0;
    v10 = (unint64_t *)(a4 + 2);
    do
    {
      v24 = vmovn_s64(*(int64x2_t *)(v7 + 16));
      if (*(char *)(v7 + 55) < 0)
      {
        std::basic_string<char16_t>::__init_copy_ctor_external(&v25, *(const std::basic_string<char16_t>::value_type **)(v7 + 32), *(_QWORD *)(v7 + 40));
        v9 = a4[1];
      }
      else
      {
        v25 = *(std::basic_string<char16_t> *)(v7 + 32);
      }
      if (v9 >= *v10)
      {
        v12 = (uint64_t)(v9 - *a4) >> 5;
        if ((unint64_t)(v12 + 1) >> 59)
          std::vector<boost::archive::detail::basic_iarchive_impl::aobject>::__throw_length_error[abi:ne180100]();
        v13 = *v10 - *a4;
        v14 = v13 >> 4;
        if (v13 >> 4 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
          v15 = 0x7FFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        v26[4] = (void **)(a4 + 2);
        if (v15)
          v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<float,std::vector<unsigned long>>>>(v15);
        else
          v16 = 0;
        v17 = v15 + 32 * v12;
        v26[0] = (void **)v15;
        v26[1] = (void **)v17;
        v26[3] = (void **)(v15 + 32 * v16);
        *(int32x2_t *)v17 = v24;
        *(std::basic_string<char16_t> *)(v17 + 8) = v25;
        memset(&v25, 0, sizeof(v25));
        v26[2] = (void **)(v17 + 32);
        std::vector<nl_featurization::span_matching::MatchedSpan>::__swap_out_circular_buffer(a4, v26);
        v9 = a4[1];
        std::__split_buffer<std::pair<sirinluinternal::MatchingSpan_MatcherName,std::string>>::~__split_buffer((uint64_t)v26);
      }
      else
      {
        *(int32x2_t *)v9 = v24;
        v11 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
        *(_QWORD *)(v9 + 24) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
        *(_OWORD *)(v9 + 8) = v11;
        memset(&v25, 0, sizeof(v25));
        v9 += 32;
        a4[1] = v9;
      }
      a4[1] = v9;
      v7 += 56;
    }
    while (v7 != v8);
  }
  v26[0] = (void **)&v19;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100](v26);
  return std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)v22);
}

void sub_1C22F7034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26)
{
  a26 = &a10;
  std::vector<std::tuple<nl_featurization::span_matching::span_processor::SpanProcessor::Indices,std::basic_string<char16_t>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  std::__hash_table<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::__unordered_map_hasher<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::hash<std::basic_string<char16_t>>,std::equal_to<std::basic_string<char16_t>>,true>,std::__unordered_map_equal<std::basic_string<char16_t>,std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>,std::equal_to<std::basic_string<char16_t>>,std::hash<std::basic_string<char16_t>>,true>,std::allocator<std::__hash_value_type<std::basic_string<char16_t>,std::vector<nl_featurization::span_matching::span_processor::SpanProcessor::Indices>>>>::~__hash_table((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void nl_featurization::span_matching::span_processor::SpanProcessor::findAndAddSpans(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  std::basic_string<char16_t>::value_type v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::basic_string<char16_t>::size_type v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  const std::basic_string<char16_t>::value_type *v18;
  std::basic_string<char16_t>::size_type v19;
  std::basic_string<char16_t>::size_type size;
  std::basic_string<char16_t>::size_type v21;
  std::basic_string<char16_t>::size_type v22;
  BOOL v23;
  std::runtime_error *exception;
  char *v25;
  std::string *v26;
  std::string *v27;
  __int128 v28;
  URegularExpression *regexp;
  uint64_t v30;
  std::basic_string<char16_t>::size_type v31;
  _QWORD *v34;
  std::basic_string<char16_t> __p;
  std::basic_string<char16_t>::size_type v36;
  URegularExpression *v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::basic_string<char16_t> v41;
  UErrorCode status[2];

  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::vector<std::basic_string<char16_t>>::reserve(&v38, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4));
  v34 = a2;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)status = &v38;
  while (v4 != v5)
  {
    normalize(v4 + 16, 0, &__p);
    u16strCaseFold((uint64_t)&__p, v6, (uint64_t)&v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    std::back_insert_iterator<std::vector<std::basic_string<char16_t>>>::operator=[abi:ne180100]((uint64_t **)status, (__int128 *)&v41);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v4 += 48;
  }
  status[0] = U_ZERO_ERROR;
  regexp = uregex_openC("^(\\b\\w+\\b)(\\S+)$", 0, 0, status);
  v37[0] = regexp;
  v37[1] = (URegularExpression *)MEMORY[0x1E0DE6710];
  if (status[0] >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v25 = (char *)u_errorName(status[0]);
    v26 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v41, v25);
    v27 = std::string::insert(v26, 0, "Failed to initialise the regex expression for the subtokens: ");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&__p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v38;
  v8 = v39;
  if (v39 != v38)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
    do
    {
      if (!*(_BYTE *)(*v34 + 48 * v12 + 40))
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(*v34 + 48 * v12);
        __p.__r_.__value_.__r.__words[2] = v11;
        v36 = v11 + 1;
        nl_featurization::span_matching::span_processor::SpanProcessor::addSpansFromSubTokens(a1, v7 + 24 * v12, (__int128 *)&__p, v37, a3);
        v31 = v11 + 1;
        memset(&v41, 0, sizeof(v41));
        std::basic_string<char16_t>::reserve(&v41, *(unsigned int *)(a1 + 88));
        v7 = v38;
        v8 = v39;
        v30 = v9;
        v14 = v10;
        v15 = v13;
        if (v12 < 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3))
        {
          do
          {
            v16 = v7 + v9;
            v17 = *(char *)(v16 + 23);
            if (v17 >= 0)
              v18 = (const std::basic_string<char16_t>::value_type *)v16;
            else
              v18 = *(const std::basic_string<char16_t>::value_type **)v16;
            if (v17 >= 0)
              v19 = *(unsigned __int8 *)(v16 + 23);
            else
              v19 = *(_QWORD *)(v16 + 8);
            std::basic_string<char16_t>::append(&v41, v18, v19);
            if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
            else
              size = v41.__r_.__value_.__l.__size_;
            v21 = *(unsigned int *)(a1 + 88);
            if (*(_BYTE *)(*v34 + v14 + 40))
              v22 = v11;
            else
              v22 = v11 + 1;
            if (!*(_BYTE *)(*v34 + v14 + 40)
              && nl_featurization::pattern_trie::PatternTrie::search((uint64_t **)(a1 + 40), (uint64_t)&v41))
            {
              __p.__r_.__value_.__l.__size_ = *(_QWORD *)(*v34 + v14 + 8);
              v36 = v11 + 1;
              nl_featurization::span_matching::span_processor::SpanProcessor::appendMatchedSpan((_QWORD *)a1, (unsigned __int16 *)&v41, (__int128 *)&__p, a3);
            }
            v7 = v38;
            v8 = v39;
            v23 = v15++ >= 0xAAAAAAAAAAAAAAABLL * ((v39 - v38) >> 3);
            v14 += 48;
            v9 += 24;
            v23 = v23 || size >= v21;
            v11 = v22;
          }
          while (!v23);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v41.__r_.__value_.__l.__data_);
          v7 = v38;
          v8 = v39;
        }
        v9 = v30;
        v11 = v31;
      }
      ++v12;
      ++v13;
      v10 += 48;
      v9 += 24;
    }
    while (v12 < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3));
  }
  v37[0] = 0;
  if (regexp)
    uregex_close(regexp);
  __p.__r_.__value_.__r.__words[0] = (std::basic_string<char16_t>::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

